/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_psdd_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1022_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C76798 = xA - xB;
    const double C76797 = ae + be;
    const double C76801 = ae * be;
    const double C76815 = yA - yB;
    const double C76818 = zA - zB;
    const double C76849 = p + q;
    const double C76848 = p * q;
    const double C76854 = xP - xQ;
    const double C76853 = bs[2];
    const double C76859 = bs[3];
    const double C76870 = bs[4];
    const double C76891 = bs[5];
    const double C76927 = bs[6];
    const double C76976 = yP - yQ;
    const double C77020 = zP - zQ;
    const double C96 = bs[0];
    const double C78555 = ce + de;
    const double C78554 = ce * de;
    const double C78553 = xC - xD;
    const double C78587 = yC - yD;
    const double C78605 = zC - zD;
    const double C78792 = std::pow(C76798, 2);
    const double C78793 = 2 * C76797;
    const double C76802 = C76801 * C76798;
    const double C76831 = C76801 * C76815;
    const double C78795 = std::pow(C76815, 2);
    const double C76843 = C76801 * C76818;
    const double C78794 = std::pow(C76818, 2);
    const double C76850 = 2 * C76848;
    const double C76862 = C76854 * ae;
    const double C76861 = C76854 * be;
    const double C76858 = std::pow(C76854, 2);
    const double C76979 = C76976 * be;
    const double C76978 = C76854 * C76976;
    const double C77066 = C76976 * ae;
    const double C77065 = C76976 * C76854;
    const double C77108 = std::pow(C76976, 2);
    const double C77023 = C77020 * be;
    const double C77022 = C76854 * C77020;
    const double C77129 = C76976 * C77020;
    const double C77147 = C77020 * ae;
    const double C77146 = C77020 * C76854;
    const double C77189 = C77020 * C76976;
    const double C77206 = std::pow(C77020, 2);
    const double C78559 = 2 * C78555;
    const double C78558 = std::pow(C78555, 2);
    const double C78560 = C78553 * de;
    const double C78557 = C78553 * ce;
    const double C78556 = std::pow(C78553, 2);
    const double C78588 = std::pow(C78587, 2);
    const double C78647 = C78587 * de;
    const double C78645 = C78587 * ce;
    const double C78606 = std::pow(C78605, 2);
    const double C78689 = C78605 * de;
    const double C78687 = C78605 * ce;
    const double C78826 = C78792 * C76801;
    const double C78827 = std::pow(C78793, -1);
    const double C78829 = C78795 * C76801;
    const double C78828 = C78794 * C76801;
    const double C76852 = C76850 / C76849;
    const double C114 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C76850 / C76849, 2) -
          (bs[1] * C76850) / C76849) *
         C76801) /
        std::pow(C76797, 2);
    const double C97 = -(C76854 * bs[1] * C76850) / C76849;
    const double C721 = -(C76976 * bs[1] * C76850) / C76849;
    const double C1626 = -(C77020 * bs[1] * C76850) / C76849;
    const double C76865 = C76859 * C76862;
    const double C76876 = C76870 * C76862;
    const double C76899 = C76891 * C76862;
    const double C76939 = C76927 * C76862;
    const double C103 = (-(bs[1] * C76862 * C76850) / C76849) / C76797;
    const double C76864 = C76859 * C76861;
    const double C76873 = C76870 * C76861;
    const double C76895 = C76891 * C76861;
    const double C76935 = C76927 * C76861;
    const double C102 = (-(bs[1] * C76861 * C76850) / C76849) / C76797;
    const double C76872 = C76858 * C76870;
    const double C76894 = C76858 * C76891;
    const double C76934 = C76858 * C76927;
    const double C76981 = C76859 * C76979;
    const double C76986 = C76870 * C76979;
    const double C76993 = C76891 * C76979;
    const double C77004 = C76927 * C76979;
    const double C163 = (-(bs[1] * C76979 * C76850) / C76849) / C76797;
    const double C76980 = C76978 * ae;
    const double C77068 = C76859 * C77066;
    const double C77073 = C76870 * C77066;
    const double C77080 = C76891 * C77066;
    const double C77091 = C76927 * C77066;
    const double C304 = (-(bs[1] * C77066 * C76850) / C76849) / C76797;
    const double C77067 = C77065 * ae;
    const double C77110 = C77108 * C76870;
    const double C77115 = C77108 * C76891;
    const double C77120 = C77108 * C76927;
    const double C77025 = C76859 * C77023;
    const double C77030 = C76870 * C77023;
    const double C77037 = C76891 * C77023;
    const double C77048 = C76927 * C77023;
    const double C234 = (-(bs[1] * C77023 * C76850) / C76849) / C76797;
    const double C77024 = C77022 * ae;
    const double C77130 = C77129 * ae;
    const double C77149 = C76859 * C77147;
    const double C77154 = C76870 * C77147;
    const double C77161 = C76891 * C77147;
    const double C77172 = C76927 * C77147;
    const double C491 = (-(bs[1] * C77147 * C76850) / C76849) / C76797;
    const double C77148 = C77146 * ae;
    const double C77190 = C77189 * ae;
    const double C77208 = C77206 * C76870;
    const double C77213 = C77206 * C76891;
    const double C77218 = C77206 * C76927;
    const double C78572 = std::pow(C78559, -1);
    const double C78803 = std::pow(C78559, -2);
    const double C78573 = 2 * C78558;
    const double C78807 = C78558 * C78559;
    const double C78806 = 4 * C78558;
    const double C78796 = std::pow(C78557, 2);
    const double C78561 = C78556 * C78554;
    const double C78589 = C78588 * C78554;
    const double C78808 = std::pow(C78645, 2);
    const double C78607 = C78606 * C78554;
    const double C78810 = std::pow(C78687, 2);
    const double C78859 = C78826 / C76797;
    const double C78861 = C78829 / C76797;
    const double C78860 = C78828 / C76797;
    const double C76855 = std::pow(C76852, 2);
    const double C76860 = -C76852;
    const double C76871 = std::pow(C76852, 4);
    const double C76928 = std::pow(C76852, 6);
    const double C76982 = C76980 * be;
    const double C77069 = C77067 * be;
    const double C77026 = C77024 * be;
    const double C77131 = C77130 * be;
    const double C77150 = C77148 * be;
    const double C77191 = C77190 * be;
    const double C78839 = 4 * C78807;
    const double C78838 = C78555 * C78806;
    const double C78562 = C78561 / C78555;
    const double C78590 = C78589 / C78555;
    const double C78608 = C78607 / C78555;
    const double C78877 = -C78859;
    const double C78879 = -C78861;
    const double C78878 = -C78860;
    const double C76857 = C76853 * C76855;
    const double C115 = (ae * C76855 * C76853 * C76854 * be +
                         be * C76855 * C76853 * C76854 * ae +
                         C76854 *
                             (C76853 * C76855 + std::pow(C76854, 2) * bs[3] *
                                                    std::pow(-C76852, 3)) *
                             C76801) /
                        std::pow(C76797, 2);
    const double C169 =
        (C76855 * C76853 * C76854 * (yP - yQ) * ae * be) / std::pow(C76797, 2);
    const double C240 =
        (C76855 * C76853 * C76854 * (zP - zQ) * ae * be) / std::pow(C76797, 2);
    const double C310 =
        (C76855 * C76853 * C76976 * C76854 * ae * be) / std::pow(C76797, 2);
    const double C359 =
        ((std::pow(C76976, 2) * C76853 * C76855 - (bs[1] * C76850) / C76849) *
         C76801) /
        std::pow(C76797, 2);
    const double C435 =
        (C76855 * C76853 * C76976 * C77020 * ae * be) / std::pow(C76797, 2);
    const double C497 =
        (C76855 * C76853 * C77020 * C76854 * ae * be) / std::pow(C76797, 2);
    const double C545 =
        (C76855 * C76853 * C77020 * C76976 * ae * be) / std::pow(C76797, 2);
    const double C602 =
        ((std::pow(C77020, 2) * C76853 * C76855 - (bs[1] * C76850) / C76849) *
         C76801) /
        std::pow(C76797, 2);
    const double C104 = (C76854 * C76855 * C76853 * C76861) / C76797 -
                        (be * bs[1] * C76850) / (C76849 * C76797);
    const double C105 = (C76854 * C76855 * C76853 * C76862) / C76797 -
                        (ae * bs[1] * C76850) / (C76849 * C76797);
    const double C164 = (C76854 * C76855 * C76853 * C76979) / C76797;
    const double C235 = (C76854 * C76855 * C76853 * C77023) / C76797;
    const double C305 = (C76854 * C76855 * C76853 * C77066) / C76797;
    const double C492 = (C76854 * C76855 * C76853 * C77147) / C76797;
    const double C730 = (C76976 * C76855 * C76853 * C76861) / C76797;
    const double C731 = (C76976 * C76855 * C76853 * C76862) / C76797;
    const double C826 = (C76976 * C76855 * C76853 * C76979) / C76797 -
                        (be * bs[1] * C76850) / (C76849 * C76797);
    const double C932 = (C76976 * C76855 * C76853 * C77023) / C76797;
    const double C1038 = (C76976 * C76855 * C76853 * C77066) / C76797 -
                         (ae * bs[1] * C76850) / (C76849 * C76797);
    const double C1328 = (C76976 * C76855 * C76853 * C77147) / C76797;
    const double C1635 = (C77020 * C76855 * C76853 * C76861) / C76797;
    const double C1636 = (C77020 * C76855 * C76853 * C76862) / C76797;
    const double C1731 = (C77020 * C76855 * C76853 * C76979) / C76797;
    const double C1837 = (C77020 * C76855 * C76853 * C77023) / C76797 -
                         (be * bs[1] * C76850) / (C76849 * C76797);
    const double C1943 = (C77020 * C76855 * C76853 * C77066) / C76797;
    const double C2233 = (C77020 * C76855 * C76853 * C77147) / C76797 -
                         (ae * bs[1] * C76850) / (C76849 * C76797);
    const double C76863 = std::pow(C76860, 3);
    const double C76892 = std::pow(C76860, 5);
    const double C76880 = C76871 * C76876;
    const double C76879 = C76871 * C76873;
    const double C76878 = C76872 * C76871;
    const double C76890 = C76870 * C76871;
    const double C76988 = C76871 * C76986;
    const double C77032 = C76871 * C77030;
    const double C77075 = C76871 * C77073;
    const double C77111 = C77110 * C76871;
    const double C77156 = C76871 * C77154;
    const double C77209 = C77208 * C76871;
    const double C76946 = C76928 * C76939;
    const double C76943 = C76928 * C76935;
    const double C76942 = C76934 * C76928;
    const double C77008 = C76928 * C77004;
    const double C77052 = C76928 * C77048;
    const double C77095 = C76928 * C77091;
    const double C77121 = C77120 * C76928;
    const double C77176 = C76928 * C77172;
    const double C77219 = C77218 * C76928;
    const double C76985 = C76870 * C76982;
    const double C76992 = C76891 * C76982;
    const double C77003 = C76927 * C76982;
    const double C77072 = C76870 * C77069;
    const double C77079 = C76891 * C77069;
    const double C77090 = C76927 * C77069;
    const double C77029 = C76870 * C77026;
    const double C77036 = C76891 * C77026;
    const double C77047 = C76927 * C77026;
    const double C77133 = C76870 * C77131;
    const double C77136 = C76891 * C77131;
    const double C77139 = C76927 * C77131;
    const double C77153 = C76870 * C77150;
    const double C77160 = C76891 * C77150;
    const double C77171 = C76927 * C77150;
    const double C77193 = C76870 * C77191;
    const double C77196 = C76891 * C77191;
    const double C77199 = C76927 * C77191;
    const double C78563 = -C78562;
    const double C78591 = -C78590;
    const double C78609 = -C78608;
    const double C78889 = std::exp(C78877);
    const double C78891 = std::exp(C78879);
    const double C78890 = std::exp(C78878);
    const double C98 = C76857 * C76858 - (bs[1] * C76850) / C76849;
    const double C720 = C76976 * C76854 * C76857;
    const double C722 = C76857 * C77108 - (bs[1] * C76850) / C76849;
    const double C1625 = C77020 * C76854 * C76857;
    const double C1627 = C76857 * C77206 - (bs[1] * C76850) / C76849;
    const double C3833 = C77020 * C76976 * C76857;
    const double C76867 = C76863 * C76865;
    const double C76866 = C76863 * C76864;
    const double C76869 = C76859 * C76863;
    const double C76983 = C76863 * C76981;
    const double C77027 = C76863 * C77025;
    const double C77070 = C76863 * C77068;
    const double C77151 = C76863 * C77149;
    const double C170 = (ae * C76855 * C76853 * C76976 * be +
                         C76854 * C76863 * C76859 * C76854 * C76976 * ae * be) /
                        std::pow(C76797, 2);
    const double C241 = (ae * C76855 * C76853 * C77020 * be +
                         C76854 * C76863 * C76859 * C76854 * C77020 * ae * be) /
                        std::pow(C76797, 2);
    const double C311 = (be * C76855 * C76853 * C76976 * ae +
                         C76854 * C76863 * C76859 * C76976 * C76854 * ae * be) /
                        std::pow(C76797, 2);
    const double C360 =
        (C76854 * (C76857 + std::pow(C76976, 2) * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C436 = (C76854 * C76863 * C76859 * C76976 * C77020 * ae * be) /
                        std::pow(C76797, 2);
    const double C437 =
        (C76863 * C76859 * C77131 + C76871 * C76870 * C77131 * C76858) /
        std::pow(C76797, 2);
    const double C498 = (be * C76855 * C76853 * C77020 * ae +
                         C76854 * C76863 * C76859 * C77020 * C76854 * ae * be) /
                        std::pow(C76797, 2);
    const double C546 = (C76854 * C76863 * C76859 * C77020 * C76976 * ae * be) /
                        std::pow(C76797, 2);
    const double C547 =
        (C76863 * C76859 * C77191 + C76871 * C76870 * C77191 * C76858) /
        std::pow(C76797, 2);
    const double C603 =
        (C76854 * (C76857 + std::pow(C77020, 2) * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C745 =
        (C76976 * (C76857 + C76858 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C834 =
        (be * C76855 * C76853 * C76862 + C76976 * C76863 * C76859 * C76982) /
        std::pow(C76797, 2);
    const double C940 =
        (C76976 * C76863 * C76859 * C77026) / std::pow(C76797, 2);
    const double C1046 =
        (ae * C76855 * C76853 * C76861 + C76976 * C76863 * C76859 * C77069) /
        std::pow(C76797, 2);
    const double C1129 =
        (ae * C76855 * C76853 * C76979 + be * C76855 * C76853 * C77066 +
         C76976 * (C76857 + C77108 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C1238 =
        (ae * C76855 * C76853 * C77023 + C76976 * C76863 * C76859 * C77131) /
        std::pow(C76797, 2);
    const double C1336 =
        (C76976 * C76863 * C76859 * C77150) / std::pow(C76797, 2);
    const double C1418 =
        (be * C76855 * C76853 * C77147 + C76976 * C76863 * C76859 * C77191) /
        std::pow(C76797, 2);
    const double C1509 =
        (C76976 * (C76857 + C77206 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C1650 =
        (C77020 * (C76857 + C76858 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C1739 =
        (C77020 * C76863 * C76859 * C76982) / std::pow(C76797, 2);
    const double C1845 =
        (be * C76855 * C76853 * C76862 + C77020 * C76863 * C76859 * C77026) /
        std::pow(C76797, 2);
    const double C1951 =
        (C77020 * C76863 * C76859 * C77069) / std::pow(C76797, 2);
    const double C2034 =
        (C77020 * (C76857 + C77108 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C2143 =
        (be * C76855 * C76853 * C77066 + C77020 * C76863 * C76859 * C77131) /
        std::pow(C76797, 2);
    const double C2241 =
        (ae * C76855 * C76853 * C76861 + C77020 * C76863 * C76859 * C77150) /
        std::pow(C76797, 2);
    const double C2323 =
        (ae * C76855 * C76853 * C76979 + C77020 * C76863 * C76859 * C77191) /
        std::pow(C76797, 2);
    const double C2414 =
        (ae * C76855 * C76853 * C77023 + be * C76855 * C76853 * C77147 +
         C77020 * (C76857 + C77206 * C76859 * C76863) * C76801) /
        std::pow(C76797, 2);
    const double C76905 = C76892 * C76899;
    const double C76902 = C76892 * C76895;
    const double C76901 = C76894 * C76892;
    const double C76926 = C76891 * C76892;
    const double C76995 = C76892 * C76993;
    const double C77039 = C76892 * C77037;
    const double C77082 = C76892 * C77080;
    const double C77116 = C77115 * C76892;
    const double C77163 = C76892 * C77161;
    const double C77214 = C77213 * C76892;
    const double C76883 = C76854 * C76880;
    const double C76889 = be * C76880;
    const double C77452 = C76976 * C76880;
    const double C77693 = C77020 * C76880;
    const double C76882 = C76854 * C76879;
    const double C76888 = ae * C76879;
    const double C77470 = C76976 * C76879;
    const double C77725 = C77020 * C76879;
    const double C76900 = C76890 * ae;
    const double C76898 = C76890 * C76858;
    const double C76897 = C76854 * C76890;
    const double C76896 = C76890 * be;
    const double C77499 = C76890 * C77108;
    const double C77498 = C76976 * C76890;
    const double C77767 = C76890 * C77206;
    const double C77766 = C77020 * C76890;
    const double C76991 = ae * C76988;
    const double C76990 = C76854 * C76988;
    const double C77489 = C76976 * C76988;
    const double C77739 = C77020 * C76988;
    const double C77035 = ae * C77032;
    const double C77034 = C76854 * C77032;
    const double C77539 = C76976 * C77032;
    const double C77757 = C77020 * C77032;
    const double C77078 = be * C77075;
    const double C77077 = C76854 * C77075;
    const double C77491 = C76976 * C77075;
    const double C77715 = C77020 * C77075;
    const double C77159 = be * C77156;
    const double C77158 = C76854 * C77156;
    const double C77560 = C76976 * C77156;
    const double C77759 = C77020 * C77156;
    const double C76952 = C76854 * C76946;
    const double C77872 = C76946 * C77108;
    const double C78007 = C76976 * C76946;
    const double C78077 = C76946 * C77206;
    const double C76949 = C76854 * C76943;
    const double C77886 = C76943 * C77108;
    const double C78022 = C76976 * C76943;
    const double C78094 = C76943 * C77206;
    const double C77011 = C77008 * C76858;
    const double C77516 = C76854 * C77008;
    const double C77899 = C76976 * C77008;
    const double C78105 = C77008 * C77206;
    const double C77055 = C77052 * C76858;
    const double C77547 = C76854 * C77052;
    const double C77935 = C77052 * C77108;
    const double C78036 = C76976 * C77052;
    const double C78118 = C77020 * C77052;
    const double C77098 = C77095 * C76858;
    const double C77519 = C76854 * C77095;
    const double C77904 = C76976 * C77095;
    const double C78016 = C77095 * C77206;
    const double C77179 = C77176 * C76858;
    const double C77568 = C76854 * C77176;
    const double C77950 = C77176 * C77108;
    const double C78039 = C76976 * C77176;
    const double C78124 = C77020 * C77176;
    const double C76987 = C76871 * C76985;
    const double C76994 = C76892 * C76992;
    const double C77006 = C76928 * C77003;
    const double C77074 = C76871 * C77072;
    const double C77081 = C76892 * C77079;
    const double C77093 = C76928 * C77090;
    const double C77031 = C76871 * C77029;
    const double C77038 = C76892 * C77036;
    const double C77050 = C76928 * C77047;
    const double C77134 = C76871 * C77133;
    const double C77137 = C76892 * C77136;
    const double C77140 = C76928 * C77139;
    const double C77155 = C76871 * C77153;
    const double C77162 = C76892 * C77160;
    const double C77174 = C76928 * C77171;
    const double C77194 = C76871 * C77193;
    const double C77197 = C76892 * C77196;
    const double C77200 = C76928 * C77199;
    const double C78564 = std::exp(C78563);
    const double C78592 = std::exp(C78591);
    const double C78610 = std::exp(C78609);
    const double C27052 = C78889 * C730;
    const double C53048 = C78889 * C1635;
    const double C76803 = C76802 * C78889;
    const double C92 =
        (-(0 * be) / C76797) / (2 * C76797) -
        ((C78889 - (C76798 * 2 * ae * be * C76798 * C78889) / C76797) * be) /
            C76797;
    const double C81 = -(C78889 * C76798 * be) / C76797;
    const double C82 = C78827 * C78889;
    const double C176 = C78891 * C164;
    const double C52892 = C78891 * C1731;
    const double C76832 = C76831 * C78891;
    const double C162 = -(2 * C76801 * (yA - yB) * C78891) / C76797;
    const double C358 =
        -((C78891 - (C76815 * 2 * C76801 * C76815 * C78891) / C76797) * 2 *
          C76801) /
        C76797;
    const double C26401 =
        (-(0 * be) / C76797) / (2 * C76797) -
        ((C78891 - (C76815 * 2 * C76801 * C76815 * C78891) / C76797) * be) /
            C76797;
    const double C26402 =
        (-(2 * C76801 * C76815 * C78891) / C76797) / (2 * C76797) -
        (0 * be) / C76797;
    const double C26355 = -(C78891 * C76815 * be) / C76797;
    const double C26356 = C78827 * C78891;
    const double C247 = C78890 * C235;
    const double C26970 = C78890 * C932;
    const double C76844 = C76843 * C78890;
    const double C233 = -(2 * C76801 * (zA - zB) * C78890) / C76797;
    const double C601 =
        -((C78890 - (C76818 * 2 * C76801 * C76818 * C78890) / C76797) * 2 *
          C76801) /
        C76797;
    const double C51779 =
        (-(0 * be) / C76797) / (2 * C76797) -
        ((C78890 - (C76818 * 2 * C76801 * C76818 * C78890) / C76797) * be) /
            C76797;
    const double C51780 =
        (-(2 * C76801 * C76818 * C78890) / C76797) / (2 * C76797) -
        (0 * be) / C76797;
    const double C51693 = -(C78890 * C76818 * be) / C76797;
    const double C51694 = C78827 * C78890;
    const double C107 =
        (C76855 * C76853 * C76862 + C76854 * (C76854 * C76867 + C76857 * ae) +
         C76854 * C76857 * ae) /
        C76797;
    const double C729 = (C76976 * (C76854 * C76867 + C76857 * ae)) / C76797;
    const double C733 = (C76855 * C76853 * C76862 + C76867 * C77108) / C76797;
    const double C1634 = (C77020 * (C76854 * C76867 + C76857 * ae)) / C76797;
    const double C1638 = (C76855 * C76853 * C76862 + C76867 * C77206) / C76797;
    const double C3838 = (C77020 * C76976 * C76867) / C76797;
    const double C5462 =
        (2 * C76976 * C76867 + C76976 * (C76867 + C76880 * C77108)) / C76797;
    const double C5942 = (C77020 * (C76867 + C76880 * C77108)) / C76797;
    const double C10200 =
        (2 * C77020 * C76867 + C77020 * (C76867 + C76880 * C77206)) / C76797;
    const double C116 =
        ((C76857 + C76858 * C76859 * C76863) * C76801 +
         ae * (C76854 * C76866 + C76857 * be) +
         be * (C76854 * C76867 + C76857 * ae) +
         C76854 *
             (ae * C76866 + be * C76867 +
              C76854 *
                  (C76859 * C76863 + C76858 * bs[4] * std::pow(C76852, 4)) *
                  C76801)) /
        std::pow(C76797, 2);
    const double C106 =
        (C76855 * C76853 * C76861 + C76854 * (C76854 * C76866 + C76857 * be) +
         C76854 * C76857 * be) /
        C76797;
    const double C728 = (C76976 * (C76854 * C76866 + C76857 * be)) / C76797;
    const double C732 = (C76855 * C76853 * C76861 + C76866 * C77108) / C76797;
    const double C1633 = (C77020 * (C76854 * C76866 + C76857 * be)) / C76797;
    const double C1637 = (C76855 * C76853 * C76861 + C76866 * C77206) / C76797;
    const double C3837 = (C77020 * C76976 * C76866) / C76797;
    const double C5461 =
        (2 * C76976 * C76866 + C76976 * (C76866 + C76879 * C77108)) / C76797;
    const double C5941 = (C77020 * (C76866 + C76879 * C77108)) / C76797;
    const double C10199 =
        (2 * C77020 * C76866 + C77020 * (C76866 + C76879 * C77206)) / C76797;
    const double C76877 = C76869 * ae;
    const double C76875 = C76854 * C76869;
    const double C76874 = C76869 * be;
    const double C76881 = C76869 + C76878;
    const double C77112 = C76869 + C77111;
    const double C77210 = C76869 + C77209;
    const double C77490 = C76976 * C76869;
    const double C77758 = C77020 * C76869;
    const double C361 =
        ((C76857 + C77108 * C76859 * C76863) * C76801 +
         (C76869 + C77108 * C76870 * C76871) * C76801 * C76858) /
        std::pow(C76797, 2);
    const double C604 =
        ((C76857 + C77206 * C76859 * C76863) * C76801 +
         (C76869 + C77206 * C76870 * C76871) * C76801 * C76858) /
        std::pow(C76797, 2);
    const double C99 =
        2 * C76854 * C76857 + C76854 * (C76857 + C76869 * C76858);
    const double C724 = C76976 * (C76857 + C76869 * C76858);
    const double C1629 = C77020 * (C76857 + C76869 * C76858);
    const double C5456 =
        2 * C76976 * C76857 + C76976 * (C76857 + C76869 * C77108);
    const double C5932 = C77020 * (C76857 + C76869 * C77108);
    const double C10194 =
        2 * C77020 * C76857 + C77020 * (C76857 + C76869 * C77206);
    const double C171 =
        (C76863 * C76859 * C76982 + ae * C76854 * C76983 +
         C76854 * (ae * C76983 + C76854 * C76871 * C76870 * C76982)) /
        std::pow(C76797, 2);
    const double C165 = (C76855 * C76853 * C76979 + C76983 * C76858) / C76797;
    const double C166 =
        (2 * C76854 * C76983 + C76854 * (C76983 + C76988 * C76858)) / C76797;
    const double C827 =
        (C76976 * C76854 * C76983 + C76854 * C76857 * be) / C76797;
    const double C828 =
        (C76855 * C76853 * C76979 + C76976 * (C76976 * C76983 + C76857 * be) +
         C76976 * C76857 * be) /
        C76797;
    const double C830 = (C76976 * (C76983 + C76988 * C76858) +
                         (C76857 + C76869 * C76858) * be) /
                        C76797;
    const double C1732 = (C77020 * C76854 * C76983) / C76797;
    const double C1733 = (C76855 * C76853 * C76979 + C76983 * C77206) / C76797;
    const double C1735 = (C77020 * (C76983 + C76988 * C76858)) / C76797;
    const double C3947 = (C77020 * (C76976 * C76983 + C76857 * be)) / C76797;
    const double C10251 =
        (2 * C77020 * C76983 + C77020 * (C76983 + C76988 * C77206)) / C76797;
    const double C242 =
        (C76863 * C76859 * C77026 + ae * C76854 * C77027 +
         C76854 * (ae * C77027 + C76854 * C76871 * C76870 * C77026)) /
        std::pow(C76797, 2);
    const double C236 = (C76855 * C76853 * C77023 + C77027 * C76858) / C76797;
    const double C237 =
        (2 * C76854 * C77027 + C76854 * (C77027 + C77032 * C76858)) / C76797;
    const double C933 = (C76976 * C76854 * C77027) / C76797;
    const double C934 = (C76855 * C76853 * C77023 + C77027 * C77108) / C76797;
    const double C936 = (C76976 * (C77027 + C77032 * C76858)) / C76797;
    const double C1838 =
        (C77020 * C76854 * C77027 + C76854 * C76857 * be) / C76797;
    const double C1839 =
        (C76855 * C76853 * C77023 + C77020 * (C77020 * C77027 + C76857 * be) +
         C77020 * C76857 * be) /
        C76797;
    const double C1841 = (C77020 * (C77027 + C77032 * C76858) +
                          (C76857 + C76869 * C76858) * be) /
                         C76797;
    const double C4061 =
        (C77020 * C76976 * C77027 + C76976 * C76857 * be) / C76797;
    const double C5563 =
        (2 * C76976 * C77027 + C76976 * (C77027 + C77032 * C77108)) / C76797;
    const double C6115 = (C77020 * (C77027 + C77032 * C77108) +
                          (C76857 + C76869 * C77108) * be) /
                         C76797;
    const double C312 =
        (C76863 * C76859 * C77069 + be * C76854 * C77070 +
         C76854 * (be * C77070 + C76854 * C76871 * C76870 * C77069)) /
        std::pow(C76797, 2);
    const double C306 = (C76855 * C76853 * C77066 + C77070 * C76858) / C76797;
    const double C307 =
        (2 * C76854 * C77070 + C76854 * (C77070 + C77075 * C76858)) / C76797;
    const double C1039 =
        (C76976 * C76854 * C77070 + C76854 * C76857 * ae) / C76797;
    const double C1040 =
        (C76855 * C76853 * C77066 + C76976 * (C76976 * C77070 + C76857 * ae) +
         C76976 * C76857 * ae) /
        C76797;
    const double C1042 = (C76976 * (C77070 + C77075 * C76858) +
                          (C76857 + C76869 * C76858) * ae) /
                         C76797;
    const double C1944 = (C77020 * C76854 * C77070) / C76797;
    const double C1945 = (C76855 * C76853 * C77066 + C77070 * C77206) / C76797;
    const double C1947 = (C77020 * (C77070 + C77075 * C76858)) / C76797;
    const double C4175 = (C77020 * (C76976 * C77070 + C76857 * ae)) / C76797;
    const double C10351 =
        (2 * C77020 * C77070 + C77020 * (C77070 + C77075 * C77206)) / C76797;
    const double C499 =
        (C76863 * C76859 * C77150 + be * C76854 * C77151 +
         C76854 * (be * C77151 + C76854 * C76871 * C76870 * C77150)) /
        std::pow(C76797, 2);
    const double C493 = (C76855 * C76853 * C77147 + C77151 * C76858) / C76797;
    const double C494 =
        (2 * C76854 * C77151 + C76854 * (C77151 + C77156 * C76858)) / C76797;
    const double C1329 = (C76976 * C76854 * C77151) / C76797;
    const double C1330 = (C76855 * C76853 * C77147 + C77151 * C77108) / C76797;
    const double C1332 = (C76976 * (C77151 + C77156 * C76858)) / C76797;
    const double C2234 =
        (C77020 * C76854 * C77151 + C76854 * C76857 * ae) / C76797;
    const double C2235 =
        (C76855 * C76853 * C77147 + C77020 * (C77020 * C77151 + C76857 * ae) +
         C77020 * C76857 * ae) /
        C76797;
    const double C2237 = (C77020 * (C77151 + C77156 * C76858) +
                          (C76857 + C76869 * C76858) * ae) /
                         C76797;
    const double C4503 =
        (C77020 * C76976 * C77151 + C76976 * C76857 * ae) / C76797;
    const double C5755 =
        (2 * C76976 * C77151 + C76976 * (C77151 + C77156 * C77108)) / C76797;
    const double C6447 = (C77020 * (C77151 + C77156 * C77108) +
                          (C76857 + C76869 * C77108) * ae) /
                         C76797;
    const double C178 = C78891 * C170;
    const double C249 = C78890 * C241;
    const double C369 = C78891 * C360;
    const double C442 = C78890 * C436;
    const double C445 = C78890 * C437;
    const double C552 = C78891 * C546;
    const double C555 = C78891 * C547;
    const double C612 = C78890 * C603;
    const double C26777 = C78889 * C745;
    const double C26972 = C78890 * C940;
    const double C27054 = C78889 * C1046;
    const double C27224 = C78890 * C1238;
    const double C27302 = C78889 * C1336;
    const double C27465 = C78890 * C1509;
    const double C52779 = C78889 * C1650;
    const double C52894 = C78891 * C1739;
    const double C53050 = C78889 * C1951;
    const double C53149 = C78891 * C2034;
    const double C53314 = C78889 * C2241;
    const double C53400 = C78891 * C2323;
    const double C76909 = C76854 * C76905;
    const double C76925 = be * C76905;
    const double C77376 = C76976 * C76905;
    const double C77393 = C77020 * C76905;
    const double C77454 = C76905 * C77108;
    const double C77695 = C76905 * C77206;
    const double C76908 = C76854 * C76902;
    const double C76924 = ae * C76902;
    const double C77375 = C76976 * C76902;
    const double C77392 = C77020 * C76902;
    const double C77472 = C76902 * C77108;
    const double C77727 = C76902 * C77206;
    const double C76907 = C76890 + C76901;
    const double C76940 = C76926 * ae;
    const double C76938 = C76926 * C76858;
    const double C76937 = C76854 * C76926;
    const double C76936 = C76926 * be;
    const double C76948 = C76926 + C76942;
    const double C77122 = C76926 + C77121;
    const double C77220 = C76926 + C77219;
    const double C77901 = C76926 * C77108;
    const double C77900 = C76976 * C76926;
    const double C78015 = C76926 * C77206;
    const double C78119 = C77020 * C76926;
    const double C76997 = C76995 * C76858;
    const double C77002 = ae * C76995;
    const double C77001 = C76854 * C76995;
    const double C77497 = C76976 * C76995;
    const double C77741 = C76995 * C77206;
    const double C77989 = C77020 * C76995;
    const double C77041 = C77039 * C76858;
    const double C77046 = ae * C77039;
    const double C77045 = C76854 * C77039;
    const double C77541 = C77039 * C77108;
    const double C77765 = C77020 * C77039;
    const double C77851 = C76976 * C77039;
    const double C77084 = C77082 * C76858;
    const double C77089 = be * C77082;
    const double C77088 = C76854 * C77082;
    const double C77500 = C76976 * C77082;
    const double C77716 = C77082 * C77206;
    const double C77971 = C77020 * C77082;
    const double C77117 = C76890 + C77116;
    const double C77165 = C77163 * C76858;
    const double C77170 = be * C77163;
    const double C77169 = C76854 * C77163;
    const double C77562 = C77163 * C77108;
    const double C77768 = C77020 * C77163;
    const double C77853 = C76976 * C77163;
    const double C77215 = C76890 + C77214;
    const double C5938 = (C76976 * C76867 + C77452 * C77206) / C76797;
    const double C76893 = C76888 + C76889;
    const double C5937 = (C76976 * C76866 + C77470 * C77206) / C76797;
    const double C76904 = C76869 + C76898;
    const double C76906 = C76897 * ae;
    const double C76903 = C76897 * be;
    const double C76930 = 2 * C76897;
    const double C77484 = C76976 * C76897;
    const double C77752 = C77020 * C76897;
    const double C77504 = C76869 + C77499;
    const double C77506 = C77498 * ae;
    const double C77503 = C77498 * be;
    const double C77852 = C77020 * C77498;
    const double C77902 = 2 * C77498;
    const double C77772 = C76869 + C77767;
    const double C77774 = C77766 * ae;
    const double C77771 = C77766 * be;
    const double C78121 = 2 * C77766;
    const double C1734 = (C76854 * C76983 + C76990 * C77206) / C76797;
    const double C935 = (C76854 * C77027 + C77034 * C77108) / C76797;
    const double C77495 = C76991 + C77078;
    const double C1946 = (C76854 * C77070 + C77077 * C77206) / C76797;
    const double C77763 = C77035 + C77159;
    const double C1331 = (C76854 * C77151 + C77158 * C77108) / C76797;
    const double C77874 = C76905 + C77872;
    const double C78009 = C78007 * C77206;
    const double C78079 = C76905 + C78077;
    const double C77888 = C76902 + C77886;
    const double C78024 = C78022 * C77206;
    const double C78096 = C76902 + C78094;
    const double C77013 = C76995 + C77011;
    const double C77521 = C76976 * C77516;
    const double C77747 = C77516 * C77206;
    const double C78107 = C76995 + C78105;
    const double C77057 = C77039 + C77055;
    const double C77549 = C77547 * C77108;
    const double C77784 = C77020 * C77547;
    const double C77860 = C76976 * C77547;
    const double C77938 = C77039 + C77935;
    const double C78041 = C77020 * C78036;
    const double C77100 = C77082 + C77098;
    const double C77524 = C76976 * C77519;
    const double C77720 = C77519 * C77206;
    const double C78018 = C77082 + C78016;
    const double C77181 = C77163 + C77179;
    const double C77570 = C77568 * C77108;
    const double C77787 = C77020 * C77568;
    const double C77862 = C76976 * C77568;
    const double C77953 = C77163 + C77950;
    const double C78044 = C77020 * C78039;
    const double C172 =
        (2 * (ae * C76983 + C76854 * C76987) + ae * (C76983 + C76988 * C76858) +
         C76854 *
             (C76987 + ae * C76854 * C76988 +
              C76854 * (ae * C76988 + C76854 * C76892 * C76891 * C76982))) /
        std::pow(C76797, 2);
    const double C835 = (be * (C76854 * C76867 + C76857 * ae) +
                         C76976 * (ae * C76983 + C76854 * C76987)) /
                        std::pow(C76797, 2);
    const double C836 = (C76863 * C76859 * C76982 + be * C76976 * C76867 +
                         C76976 * (be * C76867 + C76976 * C76987)) /
                        std::pow(C76797, 2);
    const double C1740 =
        (C77020 * (ae * C76983 + C76854 * C76987)) / std::pow(C76797, 2);
    const double C1741 =
        (C76863 * C76859 * C76982 + C76987 * C77206) / std::pow(C76797, 2);
    const double C3951 =
        (C77020 * (be * C76867 + C76976 * C76987)) / std::pow(C76797, 2);
    const double C76996 = C76854 * C76994;
    const double C77453 = C76976 * C76994;
    const double C5517 =
        (2 * (be * C76867 + C76976 * C76987) + be * (C76867 + C76880 * C77108) +
         C76976 * (C76987 + be * C76976 * C76880 +
                   C76976 * (C76889 + C76976 * C76994))) /
        std::pow(C76797, 2);
    const double C10255 =
        (2 * C77020 * C76987 + C77020 * (C76987 + C76994 * C77206)) /
        std::pow(C76797, 2);
    const double C77010 = C76854 * C77006;
    const double C77870 = C76976 * C77006;
    const double C78071 = C77006 * C77206;
    const double C10257 =
        (3 * (C76987 + C76994 * C77206) +
         C77020 * (2 * C77020 * C76994 + C77020 * (C76994 + C77006 * C77206))) /
        std::pow(C76797, 2);
    const double C313 =
        (2 * (be * C77070 + C76854 * C77074) + be * (C77070 + C77075 * C76858) +
         C76854 *
             (C77074 + be * C76854 * C77075 +
              C76854 * (be * C77075 + C76854 * C76892 * C76891 * C77069))) /
        std::pow(C76797, 2);
    const double C1047 = (ae * (C76854 * C76866 + C76857 * be) +
                          C76976 * (be * C77070 + C76854 * C77074)) /
                         std::pow(C76797, 2);
    const double C1048 = (C76863 * C76859 * C77069 + ae * C76976 * C76866 +
                          C76976 * (ae * C76866 + C76976 * C77074)) /
                         std::pow(C76797, 2);
    const double C1952 =
        (C77020 * (be * C77070 + C76854 * C77074)) / std::pow(C76797, 2);
    const double C1953 =
        (C76863 * C76859 * C77069 + C77074 * C77206) / std::pow(C76797, 2);
    const double C4179 =
        (ae * C77020 * C76866 + C76976 * C77020 * C77074) / std::pow(C76797, 2);
    const double C77083 = C76854 * C77081;
    const double C77471 = C76976 * C77081;
    const double C77663 = C77020 * C77081;
    const double C5617 =
        (2 * (ae * C76866 + C76976 * C77074) + ae * (C76866 + C76879 * C77108) +
         C76976 * (C77074 + ae * C76976 * C76879 +
                   C76976 * (C76888 + C76976 * C77081))) /
        std::pow(C76797, 2);
    const double C6205 = (ae * (C76866 + C76879 * C77206) +
                          C76976 * (C77074 + C77081 * C77206)) /
                         std::pow(C76797, 2);
    const double C6207 =
        (C77020 * C77074 + ae * C77020 * C77470 +
         C76976 * (ae * C77020 * C76879 + C76976 * C77020 * C77081)) /
        std::pow(C76797, 2);
    const double C10355 =
        (2 * C77020 * C77074 + C77020 * (C77074 + C77081 * C77206)) /
        std::pow(C76797, 2);
    const double C77097 = C76854 * C77093;
    const double C77884 = C76976 * C77093;
    const double C77965 = C77093 * C77206;
    const double C77985 = C77020 * C77093;
    const double C243 =
        (2 * (ae * C77027 + C76854 * C77031) + ae * (C77027 + C77032 * C76858) +
         C76854 *
             (C77031 + ae * C76854 * C77032 +
              C76854 * (ae * C77032 + C76854 * C76892 * C76891 * C77026))) /
        std::pow(C76797, 2);
    const double C941 =
        (C76976 * (ae * C77027 + C76854 * C77031)) / std::pow(C76797, 2);
    const double C942 =
        (C76863 * C76859 * C77026 + C77031 * C77108) / std::pow(C76797, 2);
    const double C1846 = (be * (C76854 * C76867 + C76857 * ae) +
                          C77020 * (ae * C77027 + C76854 * C77031)) /
                         std::pow(C76797, 2);
    const double C1847 = (C76863 * C76859 * C77026 + be * C77020 * C76867 +
                          C77020 * (be * C76867 + C77020 * C77031)) /
                         std::pow(C76797, 2);
    const double C4065 =
        (be * C76976 * C76867 + C77020 * C76976 * C77031) / std::pow(C76797, 2);
    const double C77040 = C76854 * C77038;
    const double C77694 = C77020 * C77038;
    const double C77832 = C76976 * C77038;
    const double C5567 =
        (2 * C76976 * C77031 + C76976 * (C77031 + C77038 * C77108)) /
        std::pow(C76797, 2);
    const double C6119 = (C76976 * C77031 + be * C77020 * C77452 +
                          C77020 * (be * C77452 + C77020 * C76976 * C77038)) /
                         std::pow(C76797, 2);
    const double C6121 = (be * (C76867 + C76880 * C77108) +
                          C77020 * (C77031 + C77038 * C77108)) /
                         std::pow(C76797, 2);
    const double C10305 =
        (2 * (be * C76867 + C77020 * C77031) + be * (C76867 + C76880 * C77206) +
         C77020 * (C77031 + be * C77020 * C76880 +
                   C77020 * (C76889 + C77020 * C77038))) /
        std::pow(C76797, 2);
    const double C77054 = C76854 * C77050;
    const double C77880 = C77050 * C77108;
    const double C78006 = C76976 * C77050;
    const double C78075 = C77020 * C77050;
    const double C5569 =
        (3 * (C77031 + C77038 * C77108) +
         C76976 * (2 * C76976 * C77038 + C76976 * (C77038 + C77050 * C77108))) /
        std::pow(C76797, 2);
    const double C438 =
        (2 * C76854 * C77134 +
         C76854 * (C77134 + C76892 * C76891 * C77131 * C76858)) /
        std::pow(C76797, 2);
    const double C1239 =
        (ae * C76854 * C77027 + C76976 * C76854 * C77134) / std::pow(C76797, 2);
    const double C1240 = (C76863 * C76859 * C77131 + ae * C76976 * C77027 +
                          C76976 * (ae * C77027 + C76976 * C77134)) /
                         std::pow(C76797, 2);
    const double C2144 =
        (be * C76854 * C77070 + C77020 * C76854 * C77134) / std::pow(C76797, 2);
    const double C2145 = (C76863 * C76859 * C77131 + be * C77020 * C77070 +
                          C77020 * (be * C77070 + C77020 * C77134)) /
                         std::pow(C76797, 2);
    const double C4397 = (ae * (C77020 * C77027 + C76857 * be) +
                          C76976 * (be * C77070 + C77020 * C77134)) /
                         std::pow(C76797, 2);
    const double C77537 = C76854 * C77137;
    const double C77540 = C76976 * C77137;
    const double C77671 = C77020 * C77137;
    const double C439 =
        (3 * (C77134 + C77137 * C76858) +
         C76854 * (2 * C76854 * C77137 +
                   C76854 * (C77137 + C76928 * C76927 * C77131 * C76858))) /
        std::pow(C76797, 2);
    const double C1241 = (C76854 * C77134 + ae * C76976 * C77034 +
                          C76976 * (ae * C77034 + C76976 * C76854 * C77137)) /
                         std::pow(C76797, 2);
    const double C1242 = (ae * (C77027 + C77032 * C76858) +
                          C76976 * (C77134 + C77137 * C76858)) /
                         std::pow(C76797, 2);
    const double C2146 = (C76854 * C77134 + be * C77020 * C77077 +
                          C77020 * (be * C77077 + C77020 * C76854 * C77137)) /
                         std::pow(C76797, 2);
    const double C2147 = (be * (C77070 + C77075 * C76858) +
                          C77020 * (C77134 + C77137 * C76858)) /
                         std::pow(C76797, 2);
    const double C5709 =
        (2 * (ae * C77027 + C76976 * C77134) + ae * (C77027 + C77032 * C77108) +
         C76976 * (C77134 + ae * C76976 * C77032 +
                   C76976 * (C77035 + C76976 * C77137))) /
        std::pow(C76797, 2);
    const double C77141 = C77140 * C76858;
    const double C77546 = C76854 * C77140;
    const double C77933 = C76976 * C77140;
    const double C77972 = C77020 * C77140;
    const double C500 =
        (2 * (be * C77151 + C76854 * C77155) + be * (C77151 + C77156 * C76858) +
         C76854 *
             (C77155 + be * C76854 * C77156 +
              C76854 * (be * C77156 + C76854 * C76892 * C76891 * C77150))) /
        std::pow(C76797, 2);
    const double C1337 =
        (C76976 * (be * C77151 + C76854 * C77155)) / std::pow(C76797, 2);
    const double C1338 =
        (C76863 * C76859 * C77150 + C77155 * C77108) / std::pow(C76797, 2);
    const double C2242 = (ae * (C76854 * C76866 + C76857 * be) +
                          C77020 * (be * C77151 + C76854 * C77155)) /
                         std::pow(C76797, 2);
    const double C2243 = (C76863 * C76859 * C77150 + ae * C77020 * C76866 +
                          C77020 * (ae * C76866 + C77020 * C77155)) /
                         std::pow(C76797, 2);
    const double C4507 =
        (ae * C76976 * C76866 + C77020 * C76976 * C77155) / std::pow(C76797, 2);
    const double C77164 = C76854 * C77162;
    const double C77726 = C77020 * C77162;
    const double C77843 = C76976 * C77162;
    const double C5759 =
        (2 * C76976 * C77155 + C76976 * (C77155 + C77162 * C77108)) /
        std::pow(C76797, 2);
    const double C6451 = (C76976 * C77155 + ae * C77020 * C77470 +
                          C77020 * (ae * C77470 + C77020 * C76976 * C77162)) /
                         std::pow(C76797, 2);
    const double C6453 = (ae * (C76866 + C76879 * C77108) +
                          C77020 * (C77155 + C77162 * C77108)) /
                         std::pow(C76797, 2);
    const double C10497 =
        (2 * (ae * C76866 + C77020 * C77155) + ae * (C76866 + C76879 * C77206) +
         C77020 * (C77155 + ae * C77020 * C76879 +
                   C77020 * (C76888 + C77020 * C77162))) /
        std::pow(C76797, 2);
    const double C77178 = C76854 * C77174;
    const double C77944 = C77174 * C77108;
    const double C78021 = C76976 * C77174;
    const double C78092 = C77020 * C77174;
    const double C5761 =
        (3 * (C77155 + C77162 * C77108) +
         C76976 * (2 * C76976 * C77162 + C76976 * (C77162 + C77174 * C77108))) /
        std::pow(C76797, 2);
    const double C548 =
        (2 * C76854 * C77194 +
         C76854 * (C77194 + C76892 * C76891 * C77191 * C76858)) /
        std::pow(C76797, 2);
    const double C1419 =
        (be * C76854 * C77151 + C76976 * C76854 * C77194) / std::pow(C76797, 2);
    const double C1420 = (C76863 * C76859 * C77191 + be * C76976 * C77151 +
                          C76976 * (be * C77151 + C76976 * C77194)) /
                         std::pow(C76797, 2);
    const double C2324 =
        (ae * C76854 * C76983 + C77020 * C76854 * C77194) / std::pow(C76797, 2);
    const double C2325 = (C76863 * C76859 * C77191 + ae * C77020 * C76983 +
                          C77020 * (ae * C76983 + C77020 * C77194)) /
                         std::pow(C76797, 2);
    const double C4609 = (ae * (C76976 * C76983 + C76857 * be) +
                          C77020 * (be * C77151 + C76976 * C77194)) /
                         std::pow(C76797, 2);
    const double C77558 = C76854 * C77197;
    const double C77561 = C76976 * C77197;
    const double C77740 = C77020 * C77197;
    const double C549 =
        (3 * (C77194 + C77197 * C76858) +
         C76854 * (2 * C76854 * C77197 +
                   C76854 * (C77197 + C76928 * C76927 * C77191 * C76858))) /
        std::pow(C76797, 2);
    const double C1421 = (C76854 * C77194 + be * C76976 * C77158 +
                          C76976 * (be * C77158 + C76976 * C76854 * C77197)) /
                         std::pow(C76797, 2);
    const double C1422 = (be * (C77151 + C77156 * C76858) +
                          C76976 * (C77194 + C77197 * C76858)) /
                         std::pow(C76797, 2);
    const double C2326 = (C76854 * C77194 + ae * C77020 * C76990 +
                          C77020 * (ae * C76990 + C77020 * C76854 * C77197)) /
                         std::pow(C76797, 2);
    const double C2327 = (ae * (C76983 + C76988 * C76858) +
                          C77020 * (C77194 + C77197 * C76858)) /
                         std::pow(C76797, 2);
    const double C5805 =
        (2 * (be * C77151 + C76976 * C77194) + be * (C77151 + C77156 * C77108) +
         C76976 * (C77194 + be * C76976 * C77156 +
                   C76976 * (C77159 + C76976 * C77197))) /
        std::pow(C76797, 2);
    const double C10543 =
        (2 * (ae * C76983 + C77020 * C77194) + ae * (C76983 + C76988 * C77206) +
         C77020 * (C77194 + ae * C77020 * C76988 +
                   C77020 * (C76991 + C77020 * C77197))) /
        std::pow(C76797, 2);
    const double C77201 = C77200 * C76858;
    const double C77567 = C76854 * C77200;
    const double C77948 = C76976 * C77200;
    const double C78103 = C77020 * C77200;
    const double C78566 = C78564 * C78557;
    const double C78565 = C78564 / C78559;
    const double C78575 = C78572 * C78564;
    const double C78799 = C78564 * C78560;
    const double C78836 = C78803 * C78564;
    const double C78830 = C78564 * C78796;
    const double C78646 = C78592 / C78559;
    const double C78648 = C78592 * C78645;
    const double C78655 = C78572 * C78592;
    const double C78814 = C78592 * C78647;
    const double C78842 = C78803 * C78592;
    const double C78840 = C78592 * C78808;
    const double C78688 = C78610 / C78559;
    const double C78690 = C78610 * C78687;
    const double C78697 = C78572 * C78610;
    const double C78820 = C78610 * C78689;
    const double C78845 = C78803 * C78610;
    const double C78843 = C78610 * C78810;
    const double C93 =
        -(((-4 * C76803) / C76797 -
           (C76798 * (C78889 - (C76798 * 2 * C76803) / C76797) * 2 * C76801) /
               C76797) *
          be) /
        C76797;
    const double C94 =
        (-(2 * C76803) / C76797) / (2 * C76797) - (0 * be) / C76797;
    const double C95 =
        (-((C78889 - (C76798 * 2 * C76803) / C76797) * 2 * C76801) / C76797) /
        (2 * C76797);
    const double C26357 = -(2 * C76803) / C76797;
    const double C26358 =
        -((C78889 - (C76798 * 2 * C76803) / C76797) * 2 * C76801) / C76797;
    const double C26529 =
        -(((-4 * C76832) / C76797 -
           (C76815 * (C78891 - (C76815 * 2 * C76832) / C76797) * 2 * C76801) /
               C76797) *
          be) /
        C76797;
    const double C26530 =
        (-((C78891 - (C76815 * 2 * C76832) / C76797) * 2 * C76801) / C76797) /
        (2 * C76797);
    const double C180 = C162 * C98;
    const double C179 = C162 * C105;
    const double C177 = C162 * C97;
    const double C368 = C162 * C305;
    const double C366 = C162 * C164;
    const double C553 = C162 * C492;
    const double C843 = C162 * C720;
    const double C1748 = C162 * C1625;
    const double C52896 = C162 * C1627;
    const double C52895 = C162 * C1636;
    const double C52893 = C162 * C1626;
    const double C53148 = C162 * C1943;
    const double C53146 = C162 * C1731;
    const double C53401 = C162 * C2233;
    const double C54876 = C162 * C3833;
    const double C371 = C358 * C98;
    const double C367 = C358 * C97;
    const double C1138 = C358 * C720;
    const double C2043 = C358 * C1625;
    const double C53151 = C358 * C1627;
    const double C53147 = C358 * C1626;
    const double C55175 = C358 * C3833;
    const double C52033 =
        -(((-4 * C76844) / C76797 -
           (C76818 * (C78890 - (C76818 * 2 * C76844) / C76797) * 2 * C76801) /
               C76797) *
          be) /
        C76797;
    const double C52034 =
        (-((C78890 - (C76818 * 2 * C76844) / C76797) * 2 * C76801) / C76797) /
        (2 * C76797);
    const double C251 = C233 * C98;
    const double C250 = C233 * C105;
    const double C248 = C233 * C97;
    const double C443 = C233 * C305;
    const double C611 = C233 * C492;
    const double C609 = C233 * C235;
    const double C949 = C233 * C720;
    const double C1854 = C233 * C1625;
    const double C26974 = C233 * C722;
    const double C26973 = C233 * C731;
    const double C26971 = C233 * C721;
    const double C27225 = C233 * C1038;
    const double C27464 = C233 * C1328;
    const double C27462 = C233 * C932;
    const double C29662 = C233 * C3833;
    const double C614 = C601 * C98;
    const double C610 = C601 * C97;
    const double C1518 = C601 * C720;
    const double C2423 = C601 * C1625;
    const double C27467 = C601 * C722;
    const double C27463 = C601 * C721;
    const double C30275 = C601 * C3833;
    const double C182 = C162 * C107;
    const double C253 = C233 * C107;
    const double C845 = C162 * C729;
    const double C951 = C233 * C729;
    const double C26976 = C233 * C733;
    const double C1750 = C162 * C1634;
    const double C1856 = C233 * C1634;
    const double C52898 = C162 * C1638;
    const double C29664 = C233 * C3838;
    const double C54878 = C162 * C3838;
    const double C31100 = C233 * C5462;
    const double C31656 = C233 * C5942;
    const double C56777 = C162 * C5942;
    const double C60854 = C162 * C10200;
    const double C27061 = C78889 * C728;
    const double C27057 = C78889 * C732;
    const double C53057 = C78889 * C1633;
    const double C53053 = C78889 * C1637;
    const double C29765 = C78889 * C3837;
    const double C31149 = C78889 * C5461;
    const double C31741 = C78889 * C5941;
    const double C60947 = C78889 * C10199;
    const double C76886 = C76883 + C76877;
    const double C77493 = C77491 + C76877;
    const double C77761 = C77759 + C76877;
    const double C4398 = (ae * (C77020 * C77034 + C76875 * be) +
                          C76976 * (be * C77077 + C77020 * C76854 * C77137)) /
                         std::pow(C76797, 2);
    const double C4610 = (ae * (C76976 * C76990 + C76875 * be) +
                          C77020 * (be * C77158 + C76976 * C76854 * C77197)) /
                         std::pow(C76797, 2);
    const double C829 =
        (C76854 * C76983 + C76976 * (C76976 * C76990 + C76875 * be) +
         C76976 * C76875 * be) /
        C76797;
    const double C1041 =
        (C76854 * C77070 + C76976 * (C76976 * C77077 + C76875 * ae) +
         C76976 * C76875 * ae) /
        C76797;
    const double C1840 =
        (C76854 * C77027 + C77020 * (C77020 * C77034 + C76875 * be) +
         C77020 * C76875 * be) /
        C76797;
    const double C2236 =
        (C76854 * C77151 + C77020 * (C77020 * C77158 + C76875 * ae) +
         C77020 * C76875 * ae) /
        C76797;
    const double C3948 = (C77020 * (C76976 * C76990 + C76875 * be)) / C76797;
    const double C4062 =
        (C77020 * C76976 * C77034 + C76976 * C76875 * be) / C76797;
    const double C4176 = (C77020 * (C76976 * C77077 + C76875 * ae)) / C76797;
    const double C4504 =
        (C77020 * C76976 * C77158 + C76976 * C76875 * ae) / C76797;
    const double C723 = C76854 * C76857 + C76875 * C77108;
    const double C1628 = C76854 * C76857 + C76875 * C77206;
    const double C3834 = C77020 * C76976 * C76875;
    const double C5455 =
        2 * C76976 * C76875 + C76976 * (C76875 + C76897 * C77108);
    const double C5931 = C77020 * (C76875 + C76897 * C77108);
    const double C10193 =
        2 * C77020 * C76875 + C77020 * (C76875 + C76897 * C77206);
    const double C76885 = C76882 + C76874;
    const double C77492 = C77489 + C76874;
    const double C77760 = C77757 + C76874;
    const double C6365 = (ae * (C77027 + C77020 * (C77020 * C77032 + C76874) +
                                C77020 * C76869 * be) +
                          C76976 * (C77134 + be * C77020 * C77075 +
                                    C77020 * (C77078 + C77020 * C77137))) /
                         std::pow(C76797, 2);
    const double C76884 = C76881 * C76801;
    const double C77113 = C77112 * C76801;
    const double C77211 = C77210 * C76801;
    const double C6367 =
        (be * C77070 + C77020 * C77134 + ae * (C77020 * C77539 + C77490 * be) +
         C76976 * (ae * (C77020 * C77032 + C76874) +
                   C76976 * (C77078 + C77020 * C77137))) /
        std::pow(C76797, 2);
    const double C6113 =
        (C76976 * C77027 + C77020 * (C77020 * C77539 + C77490 * be) +
         C77020 * C77490 * be) /
        C76797;
    const double C6445 =
        (C76976 * C77151 + C77020 * (C77020 * C77560 + C77490 * ae) +
         C77020 * C77490 * ae) /
        C76797;
    const double C5930 = C76976 * C76857 + C77490 * C77206;
    const double C12225 =
        2 * C77020 * C77490 + C77020 * (C77490 + C77498 * C77206);
    const double C373 = C78891 * C361;
    const double C616 = C78890 * C604;
    const double C185 = C162 * C99;
    const double C256 = C233 * C99;
    const double C375 = C358 * C99;
    const double C618 = C601 * C99;
    const double C852 = C162 * C724;
    const double C958 = C233 * C724;
    const double C1146 = C358 * C724;
    const double C1526 = C601 * C724;
    const double C1757 = C162 * C1629;
    const double C1863 = C233 * C1629;
    const double C2051 = C358 * C1629;
    const double C2431 = C601 * C1629;
    const double C31098 = C233 * C5456;
    const double C31382 = C601 * C5456;
    const double C31654 = C233 * C5932;
    const double C32142 = C601 * C5932;
    const double C56775 = C162 * C5932;
    const double C57009 = C358 * C5932;
    const double C60852 = C162 * C10194;
    const double C60999 = C358 * C10194;
    const double C183 = C78891 * C171;
    const double C181 = C78891 * C165;
    const double C370 = C162 * C165;
    const double C184 = C78891 * C166;
    const double C374 = C162 * C166;
    const double C844 = C78891 * C827;
    const double C1137 = C162 * C827;
    const double C851 = C78891 * C830;
    const double C1145 = C162 * C830;
    const double C1749 = C78891 * C1732;
    const double C2042 = C162 * C1732;
    const double C52897 = C78891 * C1733;
    const double C53150 = C162 * C1733;
    const double C1756 = C78891 * C1735;
    const double C2050 = C162 * C1735;
    const double C54877 = C78891 * C3947;
    const double C55174 = C162 * C3947;
    const double C60851 = C78891 * C10251;
    const double C60998 = C162 * C10251;
    const double C254 = C78890 * C242;
    const double C252 = C78890 * C236;
    const double C613 = C233 * C236;
    const double C255 = C78890 * C237;
    const double C617 = C233 * C237;
    const double C950 = C78890 * C933;
    const double C1517 = C233 * C933;
    const double C26975 = C78890 * C934;
    const double C27466 = C233 * C934;
    const double C957 = C78890 * C936;
    const double C1525 = C233 * C936;
    const double C1855 = C78890 * C1838;
    const double C2422 = C233 * C1838;
    const double C1862 = C78890 * C1841;
    const double C2430 = C233 * C1841;
    const double C29663 = C78890 * C4061;
    const double C30274 = C233 * C4061;
    const double C31097 = C78890 * C5563;
    const double C31381 = C233 * C5563;
    const double C31653 = C78890 * C6115;
    const double C32141 = C233 * C6115;
    const double C372 = C162 * C306;
    const double C444 = C233 * C306;
    const double C376 = C162 * C307;
    const double C447 = C233 * C307;
    const double C1139 = C162 * C1039;
    const double C1247 = C233 * C1039;
    const double C27226 = C233 * C1040;
    const double C1147 = C162 * C1042;
    const double C1252 = C233 * C1042;
    const double C2044 = C162 * C1944;
    const double C2152 = C233 * C1944;
    const double C53152 = C162 * C1945;
    const double C2052 = C162 * C1947;
    const double C2157 = C233 * C1947;
    const double C29972 = C233 * C4175;
    const double C55176 = C162 * C4175;
    const double C61000 = C162 * C10351;
    const double C554 = C162 * C493;
    const double C615 = C233 * C493;
    const double C557 = C162 * C494;
    const double C619 = C233 * C494;
    const double C1427 = C162 * C1329;
    const double C1519 = C233 * C1329;
    const double C27468 = C233 * C1330;
    const double C1432 = C162 * C1332;
    const double C1527 = C233 * C1332;
    const double C2332 = C162 * C2234;
    const double C2424 = C233 * C2234;
    const double C53402 = C162 * C2235;
    const double C2337 = C162 * C2237;
    const double C2432 = C233 * C2237;
    const double C30276 = C233 * C4503;
    const double C55478 = C162 * C4503;
    const double C31383 = C233 * C5755;
    const double C32143 = C233 * C6447;
    const double C57253 = C162 * C6447;
    const double C76912 = C76909 + C76900;
    const double C77379 = be * C77376;
    const double C77871 = 2 * C77376;
    const double C78005 = C77020 * C77376;
    const double C12228 =
        (2 * C77020 * C77452 + C77020 * (C77452 + C77376 * C77206)) / C76797;
    const double C77396 = be * C77393;
    const double C78076 = 2 * C77393;
    const double C77456 = C76880 + C77454;
    const double C77697 = C76880 + C77695;
    const double C76911 = C76908 + C76896;
    const double C76933 = C76924 + C76925;
    const double C77378 = ae * C77375;
    const double C77885 = 2 * C77375;
    const double C78020 = C77020 * C77375;
    const double C6209 =
        (C77074 + C77081 * C77206 + ae * (C77470 + C77375 * C77206) +
         C76976 * (ae * (C76879 + C76902 * C77206) +
                   C76976 * (C77081 + C77093 * C77206))) /
        std::pow(C76797, 2);
    const double C12227 =
        (2 * C77020 * C77470 + C77020 * (C77470 + C77375 * C77206)) / C76797;
    const double C77395 = ae * C77392;
    const double C78093 = 2 * C77392;
    const double C77474 = C76879 + C77472;
    const double C77729 = C76879 + C77727;
    const double C76910 = C76907 * C76801;
    const double C76957 = C76952 + C76940;
    const double C77910 = C77904 + C76940;
    const double C78131 = C78124 + C76940;
    const double C76945 = C76890 + C76938;
    const double C76947 = C76937 * ae;
    const double C76944 = C76937 * be;
    const double C77518 = C76937 * C77108;
    const double C77517 = C76976 * C76937;
    const double C77786 = C76937 * C77206;
    const double C77785 = C77020 * C76937;
    const double C76955 = C76949 + C76936;
    const double C77907 = C77899 + C76936;
    const double C78128 = C78118 + C76936;
    const double C76954 = C76948 * C76801;
    const double C77123 = C77122 * C76801;
    const double C77221 = C77220 * C76801;
    const double C77909 = C76890 + C77901;
    const double C77911 = C77900 * ae;
    const double C77908 = C77900 * be;
    const double C78038 = C77900 * C77206;
    const double C78037 = C77020 * C77900;
    const double C78017 = C76890 + C78015;
    const double C78132 = C78119 * ae;
    const double C78129 = C78119 * be;
    const double C76999 = C76988 + C76997;
    const double C77007 = 2 * C77001;
    const double C77005 = ae * C77001;
    const double C77483 = C76976 * C77001;
    const double C77745 = C77020 * C77001;
    const double C10252 =
        (2 * C77020 * C76990 + C77020 * (C76990 + C77001 * C77206)) / C76797;
    const double C77502 = C77497 + C76896;
    const double C77743 = C76988 + C77741;
    const double C77991 = ae * C77989;
    const double C78104 = 2 * C77989;
    const double C77043 = C77032 + C77041;
    const double C77051 = 2 * C77045;
    const double C77049 = ae * C77045;
    const double C77545 = C76976 * C77045;
    const double C77751 = C77020 * C77045;
    const double C5564 =
        (2 * C76976 * C77034 + C76976 * (C77034 + C77045 * C77108)) / C76797;
    const double C6116 = (C77020 * (C77034 + C77045 * C77108) +
                          (C76875 + C76897 * C77108) * be) /
                         C76797;
    const double C77543 = C77032 + C77541;
    const double C77770 = C77765 + C76896;
    const double C77854 = C77020 * C77851;
    const double C77934 = 2 * C77851;
    const double C77932 = ae * C77851;
    const double C77086 = C77075 + C77084;
    const double C77896 = C77002 + C77089;
    const double C77094 = 2 * C77088;
    const double C77092 = be * C77088;
    const double C77485 = C76976 * C77088;
    const double C77719 = C77020 * C77088;
    const double C10352 =
        (2 * C77020 * C77077 + C77020 * (C77077 + C77088 * C77206)) / C76797;
    const double C77505 = C77500 + C76900;
    const double C77717 = C77075 + C77716;
    const double C77973 = be * C77971;
    const double C78087 = 2 * C77971;
    const double C77118 = C77117 * C76801;
    const double C77167 = C77156 + C77165;
    const double C78115 = C77046 + C77170;
    const double C77175 = 2 * C77169;
    const double C77173 = be * C77169;
    const double C77566 = C76976 * C77169;
    const double C77753 = C77020 * C77169;
    const double C5756 =
        (2 * C76976 * C77158 + C76976 * (C77158 + C77169 * C77108)) / C76797;
    const double C6448 = (C77020 * (C77158 + C77169 * C77108) +
                          (C76875 + C76897 * C77108) * ae) /
                         C76797;
    const double C77564 = C77156 + C77562;
    const double C77773 = C77768 + C76900;
    const double C77855 = C77020 * C77853;
    const double C77949 = 2 * C77853;
    const double C77947 = be * C77853;
    const double C77216 = C77215 * C76801;
    const double C31652 = C233 * C5938;
    const double C56773 = C162 * C5938;
    const double C31737 = C78889 * C5937;
    const double C100 = 3 * (C76857 + C76869 * C76858) +
                        C76854 * (2 * C76875 + C76854 * C76904);
    const double C725 = C76857 + C76869 * C76858 + C76904 * C77108;
    const double C726 = C76976 * (2 * C76875 + C76854 * C76904);
    const double C1630 = C76857 + C76869 * C76858 + C76904 * C77206;
    const double C1631 = C77020 * (2 * C76875 + C76854 * C76904);
    const double C3835 = C77020 * C76976 * C76904;
    const double C5929 = C76976 * C76875 + C77484 * C77206;
    const double C5457 = 3 * (C76857 + C76869 * C77108) +
                         C76976 * (2 * C77490 + C76976 * C77504);
    const double C5933 = C76857 + C76869 * C77108 + C77504 * C77206;
    const double C8251 = C77020 * (2 * C77490 + C76976 * C77504);
    const double C6369 =
        (C77134 + be * C77020 * C77075 + C77020 * (C77078 + C77020 * C77137) +
         ae * (C77539 + C77020 * (C77020 * C76976 * C77039 + C77503) +
               C77020 * C77498 * be) +
         C76976 * (ae * (C77032 + C77020 * (C77020 * C77039 + C76896) +
                         C77020 * C76890 * be) +
                   C76976 * (C77137 + be * C77020 * C77082 +
                             C77020 * (C77089 + C77020 * C77140)))) /
        std::pow(C76797, 2);
    const double C10195 = 3 * (C76857 + C76869 * C77206) +
                          C77020 * (2 * C77758 + C77020 * C77772);
    const double C1752 = C78891 * C1734;
    const double C2046 = C162 * C1734;
    const double C953 = C78890 * C935;
    const double C1521 = C233 * C935;
    const double C2048 = C162 * C1946;
    const double C2155 = C233 * C1946;
    const double C1430 = C162 * C1331;
    const double C1523 = C233 * C1331;
    const double C77876 = C76976 * C77874;
    const double C78011 = C77376 + C78009;
    const double C78081 = C77020 * C78079;
    const double C77890 = C76976 * C77888;
    const double C78026 = C77375 + C78024;
    const double C78098 = C77020 * C78096;
    const double C77015 = C76854 * C77013;
    const double C77638 = C76976 * C77013;
    const double C77749 = C77001 + C77747;
    const double C78109 = C77020 * C78107;
    const double C77059 = C76854 * C77057;
    const double C77811 = C76976 * C77057;
    const double C77822 = C77020 * C77057;
    const double C77551 = C77045 + C77549;
    const double C77863 = C77020 * C77860;
    const double C77940 = C76976 * C77938;
    const double C78064 = C77020 * C77938;
    const double C77102 = C76854 * C77100;
    const double C77640 = C76976 * C77100;
    const double C77721 = C77088 + C77720;
    const double C78088 = C77020 * C78018;
    const double C77183 = C76854 * C77181;
    const double C77812 = C76976 * C77181;
    const double C77824 = C77020 * C77181;
    const double C77572 = C77169 + C77570;
    const double C77864 = C77020 * C77862;
    const double C77955 = C76976 * C77953;
    const double C78066 = C77020 * C77953;
    const double C186 = C78891 * C172;
    const double C846 = C78891 * C835;
    const double C1751 = C78891 * C1740;
    const double C52899 = C78891 * C1741;
    const double C54879 = C78891 * C3951;
    const double C76998 = C76991 + C76996;
    const double C77455 = C76889 + C77453;
    const double C60853 = C78891 * C10255;
    const double C77012 = C77002 + C77010;
    const double C77873 = C76925 + C77870;
    const double C78072 = C76994 + C78071;
    const double C60858 = C78891 * C10257;
    const double C27063 = C78889 * C1047;
    const double C27059 = C78889 * C1048;
    const double C53059 = C78889 * C1952;
    const double C53055 = C78889 * C1953;
    const double C29767 = C78889 * C4179;
    const double C77085 = C77078 + C77083;
    const double C77473 = C76888 + C77471;
    const double C10357 =
        (3 * (C77074 + C77081 * C77206) +
         C77020 * (2 * C77663 + C77020 * (C77081 + C77093 * C77206))) /
        std::pow(C76797, 2);
    const double C31151 = C78889 * C5617;
    const double C31739 = C78889 * C6205;
    const double C31743 = C78889 * C6207;
    const double C60949 = C78889 * C10355;
    const double C77099 = C77089 + C77097;
    const double C77887 = C76924 + C77884;
    const double C77966 = C77081 + C77965;
    const double C77986 = C76976 * C77985;
    const double C257 = C78890 * C243;
    const double C952 = C78890 * C941;
    const double C26977 = C78890 * C942;
    const double C1857 = C78890 * C1846;
    const double C29665 = C78890 * C4065;
    const double C77042 = C77035 + C77040;
    const double C77696 = C76889 + C77694;
    const double C31099 = C78890 * C5567;
    const double C31651 = C78890 * C6119;
    const double C31655 = C78890 * C6121;
    const double C77056 = C77046 + C77054;
    const double C77881 = C77038 + C77880;
    const double C78008 = C77020 * C78006;
    const double C78078 = C76925 + C78075;
    const double C31104 = C78890 * C5569;
    const double C446 = C78890 * C438;
    const double C1248 = C78890 * C1239;
    const double C27227 = C78890 * C1240;
    const double C2153 = C78890 * C2144;
    const double C29973 = C78890 * C4397;
    const double C77542 = C77035 + C77540;
    const double C77672 = C77078 + C77671;
    const double C449 = C78890 * C439;
    const double C1249 = C78890 * C1241;
    const double C1251 = C78890 * C1242;
    const double C2154 = C78890 * C2146;
    const double C2156 = C78890 * C2147;
    const double C31243 = C78890 * C5709;
    const double C77142 = C77137 + C77141;
    const double C77548 = C76976 * C77546;
    const double C77674 = C77020 * C77546;
    const double C77937 = C77046 + C77933;
    const double C77974 = C77089 + C77972;
    const double C27307 = C78889 * C1337;
    const double C27305 = C78889 * C1338;
    const double C53319 = C78889 * C2242;
    const double C53317 = C78889 * C2243;
    const double C30073 = C78889 * C4507;
    const double C77166 = C77159 + C77164;
    const double C77728 = C76888 + C77726;
    const double C31291 = C78889 * C5759;
    const double C31981 = C78889 * C6451;
    const double C31983 = C78889 * C6453;
    const double C61101 = C78889 * C10497;
    const double C77180 = C77170 + C77178;
    const double C77945 = C77162 + C77944;
    const double C78023 = C77020 * C78021;
    const double C78095 = C76924 + C78092;
    const double C31294 = C78889 * C5761;
    const double C556 = C78891 * C548;
    const double C1428 = C78891 * C1419;
    const double C2333 = C78891 * C2324;
    const double C53403 = C78891 * C2325;
    const double C55479 = C78891 * C4609;
    const double C77563 = C77159 + C77561;
    const double C77742 = C76991 + C77740;
    const double C559 = C78891 * C549;
    const double C1429 = C78891 * C1421;
    const double C1431 = C78891 * C1422;
    const double C2334 = C78891 * C2326;
    const double C2336 = C78891 * C2327;
    const double C61148 = C78891 * C10543;
    const double C77202 = C77197 + C77201;
    const double C77569 = C76976 * C77567;
    const double C77746 = C77020 * C77567;
    const double C77952 = C77170 + C77948;
    const double C78106 = C77002 + C78103;
    const double C78567 = C78566 * C78560;
    const double C78574 = C78566 / C78573;
    const double C78800 = C78572 * C78566;
    const double C78798 = C78566 / C78555;
    const double C717 = (C78564 * std::pow(C78560, 2)) / C78558 + C78565;
    const double C78576 = C78575 * C78560;
    const double C78804 = C78557 * C78575;
    const double C78802 = 2 * C78575;
    const double C78846 = C78575 / C78806;
    const double C91 = C78575 / C78839;
    const double C14946 = C78575 / C78559;
    const double C78832 = C78799 / C78555;
    const double C718 = (-2 * C78572 * C78799) / C78555;
    const double C78862 = C78830 / C78558;
    const double C4809 = (C78592 * std::pow(C78647, 2)) / C78558 + C78646;
    const double C78649 = C78648 * C78647;
    const double C78654 = C78648 / C78573;
    const double C78812 = C78648 / C78555;
    const double C78809 = C78572 * C78648;
    const double C78656 = C78655 * C78647;
    const double C78818 = C78645 * C78655;
    const double C78817 = 2 * C78655;
    const double C78852 = C78655 / C78806;
    const double C5453 = C78655 / C78839;
    const double C14943 = C78655 / C78559;
    const double C78848 = C78814 / C78555;
    const double C4810 = (-2 * C78572 * C78814) / C78555;
    const double C78867 = C78840 / C78558;
    const double C8885 = (C78610 * std::pow(C78689, 2)) / C78558 + C78688;
    const double C78691 = C78690 * C78689;
    const double C78696 = C78690 / C78573;
    const double C78813 = C78690 / C78555;
    const double C78811 = C78572 * C78690;
    const double C78698 = C78697 * C78689;
    const double C78824 = C78687 * C78697;
    const double C78823 = 2 * C78697;
    const double C78858 = C78697 / C78806;
    const double C10192 = C78697 / C78839;
    const double C20337 = C78697 / C78559;
    const double C78854 = C78820 / C78555;
    const double C8886 = (-2 * C78572 * C78820) / C78555;
    const double C78869 = C78843 / C78558;
    const double C26784 = C26357 * C729;
    const double C26782 = C26357 * C728;
    const double C26780 = C26357 * C733;
    const double C26778 = C26357 * C732;
    const double C26776 = C26357 * C731;
    const double C26774 = C26357 * C730;
    const double C27071 = C26357 * C1042;
    const double C27069 = C26357 * C724;
    const double C27062 = C26357 * C1039;
    const double C27060 = C26357 * C720;
    const double C27058 = C26357 * C1040;
    const double C27056 = C26357 * C722;
    const double C27055 = C26357 * C1038;
    const double C27053 = C26357 * C721;
    const double C27311 = C26357 * C1332;
    const double C27309 = C26357 * C1331;
    const double C27306 = C26357 * C1329;
    const double C27304 = C26357 * C1330;
    const double C27303 = C26357 * C1328;
    const double C29444 = C26357 * C3838;
    const double C29442 = C26357 * C3837;
    const double C29766 = C26357 * C4175;
    const double C29764 = C26357 * C3833;
    const double C30072 = C26357 * C4503;
    const double C30995 = C26357 * C5462;
    const double C30993 = C26357 * C5461;
    const double C31150 = C26357 * C5456;
    const double C31292 = C26357 * C5755;
    const double C31479 = C26357 * C5942;
    const double C31477 = C26357 * C5941;
    const double C31475 = C26357 * C5938;
    const double C31473 = C26357 * C5937;
    const double C31742 = C26357 * C5932;
    const double C31984 = C26357 * C6447;
    const double C52786 = C26357 * C1634;
    const double C52784 = C26357 * C1633;
    const double C52782 = C26357 * C1638;
    const double C52780 = C26357 * C1637;
    const double C52778 = C26357 * C1636;
    const double C52776 = C26357 * C1635;
    const double C53067 = C26357 * C1947;
    const double C53065 = C26357 * C1629;
    const double C53063 = C26357 * C1946;
    const double C53058 = C26357 * C1944;
    const double C53056 = C26357 * C1625;
    const double C53054 = C26357 * C1945;
    const double C53052 = C26357 * C1627;
    const double C53051 = C26357 * C1943;
    const double C53049 = C26357 * C1626;
    const double C53323 = C26357 * C2237;
    const double C53318 = C26357 * C2234;
    const double C53316 = C26357 * C2235;
    const double C53315 = C26357 * C2233;
    const double C60795 = C26357 * C10200;
    const double C60793 = C26357 * C10199;
    const double C60950 = C26357 * C10351;
    const double C60948 = C26357 * C10194;
    const double C26791 = C26358 * C724;
    const double C26783 = C26358 * C720;
    const double C26779 = C26358 * C722;
    const double C26775 = C26358 * C721;
    const double C29443 = C26358 * C3833;
    const double C30994 = C26358 * C5456;
    const double C31478 = C26358 * C5932;
    const double C52793 = C26358 * C1629;
    const double C52785 = C26358 * C1625;
    const double C52781 = C26358 * C1627;
    const double C52777 = C26358 * C1626;
    const double C60794 = C26358 * C10194;
    const double C382 = C366 - C367;
    const double C53158 = C53146 - C53147;
    const double C625 = C609 - C610;
    const double C27470 = C27462 - C27463;
    const double C109 = (2 * (C76854 * C76867 + C76857 * ae) +
                         C76854 * (C76867 + C76854 * C76886 + C76875 * ae) +
                         (C76857 + C76869 * C76858) * ae) /
                        C76797;
    const double C735 =
        (C76854 * C76867 + C76857 * ae + C76886 * C77108) / C76797;
    const double C737 =
        (C76976 * (C76867 + C76854 * C76886 + C76875 * ae)) / C76797;
    const double C1640 =
        (C76854 * C76867 + C76857 * ae + C76886 * C77206) / C76797;
    const double C1642 =
        (C77020 * (C76867 + C76854 * C76886 + C76875 * ae)) / C76797;
    const double C3840 = (C77020 * C76976 * C76886) / C76797;
    const double C5613 = (2 * (C76976 * C77070 + C76857 * ae) +
                          C76976 * (C77070 + C76976 * C77493 + C77490 * ae) +
                          (C76857 + C76869 * C77108) * ae) /
                         C76797;
    const double C6199 =
        (C76976 * C77070 + C76857 * ae + C77493 * C77206) / C76797;
    const double C6201 =
        (C77020 * (C77070 + C76976 * C77493 + C77490 * ae)) / C76797;
    const double C10493 = (2 * (C77020 * C77151 + C76857 * ae) +
                           C77020 * (C77151 + C77020 * C77761 + C77758 * ae) +
                           (C76857 + C76869 * C77206) * ae) /
                          C76797;
    const double C4402 = C78890 * C4398;
    const double C4614 = C78891 * C4610;
    const double C847 = C78891 * C829;
    const double C1141 = C162 * C829;
    const double C1143 = C162 * C1041;
    const double C1250 = C233 * C1041;
    const double C27067 = C26357 * C1041;
    const double C1858 = C78890 * C1840;
    const double C2426 = C233 * C1840;
    const double C2335 = C162 * C2236;
    const double C2428 = C233 * C2236;
    const double C53321 = C26357 * C2236;
    const double C3956 = C78891 * C3948;
    const double C4286 = C162 * C3948;
    const double C4070 = C78890 * C4062;
    const double C4720 = C233 * C4062;
    const double C4288 = C162 * C4176;
    const double C4403 = C233 * C4176;
    const double C29771 = C26357 * C4176;
    const double C4615 = C162 * C4504;
    const double C4722 = C233 * C4504;
    const double C30075 = C26357 * C4504;
    const double C848 = C162 * C723;
    const double C954 = C233 * C723;
    const double C1142 = C358 * C723;
    const double C1522 = C601 * C723;
    const double C26787 = C26358 * C723;
    const double C27065 = C26357 * C723;
    const double C1753 = C162 * C1628;
    const double C1859 = C233 * C1628;
    const double C2047 = C358 * C1628;
    const double C2427 = C601 * C1628;
    const double C52789 = C26358 * C1628;
    const double C53061 = C26357 * C1628;
    const double C3957 = C162 * C3834;
    const double C4071 = C233 * C3834;
    const double C4287 = C358 * C3834;
    const double C4721 = C601 * C3834;
    const double C29447 = C26358 * C3834;
    const double C29769 = C26357 * C3834;
    const double C6762 = C162 * C5455;
    const double C6834 = C233 * C5455;
    const double C6974 = C358 * C5455;
    const double C7254 = C601 * C5455;
    const double C32225 = C26358 * C5455;
    const double C32430 = C26357 * C5455;
    const double C7463 = C162 * C5931;
    const double C7567 = C233 * C5931;
    const double C7771 = C358 * C5931;
    const double C8179 = C601 * C5931;
    const double C32865 = C26358 * C5931;
    const double C33166 = C26357 * C5931;
    const double C11661 = C162 * C10193;
    const double C11733 = C233 * C10193;
    const double C11873 = C358 * C10193;
    const double C12153 = C601 * C10193;
    const double C62145 = C26358 * C10193;
    const double C62349 = C26357 * C10193;
    const double C108 = (2 * (C76854 * C76866 + C76857 * be) +
                         C76854 * (C76866 + C76854 * C76885 + C76875 * be) +
                         (C76857 + C76869 * C76858) * be) /
                        C76797;
    const double C734 =
        (C76854 * C76866 + C76857 * be + C76885 * C77108) / C76797;
    const double C736 =
        (C76976 * (C76866 + C76854 * C76885 + C76875 * be)) / C76797;
    const double C1639 =
        (C76854 * C76866 + C76857 * be + C76885 * C77206) / C76797;
    const double C1641 =
        (C77020 * (C76866 + C76854 * C76885 + C76875 * be)) / C76797;
    const double C3839 = (C77020 * C76976 * C76885) / C76797;
    const double C5513 = (2 * (C76976 * C76983 + C76857 * be) +
                          C76976 * (C76983 + C76976 * C77492 + C77490 * be) +
                          (C76857 + C76869 * C77108) * be) /
                         C76797;
    const double C6027 =
        (C76976 * C76983 + C76857 * be + C77492 * C77206) / C76797;
    const double C6029 =
        (C77020 * (C76983 + C76976 * C77492 + C77490 * be)) / C76797;
    const double C10301 = (2 * (C77020 * C77027 + C76857 * be) +
                           C77020 * (C77027 + C77020 * C77760 + C77758 * be) +
                           (C76857 + C76869 * C77206) * be) /
                          C76797;
    const double C31899 = C78890 * C6365;
    const double C117 =
        (2 * (ae * C76866 + be * C76867 + C76854 * C76884) +
         ae * (C76866 + C76854 * C76885 + C76875 * be) +
         be * (C76867 + C76854 * C76886 + C76875 * ae) +
         C76854 * (C76884 + ae * C76885 + be * C76886 +
                   C76854 * (ae * C76879 + be * C76880 +
                             C76854 *
                                 (C76870 * C76871 +
                                  C76858 * bs[5] * std::pow(C76860, 5)) *
                                 C76801))) /
        std::pow(C76797, 2);
    const double C744 = (ae * C76976 * C76866 + be * C76976 * C76867 +
                         C76854 * C76976 * C76884) /
                        std::pow(C76797, 2);
    const double C746 =
        ((C76857 + C76858 * C76859 * C76863) * C76801 + C76884 * C77108) /
        std::pow(C76797, 2);
    const double C1649 = (ae * C77020 * C76866 + be * C77020 * C76867 +
                          C76854 * C77020 * C76884) /
                         std::pow(C76797, 2);
    const double C1651 =
        ((C76857 + C76858 * C76859 * C76863) * C76801 + C76884 * C77206) /
        std::pow(C76797, 2);
    const double C3845 = (C77020 * C76976 * C76884) / std::pow(C76797, 2);
    const double C362 =
        (2 * C76854 * C77113 +
         C76854 *
             (C77113 + (C76890 + C77108 * C76891 * C76892) * C76801 * C76858)) /
        std::pow(C76797, 2);
    const double C1128 = (ae * C76854 * C76983 + be * C76854 * C77070 +
                          C76976 * C76854 * C77113) /
                         std::pow(C76797, 2);
    const double C1130 =
        ((C76857 + C77108 * C76859 * C76863) * C76801 +
         ae * (C76976 * C76983 + C76857 * be) +
         be * (C76976 * C77070 + C76857 * ae) +
         C76976 * (ae * C76983 + be * C77070 + C76976 * C77113)) /
        std::pow(C76797, 2);
    const double C2033 = (C77020 * C76854 * C77113) / std::pow(C76797, 2);
    const double C2035 =
        ((C76857 + C77108 * C76859 * C76863) * C76801 + C77113 * C77206) /
        std::pow(C76797, 2);
    const double C4281 = (ae * C77020 * C76983 + be * C77020 * C77070 +
                          C76976 * C77020 * C77113) /
                         std::pow(C76797, 2);
    const double C605 =
        (2 * C76854 * C77211 +
         C76854 *
             (C77211 + (C76890 + C77206 * C76891 * C76892) * C76801 * C76858)) /
        std::pow(C76797, 2);
    const double C1508 = (C76976 * C76854 * C77211) / std::pow(C76797, 2);
    const double C1510 =
        ((C76857 + C77206 * C76859 * C76863) * C76801 + C77211 * C77108) /
        std::pow(C76797, 2);
    const double C2413 = (ae * C76854 * C77027 + be * C76854 * C77151 +
                          C77020 * C76854 * C77211) /
                         std::pow(C76797, 2);
    const double C2415 =
        ((C76857 + C77206 * C76859 * C76863) * C76801 +
         ae * (C77020 * C77027 + C76857 * be) +
         be * (C77020 * C77151 + C76857 * ae) +
         C77020 * (ae * C77027 + be * C77151 + C77020 * C77211)) /
        std::pow(C76797, 2);
    const double C4715 = (ae * C76976 * C77027 + be * C76976 * C77151 +
                          C77020 * C76976 * C77211) /
                         std::pow(C76797, 2);
    const double C31901 = C78890 * C6367;
    const double C31649 = C78890 * C6113;
    const double C32137 = C233 * C6113;
    const double C31982 = C26357 * C6445;
    const double C32139 = C233 * C6445;
    const double C57251 = C162 * C6445;
    const double C31474 = C26358 * C5930;
    const double C31650 = C233 * C5930;
    const double C31738 = C26357 * C5930;
    const double C32138 = C601 * C5930;
    const double C56771 = C162 * C5930;
    const double C57005 = C358 * C5930;
    const double C37586 = C26358 * C12225;
    const double C37729 = C233 * C12225;
    const double C37801 = C26357 * C12225;
    const double C38146 = C601 * C12225;
    const double C62818 = C162 * C12225;
    const double C63021 = C358 * C12225;
    const double C383 = C370 - C371;
    const double C384 = C374 - C375;
    const double C1153 = C1137 - C1138;
    const double C1155 = C1145 - C1146;
    const double C2058 = C2042 - C2043;
    const double C53159 = C53150 - C53151;
    const double C2060 = C2050 - C2051;
    const double C55180 = C55174 - C55175;
    const double C61006 = C60998 - C60999;
    const double C626 = C613 - C614;
    const double C627 = C617 - C618;
    const double C1533 = C1517 - C1518;
    const double C27471 = C27466 - C27467;
    const double C1535 = C1525 - C1526;
    const double C2438 = C2422 - C2423;
    const double C2440 = C2430 - C2431;
    const double C30278 = C30274 - C30275;
    const double C31389 = C31381 - C31382;
    const double C32150 = C32141 - C32142;
    const double C76915 = C76854 * C76912;
    const double C76931 = 2 * C76912;
    const double C76923 = be * C76912;
    const double C77458 = C76976 * C76912;
    const double C77699 = C77020 * C76912;
    const double C5460 =
        (2 * C76976 * C76886 + C76976 * (C76886 + C76912 * C77108)) / C76797;
    const double C5940 = (C77020 * (C76886 + C76912 * C77108)) / C76797;
    const double C10198 =
        (2 * C77020 * C76886 + C77020 * (C76886 + C76912 * C77206)) / C76797;
    const double C77869 = C76994 + C77379;
    const double C12371 =
        (2 * (be * C77452 + C77020 * C77832) + be * (C77452 + C77376 * C77206) +
         C77020 * (C77832 + be * C77020 * C77376 +
                   C77020 * (C77379 + C77020 * C76976 * C77050))) /
        std::pow(C76797, 2);
    const double C37587 = C26357 * C12228;
    const double C37731 = C233 * C12228;
    const double C62820 = C162 * C12228;
    const double C78074 = C77038 + C77396;
    const double C6123 =
        (C77031 + C77038 * C77108 + be * C77020 * C77456 +
         C77020 * (be * C77456 + C77020 * (C77038 + C77050 * C77108))) /
        std::pow(C76797, 2);
    const double C8397 =
        (be * (2 * C77452 + C76976 * C77456) +
         C77020 * (2 * C76976 * C77038 + C76976 * (C77038 + C77050 * C77108))) /
        std::pow(C76797, 2);
    const double C5464 = (3 * (C76867 + C76880 * C77108) +
                          C76976 * (2 * C77452 + C76976 * C77456)) /
                         C76797;
    const double C5944 = (C76867 + C76880 * C77108 + C77456 * C77206) / C76797;
    const double C8254 = (C77020 * (2 * C77452 + C76976 * C77456)) / C76797;
    const double C37582 =
        (2 * C77020 * C77456 + C77020 * (C77456 + C77874 * C77206)) / C76797;
    const double C10202 = (3 * (C76867 + C76880 * C77206) +
                           C77020 * (2 * C77693 + C77020 * C77697)) /
                          C76797;
    const double C76914 = C76854 * C76911;
    const double C76929 = 2 * C76911;
    const double C76922 = ae * C76911;
    const double C77476 = C76976 * C76911;
    const double C77731 = C77020 * C76911;
    const double C5459 =
        (2 * C76976 * C76885 + C76976 * (C76885 + C76911 * C77108)) / C76797;
    const double C5939 = (C77020 * (C76885 + C76911 * C77108)) / C76797;
    const double C10197 =
        (2 * C77020 * C76885 + C77020 * (C76885 + C76911 * C77206)) / C76797;
    const double C77381 = C77378 + C77379;
    const double C77883 = C77081 + C77378;
    const double C12647 =
        (2 * (ae * C77470 + C77020 * C77843) + ae * (C77470 + C77375 * C77206) +
         C77020 * (C77843 + ae * C77020 * C77375 +
                   C77020 * (C77378 + C77020 * C76976 * C77174))) /
        std::pow(C76797, 2);
    const double C31748 = C78889 * C6209;
    const double C37585 = C26357 * C12227;
    const double C37802 = C78889 * C12227;
    const double C77398 = C77395 + C77396;
    const double C78091 = C77162 + C77395;
    const double C6455 =
        (C77155 + C77162 * C77108 + ae * C77020 * C77474 +
         C77020 * (ae * C77474 + C77020 * (C77162 + C77174 * C77108))) /
        std::pow(C76797, 2);
    const double C8467 =
        (2 * (ae * C77020 * C76879 + C76976 * C77663) + ae * C77020 * C77474 +
         C76976 * (C77663 + ae * C77020 * C77375 +
                   C76976 * (C77395 + C76976 * C77020 * C77093))) /
        std::pow(C76797, 2);
    const double C8673 =
        (ae * (2 * C77470 + C76976 * C77474) +
         C77020 * (2 * C76976 * C77162 + C76976 * (C77162 + C77174 * C77108))) /
        std::pow(C76797, 2);
    const double C5463 = (3 * (C76866 + C76879 * C77108) +
                          C76976 * (2 * C77470 + C76976 * C77474)) /
                         C76797;
    const double C5943 = (C76866 + C76879 * C77108 + C77474 * C77206) / C76797;
    const double C8253 = (C77020 * (2 * C77470 + C76976 * C77474)) / C76797;
    const double C37581 =
        (2 * C77020 * C77474 + C77020 * (C77474 + C77888 * C77206)) / C76797;
    const double C12441 =
        (ae * (2 * C77725 + C77020 * C77729) +
         C76976 * (2 * C77663 + C77020 * (C77081 + C77093 * C77206))) /
        std::pow(C76797, 2);
    const double C10201 = (3 * (C76866 + C76879 * C77206) +
                           C77020 * (2 * C77725 + C77020 * C77729)) /
                          C76797;
    const double C76913 = C76854 * C76910;
    const double C77231 = C76976 * C76910;
    const double C77306 = C77020 * C76910;
    const double C747 =
        (ae * (C76866 + C76879 * C77108) + be * (C76867 + C76880 * C77108) +
         C76854 * (C76884 + C76910 * C77108)) /
        std::pow(C76797, 2);
    const double C748 =
        (C76976 * C76884 + ae * C76976 * C76885 + be * C76976 * C76886 +
         C76854 * (ae * C76976 * C76879 + be * C76976 * C76880 +
                   C76854 * C76976 * C76910)) /
        std::pow(C76797, 2);
    const double C1652 =
        (ae * (C76866 + C76879 * C77206) + be * (C76867 + C76880 * C77206) +
         C76854 * (C76884 + C76910 * C77206)) /
        std::pow(C76797, 2);
    const double C1653 =
        (C77020 * C76884 + ae * C77020 * C76885 + be * C77020 * C76886 +
         C76854 * (ae * C77020 * C76879 + be * C77020 * C76880 +
                   C76854 * C77020 * C76910)) /
        std::pow(C76797, 2);
    const double C5468 =
        (2 * C76976 * C76884 + C76976 * (C76884 + C76910 * C77108)) /
        std::pow(C76797, 2);
    const double C5950 =
        (C77020 * (C76884 + C76910 * C77108)) / std::pow(C76797, 2);
    const double C10206 =
        (2 * C77020 * C76884 + C77020 * (C76884 + C76910 * C77206)) /
        std::pow(C76797, 2);
    const double C76960 = C76854 * C76957;
    const double C77460 = C76957 * C77108;
    const double C77701 = C76957 * C77206;
    const double C77835 = C76976 * C76957;
    const double C77917 = C76976 * C77910;
    const double C78135 = C77020 * C78131;
    const double C76953 = C76945 * ae;
    const double C76951 = C76854 * C76945;
    const double C76950 = C76945 * be;
    const double C77639 = C76976 * C76945;
    const double C77823 = C77020 * C76945;
    const double C6689 =
        2 * C76976 * C76904 + C76976 * (C76904 + C76945 * C77108);
    const double C7358 = C77020 * (C76904 + C76945 * C77108);
    const double C11588 =
        2 * C77020 * C76904 + C77020 * (C76904 + C76945 * C77206);
    const double C77528 = C77524 + C76947;
    const double C77792 = C77787 + C76947;
    const double C77527 = C77521 + C76944;
    const double C77789 = C77784 + C76944;
    const double C77523 = C76897 + C77518;
    const double C77525 = C77517 * ae;
    const double C77522 = C77517 * be;
    const double C77861 = C77020 * C77517;
    const double C12226 =
        2 * C77020 * C77484 + C77020 * (C77484 + C77517 * C77206);
    const double C77791 = C76897 + C77786;
    const double C77793 = C77785 * ae;
    const double C77790 = C77785 * be;
    const double C76959 = C76854 * C76955;
    const double C77478 = C76955 * C77108;
    const double C77733 = C76955 * C77206;
    const double C77846 = C76976 * C76955;
    const double C77914 = C76976 * C77907;
    const double C78030 = C77907 * C77206;
    const double C78134 = C77020 * C78128;
    const double C76958 = C76854 * C76954;
    const double C77233 = C76954 * C77108;
    const double C77308 = C76954 * C77206;
    const double C77377 = C76976 * C76954;
    const double C77394 = C77020 * C76954;
    const double C749 =
        (C76884 + C76910 * C77108 + ae * (C76885 + C76911 * C77108) +
         be * (C76886 + C76912 * C77108) +
         C76854 * (ae * (C76879 + C76902 * C77108) +
                   be * (C76880 + C76905 * C77108) +
                   C76854 * (C76910 + C76954 * C77108))) /
        std::pow(C76797, 2);
    const double C1654 =
        (C76884 + C76910 * C77206 + ae * (C76885 + C76911 * C77206) +
         be * (C76886 + C76912 * C77206) +
         C76854 * (ae * (C76879 + C76902 * C77206) +
                   be * (C76880 + C76905 * C77206) +
                   C76854 * (C76910 + C76954 * C77206))) /
        std::pow(C76797, 2);
    const double C77124 = C77123 * C76858;
    const double C77515 = C76854 * C77123;
    const double C77897 = C76976 * C77123;
    const double C77968 = C77123 * C77206;
    const double C77990 = C77020 * C77123;
    const double C77222 = C77221 * C76858;
    const double C77578 = C76854 * C77221;
    const double C77959 = C77221 * C77108;
    const double C78035 = C76976 * C77221;
    const double C78116 = C77020 * C77221;
    const double C77918 = C77909 * ae;
    const double C77916 = C76976 * C77909;
    const double C77915 = C77909 * be;
    const double C78065 = C77020 * C77909;
    const double C37580 =
        2 * C77020 * C77504 + C77020 * (C77504 + C77909 * C77206);
    const double C78048 = C78044 + C77911;
    const double C78047 = C78041 + C77908;
    const double C78043 = C77498 + C78038;
    const double C78045 = C78037 * ae;
    const double C78042 = C78037 * be;
    const double C78125 = C78017 * ae;
    const double C78122 = C77020 * C78017;
    const double C78120 = C78017 * be;
    const double C167 = (3 * (C76983 + C76988 * C76858) +
                         C76854 * (2 * C76990 + C76854 * C76999)) /
                        C76797;
    const double C831 =
        (C76983 + C76988 * C76858 + C76976 * (C76976 * C76999 + C76904 * be) +
         C76976 * C76904 * be) /
        C76797;
    const double C832 = (C76976 * (2 * C76990 + C76854 * C76999) +
                         (2 * C76875 + C76854 * C76904) * be) /
                        C76797;
    const double C1736 = (C76983 + C76988 * C76858 + C76999 * C77206) / C76797;
    const double C1737 = (C77020 * (2 * C76990 + C76854 * C76999)) / C76797;
    const double C3949 = (C77020 * (C76976 * C76999 + C76904 * be)) / C76797;
    const double C11658 =
        (2 * C77020 * C76999 + C77020 * (C76999 + C77013 * C77206)) / C76797;
    const double C77009 = C76994 + C77005;
    const double C10544 =
        (2 * (ae * C76990 + C77020 * C77558) + ae * (C76990 + C77001 * C77206) +
         C77020 * (C77558 + ae * C77020 * C77001 +
                   C77020 * (C77005 + C77020 * C77567))) /
        std::pow(C76797, 2);
    const double C77486 = C77483 + C76903;
    const double C11662 = C78891 * C10252;
    const double C11872 = C162 * C10252;
    const double C77507 = C76976 * C77502;
    const double C77898 = 2 * C77502;
    const double C77894 = ae * C77502;
    const double C78028 = C77020 * C77502;
    const double C12299 =
        (2 * C77020 * C77492 + C77020 * (C77492 + C77502 * C77206)) / C76797;
    const double C10253 = (3 * (C76983 + C76988 * C77206) +
                           C77020 * (2 * C77739 + C77020 * C77743)) /
                          C76797;
    const double C78102 = C77197 + C77991;
    const double C238 = (3 * (C77027 + C77032 * C76858) +
                         C76854 * (2 * C77034 + C76854 * C77043)) /
                        C76797;
    const double C937 = (C77027 + C77032 * C76858 + C77043 * C77108) / C76797;
    const double C938 = (C76976 * (2 * C77034 + C76854 * C77043)) / C76797;
    const double C1842 =
        (C77027 + C77032 * C76858 + C77020 * (C77020 * C77043 + C76904 * be) +
         C77020 * C76904 * be) /
        C76797;
    const double C1843 = (C77020 * (2 * C77034 + C76854 * C77043) +
                          (2 * C76875 + C76854 * C76904) * be) /
                         C76797;
    const double C4063 =
        (C77020 * C76976 * C77043 + C76976 * C76904 * be) / C76797;
    const double C6831 =
        (2 * C76976 * C77043 + C76976 * (C77043 + C77057 * C77108)) / C76797;
    const double C7564 = (C77020 * (C77043 + C77057 * C77108) +
                          (C76904 + C76945 * C77108) * be) /
                         C76797;
    const double C77053 = C77038 + C77049;
    const double C5710 =
        (2 * (ae * C77034 + C76976 * C77537) + ae * (C77034 + C77045 * C77108) +
         C76976 * (C77537 + ae * C76976 * C77045 +
                   C76976 * (C77049 + C76976 * C76854 * C77140))) /
        std::pow(C76797, 2);
    const double C6114 =
        (C76976 * C77034 + C77020 * (C77020 * C77545 + C77484 * be) +
         C77020 * C77484 * be) /
        C76797;
    const double C77754 = C77751 + C76903;
    const double C6835 = C78890 * C5564;
    const double C7253 = C233 * C5564;
    const double C7568 = C78890 * C6116;
    const double C8178 = C233 * C6116;
    const double C5565 = (3 * (C77027 + C77032 * C77108) +
                          C76976 * (2 * C77539 + C76976 * C77543)) /
                         C76797;
    const double C6117 =
        (C77027 + C77032 * C77108 + C77020 * (C77020 * C77543 + C77504 * be) +
         C77020 * C77504 * be) /
        C76797;
    const double C8395 = (C77020 * (2 * C77539 + C76976 * C77543) +
                          (2 * C77490 + C76976 * C77504) * be) /
                         C76797;
    const double C77775 = C77020 * C77770;
    const double C77996 = ae * C77770;
    const double C78117 = 2 * C77770;
    const double C77856 = C77854 + C77503;
    const double C77936 = C77137 + C77932;
    const double C308 = (3 * (C77070 + C77075 * C76858) +
                         C76854 * (2 * C77077 + C76854 * C77086)) /
                        C76797;
    const double C1043 =
        (C77070 + C77075 * C76858 + C76976 * (C76976 * C77086 + C76904 * ae) +
         C76976 * C76904 * ae) /
        C76797;
    const double C1044 = (C76976 * (2 * C77077 + C76854 * C77086) +
                          (2 * C76875 + C76854 * C76904) * ae) /
                         C76797;
    const double C1948 = (C77070 + C77075 * C76858 + C77086 * C77206) / C76797;
    const double C1949 = (C77020 * (2 * C77077 + C76854 * C77086)) / C76797;
    const double C4177 = (C77020 * (C76976 * C77086 + C76904 * ae)) / C76797;
    const double C11802 =
        (2 * C77020 * C77086 + C77020 * (C77086 + C77100 * C77206)) / C76797;
    const double C77096 = C77081 + C77092;
    const double C77514 = C77005 + C77092;
    const double C6366 = (ae * (C77034 + C77020 * (C77020 * C77045 + C76903) +
                                C77020 * C76897 * be) +
                          C76976 * (C77537 + be * C77020 * C77088 +
                                    C77020 * (C77092 + C77020 * C77546))) /
                         std::pow(C76797, 2);
    const double C6368 =
        (be * C77077 + C77020 * C77537 + ae * (C77020 * C77545 + C77484 * be) +
         C76976 * (ae * (C77020 * C77045 + C76903) +
                   C76976 * (C77092 + C77020 * C77546))) /
        std::pow(C76797, 2);
    const double C77487 = C77485 + C76906;
    const double C11874 = C162 * C10352;
    const double C11946 = C233 * C10352;
    const double C62351 = C26357 * C10352;
    const double C77508 = C76976 * C77505;
    const double C77903 = 2 * C77505;
    const double C77895 = be * C77505;
    const double C12439 =
        (2 * C77020 * C77493 + C77020 * (C77493 + C77505 * C77206)) / C76797;
    const double C35806 =
        (3 * (C77493 + C77505 * C77206) +
         C77020 * (2 * C77020 * C77505 + C77020 * (C77505 + C77910 * C77206))) /
        C76797;
    const double C10353 = (3 * (C77070 + C77075 * C77206) +
                           C77020 * (2 * C77715 + C77020 * C77717)) /
                          C76797;
    const double C77975 = C77137 + C77973;
    const double C77993 = C77991 + C77973;
    const double C77482 = C76854 * C77118;
    const double C77496 = C76976 * C77118;
    const double C77667 = C77020 * C77118;
    const double C363 =
        (3 * (C77113 + C77118 * C76858) +
         C76854 * (2 * C76854 * C77118 +
                   C76854 * (C77118 + (C76926 + C77108 * C76927 * C76928) *
                                          C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C1131 =
        (C76854 * C77113 + ae * (C76976 * C76990 + C76875 * be) +
         be * (C76976 * C77077 + C76875 * ae) +
         C76976 * (ae * C76990 + be * C77077 + C76976 * C76854 * C77118)) /
        std::pow(C76797, 2);
    const double C1132 =
        (ae * (C76983 + C76988 * C76858) + be * (C77070 + C77075 * C76858) +
         C76976 * (C77113 + C77118 * C76858)) /
        std::pow(C76797, 2);
    const double C2036 =
        (C76854 * C77113 + C76854 * C77118 * C77206) / std::pow(C76797, 2);
    const double C2037 =
        (C77020 * (C77113 + C77118 * C76858)) / std::pow(C76797, 2);
    const double C4282 = (ae * C77020 * C76990 + be * C77020 * C77077 +
                          C76976 * C77020 * C76854 * C77118) /
                         std::pow(C76797, 2);
    const double C5664 =
        (2 * (ae * C76983 + be * C77070 + C76976 * C77113) +
         ae * (C76983 + C76976 * C77492 + C77490 * be) +
         be * (C77070 + C76976 * C77493 + C77490 * ae) +
         C76976 * (C77113 + ae * C77492 + be * C77493 +
                   C76976 * (C76991 + C77078 + C76976 * C77118))) /
        std::pow(C76797, 2);
    const double C6286 =
        (ae * (C76983 + C76988 * C77206) + be * (C77070 + C77075 * C77206) +
         C76976 * (C77113 + C77118 * C77206)) /
        std::pow(C76797, 2);
    const double C6288 =
        (C77020 * C77113 + ae * C77020 * C77492 + be * C77020 * C77493 +
         C76976 * (ae * C77020 * C76988 + be * C77020 * C77075 +
                   C76976 * C77020 * C77118)) /
        std::pow(C76797, 2);
    const double C6289 =
        (C77113 + C77118 * C77206 + ae * (C77492 + C77502 * C77206) +
         be * (C77493 + C77505 * C77206) +
         C76976 * (ae * (C76988 + C76995 * C77206) +
                   be * (C77075 + C77082 * C77206) +
                   C76976 * (C77118 + C77123 * C77206))) /
        std::pow(C76797, 2);
    const double C10402 =
        (2 * C77020 * C77113 + C77020 * (C77113 + C77118 * C77206)) /
        std::pow(C76797, 2);
    const double C495 = (3 * (C77151 + C77156 * C76858) +
                         C76854 * (2 * C77158 + C76854 * C77167)) /
                        C76797;
    const double C1333 = (C77151 + C77156 * C76858 + C77167 * C77108) / C76797;
    const double C1334 = (C76976 * (2 * C77158 + C76854 * C77167)) / C76797;
    const double C2238 =
        (C77151 + C77156 * C76858 + C77020 * (C77020 * C77167 + C76904 * ae) +
         C77020 * C76904 * ae) /
        C76797;
    const double C2239 = (C77020 * (2 * C77158 + C76854 * C77167) +
                          (2 * C76875 + C76854 * C76904) * ae) /
                         C76797;
    const double C4505 =
        (C77020 * C76976 * C77167 + C76976 * C76904 * ae) / C76797;
    const double C7114 =
        (2 * C76976 * C77167 + C76976 * (C77167 + C77181 * C77108)) / C76797;
    const double C7975 = (C77020 * (C77167 + C77181 * C77108) +
                          (C76904 + C76945 * C77108) * ae) /
                         C76797;
    const double C77177 = C77162 + C77173;
    const double C77782 = C77049 + C77173;
    const double C5806 =
        (2 * (be * C77158 + C76976 * C77558) + be * (C77158 + C77169 * C77108) +
         C76976 * (C77558 + be * C76976 * C77169 +
                   C76976 * (C77173 + C76976 * C76854 * C77200))) /
        std::pow(C76797, 2);
    const double C6446 =
        (C76976 * C77158 + C77020 * (C77020 * C77566 + C77484 * ae) +
         C77020 * C77484 * ae) /
        C76797;
    const double C77755 = C77753 + C76906;
    const double C7184 = C162 * C5756;
    const double C7255 = C233 * C5756;
    const double C32632 = C26357 * C5756;
    const double C8077 = C162 * C6448;
    const double C8180 = C233 * C6448;
    const double C33464 = C26357 * C6448;
    const double C5757 = (3 * (C77151 + C77156 * C77108) +
                          C76976 * (2 * C77560 + C76976 * C77564)) /
                         C76797;
    const double C6449 =
        (C77151 + C77156 * C77108 + C77020 * (C77020 * C77564 + C77504 * ae) +
         C77020 * C77504 * ae) /
        C76797;
    const double C8671 = (C77020 * (2 * C77560 + C76976 * C77564) +
                          (2 * C77490 + C76976 * C77504) * ae) /
                         C76797;
    const double C77776 = C77020 * C77773;
    const double C78123 = 2 * C77773;
    const double C78114 = be * C77773;
    const double C77857 = C77855 + C77506;
    const double C77951 = C77197 + C77947;
    const double C78034 = C77932 + C77947;
    const double C77574 = C76854 * C77216;
    const double C77764 = C77020 * C77216;
    const double C77850 = C76976 * C77216;
    const double C606 =
        (3 * (C77211 + C77216 * C76858) +
         C76854 * (2 * C76854 * C77216 +
                   C76854 * (C77216 + (C76926 + C77206 * C76927 * C76928) *
                                          C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C1511 =
        (C76854 * C77211 + C76854 * C77216 * C77108) / std::pow(C76797, 2);
    const double C1512 =
        (C76976 * (C77211 + C77216 * C76858)) / std::pow(C76797, 2);
    const double C2416 =
        (C76854 * C77211 + ae * (C77020 * C77034 + C76875 * be) +
         be * (C77020 * C77158 + C76875 * ae) +
         C77020 * (ae * C77034 + be * C77158 + C77020 * C76854 * C77216)) /
        std::pow(C76797, 2);
    const double C2417 =
        (ae * (C77027 + C77032 * C76858) + be * (C77151 + C77156 * C76858) +
         C77020 * (C77211 + C77216 * C76858)) /
        std::pow(C76797, 2);
    const double C4716 = (ae * C76976 * C77034 + be * C76976 * C77158 +
                          C77020 * C76976 * C76854 * C77216) /
                         std::pow(C76797, 2);
    const double C5852 =
        (2 * C76976 * C77211 + C76976 * (C77211 + C77216 * C77108)) /
        std::pow(C76797, 2);
    const double C5853 =
        (3 * (C77211 + C77216 * C77108) +
         C76976 * (2 * C76976 * C77216 + C76976 * (C77216 + C77221 * C77108))) /
        std::pow(C76797, 2);
    const double C6612 =
        (C76976 * C77211 + ae * (C77020 * C77539 + C77490 * be) +
         be * (C77020 * C77560 + C77490 * ae) +
         C77020 * (ae * C77539 + be * C77560 + C77020 * C76976 * C77216)) /
        std::pow(C76797, 2);
    const double C6614 =
        (ae * (C77027 + C77032 * C77108) + be * (C77151 + C77156 * C77108) +
         C77020 * (C77211 + C77216 * C77108)) /
        std::pow(C76797, 2);
    const double C6615 =
        (C77211 + C77216 * C77108 + ae * (C77020 * C77543 + C77504 * be) +
         be * (C77020 * C77564 + C77504 * ae) +
         C77020 * (ae * C77543 + be * C77564 +
                   C77020 * (C77216 + C77221 * C77108))) /
        std::pow(C76797, 2);
    const double C8809 =
        (ae * (2 * C77539 + C76976 * C77543) +
         be * (2 * C77560 + C76976 * C77564) +
         C77020 * (2 * C76976 * C77216 + C76976 * (C77216 + C77221 * C77108))) /
        std::pow(C76797, 2);
    const double C10590 =
        (2 * (ae * C77027 + be * C77151 + C77020 * C77211) +
         ae * (C77027 + C77020 * C77760 + C77758 * be) +
         be * (C77151 + C77020 * C77761 + C77758 * ae) +
         C77020 * (C77211 + ae * C77760 + be * C77761 +
                   C77020 * (C77035 + C77159 + C77020 * C77216))) /
        std::pow(C76797, 2);
    const double C188 = C162 * C100;
    const double C259 = C233 * C100;
    const double C379 = C358 * C100;
    const double C622 = C601 * C100;
    const double C855 = C162 * C725;
    const double C961 = C233 * C725;
    const double C1150 = C358 * C725;
    const double C1530 = C601 * C725;
    const double C26795 = C26358 * C725;
    const double C27072 = C26357 * C725;
    const double C2598 = C162 * C726;
    const double C2670 = C233 * C726;
    const double C2810 = C358 * C726;
    const double C3090 = C601 * C726;
    const double C28209 = C26358 * C726;
    const double C28414 = C26357 * C726;
    const double C1760 = C162 * C1630;
    const double C1866 = C233 * C1630;
    const double C2055 = C358 * C1630;
    const double C2435 = C601 * C1630;
    const double C52797 = C26358 * C1630;
    const double C53068 = C26357 * C1630;
    const double C3237 = C162 * C1631;
    const double C3309 = C233 * C1631;
    const double C3449 = C358 * C1631;
    const double C3729 = C601 * C1631;
    const double C54139 = C26358 * C1631;
    const double C54343 = C26357 * C1631;
    const double C3960 = C162 * C3835;
    const double C4074 = C233 * C3835;
    const double C4291 = C358 * C3835;
    const double C4725 = C601 * C3835;
    const double C29451 = C26358 * C3835;
    const double C29772 = C26357 * C3835;
    const double C10796 = C162 * C5929;
    const double C10900 = C233 * C5929;
    const double C11104 = C358 * C5929;
    const double C11512 = C601 * C5929;
    const double C36124 = C26358 * C5929;
    const double C36425 = C26357 * C5929;
    const double C30998 = C26358 * C5457;
    const double C31101 = C233 * C5457;
    const double C31153 = C26357 * C5457;
    const double C31386 = C601 * C5457;
    const double C31482 = C26358 * C5933;
    const double C31657 = C233 * C5933;
    const double C31745 = C26357 * C5933;
    const double C32146 = C601 * C5933;
    const double C56778 = C162 * C5933;
    const double C57013 = C358 * C5933;
    const double C33733 = C26358 * C8251;
    const double C33876 = C233 * C8251;
    const double C33948 = C26357 * C8251;
    const double C34293 = C601 * C8251;
    const double C58939 = C162 * C8251;
    const double C59142 = C358 * C8251;
    const double C31904 = C78890 * C6369;
    const double C60798 = C26358 * C10195;
    const double C60855 = C162 * C10195;
    const double C60951 = C26357 * C10195;
    const double C61003 = C358 * C10195;
    const double C77878 = C77871 + C77876;
    const double C35674 = (3 * (C77452 + C77376 * C77206) +
                           C77020 * (2 * C78005 + C77020 * C78011)) /
                          C76797;
    const double C78083 = C78076 + C78081;
    const double C77892 = C77885 + C77890;
    const double C35673 = (3 * (C77470 + C77375 * C77206) +
                           C77020 * (2 * C78020 + C77020 * C78026)) /
                          C76797;
    const double C78100 = C78093 + C78098;
    const double C77017 = C77007 + C77015;
    const double C10254 = (3 * (C76990 + C77001 * C77206) +
                           C77020 * (2 * C77745 + C77020 * C77749)) /
                          C76797;
    const double C78111 = C78104 + C78109;
    const double C77061 = C77051 + C77059;
    const double C5566 = (3 * (C77034 + C77045 * C77108) +
                          C76976 * (2 * C77545 + C76976 * C77551)) /
                         C76797;
    const double C77942 = C77934 + C77940;
    const double C77104 = C77094 + C77102;
    const double C10354 = (3 * (C77077 + C77088 * C77206) +
                           C77020 * (2 * C77719 + C77020 * C77721)) /
                          C76797;
    const double C78089 = C78087 + C78088;
    const double C77185 = C77175 + C77183;
    const double C5758 = (3 * (C77158 + C77169 * C77108) +
                          C76976 * (2 * C77566 + C76976 * C77572)) /
                         C76797;
    const double C77957 = C77949 + C77955;
    const double C173 =
        (3 * (C76987 + ae * C76990 + C76854 * C76998) +
         ae * (2 * C76990 + C76854 * C76999) +
         C76854 * (2 * C76998 + ae * C76999 +
                   C76854 * (C76994 + ae * C76854 * C76995 +
                             C76854 * (ae * C76995 +
                                       C76854 * C76928 * C76927 * C76982)))) /
        std::pow(C76797, 2);
    const double C837 = (ae * C76983 + C76854 * C76987 + be * C76976 * C76886 +
                         C76976 * (be * C76886 + C76976 * C76998)) /
                        std::pow(C76797, 2);
    const double C838 = (be * (C76867 + C76854 * C76886 + C76875 * ae) +
                         C76976 * (C76987 + ae * C76990 + C76854 * C76998)) /
                        std::pow(C76797, 2);
    const double C1742 =
        (ae * C76983 + C76854 * C76987 + C76998 * C77206) / std::pow(C76797, 2);
    const double C1743 = (C77020 * (C76987 + ae * C76990 + C76854 * C76998)) /
                         std::pow(C76797, 2);
    const double C3952 =
        (C77020 * (be * C76886 + C76976 * C76998)) / std::pow(C76797, 2);
    const double C5519 =
        (3 * (C76987 + be * C77452 + C76976 * C77455) +
         be * (2 * C77452 + C76976 * C77456) +
         C76976 * (2 * C77455 + be * C77456 +
                   C76976 * (C76994 + C77379 +
                             C76976 * (C76925 + C76976 * C77006)))) /
        std::pow(C76797, 2);
    const double C6033 =
        (be * C76867 + C76976 * C76987 + C77455 * C77206) / std::pow(C76797, 2);
    const double C6035 = (C77020 * (C76987 + be * C77452 + C76976 * C77455)) /
                         std::pow(C76797, 2);
    const double C6037 =
        (C76987 + be * C77452 + C76976 * C77455 +
         (C76994 + C77379 + C76976 * (C76925 + C76976 * C77006)) * C77206) /
        std::pow(C76797, 2);
    const double C8327 =
        (C77020 *
         (2 * C77455 + be * C77456 +
          C76976 * (C76994 + C77379 + C76976 * (C76925 + C76976 * C77006)))) /
        std::pow(C76797, 2);
    const double C12301 =
        (2 * C77020 * C77455 +
         C77020 * (C77455 + (C76925 + C76976 * C77006) * C77206)) /
        std::pow(C76797, 2);
    const double C77014 = C76854 * C77012;
    const double C77459 = C76976 * C77012;
    const double C10256 =
        (2 * C77020 * C76998 + C77020 * (C76998 + C77012 * C77206)) /
        std::pow(C76797, 2);
    const double C10258 =
        (3 * (C76998 + C77012 * C77206) +
         C77020 *
             (2 * C77020 * C77012 +
              C77020 * (C77012 + (ae * C77008 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C76982) *
                                     C77206))) /
        std::pow(C76797, 2);
    const double C77875 = C76976 * C77873;
    const double C35719 =
        (3 * (C77455 + C77873 * C77206) +
         C77020 *
             (2 * C77020 * C77873 +
              C77020 * (C77873 + (be * C76946 + C76976 * std::pow(C76860, 7) *
                                                    bs[7] * C76982) *
                                     C77206))) /
        std::pow(C76797, 2);
    const double C60849 =
        (4 * (2 * C77020 * C76994 + C77020 * C78072) +
         C77020 * (3 * C78072 +
                   C77020 * (2 * C77020 * C77006 +
                             C77020 * (C77006 + std::pow(C76860, 7) * bs[7] *
                                                    C76982 * C77206)))) /
        std::pow(C76797, 2);
    const double C314 =
        (3 * (C77074 + be * C77077 + C76854 * C77085) +
         be * (2 * C77077 + C76854 * C77086) +
         C76854 * (2 * C77085 + be * C77086 +
                   C76854 * (C77081 + be * C76854 * C77082 +
                             C76854 * (be * C77082 +
                                       C76854 * C76928 * C76927 * C77069)))) /
        std::pow(C76797, 2);
    const double C1049 = (be * C77070 + C76854 * C77074 + ae * C76976 * C76885 +
                          C76976 * (ae * C76885 + C76976 * C77085)) /
                         std::pow(C76797, 2);
    const double C1050 = (ae * (C76866 + C76854 * C76885 + C76875 * be) +
                          C76976 * (C77074 + be * C77077 + C76854 * C77085)) /
                         std::pow(C76797, 2);
    const double C1954 =
        (be * C77070 + C76854 * C77074 + C77085 * C77206) / std::pow(C76797, 2);
    const double C1955 = (C77020 * (C77074 + be * C77077 + C76854 * C77085)) /
                         std::pow(C76797, 2);
    const double C4180 =
        (ae * C77020 * C76885 + C76976 * C77020 * C77085) / std::pow(C76797, 2);
    const double C5619 =
        (3 * (C77074 + ae * C77470 + C76976 * C77473) +
         ae * (2 * C77470 + C76976 * C77474) +
         C76976 * (2 * C77473 + ae * C77474 +
                   C76976 * (C77081 + C77378 +
                             C76976 * (C76924 + C76976 * C77093)))) /
        std::pow(C76797, 2);
    const double C60954 = C78889 * C10357;
    const double C77101 = C76854 * C77099;
    const double C77477 = C76976 * C77099;
    const double C77665 = C77020 * C77099;
    const double C6206 = (ae * (C76885 + C76911 * C77206) +
                          C76976 * (C77085 + C77099 * C77206)) /
                         std::pow(C76797, 2);
    const double C10356 =
        (2 * C77020 * C77085 + C77020 * (C77085 + C77099 * C77206)) /
        std::pow(C76797, 2);
    const double C77889 = C76976 * C77887;
    const double C31735 =
        (2 * (ae * C77729 + C76976 * C77966) + ae * (C77474 + C77888 * C77206) +
         C76976 * (C77966 + ae * (C77375 + C76976 * C76943 * C77206) +
                   C76976 * (ae * (C76902 + C76943 * C77206) +
                             C76976 * (C77093 + std::pow(C76860, 7) * bs[7] *
                                                    C77069 * C77206)))) /
        std::pow(C76797, 2);
    const double C35807 =
        (ae * (3 * C77729 +
               C77020 * (2 * C77392 + C77020 * (C76902 + C76943 * C77206))) +
         C76976 * (3 * C77966 +
                   C77020 * (2 * C77985 +
                             C77020 * (C77093 + std::pow(C76860, 7) * bs[7] *
                                                    C77069 * C77206)))) /
        std::pow(C76797, 2);
    const double C37799 =
        (2 * C77663 + C77020 * C77966 + ae * (2 * C78020 + C77020 * C78026) +
         C76976 * (ae * (2 * C77392 + C77020 * (C76902 + C76943 * C77206)) +
                   C76976 * (2 * C77985 +
                             C77020 * (C77093 + std::pow(C76860, 7) * bs[7] *
                                                    C77069 * C77206)))) /
        std::pow(C76797, 2);
    const double C60945 =
        (4 * (2 * C77663 + C77020 * C77966) +
         C77020 * (3 * C77966 +
                   C77020 * (2 * C77985 +
                             C77020 * (C77093 + std::pow(C76860, 7) * bs[7] *
                                                    C77069 * C77206)))) /
        std::pow(C76797, 2);
    const double C77987 = C77395 + C77986;
    const double C244 =
        (3 * (C77031 + ae * C77034 + C76854 * C77042) +
         ae * (2 * C77034 + C76854 * C77043) +
         C76854 * (2 * C77042 + ae * C77043 +
                   C76854 * (C77038 + ae * C76854 * C77039 +
                             C76854 * (ae * C77039 +
                                       C76854 * C76928 * C76927 * C77026)))) /
        std::pow(C76797, 2);
    const double C943 =
        (ae * C77027 + C76854 * C77031 + C77042 * C77108) / std::pow(C76797, 2);
    const double C944 = (C76976 * (C77031 + ae * C77034 + C76854 * C77042)) /
                        std::pow(C76797, 2);
    const double C1848 = (ae * C77027 + C76854 * C77031 + be * C77020 * C76886 +
                          C77020 * (be * C76886 + C77020 * C77042)) /
                         std::pow(C76797, 2);
    const double C1849 = (be * (C76867 + C76854 * C76886 + C76875 * ae) +
                          C77020 * (C77031 + ae * C77034 + C76854 * C77042)) /
                         std::pow(C76797, 2);
    const double C4066 =
        (be * C76976 * C76886 + C77020 * C76976 * C77042) / std::pow(C76797, 2);
    const double C10307 =
        (3 * (C77031 + be * C77693 + C77020 * C77696) +
         be * (2 * C77693 + C77020 * C77697) +
         C77020 * (2 * C77696 + be * C77697 +
                   C77020 * (C77038 + C77396 +
                             C77020 * (C76925 + C77020 * C77050)))) /
        std::pow(C76797, 2);
    const double C77058 = C76854 * C77056;
    const double C77700 = C77020 * C77056;
    const double C77834 = C76976 * C77056;
    const double C5568 =
        (2 * C76976 * C77042 + C76976 * (C77042 + C77056 * C77108)) /
        std::pow(C76797, 2);
    const double C5570 =
        (3 * (C77042 + C77056 * C77108) +
         C76976 *
             (2 * C76976 * C77056 +
              C76976 * (C77056 + (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C6122 = (be * (C76886 + C76912 * C77108) +
                          C77020 * (C77042 + C77056 * C77108)) /
                         std::pow(C76797, 2);
    const double C31095 =
        (4 * (2 * C77832 + C76976 * C77881) +
         C76976 * (3 * C77881 +
                   C76976 * (2 * C76976 * C77050 +
                             C76976 * (C77050 + std::pow(C76860, 7) * bs[7] *
                                                    C77026 * C77108)))) /
        std::pow(C76797, 2);
    const double C37727 =
        (2 * (be * C77456 + C77020 * C77881) + be * (C77456 + C77874 * C77206) +
         C77020 * (C77881 + be * C77020 * C77874 +
                   C77020 * (be * C77874 +
                             C77020 * (C77050 + std::pow(C76860, 7) * bs[7] *
                                                    C77026 * C77108)))) /
        std::pow(C76797, 2);
    const double C78010 = C77379 + C78008;
    const double C78080 = C77020 * C78078;
    const double C5711 =
        (3 * (C77134 + ae * C77539 + C76976 * C77542) +
         ae * (2 * C77539 + C76976 * C77543) +
         C76976 * (2 * C77542 + ae * C77543 +
                   C76976 * (C77137 + ae * C76976 * C77039 +
                             C76976 * (C77046 + C76976 * C77140)))) /
        std::pow(C76797, 2);
    const double C8603 =
        (2 * (ae * (C77020 * C77032 + C76874) + C76976 * C77672) +
         ae * (C77020 * C77543 + C77504 * be) +
         C76976 * (C77672 + ae * (C77020 * C76976 * C77039 + C77503) +
                   C76976 * (ae * (C77020 * C77039 + C76896) +
                             C76976 * (C77089 + C77020 * C77140)))) /
        std::pow(C76797, 2);
    const double C10447 =
        (2 * (be * C77070 + C77020 * C77134) + be * (C77070 + C77075 * C77206) +
         C77020 * (C77134 + be * C77020 * C77075 + C77020 * C77672)) /
        std::pow(C76797, 2);
    const double C10449 =
        (3 * (C77134 + be * C77715 + C77020 * C77672) +
         be * (2 * C77715 + C77020 * C77717) +
         C77020 * (2 * C77672 + be * C77717 +
                   C77020 * (C77137 + be * C77020 * C77082 +
                             C77020 * (C77089 + C77020 * C77140)))) /
        std::pow(C76797, 2);
    const double C440 =
        (4 * (2 * C76854 * C77137 + C76854 * C77142) +
         C76854 * (3 * C77142 +
                   C76854 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C1243 = (C77134 + C77137 * C76858 + ae * C76976 * C77043 +
                          C76976 * (ae * C77043 + C76976 * C77142)) /
                         std::pow(C76797, 2);
    const double C1244 = (ae * (2 * C77034 + C76854 * C77043) +
                          C76976 * (2 * C76854 * C77137 + C76854 * C77142)) /
                         std::pow(C76797, 2);
    const double C2148 = (C77134 + C77137 * C76858 + be * C77020 * C77086 +
                          C77020 * (be * C77086 + C77020 * C77142)) /
                         std::pow(C76797, 2);
    const double C2149 = (be * (2 * C77077 + C76854 * C77086) +
                          C77020 * (2 * C76854 * C77137 + C76854 * C77142)) /
                         std::pow(C76797, 2);
    const double C4399 = (ae * (C77020 * C77043 + C76904 * be) +
                          C76976 * (be * C77086 + C77020 * C77142)) /
                         std::pow(C76797, 2);
    const double C7045 =
        (2 * (ae * C77043 + C76976 * C77142) + ae * (C77043 + C77057 * C77108) +
         C76976 * (C77142 + ae * C76976 * C77057 +
                   C76976 * (ae * C77057 +
                             C76976 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C11944 =
        (2 * (be * C77086 + C77020 * C77142) + be * (C77086 + C77100 * C77206) +
         C77020 * (C77142 + be * C77020 * C77100 +
                   C77020 * (be * C77100 +
                             C77020 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C77550 = C77049 + C77548;
    const double C77675 = C77092 + C77674;
    const double C77939 = C76976 * C77937;
    const double C77976 = C77020 * C77974;
    const double C77997 = C76976 * C77974;
    const double C501 =
        (3 * (C77155 + be * C77158 + C76854 * C77166) +
         be * (2 * C77158 + C76854 * C77167) +
         C76854 * (2 * C77166 + be * C77167 +
                   C76854 * (C77162 + be * C76854 * C77163 +
                             C76854 * (be * C77163 +
                                       C76854 * C76928 * C76927 * C77150)))) /
        std::pow(C76797, 2);
    const double C1339 =
        (be * C77151 + C76854 * C77155 + C77166 * C77108) / std::pow(C76797, 2);
    const double C1340 = (C76976 * (C77155 + be * C77158 + C76854 * C77166)) /
                         std::pow(C76797, 2);
    const double C2244 = (be * C77151 + C76854 * C77155 + ae * C77020 * C76885 +
                          C77020 * (ae * C76885 + C77020 * C77166)) /
                         std::pow(C76797, 2);
    const double C2245 = (ae * (C76866 + C76854 * C76885 + C76875 * be) +
                          C77020 * (C77155 + be * C77158 + C76854 * C77166)) /
                         std::pow(C76797, 2);
    const double C4508 =
        (ae * C76976 * C76885 + C77020 * C76976 * C77166) / std::pow(C76797, 2);
    const double C10499 =
        (3 * (C77155 + ae * C77725 + C77020 * C77728) +
         ae * (2 * C77725 + C77020 * C77729) +
         C77020 * (2 * C77728 + ae * C77729 +
                   C77020 * (C77162 + C77395 +
                             C77020 * (C76924 + C77020 * C77174)))) /
        std::pow(C76797, 2);
    const double C77182 = C76854 * C77180;
    const double C77732 = C77020 * C77180;
    const double C77845 = C76976 * C77180;
    const double C5760 =
        (2 * C76976 * C77166 + C76976 * (C77166 + C77180 * C77108)) /
        std::pow(C76797, 2);
    const double C5762 =
        (3 * (C77166 + C77180 * C77108) +
         C76976 *
             (2 * C76976 * C77180 +
              C76976 * (C77180 + (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C6454 = (ae * (C76885 + C76911 * C77108) +
                          C77020 * (C77166 + C77180 * C77108)) /
                         std::pow(C76797, 2);
    const double C31289 =
        (4 * (2 * C77843 + C76976 * C77945) +
         C76976 * (3 * C77945 +
                   C76976 * (2 * C76976 * C77174 +
                             C76976 * (C77174 + std::pow(C76860, 7) * bs[7] *
                                                    C77150 * C77108)))) /
        std::pow(C76797, 2);
    const double C38007 =
        (2 * (ae * C77474 + C77020 * C77945) + ae * (C77474 + C77888 * C77206) +
         C77020 * (C77945 + ae * C77020 * C77888 +
                   C77020 * (ae * C77888 +
                             C77020 * (C77174 + std::pow(C76860, 7) * bs[7] *
                                                    C77150 * C77108)))) /
        std::pow(C76797, 2);
    const double C78025 = C77378 + C78023;
    const double C78097 = C77020 * C78095;
    const double C5807 =
        (3 * (C77194 + be * C77560 + C76976 * C77563) +
         be * (2 * C77560 + C76976 * C77564) +
         C76976 * (2 * C77563 + be * C77564 +
                   C76976 * (C77197 + be * C76976 * C77163 +
                             C76976 * (C77170 + C76976 * C77200)))) /
        std::pow(C76797, 2);
    const double C6531 = (be * C77151 + C76976 * C77194 + ae * C77020 * C77492 +
                          C77020 * (ae * C77492 + C77020 * C77563)) /
                         std::pow(C76797, 2);
    const double C6533 = (ae * (C76983 + C76976 * C77492 + C77490 * be) +
                          C77020 * (C77194 + be * C77560 + C76976 * C77563)) /
                         std::pow(C76797, 2);
    const double C12715 =
        (2 * (ae * C77492 + C77020 * C77563) + ae * (C77492 + C77502 * C77206) +
         C77020 *
             (C77563 + ae * C77020 * C77502 +
              C77020 * (ae * C77502 + C77020 * (C77170 + C76976 * C77200)))) /
        std::pow(C76797, 2);
    const double C10545 =
        (3 * (C77194 + ae * C77739 + C77020 * C77742) +
         ae * (2 * C77739 + C77020 * C77743) +
         C77020 * (2 * C77742 + ae * C77743 +
                   C77020 * (C77197 + ae * C77020 * C76995 +
                             C77020 * (C77002 + C77020 * C77200)))) /
        std::pow(C76797, 2);
    const double C550 =
        (4 * (2 * C76854 * C77197 + C76854 * C77202) +
         C76854 * (3 * C77202 +
                   C76854 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C1423 = (C77194 + C77197 * C76858 + be * C76976 * C77167 +
                          C76976 * (be * C77167 + C76976 * C77202)) /
                         std::pow(C76797, 2);
    const double C1424 = (be * (2 * C77158 + C76854 * C77167) +
                          C76976 * (2 * C76854 * C77197 + C76854 * C77202)) /
                         std::pow(C76797, 2);
    const double C2328 = (C77194 + C77197 * C76858 + ae * C77020 * C76999 +
                          C77020 * (ae * C76999 + C77020 * C77202)) /
                         std::pow(C76797, 2);
    const double C2329 = (ae * (2 * C76990 + C76854 * C76999) +
                          C77020 * (2 * C76854 * C77197 + C76854 * C77202)) /
                         std::pow(C76797, 2);
    const double C4611 = (ae * (C76976 * C76999 + C76904 * be) +
                          C77020 * (be * C77167 + C76976 * C77202)) /
                         std::pow(C76797, 2);
    const double C7182 =
        (2 * (be * C77167 + C76976 * C77202) + be * (C77167 + C77181 * C77108) +
         C76976 * (C77202 + be * C76976 * C77181 +
                   C76976 * (be * C77181 +
                             C76976 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C12081 =
        (2 * (ae * C76999 + C77020 * C77202) + ae * (C76999 + C77013 * C77206) +
         C77020 * (C77202 + ae * C77020 * C77013 +
                   C77020 * (ae * C77013 +
                             C77020 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C77571 = C77173 + C77569;
    const double C77748 = C77005 + C77746;
    const double C77954 = C76976 * C77952;
    const double C78029 = C77020 * C77952;
    const double C78108 = C77020 * C78106;
    const double C78568 = C78567 / C78558;
    const double C78833 = 2 * C78800;
    const double C78577 = C78576 / C78555;
    const double C78837 = C78804 / C78573;
    const double C78863 = C78798 - C78832;
    const double C13455 = -C78832;
    const double C78880 = C78862 + C78565;
    const double C78650 = C78649 / C78558;
    const double C78841 = 2 * C78809;
    const double C78657 = C78656 / C78555;
    const double C78851 = C78818 / C78573;
    const double C78871 = C78812 - C78848;
    const double C12851 = -C78848;
    const double C78883 = C78867 + C78646;
    const double C78692 = C78691 / C78558;
    const double C78844 = 2 * C78811;
    const double C78699 = C78698 / C78555;
    const double C78857 = C78824 / C78573;
    const double C78874 = C78813 - C78854;
    const double C17369 = -C78854;
    const double C78884 = C78869 + C78688;
    const double C26800 = C26782 - C26783;
    const double C26799 = C26778 - C26779;
    const double C26798 = C26774 - C26775;
    const double C29454 = C29442 - C29443;
    const double C31001 = C30993 - C30994;
    const double C31486 = C31477 - C31478;
    const double C52802 = C52784 - C52785;
    const double C52801 = C52780 - C52781;
    const double C52800 = C52776 - C52777;
    const double C60801 = C60793 - C60794;
    const double C386 = C382 - C368;
    const double C53160 = C53158 - C53148;
    const double C629 = C625 - C611;
    const double C27472 = C27470 - C27464;
    const double C187 = C162 * C109;
    const double C258 = C233 * C109;
    const double C850 = C162 * C735;
    const double C956 = C233 * C735;
    const double C26788 = C26357 * C735;
    const double C854 = C162 * C737;
    const double C960 = C233 * C737;
    const double C26792 = C26357 * C737;
    const double C1755 = C162 * C1640;
    const double C1861 = C233 * C1640;
    const double C52790 = C26357 * C1640;
    const double C1759 = C162 * C1642;
    const double C1865 = C233 * C1642;
    const double C52794 = C26357 * C1642;
    const double C3959 = C162 * C3840;
    const double C4073 = C233 * C3840;
    const double C29448 = C26357 * C3840;
    const double C31152 = C26357 * C5613;
    const double C31244 = C233 * C5613;
    const double C31740 = C26357 * C6199;
    const double C31900 = C233 * C6199;
    const double C57006 = C162 * C6199;
    const double C31744 = C26357 * C6201;
    const double C31902 = C233 * C6201;
    const double C57010 = C162 * C6201;
    const double C61102 = C26357 * C10493;
    const double C61149 = C162 * C10493;
    const double C1154 = C1141 - C1142;
    const double C1534 = C1521 - C1522;
    const double C2059 = C2046 - C2047;
    const double C2439 = C2426 - C2427;
    const double C4294 = C4286 - C4287;
    const double C4728 = C4720 - C4721;
    const double C26786 = C26357 * C734;
    const double C27064 = C78889 * C734;
    const double C26790 = C26357 * C736;
    const double C27068 = C78889 * C736;
    const double C52788 = C26357 * C1639;
    const double C53060 = C78889 * C1639;
    const double C52792 = C26357 * C1641;
    const double C53064 = C78889 * C1641;
    const double C29446 = C26357 * C3839;
    const double C29768 = C78889 * C3839;
    const double C56770 = C78891 * C6027;
    const double C57004 = C162 * C6027;
    const double C56774 = C78891 * C6029;
    const double C57008 = C162 * C6029;
    const double C26785 = C78889 * C744;
    const double C26781 = C78889 * C746;
    const double C52787 = C78889 * C1649;
    const double C52783 = C78889 * C1651;
    const double C29445 = C78889 * C3845;
    const double C377 = C78891 * C362;
    const double C1140 = C78891 * C1128;
    const double C2045 = C78891 * C2033;
    const double C53153 = C78891 * C2035;
    const double C55177 = C78891 * C4281;
    const double C620 = C78890 * C605;
    const double C1520 = C78890 * C1508;
    const double C27469 = C78890 * C1510;
    const double C2425 = C78890 * C2413;
    const double C30277 = C78890 * C4715;
    const double C31485 = C31473 - C31474;
    const double C32149 = C32137 - C32138;
    const double C387 = C383 - C372;
    const double C388 = C384 - C376;
    const double C1157 = C1153 - C1139;
    const double C1159 = C1155 - C1147;
    const double C2062 = C2058 - C2044;
    const double C53161 = C53159 - C53152;
    const double C2064 = C2060 - C2052;
    const double C55181 = C55180 - C55176;
    const double C61008 = C61006 - C61000;
    const double C630 = C626 - C615;
    const double C631 = C627 - C619;
    const double C1537 = C1533 - C1519;
    const double C27473 = C27471 - C27468;
    const double C1539 = C1535 - C1527;
    const double C2442 = C2438 - C2424;
    const double C2444 = C2440 - C2432;
    const double C30279 = C30278 - C30276;
    const double C31391 = C31389 - C31383;
    const double C32153 = C32150 - C32143;
    const double C76918 = C76880 + C76915;
    const double C5518 =
        (2 * (be * C76886 + C76976 * C76998) + be * (C76886 + C76912 * C77108) +
         C76976 * (C76998 + be * C76976 * C76912 +
                   C76976 * (C76923 + C76976 * C77012))) /
        std::pow(C76797, 2);
    const double C10306 =
        (2 * (be * C76886 + C77020 * C77042) + be * (C76886 + C76912 * C77206) +
         C77020 * (C77042 + be * C77020 * C76912 +
                   C77020 * (C76923 + C77020 * C77056))) /
        std::pow(C76797, 2);
    const double C6120 = (C76976 * C77042 + be * C77020 * C77458 +
                          C77020 * (be * C77458 + C77020 * C76976 * C77056)) /
                         std::pow(C76797, 2);
    const double C5936 = (C76976 * C76886 + C77458 * C77206) / C76797;
    const double C6764 = C162 * C5460;
    const double C6836 = C233 * C5460;
    const double C32226 = C26357 * C5460;
    const double C7465 = C162 * C5940;
    const double C7569 = C233 * C5940;
    const double C32866 = C26357 * C5940;
    const double C11663 = C162 * C10198;
    const double C11735 = C233 * C10198;
    const double C62146 = C26357 * C10198;
    const double C37732 = C78890 * C12371;
    const double C31660 = C78890 * C6123;
    const double C33879 = C78890 * C8397;
    const double C30999 = C26357 * C5464;
    const double C31103 = C233 * C5464;
    const double C31483 = C26357 * C5944;
    const double C31659 = C233 * C5944;
    const double C56780 = C162 * C5944;
    const double C33734 = C26357 * C8254;
    const double C33878 = C233 * C8254;
    const double C58941 = C162 * C8254;
    const double C60799 = C26357 * C10202;
    const double C60857 = C162 * C10202;
    const double C76917 = C76879 + C76914;
    const double C76932 = C76910 + C76922;
    const double C5618 =
        (2 * (ae * C76885 + C76976 * C77085) + ae * (C76885 + C76911 * C77108) +
         C76976 * (C77085 + ae * C76976 * C76911 +
                   C76976 * (C76922 + C76976 * C77099))) /
        std::pow(C76797, 2);
    const double C10498 =
        (2 * (ae * C76885 + C77020 * C77166) + ae * (C76885 + C76911 * C77206) +
         C77020 * (C77166 + ae * C77020 * C76911 +
                   C77020 * (C76922 + C77020 * C77180))) /
        std::pow(C76797, 2);
    const double C6208 =
        (C77020 * C77085 + ae * C77020 * C77476 +
         C76976 * (ae * C77020 * C76911 + C76976 * C77020 * C77099)) /
        std::pow(C76797, 2);
    const double C6210 =
        (C77085 + C77099 * C77206 + ae * (C77476 + C76976 * C76955 * C77206) +
         C76976 *
             (ae * (C76911 + C76955 * C77206) +
              C76976 * (C77099 + (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069) *
                                     C77206))) /
        std::pow(C76797, 2);
    const double C6452 = (C76976 * C77166 + ae * C77020 * C77476 +
                          C77020 * (ae * C77476 + C77020 * C76976 * C77180)) /
                         std::pow(C76797, 2);
    const double C5935 = (C76976 * C76885 + C77476 * C77206) / C76797;
    const double C32224 = C26357 * C5459;
    const double C32431 = C78889 * C5459;
    const double C32864 = C26357 * C5939;
    const double C33167 = C78889 * C5939;
    const double C62144 = C26357 * C10197;
    const double C62350 = C78889 * C10197;
    const double C38010 = C78889 * C12647;
    const double C37589 = C37585 - C37586;
    const double C31986 = C78889 * C6455;
    const double C33951 = C78889 * C8467;
    const double C34157 = C78889 * C8673;
    const double C30997 = C26357 * C5463;
    const double C31154 = C78889 * C5463;
    const double C31481 = C26357 * C5943;
    const double C31746 = C78889 * C5943;
    const double C33732 = C26357 * C8253;
    const double C33949 = C78889 * C8253;
    const double C37804 = C78889 * C12441;
    const double C60797 = C26357 * C10201;
    const double C60952 = C78889 * C10201;
    const double C76916 = C76893 + C76913;
    const double C3846 =
        (ae * C77020 * C76976 * C76879 + be * C77020 * C76976 * C76880 +
         C76854 * C77020 * C77231) /
        std::pow(C76797, 2);
    const double C5948 =
        (C76976 * C76884 + C77231 * C77206) / std::pow(C76797, 2);
    const double C26789 = C78889 * C747;
    const double C26793 = C78889 * C748;
    const double C52791 = C78889 * C1652;
    const double C52795 = C78889 * C1653;
    const double C30996 = C78889 * C5468;
    const double C31480 = C78889 * C5950;
    const double C60796 = C78889 * C10206;
    const double C76963 = C76905 + C76960;
    const double C77462 = C76912 + C77460;
    const double C77703 = C76912 + C77701;
    const double C12230 =
        (2 * C77020 * C77458 + C77020 * (C77458 + C77835 * C77206)) / C76797;
    const double C77922 = C77082 + C77917;
    const double C78138 = C77163 + C78135;
    const double C77642 = C77640 + C76953;
    const double C77826 = C77824 + C76953;
    const double C76956 = C76930 + C76951;
    const double C77641 = C77638 + C76950;
    const double C77825 = C77822 + C76950;
    const double C11207 =
        (ae * (C77043 + C77020 * (C77020 * C77057 + C76950) +
               C77020 * C76945 * be) +
         C76976 * (C77142 + be * C77020 * C77100 +
                   C77020 * (be * C77100 +
                             C77020 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C7874 =
        (be * C77086 + C77020 * C77142 +
         ae * (C77020 * C76976 * C77057 + C77639 * be) +
         C76976 * (ae * (C77020 * C77057 + C76950) +
                   C76976 * (be * C77100 +
                             C77020 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C10897 =
        (C76976 * C77043 + C77020 * (C77020 * C77811 + C77639 * be) +
         C77020 * C77639 * be) /
        C76797;
    const double C11308 =
        (C76976 * C77167 + C77020 * (C77020 * C77812 + C77639 * ae) +
         C77020 * C77639 * ae) /
        C76797;
    const double C10691 = C76976 * C76904 + C77639 * C77206;
    const double C77530 = C76976 * C77528;
    const double C77795 = C77020 * C77792;
    const double C77529 = C76976 * C77527;
    const double C77794 = C77020 * C77789;
    const double C6118 =
        (C77034 + C77045 * C77108 + C77020 * (C77020 * C77551 + C77523 * be) +
         C77020 * C77523 * be) /
        C76797;
    const double C6450 =
        (C77158 + C77169 * C77108 + C77020 * (C77020 * C77572 + C77523 * ae) +
         C77020 * C77523 * ae) /
        C76797;
    const double C8396 = (C77020 * (2 * C77545 + C76976 * C77551) +
                          (2 * C77484 + C76976 * C77523) * be) /
                         C76797;
    const double C8672 = (C77020 * (2 * C77566 + C76976 * C77572) +
                          (2 * C77484 + C76976 * C77523) * ae) /
                         C76797;
    const double C5458 = 3 * (C76875 + C76897 * C77108) +
                         C76976 * (2 * C77484 + C76976 * C77523);
    const double C5934 = C76875 + C76897 * C77108 + C77523 * C77206;
    const double C8252 = C77020 * (2 * C77484 + C76976 * C77523);
    const double C77866 = C77864 + C77525;
    const double C77865 = C77863 + C77522;
    const double C6370 =
        (C77537 + be * C77020 * C77088 + C77020 * (C77092 + C77020 * C77546) +
         ae * (C77545 + C77020 * (C77020 * C76976 * C77547 + C77522) +
               C77020 * C77517 * be) +
         C76976 * (ae * (C77045 + C77020 * (C77020 * C77547 + C76944) +
                         C77020 * C76937 * be) +
                   C76976 * (C77546 + be * C77020 * C77519 +
                             C77020 * (be * C77519 + C77020 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77131)))) /
        std::pow(C76797, 2);
    const double C10196 = 3 * (C76875 + C76897 * C77206) +
                          C77020 * (2 * C77752 + C77020 * C77791);
    const double C76962 = C76902 + C76959;
    const double C77480 = C76911 + C77478;
    const double C77735 = C76911 + C77733;
    const double C12229 =
        (2 * C77020 * C77476 + C77020 * (C77476 + C77846 * C77206)) / C76797;
    const double C77920 = C76995 + C77914;
    const double C78032 = C77502 + C78030;
    const double C78137 = C77039 + C78134;
    const double C76961 = C76933 + C76958;
    const double C77234 = C76910 + C77233;
    const double C77309 = C76910 + C77308;
    const double C77380 = C76854 * C77377;
    const double C77412 = C77020 * C77377;
    const double C3847 =
        (C77020 * C77231 + ae * C77020 * C76976 * C76911 +
         be * C77020 * C76976 * C76912 +
         C76854 * (ae * C77020 * C77375 + be * C77020 * C77376 +
                   C76854 * C77020 * C77377)) /
        std::pow(C76797, 2);
    const double C5947 =
        (ae * (C77470 + C77375 * C77206) + be * (C77452 + C77376 * C77206) +
         C76854 * (C77231 + C77377 * C77206)) /
        std::pow(C76797, 2);
    const double C8258 =
        (ae * C77020 * (2 * C77375 + C76976 * (C76902 + C76943 * C77108)) +
         be * C77020 * (2 * C77376 + C76976 * (C76905 + C76946 * C77108)) +
         C76854 * C77020 *
             (2 * C77377 +
              C76976 * (C76954 + (C76927 * C76928 +
                                  C76858 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77108))) /
        std::pow(C76797, 2);
    const double C10694 =
        (C77231 + C77377 * C77206 + ae * (C77476 + C76976 * C76955 * C77206) +
         be * (C77458 + C76976 * C76957 * C77206) +
         C76854 *
             (ae * (C77375 + C76976 * C76943 * C77206) +
              be * (C77376 + C76976 * C76946 * C77206) +
              C76854 * (C77377 + C76976 *
                                     (C76927 * C76928 +
                                      C76858 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C12231 =
        (2 * C77020 * C77231 + C77020 * (C77231 + C77377 * C77206)) /
        std::pow(C76797, 2);
    const double C77397 = C76854 * C77394;
    const double C26797 = C78889 * C749;
    const double C52799 = C78889 * C1654;
    const double C77125 = C77118 + C77124;
    const double C77520 = C76976 * C77515;
    const double C77669 = C77020 * C77515;
    const double C77906 = C77896 + C77897;
    const double C77969 = C77118 + C77968;
    const double C77992 = C76976 * C77990;
    const double C77223 = C77216 + C77222;
    const double C77783 = C77020 * C77578;
    const double C77859 = C76976 * C77578;
    const double C8810 =
        (ae * (2 * C77545 + C76976 * C77551) +
         be * (2 * C77566 + C76976 * C77572) +
         C77020 *
             (2 * C76976 * C77578 +
              C76976 * (C77578 + C76854 *
                                     (C76927 * C76928 +
                                      C77206 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77108))) /
        std::pow(C76797, 2);
    const double C77960 = C77216 + C77959;
    const double C78040 = C77020 * C78035;
    const double C78127 = C78115 + C78116;
    const double C78068 = C78066 + C77918;
    const double C77921 = C77902 + C77916;
    const double C78067 = C78064 + C77915;
    const double C78050 = C77020 * C78048;
    const double C78049 = C77020 * C78047;
    const double C35672 = 3 * (C77490 + C77498 * C77206) +
                          C77020 * (2 * C77852 + C77020 * C78043);
    const double C78130 = C78121 + C78122;
    const double C189 = C78891 * C167;
    const double C378 = C162 * C167;
    const double C856 = C78891 * C831;
    const double C1149 = C162 * C831;
    const double C2599 = C78891 * C832;
    const double C2809 = C162 * C832;
    const double C1761 = C78891 * C1736;
    const double C2054 = C162 * C1736;
    const double C3238 = C78891 * C1737;
    const double C3448 = C162 * C1737;
    const double C3961 = C78891 * C3949;
    const double C4290 = C162 * C3949;
    const double C12084 = C78891 * C10544;
    const double C5514 = (2 * (C76976 * C76990 + C76875 * be) +
                          C76976 * (C76990 + C76976 * C77486 + C77484 * be) +
                          (C76875 + C76897 * C77108) * be) /
                         C76797;
    const double C6028 =
        (C76976 * C76990 + C76875 * be + C77486 * C77206) / C76797;
    const double C6030 =
        (C77020 * (C76990 + C76976 * C77486 + C77484 * be)) / C76797;
    const double C12300 =
        (2 * C77020 * C77486 + C77020 * (C77486 + C77527 * C77206)) / C76797;
    const double C11876 = C11872 - C11873;
    const double C77509 = C76988 + C77507;
    const double C77905 = C77118 + C77894;
    const double C62819 = C78891 * C12299;
    const double C63020 = C162 * C12299;
    const double C60856 = C78891 * C10253;
    const double C61002 = C162 * C10253;
    const double C260 = C78890 * C238;
    const double C621 = C233 * C238;
    const double C962 = C78890 * C937;
    const double C1529 = C233 * C937;
    const double C2671 = C78890 * C938;
    const double C3089 = C233 * C938;
    const double C1867 = C78890 * C1842;
    const double C2434 = C233 * C1842;
    const double C3310 = C78890 * C1843;
    const double C3728 = C233 * C1843;
    const double C4075 = C78890 * C4063;
    const double C4724 = C233 * C4063;
    const double C7048 = C78890 * C5710;
    const double C10901 = C78890 * C6114;
    const double C11511 = C233 * C6114;
    const double C10302 = (2 * (C77020 * C77034 + C76875 * be) +
                           C77020 * (C77034 + C77020 * C77754 + C77752 * be) +
                           (C76875 + C76897 * C77206) * be) /
                          C76797;
    const double C7257 = C7253 - C7254;
    const double C8182 = C8178 - C8179;
    const double C31102 = C78890 * C5565;
    const double C31385 = C233 * C5565;
    const double C31658 = C78890 * C6117;
    const double C32145 = C233 * C6117;
    const double C33877 = C78890 * C8395;
    const double C34292 = C233 * C8395;
    const double C77777 = C77032 + C77775;
    const double C78113 = C77216 + C77996;
    const double C12369 = (2 * (C77020 * C77539 + C77490 * be) +
                           C77020 * (C77539 + C77020 * C77856 + C77852 * be) +
                           (C77490 + C77498 * C77206) * be) /
                          C76797;
    const double C380 = C162 * C308;
    const double C448 = C233 * C308;
    const double C1151 = C162 * C1043;
    const double C1253 = C233 * C1043;
    const double C27074 = C26357 * C1043;
    const double C2811 = C162 * C1044;
    const double C2883 = C233 * C1044;
    const double C28416 = C26357 * C1044;
    const double C2056 = C162 * C1948;
    const double C2158 = C233 * C1948;
    const double C53070 = C26357 * C1948;
    const double C3450 = C162 * C1949;
    const double C3522 = C233 * C1949;
    const double C54345 = C26357 * C1949;
    const double C4292 = C162 * C4177;
    const double C4404 = C233 * C4177;
    const double C29774 = C26357 * C4177;
    const double C11210 = C78890 * C6366;
    const double C7877 = C78890 * C6368;
    const double C5614 = (2 * (C76976 * C77077 + C76875 * ae) +
                          C76976 * (C77077 + C76976 * C77487 + C77484 * ae) +
                          (C76875 + C76897 * C77108) * ae) /
                         C76797;
    const double C6200 =
        (C76976 * C77077 + C76875 * ae + C77487 * C77206) / C76797;
    const double C6202 =
        (C77020 * (C77077 + C76976 * C77487 + C77484 * ae)) / C76797;
    const double C12440 =
        (2 * C77020 * C77487 + C77020 * (C77487 + C77528 * C77206)) / C76797;
    const double C77510 = C77075 + C77508;
    const double C37803 = C26357 * C12439;
    const double C37939 = C233 * C12439;
    const double C63022 = C162 * C12439;
    const double C60953 = C26357 * C10353;
    const double C61004 = C162 * C10353;
    const double C5663 =
        (2 * (ae * C76990 + be * C77077 + C76976 * C77482) +
         ae * (C76990 + C76976 * C77486 + C77484 * be) +
         be * (C77077 + C76976 * C77487 + C77484 * ae) +
         C76976 * (C77482 + ae * C77486 + be * C77487 +
                   C76976 * (C77005 + C77092 + C76976 * C76854 * C77123))) /
        std::pow(C76797, 2);
    const double C6285 =
        (ae * (C76990 + C77001 * C77206) + be * (C77077 + C77088 * C77206) +
         C76976 * (C77482 + C77515 * C77206)) /
        std::pow(C76797, 2);
    const double C6287 =
        (C77020 * C77482 + ae * C77020 * C77486 + be * C77020 * C77487 +
         C76976 * (ae * C77020 * C77001 + be * C77020 * C77088 +
                   C76976 * C77020 * C77515)) /
        std::pow(C76797, 2);
    const double C6290 =
        (C77482 + C77515 * C77206 + ae * (C77486 + C77527 * C77206) +
         be * (C77487 + C77528 * C77206) +
         C76976 *
             (ae * (C77001 + C77516 * C77206) +
              be * (C77088 + C77519 * C77206) +
              C76976 * (C77515 + C76854 *
                                     (C76927 * C76928 +
                                      C77108 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C10401 =
        (2 * C77020 * C77482 + C77020 * (C77482 + C77515 * C77206)) /
        std::pow(C76797, 2);
    const double C77501 = C77495 + C77496;
    const double C10403 =
        (3 * (C77113 + C77118 * C77206) +
         C77020 * (2 * C77667 + C77020 * (C77118 + C77123 * C77206))) /
        std::pow(C76797, 2);
    const double C12509 =
        (ae * (2 * C77739 + C77020 * C77743) +
         be * (2 * C77715 + C77020 * C77717) +
         C76976 * (2 * C77667 + C77020 * (C77118 + C77123 * C77206))) /
        std::pow(C76797, 2);
    const double C381 = C78891 * C363;
    const double C1144 = C78891 * C1131;
    const double C1148 = C78891 * C1132;
    const double C2049 = C78891 * C2036;
    const double C2053 = C78891 * C2037;
    const double C4289 = C78891 * C4282;
    const double C57007 = C78891 * C6286;
    const double C57011 = C78891 * C6288;
    const double C57015 = C78891 * C6289;
    const double C61001 = C78891 * C10402;
    const double C558 = C162 * C495;
    const double C623 = C233 * C495;
    const double C1433 = C162 * C1333;
    const double C1531 = C233 * C1333;
    const double C27312 = C26357 * C1333;
    const double C3020 = C162 * C1334;
    const double C3091 = C233 * C1334;
    const double C28616 = C26357 * C1334;
    const double C2338 = C162 * C2238;
    const double C2436 = C233 * C2238;
    const double C53324 = C26357 * C2238;
    const double C3659 = C162 * C2239;
    const double C3730 = C233 * C2239;
    const double C54546 = C26357 * C2239;
    const double C4616 = C162 * C4505;
    const double C4726 = C233 * C4505;
    const double C30076 = C26357 * C4505;
    const double C7185 = C78891 * C5806;
    const double C11410 = C162 * C6446;
    const double C11513 = C233 * C6446;
    const double C36723 = C26357 * C6446;
    const double C10494 = (2 * (C77020 * C77158 + C76875 * ae) +
                           C77020 * (C77158 + C77020 * C77755 + C77752 * ae) +
                           (C76875 + C76897 * C77206) * ae) /
                          C76797;
    const double C31293 = C26357 * C5757;
    const double C31387 = C233 * C5757;
    const double C31985 = C26357 * C6449;
    const double C32147 = C233 * C6449;
    const double C57254 = C162 * C6449;
    const double C34156 = C26357 * C8671;
    const double C34294 = C233 * C8671;
    const double C59347 = C162 * C8671;
    const double C77778 = C77156 + C77776;
    const double C12645 = (2 * (C77020 * C77560 + C77490 * ae) +
                           C77020 * (C77560 + C77020 * C77857 + C77852 * ae) +
                           (C77490 + C77498 * C77206) * ae) /
                          C76797;
    const double C5851 =
        (2 * C76976 * C77574 + C76976 * (C77574 + C76854 * C77221 * C77108)) /
        std::pow(C76797, 2);
    const double C5854 =
        (3 * (C77574 + C77578 * C77108) +
         C76976 *
             (2 * C76976 * C77578 +
              C76976 * (C77578 + C76854 *
                                     (C76927 * C76928 +
                                      C77206 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77108))) /
        std::pow(C76797, 2);
    const double C6611 =
        (C76976 * C77574 + ae * (C77020 * C77545 + C77484 * be) +
         be * (C77020 * C77566 + C77484 * ae) +
         C77020 * (ae * C77545 + be * C77566 + C77020 * C76976 * C77578)) /
        std::pow(C76797, 2);
    const double C6613 =
        (ae * (C77034 + C77045 * C77108) + be * (C77158 + C77169 * C77108) +
         C77020 * (C77574 + C77578 * C77108)) /
        std::pow(C76797, 2);
    const double C6616 =
        (C77574 + C77578 * C77108 + ae * (C77020 * C77551 + C77523 * be) +
         be * (C77020 * C77572 + C77523 * ae) +
         C77020 *
             (ae * C77551 + be * C77572 +
              C77020 * (C77578 + C76854 *
                                     (C76927 * C76928 +
                                      C77206 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77108))) /
        std::pow(C76797, 2);
    const double C10589 =
        (2 * (ae * C77034 + be * C77158 + C77020 * C77574) +
         ae * (C77034 + C77020 * C77754 + C77752 * be) +
         be * (C77158 + C77020 * C77755 + C77752 * ae) +
         C77020 * (C77574 + ae * C77754 + be * C77755 +
                   C77020 * (C77049 + C77173 + C77020 * C77578))) /
        std::pow(C76797, 2);
    const double C77769 = C77763 + C77764;
    const double C12783 = (2 * (ae * C77539 + be * C77560 + C77020 * C77850) +
                           ae * (C77539 + C77020 * C77856 + C77852 * be) +
                           be * (C77560 + C77020 * C77857 + C77852 * ae) +
                           C77020 * (C77850 + ae * C77856 + be * C77857 +
                                     C77020 * (ae * C77851 + be * C77853 +
                                               C77020 * C76976 * C77221))) /
                          std::pow(C76797, 2);
    const double C624 = C78890 * C606;
    const double C1524 = C78890 * C1511;
    const double C1528 = C78890 * C1512;
    const double C2429 = C78890 * C2416;
    const double C2433 = C78890 * C2417;
    const double C4723 = C78890 * C4716;
    const double C31384 = C78890 * C5852;
    const double C31388 = C78890 * C5853;
    const double C32140 = C78890 * C6612;
    const double C32144 = C78890 * C6614;
    const double C32148 = C78890 * C6615;
    const double C34295 = C78890 * C8809;
    const double C31647 =
        (2 * C77832 + C76976 * C77881 + be * C77020 * C77878 +
         C77020 * (be * C77878 +
                   C77020 * (2 * C76976 * C77050 +
                             C76976 * (C77050 + std::pow(C76860, 7) * bs[7] *
                                                    C77026 * C77108)))) /
        std::pow(C76797, 2);
    const double C33874 =
        (be * (3 * C77456 + C76976 * C77878) +
         C77020 * (3 * C77881 +
                   C76976 * (2 * C76976 * C77050 +
                             C76976 * (C77050 + std::pow(C76860, 7) * bs[7] *
                                                    C77026 * C77108)))) /
        std::pow(C76797, 2);
    const double C30990 = (4 * (2 * C77452 + C76976 * C77456) +
                           C76976 * (3 * C77456 + C76976 * C77878)) /
                          C76797;
    const double C31470 =
        (2 * C77452 + C76976 * C77456 + C77878 * C77206) / C76797;
    const double C33729 = (C77020 * (3 * C77456 + C76976 * C77878)) / C76797;
    const double C60790 = (4 * (2 * C77693 + C77020 * C77697) +
                           C77020 * (3 * C77697 + C77020 * C78083)) /
                          C76797;
    const double C31979 =
        (2 * C77843 + C76976 * C77945 + ae * C77020 * C77892 +
         C77020 * (ae * C77892 +
                   C77020 * (2 * C76976 * C77174 +
                             C76976 * (C77174 + std::pow(C76860, 7) * bs[7] *
                                                    C77150 * C77108)))) /
        std::pow(C76797, 2);
    const double C34154 =
        (ae * (3 * C77474 + C76976 * C77892) +
         C77020 * (3 * C77945 +
                   C76976 * (2 * C76976 * C77174 +
                             C76976 * (C77174 + std::pow(C76860, 7) * bs[7] *
                                                    C77150 * C77108)))) /
        std::pow(C76797, 2);
    const double C30989 = (4 * (2 * C77470 + C76976 * C77474) +
                           C76976 * (3 * C77474 + C76976 * C77892)) /
                          C76797;
    const double C31469 =
        (2 * C77470 + C76976 * C77474 + C77892 * C77206) / C76797;
    const double C33728 = (C77020 * (3 * C77474 + C76976 * C77892)) / C76797;
    const double C60789 = (4 * (2 * C77725 + C77020 * C77729) +
                           C77020 * (3 * C77729 + C77020 * C78100)) /
                          C76797;
    const double C2330 =
        (2 * C76854 * C77197 + C76854 * C77202 + ae * C77020 * C77017 +
         C77020 * (ae * C77017 +
                   C77020 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C3657 =
        (ae * (3 * C76999 + C76854 * C77017) +
         C77020 * (3 * C77202 +
                   C76854 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C168 = (4 * (2 * C76990 + C76854 * C76999) +
                         C76854 * (3 * C76999 + C76854 * C77017)) /
                        C76797;
    const double C1738 =
        (2 * C76990 + C76854 * C76999 + C77017 * C77206) / C76797;
    const double C3234 = (C77020 * (3 * C76999 + C76854 * C77017)) / C76797;
    const double C60848 = (4 * (2 * C77739 + C77020 * C77743) +
                           C77020 * (3 * C77743 + C77020 * C78111)) /
                          C76797;
    const double C1245 =
        (2 * C76854 * C77137 + C76854 * C77142 + ae * C76976 * C77061 +
         C76976 * (ae * C77061 +
                   C76976 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C2881 =
        (ae * (3 * C77043 + C76854 * C77061) +
         C76976 * (3 * C77142 +
                   C76854 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C239 = (4 * (2 * C77034 + C76854 * C77043) +
                         C76854 * (3 * C77043 + C76854 * C77061)) /
                        C76797;
    const double C939 =
        (2 * C77034 + C76854 * C77043 + C77061 * C77108) / C76797;
    const double C2667 = (C76976 * (3 * C77043 + C76854 * C77061)) / C76797;
    const double C31094 = (4 * (2 * C77539 + C76976 * C77543) +
                           C76976 * (3 * C77543 + C76976 * C77942)) /
                          C76797;
    const double C2150 =
        (2 * C76854 * C77137 + C76854 * C77142 + be * C77020 * C77104 +
         C77020 * (be * C77104 +
                   C77020 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C3520 =
        (be * (3 * C77086 + C76854 * C77104) +
         C77020 * (3 * C77142 +
                   C76854 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C4284 =
        (ae * C77020 * C77017 + be * C77020 * C77104 +
         C76976 * C77020 *
             (2 * C76854 * C77123 +
              C76854 * (C77123 + (C76927 * C76928 +
                                  C77108 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C309 = (4 * (2 * C77077 + C76854 * C77086) +
                         C76854 * (3 * C77086 + C76854 * C77104)) /
                        C76797;
    const double C1950 =
        (2 * C77077 + C76854 * C77086 + C77104 * C77206) / C76797;
    const double C3378 = (C77020 * (3 * C77086 + C76854 * C77104)) / C76797;
    const double C60944 = (4 * (2 * C77715 + C77020 * C77717) +
                           C77020 * (3 * C77717 + C77020 * C78089)) /
                          C76797;
    const double C1425 =
        (2 * C76854 * C77197 + C76854 * C77202 + be * C76976 * C77185 +
         C76976 * (be * C77185 +
                   C76976 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C3018 =
        (be * (3 * C77167 + C76854 * C77185) +
         C76976 * (3 * C77202 +
                   C76854 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C4718 =
        (ae * C76976 * C77061 + be * C76976 * C77185 +
         C77020 * C76976 *
             (2 * C76854 * C77221 +
              C76854 * (C77221 + (C76927 * C76928 +
                                  C77206 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C496 = (4 * (2 * C77158 + C76854 * C77167) +
                         C76854 * (3 * C77167 + C76854 * C77185)) /
                        C76797;
    const double C1335 =
        (2 * C77158 + C76854 * C77167 + C77185 * C77108) / C76797;
    const double C2950 = (C76976 * (3 * C77167 + C76854 * C77185)) / C76797;
    const double C31288 = (4 * (2 * C77560 + C76976 * C77564) +
                           C76976 * (3 * C77564 + C76976 * C77957)) /
                          C76797;
    const double C191 = C78891 * C173;
    const double C849 = C78891 * C837;
    const double C853 = C78891 * C838;
    const double C1754 = C78891 * C1742;
    const double C1758 = C78891 * C1743;
    const double C3958 = C78891 * C3952;
    const double C56772 = C78891 * C6033;
    const double C56776 = C78891 * C6035;
    const double C56781 = C78891 * C6037;
    const double C58942 = C78891 * C8327;
    const double C62821 = C78891 * C12301;
    const double C77016 = C77009 + C77014;
    const double C77461 = C76923 + C77459;
    const double C11664 = C78891 * C10256;
    const double C77877 = C77869 + C77875;
    const double C27066 = C78889 * C1049;
    const double C27070 = C78889 * C1050;
    const double C53062 = C78889 * C1954;
    const double C53066 = C78889 * C1955;
    const double C29770 = C78889 * C4180;
    const double C31156 = C78889 * C5619;
    const double C77103 = C77096 + C77101;
    const double C77479 = C76922 + C77477;
    const double C10358 =
        (3 * (C77085 + C77099 * C77206) +
         C77020 *
             (2 * C77665 +
              C77020 * (C77099 + (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069) *
                                     C77206))) /
        std::pow(C76797, 2);
    const double C36428 = C78889 * C6206;
    const double C62352 = C78889 * C10356;
    const double C77891 = C77883 + C77889;
    const double C33946 =
        (3 * (C77663 + ae * C77020 * C77375 + C76976 * C77987) +
         ae * C77020 * C77892 +
         C76976 * (2 * C77987 + ae * C77020 * C77888 +
                   C76976 * (C77985 + ae * C77020 * C76976 * C76943 +
                             C76976 * (ae * C77020 * C76943 +
                                       C76976 * C77020 * std::pow(C76860, 7) *
                                           bs[7] * C77069)))) /
        std::pow(C76797, 2);
    const double C262 = C78890 * C244;
    const double C955 = C78890 * C943;
    const double C959 = C78890 * C944;
    const double C1860 = C78890 * C1848;
    const double C1864 = C78890 * C1849;
    const double C4072 = C78890 * C4066;
    const double C77060 = C77053 + C77058;
    const double C77702 = C76923 + C77700;
    const double C12372 =
        (2 * (be * C77458 + C77020 * C77834) + be * (C77458 + C77835 * C77206) +
         C77020 * (C77834 + be * C77020 * C77835 +
                   C77020 * (be * C77835 +
                             C77020 * C76976 *
                                 (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026)))) /
        std::pow(C76797, 2);
    const double C6837 = C78890 * C5568;
    const double C7570 = C78890 * C6122;
    const double C35763 =
        (3 * (C77832 + be * C78005 + C77020 * C78010) +
         be * (2 * C78005 + C77020 * C78011) +
         C77020 * (2 * C78010 + be * C78011 +
                   C77020 * (C78006 + be * C77020 * C78007 +
                             C77020 * (be * C78007 + C77020 * C76976 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77026)))) /
        std::pow(C76797, 2);
    const double C78082 = C78074 + C78080;
    const double C31246 = C78890 * C5711;
    const double C34087 = C78890 * C8603;
    const double C1254 = C78890 * C1243;
    const double C2884 = C78890 * C1244;
    const double C2159 = C78890 * C2148;
    const double C3523 = C78890 * C2149;
    const double C4405 = C78890 * C4399;
    const double C5712 =
        (3 * (C77537 + ae * C77545 + C76976 * C77550) +
         ae * (2 * C77545 + C76976 * C77551) +
         C76976 * (2 * C77550 + ae * C77551 +
                   C76976 * (C77546 + ae * C76976 * C77547 +
                             C76976 * (ae * C77547 + C76976 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77131)))) /
        std::pow(C76797, 2);
    const double C8604 =
        (2 * (ae * (C77020 * C77045 + C76903) + C76976 * C77675) +
         ae * (C77020 * C77551 + C77523 * be) +
         C76976 * (C77675 + ae * (C77020 * C76976 * C77547 + C77522) +
                   C76976 * (ae * (C77020 * C77547 + C76944) +
                             C76976 * (be * C77519 + C77020 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77131)))) /
        std::pow(C76797, 2);
    const double C10448 =
        (2 * (be * C77077 + C77020 * C77537) + be * (C77077 + C77088 * C77206) +
         C77020 * (C77537 + be * C77020 * C77088 + C77020 * C77675)) /
        std::pow(C76797, 2);
    const double C10450 =
        (3 * (C77537 + be * C77719 + C77020 * C77675) +
         be * (2 * C77719 + C77020 * C77721) +
         C77020 * (2 * C77675 + be * C77721 +
                   C77020 * (C77546 + be * C77020 * C77519 +
                             C77020 * (be * C77519 + C77020 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77131)))) /
        std::pow(C76797, 2);
    const double C77941 = C77936 + C77939;
    const double C77977 = C77975 + C77976;
    const double C77998 = C77996 + C77997;
    const double C27308 = C78889 * C1339;
    const double C27310 = C78889 * C1340;
    const double C53320 = C78889 * C2244;
    const double C53322 = C78889 * C2245;
    const double C30074 = C78889 * C4508;
    const double C61104 = C78889 * C10499;
    const double C77184 = C77177 + C77182;
    const double C77734 = C76922 + C77732;
    const double C12648 =
        (2 * (ae * C77476 + C77020 * C77845) + ae * (C77476 + C77846 * C77206) +
         C77020 * (C77845 + ae * C77020 * C77846 +
                   C77020 * (ae * C77846 +
                             C77020 * C76976 *
                                 (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150)))) /
        std::pow(C76797, 2);
    const double C32633 = C78889 * C5760;
    const double C33465 = C78889 * C6454;
    const double C35937 =
        (3 * (C77843 + ae * C78020 + C77020 * C78025) +
         ae * (2 * C78020 + C77020 * C78026) +
         C77020 * (2 * C78025 + ae * C78026 +
                   C77020 * (C78021 + ae * C77020 * C78022 +
                             C77020 * (ae * C78022 + C77020 * C76976 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77150)))) /
        std::pow(C76797, 2);
    const double C78099 = C78091 + C78097;
    const double C57250 = C78891 * C6531;
    const double C57252 = C78891 * C6533;
    const double C63227 = C78891 * C12715;
    const double C61151 = C78891 * C10545;
    const double C1434 = C78891 * C1423;
    const double C3021 = C78891 * C1424;
    const double C2339 = C78891 * C2328;
    const double C3660 = C78891 * C2329;
    const double C4617 = C78891 * C4611;
    const double C5808 =
        (3 * (C77558 + be * C77566 + C76976 * C77571) +
         be * (2 * C77566 + C76976 * C77572) +
         C76976 * (2 * C77571 + be * C77572 +
                   C76976 * (C77567 + be * C76976 * C77568 +
                             C76976 * (be * C77568 + C76976 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77191)))) /
        std::pow(C76797, 2);
    const double C6532 = (be * C77158 + C76976 * C77558 + ae * C77020 * C77486 +
                          C77020 * (ae * C77486 + C77020 * C77571)) /
                         std::pow(C76797, 2);
    const double C6534 = (ae * (C76990 + C76976 * C77486 + C77484 * be) +
                          C77020 * (C77558 + be * C77566 + C76976 * C77571)) /
                         std::pow(C76797, 2);
    const double C12716 =
        (2 * (ae * C77486 + C77020 * C77571) + ae * (C77486 + C77527 * C77206) +
         C77020 * (C77571 + ae * C77020 * C77527 +
                   C77020 * (ae * C77527 +
                             C77020 * (be * C77568 + C76976 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77191)))) /
        std::pow(C76797, 2);
    const double C10546 =
        (3 * (C77558 + ae * C77745 + C77020 * C77748) +
         ae * (2 * C77745 + C77020 * C77749) +
         C77020 * (2 * C77748 + ae * C77749 +
                   C77020 * (C77567 + ae * C77020 * C77516 +
                             C77020 * (ae * C77516 + C77020 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77191)))) /
        std::pow(C76797, 2);
    const double C77956 = C77951 + C77954;
    const double C78031 = C77894 + C78029;
    const double C78110 = C78102 + C78108;
    const double C78569 = C78565 - C78568;
    const double C78864 = C78833 / C78555;
    const double C78578 = C78574 - C78577;
    const double C78881 = C78863 / C78559;
    const double C78651 = C78646 - C78650;
    const double C78868 = C78841 / C78555;
    const double C78658 = C78654 - C78657;
    const double C78885 = C78871 / C78559;
    const double C78693 = C78688 - C78692;
    const double C78870 = C78844 / C78555;
    const double C78700 = C78696 - C78699;
    const double C78887 = C78874 / C78559;
    const double C26806 = C26800 - C26784;
    const double C26805 = C26799 - C26780;
    const double C26804 = C26798 - C26776;
    const double C29457 = C29454 - C29444;
    const double C31003 = C31001 - C30995;
    const double C31489 = C31486 - C31479;
    const double C52808 = C52802 - C52786;
    const double C52807 = C52801 - C52782;
    const double C52806 = C52800 - C52778;
    const double C60803 = C60801 - C60795;
    const double C390 = C386 + C369;
    const double C53162 = C53160 + C53149;
    const double C633 = C629 + C612;
    const double C27474 = C27472 + C27465;
    const double C1158 = C1154 - C1143;
    const double C1538 = C1534 - C1523;
    const double C2063 = C2059 - C2048;
    const double C2443 = C2439 - C2428;
    const double C4296 = C4294 - C4288;
    const double C4730 = C4728 - C4722;
    const double C26801 = C26786 - C26787;
    const double C26802 = C26790 - C26791;
    const double C52803 = C52788 - C52789;
    const double C52804 = C52792 - C52793;
    const double C29455 = C29446 - C29447;
    const double C57016 = C57004 - C57005;
    const double C57017 = C57008 - C57009;
    const double C31488 = C31485 - C31475;
    const double C32152 = C32149 - C32139;
    const double C391 = C387 + C373;
    const double C392 = C388 + C377;
    const double C1161 = C1157 + C1140;
    const double C2066 = C2062 + C2045;
    const double C53163 = C53161 + C53153;
    const double C55182 = C55181 + C55177;
    const double C634 = C630 + C616;
    const double C635 = C631 + C620;
    const double C1541 = C1537 + C1520;
    const double C27475 = C27473 + C27469;
    const double C2446 = C2442 + C2425;
    const double C30280 = C30279 + C30277;
    const double C76920 = C76918 + C76906;
    const double C6765 = C78891 * C5518;
    const double C11736 = C78890 * C10306;
    const double C10903 = C78890 * C6120;
    const double C10798 = C162 * C5936;
    const double C10902 = C233 * C5936;
    const double C36125 = C26357 * C5936;
    const double C76919 = C76917 + C76903;
    const double C76941 = C76932 + C76923;
    const double C32433 = C78889 * C5618;
    const double C62553 = C78889 * C10498;
    const double C33169 = C78889 * C6208;
    const double C36724 = C78889 * C6452;
    const double C36123 = C26357 * C5935;
    const double C36426 = C78889 * C5935;
    const double C32228 = C32224 - C32225;
    const double C32868 = C32864 - C32865;
    const double C62148 = C62144 - C62145;
    const double C37590 = C37589 - C37587;
    const double C31002 = C30997 - C30998;
    const double C31487 = C31481 - C31482;
    const double C33736 = C33732 - C33733;
    const double C60802 = C60797 - C60798;
    const double C29449 = C78889 * C3846;
    const double C31476 = C78889 * C5948;
    const double C76966 = C76963 + C76947;
    const double C6124 =
        (C77042 + C77056 * C77108 + be * C77020 * C77462 +
         C77020 *
             (be * C77462 +
              C77020 * (C77056 + (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C8398 =
        (be * (2 * C77458 + C76976 * C77462) +
         C77020 *
             (2 * C76976 * C77056 +
              C76976 * (C77056 + (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C5466 = (3 * (C76886 + C76912 * C77108) +
                          C76976 * (2 * C77458 + C76976 * C77462)) /
                         C76797;
    const double C5946 = (C76886 + C76912 * C77108 + C77462 * C77206) / C76797;
    const double C8256 = (C77020 * (2 * C77458 + C76976 * C77462)) / C76797;
    const double C10204 = (3 * (C76886 + C76912 * C77206) +
                           C77020 * (2 * C77699 + C77020 * C77703)) /
                          C76797;
    const double C77924 = C77922 + C77911;
    const double C78140 = C78138 + C78132;
    const double C6903 = (2 * (C76976 * C77086 + C76904 * ae) +
                          C76976 * (C77086 + C76976 * C77642 + C77639 * ae) +
                          (C76904 + C76945 * C77108) * ae) /
                         C76797;
    const double C7668 =
        (C77020 * (C77086 + C76976 * C77642 + C77639 * ae)) / C76797;
    const double C11001 =
        (C76976 * C77086 + C76904 * ae + C77642 * C77206) / C76797;
    const double C12013 = (2 * (C77020 * C77167 + C76904 * ae) +
                           C77020 * (C77167 + C77020 * C77826 + C77823 * ae) +
                           (C76904 + C76945 * C77206) * ae) /
                          C76797;
    const double C4400 =
        (ae * (C77020 * C77061 + C76956 * be) +
         C76976 * (be * C77104 +
                   C77020 * (2 * C76854 * C77140 +
                             C76854 * (C77140 + std::pow(C76860, 7) * bs[7] *
                                                    C77131 * C76858)))) /
        std::pow(C76797, 2);
    const double C4612 =
        (ae * (C76976 * C77017 + C76956 * be) +
         C77020 * (be * C77185 +
                   C76976 * (2 * C76854 * C77200 +
                             C76854 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C833 =
        (2 * C76990 + C76854 * C76999 +
         C76976 * (C76976 * C77017 + C76956 * be) + C76976 * C76956 * be) /
        C76797;
    const double C1045 =
        (2 * C77077 + C76854 * C77086 +
         C76976 * (C76976 * C77104 + C76956 * ae) + C76976 * C76956 * ae) /
        C76797;
    const double C1844 =
        (2 * C77034 + C76854 * C77043 +
         C77020 * (C77020 * C77061 + C76956 * be) + C77020 * C76956 * be) /
        C76797;
    const double C2240 =
        (2 * C77158 + C76854 * C77167 +
         C77020 * (C77020 * C77185 + C76956 * ae) + C77020 * C76956 * ae) /
        C76797;
    const double C2595 = (C76976 * (3 * C76999 + C76854 * C77017) +
                          (3 * C76904 + C76854 * C76956) * be) /
                         C76797;
    const double C2739 = (C76976 * (3 * C77086 + C76854 * C77104) +
                          (3 * C76904 + C76854 * C76956) * ae) /
                         C76797;
    const double C3306 = (C77020 * (3 * C77043 + C76854 * C77061) +
                          (3 * C76904 + C76854 * C76956) * be) /
                         C76797;
    const double C3589 = (C77020 * (3 * C77167 + C76854 * C77185) +
                          (3 * C76904 + C76854 * C76956) * ae) /
                         C76797;
    const double C3950 = (C77020 * (C76976 * C77017 + C76956 * be)) / C76797;
    const double C4064 =
        (C77020 * C76976 * C77061 + C76976 * C76956 * be) / C76797;
    const double C4178 = (C77020 * (C76976 * C77104 + C76956 * ae)) / C76797;
    const double C4506 =
        (C77020 * C76976 * C77185 + C76976 * C76956 * ae) / C76797;
    const double C101 = 4 * (2 * C76875 + C76854 * C76904) +
                        C76854 * (3 * C76904 + C76854 * C76956);
    const double C727 = 2 * C76875 + C76854 * C76904 + C76956 * C77108;
    const double C1632 = 2 * C76875 + C76854 * C76904 + C76956 * C77206;
    const double C2525 = C76976 * (3 * C76904 + C76854 * C76956);
    const double C3164 = C77020 * (3 * C76904 + C76854 * C76956);
    const double C3836 = C77020 * C76976 * C76956;
    const double C8075 =
        (ae * (C76999 + C76976 * C77641 + C77639 * be) +
         C77020 * (C77202 + be * C76976 * C77181 +
                   C76976 * (be * C77181 +
                             C76976 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C11408 =
        (be * C77167 + C76976 * C77202 + ae * C77020 * C77641 +
         C77020 * (ae * C77641 +
                   C77020 * (be * C77181 +
                             C76976 * (C77200 + std::pow(C76860, 7) * bs[7] *
                                                    C77191 * C76858)))) /
        std::pow(C76797, 2);
    const double C6759 = (2 * (C76976 * C76999 + C76904 * be) +
                          C76976 * (C76999 + C76976 * C77641 + C77639 * be) +
                          (C76904 + C76945 * C77108) * be) /
                         C76797;
    const double C7460 =
        (C77020 * (C76999 + C76976 * C77641 + C77639 * be)) / C76797;
    const double C10793 =
        (C76976 * C76999 + C76904 * be + C77641 * C77206) / C76797;
    const double C11730 = (2 * (C77020 * C77043 + C76904 * be) +
                           C77020 * (C77043 + C77020 * C77825 + C77823 * be) +
                           (C76904 + C76945 * C77206) * be) /
                          C76797;
    const double C77532 = C77088 + C77530;
    const double C77797 = C77169 + C77795;
    const double C77531 = C77001 + C77529;
    const double C77796 = C77045 + C77794;
    const double C12646 = (2 * (C77020 * C77566 + C77484 * ae) +
                           C77020 * (C77566 + C77020 * C77866 + C77861 * ae) +
                           (C77484 + C77517 * C77206) * ae) /
                          C76797;
    const double C12370 = (2 * (C77020 * C77545 + C77484 * be) +
                           C77020 * (C77545 + C77020 * C77865 + C77861 * be) +
                           (C77484 + C77517 * C77206) * be) /
                          C76797;
    const double C76965 = C76962 + C76944;
    const double C6456 =
        (C77166 + C77180 * C77108 + ae * C77020 * C77480 +
         C77020 *
             (ae * C77480 +
              C77020 * (C77180 + (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C8468 =
        (2 * (ae * C77020 * C76911 + C76976 * C77665) + ae * C77020 * C77480 +
         C76976 * (C77665 + ae * C77020 * C76976 * C76955 +
                   C76976 * (ae * C77020 * C76955 +
                             C76976 * C77020 *
                                 (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069)))) /
        std::pow(C76797, 2);
    const double C8674 =
        (ae * (2 * C77476 + C76976 * C77480) +
         C77020 *
             (2 * C76976 * C77180 +
              C76976 * (C77180 + (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150) *
                                     C77108))) /
        std::pow(C76797, 2);
    const double C5465 = (3 * (C76885 + C76911 * C77108) +
                          C76976 * (2 * C77476 + C76976 * C77480)) /
                         C76797;
    const double C5945 = (C76885 + C76911 * C77108 + C77480 * C77206) / C76797;
    const double C8255 = (C77020 * (2 * C77476 + C76976 * C77480)) / C76797;
    const double C12442 =
        (ae * (2 * C77731 + C77020 * C77735) +
         C76976 *
             (2 * C77665 +
              C77020 * (C77099 + (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069) *
                                     C77206))) /
        std::pow(C76797, 2);
    const double C10203 = (3 * (C76885 + C76911 * C77206) +
                           C77020 * (2 * C77731 + C77020 * C77735)) /
                          C76797;
    const double C77923 = C77920 + C77908;
    const double C35718 = (3 * (C77492 + C77502 * C77206) +
                           C77020 * (2 * C78028 + C77020 * C78032)) /
                          C76797;
    const double C78139 = C78137 + C78129;
    const double C76964 = C76854 * C76961;
    const double C5467 =
        (ae * (2 * C76976 * C76879 + C76976 * (C76879 + C76902 * C77108)) +
         be * (2 * C76976 * C76880 + C76976 * (C76880 + C76905 * C77108)) +
         C76854 * (2 * C77231 + C76976 * C77234)) /
        std::pow(C76797, 2);
    const double C5469 = (3 * (C76884 + C76910 * C77108) +
                          C76976 * (2 * C77231 + C76976 * C77234)) /
                         std::pow(C76797, 2);
    const double C5470 =
        (ae * (3 * (C76879 + C76902 * C77108) +
               C76976 * (2 * C77375 + C76976 * (C76902 + C76943 * C77108))) +
         be * (3 * (C76880 + C76905 * C77108) +
               C76976 * (2 * C77376 + C76976 * (C76905 + C76946 * C77108))) +
         C76854 * (3 * C77234 +
                   C76976 * (2 * C77377 +
                             C76976 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C5949 = (ae * C77020 * C77474 + be * C77020 * C77456 +
                          C76854 * C77020 * C77234) /
                         std::pow(C76797, 2);
    const double C5951 =
        (C76884 + C76910 * C77108 + C77234 * C77206) / std::pow(C76797, 2);
    const double C5952 =
        (ae * (C77474 + (C76902 + C76943 * C77108) * C77206) +
         be * (C77456 + (C76905 + C76946 * C77108) * C77206) +
         C76854 * (C77234 + (C76954 + (C76927 * C76928 +
                                       C76858 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C77108) *
                                C77206)) /
        std::pow(C76797, 2);
    const double C6692 =
        (2 * C77231 + C76976 * C77234 + ae * (2 * C77476 + C76976 * C77480) +
         be * (2 * C77458 + C76976 * C77462) +
         C76854 * (ae * (2 * C77375 + C76976 * (C76902 + C76943 * C77108)) +
                   be * (2 * C77376 + C76976 * (C76905 + C76946 * C77108)) +
                   C76854 * (2 * C77377 +
                             C76976 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C7361 =
        (C77020 * C77234 + ae * C77020 * C77480 + be * C77020 * C77462 +
         C76854 * (ae * C77020 * (C76902 + C76943 * C77108) +
                   be * C77020 * (C76905 + C76946 * C77108) +
                   C76854 * C77020 *
                       (C76954 + (C76927 * C76928 +
                                  C76858 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77108))) /
        std::pow(C76797, 2);
    const double C8257 =
        (C77020 * (2 * C77231 + C76976 * C77234)) / std::pow(C76797, 2);
    const double C30991 =
        (4 * (2 * C77231 + C76976 * C77234) +
         C76976 * (3 * C77234 +
                   C76976 * (2 * C77377 +
                             C76976 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C31471 =
        (2 * C77231 + C76976 * C77234 +
         (2 * C77377 +
          C76976 * (C76954 +
                    (C76927 * C76928 + C76858 * bs[7] * std::pow(C76860, 7)) *
                        C76801 * C77108)) *
             C77206) /
        std::pow(C76797, 2);
    const double C33730 =
        (C77020 *
         (3 * C77234 +
          C76976 * (2 * C77377 +
                    C76976 * (C76954 + (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C37583 =
        (2 * C77020 * C77234 +
         C77020 * (C77234 + (C76954 + (C76927 * C76928 +
                                       C76858 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C77108) *
                                C77206)) /
        std::pow(C76797, 2);
    const double C10205 =
        (ae * (2 * C77020 * C76879 + C77020 * (C76879 + C76902 * C77206)) +
         be * (2 * C77020 * C76880 + C77020 * (C76880 + C76905 * C77206)) +
         C76854 * (2 * C77306 + C77020 * C77309)) /
        std::pow(C76797, 2);
    const double C10207 = (3 * (C76884 + C76910 * C77206) +
                           C77020 * (2 * C77306 + C77020 * C77309)) /
                          std::pow(C76797, 2);
    const double C10208 =
        (ae * (3 * (C76879 + C76902 * C77206) +
               C77020 * (2 * C77392 + C77020 * (C76902 + C76943 * C77206))) +
         be * (3 * (C76880 + C76905 * C77206) +
               C77020 * (2 * C77393 + C77020 * (C76905 + C76946 * C77206))) +
         C76854 * (3 * C77309 +
                   C77020 * (2 * C77394 +
                             C77020 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C11591 =
        (2 * C77306 + C77020 * C77309 + ae * (2 * C77731 + C77020 * C77735) +
         be * (2 * C77699 + C77020 * C77703) +
         C76854 * (ae * (2 * C77392 + C77020 * (C76902 + C76943 * C77206)) +
                   be * (2 * C77393 + C77020 * (C76905 + C76946 * C77206)) +
                   C76854 * (2 * C77394 +
                             C77020 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C60791 =
        (4 * (2 * C77306 + C77020 * C77309) +
         C77020 * (3 * C77309 +
                   C77020 * (2 * C77394 +
                             C77020 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C77382 = C77381 + C77380;
    const double C12232 =
        (ae * (2 * C77020 * C77375 +
               C77020 * (C77375 + C76976 * C76943 * C77206)) +
         be * (2 * C77020 * C77376 +
               C77020 * (C77376 + C76976 * C76946 * C77206)) +
         C76854 *
             (2 * C77412 +
              C77020 * (C77377 + C76976 *
                                     (C76927 * C76928 +
                                      C76858 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C35675 =
        (3 * (C77231 + C77377 * C77206) +
         C77020 *
             (2 * C77412 +
              C77020 * (C77377 + C76976 *
                                     (C76927 * C76928 +
                                      C76858 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C29453 = C78889 * C3847;
    const double C36126 = C78889 * C5947;
    const double C37588 = C78889 * C12231;
    const double C77399 = C77398 + C77397;
    const double C364 =
        (4 * (2 * C76854 * C77118 + C76854 * C77125) +
         C76854 * (3 * C77125 +
                   C76854 * (2 * C76854 * C77123 +
                             C76854 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C1133 =
        (C77113 + C77118 * C76858 + ae * (C76976 * C76999 + C76904 * be) +
         be * (C76976 * C77086 + C76904 * ae) +
         C76976 * (ae * C76999 + be * C77086 + C76976 * C77125)) /
        std::pow(C76797, 2);
    const double C1134 = (ae * (2 * C76990 + C76854 * C76999) +
                          be * (2 * C77077 + C76854 * C77086) +
                          C76976 * (2 * C76854 * C77118 + C76854 * C77125)) /
                         std::pow(C76797, 2);
    const double C1135 =
        (2 * C76854 * C77118 + C76854 * C77125 +
         ae * (C76976 * C77017 + C76956 * be) +
         be * (C76976 * C77104 + C76956 * ae) +
         C76976 * (ae * C77017 + be * C77104 +
                   C76976 * (2 * C76854 * C77123 +
                             C76854 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C2038 =
        (C77113 + C77118 * C76858 + C77125 * C77206) / std::pow(C76797, 2);
    const double C2039 = (C77020 * (2 * C76854 * C77118 + C76854 * C77125)) /
                         std::pow(C76797, 2);
    const double C2040 =
        (2 * C76854 * C77118 + C76854 * C77125 +
         (2 * C76854 * C77123 +
          C76854 * (C77123 +
                    (C76927 * C76928 + C77108 * bs[7] * std::pow(C76860, 7)) *
                        C76801 * C76858)) *
             C77206) /
        std::pow(C76797, 2);
    const double C2807 =
        (ae * (3 * C76999 + C76854 * C77017) +
         be * (3 * C77086 + C76854 * C77104) +
         C76976 * (3 * C77125 +
                   C76854 * (2 * C76854 * C77123 +
                             C76854 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C3446 =
        (C77020 *
         (3 * C77125 +
          C76854 * (2 * C76854 * C77123 +
                    C76854 * (C77123 + (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C4283 = (ae * C77020 * C76999 + be * C77020 * C77086 +
                          C76976 * C77020 * C77125) /
                         std::pow(C76797, 2);
    const double C6971 =
        (2 * (ae * C76999 + be * C77086 + C76976 * C77125) +
         ae * (C76999 + C76976 * C77641 + C77639 * be) +
         be * (C77086 + C76976 * C77642 + C77639 * ae) +
         C76976 * (C77125 + ae * C77641 + be * C77642 +
                   C76976 * (ae * C77013 + be * C77100 +
                             C76976 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C7768 =
        (C77020 * C77125 + ae * C77020 * C77641 + be * C77020 * C77642 +
         C76976 * (ae * C77020 * C77013 + be * C77020 * C77100 +
                   C76976 * C77020 *
                       (C77123 + (C76927 * C76928 +
                                  C77108 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C11101 =
        (ae * (C76999 + C77013 * C77206) + be * (C77086 + C77100 * C77206) +
         C76976 * (C77125 + (C77123 + (C76927 * C76928 +
                                       C77108 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C76858) *
                                C77206)) /
        std::pow(C76797, 2);
    const double C11870 =
        (2 * C77020 * C77125 +
         C77020 * (C77125 + (C77123 + (C76927 * C76928 +
                                       C77108 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C76858) *
                                C77206)) /
        std::pow(C76797, 2);
    const double C77526 = C77514 + C77520;
    const double C10404 =
        (3 * (C77482 + C77515 * C77206) +
         C77020 *
             (2 * C77669 +
              C77020 * (C77515 + C76854 *
                                     (C76927 * C76928 +
                                      C77108 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C12510 =
        (ae * (2 * C77745 + C77020 * C77749) +
         be * (2 * C77719 + C77020 * C77721) +
         C76976 *
             (2 * C77669 +
              C77020 * (C77515 + C76854 *
                                     (C76927 * C76928 +
                                      C77108 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C77206))) /
        std::pow(C76797, 2);
    const double C77913 = C76976 * C77906;
    const double C35850 =
        (ae * (3 * C77743 +
               C77020 * (2 * C77989 + C77020 * (C76995 + C77008 * C77206))) +
         be * (3 * C77717 +
               C77020 * (2 * C77971 + C77020 * (C77082 + C77095 * C77206))) +
         C76976 * (3 * C77969 +
                   C77020 * (2 * C77990 +
                             C77020 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C37870 =
        (2 * C77667 + C77020 * C77969 + ae * (2 * C78028 + C77020 * C78032) +
         be * (2 * C77020 * C77505 + C77020 * (C77505 + C77910 * C77206)) +
         C76976 * (ae * (2 * C77989 + C77020 * (C76995 + C77008 * C77206)) +
                   be * (2 * C77971 + C77020 * C78018) +
                   C76976 * (2 * C77990 +
                             C77020 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C60996 =
        (4 * (2 * C77667 + C77020 * C77969) +
         C77020 * (3 * C77969 +
                   C77020 * (2 * C77990 +
                             C77020 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C77994 = C77993 + C77992;
    const double C607 =
        (4 * (2 * C76854 * C77216 + C76854 * C77223) +
         C76854 * (3 * C77223 +
                   C76854 * (2 * C76854 * C77221 +
                             C76854 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C1513 =
        (C77211 + C77216 * C76858 + C77223 * C77108) / std::pow(C76797, 2);
    const double C1514 = (C76976 * (2 * C76854 * C77216 + C76854 * C77223)) /
                         std::pow(C76797, 2);
    const double C1515 =
        (2 * C76854 * C77216 + C76854 * C77223 +
         (2 * C76854 * C77221 +
          C76854 * (C77221 +
                    (C76927 * C76928 + C77206 * bs[7] * std::pow(C76860, 7)) *
                        C76801 * C76858)) *
             C77108) /
        std::pow(C76797, 2);
    const double C2418 =
        (C77211 + C77216 * C76858 + ae * (C77020 * C77043 + C76904 * be) +
         be * (C77020 * C77167 + C76904 * ae) +
         C77020 * (ae * C77043 + be * C77167 + C77020 * C77223)) /
        std::pow(C76797, 2);
    const double C2419 = (ae * (2 * C77034 + C76854 * C77043) +
                          be * (2 * C77158 + C76854 * C77167) +
                          C77020 * (2 * C76854 * C77216 + C76854 * C77223)) /
                         std::pow(C76797, 2);
    const double C2420 =
        (2 * C76854 * C77216 + C76854 * C77223 +
         ae * (C77020 * C77061 + C76956 * be) +
         be * (C77020 * C77185 + C76956 * ae) +
         C77020 * (ae * C77061 + be * C77185 +
                   C77020 * (2 * C76854 * C77221 +
                             C76854 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C3087 =
        (C76976 *
         (3 * C77223 +
          C76854 * (2 * C76854 * C77221 +
                    C76854 * (C77221 + (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C3726 =
        (ae * (3 * C77043 + C76854 * C77061) +
         be * (3 * C77167 + C76854 * C77185) +
         C77020 * (3 * C77223 +
                   C76854 * (2 * C76854 * C77221 +
                             C76854 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C4717 = (ae * C76976 * C77043 + be * C76976 * C77167 +
                          C77020 * C76976 * C77223) /
                         std::pow(C76797, 2);
    const double C7251 =
        (2 * C76976 * C77223 +
         C76976 * (C77223 + (C77221 + (C76927 * C76928 +
                                       C77206 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C76858) *
                                C77108)) /
        std::pow(C76797, 2);
    const double C8176 =
        (ae * (C77043 + C77057 * C77108) + be * (C77167 + C77181 * C77108) +
         C77020 * (C77223 + (C77221 + (C76927 * C76928 +
                                       C77206 * bs[7] * std::pow(C76860, 7)) *
                                          C76801 * C76858) *
                                C77108)) /
        std::pow(C76797, 2);
    const double C11509 =
        (C76976 * C77223 + ae * (C77020 * C77811 + C77639 * be) +
         be * (C77020 * C77812 + C77639 * ae) +
         C77020 * (ae * C77811 + be * C77812 +
                   C77020 * C76976 *
                       (C77221 + (C76927 * C76928 +
                                  C77206 * bs[7] * std::pow(C76860, 7)) *
                                     C76801 * C76858))) /
        std::pow(C76797, 2);
    const double C12150 =
        (2 * (ae * C77043 + be * C77167 + C77020 * C77223) +
         ae * (C77043 + C77020 * C77825 + C77823 * be) +
         be * (C77167 + C77020 * C77826 + C77823 * ae) +
         C77020 * (C77223 + ae * C77825 + be * C77826 +
                   C77020 * (ae * C77057 + be * C77181 +
                             C77020 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C76858)))) /
        std::pow(C76797, 2);
    const double C77788 = C77782 + C77783;
    const double C12784 =
        (2 * (ae * C77545 + be * C77566 + C77020 * C77859) +
         ae * (C77545 + C77020 * C77865 + C77861 * be) +
         be * (C77566 + C77020 * C77866 + C77861 * ae) +
         C77020 * (C77859 + ae * C77865 + be * C77866 +
                   C77020 * (ae * C77860 + be * C77862 +
                             C77020 * C76976 * C76854 *
                                 (C76927 * C76928 +
                                  C77206 * bs[7] * std::pow(C76860, 7)) *
                                 C76801))) /
        std::pow(C76797, 2);
    const double C31379 =
        (4 * (2 * C77850 + C76976 * C77960) +
         C76976 * (3 * C77960 +
                   C76976 * (2 * C76976 * C77221 +
                             C76976 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C34290 =
        (ae * (3 * C77543 + C76976 * C77942) +
         be * (3 * C77564 + C76976 * C77957) +
         C77020 * (3 * C77960 +
                   C76976 * (2 * C76976 * C77221 +
                             C76976 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C78046 = C78034 + C78040;
    const double C78133 = C77020 * C78127;
    const double C38006 = (2 * (C77020 * C77564 + C77504 * ae) +
                           C77020 * (C77564 + C77020 * C78068 + C78065 * ae) +
                           (C77504 + C77909 * C77206) * ae) /
                          C76797;
    const double C32135 =
        (2 * C77850 + C76976 * C77960 + ae * (C77020 * C77942 + C77921 * be) +
         be * (C77020 * C77957 + C77921 * ae) +
         C77020 * (ae * C77942 + be * C77957 +
                   C77020 * (2 * C76976 * C77221 +
                             C76976 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C31646 =
        (2 * C77539 + C76976 * C77543 +
         C77020 * (C77020 * C77942 + C77921 * be) + C77020 * C77921 * be) /
        C76797;
    const double C31978 =
        (2 * C77560 + C76976 * C77564 +
         C77020 * (C77020 * C77957 + C77921 * ae) + C77020 * C77921 * ae) /
        C76797;
    const double C33873 = (C77020 * (3 * C77543 + C76976 * C77942) +
                           (3 * C77504 + C76976 * C77921) * be) /
                          C76797;
    const double C34153 = (C77020 * (3 * C77564 + C76976 * C77957) +
                           (3 * C77504 + C76976 * C77921) * ae) /
                          C76797;
    const double C30988 = 4 * (2 * C77490 + C76976 * C77504) +
                          C76976 * (3 * C77504 + C76976 * C77921);
    const double C31468 = 2 * C77490 + C76976 * C77504 + C77921 * C77206;
    const double C33727 = C77020 * (3 * C77504 + C76976 * C77921);
    const double C38143 =
        (2 * (ae * C77543 + be * C77564 + C77020 * C77960) +
         ae * (C77543 + C77020 * C78067 + C78065 * be) +
         be * (C77564 + C77020 * C78068 + C78065 * ae) +
         C77020 * (C77960 + ae * C78067 + be * C78068 +
                   C77020 * (ae * C77938 + be * C77953 +
                             C77020 * (C77221 +
                                       (C76927 * C76928 +
                                        C77206 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C37726 = (2 * (C77020 * C77543 + C77504 * be) +
                           C77020 * (C77543 + C77020 * C78067 + C78065 * be) +
                           (C77504 + C77909 * C77206) * be) /
                          C76797;
    const double C78052 = C77853 + C78050;
    const double C78051 = C77851 + C78049;
    const double C60788 = 4 * (2 * C77758 + C77020 * C77772) +
                          C77020 * (3 * C77772 + C77020 * C78130);
    const double C385 = C378 - C379;
    const double C1156 = C1149 - C1150;
    const double C2813 = C2809 - C2810;
    const double C2061 = C2054 - C2055;
    const double C3452 = C3448 - C3449;
    const double C4295 = C4290 - C4291;
    const double C6763 = C78891 * C5514;
    const double C6973 = C162 * C5514;
    const double C10797 = C78891 * C6028;
    const double C11103 = C162 * C6028;
    const double C7464 = C78891 * C6030;
    const double C7770 = C162 * C6030;
    const double C11877 = C11876 - C11874;
    const double C77511 = C77509 + C77503;
    const double C77912 = C77905 + C77895;
    const double C63024 = C63020 - C63021;
    const double C61007 = C61002 - C61003;
    const double C628 = C621 - C622;
    const double C1536 = C1529 - C1530;
    const double C3093 = C3089 - C3090;
    const double C2441 = C2434 - C2435;
    const double C3732 = C3728 - C3729;
    const double C4729 = C4724 - C4725;
    const double C11515 = C11511 - C11512;
    const double C11734 = C78890 * C10302;
    const double C12152 = C233 * C10302;
    const double C7258 = C7257 - C7255;
    const double C8183 = C8182 - C8180;
    const double C31390 = C31385 - C31386;
    const double C32151 = C32145 - C32146;
    const double C34296 = C34292 - C34293;
    const double C77779 = C77777 + C77771;
    const double C78126 = C78113 + C78114;
    const double C37730 = C78890 * C12369;
    const double C38145 = C233 * C12369;
    const double C6975 = C162 * C5614;
    const double C7047 = C233 * C5614;
    const double C32432 = C26357 * C5614;
    const double C11105 = C162 * C6200;
    const double C11209 = C233 * C6200;
    const double C36427 = C26357 * C6200;
    const double C7772 = C162 * C6202;
    const double C7876 = C233 * C6202;
    const double C33168 = C26357 * C6202;
    const double C77512 = C77510 + C77506;
    const double C6976 = C78891 * C5663;
    const double C11106 = C78891 * C6285;
    const double C7773 = C78891 * C6287;
    const double C11875 = C78891 * C10401;
    const double C61005 = C78891 * C10403;
    const double C63023 = C78891 * C12509;
    const double C1163 = C1159 + C1148;
    const double C2068 = C2064 + C2053;
    const double C61010 = C61008 + C61001;
    const double C12083 = C162 * C10494;
    const double C12154 = C233 * C10494;
    const double C62552 = C26357 * C10494;
    const double C77780 = C77778 + C77774;
    const double C38009 = C26357 * C12645;
    const double C38147 = C233 * C12645;
    const double C63226 = C162 * C12645;
    const double C7256 = C78890 * C5851;
    const double C11514 = C78890 * C6611;
    const double C8181 = C78890 * C6613;
    const double C12155 = C78890 * C10589;
    const double C38148 = C78890 * C12783;
    const double C1543 = C1539 + C1528;
    const double C2448 = C2444 + C2433;
    const double C31393 = C31391 + C31384;
    const double C32156 = C32153 + C32144;
    const double C174 =
        (4 * (2 * C76998 + ae * C76999 + C76854 * C77016) +
         ae * (3 * C76999 + C76854 * C77017) +
         C76854 * (3 * C77016 + ae * C77017 +
                   C76854 * (2 * C77012 + ae * C77013 +
                             C76854 * (C77006 + ae * C76854 * C77008 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C1744 =
        (C76987 + ae * C76990 + C76854 * C76998 + C77016 * C77206) /
        std::pow(C76797, 2);
    const double C1745 =
        (C77020 * (2 * C76998 + ae * C76999 + C76854 * C77016)) /
        std::pow(C76797, 2);
    const double C1746 =
        (2 * C76998 + ae * C76999 + C76854 * C77016 +
         (2 * C77012 + ae * C77013 +
          C76854 * (C77006 + ae * C76854 * C77008 +
                    C76854 * (ae * C77008 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C76982))) *
             C77206) /
        std::pow(C76797, 2);
    const double C3235 =
        (C77020 * (3 * C77016 + ae * C77017 +
                   C76854 * (2 * C77012 + ae * C77013 +
                             C76854 * (C77006 + ae * C76854 * C77008 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C11659 =
        (2 * C77020 * C77016 +
         C77020 *
             (C77016 + (C77006 + ae * C77516 +
                        C76854 * (ae * C77008 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C76982)) *
                           C77206)) /
        std::pow(C76797, 2);
    const double C5520 =
        (3 * (C76998 + be * C77458 + C76976 * C77461) +
         be * (2 * C77458 + C76976 * C77462) +
         C76976 * (2 * C77461 + be * C77462 +
                   C76976 * (C77012 + be * C76976 * C76957 +
                             C76976 * (be * C76957 +
                                       C76976 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C6034 =
        (be * C76886 + C76976 * C76998 + C77461 * C77206) / std::pow(C76797, 2);
    const double C6036 = (C77020 * (C76998 + be * C77458 + C76976 * C77461)) /
                         std::pow(C76797, 2);
    const double C6038 =
        (C76998 + be * C77458 + C76976 * C77461 +
         (C77012 + be * C76976 * C76957 +
          C76976 * (be * C76957 +
                    C76976 * (ae * C77008 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C76982))) *
             C77206) /
        std::pow(C76797, 2);
    const double C8328 =
        (C77020 * (2 * C77461 + be * C77462 +
                   C76976 * (C77012 + be * C76976 * C76957 +
                             C76976 * (be * C76957 +
                                       C76976 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C12302 =
        (2 * C77020 * C77461 +
         C77020 *
             (C77461 + (be * C76957 +
                        C76976 * (ae * C77008 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C76982)) *
                           C77206)) /
        std::pow(C76797, 2);
    const double C31051 =
        (4 * (2 * C77455 + be * C77456 + C76976 * C77877) +
         be * (3 * C77456 + C76976 * C77878) +
         C76976 * (3 * C77877 + be * C77878 +
                   C76976 * (2 * C77873 + be * C77874 +
                             C76976 * (C77006 + be * C76976 * C76946 +
                                       C76976 * (be * C76946 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C31571 =
        (2 * C77455 + be * C77456 + C76976 * C77877 +
         (2 * C77873 + be * C77874 +
          C76976 * (C77006 + be * C76976 * C76946 +
                    C76976 * (be * C76946 +
                              C76976 * std::pow(C76860, 7) * bs[7] * C76982))) *
             C77206) /
        std::pow(C76797, 2);
    const double C33806 =
        (C77020 * (3 * C77877 + be * C77878 +
                   C76976 * (2 * C77873 + be * C77874 +
                             C76976 * (C77006 + be * C76976 * C76946 +
                                       C76976 * (be * C76946 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C37659 =
        (2 * C77020 * C77877 +
         C77020 *
             (C77877 + (C77006 + be * C78007 +
                        C76976 * (be * C76946 + C76976 * std::pow(C76860, 7) *
                                                    bs[7] * C76982)) *
                           C77206)) /
        std::pow(C76797, 2);
    const double C315 =
        (4 * (2 * C77085 + be * C77086 + C76854 * C77103) +
         be * (3 * C77086 + C76854 * C77104) +
         C76854 * (3 * C77103 + be * C77104 +
                   C76854 * (2 * C77099 + be * C77100 +
                             C76854 * (C77093 + be * C76854 * C77095 +
                                       C76854 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C1956 =
        (C77074 + be * C77077 + C76854 * C77085 + C77103 * C77206) /
        std::pow(C76797, 2);
    const double C1957 =
        (C77020 * (2 * C77085 + be * C77086 + C76854 * C77103)) /
        std::pow(C76797, 2);
    const double C1958 =
        (2 * C77085 + be * C77086 + C76854 * C77103 +
         (2 * C77099 + be * C77100 +
          C76854 * (C77093 + be * C76854 * C77095 +
                    C76854 * (be * C77095 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C77069))) *
             C77206) /
        std::pow(C76797, 2);
    const double C3379 =
        (C77020 * (3 * C77103 + be * C77104 +
                   C76854 * (2 * C77099 + be * C77100 +
                             C76854 * (C77093 + be * C76854 * C77095 +
                                       C76854 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C11803 =
        (2 * C77020 * C77103 +
         C77020 *
             (C77103 + (C77093 + be * C77519 +
                        C76854 * (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069)) *
                           C77206)) /
        std::pow(C76797, 2);
    const double C5620 =
        (3 * (C77085 + ae * C77476 + C76976 * C77479) +
         ae * (2 * C77476 + C76976 * C77480) +
         C76976 * (2 * C77479 + ae * C77480 +
                   C76976 * (C77099 + ae * C76976 * C76955 +
                             C76976 * (ae * C76955 +
                                       C76976 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C31147 =
        (4 * (2 * C77473 + ae * C77474 + C76976 * C77891) +
         ae * (3 * C77474 + C76976 * C77892) +
         C76976 * (3 * C77891 + ae * C77892 +
                   C76976 * (2 * C77887 + ae * C77888 +
                             C76976 * (C77093 + ae * C76976 * C76943 +
                                       C76976 * (ae * C76943 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C245 =
        (4 * (2 * C77042 + ae * C77043 + C76854 * C77060) +
         ae * (3 * C77043 + C76854 * C77061) +
         C76854 * (3 * C77060 + ae * C77061 +
                   C76854 * (2 * C77056 + ae * C77057 +
                             C76854 * (C77050 + ae * C76854 * C77052 +
                                       C76854 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C945 =
        (C77031 + ae * C77034 + C76854 * C77042 + C77060 * C77108) /
        std::pow(C76797, 2);
    const double C946 =
        (C76976 * (2 * C77042 + ae * C77043 + C76854 * C77060)) /
        std::pow(C76797, 2);
    const double C947 =
        (2 * C77042 + ae * C77043 + C76854 * C77060 +
         (2 * C77056 + ae * C77057 +
          C76854 * (C77050 + ae * C76854 * C77052 +
                    C76854 * (ae * C77052 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C77026))) *
             C77108) /
        std::pow(C76797, 2);
    const double C2668 =
        (C76976 * (3 * C77060 + ae * C77061 +
                   C76854 * (2 * C77056 + ae * C77057 +
                             C76854 * (C77050 + ae * C76854 * C77052 +
                                       C76854 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C6832 =
        (2 * C76976 * C77060 +
         C76976 *
             (C77060 + (C77050 + ae * C77547 +
                        C76854 * (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026)) *
                           C77108)) /
        std::pow(C76797, 2);
    const double C10308 =
        (3 * (C77042 + be * C77699 + C77020 * C77702) +
         be * (2 * C77699 + C77020 * C77703) +
         C77020 * (2 * C77702 + be * C77703 +
                   C77020 * (C77056 + be * C77020 * C76957 +
                             C77020 * (be * C76957 +
                                       C77020 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C60901 =
        (4 * (2 * C77696 + be * C77697 + C77020 * C78082) +
         be * (3 * C77697 + C77020 * C78083) +
         C77020 * (3 * C78082 + be * C78083 +
                   C77020 * (2 * C78078 + be * C78079 +
                             C77020 * (C77050 + be * C77020 * C76946 +
                                       C77020 * (be * C76946 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C11947 = C78890 * C10448;
    const double C31241 =
        (4 * (2 * C77542 + ae * C77543 + C76976 * C77941) +
         ae * (3 * C77543 + C76976 * C77942) +
         C76976 * (3 * C77941 + ae * C77942 +
                   C76976 * (2 * C77937 + ae * C77938 +
                             C76976 * (C77140 + ae * C76976 * C77052 +
                                       C76976 * (ae * C77052 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C61055 =
        (4 * (2 * C77672 + be * C77717 + C77020 * C77977) +
         be * (3 * C77717 + C77020 * C78089) +
         C77020 * (3 * C77977 + be * C78089 +
                   C77020 * (2 * C77974 + be * C78018 +
                             C77020 * (C77140 + be * C77020 * C77095 +
                                       C77020 * (be * C77095 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C34084 =
        (3 * (C77672 + ae * C77856 + C76976 * C77998) +
         ae * (C77020 * C77942 + C77921 * be) +
         C76976 * (2 * C77998 + ae * (C77020 * C77938 + C77915) +
                   C76976 * (C77974 + ae * (C77020 * C76976 * C77052 + C77908) +
                             C76976 * (ae * (C77020 * C77052 + C76936) +
                                       C76976 * (be * C77095 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C502 =
        (4 * (2 * C77166 + be * C77167 + C76854 * C77184) +
         be * (3 * C77167 + C76854 * C77185) +
         C76854 * (3 * C77184 + be * C77185 +
                   C76854 * (2 * C77180 + be * C77181 +
                             C76854 * (C77174 + be * C76854 * C77176 +
                                       C76854 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C1341 =
        (C77155 + be * C77158 + C76854 * C77166 + C77184 * C77108) /
        std::pow(C76797, 2);
    const double C1342 =
        (C76976 * (2 * C77166 + be * C77167 + C76854 * C77184)) /
        std::pow(C76797, 2);
    const double C1343 =
        (2 * C77166 + be * C77167 + C76854 * C77184 +
         (2 * C77180 + be * C77181 +
          C76854 * (C77174 + be * C76854 * C77176 +
                    C76854 * (be * C77176 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C77150))) *
             C77108) /
        std::pow(C76797, 2);
    const double C2951 =
        (C76976 * (3 * C77184 + be * C77185 +
                   C76854 * (2 * C77180 + be * C77181 +
                             C76854 * (C77174 + be * C76854 * C77176 +
                                       C76854 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C7115 =
        (2 * C76976 * C77184 +
         C76976 *
             (C77184 + (C77174 + be * C77568 +
                        C76854 * (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150)) *
                           C77108)) /
        std::pow(C76797, 2);
    const double C10500 =
        (3 * (C77166 + ae * C77731 + C77020 * C77734) +
         ae * (2 * C77731 + C77020 * C77735) +
         C77020 * (2 * C77734 + ae * C77735 +
                   C77020 * (C77180 + ae * C77020 * C76955 +
                             C77020 * (ae * C76955 +
                                       C77020 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C61099 =
        (4 * (2 * C77728 + ae * C77729 + C77020 * C78099) +
         ae * (3 * C77729 + C77020 * C78100) +
         C77020 * (3 * C78099 + ae * C78100 +
                   C77020 * (2 * C78095 + ae * C78096 +
                             C77020 * (C77174 + ae * C77020 * C76943 +
                                       C77020 * (ae * C76943 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C11411 = C78891 * C6532;
    const double C8078 = C78891 * C6534;
    const double C31336 =
        (4 * (2 * C77563 + be * C77564 + C76976 * C77956) +
         be * (3 * C77564 + C76976 * C77957) +
         C76976 * (3 * C77956 + be * C77957 +
                   C76976 * (2 * C77952 + be * C77953 +
                             C76976 * (C77200 + be * C76976 * C77176 +
                                       C76976 * (be * C77176 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C35980 =
        (3 * (C77563 + ae * C78028 + C77020 * C78031) +
         ae * (2 * C78028 + C77020 * C78032) +
         C77020 * (2 * C78031 + ae * C78032 +
                   C77020 * (C77952 + ae * C77020 * C77907 +
                             C77020 * (ae * C77907 +
                                       C77020 * (be * C77176 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C61146 =
        (4 * (2 * C77742 + ae * C77743 + C77020 * C78110) +
         ae * (3 * C77743 + C77020 * C78111) +
         C77020 * (3 * C78110 + ae * C78111 +
                   C77020 * (2 * C78106 + ae * C78107 +
                             C77020 * (C77200 + ae * C77020 * C77008 +
                                       C77020 * (ae * C77008 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C78797 = C78569 * C78557;
    const double C78835 = C78802 + C78569;
    const double C78805 = C78578 / C78559;
    const double C78801 = C78578 * C78557;
    const double C2521 = C78881 - (C78569 * C78560) / C78555;
    const double C78815 = C78651 * C78645;
    const double C78850 = C78817 + C78651;
    const double C78819 = C78658 / C78559;
    const double C78816 = C78658 * C78645;
    const double C6683 = C78885 - (C78651 * C78647) / C78555;
    const double C78821 = C78693 * C78687;
    const double C78856 = C78823 + C78693;
    const double C78825 = C78700 / C78559;
    const double C78822 = C78700 * C78687;
    const double C11584 = C78887 - (C78693 * C78689) / C78555;
    const double C26812 = C26806 + C26785;
    const double C26811 = C26805 + C26781;
    const double C26810 = C26804 + C26777;
    const double C29460 = C29457 + C29445;
    const double C31005 = C31003 + C30996;
    const double C31492 = C31489 + C31480;
    const double C52814 = C52808 + C52787;
    const double C52813 = C52807 + C52783;
    const double C52812 = C52806 + C52779;
    const double C60805 = C60803 + C60796;
    const double C53164 = C53162 * C78889;
    const double C637 = C633 * C78891;
    const double C1162 = C1158 + C1144;
    const double C1542 = C1538 + C1524;
    const double C2067 = C2063 + C2049;
    const double C2447 = C2443 + C2429;
    const double C4298 = C4296 + C4289;
    const double C4732 = C4730 + C4723;
    const double C26807 = C26801 - C26788;
    const double C26808 = C26802 - C26792;
    const double C52809 = C52803 - C52790;
    const double C52810 = C52804 - C52794;
    const double C29458 = C29455 - C29448;
    const double C57019 = C57016 - C57006;
    const double C57020 = C57017 - C57010;
    const double C32155 = C32152 + C32140;
    const double C53154 = C2066 * C78889;
    const double C53165 = C53163 * C78889;
    const double C55183 = C55182 * C78889;
    const double C638 = C634 * C78891;
    const double C639 = C635 * C78891;
    const double C1545 = C1541 * C78891;
    const double C2450 = C2446 * C78891;
    const double C839 =
        (C76987 + ae * C76990 + C76854 * C76998 + be * C76976 * C76920 +
         C76976 * (be * C76920 + C76976 * C77016)) /
        std::pow(C76797, 2);
    const double C840 =
        (be * (2 * C76886 + C76854 * C76920 + C76904 * ae) +
         C76976 * (2 * C76998 + ae * C76999 + C76854 * C77016)) /
        std::pow(C76797, 2);
    const double C1850 =
        (C77031 + ae * C77034 + C76854 * C77042 + be * C77020 * C76920 +
         C77020 * (be * C76920 + C77020 * C77060)) /
        std::pow(C76797, 2);
    const double C1851 =
        (be * (2 * C76886 + C76854 * C76920 + C76904 * ae) +
         C77020 * (2 * C77042 + ae * C77043 + C76854 * C77060)) /
        std::pow(C76797, 2);
    const double C3953 =
        (C77020 * (be * C76920 + C76976 * C77016)) / std::pow(C76797, 2);
    const double C4067 =
        (be * C76976 * C76920 + C77020 * C76976 * C77060) / std::pow(C76797, 2);
    const double C111 = (3 * (C76867 + C76854 * C76886 + C76875 * ae) +
                         C76854 * (2 * C76886 + C76854 * C76920 + C76904 * ae) +
                         (2 * C76875 + C76854 * C76904) * ae) /
                        C76797;
    const double C739 =
        (C76867 + C76854 * C76886 + C76875 * ae + C76920 * C77108) / C76797;
    const double C741 =
        (C76976 * (2 * C76886 + C76854 * C76920 + C76904 * ae)) / C76797;
    const double C1644 =
        (C76867 + C76854 * C76886 + C76875 * ae + C76920 * C77206) / C76797;
    const double C1646 =
        (C77020 * (2 * C76886 + C76854 * C76920 + C76904 * ae)) / C76797;
    const double C3842 = (C77020 * C76976 * C76920) / C76797;
    const double C118 =
        (3 * (C76884 + ae * C76885 + be * C76886 + C76854 * C76916) +
         ae * (2 * C76885 + C76854 * C76919 + C76904 * be) +
         be * (2 * C76886 + C76854 * C76920 + C76904 * ae) +
         C76854 *
             (2 * C76916 + ae * C76919 + be * C76920 +
              C76854 * (C76910 + ae * C76911 + be * C76912 +
                        C76854 * (ae * C76902 + be * C76905 +
                                  C76854 *
                                      (C76891 * C76892 +
                                       C76858 * bs[6] * std::pow(C76852, 6)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C750 =
        (2 * (ae * C76976 * C76879 + be * C76976 * C76880 + C76854 * C77231) +
         ae * C76976 * C76919 + be * C76976 * C76920 +
         C76854 * (C77231 + ae * C76976 * C76911 + be * C76976 * C76912 +
                   C76854 * (ae * C76976 * C76902 + be * C76976 * C76905 +
                             C76854 * C76976 * C76954))) /
        std::pow(C76797, 2);
    const double C1051 =
        (C77074 + be * C77077 + C76854 * C77085 + ae * C76976 * C76919 +
         C76976 * (ae * C76919 + C76976 * C77103)) /
        std::pow(C76797, 2);
    const double C1052 =
        (ae * (2 * C76885 + C76854 * C76919 + C76904 * be) +
         C76976 * (2 * C77085 + be * C77086 + C76854 * C77103)) /
        std::pow(C76797, 2);
    const double C1655 =
        (2 * (ae * C77020 * C76879 + be * C77020 * C76880 + C76854 * C77306) +
         ae * C77020 * C76919 + be * C77020 * C76920 +
         C76854 * (C77306 + ae * C77020 * C76911 + be * C77020 * C76912 +
                   C76854 * (ae * C77020 * C76902 + be * C77020 * C76905 +
                             C76854 * C77020 * C76954))) /
        std::pow(C76797, 2);
    const double C2246 =
        (C77155 + be * C77158 + C76854 * C77166 + ae * C77020 * C76919 +
         C77020 * (ae * C76919 + C77020 * C77184)) /
        std::pow(C76797, 2);
    const double C2247 =
        (ae * (2 * C76885 + C76854 * C76919 + C76904 * be) +
         C77020 * (2 * C77166 + be * C77167 + C76854 * C77184)) /
        std::pow(C76797, 2);
    const double C4181 =
        (ae * C77020 * C76919 + C76976 * C77020 * C77103) / std::pow(C76797, 2);
    const double C4509 =
        (ae * C76976 * C76919 + C77020 * C76976 * C77184) / std::pow(C76797, 2);
    const double C110 = (3 * (C76866 + C76854 * C76885 + C76875 * be) +
                         C76854 * (2 * C76885 + C76854 * C76919 + C76904 * be) +
                         (2 * C76875 + C76854 * C76904) * be) /
                        C76797;
    const double C738 =
        (C76866 + C76854 * C76885 + C76875 * be + C76919 * C77108) / C76797;
    const double C740 =
        (C76976 * (2 * C76885 + C76854 * C76919 + C76904 * be)) / C76797;
    const double C1643 =
        (C76866 + C76854 * C76885 + C76875 * be + C76919 * C77206) / C76797;
    const double C1645 =
        (C77020 * (2 * C76885 + C76854 * C76919 + C76904 * be)) / C76797;
    const double C3841 = (C77020 * C76976 * C76919) / C76797;
    const double C36127 = C36123 - C36124;
    const double C32229 = C32228 - C32226;
    const double C32869 = C32868 - C32866;
    const double C62149 = C62148 - C62146;
    const double C31004 = C31002 - C30999;
    const double C31490 = C31487 - C31483;
    const double C33737 = C33736 - C33734;
    const double C60804 = C60802 - C60799;
    const double C31491 = C31488 + C31476;
    const double C76969 = C76854 * C76966;
    const double C77803 = C76976 * C76966;
    const double C6760 =
        (2 * (be * C76920 + C76976 * C77016) + be * (C76920 + C76966 * C77108) +
         C76976 * (C77016 + be * C76976 * C76966 +
                   C76976 * (be * C76966 +
                             C76976 * (C77006 + ae * C77516 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C7461 =
        (C77020 * (C77016 + be * C76976 * C76966 +
                   C76976 * (be * C76966 +
                             C76976 * (C77006 + ae * C77516 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C7565 =
        (be * (C76920 + C76966 * C77108) +
         C77020 *
             (C77060 + (C77050 + ae * C77547 +
                        C76854 * (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026)) *
                           C77108)) /
        std::pow(C76797, 2);
    const double C10794 =
        (be * C76920 + C76976 * C77016 +
         (be * C76966 +
          C76976 * (C77006 + ae * C77516 +
                    C76854 * (ae * C77008 +
                              C76854 * std::pow(C76860, 7) * bs[7] * C76982))) *
             C77206) /
        std::pow(C76797, 2);
    const double C11731 =
        (2 * (be * C76920 + C77020 * C77060) + be * (C76920 + C76966 * C77206) +
         C77020 * (C77060 + be * C77020 * C76966 +
                   C77020 * (be * C76966 +
                             C77020 * (C77050 + ae * C77547 +
                                       C76854 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C6691 =
        (2 * C76976 * C76920 + C76976 * (C76920 + C76966 * C77108)) / C76797;
    const double C7360 = (C77020 * (C76920 + C76966 * C77108)) / C76797;
    const double C11590 =
        (2 * C77020 * C76920 + C77020 * (C76920 + C76966 * C77206)) / C76797;
    const double C77926 = C76976 * C77924;
    const double C78142 = C77020 * C78140;
    const double C77534 = C77532 + C77525;
    const double C77799 = C77797 + C77793;
    const double C77533 = C77531 + C77522;
    const double C77798 = C77796 + C77790;
    const double C76968 = C76854 * C76965;
    const double C77808 = C76976 * C76965;
    const double C751 =
        (2 * (ae * (C76879 + C76902 * C77108) +
              be * (C76880 + C76905 * C77108) + C76854 * C77234) +
         ae * (C76919 + C76965 * C77108) + be * (C76920 + C76966 * C77108) +
         C76854 * (C77234 + ae * (C76911 + C76955 * C77108) +
                   be * (C76912 + C76957 * C77108) +
                   C76854 * (ae * (C76902 + C76943 * C77108) +
                             be * (C76905 + C76946 * C77108) +
                             C76854 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77108)))) /
        std::pow(C76797, 2);
    const double C1656 =
        (2 * (ae * (C76879 + C76902 * C77206) +
              be * (C76880 + C76905 * C77206) + C76854 * C77309) +
         ae * (C76919 + C76965 * C77206) + be * (C76920 + C76966 * C77206) +
         C76854 * (C77309 + ae * (C76911 + C76955 * C77206) +
                   be * (C76912 + C76957 * C77206) +
                   C76854 * (ae * (C76902 + C76943 * C77206) +
                             be * (C76905 + C76946 * C77206) +
                             C76854 * (C76954 +
                                       (C76927 * C76928 +
                                        C76858 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C3848 =
        (2 * (ae * C77020 * C77375 + be * C77020 * C77376 + C76854 * C77412) +
         ae * C77020 * C76976 * C76965 + be * C77020 * C76976 * C76966 +
         C76854 * (C77412 + ae * C77020 * C76976 * C76955 +
                   be * C77020 * C76976 * C76957 +
                   C76854 * (ae * C77020 * C76976 * C76943 +
                             be * C77020 * C76976 * C76946 +
                             C76854 * C77020 * C76976 *
                                 (C76927 * C76928 +
                                  C76858 * bs[7] * std::pow(C76860, 7)) *
                                 C76801))) /
        std::pow(C76797, 2);
    const double C6904 =
        (2 * (ae * C76919 + C76976 * C77103) + ae * (C76919 + C76965 * C77108) +
         C76976 * (C77103 + ae * C76976 * C76965 +
                   C76976 * (ae * C76965 +
                             C76976 * (C77093 + be * C77519 +
                                       C76854 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C7669 =
        (C77020 * C77103 + ae * C77020 * C76976 * C76965 +
         C76976 * (ae * C77020 * C76965 +
                   C76976 * C77020 *
                       (C77093 + be * C77519 +
                        C76854 * (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069)))) /
        std::pow(C76797, 2);
    const double C7976 =
        (ae * (C76919 + C76965 * C77108) +
         C77020 *
             (C77184 + (C77174 + be * C77568 +
                        C76854 * (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150)) *
                           C77108)) /
        std::pow(C76797, 2);
    const double C11002 =
        (ae * (C76919 + C76965 * C77206) +
         C76976 *
             (C77103 + (C77093 + be * C77519 +
                        C76854 * (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069)) *
                           C77206)) /
        std::pow(C76797, 2);
    const double C12014 =
        (2 * (ae * C76919 + C77020 * C77184) + ae * (C76919 + C76965 * C77206) +
         C77020 * (C77184 + ae * C77020 * C76965 +
                   C77020 * (ae * C76965 +
                             C77020 * (C77174 + be * C77568 +
                                       C76854 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C6690 =
        (2 * C76976 * C76919 + C76976 * (C76919 + C76965 * C77108)) / C76797;
    const double C7359 = (C77020 * (C76919 + C76965 * C77108)) / C76797;
    const double C11589 =
        (2 * C77020 * C76919 + C77020 * (C76919 + C76965 * C77206)) / C76797;
    const double C77925 = C76976 * C77923;
    const double C78141 = C77020 * C78139;
    const double C76967 = C76941 + C76964;
    const double C32227 = C78889 * C5467;
    const double C31000 = C78889 * C5469;
    const double C32867 = C78889 * C5949;
    const double C31484 = C78889 * C5951;
    const double C33735 = C78889 * C8257;
    const double C62147 = C78889 * C10205;
    const double C60800 = C78889 * C10207;
    const double C37591 = C37590 + C37588;
    const double C1152 = C78891 * C1133;
    const double C2812 = C78891 * C1134;
    const double C2057 = C78891 * C2038;
    const double C3451 = C78891 * C2039;
    const double C4293 = C78891 * C4283;
    const double C1532 = C78890 * C1513;
    const double C3092 = C78890 * C1514;
    const double C2437 = C78890 * C2418;
    const double C3731 = C78890 * C2419;
    const double C4727 = C78890 * C4717;
    const double C78054 = C78052 + C78045;
    const double C78053 = C78051 + C78042;
    const double C389 = C385 - C380;
    const double C1160 = C1156 - C1151;
    const double C2814 = C2813 - C2811;
    const double C2065 = C2061 - C2056;
    const double C3453 = C3452 - C3450;
    const double C4297 = C4295 - C4292;
    const double C6977 = C6973 - C6974;
    const double C11107 = C11103 - C11104;
    const double C7774 = C7770 - C7771;
    const double C6535 =
        (C77194 + be * C77560 + C76976 * C77563 + ae * C77020 * C77511 +
         C77020 *
             (ae * C77511 + C77020 * (C77197 + be * C76976 * C77163 +
                                      C76976 * (C77170 + C76976 * C77200)))) /
        std::pow(C76797, 2);
    const double C8741 =
        (ae * (2 * C77492 + C76976 * C77511 + C77504 * be) +
         C77020 * (2 * C77563 + be * C77564 +
                   C76976 * (C77197 + be * C76976 * C77163 +
                             C76976 * (C77170 + C76976 * C77200)))) /
        std::pow(C76797, 2);
    const double C38076 =
        (2 * (ae * C77511 + C77020 * C77956) + ae * (C77511 + C77923 * C77206) +
         C77020 * (C77956 + ae * C77020 * C77923 +
                   C77020 * (ae * C77923 +
                             C77020 * (C77200 + be * C78039 +
                                       C76976 * (be * C77176 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C5515 =
        (3 * (C76983 + C76976 * C77492 + C77490 * be) +
         C76976 * (2 * C77492 + C76976 * C77511 + C77504 * be) +
         (2 * C77490 + C76976 * C77504) * be) /
        C76797;
    const double C6031 =
        (C76983 + C76976 * C77492 + C77490 * be + C77511 * C77206) / C76797;
    const double C8325 =
        (C77020 * (2 * C77492 + C76976 * C77511 + C77504 * be)) / C76797;
    const double C37658 =
        (2 * C77020 * C77511 + C77020 * (C77511 + C77923 * C77206)) / C76797;
    const double C77919 = C77912 + C77913;
    const double C63025 = C63024 - C63022;
    const double C61009 = C61007 - C61004;
    const double C632 = C628 - C623;
    const double C1540 = C1536 - C1531;
    const double C3094 = C3093 - C3091;
    const double C2445 = C2441 - C2436;
    const double C3733 = C3732 - C3730;
    const double C4731 = C4729 - C4726;
    const double C11516 = C11515 - C11513;
    const double C12156 = C12152 - C12153;
    const double C31392 = C31390 - C31387;
    const double C32154 = C32151 - C32147;
    const double C34297 = C34296 - C34294;
    const double C12577 =
        (ae * (2 * C77760 + C77020 * C77779 + C77772 * be) +
         C76976 * (2 * C77672 + be * C77717 +
                   C77020 * (C77137 + be * C77020 * C77082 +
                             C77020 * (C77089 + C77020 * C77140)))) /
        std::pow(C76797, 2);
    const double C31897 =
        (2 * (ae * C77779 + C76976 * C77977) +
         ae * (C77543 + C77020 * (C77020 * C77938 + C77915) +
               C77020 * C77909 * be) +
         C76976 *
             (C77977 +
              ae * (C77851 + C77020 * (C77020 * C76976 * C77052 + C77908) +
                    C77020 * C77900 * be) +
              C76976 * (ae * (C77039 + C77020 * (C77020 * C77052 + C76936) +
                              C77020 * C76926 * be) +
                        C76976 * (C77140 + be * C77020 * C77095 +
                                  C77020 * (be * C77095 +
                                            C77020 * std::pow(C76860, 7) *
                                                bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C35893 =
        (ae *
             (3 * C77779 +
              C77020 * (2 * C77770 +
                        C77020 * (C77039 + C77020 * (C77020 * C77052 + C76936) +
                                  C77020 * C76926 * be) +
                        C78017 * be) +
              (2 * C77766 + C77020 * C78017) * be) +
         C76976 * (3 * C77977 + be * (2 * C77971 + C77020 * C78018) +
                   C77020 * (2 * C77974 + be * C78018 +
                             C77020 * (C77140 + be * C77020 * C77095 +
                                       C77020 * (be * C77095 +
                                                 C77020 * std::pow(C76860, 7) *
                                                     bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C10303 =
        (3 * (C77027 + C77020 * C77760 + C77758 * be) +
         C77020 * (2 * C77760 + C77020 * C77779 + C77772 * be) +
         (2 * C77758 + C77020 * C77772) * be) /
        C76797;
    const double C78136 = C78126 + C78133;
    const double C38149 = C38145 - C38146;
    const double C5665 =
        (3 * (C77113 + ae * C77492 + be * C77493 + C76976 * C77501) +
         ae * (2 * C77492 + C76976 * C77511 + C77504 * be) +
         be * (2 * C77493 + C76976 * C77512 + C77504 * ae) +
         C76976 * (2 * C77501 + ae * C77511 + be * C77512 +
                   C76976 * (C77118 + ae * C77502 + be * C77505 +
                             C76976 * (C77002 + C77089 + C76976 * C77123)))) /
        std::pow(C76797, 2);
    const double C8535 =
        (2 * (ae * C77020 * C76988 + be * C77020 * C77075 + C76976 * C77667) +
         ae * C77020 * C77511 + be * C77020 * C77512 +
         C76976 * (C77667 + ae * C77020 * C77502 + be * C77020 * C77505 +
                   C76976 * (ae * C77020 * C76995 + be * C77020 * C77082 +
                             C76976 * C77020 * C77123))) /
        std::pow(C76797, 2);
    const double C31822 =
        (2 * (ae * C77743 + be * C77717 + C76976 * C77969) +
         ae * (C77511 + C77923 * C77206) + be * (C77512 + C77924 * C77206) +
         C76976 * (C77969 + ae * (C77502 + C77907 * C77206) +
                   be * (C77505 + C77910 * C77206) +
                   C76976 * (ae * (C76995 + C77008 * C77206) +
                             be * (C77082 + C77095 * C77206) +
                             C76976 * (C77123 +
                                       (C76927 * C76928 +
                                        C77108 * bs[7] * std::pow(C76860, 7)) *
                                           C76801 * C77206)))) /
        std::pow(C76797, 2);
    const double C5615 =
        (3 * (C77070 + C76976 * C77493 + C77490 * ae) +
         C76976 * (2 * C77493 + C76976 * C77512 + C77504 * ae) +
         (2 * C77490 + C76976 * C77504) * ae) /
        C76797;
    const double C6203 =
        (C77070 + C76976 * C77493 + C77490 * ae + C77512 * C77206) / C76797;
    const double C8465 =
        (C77020 * (2 * C77493 + C76976 * C77512 + C77504 * ae)) / C76797;
    const double C37798 =
        (2 * C77020 * C77512 + C77020 * (C77512 + C77924 * C77206)) / C76797;
    const double C11878 = C11877 + C11875;
    const double C53156 = C2068 * C78889;
    const double C61012 = C61010 * C78889;
    const double C10591 =
        (3 * (C77211 + ae * C77760 + be * C77761 + C77020 * C77769) +
         ae * (2 * C77760 + C77020 * C77779 + C77772 * be) +
         be * (2 * C77761 + C77020 * C77780 + C77772 * ae) +
         C77020 * (2 * C77769 + ae * C77779 + be * C77780 +
                   C77020 * (C77216 + ae * C77770 + be * C77773 +
                             C77020 * (C77046 + C77170 + C77020 * C77221)))) /
        std::pow(C76797, 2);
    const double C10495 =
        (3 * (C77151 + C77020 * C77761 + C77758 * ae) +
         C77020 * (2 * C77761 + C77020 * C77780 + C77772 * ae) +
         (2 * C77758 + C77020 * C77772) * ae) /
        C76797;
    const double C7259 = C7258 + C7256;
    const double C8184 = C8183 + C8181;
    const double C1547 = C1543 * C78891;
    const double C2452 = C2448 * C78891;
    const double C1763 = C78891 * C1744;
    const double C3240 = C78891 * C1745;
    const double C10799 = C78891 * C6034;
    const double C7466 = C78891 * C6036;
    const double C53071 = C78889 * C1956;
    const double C54346 = C78889 * C1957;
    const double C964 = C78890 * C945;
    const double C2673 = C78890 * C946;
    const double C27313 = C78889 * C1341;
    const double C28617 = C78889 * C1342;
    const double C78831 = C78797 / C78555;
    const double C78865 = C78835 / C78559;
    const double C78866 = C78837 + C78805;
    const double C2523 = C78805 - C78576 / C78573;
    const double C78834 = C78801 / C78555;
    const double C78847 = C78815 / C78555;
    const double C78872 = C78850 / C78559;
    const double C78873 = C78851 + C78819;
    const double C6685 = C78819 - C78656 / C78573;
    const double C78849 = C78816 / C78555;
    const double C78853 = C78821 / C78555;
    const double C78875 = C78856 / C78559;
    const double C78876 = C78857 + C78825;
    const double C11586 = C78825 - C78698 / C78573;
    const double C78855 = C78822 / C78555;
    const double C26818 = C26812 * C78890;
    const double C26817 = C26811 * C78890;
    const double C26816 = C26810 * C78890;
    const double C29463 = C29460 * C78890;
    const double C31007 = C31005 * C78890;
    const double C31495 = C31492 * C78890;
    const double C1546 = C1542 * C78891;
    const double C53155 = C2067 * C78889;
    const double C2451 = C2447 * C78891;
    const double C55178 = C4298 * C78889;
    const double C4734 = C4732 * C78891;
    const double C26813 = C26807 + C26789;
    const double C26814 = C26808 + C26793;
    const double C52815 = C52809 + C52791;
    const double C52816 = C52810 + C52795;
    const double C29461 = C29458 + C29449;
    const double C57022 = C57019 + C57007;
    const double C57023 = C57020 + C57011;
    const double C858 = C78891 * C839;
    const double C2601 = C78891 * C840;
    const double C1869 = C78890 * C1850;
    const double C3312 = C78890 * C1851;
    const double C3963 = C78891 * C3953;
    const double C4077 = C78890 * C4067;
    const double C190 = C162 * C111;
    const double C261 = C233 * C111;
    const double C857 = C162 * C739;
    const double C963 = C233 * C739;
    const double C26796 = C26357 * C739;
    const double C2600 = C162 * C741;
    const double C2672 = C233 * C741;
    const double C28210 = C26357 * C741;
    const double C1762 = C162 * C1644;
    const double C1868 = C233 * C1644;
    const double C52798 = C26357 * C1644;
    const double C3239 = C162 * C1646;
    const double C3311 = C233 * C1646;
    const double C54140 = C26357 * C1646;
    const double C3962 = C162 * C3842;
    const double C4076 = C233 * C3842;
    const double C29452 = C26357 * C3842;
    const double C28211 = C78889 * C750;
    const double C27075 = C78889 * C1051;
    const double C28417 = C78889 * C1052;
    const double C54141 = C78889 * C1655;
    const double C53325 = C78889 * C2246;
    const double C54547 = C78889 * C2247;
    const double C29775 = C78889 * C4181;
    const double C30077 = C78889 * C4509;
    const double C26794 = C26357 * C738;
    const double C27073 = C78889 * C738;
    const double C28208 = C26357 * C740;
    const double C28415 = C78889 * C740;
    const double C52796 = C26357 * C1643;
    const double C53069 = C78889 * C1643;
    const double C54138 = C26357 * C1645;
    const double C54344 = C78889 * C1645;
    const double C29450 = C26357 * C3841;
    const double C29773 = C78889 * C3841;
    const double C36128 = C36127 - C36125;
    const double C31494 = C31491 * C78890;
    const double C76971 = C76931 + C76969;
    const double C10898 =
        (C76976 * C77060 + be * C77020 * C77803 +
         C77020 * (be * C77803 +
                   C77020 * C76976 *
                       (C77050 + ae * C77547 +
                        C76854 * (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026)))) /
        std::pow(C76797, 2);
    const double C10693 = (C76976 * C76920 + C77803 * C77206) / C76797;
    const double C77928 = C77903 + C77926;
    const double C78144 = C78123 + C78142;
    const double C5616 =
        (3 * (C77077 + C76976 * C77487 + C77484 * ae) +
         C76976 * (2 * C77487 + C76976 * C77534 + C77523 * ae) +
         (2 * C77484 + C76976 * C77523) * ae) /
        C76797;
    const double C6204 =
        (C77077 + C76976 * C77487 + C77484 * ae + C77534 * C77206) / C76797;
    const double C8466 =
        (C77020 * (2 * C77487 + C76976 * C77534 + C77523 * ae)) / C76797;
    const double C10496 =
        (3 * (C77158 + C77020 * C77755 + C77752 * ae) +
         C77020 * (2 * C77755 + C77020 * C77799 + C77791 * ae) +
         (2 * C77752 + C77020 * C77791) * ae) /
        C76797;
    const double C5666 =
        (3 * (C77482 + ae * C77486 + be * C77487 + C76976 * C77526) +
         ae * (2 * C77486 + C76976 * C77533 + C77523 * be) +
         be * (2 * C77487 + C76976 * C77534 + C77523 * ae) +
         C76976 *
             (2 * C77526 + ae * C77533 + be * C77534 +
              C76976 * (C77515 + ae * C77527 + be * C77528 +
                        C76976 * (ae * C77516 + be * C77519 +
                                  C76976 * C76854 *
                                      (C76927 * C76928 +
                                       C77108 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C6536 =
        (C77558 + be * C77566 + C76976 * C77571 + ae * C77020 * C77533 +
         C77020 * (ae * C77533 +
                   C77020 * (C77567 + be * C76976 * C77568 +
                             C76976 * (be * C77568 + C76976 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77191)))) /
        std::pow(C76797, 2);
    const double C8536 =
        (2 * (ae * C77020 * C77001 + be * C77020 * C77088 + C76976 * C77669) +
         ae * C77020 * C77533 + be * C77020 * C77534 +
         C76976 * (C77669 + ae * C77020 * C77527 + be * C77020 * C77528 +
                   C76976 * (ae * C77020 * C77516 + be * C77020 * C77519 +
                             C76976 * C77020 * C76854 *
                                 (C76927 * C76928 +
                                  C77108 * bs[7] * std::pow(C76860, 7)) *
                                 C76801))) /
        std::pow(C76797, 2);
    const double C8742 =
        (ae * (2 * C77486 + C76976 * C77533 + C77523 * be) +
         C77020 * (2 * C77571 + be * C77572 +
                   C76976 * (C77567 + be * C76976 * C77568 +
                             C76976 * (be * C77568 + C76976 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77191)))) /
        std::pow(C76797, 2);
    const double C5516 =
        (3 * (C76990 + C76976 * C77486 + C77484 * be) +
         C76976 * (2 * C77486 + C76976 * C77533 + C77523 * be) +
         (2 * C77484 + C76976 * C77523) * be) /
        C76797;
    const double C6032 =
        (C76990 + C76976 * C77486 + C77484 * be + C77533 * C77206) / C76797;
    const double C8326 =
        (C77020 * (2 * C77486 + C76976 * C77533 + C77523 * be)) / C76797;
    const double C10592 =
        (3 * (C77574 + ae * C77754 + be * C77755 + C77020 * C77788) +
         ae * (2 * C77754 + C77020 * C77798 + C77791 * be) +
         be * (2 * C77755 + C77020 * C77799 + C77791 * ae) +
         C77020 *
             (2 * C77788 + ae * C77798 + be * C77799 +
              C77020 * (C77578 + ae * C77789 + be * C77792 +
                        C77020 * (ae * C77547 + be * C77568 +
                                  C77020 * C76854 *
                                      (C76927 * C76928 +
                                       C77206 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C12578 =
        (ae * (2 * C77754 + C77020 * C77798 + C77791 * be) +
         C76976 * (2 * C77675 + be * C77721 +
                   C77020 * (C77546 + be * C77020 * C77519 +
                             C77020 * (be * C77519 + C77020 * C76854 *
                                                         std::pow(C76860, 7) *
                                                         bs[7] * C77131)))) /
        std::pow(C76797, 2);
    const double C10304 =
        (3 * (C77034 + C77020 * C77754 + C77752 * be) +
         C77020 * (2 * C77754 + C77020 * C77798 + C77791 * be) +
         (2 * C77752 + C77020 * C77791) * be) /
        C76797;
    const double C76970 = C76929 + C76968;
    const double C11309 =
        (C76976 * C77184 + ae * C77020 * C77808 +
         C77020 * (ae * C77808 +
                   C77020 * C76976 *
                       (C77174 + be * C77568 +
                        C76854 * (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150)))) /
        std::pow(C76797, 2);
    const double C10692 = (C76976 * C76919 + C77808 * C77206) / C76797;
    const double C77927 = C77898 + C77925;
    const double C78143 = C78117 + C78141;
    const double C32230 = C32229 + C32227;
    const double C31006 = C31004 + C31000;
    const double C32870 = C32869 + C32867;
    const double C31493 = C31490 + C31484;
    const double C33738 = C33737 + C33735;
    const double C62150 = C62149 + C62147;
    const double C60806 = C60804 + C60800;
    const double C37592 = C37591 * C78890;
    const double C35936 =
        (3 * (C77560 + C77020 * C77857 + C77852 * ae) +
         C77020 * (2 * C77857 + C77020 * C78054 + C78043 * ae) +
         (2 * C77852 + C77020 * C78043) * ae) /
        C76797;
    const double C36023 =
        (3 * (C77850 + ae * C77856 + be * C77857 + C77020 * C78046) +
         ae * (2 * C77856 + C77020 * C78053 + C78043 * be) +
         be * (2 * C77857 + C77020 * C78054 + C78043 * ae) +
         C77020 *
             (2 * C78046 + ae * C78053 + be * C78054 +
              C77020 * (C78035 + ae * C78047 + be * C78048 +
                        C77020 * (ae * C78036 + be * C78039 +
                                  C77020 * C76976 *
                                      (C76927 * C76928 +
                                       C77206 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C37937 =
        (2 * C77672 + be * C77717 + C77020 * C77977 +
         ae * (2 * C77856 + C77020 * C78053 + C78043 * be) +
         C76976 *
             (ae * (2 * C77770 +
                    C77020 * (C77039 + C77020 * (C77020 * C77052 + C76936) +
                              C77020 * C76926 * be) +
                    C78017 * be) +
              C76976 * (2 * C77974 + be * C78018 +
                        C77020 * (C77140 + be * C77020 * C77095 +
                                  C77020 * (be * C77095 +
                                            C77020 * std::pow(C76860, 7) *
                                                bs[7] * C77131))))) /
        std::pow(C76797, 2);
    const double C35762 =
        (3 * (C77539 + C77020 * C77856 + C77852 * be) +
         C77020 * (2 * C77856 + C77020 * C78053 + C78043 * be) +
         (2 * C77852 + C77020 * C78043) * be) /
        C76797;
    const double C393 = C389 + C381;
    const double C1164 = C1160 + C1152;
    const double C2815 = C2814 + C2812;
    const double C2069 = C2065 + C2057;
    const double C3454 = C3453 + C3451;
    const double C4299 = C4297 + C4293;
    const double C6978 = C6977 - C6975;
    const double C11108 = C11107 - C11105;
    const double C7775 = C7774 - C7772;
    const double C57255 = C78891 * C6535;
    const double C59348 = C78891 * C8741;
    const double C56779 = C78891 * C6031;
    const double C57012 = C162 * C6031;
    const double C58940 = C78891 * C8325;
    const double C59141 = C162 * C8325;
    const double C63026 = C63025 + C63023;
    const double C61011 = C61009 + C61005;
    const double C636 = C632 + C624;
    const double C1544 = C1540 + C1532;
    const double C3095 = C3094 + C3092;
    const double C2449 = C2445 + C2437;
    const double C3734 = C3733 + C3731;
    const double C4733 = C4731 + C4727;
    const double C11517 = C11516 + C11514;
    const double C12157 = C12156 - C12154;
    const double C31394 = C31392 + C31388;
    const double C32157 = C32154 + C32148;
    const double C34298 = C34297 + C34295;
    const double C37940 = C78890 * C12577;
    const double C38150 = C38149 - C38147;
    const double C59144 = C78891 * C8535;
    const double C31155 = C26357 * C5615;
    const double C31245 = C233 * C5615;
    const double C31747 = C26357 * C6203;
    const double C31903 = C233 * C6203;
    const double C57014 = C162 * C6203;
    const double C33950 = C26357 * C8465;
    const double C34086 = C233 * C8465;
    const double C59143 = C162 * C8465;
    const double C62419 = C11878 * C78889;
    const double C61103 = C26357 * C10495;
    const double C61150 = C162 * C10495;
    const double C7260 = C7259 * C78891;
    const double C8185 = C8184 * C78891;
    const double C78892 = C78831 + C78881;
    const double C2522 = C78865 - (C78578 * C78560) / C78555;
    const double C90 = C78866 / C78559 - C78576 / C78838;
    const double C78882 = C78834 + C78865;
    const double C78893 = C78847 + C78885;
    const double C6684 = C78872 - (C78658 * C78647) / C78555;
    const double C5452 = C78873 / C78559 - C78656 / C78838;
    const double C78886 = C78849 + C78872;
    const double C78894 = C78853 + C78887;
    const double C11585 = C78875 - (C78700 * C78689) / C78555;
    const double C10191 = C78876 / C78559 - C78698 / C78838;
    const double C78888 = C78855 + C78875;
    const double C26819 = C26813 * C78890;
    const double C26820 = C26814 * C78890;
    const double C29464 = C29461 * C78890;
    const double C57025 = C57022 * C78889;
    const double C57026 = C57023 * C78889;
    const double C26803 = C26794 - C26795;
    const double C28212 = C28208 - C28209;
    const double C52805 = C52796 - C52797;
    const double C54142 = C54138 - C54139;
    const double C29456 = C29450 - C29451;
    const double C36129 = C36128 + C36126;
    const double C76973 = C76971 + C76953;
    const double C77930 = C77928 + C77918;
    const double C78146 = C78144 + C78125;
    const double C76972 = C76970 + C76950;
    const double C77929 = C77927 + C77915;
    const double C78145 = C78143 + C78120;
    const double C32231 = C32230 * C78890;
    const double C31008 = C31006 * C78890;
    const double C32871 = C32870 * C78890;
    const double C31496 = C31493 * C78890;
    const double C33739 = C33738 * C78890;
    const double C53157 = C2069 * C78889;
    const double C54413 = C3454 * C78889;
    const double C55179 = C4299 * C78889;
    const double C6979 = C6978 + C6976;
    const double C11109 = C11108 + C11106;
    const double C7776 = C7775 + C7773;
    const double C57018 = C57012 - C57013;
    const double C59145 = C59141 - C59142;
    const double C63027 = C63026 * C78889;
    const double C61013 = C61011 * C78889;
    const double C640 = C636 * C78891;
    const double C1548 = C1544 * C78891;
    const double C3096 = C3095 * C78891;
    const double C2453 = C2449 * C78891;
    const double C3735 = C3734 * C78891;
    const double C4735 = C4733 * C78891;
    const double C11518 = C11517 * C78891;
    const double C12158 = C12157 + C12155;
    const double C38151 = C38150 + C38148;
    const double C87 =
        (C78880 + 2 * C78569) / C78559 - (C78892 * C78560) / C78555;
    const double C88 =
        (C78864 + 2 * C78578 + C78892) / C78559 - (C78882 * C78560) / C78555;
    const double C89 = (C78836 + C78575 / C78555 + C78882) / C78559 -
                       (C78866 * C78560) / C78555;
    const double C5449 =
        (C78883 + 2 * C78651) / C78559 - (C78893 * C78647) / C78555;
    const double C5450 =
        (C78868 + 2 * C78658 + C78893) / C78559 - (C78886 * C78647) / C78555;
    const double C5451 = (C78842 + C78655 / C78555 + C78886) / C78559 -
                         (C78873 * C78647) / C78555;
    const double C10188 =
        (C78884 + 2 * C78693) / C78559 - (C78894 * C78689) / C78555;
    const double C10189 =
        (C78870 + 2 * C78700 + C78894) / C78559 - (C78888 * C78689) / C78555;
    const double C10190 = (C78845 + C78697 / C78555 + C78888) / C78559 -
                          (C78876 * C78689) / C78555;
    const double C26809 = C26803 - C26796;
    const double C28213 = C28212 - C28210;
    const double C52811 = C52805 - C52798;
    const double C54143 = C54142 - C54140;
    const double C29459 = C29456 - C29452;
    const double C36130 = C36129 * C78890;
    const double C841 =
        (2 * C76998 + ae * C76999 + C76854 * C77016 + be * C76976 * C76973 +
         C76976 * (be * C76973 +
                   C76976 * (2 * C77012 + ae * C77013 +
                             C76854 * (C77006 + ae * C76854 * C77008 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C1852 =
        (2 * C77042 + ae * C77043 + C76854 * C77060 + be * C77020 * C76973 +
         C77020 * (be * C76973 +
                   C77020 * (2 * C77056 + ae * C77057 +
                             C76854 * (C77050 + ae * C76854 * C77052 +
                                       C76854 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C2596 =
        (be * (3 * C76920 + C76854 * C76973 + C76956 * ae) +
         C76976 * (3 * C77016 + ae * C77017 +
                   C76854 * (2 * C77012 + ae * C77013 +
                             C76854 * (C77006 + ae * C76854 * C77008 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C3307 =
        (be * (3 * C76920 + C76854 * C76973 + C76956 * ae) +
         C77020 * (3 * C77060 + ae * C77061 +
                   C76854 * (2 * C77056 + ae * C77057 +
                             C76854 * (C77050 + ae * C76854 * C77052 +
                                       C76854 * (ae * C77052 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77026))))) /
        std::pow(C76797, 2);
    const double C3954 =
        (C77020 * (be * C76973 +
                   C76976 * (2 * C77012 + ae * C77013 +
                             C76854 * (C77006 + ae * C76854 * C77008 +
                                       C76854 * (ae * C77008 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C76982))))) /
        std::pow(C76797, 2);
    const double C4068 =
        (be * C76976 * C76973 +
         C77020 * C76976 *
             (2 * C77056 + ae * C77057 +
              C76854 * (C77050 + ae * C76854 * C77052 +
                        C76854 * (ae * C77052 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77026)))) /
        std::pow(C76797, 2);
    const double C113 = (4 * (2 * C76886 + C76854 * C76920 + C76904 * ae) +
                         C76854 * (3 * C76920 + C76854 * C76973 + C76956 * ae) +
                         (3 * C76904 + C76854 * C76956) * ae) /
                        C76797;
    const double C743 =
        (2 * C76886 + C76854 * C76920 + C76904 * ae + C76973 * C77108) / C76797;
    const double C1648 =
        (2 * C76886 + C76854 * C76920 + C76904 * ae + C76973 * C77206) / C76797;
    const double C2527 =
        (C76976 * (3 * C76920 + C76854 * C76973 + C76956 * ae)) / C76797;
    const double C3166 =
        (C77020 * (3 * C76920 + C76854 * C76973 + C76956 * ae)) / C76797;
    const double C3844 = (C77020 * C76976 * C76973) / C76797;
    const double C31146 =
        (4 * (2 * C77493 + C76976 * C77512 + C77504 * ae) +
         C76976 * (3 * C77512 + C76976 * C77930 + C77921 * ae) +
         (3 * C77504 + C76976 * C77921) * ae) /
        C76797;
    const double C31734 =
        (2 * C77493 + C76976 * C77512 + C77504 * ae + C77930 * C77206) / C76797;
    const double C33945 =
        (C77020 * (3 * C77512 + C76976 * C77930 + C77921 * ae)) / C76797;
    const double C61098 =
        (4 * (2 * C77761 + C77020 * C77780 + C77772 * ae) +
         C77020 * (3 * C77780 + C77020 * C78146 + C78130 * ae) +
         (3 * C77772 + C77020 * C78130) * ae) /
        C76797;
    const double C119 =
        (4 * (2 * C76916 + ae * C76919 + be * C76920 + C76854 * C76967) +
         ae * (3 * C76919 + C76854 * C76972 + C76956 * be) +
         be * (3 * C76920 + C76854 * C76973 + C76956 * ae) +
         C76854 * (3 * C76967 + ae * C76972 + be * C76973 +
                   C76854 * (2 * C76961 + ae * C76965 + be * C76966 +
                             C76854 * (C76954 + ae * C76955 + be * C76957 +
                                       C76854 * (ae * C76943 + be * C76946 +
                                                 C76854 *
                                                     (C76927 * C76928 +
                                                      C76858 * bs[7] *
                                                          std::pow(C76860, 7)) *
                                                     C76801))))) /
        std::pow(C76797, 2);
    const double C1053 =
        (2 * C77085 + be * C77086 + C76854 * C77103 + ae * C76976 * C76972 +
         C76976 * (ae * C76972 +
                   C76976 * (2 * C77099 + be * C77100 +
                             C76854 * (C77093 + be * C76854 * C77095 +
                                       C76854 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C2248 =
        (2 * C77166 + be * C77167 + C76854 * C77184 + ae * C77020 * C76972 +
         C77020 * (ae * C76972 +
                   C77020 * (2 * C77180 + be * C77181 +
                             C76854 * (C77174 + be * C76854 * C77176 +
                                       C76854 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C2528 =
        (3 * (C77231 + ae * C76976 * C76911 + be * C76976 * C76912 +
              C76854 * C77382) +
         ae * C76976 * C76972 + be * C76976 * C76973 +
         C76854 *
             (2 * C77382 + ae * C76976 * C76965 + be * C76976 * C76966 +
              C76854 * (C77377 + ae * C76976 * C76955 + be * C76976 * C76957 +
                        C76854 * (ae * C76976 * C76943 + be * C76976 * C76946 +
                                  C76854 * C76976 *
                                      (C76927 * C76928 +
                                       C76858 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C2740 =
        (ae * (3 * C76919 + C76854 * C76972 + C76956 * be) +
         C76976 * (3 * C77103 + be * C77104 +
                   C76854 * (2 * C77099 + be * C77100 +
                             C76854 * (C77093 + be * C76854 * C77095 +
                                       C76854 * (be * C77095 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77069))))) /
        std::pow(C76797, 2);
    const double C3167 =
        (3 * (C77306 + ae * C77020 * C76911 + be * C77020 * C76912 +
              C76854 * C77399) +
         ae * C77020 * C76972 + be * C77020 * C76973 +
         C76854 *
             (2 * C77399 + ae * C77020 * C76965 + be * C77020 * C76966 +
              C76854 * (C77394 + ae * C77020 * C76955 + be * C77020 * C76957 +
                        C76854 * (ae * C77020 * C76943 + be * C77020 * C76946 +
                                  C76854 * C77020 *
                                      (C76927 * C76928 +
                                       C76858 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C3590 =
        (ae * (3 * C76919 + C76854 * C76972 + C76956 * be) +
         C77020 * (3 * C77184 + be * C77185 +
                   C76854 * (2 * C77180 + be * C77181 +
                             C76854 * (C77174 + be * C76854 * C77176 +
                                       C76854 * (be * C77176 +
                                                 C76854 * std::pow(C76860, 7) *
                                                     bs[7] * C77150))))) /
        std::pow(C76797, 2);
    const double C4182 =
        (ae * C77020 * C76972 +
         C76976 * C77020 *
             (2 * C77099 + be * C77100 +
              C76854 * (C77093 + be * C76854 * C77095 +
                        C76854 * (be * C77095 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77069)))) /
        std::pow(C76797, 2);
    const double C4510 =
        (ae * C76976 * C76972 +
         C77020 * C76976 *
             (2 * C77180 + be * C77181 +
              C76854 * (C77174 + be * C76854 * C77176 +
                        C76854 * (be * C77176 + C76854 * std::pow(C76860, 7) *
                                                    bs[7] * C77150)))) /
        std::pow(C76797, 2);
    const double C112 = (4 * (2 * C76885 + C76854 * C76919 + C76904 * be) +
                         C76854 * (3 * C76919 + C76854 * C76972 + C76956 * be) +
                         (3 * C76904 + C76854 * C76956) * be) /
                        C76797;
    const double C742 =
        (2 * C76885 + C76854 * C76919 + C76904 * be + C76972 * C77108) / C76797;
    const double C1647 =
        (2 * C76885 + C76854 * C76919 + C76904 * be + C76972 * C77206) / C76797;
    const double C2526 =
        (C76976 * (3 * C76919 + C76854 * C76972 + C76956 * be)) / C76797;
    const double C3165 =
        (C77020 * (3 * C76919 + C76854 * C76972 + C76956 * be)) / C76797;
    const double C3843 = (C77020 * C76976 * C76972) / C76797;
    const double C31198 =
        (4 * (2 * C77501 + ae * C77511 + be * C77512 + C76976 * C77919) +
         ae * (3 * C77511 + C76976 * C77929 + C77921 * be) +
         be * (3 * C77512 + C76976 * C77930 + C77921 * ae) +
         C76976 * (3 * C77919 + ae * C77929 + be * C77930 +
                   C76976 * (2 * C77906 + ae * C77923 + be * C77924 +
                             C76976 * (C77123 + ae * C77907 + be * C77910 +
                                       C76976 * (ae * C77008 + be * C77095 +
                                                 C76976 *
                                                     (C76927 * C76928 +
                                                      C77108 * bs[7] *
                                                          std::pow(C76860, 7)) *
                                                     C76801))))) /
        std::pow(C76797, 2);
    const double C32060 =
        (2 * C77563 + be * C77564 + C76976 * C77956 + ae * C77020 * C77929 +
         C77020 * (ae * C77929 +
                   C77020 * (2 * C77952 + be * C77953 +
                             C76976 * (C77200 + be * C76976 * C77176 +
                                       C76976 * (be * C77176 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C34017 =
        (3 * (C77667 + ae * C77020 * C77502 + be * C77020 * C77505 +
              C76976 * C77994) +
         ae * C77020 * C77929 + be * C77020 * C77930 +
         C76976 *
             (2 * C77994 + ae * C77020 * C77923 + be * C77020 * C77924 +
              C76976 * (C77990 + ae * C77020 * C77907 + be * C77020 * C77910 +
                        C76976 * (ae * C77020 * C77008 + be * C77020 * C77095 +
                                  C76976 * C77020 *
                                      (C76927 * C76928 +
                                       C77108 * bs[7] * std::pow(C76860, 7)) *
                                      C76801)))) /
        std::pow(C76797, 2);
    const double C34223 =
        (ae * (3 * C77511 + C76976 * C77929 + C77921 * be) +
         C77020 * (3 * C77956 + be * C77957 +
                   C76976 * (2 * C77952 + be * C77953 +
                             C76976 * (C77200 + be * C76976 * C77176 +
                                       C76976 * (be * C77176 +
                                                 C76976 * std::pow(C76860, 7) *
                                                     bs[7] * C77191))))) /
        std::pow(C76797, 2);
    const double C31050 =
        (4 * (2 * C77492 + C76976 * C77511 + C77504 * be) +
         C76976 * (3 * C77511 + C76976 * C77929 + C77921 * be) +
         (3 * C77504 + C76976 * C77921) * be) /
        C76797;
    const double C31570 =
        (2 * C77492 + C76976 * C77511 + C77504 * be + C77929 * C77206) / C76797;
    const double C33805 =
        (C77020 * (3 * C77511 + C76976 * C77929 + C77921 * be)) / C76797;
    const double C61193 =
        (4 * (2 * C77769 + ae * C77779 + be * C77780 + C77020 * C78136) +
         ae * (3 * C77779 + C77020 * C78145 + C78130 * be) +
         be * (3 * C77780 + C77020 * C78146 + C78130 * ae) +
         C77020 * (3 * C78136 + ae * C78145 + be * C78146 +
                   C77020 * (2 * C78127 + ae * C78139 + be * C78140 +
                             C77020 * (C77221 + ae * C78128 + be * C78131 +
                                       C77020 * (ae * C77052 + be * C77176 +
                                                 C77020 *
                                                     (C76927 * C76928 +
                                                      C77206 * bs[7] *
                                                          std::pow(C76860, 7)) *
                                                     C76801))))) /
        std::pow(C76797, 2);
    const double C60900 =
        (4 * (2 * C77760 + C77020 * C77779 + C77772 * be) +
         C77020 * (3 * C77779 + C77020 * C78145 + C78130 * be) +
         (3 * C77772 + C77020 * C78130) * be) /
        C76797;
    const double C61685 = C11109 * C78889;
    const double C58414 = C7776 * C78889;
    const double C57021 = C57018 - C57014;
    const double C59146 = C59145 - C59143;
    const double C12159 = C12158 * C78891;
    const double C26815 = C26809 + C26797;
    const double C28214 = C28213 + C28211;
    const double C52817 = C52811 + C52799;
    const double C54144 = C54143 + C54141;
    const double C29462 = C29459 + C29453;
    const double C57024 = C57021 + C57015;
    const double C59147 = C59146 + C59144;
    const double C26821 = C26815 * C78890;
    const double C28215 = C28214 * C78890;
    const double C29465 = C29462 * C78890;
    const double C57027 = C57024 * C78889;
    const double C59148 = C59147 * C78889;
    d2eexx[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C78651 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C78658 +
                    (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78610 * C14943) *
                       C78569 +
                   ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                     C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                        C78890 * C78891 * C78610 * C78658 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C78651 -
                    (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                     C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                        C78890 * C78891 * C78610 * C14943) *
                       C78578 +
                   ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                     C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                        C78890 * C78891 * C78610 * C78651 -
                    (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                     C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                        C78890 * C78891 * C78610 * C78658 +
                    (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                     C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                        C78890 * C78891 * C78610 * C14943) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78651 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C78658 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C14943) *
                       C78569 +
                   (((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78651 +
                    ((C844 - C843) * C92 + (C846 - C845) * C81 +
                     (C851 - C852) * C94 + (C853 - C854) * C82) *
                        C78890 * C78610 * C78658 +
                    ((C848 - C847) * C92 + (C850 - C849) * C81 +
                     (C855 - C856) * C94 + (C857 - C858) * C82) *
                        C78890 * C78610 * C14943) *
                       C78578 +
                   (((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C78651 +
                    ((C852 - C851) * C92 + (C854 - C853) * C81 +
                     (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                        C78890 * C78610 * C78658 +
                    ((C856 - C855) * C92 + (C858 - C857) * C81 +
                     (C78891 * C833 - C162 * C727) * C94 +
                     (C78891 * C841 - C162 * C743) * C82) *
                        C78890 * C78610 * C14943) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78651 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C78658 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C14943) *
                       C78569 +
                   (((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78651 +
                    ((C950 - C949) * C92 + (C952 - C951) * C81 +
                     (C957 - C958) * C94 + (C959 - C960) * C82) *
                        C78891 * C78610 * C78658 +
                    ((C954 - C953) * C92 + (C956 - C955) * C81 +
                     (C961 - C962) * C94 + (C963 - C964) * C82) *
                        C78891 * C78610 * C14943) *
                       C78578 +
                   (((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C78651 +
                    ((C958 - C957) * C92 + (C960 - C959) * C81 +
                     (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                        C78891 * C78610 * C78658 +
                    ((C962 - C961) * C92 + (C964 - C963) * C81 +
                     (C78890 * C939 - C233 * C727) * C94 +
                     (C78890 * C947 - C233 * C743) * C82) *
                        C78891 * C78610 * C14943) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78651 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78658 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C14943) *
              C78569 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78651 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78658 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C14943) *
              C78578 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78651 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78658 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78651 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78658 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C14943) *
              C78569 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78658 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78651 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C14943) *
              C78578 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78651 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C78658 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78651 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78658 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C14943) *
              C78569 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78651 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78658 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C14943) *
              C78578 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78651 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C78658 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78651 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78658 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C14943) *
              C78569 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78651 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78658 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C14943) *
              C78578 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78651 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78658 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78651 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78658 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C14943) *
              C78569 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78651 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78658 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C14943) *
              C78578 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78651 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C78658 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78651 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78658 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C14943) *
              C78569 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78658 -
           (C638 * C82 + C637 * C81) * C78610 * C78651 -
           (C1548 * C82 + C1546 * C81) * C78610 * C14943) *
              C78578 +
          ((C638 * C81 + C639 * C82) * C78610 * C78651 -
           (C3096 * C82 + C1547 * C81) * C78610 * C78658 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C78651 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78697 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78813) *
                        C78658 +
                    ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78813 -
                     (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                      C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                         C78890 * C78891 * C78697) *
                        C14943) *
                       C13455 +
                   (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78813) *
                        C78651 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78813 -
                     (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                      C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                         C78890 * C78891 * C78697) *
                        C78658 +
                    ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
                      C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                         C78890 * C78891 * C78697 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78813) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78651 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C78658 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78813 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                         C78890 * C78697) *
                        C14943) *
                       C13455 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78813 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78651 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78813 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78697) *
                        C78658 +
                    (((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78813 +
                     ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                      (C78891 * C7460 - C162 * C7358) * C94 +
                      (C78891 * C7461 - C162 * C7360) * C82) *
                         C78890 * C78697) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78651 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C78658 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78813 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                         C78891 * C78697) *
                        C14943) *
                       C13455 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78813 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78651 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78813 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78697) *
                        C78658 +
                    (((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78813 +
                     ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                      (C78890 * C7564 - C233 * C7358) * C94 +
                      (C78890 * C7565 - C233 * C7360) * C82) *
                         C78891 * C78697) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78651 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78658 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C14943) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78651 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78658 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78651 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C78658 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C78813 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C14943) *
              C13455 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C78651 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78658 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78651 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78658 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C78813 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C14943) *
              C13455 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78651 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78658 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C78813 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78651 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78658 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C14943) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78651 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78658 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78651 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78658 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C78813 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C14943) *
              C13455 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78651 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78658 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C78813 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78651 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C78658 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C78813 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C14943) *
              C13455 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C78651 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78658 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78610 * C78893 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78610 * C78886 +
           (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C78610 * C78873 -
           (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
            C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
               C78890 * C78891 * C78610 * C78852) *
              C13455 +
          ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
            C95 * C724 - C94 * C737 + C82 * C748) *
               C78890 * C78891 * C78610 * C78886 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78610 * C78893 -
           (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
            C93 * C723 - C92 * C735 + C81 * C747) *
               C78890 * C78891 * C78610 * C78873 +
           (C92 * C5459 - C93 * C5455 - C92 * C5460 + C81 * C5467 +
            C94 * C6690 - C95 * C6689 - C94 * C6691 + C82 * C6692) *
               C78890 * C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78610 * C12851 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78610 * C78655) *
              C78892 +
          ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
            C95 * C724 - C94 * C737 + C82 * C748) *
               C78890 * C78891 * C78610 * C78655 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78610 * C12851) *
              C78882 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C78610 * C12851 -
           (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
            C93 * C724 - C92 * C737 + C81 * C748) *
               C78890 * C78891 * C78610 * C78655) *
              C78866 +
          ((C92 * C740 - C93 * C726 - C92 * C741 + C81 * C750 + C94 * C2526 -
            C95 * C2525 - C94 * C2527 + C82 * C2528) *
               C78890 * C78891 * C78610 * C78655 -
           (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 + C92 * C108 -
            C93 * C99 - C92 * C109 + C81 * C117) *
               C78890 * C78891 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C78884 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78870 +
            (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
             C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                C78890 * C78891 * C78845) *
               C12851 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78870 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C78884 -
            (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
             C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                C78890 * C78891 * C78845) *
               C78655) *
              C13455 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78870 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C78884 -
            (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
             C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                C78890 * C78891 * C78845) *
               C12851 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C78884 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78870 +
            (C92 * C5935 - C93 * C5929 - C92 * C5936 + C81 * C5947 +
             C94 * C10692 - C95 * C10691 - C94 * C10693 + C82 * C10694) *
                C78890 * C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78893 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C78886 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C78873 +
                    ((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                        C78890 * C78610 * C78852) *
                       C13455 +
                   (((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78893 +
                    ((C844 - C843) * C92 + (C846 - C845) * C81 +
                     (C851 - C852) * C94 + (C853 - C854) * C82) *
                        C78890 * C78610 * C78886 +
                    ((C848 - C847) * C92 + (C850 - C849) * C81 +
                     (C855 - C856) * C94 + (C857 - C858) * C82) *
                        C78890 * C78610 * C78873 +
                    ((C6763 - C6762) * C92 + (C6765 - C6764) * C81 +
                     (C78891 * C6759 - C162 * C6689) * C94 +
                     (C78891 * C6760 - C162 * C6691) * C82) *
                        C78890 * C78610 * C78852) *
                       C78575)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C78655) *
                       C78892 +
                   (((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C844 - C843) * C92 + (C846 - C845) * C81 +
                     (C851 - C852) * C94 + (C853 - C854) * C82) *
                        C78890 * C78610 * C78655) *
                       C78882 +
                   (((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C852 - C851) * C92 + (C854 - C853) * C81 +
                     (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                        C78890 * C78610 * C78655) *
                       C78866 +
                   (((C185 - C184) * C92 + (C187 - C186) * C81 +
                     (C188 - C189) * C94 + (C190 - C191) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C2599 - C2598) * C92 + (C2601 - C2600) * C81 +
                     (C78891 * C2595 - C162 * C2525) * C94 +
                     (C78891 * C2596 - C162 * C2527) * C82) *
                        C78890 * C78610 * C78655) *
                       C78846)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78884 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78870 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78845) *
                        C12851 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78884 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78870 +
                     ((C162 * C5930 - C78891 * C6027) * C92 +
                      (C162 * C5938 - C78891 * C6033) * C81 +
                      (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                         C78890 * C78845) *
                        C78655) *
                       C13455 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78884 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78870 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C78845) *
                        C12851 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78884 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78870 +
                     ((C10797 - C10796) * C92 + (C10799 - C10798) * C81 +
                      (C78891 * C10793 - C162 * C10691) * C94 +
                      (C78891 * C10794 - C162 * C10693) * C82) *
                         C78890 * C78845) *
                        C78655) *
                       C78575)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[2] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78893 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C78886 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C78873 +
                    ((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                        C78891 * C78610 * C78852) *
                       C13455 +
                   (((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78893 +
                    ((C950 - C949) * C92 + (C952 - C951) * C81 +
                     (C957 - C958) * C94 + (C959 - C960) * C82) *
                        C78891 * C78610 * C78886 +
                    ((C954 - C953) * C92 + (C956 - C955) * C81 +
                     (C961 - C962) * C94 + (C963 - C964) * C82) *
                        C78891 * C78610 * C78873 +
                    ((C6835 - C6834) * C92 + (C6837 - C6836) * C81 +
                     (C78890 * C6831 - C233 * C6689) * C94 +
                     (C78890 * C6832 - C233 * C6691) * C82) *
                        C78891 * C78610 * C78852) *
                       C78575)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C78655) *
                       C78892 +
                   (((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C950 - C949) * C92 + (C952 - C951) * C81 +
                     (C957 - C958) * C94 + (C959 - C960) * C82) *
                        C78891 * C78610 * C78655) *
                       C78882 +
                   (((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C958 - C957) * C92 + (C960 - C959) * C81 +
                     (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                        C78891 * C78610 * C78655) *
                       C78866 +
                   (((C256 - C255) * C92 + (C258 - C257) * C81 +
                     (C259 - C260) * C94 + (C261 - C262) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C2671 - C2670) * C92 + (C2673 - C2672) * C81 +
                     (C78890 * C2667 - C233 * C2525) * C94 +
                     (C78890 * C2668 - C233 * C2527) * C82) *
                        C78891 * C78610 * C78655) *
                       C78846)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78884 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78870 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78845) *
                        C12851 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78884 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78870 +
                     ((C233 * C5930 - C78890 * C6113) * C92 +
                      (C233 * C5938 - C78890 * C6119) * C81 +
                      (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                         C78891 * C78845) *
                        C78655) *
                       C13455 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78884 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78870 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C78845) *
                        C12851 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78884 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78870 +
                     ((C10901 - C10900) * C92 + (C10903 - C10902) * C81 +
                      (C78890 * C10897 - C233 * C10691) * C94 +
                      (C78890 * C10898 - C233 * C10693) * C82) *
                         C78891 * C78845) *
                        C78655) *
                       C78575)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78893 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78886 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78873 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78610 * C78852) *
              C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78893 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78886 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78873 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C162 +
            (C81 * C5618 - C92 * C5614 + C82 * C6904 - C94 * C6903) * C78891) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C12851 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78655) *
              C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C12851 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78655) *
              C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C12851 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78655) *
              C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78610 * C12851 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C162 +
            (C81 * C1052 - C92 * C1044 + C82 * C2740 - C94 * C2739) * C78891) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78884 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78870 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
             (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
                C78890 * C78845) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78884 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78870 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
             (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
                C78890 * C78845) *
               C78655) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78884 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78870 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
             (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
                C78890 * C78845) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78884 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78870 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C162 +
             (C81 * C6206 - C92 * C6200 + C82 * C11002 - C94 * C11001) *
                 C78891) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78893 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78886 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78873 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78610 * C78852) *
              C13455 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78886 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78893 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78873 +
           (C6979 * C81 +
            (C162 * C6759 - C358 * C6689 - C162 * C6903 + C78891 * C6971) *
                C82) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C12851 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78655) *
              C78892 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78655 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C12851) *
              C78882 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C12851 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C78655) *
              C78866 +
          ((C2815 * C81 +
            (C162 * C2595 - C358 * C2525 - C162 * C2739 + C78891 * C2807) *
                C82) *
               C78890 * C78610 * C78655 -
           (C393 * C82 + C392 * C81) * C78890 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78884 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78870 +
            ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                 C81 +
             C2067 * C82) *
                C78890 * C78845) *
               C12851 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78870 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78884 -
            (C11109 * C82 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C81) *
                C78890 * C78845) *
               C78655) *
              C13455 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78870 -
            (C391 * C82 + C390 * C81) * C78890 * C78884 -
            (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
               C12851 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78884 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78870 +
            (C11109 * C81 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C82) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78893 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78886 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78873 +
           (((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78610 * C78852) *
              C13455 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78893 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78886 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78873 +
           (((C6835 - C6834) * C162 + (C7048 - C7047) * C78891) * C81 +
            ((C78890 * C6831 - C233 * C6689) * C162 +
             (C78890 * C7045 - C233 * C6903) * C78891) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C12851 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78655) *
              C78892 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C12851 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78655) *
              C78882 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C12851 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C78655) *
              C78866 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78610 * C12851 +
           (((C2671 - C2670) * C162 + (C2884 - C2883) * C78891) * C81 +
            ((C78890 * C2667 - C233 * C2525) * C162 +
             (C78890 * C2881 - C233 * C2739) * C78891) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78884 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78870 +
            (((C78890 * C1839 - C233 * C1627) * C162 +
              (C78890 * C2145 - C233 * C1945) * C78891) *
                 C81 +
             ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
                C78845) *
               C12851 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78884 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78870 +
            (((C233 * C5930 - C78890 * C6113) * C162 +
              (C233 * C6199 - C78890 * C6365) * C78891) *
                 C81 +
             ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
                C78845) *
               C78655) *
              C13455 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78884 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78870 +
            (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
             ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
                C78845) *
               C12851 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78884 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78870 +
            (((C10901 - C10900) * C162 + (C11210 - C11209) * C78891) * C81 +
             ((C78890 * C10897 - C233 * C10691) * C162 +
              (C78890 * C11207 - C233 * C11001) * C78891) *
                 C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78893 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78886 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78873 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78610 * C78852) *
              C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78893 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78886 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78873 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C233 +
            (C81 * C5760 - C92 * C5756 + C82 * C7115 - C94 * C7114) * C78890) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C12851 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78655) *
              C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C12851 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78655) *
              C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C12851 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78655) *
              C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78610 * C12851 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C233 +
            (C81 * C1342 - C92 * C1334 + C82 * C2951 - C94 * C2950) * C78890) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78884 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78870 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
             (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
                C78891 * C78845) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78884 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78870 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
             (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
                C78891 * C78845) *
               C78655) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78884 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78870 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
             (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
                C78891 * C78845) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78884 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78870 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C233 +
             (C81 * C6452 - C92 * C6446 + C82 * C11309 - C94 * C11308) *
                 C78890) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78893 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78886 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78873 +
           (((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78610 * C78852) *
              C13455 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78893 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78886 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78873 +
           (((C6763 - C6762) * C233 + (C7185 - C7184) * C78890) * C81 +
            ((C78891 * C6759 - C162 * C6689) * C233 +
             (C78891 * C7182 - C162 * C7114) * C78890) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C12851 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78655) *
              C78892 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C12851 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78655) *
              C78882 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C12851 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C78655) *
              C78866 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78610 * C12851 +
           (((C2599 - C2598) * C233 + (C3021 - C3020) * C78890) * C81 +
            ((C78891 * C2595 - C162 * C2525) * C233 +
             (C78891 * C3018 - C162 * C2950) * C78890) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78884 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78870 +
            (((C78891 * C1733 - C162 * C1627) * C233 +
              (C78891 * C2325 - C162 * C2235) * C78890) *
                 C81 +
             ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
                C78845) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78884 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78870 +
            (((C162 * C5930 - C78891 * C6027) * C233 +
              (C162 * C6445 - C78891 * C6531) * C78890) *
                 C81 +
             ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
                C78845) *
               C78655) *
              C13455 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78884 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78870 +
            (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
             ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
                C78845) *
               C12851 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78884 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78870 +
            (((C10797 - C10796) * C233 + (C11411 - C11410) * C78890) * C81 +
             ((C78891 * C10793 - C162 * C10691) * C233 +
              (C78891 * C11408 - C162 * C11308) * C78890) *
                 C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78893 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78886 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78873 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78610 * C78852) *
              C13455 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78886 -
           (C638 * C82 + C637 * C81) * C78610 * C78893 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78873 +
           (C7260 * C81 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C78891 * C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C12851 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78655) *
              C78892 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78655 -
           (C638 * C82 + C637 * C81) * C78610 * C12851) *
              C78882 +
          ((C638 * C81 + C639 * C82) * C78610 * C12851 -
           (C3096 * C82 + C1547 * C81) * C78610 * C78655) *
              C78866 +
          ((C3096 * C81 +
            (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
                C78891 * C82) *
               C78610 * C78655 -
           (C640 * C82 + C639 * C81) * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78884 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78870 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C78891 * C81 +
             C2451 * C82) *
                C78845) *
               C12851 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78870 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78884 -
            (C11518 * C82 +
             (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                 C78891 * C81) *
                C78845) *
               C78655) *
              C13455 +
          (((C2450 * C81 + C2452 * C82) * C78870 -
            (C638 * C82 + C637 * C81) * C78884 -
            (C2453 * C82 + C2451 * C81) * C78845) *
               C12851 +
           ((C1545 * C81 + C1547 * C82) * C78884 -
            (C4735 * C82 + C4734 * C81) * C78870 +
            (C11518 * C81 +
             (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                 C78891 * C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C12851 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78697 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78813) *
                        C78655) *
                       C78569 +
                   (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78813) *
                        C12851 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78813 -
                     (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                      C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                         C78890 * C78891 * C78697) *
                        C78655) *
                       C78578 +
                   (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78697) *
                        C12851 +
                    ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
                      C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                         C78890 * C78891 * C78697 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78813) *
                        C78655) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78569 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78813 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78813 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78578 +
                   ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78813 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78813 +
                     ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                      (C78891 * C3950 - C162 * C3836) * C94 +
                      (C78891 * C3954 - C162 * C3844) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78569 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78813 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78813 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78578 +
                   ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78813 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78813 +
                     ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                      (C78890 * C4064 - C233 * C3836) * C94 +
                      (C78890 * C4068 - C233 * C3844) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C14946)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C12851 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C78655) *
              C78569 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C12851 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C78578 +
          (((C391 * C81 + C392 * C82) * C78890 * C78813 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C12851 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C78569 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C78578 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C78813 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C78813 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C78569 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C78578 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C78813 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C78813 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C12851 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C78655) *
              C78569 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C12851 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C78578 +
          (((C638 * C81 + C639 * C82) * C78813 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C12851 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C12851 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C78655) *
                       C78892 +
                   ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                     C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                        C78890 * C78891 * C78610 * C78655 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C12851) *
                       C78882 +
                   ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                     C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                        C78890 * C78891 * C78610 * C12851 -
                    (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                     C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                        C78890 * C78891 * C78610 * C78655) *
                       C78866 +
                   ((C92 * C740 - C93 * C726 - C92 * C741 + C81 * C750 +
                     C94 * C2526 - C95 * C2525 - C94 * C2527 + C82 * C2528) *
                        C78890 * C78891 * C78610 * C78655 -
                    (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                     C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                        C78890 * C78891 * C78610 * C12851) *
                       C78846)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C78893 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C78886 +
                    (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78610 * C78873 -
                    (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                     C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                        C78890 * C78891 * C78610 * C78852) *
                       C13455 +
                   ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                     C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                        C78890 * C78891 * C78610 * C78886 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C78893 -
                    (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                     C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                        C78890 * C78891 * C78610 * C78873 +
                    (C92 * C5459 - C93 * C5455 - C92 * C5460 + C81 * C5467 +
                     C94 * C6690 - C95 * C6689 - C94 * C6691 + C82 * C6692) *
                        C78890 * C78891 * C78610 * C78852) *
                       C78575)) /
                     (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C78655) *
                       C78892 +
                   (((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C844 - C843) * C92 + (C846 - C845) * C81 +
                     (C851 - C852) * C94 + (C853 - C854) * C82) *
                        C78890 * C78610 * C78655) *
                       C78882 +
                   (((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C852 - C851) * C92 + (C854 - C853) * C81 +
                     (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                        C78890 * C78610 * C78655) *
                       C78866 +
                   (((C185 - C184) * C92 + (C187 - C186) * C81 +
                     (C188 - C189) * C94 + (C190 - C191) * C82) *
                        C78890 * C78610 * C12851 +
                    ((C2599 - C2598) * C92 + (C2601 - C2600) * C81 +
                     (C78891 * C2595 - C162 * C2525) * C94 +
                     (C78891 * C2596 - C162 * C2527) * C82) *
                        C78890 * C78610 * C78655) *
                       C78846)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78893 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C78886 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C78873 +
                    ((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                        C78890 * C78610 * C78852) *
                       C13455 +
                   (((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78893 +
                    ((C844 - C843) * C92 + (C846 - C845) * C81 +
                     (C851 - C852) * C94 + (C853 - C854) * C82) *
                        C78890 * C78610 * C78886 +
                    ((C848 - C847) * C92 + (C850 - C849) * C81 +
                     (C855 - C856) * C94 + (C857 - C858) * C82) *
                        C78890 * C78610 * C78873 +
                    ((C6763 - C6762) * C92 + (C6765 - C6764) * C81 +
                     (C78891 * C6759 - C162 * C6689) * C94 +
                     (C78891 * C6760 - C162 * C6691) * C82) *
                        C78890 * C78610 * C78852) *
                       C78575)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C78655) *
                       C78892 +
                   (((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C950 - C949) * C92 + (C952 - C951) * C81 +
                     (C957 - C958) * C94 + (C959 - C960) * C82) *
                        C78891 * C78610 * C78655) *
                       C78882 +
                   (((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C958 - C957) * C92 + (C960 - C959) * C81 +
                     (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                        C78891 * C78610 * C78655) *
                       C78866 +
                   (((C256 - C255) * C92 + (C258 - C257) * C81 +
                     (C259 - C260) * C94 + (C261 - C262) * C82) *
                        C78891 * C78610 * C12851 +
                    ((C2671 - C2670) * C92 + (C2673 - C2672) * C81 +
                     (C78890 * C2667 - C233 * C2525) * C94 +
                     (C78890 * C2668 - C233 * C2527) * C82) *
                        C78891 * C78610 * C78655) *
                       C78846)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78893 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C78886 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C78873 +
                    ((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                        C78891 * C78610 * C78852) *
                       C13455 +
                   (((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78893 +
                    ((C950 - C949) * C92 + (C952 - C951) * C81 +
                     (C957 - C958) * C94 + (C959 - C960) * C82) *
                        C78891 * C78610 * C78886 +
                    ((C954 - C953) * C92 + (C956 - C955) * C81 +
                     (C961 - C962) * C94 + (C963 - C964) * C82) *
                        C78891 * C78610 * C78873 +
                    ((C6835 - C6834) * C92 + (C6837 - C6836) * C81 +
                     (C78890 * C6831 - C233 * C6689) * C94 +
                     (C78890 * C6832 - C233 * C6691) * C82) *
                        C78891 * C78610 * C78852) *
                       C78575)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C12851 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78655) *
              C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C12851 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78655) *
              C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C12851 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78655) *
              C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78610 * C12851 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C162 +
            (C81 * C1052 - C92 * C1044 + C82 * C2740 - C94 * C2739) * C78891) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78893 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78886 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78873 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78610 * C78852) *
              C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78893 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78886 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78873 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C162 +
            (C81 * C5618 - C92 * C5614 + C82 * C6904 - C94 * C6903) * C78891) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C12851 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78655) *
              C78892 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78655 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C12851) *
              C78882 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C12851 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C78655) *
              C78866 +
          ((C2815 * C81 +
            (C162 * C2595 - C358 * C2525 - C162 * C2739 + C78891 * C2807) *
                C82) *
               C78890 * C78610 * C78655 -
           (C393 * C82 + C392 * C81) * C78890 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78893 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78886 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78873 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78610 * C78852) *
              C13455 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78886 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78893 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78873 +
           (C6979 * C81 +
            (C162 * C6759 - C358 * C6689 - C162 * C6903 + C78891 * C6971) *
                C82) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C12851 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78655) *
              C78892 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C12851 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78655) *
              C78882 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C12851 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C78655) *
              C78866 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78610 * C12851 +
           (((C2671 - C2670) * C162 + (C2884 - C2883) * C78891) * C81 +
            ((C78890 * C2667 - C233 * C2525) * C162 +
             (C78890 * C2881 - C233 * C2739) * C78891) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78893 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78886 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78873 +
           (((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78610 * C78852) *
              C13455 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78893 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78886 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78873 +
           (((C6835 - C6834) * C162 + (C7048 - C7047) * C78891) * C81 +
            ((C78890 * C6831 - C233 * C6689) * C162 +
             (C78890 * C7045 - C233 * C6903) * C78891) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C12851 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78655) *
              C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C12851 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78655) *
              C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C12851 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78655) *
              C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78610 * C12851 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C233 +
            (C81 * C1342 - C92 * C1334 + C82 * C2951 - C94 * C2950) * C78890) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78893 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78886 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78873 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78610 * C78852) *
              C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78893 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78886 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78873 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C233 +
            (C81 * C5760 - C92 * C5756 + C82 * C7115 - C94 * C7114) * C78890) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C12851 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78655) *
              C78892 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C12851 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78655) *
              C78882 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C12851 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C78655) *
              C78866 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78610 * C12851 +
           (((C2599 - C2598) * C233 + (C3021 - C3020) * C78890) * C81 +
            ((C78891 * C2595 - C162 * C2525) * C233 +
             (C78891 * C3018 - C162 * C2950) * C78890) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78893 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78886 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78873 +
           (((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78610 * C78852) *
              C13455 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78893 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78886 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78873 +
           (((C6763 - C6762) * C233 + (C7185 - C7184) * C78890) * C81 +
            ((C78891 * C6759 - C162 * C6689) * C233 +
             (C78891 * C7182 - C162 * C7114) * C78890) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C12851 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78655) *
              C78892 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78655 -
           (C638 * C82 + C637 * C81) * C78610 * C12851) *
              C78882 +
          ((C638 * C81 + C639 * C82) * C78610 * C12851 -
           (C3096 * C82 + C1547 * C81) * C78610 * C78655) *
              C78866 +
          ((C3096 * C81 +
            (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
                C78891 * C82) *
               C78610 * C78655 -
           (C640 * C82 + C639 * C81) * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78893 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78886 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78873 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78610 * C78852) *
              C13455 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78886 -
           (C638 * C82 + C637 * C81) * C78610 * C78893 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78873 +
           (C7260 * C81 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C78891 * C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C17369 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C78651 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78697 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C17369) *
                        C78658 +
                    ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C17369 -
                     (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                      C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                         C78890 * C78891 * C78697) *
                        C14943) *
                       C78798 +
                   (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C17369) *
                        C78651 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C17369 -
                     (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                      C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                         C78890 * C78891 * C78697) *
                        C78658 +
                    ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
                      C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                         C78890 * C78891 * C78697 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C17369) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C17369 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78651 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C17369 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C78658 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C17369 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                         C78890 * C78697) *
                        C14943) *
                       C78798 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C17369 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78651 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C17369 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78697) *
                        C78658 +
                    (((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C17369 +
                     ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                      (C78891 * C7460 - C162 * C7358) * C94 +
                      (C78891 * C7461 - C162 * C7360) * C82) *
                         C78890 * C78697) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C17369 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78651 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C17369 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C78658 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C17369 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                         C78891 * C78697) *
                        C14943) *
                       C78798 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C17369 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78651 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C17369 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78697) *
                        C78658 +
                    (((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C17369 +
                     ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                      (C78890 * C7564 - C233 * C7358) * C94 +
                      (C78890 * C7565 - C233 * C7360) * C82) *
                         C78891 * C78697) *
                        C14943) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78651 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78658 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C14943) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78651 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78658 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78651 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78658 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C17369 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C14943) *
              C78798 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C78651 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78658 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78651 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78658 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C17369 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C14943) *
              C78798 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78651 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78658 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C17369 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78651 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78658 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C14943) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78651 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78658 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78651 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78658 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C17369 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C14943) *
              C78798 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78651 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78658 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C17369 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78651 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78658 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C17369 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C14943) *
              C78798 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C78651 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78658 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78693 -
                    (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                     C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                        C78890 * C78891 * C78700 +
                    (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                     C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                        C78890 * C78891 * C20337) *
                       C78651 +
                   ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                     C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                        C78890 * C78891 * C78700 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78693 -
                    (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
                     C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                        C78890 * C78891 * C20337) *
                       C78658 +
                   ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78693 -
                    (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                     C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                        C78890 * C78891 * C78700 +
                    (C92 * C5943 - C93 * C5933 - C92 * C5944 + C81 * C5951 +
                     C94 * C5945 - C95 * C5934 - C94 * C5946 + C82 * C5952) *
                        C78890 * C78891 * C20337) *
                       C14943) *
                  C78564) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78693 +
                    ((C162 * C1626 - C78891 * C1731) * C92 +
                     (C162 * C1636 - C78891 * C1739) * C81 +
                     (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                        C78890 * C78700 +
                    ((C78891 * C1733 - C162 * C1627) * C92 +
                     (C78891 * C1741 - C162 * C1638) * C81 +
                     (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                        C78890 * C20337) *
                       C78651 +
                   (((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78693 +
                    ((C78891 * C3947 - C162 * C3833) * C92 +
                     (C78891 * C3951 - C162 * C3838) * C81 +
                     (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                        C78890 * C78700 +
                    ((C162 * C5930 - C78891 * C6027) * C92 +
                     (C162 * C5938 - C78891 * C6033) * C81 +
                     (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                        C78890 * C20337) *
                       C78658 +
                   (((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78693 +
                    ((C162 * C5932 - C78891 * C6029) * C92 +
                     (C162 * C5942 - C78891 * C6035) * C81 +
                     (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                        C78890 * C78700 +
                    ((C78891 * C6031 - C162 * C5933) * C92 +
                     (C78891 * C6037 - C162 * C5944) * C81 +
                     (C78891 * C6032 - C162 * C5934) * C94 +
                     (C78891 * C6038 - C162 * C5946) * C82) *
                        C78890 * C20337) *
                       C14943) *
                  C78564) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78693 +
                    ((C233 * C1626 - C78890 * C1837) * C92 +
                     (C233 * C1636 - C78890 * C1845) * C81 +
                     (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                        C78891 * C78700 +
                    ((C78890 * C1839 - C233 * C1627) * C92 +
                     (C78890 * C1847 - C233 * C1638) * C81 +
                     (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                        C78891 * C20337) *
                       C78651 +
                   (((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78693 +
                    ((C78890 * C4061 - C233 * C3833) * C92 +
                     (C78890 * C4065 - C233 * C3838) * C81 +
                     (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                        C78891 * C78700 +
                    ((C233 * C5930 - C78890 * C6113) * C92 +
                     (C233 * C5938 - C78890 * C6119) * C81 +
                     (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                        C78891 * C20337) *
                       C78658 +
                   (((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78693 +
                    ((C233 * C5932 - C78890 * C6115) * C92 +
                     (C233 * C5942 - C78890 * C6121) * C81 +
                     (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                        C78891 * C78700 +
                    ((C78890 * C6117 - C233 * C5933) * C92 +
                     (C78890 * C6123 - C233 * C5944) * C81 +
                     (C78890 * C6118 - C233 * C5934) * C94 +
                     (C78890 * C6124 - C233 * C5946) * C82) *
                        C78891 * C20337) *
                       C14943) *
                  C78564) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78693 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78700 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C20337) *
              C78651 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78693 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78700 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C20337) *
              C78658 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78693 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78700 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C162 +
            (C81 * C6209 - C92 * C6203 + C82 * C6210 - C94 * C6204) * C78891) *
               C78890 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78693 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78700 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C20337) *
              C78651 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78700 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78693 -
           (C11109 * C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C20337) *
              C78658 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78693 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78700 +
           ((C162 * C6031 - C358 * C5933 - C162 * C6203 + C78891 * C6289) *
                C81 +
            (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                C82) *
               C78890 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78693 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78700 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C20337) *
              C78651 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78693 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78700 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
               C20337) *
              C78658 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78693 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C78700 +
           (((C78890 * C6117 - C233 * C5933) * C162 +
             (C78890 * C6369 - C233 * C6203) * C78891) *
                C81 +
            ((C78890 * C6118 - C233 * C5934) * C162 +
             (C78890 * C6370 - C233 * C6204) * C78891) *
                C82) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78693 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78700 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C20337) *
              C78651 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78693 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78700 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C20337) *
              C78658 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78693 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78700 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C233 +
            (C81 * C6455 - C92 * C6449 + C82 * C6456 - C94 * C6450) * C78890) *
               C78891 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78693 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78700 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C20337) *
              C78651 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78693 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78700 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
               C20337) *
              C78658 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78693 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C78700 +
           (((C78891 * C6031 - C162 * C5933) * C233 +
             (C78891 * C6535 - C162 * C6449) * C78890) *
                C81 +
            ((C78891 * C6032 - C162 * C5934) * C233 +
             (C78891 * C6536 - C162 * C6450) * C78890) *
                C82) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78693 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78700 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C20337) *
              C78651 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78700 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78693 -
           (C11518 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C20337) *
              C78658 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78693 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78700 +
           ((C233 * C6117 - C601 * C5933 - C233 * C6449 + C78890 * C6615) *
                C78891 * C81 +
            (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                C78891 * C82) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C17369 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78697) *
              C78893 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C78697 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C17369) *
              C78886 +
          ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C17369 -
           (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
            C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
               C78890 * C78891 * C78697) *
              C78873 +
          ((C92 * C8253 - C93 * C8251 - C92 * C8254 + C81 * C8257 +
            C94 * C8255 - C95 * C8252 - C94 * C8256 + C82 * C8258) *
               C78890 * C78891 * C78697 -
           (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
            C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
               C78890 * C78891 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C17369 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78697) *
               C12851 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78697 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C17369) *
               C78655) *
              C78880 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78697 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C17369) *
               C12851 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C17369 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78697) *
               C78655) *
              C78864 +
          (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
             C95 * C99 - C94 * C109 + C82 * C117) *
                C78890 * C78891 * C17369 -
            (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
             C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                C78890 * C78891 * C78697) *
               C12851 +
           ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
             C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                C78890 * C78891 * C78697 -
            (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
             C93 * C724 - C92 * C737 + C81 * C748) *
                C78890 * C78891 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78894 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78888 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78876 -
           (C94 * C10197 - C95 * C10193 - C94 * C10198 + C82 * C10205 +
            C92 * C10199 - C93 * C10194 - C92 * C10200 + C81 * C10206) *
               C78890 * C78891 * C78858) *
              C12851 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C78888 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78894 -
           (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
            C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
               C78890 * C78891 * C78876 +
           (C92 * C12227 - C93 * C12225 - C92 * C12228 + C81 * C12231 +
            C94 * C12229 - C95 * C12226 - C94 * C12230 + C82 * C12232) *
               C78890 * C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C17369 +
                    ((C162 * C1626 - C78891 * C1731) * C92 +
                     (C162 * C1636 - C78891 * C1739) * C81 +
                     (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                        C78890 * C78697) *
                       C78893 +
                   (((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C17369 +
                    ((C78891 * C3947 - C162 * C3833) * C92 +
                     (C78891 * C3951 - C162 * C3838) * C81 +
                     (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                        C78890 * C78697) *
                       C78886 +
                   (((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C17369 +
                    ((C162 * C5932 - C78891 * C6029) * C92 +
                     (C162 * C5942 - C78891 * C6035) * C81 +
                     (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                        C78890 * C78697) *
                       C78873 +
                   (((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                        C78890 * C17369 +
                    ((C78891 * C8325 - C162 * C8251) * C92 +
                     (C78891 * C8327 - C162 * C8254) * C81 +
                     (C78891 * C8326 - C162 * C8252) * C94 +
                     (C78891 * C8328 - C162 * C8256) * C82) *
                        C78890 * C78697) *
                       C78852) *
                  C78564) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C17369 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C17369 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78880 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C17369 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C17369 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78864 +
                   ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C17369 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C17369 +
                     ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                      (C78891 * C3950 - C162 * C3836) * C94 +
                      (C78891 * C3954 - C162 * C3844) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78836)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78894 +
                    ((C162 * C1626 - C78891 * C1731) * C92 +
                     (C162 * C1636 - C78891 * C1739) * C81 +
                     (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                        C78890 * C78888 +
                    ((C78891 * C1733 - C162 * C1627) * C92 +
                     (C78891 * C1741 - C162 * C1638) * C81 +
                     (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                        C78890 * C78876 +
                    ((C162 * C10194 - C78891 * C10251) * C92 +
                     (C162 * C10200 - C78891 * C10255) * C81 +
                     (C11661 - C11662) * C94 + (C11663 - C11664) * C82) *
                        C78890 * C78858) *
                       C12851 +
                   (((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78894 +
                    ((C78891 * C3947 - C162 * C3833) * C92 +
                     (C78891 * C3951 - C162 * C3838) * C81 +
                     (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                        C78890 * C78888 +
                    ((C162 * C5930 - C78891 * C6027) * C92 +
                     (C162 * C5938 - C78891 * C6033) * C81 +
                     (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                        C78890 * C78876 +
                    ((C78891 * C12299 - C162 * C12225) * C92 +
                     (C78891 * C12301 - C162 * C12228) * C81 +
                     (C78891 * C12300 - C162 * C12226) * C94 +
                     (C78891 * C12302 - C162 * C12230) * C82) *
                        C78890 * C78858) *
                       C78655) *
                  C78564) /
                     (p * q * std::sqrt(p + q));
    d2eexz[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C17369 +
                    ((C233 * C1626 - C78890 * C1837) * C92 +
                     (C233 * C1636 - C78890 * C1845) * C81 +
                     (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                        C78891 * C78697) *
                       C78893 +
                   (((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C17369 +
                    ((C78890 * C4061 - C233 * C3833) * C92 +
                     (C78890 * C4065 - C233 * C3838) * C81 +
                     (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                        C78891 * C78697) *
                       C78886 +
                   (((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C17369 +
                    ((C233 * C5932 - C78890 * C6115) * C92 +
                     (C233 * C5942 - C78890 * C6121) * C81 +
                     (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                        C78891 * C78697) *
                       C78873 +
                   (((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                        C78891 * C17369 +
                    ((C78890 * C8395 - C233 * C8251) * C92 +
                     (C78890 * C8397 - C233 * C8254) * C81 +
                     (C78890 * C8396 - C233 * C8252) * C94 +
                     (C78890 * C8398 - C233 * C8256) * C82) *
                        C78891 * C78697) *
                       C78852) *
                  C78564) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C17369 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C17369 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78880 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C17369 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C17369 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78864 +
                   ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C17369 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C17369 +
                     ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                      (C78890 * C4064 - C233 * C3836) * C94 +
                      (C78890 * C4068 - C233 * C3844) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78836)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78894 +
                    ((C233 * C1626 - C78890 * C1837) * C92 +
                     (C233 * C1636 - C78890 * C1845) * C81 +
                     (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                        C78891 * C78888 +
                    ((C78890 * C1839 - C233 * C1627) * C92 +
                     (C78890 * C1847 - C233 * C1638) * C81 +
                     (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                        C78891 * C78876 +
                    ((C233 * C10194 - C78890 * C10301) * C92 +
                     (C233 * C10200 - C78890 * C10305) * C81 +
                     (C11733 - C11734) * C94 + (C11735 - C11736) * C82) *
                        C78891 * C78858) *
                       C12851 +
                   (((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78894 +
                    ((C78890 * C4061 - C233 * C3833) * C92 +
                     (C78890 * C4065 - C233 * C3838) * C81 +
                     (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                        C78891 * C78888 +
                    ((C233 * C5930 - C78890 * C6113) * C92 +
                     (C233 * C5938 - C78890 * C6119) * C81 +
                     (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                        C78891 * C78876 +
                    ((C78890 * C12369 - C233 * C12225) * C92 +
                     (C78890 * C12371 - C233 * C12228) * C81 +
                     (C78890 * C12370 - C233 * C12226) * C94 +
                     (C78890 * C12372 - C233 * C12230) * C82) *
                        C78891 * C78858) *
                       C78655) *
                  C78564) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78893 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C17369 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78697) *
              C78886 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C17369 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78697) *
              C78873 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C17369 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C162 +
            (C81 * C8467 - C92 * C8465 + C82 * C8468 - C94 * C8466) * C78891) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78894 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78888 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78876 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C162 +
            (C92 * C10351 - C81 * C10355 + C94 * C10352 - C82 * C10356) *
                C78891) *
               C78890 * C78858) *
              C12851 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78894 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78888 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C78876 +
           ((C81 * C12227 - C92 * C12225 + C82 * C12229 - C94 * C12226) * C162 +
            (C81 * C12441 - C92 * C12439 + C82 * C12442 - C94 * C12440) *
                C78891) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C17369 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78893 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78697 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C17369) *
              C78886 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C17369 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78697) *
              C78873 +
          (((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C81 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C82) *
               C78890 * C78697 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C12851 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78655) *
              C78880 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C12851 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C78864 +
          (((C391 * C81 + C392 * C82) * C78890 * C17369 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C12851 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78894 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78888 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78876 -
           (C11878 * C82 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C81) *
               C78890 * C78858) *
              C12851 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78888 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78894 -
           (C11109 * C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C78876 +
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C81 +
            (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                C82) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78893 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C17369 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78697) *
              C78886 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C17369 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C78697) *
              C78873 +
          ((((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C17369 +
           (((C78890 * C8395 - C233 * C8251) * C162 +
             (C78890 * C8603 - C233 * C8465) * C78891) *
                C81 +
            ((C78890 * C8396 - C233 * C8252) * C162 +
             (C78890 * C8604 - C233 * C8466) * C78891) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C78880 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C78864 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C17369 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C17369 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78894 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78888 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78876 +
           (((C233 * C10194 - C78890 * C10301) * C162 +
             (C233 * C10351 - C78890 * C10447) * C78891) *
                C81 +
            ((C11733 - C11734) * C162 + (C11946 - C11947) * C78891) * C82) *
               C78858) *
              C12851 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78894 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78888 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
               C78876 +
           (((C78890 * C12369 - C233 * C12225) * C162 +
             (C78890 * C12577 - C233 * C12439) * C78891) *
                C81 +
            ((C78890 * C12370 - C233 * C12226) * C162 +
             (C78890 * C12578 - C233 * C12440) * C78891) *
                C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78893 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C17369 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78697) *
              C78886 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C17369 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78697) *
              C78873 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C17369 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C233 +
            (C81 * C8673 - C92 * C8671 + C82 * C8674 - C94 * C8672) * C78890) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78894 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78888 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78876 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C233 +
            (C92 * C10493 - C81 * C10497 + C94 * C10494 - C82 * C10498) *
                C78890) *
               C78891 * C78858) *
              C12851 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78894 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78888 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C78876 +
           ((C81 * C12227 - C92 * C12225 + C82 * C12229 - C94 * C12226) * C233 +
            (C81 * C12647 - C92 * C12645 + C82 * C12648 - C94 * C12646) *
                C78890) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C17369 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78893 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C17369 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78697) *
              C78886 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C17369 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C78697) *
              C78873 +
          ((((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C17369 +
           (((C78891 * C8325 - C162 * C8251) * C233 +
             (C78891 * C8741 - C162 * C8671) * C78890) *
                C81 +
            ((C78891 * C8326 - C162 * C8252) * C233 +
             (C78891 * C8742 - C162 * C8672) * C78890) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C78880 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C78864 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C17369 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C17369 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78894 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78888 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78876 +
           (((C162 * C10194 - C78891 * C10251) * C233 +
             (C162 * C10493 - C78891 * C10543) * C78890) *
                C81 +
            ((C11661 - C11662) * C233 + (C12083 - C12084) * C78890) * C82) *
               C78858) *
              C12851 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78894 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78888 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
               C78876 +
           (((C78891 * C12299 - C162 * C12225) * C233 +
             (C78891 * C12715 - C162 * C12645) * C78890) *
                C81 +
            ((C78891 * C12300 - C162 * C12226) * C233 +
             (C78891 * C12716 - C162 * C12646) * C78890) *
                C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C17369 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78893 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78697 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C17369) *
              C78886 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C17369 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78697) *
              C78873 +
          (((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C78891 * C81 +
            (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                C78891 * C82) *
               C78697 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C12851 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78655) *
              C78880 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C12851 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C78864 +
          (((C638 * C81 + C639 * C82) * C17369 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C12851 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78894 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78888 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78876 -
           (C12159 * C82 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C78891 * C81) *
               C78858) *
              C12851 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78888 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78894 -
           (C11518 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C78876 +
           ((C233 * C12369 - C601 * C12225 - C233 * C12645 + C78890 * C12783) *
                C78891 * C81 +
            (C233 * C12370 - C601 * C12226 - C233 * C12646 + C78890 * C12784) *
                C78891 * C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C78693 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78700 +
            (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
             C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                C78890 * C78891 * C20337) *
               C12851 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78700 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C78693 -
            (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
             C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                C78890 * C78891 * C20337) *
               C78655) *
              C78798 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78700 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C78693 -
            (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
             C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                C78890 * C78891 * C20337) *
               C12851 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C78693 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78700 +
            (C92 * C5935 - C93 * C5929 - C92 * C5936 + C81 * C5947 +
             C94 * C10692 - C95 * C10691 - C94 * C10693 + C82 * C10694) *
                C78890 * C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78693 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78700 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C20337) *
                        C12851 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78693 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78700 +
                     ((C162 * C5930 - C78891 * C6027) * C92 +
                      (C162 * C5938 - C78891 * C6033) * C81 +
                      (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                         C78890 * C20337) *
                        C78655) *
                       C78798 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78693 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78700 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C20337) *
                        C12851 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78693 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78700 +
                     ((C10797 - C10796) * C92 + (C10799 - C10798) * C81 +
                      (C78891 * C10793 - C162 * C10691) * C94 +
                      (C78891 * C10794 - C162 * C10693) * C82) *
                         C78890 * C20337) *
                        C78655) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78693 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78700 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C20337) *
                        C12851 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78693 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78700 +
                     ((C233 * C5930 - C78890 * C6113) * C92 +
                      (C233 * C5938 - C78890 * C6119) * C81 +
                      (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                         C78891 * C20337) *
                        C78655) *
                       C78798 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78693 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78700 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C20337) *
                        C12851 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78693 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78700 +
                     ((C10901 - C10900) * C92 + (C10903 - C10902) * C81 +
                      (C78890 * C10897 - C233 * C10691) * C94 +
                      (C78890 * C10898 - C233 * C10693) * C82) *
                         C78891 * C20337) *
                        C78655) *
                       C78575)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78693 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78700 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
             (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
                C78890 * C20337) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78693 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78700 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
             (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
                C78890 * C20337) *
               C78655) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78693 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78700 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
             (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
                C78890 * C20337) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78693 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78700 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C162 +
             (C81 * C6206 - C92 * C6200 + C82 * C11002 - C94 * C11001) *
                 C78891) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78693 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78700 +
            ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                 C81 +
             C2067 * C82) *
                C78890 * C20337) *
               C12851 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78700 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78693 -
            (C11109 * C82 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C81) *
                C78890 * C20337) *
               C78655) *
              C78798 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78700 -
            (C391 * C82 + C390 * C81) * C78890 * C78693 -
            (C2069 * C82 + C2067 * C81) * C78890 * C20337) *
               C12851 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78693 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78700 +
            (C11109 * C81 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C82) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78693 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78700 +
            (((C78890 * C1839 - C233 * C1627) * C162 +
              (C78890 * C2145 - C233 * C1945) * C78891) *
                 C81 +
             ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
                C20337) *
               C12851 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78693 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78700 +
            (((C233 * C5930 - C78890 * C6113) * C162 +
              (C233 * C6199 - C78890 * C6365) * C78891) *
                 C81 +
             ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
                C20337) *
               C78655) *
              C78798 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78693 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78700 +
            (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
             ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
                C20337) *
               C12851 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78693 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78700 +
            (((C10901 - C10900) * C162 + (C11210 - C11209) * C78891) * C81 +
             ((C78890 * C10897 - C233 * C10691) * C162 +
              (C78890 * C11207 - C233 * C11001) * C78891) *
                 C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78693 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78700 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
             (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
                C78891 * C20337) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78693 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78700 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
             (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
                C78891 * C20337) *
               C78655) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78693 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78700 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
             (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
                C78891 * C20337) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78693 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78700 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C233 +
             (C81 * C6452 - C92 * C6446 + C82 * C11309 - C94 * C11308) *
                 C78890) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78693 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78700 +
            (((C78891 * C1733 - C162 * C1627) * C233 +
              (C78891 * C2325 - C162 * C2235) * C78890) *
                 C81 +
             ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
                C20337) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78693 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78700 +
            (((C162 * C5930 - C78891 * C6027) * C233 +
              (C162 * C6445 - C78891 * C6531) * C78890) *
                 C81 +
             ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
                C20337) *
               C78655) *
              C78798 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78693 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78700 +
            (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
             ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
                C20337) *
               C12851 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78693 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78700 +
            (((C10797 - C10796) * C233 + (C11411 - C11410) * C78890) * C81 +
             ((C78891 * C10793 - C162 * C10691) * C233 +
              (C78891 * C11408 - C162 * C11308) * C78890) *
                 C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78693 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78700 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C78891 * C81 +
             C2451 * C82) *
                C20337) *
               C12851 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78700 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78693 -
            (C11518 * C82 +
             (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                 C78891 * C81) *
                C20337) *
               C78655) *
              C78798 +
          (((C2450 * C81 + C2452 * C82) * C78700 -
            (C638 * C82 + C637 * C81) * C78693 -
            (C2453 * C82 + C2451 * C81) * C20337) *
               C12851 +
           ((C1545 * C81 + C1547 * C82) * C78693 -
            (C4735 * C82 + C4734 * C81) * C78700 +
            (C11518 * C81 +
             (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                 C78891 * C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C17369 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C12851 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78697 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C17369) *
                        C78655) *
                       C78880 +
                   (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C17369) *
                        C12851 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C17369 -
                     (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                      C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                         C78890 * C78891 * C78697) *
                        C78655) *
                       C78864 +
                   (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C17369 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78697) *
                        C12851 +
                    ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
                      C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                         C78890 * C78891 * C78697 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C17369) *
                        C78655) *
                       C78836)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C17369 -
                    (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                     C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                        C78890 * C78891 * C78697) *
                       C78893 +
                   ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                     C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                        C78890 * C78891 * C78697 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C17369) *
                       C78886 +
                   ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C17369 -
                    (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                     C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                        C78890 * C78891 * C78697) *
                       C78873 +
                   ((C92 * C8253 - C93 * C8251 - C92 * C8254 + C81 * C8257 +
                     C94 * C8255 - C95 * C8252 - C94 * C8256 + C82 * C8258) *
                        C78890 * C78891 * C78697 -
                    (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                     C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                        C78890 * C78891 * C17369) *
                       C78852) *
                  C78564) /
                     (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C17369 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C17369 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78880 +
                   ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C17369 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C17369 +
                     ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                      (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78864 +
                   ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C17369 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C12851 +
                    (((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C17369 +
                     ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                      (C78891 * C3950 - C162 * C3836) * C94 +
                      (C78891 * C3954 - C162 * C3844) * C82) *
                         C78890 * C78697) *
                        C78655) *
                       C78836)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C17369 +
                    ((C162 * C1626 - C78891 * C1731) * C92 +
                     (C162 * C1636 - C78891 * C1739) * C81 +
                     (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                        C78890 * C78697) *
                       C78893 +
                   (((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C17369 +
                    ((C78891 * C3947 - C162 * C3833) * C92 +
                     (C78891 * C3951 - C162 * C3838) * C81 +
                     (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                        C78890 * C78697) *
                       C78886 +
                   (((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C17369 +
                    ((C162 * C5932 - C78891 * C6029) * C92 +
                     (C162 * C5942 - C78891 * C6035) * C81 +
                     (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                        C78890 * C78697) *
                       C78873 +
                   (((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                        C78890 * C17369 +
                    ((C78891 * C8325 - C162 * C8251) * C92 +
                     (C78891 * C8327 - C162 * C8254) * C81 +
                     (C78891 * C8326 - C162 * C8252) * C94 +
                     (C78891 * C8328 - C162 * C8256) * C82) *
                        C78890 * C78697) *
                       C78852) *
                  C78564) /
                     (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C17369 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C17369 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78880 +
                   ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C17369 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C17369 +
                     ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                      (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78864 +
                   ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C17369 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C12851 +
                    (((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C17369 +
                     ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                      (C78890 * C4064 - C233 * C3836) * C94 +
                      (C78890 * C4068 - C233 * C3844) * C82) *
                         C78891 * C78697) *
                        C78655) *
                       C78836)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C17369 +
                    ((C233 * C1626 - C78890 * C1837) * C92 +
                     (C233 * C1636 - C78890 * C1845) * C81 +
                     (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                        C78891 * C78697) *
                       C78893 +
                   (((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C17369 +
                    ((C78890 * C4061 - C233 * C3833) * C92 +
                     (C78890 * C4065 - C233 * C3838) * C81 +
                     (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                        C78891 * C78697) *
                       C78886 +
                   (((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C17369 +
                    ((C233 * C5932 - C78890 * C6115) * C92 +
                     (C233 * C5942 - C78890 * C6121) * C81 +
                     (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                        C78891 * C78697) *
                       C78873 +
                   (((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                        C78891 * C17369 +
                    ((C78890 * C8395 - C233 * C8251) * C92 +
                     (C78890 * C8397 - C233 * C8254) * C81 +
                     (C78890 * C8396 - C233 * C8252) * C94 +
                     (C78890 * C8398 - C233 * C8256) * C82) *
                        C78891 * C78697) *
                       C78852) *
                  C78564) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78893 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C17369 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78697) *
              C78886 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C17369 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78697) *
              C78873 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C17369 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C162 +
            (C81 * C8467 - C92 * C8465 + C82 * C8468 - C94 * C8466) * C78891) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C12851 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78655) *
              C78880 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C12851 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C78864 +
          (((C391 * C81 + C392 * C82) * C78890 * C17369 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C12851 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C17369 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78893 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78697 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C17369) *
              C78886 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C17369 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78697) *
              C78873 +
          (((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C81 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C82) *
               C78890 * C78697 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C78880 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C78864 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C17369 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C17369 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78893 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C17369 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78697) *
              C78886 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C17369 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C78697) *
              C78873 +
          ((((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C17369 +
           (((C78890 * C8395 - C233 * C8251) * C162 +
             (C78890 * C8603 - C233 * C8465) * C78891) *
                C81 +
            ((C78890 * C8396 - C233 * C8252) * C162 +
             (C78890 * C8604 - C233 * C8466) * C78891) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C12851 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78893 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C17369 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78697) *
              C78886 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C17369 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78697) *
              C78873 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C17369 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C233 +
            (C81 * C8673 - C92 * C8671 + C82 * C8674 - C94 * C8672) * C78890) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C78880 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C78864 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C17369 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C17369 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C17369 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78893 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C17369 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78697) *
              C78886 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C17369 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C78697) *
              C78873 +
          ((((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C17369 +
           (((C78891 * C8325 - C162 * C8251) * C233 +
             (C78891 * C8741 - C162 * C8671) * C78890) *
                C81 +
            ((C78891 * C8326 - C162 * C8252) * C233 +
             (C78891 * C8742 - C162 * C8672) * C78890) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C12851 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78655) *
              C78880 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C12851 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C78864 +
          (((C638 * C81 + C639 * C82) * C17369 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C12851 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C17369 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78893 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78697 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C17369) *
              C78886 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C17369 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78697) *
              C78873 +
          (((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C78891 * C81 +
            (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                C78891 * C82) *
               C78697 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78610 * C6683 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78610 * C6684 +
           (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C78610 * C6685 -
           (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
            C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
               C78890 * C78891 * C78610 * C78852) *
              C78798 +
          ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
            C95 * C724 - C94 * C737 + C82 * C748) *
               C78890 * C78891 * C78610 * C6684 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78610 * C6683 -
           (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
            C93 * C723 - C92 * C735 + C81 * C747) *
               C78890 * C78891 * C78610 * C6685 +
           (C92 * C5459 - C93 * C5455 - C92 * C5460 + C81 * C5467 +
            C94 * C6690 - C95 * C6689 - C94 * C6691 + C82 * C6692) *
               C78890 * C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78610 * C78812 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78610 * C78655) *
              C2521 +
          ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
            C95 * C724 - C94 * C737 + C82 * C748) *
               C78890 * C78891 * C78610 * C78655 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78610 * C78812) *
              C2522 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C78610 * C78812 -
           (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
            C93 * C724 - C92 * C737 + C81 * C748) *
               C78890 * C78891 * C78610 * C78655) *
              C2523 +
          ((C92 * C740 - C93 * C726 - C92 * C741 + C81 * C750 + C94 * C2526 -
            C95 * C2525 - C94 * C2527 + C82 * C2528) *
               C78890 * C78891 * C78610 * C78655 -
           (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 + C92 * C108 -
            C93 * C99 - C92 * C109 + C81 * C117) *
               C78890 * C78891 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C8885 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C8886 +
            (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
             C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                C78890 * C78891 * C78845) *
               C78812 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C8886 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C8885 -
            (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
             C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                C78890 * C78891 * C78845) *
               C78655) *
              C78798 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C8886 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C8885 -
            (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
             C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                C78890 * C78891 * C78845) *
               C78812 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C8885 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C8886 +
            (C92 * C5935 - C93 * C5929 - C92 * C5936 + C81 * C5947 +
             C94 * C10692 - C95 * C10691 - C94 * C10693 + C82 * C10694) *
                C78890 * C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C6683 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C6684 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C6685 +
                     ((C162 * C5456 - C78891 * C5513) * C92 +
                      (C162 * C5462 - C78891 * C5517) * C81 +
                      (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                         C78890 * C78610 * C78852) *
                        C78798 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C6683 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C6684 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C6685 +
                     ((C6763 - C6762) * C92 + (C6765 - C6764) * C81 +
                      (C78891 * C6759 - C162 * C6689) * C94 +
                      (C78891 * C6760 - C162 * C6691) * C82) *
                         C78890 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C78655) *
                        C2521 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C78655) *
                        C2522 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78610 * C78655) *
                        C2523 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C2599 - C2598) * C92 + (C2601 - C2600) * C81 +
                      (C78891 * C2595 - C162 * C2525) * C94 +
                      (C78891 * C2596 - C162 * C2527) * C82) *
                         C78890 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C8885 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C8886 +
                      ((C78891 * C1733 - C162 * C1627) * C92 +
                       (C78891 * C1741 - C162 * C1638) * C81 +
                       (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                          C78890 * C78845) *
                         C78812 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C8885 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C8886 +
                      ((C162 * C5930 - C78891 * C6027) * C92 +
                       (C162 * C5938 - C78891 * C6033) * C81 +
                       (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                          C78890 * C78845) *
                         C78655) *
                        C78798 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C8885 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C8886 +
                      ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                       (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                          C78890 * C78845) *
                         C78812 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C8885 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C8886 +
                      ((C10797 - C10796) * C92 + (C10799 - C10798) * C81 +
                       (C78891 * C10793 - C162 * C10691) * C94 +
                       (C78891 * C10794 - C162 * C10693) * C82) *
                          C78890 * C78845) *
                         C78655) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C6683 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C6684 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C6685 +
                     ((C233 * C5456 - C78890 * C5563) * C92 +
                      (C233 * C5462 - C78890 * C5567) * C81 +
                      (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                         C78891 * C78610 * C78852) *
                        C78798 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C6683 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C6684 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C6685 +
                     ((C6835 - C6834) * C92 + (C6837 - C6836) * C81 +
                      (C78890 * C6831 - C233 * C6689) * C94 +
                      (C78890 * C6832 - C233 * C6691) * C82) *
                         C78891 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C78655) *
                        C2521 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C78655) *
                        C2522 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78610 * C78655) *
                        C2523 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C2671 - C2670) * C92 + (C2673 - C2672) * C81 +
                      (C78890 * C2667 - C233 * C2525) * C94 +
                      (C78890 * C2668 - C233 * C2527) * C82) *
                         C78891 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C8885 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C8886 +
                      ((C78890 * C1839 - C233 * C1627) * C92 +
                       (C78890 * C1847 - C233 * C1638) * C81 +
                       (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                          C78891 * C78845) *
                         C78812 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C8885 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C8886 +
                      ((C233 * C5930 - C78890 * C6113) * C92 +
                       (C233 * C5938 - C78890 * C6119) * C81 +
                       (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                          C78891 * C78845) *
                         C78655) *
                        C78798 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C8885 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C8886 +
                      ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                       (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                          C78891 * C78845) *
                         C78812 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C8885 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C8886 +
                      ((C10901 - C10900) * C92 + (C10903 - C10902) * C81 +
                       (C78890 * C10897 - C233 * C10691) * C94 +
                       (C78890 * C10898 - C233 * C10693) * C82) *
                          C78891 * C78845) *
                         C78655) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C6683 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C6684 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C6685 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78610 * C78852) *
              C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C6683 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C6684 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C6685 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C162 +
            (C81 * C5618 - C92 * C5614 + C82 * C6904 - C94 * C6903) * C78891) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78812 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78655) *
              C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78812 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78655) *
              C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78812 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78655) *
              C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78610 * C78812 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C162 +
            (C81 * C1052 - C92 * C1044 + C82 * C2740 - C94 * C2739) * C78891) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C8885 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C8886 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
             (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
                C78890 * C78845) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C8885 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C8886 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
             (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
                C78890 * C78845) *
               C78655) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C8885 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C8886 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
             (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
                C78890 * C78845) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C8885 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C8886 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C162 +
             (C81 * C6206 - C92 * C6200 + C82 * C11002 - C94 * C11001) *
                 C78891) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C6683 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C6684 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C6685 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78610 * C78852) *
              C78798 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C6684 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C6683 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C6685 +
           (C6979 * C81 +
            (C162 * C6759 - C358 * C6689 - C162 * C6903 + C78891 * C6971) *
                C82) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78812 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78655) *
              C2521 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78655 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78812) *
              C2522 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78812 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C78655) *
              C2523 +
          ((C2815 * C81 +
            (C162 * C2595 - C358 * C2525 - C162 * C2739 + C78891 * C2807) *
                C82) *
               C78890 * C78610 * C78655 -
           (C393 * C82 + C392 * C81) * C78890 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C8885 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C8886 +
            ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                 C81 +
             C2067 * C82) *
                C78890 * C78845) *
               C78812 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C8886 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C8885 -
            (C11109 * C82 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C81) *
                C78890 * C78845) *
               C78655) *
              C78798 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C8886 -
            (C391 * C82 + C390 * C81) * C78890 * C8885 -
            (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
               C78812 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C8885 -
            (C4299 * C82 + C4298 * C81) * C78890 * C8886 +
            (C11109 * C81 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C82) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C6683 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C6684 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C6685 +
           (((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78610 * C78852) *
              C78798 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C6683 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C6684 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C6685 +
           (((C6835 - C6834) * C162 + (C7048 - C7047) * C78891) * C81 +
            ((C78890 * C6831 - C233 * C6689) * C162 +
             (C78890 * C7045 - C233 * C6903) * C78891) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78812 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78655) *
              C2521 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78812 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78655) *
              C2522 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78812 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C78655) *
              C2523 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78610 * C78812 +
           (((C2671 - C2670) * C162 + (C2884 - C2883) * C78891) * C81 +
            ((C78890 * C2667 - C233 * C2525) * C162 +
             (C78890 * C2881 - C233 * C2739) * C78891) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C8885 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C8886 +
            (((C78890 * C1839 - C233 * C1627) * C162 +
              (C78890 * C2145 - C233 * C1945) * C78891) *
                 C81 +
             ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
                C78845) *
               C78812 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C8885 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C8886 +
            (((C233 * C5930 - C78890 * C6113) * C162 +
              (C233 * C6199 - C78890 * C6365) * C78891) *
                 C81 +
             ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
                C78845) *
               C78655) *
              C78798 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C8885 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C8886 +
            (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
             ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
                C78845) *
               C78812 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C8885 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C8886 +
            (((C10901 - C10900) * C162 + (C11210 - C11209) * C78891) * C81 +
             ((C78890 * C10897 - C233 * C10691) * C162 +
              (C78890 * C11207 - C233 * C11001) * C78891) *
                 C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C6683 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C6684 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C6685 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78610 * C78852) *
              C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C6683 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C6684 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C6685 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C233 +
            (C81 * C5760 - C92 * C5756 + C82 * C7115 - C94 * C7114) * C78890) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78812 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78655) *
              C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78812 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78655) *
              C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78812 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78655) *
              C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78610 * C78812 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C233 +
            (C81 * C1342 - C92 * C1334 + C82 * C2951 - C94 * C2950) * C78890) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C8885 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C8886 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
             (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
                C78891 * C78845) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C8885 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C8886 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
             (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
                C78891 * C78845) *
               C78655) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C8885 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C8886 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
             (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
                C78891 * C78845) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C8885 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C8886 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C233 +
             (C81 * C6452 - C92 * C6446 + C82 * C11309 - C94 * C11308) *
                 C78890) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C6683 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C6684 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C6685 +
           (((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78610 * C78852) *
              C78798 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C6683 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C6684 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C6685 +
           (((C6763 - C6762) * C233 + (C7185 - C7184) * C78890) * C81 +
            ((C78891 * C6759 - C162 * C6689) * C233 +
             (C78891 * C7182 - C162 * C7114) * C78890) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78812 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78655) *
              C2521 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78812 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78655) *
              C2522 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78812 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C78655) *
              C2523 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78610 * C78812 +
           (((C2599 - C2598) * C233 + (C3021 - C3020) * C78890) * C81 +
            ((C78891 * C2595 - C162 * C2525) * C233 +
             (C78891 * C3018 - C162 * C2950) * C78890) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C8885 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C8886 +
            (((C78891 * C1733 - C162 * C1627) * C233 +
              (C78891 * C2325 - C162 * C2235) * C78890) *
                 C81 +
             ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
                C78845) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C8885 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C8886 +
            (((C162 * C5930 - C78891 * C6027) * C233 +
              (C162 * C6445 - C78891 * C6531) * C78890) *
                 C81 +
             ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
                C78845) *
               C78655) *
              C78798 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C8885 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C8886 +
            (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
             ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
                C78845) *
               C78812 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C8885 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C8886 +
            (((C10797 - C10796) * C233 + (C11411 - C11410) * C78890) * C81 +
             ((C78891 * C10793 - C162 * C10691) * C233 +
              (C78891 * C11408 - C162 * C11308) * C78890) *
                 C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C6683 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C6684 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C6685 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78610 * C78852) *
              C78798 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C6684 -
           (C638 * C82 + C637 * C81) * C78610 * C6683 -
           (C1548 * C82 + C1546 * C81) * C78610 * C6685 +
           (C7260 * C81 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C78891 * C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78812 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78655) *
              C2521 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78655 -
           (C638 * C82 + C637 * C81) * C78610 * C78812) *
              C2522 +
          ((C638 * C81 + C639 * C82) * C78610 * C78812 -
           (C3096 * C82 + C1547 * C81) * C78610 * C78655) *
              C2523 +
          ((C3096 * C81 +
            (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
                C78891 * C82) *
               C78610 * C78655 -
           (C640 * C82 + C639 * C81) * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C8885 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C8886 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C78891 * C81 +
             C2451 * C82) *
                C78845) *
               C78812 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C8886 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C8885 -
            (C11518 * C82 +
             (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                 C78891 * C81) *
                C78845) *
               C78655) *
              C78798 +
          (((C2450 * C81 + C2452 * C82) * C8886 -
            (C638 * C82 + C637 * C81) * C8885 -
            (C2453 * C82 + C2451 * C81) * C78845) *
               C78812 +
           ((C1545 * C81 + C1547 * C82) * C8885 -
            (C4735 * C82 + C4734 * C81) * C8886 +
            (C11518 * C81 +
             (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                 C78891 * C82) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78813 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78697) *
              C6683 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C78697 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78813) *
              C6684 +
          ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C78813 -
           (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
            C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
               C78890 * C78891 * C78697) *
              C6685 +
          ((C92 * C8253 - C93 * C8251 - C92 * C8254 + C81 * C8257 +
            C94 * C8255 - C95 * C8252 - C94 * C8256 + C82 * C8258) *
               C78890 * C78891 * C78697 -
           (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
            C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
               C78890 * C78891 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C78813 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78697) *
               C78812 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78697 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C78813) *
               C78655) *
              C717 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78697 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C78813) *
               C78812 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C78813 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78697) *
               C78655) *
              C718 +
          (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
             C95 * C99 - C94 * C109 + C82 * C117) *
                C78890 * C78891 * C78813 -
            (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
             C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                C78890 * C78891 * C78697) *
               C78812 +
           ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
             C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                C78890 * C78891 * C78697 -
            (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
             C93 * C724 - C92 * C737 + C81 * C748) *
                C78890 * C78891 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C11584 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C11585 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C11586 -
           (C94 * C10197 - C95 * C10193 - C94 * C10198 + C82 * C10205 +
            C92 * C10199 - C93 * C10194 - C92 * C10200 + C81 * C10206) *
               C78890 * C78891 * C78858) *
              C78812 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C11585 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C11584 -
           (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
            C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
               C78890 * C78891 * C11586 +
           (C92 * C12227 - C93 * C12225 - C92 * C12228 + C81 * C12231 +
            C94 * C12229 - C95 * C12226 - C94 * C12230 + C82 * C12232) *
               C78890 * C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C6683 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C6684 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78813 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                         C78890 * C78697) *
                        C6685 +
                    (((C162 * C5456 - C78891 * C5513) * C92 +
                      (C162 * C5462 - C78891 * C5517) * C81 +
                      (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C8325 - C162 * C8251) * C92 +
                      (C78891 * C8327 - C162 * C8254) * C81 +
                      (C78891 * C8326 - C162 * C8252) * C94 +
                      (C78891 * C8328 - C162 * C8256) * C82) *
                         C78890 * C78697) *
                        C78852) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C78813 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C78813 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C717 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C78813 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C78813 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C718 +
                    ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                       (C184 - C185) * C94 + (C186 - C187) * C82) *
                          C78890 * C78813 +
                      ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                       (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C852 - C851) * C92 + (C854 - C853) * C81 +
                       (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                          C78890 * C78813 +
                      ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                       (C78891 * C3950 - C162 * C3836) * C94 +
                       (C78891 * C3954 - C162 * C3844) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C11584 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C11585 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C11586 +
                     ((C162 * C10194 - C78891 * C10251) * C92 +
                      (C162 * C10200 - C78891 * C10255) * C81 +
                      (C11661 - C11662) * C94 + (C11663 - C11664) * C82) *
                         C78890 * C78858) *
                        C78812 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C11584 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C11585 +
                     ((C162 * C5930 - C78891 * C6027) * C92 +
                      (C162 * C5938 - C78891 * C6033) * C81 +
                      (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                         C78890 * C11586 +
                     ((C78891 * C12299 - C162 * C12225) * C92 +
                      (C78891 * C12301 - C162 * C12228) * C81 +
                      (C78891 * C12300 - C162 * C12226) * C94 +
                      (C78891 * C12302 - C162 * C12230) * C82) *
                         C78890 * C78858) *
                        C78655) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexz[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C6683 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C6684 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78813 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                         C78891 * C78697) *
                        C6685 +
                    (((C233 * C5456 - C78890 * C5563) * C92 +
                      (C233 * C5462 - C78890 * C5567) * C81 +
                      (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C8395 - C233 * C8251) * C92 +
                      (C78890 * C8397 - C233 * C8254) * C81 +
                      (C78890 * C8396 - C233 * C8252) * C94 +
                      (C78890 * C8398 - C233 * C8256) * C82) *
                         C78891 * C78697) *
                        C78852) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C78813 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C78813 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C717 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C78813 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C78813 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C718 +
                    ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                       (C255 - C256) * C94 + (C257 - C258) * C82) *
                          C78891 * C78813 +
                      ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                       (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C958 - C957) * C92 + (C960 - C959) * C81 +
                       (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                          C78891 * C78813 +
                      ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                       (C78890 * C4064 - C233 * C3836) * C94 +
                       (C78890 * C4068 - C233 * C3844) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C11584 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C11585 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C11586 +
                     ((C233 * C10194 - C78890 * C10301) * C92 +
                      (C233 * C10200 - C78890 * C10305) * C81 +
                      (C11733 - C11734) * C94 + (C11735 - C11736) * C82) *
                         C78891 * C78858) *
                        C78812 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C11584 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C11585 +
                     ((C233 * C5930 - C78890 * C6113) * C92 +
                      (C233 * C5938 - C78890 * C6119) * C81 +
                      (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                         C78891 * C11586 +
                     ((C78890 * C12369 - C233 * C12225) * C92 +
                      (C78890 * C12371 - C233 * C12228) * C81 +
                      (C78890 * C12370 - C233 * C12226) * C94 +
                      (C78890 * C12372 - C233 * C12230) * C82) *
                         C78891 * C78858) *
                        C78655) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C6683 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78813 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78697) *
              C6684 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78813 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78697) *
              C6685 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78813 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C162 +
            (C81 * C8467 - C92 * C8465 + C82 * C8468 - C94 * C8466) * C78891) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C11584 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C11585 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C11586 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C162 +
            (C92 * C10351 - C81 * C10355 + C94 * C10352 - C82 * C10356) *
                C78891) *
               C78890 * C78858) *
              C78812 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C11584 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C11585 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C11586 +
           ((C81 * C12227 - C92 * C12225 + C82 * C12229 - C94 * C12226) * C162 +
            (C81 * C12441 - C92 * C12439 + C82 * C12442 - C94 * C12440) *
                C78891) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78813 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C6683 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78697 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78813) *
              C6684 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78813 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78697) *
              C6685 +
          (((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C81 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C82) *
               C78890 * C78697 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78812 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C78655) *
              C717 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C78812 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C718 +
          (((C391 * C81 + C392 * C82) * C78890 * C78813 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C78812 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C11584 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C11585 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C11586 -
           (C11878 * C82 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C81) *
               C78890 * C78858) *
              C78812 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C11585 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C11584 -
           (C11109 * C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C11586 +
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C81 +
            (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                C82) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C6683 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78813 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78697) *
              C6684 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78813 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C78697) *
              C6685 +
          ((((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78813 +
           (((C78890 * C8395 - C233 * C8251) * C162 +
             (C78890 * C8603 - C233 * C8465) * C78891) *
                C81 +
            ((C78890 * C8396 - C233 * C8252) * C162 +
             (C78890 * C8604 - C233 * C8466) * C78891) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C717 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C718 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C78813 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C78813 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C11584 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C11585 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C11586 +
           (((C233 * C10194 - C78890 * C10301) * C162 +
             (C233 * C10351 - C78890 * C10447) * C78891) *
                C81 +
            ((C11733 - C11734) * C162 + (C11946 - C11947) * C78891) * C82) *
               C78858) *
              C78812 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C11584 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C11585 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
               C11586 +
           (((C78890 * C12369 - C233 * C12225) * C162 +
             (C78890 * C12577 - C233 * C12439) * C78891) *
                C81 +
            ((C78890 * C12370 - C233 * C12226) * C162 +
             (C78890 * C12578 - C233 * C12440) * C78891) *
                C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C6683 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78813 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78697) *
              C6684 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78813 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78697) *
              C6685 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78813 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C233 +
            (C81 * C8673 - C92 * C8671 + C82 * C8674 - C94 * C8672) * C78890) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C11584 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C11585 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C11586 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C233 +
            (C92 * C10493 - C81 * C10497 + C94 * C10494 - C82 * C10498) *
                C78890) *
               C78891 * C78858) *
              C78812 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C11584 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C11585 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C11586 +
           ((C81 * C12227 - C92 * C12225 + C82 * C12229 - C94 * C12226) * C233 +
            (C81 * C12647 - C92 * C12645 + C82 * C12648 - C94 * C12646) *
                C78890) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78813 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C6683 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78813 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78697) *
              C6684 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78813 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C78697) *
              C6685 +
          ((((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78813 +
           (((C78891 * C8325 - C162 * C8251) * C233 +
             (C78891 * C8741 - C162 * C8671) * C78890) *
                C81 +
            ((C78891 * C8326 - C162 * C8252) * C233 +
             (C78891 * C8742 - C162 * C8672) * C78890) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C717 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C718 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C78813 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C78813 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C11584 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C11585 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C11586 +
           (((C162 * C10194 - C78891 * C10251) * C233 +
             (C162 * C10493 - C78891 * C10543) * C78890) *
                C81 +
            ((C11661 - C11662) * C233 + (C12083 - C12084) * C78890) * C82) *
               C78858) *
              C78812 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C11584 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C11585 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
               C11586 +
           (((C78891 * C12299 - C162 * C12225) * C233 +
             (C78891 * C12715 - C162 * C12645) * C78890) *
                C81 +
            ((C78891 * C12300 - C162 * C12226) * C233 +
             (C78891 * C12716 - C162 * C12646) * C78890) *
                C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78813 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C6683 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78697 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78813) *
              C6684 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78813 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78697) *
              C6685 +
          (((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C78891 * C81 +
            (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                C78891 * C82) *
               C78697 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78812 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C78655) *
              C717 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C78812 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C718 +
          (((C638 * C81 + C639 * C82) * C78813 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C78812 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C11584 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C11585 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C11586 -
           (C12159 * C82 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C78891 * C81) *
               C78858) *
              C78812 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C11585 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C11584 -
           (C11518 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C11586 +
           ((C233 * C12369 - C601 * C12225 - C233 * C12645 + C78890 * C12783) *
                C78891 * C81 +
            (C233 * C12370 - C601 * C12226 - C233 * C12646 + C78890 * C12784) *
                C78891 * C82) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
               C95 * C97 - C94 * C105 + C82 * C115) *
                  C78890 * C78891 * C78610 * C78592 * C87 -
              (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
               C93 * C97 - C92 * C105 + C81 * C115) *
                  C78890 * C78891 * C78610 * C78592 * C88 +
              (C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
               C95 * C99 - C94 * C109 + C82 * C117) *
                  C78890 * C78891 * C78610 * C78592 * C89 -
              (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 + C92 * C108 -
               C93 * C99 - C92 * C109 + C81 * C117) *
                  C78890 * C78891 * C78610 * C78592 * C90 +
              (C92 * C110 - C93 * C100 - C92 * C111 + C81 * C118 + C94 * C112 -
               C95 * C101 - C94 * C113 + C82 * C119) *
                  C78890 * C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
                C95 * C97 - C94 * C105 + C82 * C115) *
                   C78890 * C78891 * C78610 * C78883 -
               (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
                C93 * C721 - C92 * C731 + C81 * C745) *
                   C78890 * C78891 * C78610 * C78868 +
               (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
                C95 * C723 - C94 * C735 + C82 * C747) *
                   C78890 * C78891 * C78610 * C78842) *
                  C717 +
              ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
                C95 * C724 - C94 * C737 + C82 * C748) *
                   C78890 * C78891 * C78610 * C78868 -
               (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
                C93 * C97 - C92 * C105 + C81 * C115) *
                   C78890 * C78891 * C78610 * C78883 -
               (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
                C93 * C723 - C92 * C735 + C81 * C747) *
                   C78890 * C78891 * C78610 * C78842) *
                  C718 +
              ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
                C95 * C99 - C94 * C109 + C82 * C117) *
                   C78890 * C78891 * C78610 * C78883 -
               (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
                C93 * C724 - C92 * C737 + C81 * C748) *
                   C78890 * C78891 * C78610 * C78868 +
               (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 + C94 * C742 -
                C95 * C727 - C94 * C743 + C82 * C751) *
                   C78890 * C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78884 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78870 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78845) *
              C78592 * C717 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C78870 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78884 -
           (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
            C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
               C78890 * C78891 * C78845) *
              C78592 * C718 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C78884 -
           (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
            C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
               C78890 * C78891 * C78870 +
           (C92 * C1643 - C93 * C1630 - C92 * C1644 + C81 * C1654 +
            C94 * C1647 - C95 * C1632 - C94 * C1648 + C82 * C1656) *
               C78890 * C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78610 * C4809 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78610 * C4810 +
           (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C78610 * C78842) *
              C78880 +
          ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
            C95 * C724 - C94 * C737 + C82 * C748) *
               C78890 * C78891 * C78610 * C4810 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78610 * C4809 -
           (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
            C93 * C723 - C92 * C735 + C81 * C747) *
               C78890 * C78891 * C78610 * C78842) *
              C78864 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C78610 * C4809 -
           (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 + C92 * C736 -
            C93 * C724 - C92 * C737 + C81 * C748) *
               C78890 * C78891 * C78610 * C4810 +
           (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 + C94 * C742 -
            C95 * C727 - C94 * C743 + C82 * C751) *
               C78890 * C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
           C95 * C97 - C94 * C105 + C82 * C115) *
              C78890 * C78891 * C78610 * C5449 -
          (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
           C93 * C721 - C92 * C731 + C81 * C745) *
              C78890 * C78891 * C78610 * C5450 +
          (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
           C95 * C723 - C94 * C735 + C82 * C747) *
              C78890 * C78891 * C78610 * C5451 -
          (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 + C92 * C5461 -
           C93 * C5456 - C92 * C5462 + C81 * C5468) *
              C78890 * C78891 * C78610 * C5452 +
          (C92 * C5463 - C93 * C5457 - C92 * C5464 + C81 * C5469 + C94 * C5465 -
           C95 * C5458 - C94 * C5466 + C82 * C5470) *
              C78890 * C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78884 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78870 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78845) *
              C4809 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C78870 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C78884 -
           (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
            C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
               C78890 * C78891 * C78845) *
              C4810 +
          ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C78884 -
           (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
            C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
               C78890 * C78891 * C78870 +
           (C92 * C5943 - C93 * C5933 - C92 * C5944 + C81 * C5951 +
            C94 * C5945 - C95 * C5934 - C94 * C5946 + C82 * C5952) *
               C78890 * C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C8885 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C8886 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78845) *
              C78592 * C78880 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C8886 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C8885 -
           (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
            C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
               C78890 * C78891 * C78845) *
              C78592 * C78864 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C8885 -
           (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
            C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
               C78890 * C78891 * C8886 +
           (C92 * C1643 - C93 * C1630 - C92 * C1644 + C81 * C1654 +
            C94 * C1647 - C95 * C1632 - C94 * C1648 + C82 * C1656) *
               C78890 * C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C8885 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C8886 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78845) *
              C78883 +
          ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
            C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
               C78890 * C78891 * C8886 -
           (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
            C93 * C721 - C92 * C731 + C81 * C745) *
               C78890 * C78891 * C8885 -
           (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
            C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
               C78890 * C78891 * C78845) *
              C78868 +
          ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
            C95 * C723 - C94 * C735 + C82 * C747) *
               C78890 * C78891 * C8885 -
           (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
            C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
               C78890 * C78891 * C8886 +
           (C92 * C5943 - C93 * C5933 - C92 * C5944 + C81 * C5951 +
            C94 * C5945 - C95 * C5934 - C94 * C5946 + C82 * C5952) *
               C78890 * C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
           C95 * C97 - C94 * C105 + C82 * C115) *
              C78890 * C78891 * C10188 -
          (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 + C92 * C1635 -
           C93 * C1626 - C92 * C1636 + C81 * C1650) *
              C78890 * C78891 * C10189 +
          (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 + C94 * C1639 -
           C95 * C1628 - C94 * C1640 + C82 * C1652) *
              C78890 * C78891 * C10190 -
          (C94 * C10197 - C95 * C10193 - C94 * C10198 + C82 * C10205 +
           C92 * C10199 - C93 * C10194 - C92 * C10200 + C81 * C10206) *
              C78890 * C78891 * C10191 +
          (C92 * C10201 - C93 * C10195 - C92 * C10202 + C81 * C10207 +
           C94 * C10203 - C95 * C10196 - C94 * C10204 + C82 * C10208) *
              C78890 * C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C78891 * C163 - C162 * C96) * C92 +
               (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
               (C178 - C179) * C82) *
                  C78890 * C78610 * C78592 * C87 +
              ((C177 - C176) * C92 + (C179 - C178) * C81 + (C180 - C181) * C94 +
               (C182 - C183) * C82) *
                  C78890 * C78610 * C78592 * C88 +
              ((C181 - C180) * C92 + (C183 - C182) * C81 + (C184 - C185) * C94 +
               (C186 - C187) * C82) *
                  C78890 * C78610 * C78592 * C89 +
              ((C185 - C184) * C92 + (C187 - C186) * C81 + (C188 - C189) * C94 +
               (C190 - C191) * C82) *
                  C78890 * C78610 * C78592 * C90 +
              ((C189 - C188) * C92 + (C191 - C190) * C81 +
               (C78891 * C168 - C162 * C101) * C94 +
               (C78891 * C174 - C162 * C113) * C82) *
                  C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C78891 * C163 - C162 * C96) * C92 +
                (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                (C178 - C179) * C82) *
                   C78890 * C78610 * C78883 +
               ((C162 * C721 - C78891 * C826) * C92 +
                (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                (C845 - C846) * C82) *
                   C78890 * C78610 * C78868 +
               ((C78891 * C828 - C162 * C722) * C92 +
                (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                (C849 - C850) * C82) *
                   C78890 * C78610 * C78842) *
                  C717 +
              (((C177 - C176) * C92 + (C179 - C178) * C81 +
                (C180 - C181) * C94 + (C182 - C183) * C82) *
                   C78890 * C78610 * C78883 +
               ((C844 - C843) * C92 + (C846 - C845) * C81 +
                (C851 - C852) * C94 + (C853 - C854) * C82) *
                   C78890 * C78610 * C78868 +
               ((C848 - C847) * C92 + (C850 - C849) * C81 +
                (C855 - C856) * C94 + (C857 - C858) * C82) *
                   C78890 * C78610 * C78842) *
                  C718 +
              (((C181 - C180) * C92 + (C183 - C182) * C81 +
                (C184 - C185) * C94 + (C186 - C187) * C82) *
                   C78890 * C78610 * C78883 +
               ((C852 - C851) * C92 + (C854 - C853) * C81 +
                (C162 * C726 - C78891 * C832) * C94 +
                (C162 * C741 - C78891 * C840) * C82) *
                   C78890 * C78610 * C78868 +
               ((C856 - C855) * C92 + (C858 - C857) * C81 +
                (C78891 * C833 - C162 * C727) * C94 +
                (C78891 * C841 - C162 * C743) * C82) *
                   C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C78891 * C163 - C162 * C96) * C92 +
                                (C78891 * C169 - C162 * C103) * C81 +
                                (C176 - C177) * C94 + (C178 - C179) * C82) *
                                   C78890 * C78884 +
                               ((C162 * C1626 - C78891 * C1731) * C92 +
                                (C162 * C1636 - C78891 * C1739) * C81 +
                                (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                                   C78890 * C78870 +
                               ((C78891 * C1733 - C162 * C1627) * C92 +
                                (C78891 * C1741 - C162 * C1638) * C81 +
                                (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C717 +
                              (((C177 - C176) * C92 + (C179 - C178) * C81 +
                                (C180 - C181) * C94 + (C182 - C183) * C82) *
                                   C78890 * C78884 +
                               ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                                (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                                   C78890 * C78870 +
                               ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                                (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C718 +
                              (((C181 - C180) * C92 + (C183 - C182) * C81 +
                                (C184 - C185) * C94 + (C186 - C187) * C82) *
                                   C78890 * C78884 +
                               ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                                (C162 * C1631 - C78891 * C1737) * C94 +
                                (C162 * C1646 - C78891 * C1745) * C82) *
                                   C78890 * C78870 +
                               ((C1761 - C1760) * C92 + (C1763 - C1762) * C81 +
                                (C78891 * C1738 - C162 * C1632) * C94 +
                                (C78891 * C1746 - C162 * C1648) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C92 +
            (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
            (C178 - C179) * C82) *
               C78890 * C78610 * C4809 +
           ((C162 * C721 - C78891 * C826) * C92 +
            (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
            (C845 - C846) * C82) *
               C78890 * C78610 * C4810 +
           ((C78891 * C828 - C162 * C722) * C92 +
            (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
            (C849 - C850) * C82) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C177 - C176) * C92 + (C179 - C178) * C81 + (C180 - C181) * C94 +
            (C182 - C183) * C82) *
               C78890 * C78610 * C4809 +
           ((C844 - C843) * C92 + (C846 - C845) * C81 + (C851 - C852) * C94 +
            (C853 - C854) * C82) *
               C78890 * C78610 * C4810 +
           ((C848 - C847) * C92 + (C850 - C849) * C81 + (C855 - C856) * C94 +
            (C857 - C858) * C82) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C181 - C180) * C92 + (C183 - C182) * C81 + (C184 - C185) * C94 +
            (C186 - C187) * C82) *
               C78890 * C78610 * C4809 +
           ((C852 - C851) * C92 + (C854 - C853) * C81 + (C2598 - C2599) * C94 +
            (C2600 - C2601) * C82) *
               C78890 * C78610 * C4810 +
           ((C856 - C855) * C92 + (C858 - C857) * C81 +
            (C78891 * C833 - C162 * C727) * C94 +
            (C78891 * C841 - C162 * C743) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C78891 * C163 - C162 * C96) * C92 +
           (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
           (C178 - C179) * C82) *
              C78890 * C78610 * C5449 +
          ((C162 * C721 - C78891 * C826) * C92 +
           (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
           (C845 - C846) * C82) *
              C78890 * C78610 * C5450 +
          ((C78891 * C828 - C162 * C722) * C92 +
           (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
           (C849 - C850) * C82) *
              C78890 * C78610 * C5451 +
          ((C162 * C5456 - C78891 * C5513) * C92 +
           (C162 * C5462 - C78891 * C5517) * C81 +
           (C162 * C5455 - C78891 * C5514) * C94 +
           (C162 * C5460 - C78891 * C5518) * C82) *
              C78890 * C78610 * C5452 +
          ((C78891 * C5515 - C162 * C5457) * C92 +
           (C78891 * C5519 - C162 * C5464) * C81 +
           (C78891 * C5516 - C162 * C5458) * C94 +
           (C78891 * C5520 - C162 * C5466) * C82) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C92 +
            (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
            (C178 - C179) * C82) *
               C78890 * C78884 +
           ((C162 * C1626 - C78891 * C1731) * C92 +
            (C162 * C1636 - C78891 * C1739) * C81 + (C1748 - C1749) * C94 +
            (C1750 - C1751) * C82) *
               C78890 * C78870 +
           ((C78891 * C1733 - C162 * C1627) * C92 +
            (C78891 * C1741 - C162 * C1638) * C81 + (C1752 - C1753) * C94 +
            (C1754 - C1755) * C82) *
               C78890 * C78845) *
              C4809 +
          (((C162 * C721 - C78891 * C826) * C92 +
            (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
            (C845 - C846) * C82) *
               C78890 * C78884 +
           ((C78891 * C3947 - C162 * C3833) * C92 +
            (C78891 * C3951 - C162 * C3838) * C81 + (C3956 - C3957) * C94 +
            (C3958 - C3959) * C82) *
               C78890 * C78870 +
           ((C162 * C5930 - C78891 * C6027) * C92 +
            (C162 * C5938 - C78891 * C6033) * C81 +
            (C162 * C5929 - C78891 * C6028) * C94 +
            (C162 * C5936 - C78891 * C6034) * C82) *
               C78890 * C78845) *
              C4810 +
          (((C78891 * C828 - C162 * C722) * C92 +
            (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
            (C849 - C850) * C82) *
               C78890 * C78884 +
           ((C162 * C5932 - C78891 * C6029) * C92 +
            (C162 * C5942 - C78891 * C6035) * C81 +
            (C162 * C5931 - C78891 * C6030) * C94 +
            (C162 * C5940 - C78891 * C6036) * C82) *
               C78890 * C78870 +
           ((C78891 * C6031 - C162 * C5933) * C92 +
            (C78891 * C6037 - C162 * C5944) * C81 +
            (C78891 * C6032 - C162 * C5934) * C94 +
            (C78891 * C6038 - C162 * C5946) * C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C78891 * C163 - C162 * C96) * C92 +
                                (C78891 * C169 - C162 * C103) * C81 +
                                (C176 - C177) * C94 + (C178 - C179) * C82) *
                                   C78890 * C8885 +
                               ((C162 * C1626 - C78891 * C1731) * C92 +
                                (C162 * C1636 - C78891 * C1739) * C81 +
                                (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                                   C78890 * C8886 +
                               ((C78891 * C1733 - C162 * C1627) * C92 +
                                (C78891 * C1741 - C162 * C1638) * C81 +
                                (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C78880 +
                              (((C177 - C176) * C92 + (C179 - C178) * C81 +
                                (C180 - C181) * C94 + (C182 - C183) * C82) *
                                   C78890 * C8885 +
                               ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                                (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                                   C78890 * C8886 +
                               ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                                (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C78864 +
                              (((C181 - C180) * C92 + (C183 - C182) * C81 +
                                (C184 - C185) * C94 + (C186 - C187) * C82) *
                                   C78890 * C8885 +
                               ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                                (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                                   C78890 * C8886 +
                               ((C1761 - C1760) * C92 + (C1763 - C1762) * C81 +
                                (C78891 * C1738 - C162 * C1632) * C94 +
                                (C78891 * C1746 - C162 * C1648) * C82) *
                                   C78890 * C78845) *
                                  C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C92 +
            (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
            (C178 - C179) * C82) *
               C78890 * C8885 +
           ((C162 * C1626 - C78891 * C1731) * C92 +
            (C162 * C1636 - C78891 * C1739) * C81 + (C1748 - C1749) * C94 +
            (C1750 - C1751) * C82) *
               C78890 * C8886 +
           ((C78891 * C1733 - C162 * C1627) * C92 +
            (C78891 * C1741 - C162 * C1638) * C81 + (C1752 - C1753) * C94 +
            (C1754 - C1755) * C82) *
               C78890 * C78845) *
              C78883 +
          (((C162 * C721 - C78891 * C826) * C92 +
            (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
            (C845 - C846) * C82) *
               C78890 * C8885 +
           ((C78891 * C3947 - C162 * C3833) * C92 +
            (C78891 * C3951 - C162 * C3838) * C81 + (C3956 - C3957) * C94 +
            (C3958 - C3959) * C82) *
               C78890 * C8886 +
           ((C162 * C5930 - C78891 * C6027) * C92 +
            (C162 * C5938 - C78891 * C6033) * C81 +
            (C162 * C5929 - C78891 * C6028) * C94 +
            (C162 * C5936 - C78891 * C6034) * C82) *
               C78890 * C78845) *
              C78868 +
          (((C78891 * C828 - C162 * C722) * C92 +
            (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
            (C849 - C850) * C82) *
               C78890 * C8885 +
           ((C162 * C5932 - C78891 * C6029) * C92 +
            (C162 * C5942 - C78891 * C6035) * C81 + (C7463 - C7464) * C94 +
            (C7465 - C7466) * C82) *
               C78890 * C8886 +
           ((C78891 * C6031 - C162 * C5933) * C92 +
            (C78891 * C6037 - C162 * C5944) * C81 +
            (C78891 * C6032 - C162 * C5934) * C94 +
            (C78891 * C6038 - C162 * C5946) * C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C78891 * C163 - C162 * C96) * C92 +
           (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
           (C178 - C179) * C82) *
              C78890 * C10188 +
          ((C162 * C1626 - C78891 * C1731) * C92 +
           (C162 * C1636 - C78891 * C1739) * C81 + (C1748 - C1749) * C94 +
           (C1750 - C1751) * C82) *
              C78890 * C10189 +
          ((C78891 * C1733 - C162 * C1627) * C92 +
           (C78891 * C1741 - C162 * C1638) * C81 + (C1752 - C1753) * C94 +
           (C1754 - C1755) * C82) *
              C78890 * C10190 +
          ((C162 * C10194 - C78891 * C10251) * C92 +
           (C162 * C10200 - C78891 * C10255) * C81 +
           (C162 * C10193 - C78891 * C10252) * C94 +
           (C162 * C10198 - C78891 * C10256) * C82) *
              C78890 * C10191 +
          ((C78891 * C10253 - C162 * C10195) * C92 +
           (C78891 * C10257 - C162 * C10202) * C81 +
           (C78891 * C10254 - C162 * C10196) * C94 +
           (C78891 * C10258 - C162 * C10204) * C82) *
              C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C78890 * C234 - C233 * C96) * C92 +
               (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
               (C249 - C250) * C82) *
                  C78891 * C78610 * C78592 * C87 +
              ((C248 - C247) * C92 + (C250 - C249) * C81 + (C251 - C252) * C94 +
               (C253 - C254) * C82) *
                  C78891 * C78610 * C78592 * C88 +
              ((C252 - C251) * C92 + (C254 - C253) * C81 + (C255 - C256) * C94 +
               (C257 - C258) * C82) *
                  C78891 * C78610 * C78592 * C89 +
              ((C256 - C255) * C92 + (C258 - C257) * C81 + (C259 - C260) * C94 +
               (C261 - C262) * C82) *
                  C78891 * C78610 * C78592 * C90 +
              ((C260 - C259) * C92 + (C262 - C261) * C81 +
               (C78890 * C239 - C233 * C101) * C94 +
               (C78890 * C245 - C233 * C113) * C82) *
                  C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C78890 * C234 - C233 * C96) * C92 +
                (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                (C249 - C250) * C82) *
                   C78891 * C78610 * C78883 +
               ((C233 * C721 - C78890 * C932) * C92 +
                (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                (C951 - C952) * C82) *
                   C78891 * C78610 * C78868 +
               ((C78890 * C934 - C233 * C722) * C92 +
                (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                (C955 - C956) * C82) *
                   C78891 * C78610 * C78842) *
                  C717 +
              (((C248 - C247) * C92 + (C250 - C249) * C81 +
                (C251 - C252) * C94 + (C253 - C254) * C82) *
                   C78891 * C78610 * C78883 +
               ((C950 - C949) * C92 + (C952 - C951) * C81 +
                (C957 - C958) * C94 + (C959 - C960) * C82) *
                   C78891 * C78610 * C78868 +
               ((C954 - C953) * C92 + (C956 - C955) * C81 +
                (C961 - C962) * C94 + (C963 - C964) * C82) *
                   C78891 * C78610 * C78842) *
                  C718 +
              (((C252 - C251) * C92 + (C254 - C253) * C81 +
                (C255 - C256) * C94 + (C257 - C258) * C82) *
                   C78891 * C78610 * C78883 +
               ((C958 - C957) * C92 + (C960 - C959) * C81 +
                (C233 * C726 - C78890 * C938) * C94 +
                (C233 * C741 - C78890 * C946) * C82) *
                   C78891 * C78610 * C78868 +
               ((C962 - C961) * C92 + (C964 - C963) * C81 +
                (C78890 * C939 - C233 * C727) * C94 +
                (C78890 * C947 - C233 * C743) * C82) *
                   C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C78890 * C234 - C233 * C96) * C92 +
                                (C78890 * C240 - C233 * C103) * C81 +
                                (C247 - C248) * C94 + (C249 - C250) * C82) *
                                   C78891 * C78884 +
                               ((C233 * C1626 - C78890 * C1837) * C92 +
                                (C233 * C1636 - C78890 * C1845) * C81 +
                                (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                                   C78891 * C78870 +
                               ((C78890 * C1839 - C233 * C1627) * C92 +
                                (C78890 * C1847 - C233 * C1638) * C81 +
                                (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C717 +
                              (((C248 - C247) * C92 + (C250 - C249) * C81 +
                                (C251 - C252) * C94 + (C253 - C254) * C82) *
                                   C78891 * C78884 +
                               ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                                (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                                   C78891 * C78870 +
                               ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                                (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C718 +
                              (((C252 - C251) * C92 + (C254 - C253) * C81 +
                                (C255 - C256) * C94 + (C257 - C258) * C82) *
                                   C78891 * C78884 +
                               ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                                (C233 * C1631 - C78890 * C1843) * C94 +
                                (C233 * C1646 - C78890 * C1851) * C82) *
                                   C78891 * C78870 +
                               ((C1867 - C1866) * C92 + (C1869 - C1868) * C81 +
                                (C78890 * C1844 - C233 * C1632) * C94 +
                                (C78890 * C1852 - C233 * C1648) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C92 +
            (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
            (C249 - C250) * C82) *
               C78891 * C78610 * C4809 +
           ((C233 * C721 - C78890 * C932) * C92 +
            (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
            (C951 - C952) * C82) *
               C78891 * C78610 * C4810 +
           ((C78890 * C934 - C233 * C722) * C92 +
            (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
            (C955 - C956) * C82) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C248 - C247) * C92 + (C250 - C249) * C81 + (C251 - C252) * C94 +
            (C253 - C254) * C82) *
               C78891 * C78610 * C4809 +
           ((C950 - C949) * C92 + (C952 - C951) * C81 + (C957 - C958) * C94 +
            (C959 - C960) * C82) *
               C78891 * C78610 * C4810 +
           ((C954 - C953) * C92 + (C956 - C955) * C81 + (C961 - C962) * C94 +
            (C963 - C964) * C82) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C252 - C251) * C92 + (C254 - C253) * C81 + (C255 - C256) * C94 +
            (C257 - C258) * C82) *
               C78891 * C78610 * C4809 +
           ((C958 - C957) * C92 + (C960 - C959) * C81 + (C2670 - C2671) * C94 +
            (C2672 - C2673) * C82) *
               C78891 * C78610 * C4810 +
           ((C962 - C961) * C92 + (C964 - C963) * C81 +
            (C78890 * C939 - C233 * C727) * C94 +
            (C78890 * C947 - C233 * C743) * C82) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C78890 * C234 - C233 * C96) * C92 +
           (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
           (C249 - C250) * C82) *
              C78891 * C78610 * C5449 +
          ((C233 * C721 - C78890 * C932) * C92 +
           (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
           (C951 - C952) * C82) *
              C78891 * C78610 * C5450 +
          ((C78890 * C934 - C233 * C722) * C92 +
           (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
           (C955 - C956) * C82) *
              C78891 * C78610 * C5451 +
          ((C233 * C5456 - C78890 * C5563) * C92 +
           (C233 * C5462 - C78890 * C5567) * C81 +
           (C233 * C5455 - C78890 * C5564) * C94 +
           (C233 * C5460 - C78890 * C5568) * C82) *
              C78891 * C78610 * C5452 +
          ((C78890 * C5565 - C233 * C5457) * C92 +
           (C78890 * C5569 - C233 * C5464) * C81 +
           (C78890 * C5566 - C233 * C5458) * C94 +
           (C78890 * C5570 - C233 * C5466) * C82) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C92 +
            (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
            (C249 - C250) * C82) *
               C78891 * C78884 +
           ((C233 * C1626 - C78890 * C1837) * C92 +
            (C233 * C1636 - C78890 * C1845) * C81 + (C1854 - C1855) * C94 +
            (C1856 - C1857) * C82) *
               C78891 * C78870 +
           ((C78890 * C1839 - C233 * C1627) * C92 +
            (C78890 * C1847 - C233 * C1638) * C81 + (C1858 - C1859) * C94 +
            (C1860 - C1861) * C82) *
               C78891 * C78845) *
              C4809 +
          (((C233 * C721 - C78890 * C932) * C92 +
            (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
            (C951 - C952) * C82) *
               C78891 * C78884 +
           ((C78890 * C4061 - C233 * C3833) * C92 +
            (C78890 * C4065 - C233 * C3838) * C81 + (C4070 - C4071) * C94 +
            (C4072 - C4073) * C82) *
               C78891 * C78870 +
           ((C233 * C5930 - C78890 * C6113) * C92 +
            (C233 * C5938 - C78890 * C6119) * C81 +
            (C233 * C5929 - C78890 * C6114) * C94 +
            (C233 * C5936 - C78890 * C6120) * C82) *
               C78891 * C78845) *
              C4810 +
          (((C78890 * C934 - C233 * C722) * C92 +
            (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
            (C955 - C956) * C82) *
               C78891 * C78884 +
           ((C233 * C5932 - C78890 * C6115) * C92 +
            (C233 * C5942 - C78890 * C6121) * C81 +
            (C233 * C5931 - C78890 * C6116) * C94 +
            (C233 * C5940 - C78890 * C6122) * C82) *
               C78891 * C78870 +
           ((C78890 * C6117 - C233 * C5933) * C92 +
            (C78890 * C6123 - C233 * C5944) * C81 +
            (C78890 * C6118 - C233 * C5934) * C94 +
            (C78890 * C6124 - C233 * C5946) * C82) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C78890 * C234 - C233 * C96) * C92 +
                                (C78890 * C240 - C233 * C103) * C81 +
                                (C247 - C248) * C94 + (C249 - C250) * C82) *
                                   C78891 * C8885 +
                               ((C233 * C1626 - C78890 * C1837) * C92 +
                                (C233 * C1636 - C78890 * C1845) * C81 +
                                (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                                   C78891 * C8886 +
                               ((C78890 * C1839 - C233 * C1627) * C92 +
                                (C78890 * C1847 - C233 * C1638) * C81 +
                                (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C78880 +
                              (((C248 - C247) * C92 + (C250 - C249) * C81 +
                                (C251 - C252) * C94 + (C253 - C254) * C82) *
                                   C78891 * C8885 +
                               ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                                (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                                   C78891 * C8886 +
                               ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                                (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C78864 +
                              (((C252 - C251) * C92 + (C254 - C253) * C81 +
                                (C255 - C256) * C94 + (C257 - C258) * C82) *
                                   C78891 * C8885 +
                               ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                                (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                                   C78891 * C8886 +
                               ((C1867 - C1866) * C92 + (C1869 - C1868) * C81 +
                                (C78890 * C1844 - C233 * C1632) * C94 +
                                (C78890 * C1852 - C233 * C1648) * C82) *
                                   C78891 * C78845) *
                                  C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C92 +
            (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
            (C249 - C250) * C82) *
               C78891 * C8885 +
           ((C233 * C1626 - C78890 * C1837) * C92 +
            (C233 * C1636 - C78890 * C1845) * C81 + (C1854 - C1855) * C94 +
            (C1856 - C1857) * C82) *
               C78891 * C8886 +
           ((C78890 * C1839 - C233 * C1627) * C92 +
            (C78890 * C1847 - C233 * C1638) * C81 + (C1858 - C1859) * C94 +
            (C1860 - C1861) * C82) *
               C78891 * C78845) *
              C78883 +
          (((C233 * C721 - C78890 * C932) * C92 +
            (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
            (C951 - C952) * C82) *
               C78891 * C8885 +
           ((C78890 * C4061 - C233 * C3833) * C92 +
            (C78890 * C4065 - C233 * C3838) * C81 + (C4070 - C4071) * C94 +
            (C4072 - C4073) * C82) *
               C78891 * C8886 +
           ((C233 * C5930 - C78890 * C6113) * C92 +
            (C233 * C5938 - C78890 * C6119) * C81 +
            (C233 * C5929 - C78890 * C6114) * C94 +
            (C233 * C5936 - C78890 * C6120) * C82) *
               C78891 * C78845) *
              C78868 +
          (((C78890 * C934 - C233 * C722) * C92 +
            (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
            (C955 - C956) * C82) *
               C78891 * C8885 +
           ((C233 * C5932 - C78890 * C6115) * C92 +
            (C233 * C5942 - C78890 * C6121) * C81 + (C7567 - C7568) * C94 +
            (C7569 - C7570) * C82) *
               C78891 * C8886 +
           ((C78890 * C6117 - C233 * C5933) * C92 +
            (C78890 * C6123 - C233 * C5944) * C81 +
            (C78890 * C6118 - C233 * C5934) * C94 +
            (C78890 * C6124 - C233 * C5946) * C82) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C78890 * C234 - C233 * C96) * C92 +
           (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
           (C249 - C250) * C82) *
              C78891 * C10188 +
          ((C233 * C1626 - C78890 * C1837) * C92 +
           (C233 * C1636 - C78890 * C1845) * C81 + (C1854 - C1855) * C94 +
           (C1856 - C1857) * C82) *
              C78891 * C10189 +
          ((C78890 * C1839 - C233 * C1627) * C92 +
           (C78890 * C1847 - C233 * C1638) * C81 + (C1858 - C1859) * C94 +
           (C1860 - C1861) * C82) *
              C78891 * C10190 +
          ((C233 * C10194 - C78890 * C10301) * C92 +
           (C233 * C10200 - C78890 * C10305) * C81 +
           (C233 * C10193 - C78890 * C10302) * C94 +
           (C233 * C10198 - C78890 * C10306) * C82) *
              C78891 * C10191 +
          ((C78890 * C10303 - C233 * C10195) * C92 +
           (C78890 * C10307 - C233 * C10202) * C81 +
           (C78890 * C10304 - C233 * C10196) * C94 +
           (C78890 * C10308 - C233 * C10204) * C82) *
              C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
               (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                  C78890 * C78610 * C78592 * C87 +
              ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
               (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                  C78890 * C78610 * C78592 * C88 +
              ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
               (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                  C78890 * C78610 * C78592 * C89 +
              ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
               (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
                  C78890 * C78610 * C78592 * C90 +
              ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C162 +
               (C81 * C314 - C92 * C308 + C82 * C315 - C94 * C309) * C78891) *
                  C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
                (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                   C78890 * C78610 * C78883 +
               ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
                (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) *
                    C78891) *
                   C78890 * C78610 * C78868 +
               ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
                (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) *
                    C78891) *
                   C78890 * C78610 * C78842) *
                  C717 +
              (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
                (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                   C78890 * C78610 * C78883 +
               ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
                (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) *
                    C78891) *
                   C78890 * C78610 * C78868 +
               ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
                (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) *
                    C78891) *
                   C78890 * C78610 * C78842) *
                  C718 +
              (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
                (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                   C78890 * C78610 * C78883 +
               ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
                (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) *
                    C78891) *
                   C78890 * C78610 * C78868 +
               ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
                (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) *
                    C78891) *
                   C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78592 * C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78884 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78870 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C78845) *
              C78592 * C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78884 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78870 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C162 +
            (C81 * C1956 - C92 * C1948 + C82 * C1958 - C94 * C1950) * C78891) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
           (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
              C78890 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
           (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
              C78890 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
           (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
              C78890 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C162 +
           (C81 * C5619 - C92 * C5615 + C82 * C5620 - C94 * C5616) * C78891) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C4809 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78884 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78870 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C78845) *
              C4810 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78884 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78870 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C162 +
            (C81 * C6209 - C92 * C6203 + C82 * C6210 - C94 * C6204) * C78891) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78592 * C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C8885 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C8886 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C78845) *
              C78592 * C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C8885 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C8886 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C162 +
            (C81 * C1956 - C92 * C1948 + C82 * C1958 - C94 * C1950) * C78891) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78883 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C8885 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C8886 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C78845) *
              C78868 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C8885 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C8886 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C162 +
            (C81 * C6209 - C92 * C6203 + C82 * C6210 - C94 * C6204) * C78891) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C10188 +
          ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
           (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
              C78890 * C10189 +
          ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
           (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
              C78890 * C10190 +
          ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C162 +
           (C92 * C10351 - C81 * C10355 + C94 * C10352 - C82 * C10356) *
               C78891) *
              C78890 * C10191 +
          ((C81 * C10201 - C92 * C10195 + C82 * C10203 - C94 * C10196) * C162 +
           (C81 * C10357 - C92 * C10353 + C82 * C10358 - C94 * C10354) *
               C78891) *
              C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
               C390 * C82) *
                  C78890 * C78610 * C78592 * C87 -
              (C391 * C82 + C390 * C81) * C78890 * C78610 * C78592 * C88 +
              (C391 * C81 + C392 * C82) * C78890 * C78610 * C78592 * C89 -
              (C393 * C82 + C392 * C81) * C78890 * C78610 * C78592 * C90 +
              (C393 * C81 +
               (C162 * C168 - C358 * C101 - C162 * C309 + C78891 * C364) *
                   C82) *
                  C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
                C390 * C82) *
                   C78890 * C78610 * C78883 -
               (C1161 * C82 +
                (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                    C81) *
                   C78890 * C78610 * C78868 +
               ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                    C81 +
                C1162 * C82) *
                   C78890 * C78610 * C78842) *
                  C717 +
              ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78868 -
               (C391 * C82 + C390 * C81) * C78890 * C78610 * C78883 -
               (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
                  C718 +
              ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78883 -
               ((C162 * C832 - C358 * C726 - C162 * C1044 + C78891 * C1134) *
                    C82 +
                C1163 * C81) *
                   C78890 * C78610 * C78868 +
               (C1164 * C81 +
                (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) *
                    C82) *
                   C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78884 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78870 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78592 * C717 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78870 -
           (C391 * C82 + C390 * C81) * C78890 * C78884 -
           (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
              C78592 * C718 +
          ((C391 * C81 + C392 * C82) * C78890 * C78884 -
           ((C162 * C1737 - C358 * C1631 - C162 * C1949 + C78891 * C2039) *
                C82 +
            C2068 * C81) *
               C78890 * C78870 +
           (C2069 * C81 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C82) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C4809 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C78880 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C4810 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C4809 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C4809 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C4810 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C5449 -
          (C1161 * C82 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
              C78890 * C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
           C1162 * C82) *
              C78890 * C78610 * C5451 -
          ((C162 * C5514 - C358 * C5455 - C162 * C5614 + C78891 * C5663) * C82 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C81) *
              C78890 * C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) * C81 +
           (C162 * C5516 - C358 * C5458 - C162 * C5616 + C78891 * C5666) *
               C82) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78884 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78870 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C4809 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78870 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78884 -
           ((C162 * C6028 - C358 * C5929 - C162 * C6200 + C78891 * C6285) *
                C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C78845) *
              C4810 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78884 -
           ((C162 * C6030 - C358 * C5931 - C162 * C6202 + C78891 * C6287) *
                C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78870 +
           ((C162 * C6031 - C358 * C5933 - C162 * C6203 + C78891 * C6289) *
                C81 +
            (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C8885 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C8886 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78592 * C78880 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C8886 -
           (C391 * C82 + C390 * C81) * C78890 * C8885 -
           (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
              C78592 * C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C8885 -
           (C3454 * C82 + C2068 * C81) * C78890 * C8886 +
           (C2069 * C81 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C82) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C8885 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C8886 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78883 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C8886 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C8885 -
           ((C162 * C6028 - C358 * C5929 - C162 * C6200 + C78891 * C6285) *
                C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C78845) *
              C78868 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C8885 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C8886 +
           ((C162 * C6031 - C358 * C5933 - C162 * C6203 + C78891 * C6289) *
                C81 +
            (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C10188 -
          (C2066 * C82 +
           (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
               C81) *
              C78890 * C10189 +
          ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) * C81 +
           C2067 * C82) *
              C78890 * C10190 -
          ((C162 * C10252 - C358 * C10193 - C162 * C10352 + C78891 * C10401) *
               C82 +
           (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
               C81) *
              C78890 * C10191 +
          ((C162 * C10253 - C358 * C10195 - C162 * C10353 + C78891 * C10403) *
               C81 +
           (C162 * C10254 - C358 * C10196 - C162 * C10354 + C78891 * C10404) *
               C82) *
              C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78890 * C234 - C233 * C96) * C162 +
                (C78890 * C435 - C233 * C304) * C78891) *
                   C81 +
               ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                  C78610 * C78592 * C87 +
              (((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
               ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                  C78610 * C78592 * C88 +
              (((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
               ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                  C78610 * C78592 * C89 +
              (((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
               ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
                  C78610 * C78592 * C90 +
              (((C260 - C259) * C162 + (C449 - C448) * C78891) * C81 +
               ((C78890 * C239 - C233 * C101) * C162 +
                (C78890 * C440 - C233 * C309) * C78891) *
                   C82) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78890 * C234 - C233 * C96) * C162 +
                 (C78890 * C435 - C233 * C304) * C78891) *
                    C81 +
                ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                   C78610 * C78883 +
               (((C233 * C721 - C78890 * C932) * C162 +
                 (C233 * C1038 - C78890 * C1238) * C78891) *
                    C81 +
                ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                   C78610 * C78868 +
               (((C78890 * C934 - C233 * C722) * C162 +
                 (C78890 * C1240 - C233 * C1040) * C78891) *
                    C81 +
                ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                   C78610 * C78842) *
                  C717 +
              ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
                ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                   C78610 * C78883 +
               (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
                ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                   C78610 * C78868 +
               (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
                ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                   C78610 * C78842) *
                  C718 +
              ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
                ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                   C78610 * C78883 +
               (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
                ((C233 * C726 - C78890 * C938) * C162 +
                 (C233 * C1044 - C78890 * C1244) * C78891) *
                    C82) *
                   C78610 * C78868 +
               (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
                ((C78890 * C939 - C233 * C727) * C162 +
                 (C78890 * C1245 - C233 * C1045) * C78891) *
                    C82) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78592 * C717 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78884 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78870 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C78845) *
              C78592 * C718 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78884 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C233 * C1631 - C78890 * C1843) * C162 +
             (C233 * C1949 - C78890 * C2149) * C78891) *
                C82) *
               C78870 +
           (((C1867 - C1866) * C162 + (C2159 - C2158) * C78891) * C81 +
            ((C78890 * C1844 - C233 * C1632) * C162 +
             (C78890 * C2150 - C233 * C1950) * C78891) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C4809 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C4810 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C4809 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C4810 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C4809 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C4810 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C5449 +
          (((C233 * C721 - C78890 * C932) * C162 +
            (C233 * C1038 - C78890 * C1238) * C78891) *
               C81 +
           ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
              C78610 * C5450 +
          (((C78890 * C934 - C233 * C722) * C162 +
            (C78890 * C1240 - C233 * C1040) * C78891) *
               C81 +
           ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
              C78610 * C5451 +
          (((C233 * C5456 - C78890 * C5563) * C162 +
            (C233 * C5613 - C78890 * C5709) * C78891) *
               C81 +
           ((C233 * C5455 - C78890 * C5564) * C162 +
            (C233 * C5614 - C78890 * C5710) * C78891) *
               C82) *
              C78610 * C5452 +
          (((C78890 * C5565 - C233 * C5457) * C162 +
            (C78890 * C5711 - C233 * C5615) * C78891) *
               C81 +
           ((C78890 * C5566 - C233 * C5458) * C162 +
            (C78890 * C5712 - C233 * C5616) * C78891) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C4809 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78884 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78870 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C233 * C5929 - C78890 * C6114) * C162 +
             (C233 * C6200 - C78890 * C6366) * C78891) *
                C82) *
               C78845) *
              C4810 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78884 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C233 * C5931 - C78890 * C6116) * C162 +
             (C233 * C6202 - C78890 * C6368) * C78891) *
                C82) *
               C78870 +
           (((C78890 * C6117 - C233 * C5933) * C162 +
             (C78890 * C6369 - C233 * C6203) * C78891) *
                C81 +
            ((C78890 * C6118 - C233 * C5934) * C162 +
             (C78890 * C6370 - C233 * C6204) * C78891) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78592 * C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C8885 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C8886 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C78845) *
              C78592 * C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C8885 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C8886 +
           (((C1867 - C1866) * C162 + (C2159 - C2158) * C78891) * C81 +
            ((C78890 * C1844 - C233 * C1632) * C162 +
             (C78890 * C2150 - C233 * C1950) * C78891) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78883 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C8885 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C8886 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C233 * C5929 - C78890 * C6114) * C162 +
             (C233 * C6200 - C78890 * C6366) * C78891) *
                C82) *
               C78845) *
              C78868 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C8885 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C8886 +
           (((C78890 * C6117 - C233 * C5933) * C162 +
             (C78890 * C6369 - C233 * C6203) * C78891) *
                C81 +
            ((C78890 * C6118 - C233 * C5934) * C162 +
             (C78890 * C6370 - C233 * C6204) * C78891) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C10188 +
          (((C233 * C1626 - C78890 * C1837) * C162 +
            (C233 * C1943 - C78890 * C2143) * C78891) *
               C81 +
           ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
              C10189 +
          (((C78890 * C1839 - C233 * C1627) * C162 +
            (C78890 * C2145 - C233 * C1945) * C78891) *
               C81 +
           ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
              C10190 +
          (((C233 * C10194 - C78890 * C10301) * C162 +
            (C233 * C10351 - C78890 * C10447) * C78891) *
               C81 +
           ((C233 * C10193 - C78890 * C10302) * C162 +
            (C233 * C10352 - C78890 * C10448) * C78891) *
               C82) *
              C10191 +
          (((C78890 * C10303 - C233 * C10195) * C162 +
            (C78890 * C10449 - C233 * C10353) * C78891) *
               C81 +
           ((C78890 * C10304 - C233 * C10196) * C162 +
            (C78890 * C10450 - C233 * C10354) * C78891) *
               C82) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
               (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                  C78891 * C78610 * C78592 * C87 +
              ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
               (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                  C78891 * C78610 * C78592 * C88 +
              ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
               (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                  C78891 * C78610 * C78592 * C89 +
              ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
               (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
                  C78891 * C78610 * C78592 * C90 +
              ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C233 +
               (C81 * C501 - C92 * C495 + C82 * C502 - C94 * C496) * C78890) *
                  C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
                (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                   C78891 * C78610 * C78883 +
               ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
                (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) *
                    C78890) *
                   C78891 * C78610 * C78868 +
               ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
                (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) *
                    C78890) *
                   C78891 * C78610 * C78842) *
                  C717 +
              (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
                (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                   C78891 * C78610 * C78883 +
               ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
                (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) *
                    C78890) *
                   C78891 * C78610 * C78868 +
               ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
                (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) *
                    C78890) *
                   C78891 * C78610 * C78842) *
                  C718 +
              (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
                (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                   C78891 * C78610 * C78883 +
               ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
                (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) *
                    C78890) *
                   C78891 * C78610 * C78868 +
               ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
                (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) *
                    C78890) *
                   C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78592 * C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78884 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78870 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78884 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78870 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C233 +
            (C81 * C2246 - C92 * C2238 + C82 * C2248 - C94 * C2240) * C78890) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
           (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
              C78891 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
           (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
              C78891 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
           (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
              C78891 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C233 +
           (C81 * C5761 - C92 * C5757 + C82 * C5762 - C94 * C5758) * C78890) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C4809 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78884 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78870 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C78845) *
              C4810 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78884 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78870 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C233 +
            (C81 * C6455 - C92 * C6449 + C82 * C6456 - C94 * C6450) * C78890) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78592 * C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C8885 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C8886 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C8885 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C8886 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C233 +
            (C81 * C2246 - C92 * C2238 + C82 * C2248 - C94 * C2240) * C78890) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78883 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C8885 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C8886 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C78845) *
              C78868 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C8885 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C8886 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C233 +
            (C81 * C6455 - C92 * C6449 + C82 * C6456 - C94 * C6450) * C78890) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C10188 +
          ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
           (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
              C78891 * C10189 +
          ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
           (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
              C78891 * C10190 +
          ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C233 +
           (C92 * C10493 - C81 * C10497 + C94 * C10494 - C82 * C10498) *
               C78890) *
              C78891 * C10191 +
          ((C81 * C10201 - C92 * C10195 + C82 * C10203 - C94 * C10196) * C233 +
           (C81 * C10499 - C92 * C10495 + C82 * C10500 - C94 * C10496) *
               C78890) *
              C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78891 * C163 - C162 * C96) * C233 +
                (C78891 * C545 - C162 * C491) * C78890) *
                   C81 +
               ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                  C78610 * C78592 * C87 +
              (((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
               ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                  C78610 * C78592 * C88 +
              (((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
               ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                  C78610 * C78592 * C89 +
              (((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
               ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
                  C78610 * C78592 * C90 +
              (((C189 - C188) * C233 + (C559 - C558) * C78890) * C81 +
               ((C78891 * C168 - C162 * C101) * C233 +
                (C78891 * C550 - C162 * C496) * C78890) *
                   C82) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78891 * C163 - C162 * C96) * C233 +
                 (C78891 * C545 - C162 * C491) * C78890) *
                    C81 +
                ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                   C78610 * C78883 +
               (((C162 * C721 - C78891 * C826) * C233 +
                 (C162 * C1328 - C78891 * C1418) * C78890) *
                    C81 +
                ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                   C78610 * C78868 +
               (((C78891 * C828 - C162 * C722) * C233 +
                 (C78891 * C1420 - C162 * C1330) * C78890) *
                    C81 +
                ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                   C78610 * C78842) *
                  C717 +
              ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
                ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                   C78610 * C78883 +
               (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
                ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                   C78610 * C78868 +
               (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
                ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                   C78610 * C78842) *
                  C718 +
              ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
                ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                   C78610 * C78883 +
               (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
                ((C162 * C726 - C78891 * C832) * C233 +
                 (C162 * C1334 - C78891 * C1424) * C78890) *
                    C82) *
                   C78610 * C78868 +
               (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
                ((C78891 * C833 - C162 * C727) * C233 +
                 (C78891 * C1425 - C162 * C1335) * C78890) *
                    C82) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78884 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78870 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78592 * C717 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78884 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78870 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C78845) *
              C78592 * C718 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78884 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C162 * C1631 - C78891 * C1737) * C233 +
             (C162 * C2239 - C78891 * C2329) * C78890) *
                C82) *
               C78870 +
           (((C1761 - C1760) * C233 + (C2339 - C2338) * C78890) * C81 +
            ((C78891 * C1738 - C162 * C1632) * C233 +
             (C78891 * C2330 - C162 * C2240) * C78890) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C4809 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C4810 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C4809 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C4810 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C233 +
            (C162 * C1328 - C78891 * C1418) * C78890) *
               C81 +
           ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C233 +
            (C78891 * C1420 - C162 * C1330) * C78890) *
               C81 +
           ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C233 +
            (C162 * C5755 - C78891 * C5805) * C78890) *
               C81 +
           ((C162 * C5455 - C78891 * C5514) * C233 +
            (C162 * C5756 - C78891 * C5806) * C78890) *
               C82) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C233 +
            (C78891 * C5807 - C162 * C5757) * C78890) *
               C81 +
           ((C78891 * C5516 - C162 * C5458) * C233 +
            (C78891 * C5808 - C162 * C5758) * C78890) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78884 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78870 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C4809 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78884 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78870 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C162 * C5929 - C78891 * C6028) * C233 +
             (C162 * C6446 - C78891 * C6532) * C78890) *
                C82) *
               C78845) *
              C4810 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78884 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C162 * C5931 - C78891 * C6030) * C233 +
             (C162 * C6448 - C78891 * C6534) * C78890) *
                C82) *
               C78870 +
           (((C78891 * C6031 - C162 * C5933) * C233 +
             (C78891 * C6535 - C162 * C6449) * C78890) *
                C81 +
            ((C78891 * C6032 - C162 * C5934) * C233 +
             (C78891 * C6536 - C162 * C6450) * C78890) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C8885 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C8886 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78592 * C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C8885 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C8886 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C78845) *
              C78592 * C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C8885 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C8886 +
           (((C1761 - C1760) * C233 + (C2339 - C2338) * C78890) * C81 +
            ((C78891 * C1738 - C162 * C1632) * C233 +
             (C78891 * C2330 - C162 * C2240) * C78890) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C8885 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C8886 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78883 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C8885 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C8886 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C162 * C5929 - C78891 * C6028) * C233 +
             (C162 * C6446 - C78891 * C6532) * C78890) *
                C82) *
               C78845) *
              C78868 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C8885 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C8886 +
           (((C78891 * C6031 - C162 * C5933) * C233 +
             (C78891 * C6535 - C162 * C6449) * C78890) *
                C81 +
            ((C78891 * C6032 - C162 * C5934) * C233 +
             (C78891 * C6536 - C162 * C6450) * C78890) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C10188 +
          (((C162 * C1626 - C78891 * C1731) * C233 +
            (C162 * C2233 - C78891 * C2323) * C78890) *
               C81 +
           ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
              C10189 +
          (((C78891 * C1733 - C162 * C1627) * C233 +
            (C78891 * C2325 - C162 * C2235) * C78890) *
               C81 +
           ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
              C10190 +
          (((C162 * C10194 - C78891 * C10251) * C233 +
            (C162 * C10493 - C78891 * C10543) * C78890) *
               C81 +
           ((C162 * C10193 - C78891 * C10252) * C233 +
            (C162 * C10494 - C78891 * C10544) * C78890) *
               C82) *
              C10191 +
          (((C78891 * C10253 - C162 * C10195) * C233 +
            (C78891 * C10545 - C162 * C10495) * C78890) *
               C81 +
           ((C78891 * C10254 - C162 * C10196) * C233 +
            (C78891 * C10546 - C162 * C10496) * C78890) *
               C82) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) *
                   C78891 * C81 +
               C637 * C82) *
                  C78610 * C78592 * C87 -
              (C638 * C82 + C637 * C81) * C78610 * C78592 * C88 +
              (C638 * C81 + C639 * C82) * C78610 * C78592 * C89 -
              (C640 * C82 + C639 * C81) * C78610 * C78592 * C90 +
              (C640 * C81 +
               (C233 * C239 - C601 * C101 - C233 * C496 + C78890 * C607) *
                   C78891 * C82) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) *
                    C78891 * C81 +
                C637 * C82) *
                   C78610 * C78883 -
               (C1545 * C82 +
                (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                    C78891 * C81) *
                   C78610 * C78868 +
               ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                    C78891 * C81 +
                C1546 * C82) *
                   C78610 * C78842) *
                  C717 +
              ((C1545 * C81 + C1547 * C82) * C78610 * C78868 -
               (C638 * C82 + C637 * C81) * C78610 * C78883 -
               (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
                  C718 +
              ((C638 * C81 + C639 * C82) * C78610 * C78883 -
               ((C233 * C938 - C601 * C726 - C233 * C1334 + C78890 * C1514) *
                    C78891 * C82 +
                C1547 * C81) *
                   C78610 * C78868 +
               (C1548 * C81 +
                (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                    C78891 * C82) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78884 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78592 * C717 +
          ((C2450 * C81 + C2452 * C82) * C78870 -
           (C638 * C82 + C637 * C81) * C78884 -
           (C2453 * C82 + C2451 * C81) * C78845) *
              C78592 * C718 +
          ((C638 * C81 + C639 * C82) * C78884 -
           ((C233 * C1843 - C601 * C1631 - C233 * C2239 + C78890 * C2419) *
                C78891 * C82 +
            C2452 * C81) *
               C78870 +
           (C2453 * C81 +
            (C233 * C1844 - C601 * C1632 - C233 * C2240 + C78890 * C2420) *
                C78891 * C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C4809 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C4810 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C78880 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C4810 -
           (C638 * C82 + C637 * C81) * C78610 * C4809 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C78864 +
          ((C638 * C81 + C639 * C82) * C78610 * C4809 -
           (C3096 * C82 + C1547 * C81) * C78610 * C4810 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C5449 -
          (C1545 * C82 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C78891 * C81) *
              C78610 * C5450 +
          ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
               C78891 * C81 +
           C1546 * C82) *
              C78610 * C5451 -
          ((C233 * C5564 - C601 * C5455 - C233 * C5756 + C78890 * C5851) *
               C78891 * C82 +
           (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
               C78891 * C81) *
              C78610 * C5452 +
          ((C233 * C5565 - C601 * C5457 - C233 * C5757 + C78890 * C5853) *
               C78891 * C81 +
           (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
               C78891 * C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78884 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C4809 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78870 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78884 -
           ((C233 * C6114 - C601 * C5929 - C233 * C6446 + C78890 * C6611) *
                C78891 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C78845) *
              C4810 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78884 -
           ((C233 * C6116 - C601 * C5931 - C233 * C6448 + C78890 * C6613) *
                C78891 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78870 +
           ((C233 * C6117 - C601 * C5933 - C233 * C6449 + C78890 * C6615) *
                C78891 * C81 +
            (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                C78891 * C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C8885 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78592 * C78880 +
          ((C2450 * C81 + C2452 * C82) * C8886 -
           (C638 * C82 + C637 * C81) * C8885 -
           (C2453 * C82 + C2451 * C81) * C78845) *
              C78592 * C78864 +
          ((C638 * C81 + C639 * C82) * C8885 -
           (C3735 * C82 + C2452 * C81) * C8886 +
           (C2453 * C81 +
            (C233 * C1844 - C601 * C1632 - C233 * C2240 + C78890 * C2420) *
                C78891 * C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C8885 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78883 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C8886 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C8885 -
           ((C233 * C6114 - C601 * C5929 - C233 * C6446 + C78890 * C6611) *
                C78891 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C78845) *
              C78868 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C8885 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C8886 +
           ((C233 * C6117 - C601 * C5933 - C233 * C6449 + C78890 * C6615) *
                C78891 * C81 +
            (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                C78891 * C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C10188 -
          (C2450 * C82 +
           (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
               C78891 * C81) *
              C10189 +
          ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
               C78891 * C81 +
           C2451 * C82) *
              C10190 -
          ((C233 * C10302 - C601 * C10193 - C233 * C10494 + C78890 * C10589) *
               C78891 * C82 +
           (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
               C78891 * C81) *
              C10191 +
          ((C233 * C10303 - C601 * C10195 - C233 * C10495 + C78890 * C10591) *
               C78891 * C81 +
           (C233 * C10304 - C601 * C10196 - C233 * C10496 + C78890 * C10592) *
               C78891 * C82) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C78813 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78697) *
               C4809 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78697 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C78813) *
               C4810 +
           ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
             C95 * C723 - C94 * C735 + C82 * C747) *
                C78890 * C78891 * C78813 -
            (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
             C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                C78890 * C78891 * C78697) *
               C78842) *
              C78798 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78697 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C78813) *
               C4809 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C78813 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78697) *
               C4810 +
           ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
             C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                C78890 * C78891 * C78697 -
            (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
             C93 * C723 - C92 * C735 + C81 * C747) *
                C78890 * C78891 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78813 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78697) *
              C78592 * C2521 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C78697 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78813) *
              C78592 * C2522 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C78813 -
           (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
            C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
               C78890 * C78891 * C78697) *
              C78592 * C2523 +
          ((C92 * C1645 - C93 * C1631 - C92 * C1646 + C81 * C1655 +
            C94 * C3165 - C95 * C3164 - C94 * C3166 + C82 * C3167) *
               C78890 * C78891 * C78697 -
           (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 + C92 * C108 -
            C93 * C99 - C92 * C109 + C81 * C117) *
               C78890 * C78891 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C11584 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C11585 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C11586 -
           (C94 * C10197 - C95 * C10193 - C94 * C10198 + C82 * C10205 +
            C92 * C10199 - C93 * C10194 - C92 * C10200 + C81 * C10206) *
               C78890 * C78891 * C78858) *
              C78592 * C78798 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C11585 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C11584 -
           (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
            C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
               C78890 * C78891 * C11586 +
           (C92 * C10197 - C93 * C10193 - C92 * C10198 + C81 * C10205 +
            C94 * C11589 - C95 * C11588 - C94 * C11590 + C82 * C11591) *
               C78890 * C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C78813 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C4809 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C78813 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C4810 +
                     (((C78891 * C828 - C162 * C722) * C92 +
                       (C78891 * C836 - C162 * C733) * C81 +
                       (C847 - C848) * C94 + (C849 - C850) * C82) *
                          C78890 * C78813 +
                      ((C162 * C5932 - C78891 * C6029) * C92 +
                       (C162 * C5942 - C78891 * C6035) * C81 +
                       (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78798 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C78813 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C4809 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C78813 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C4810 +
                     (((C848 - C847) * C92 + (C850 - C849) * C81 +
                       (C855 - C856) * C94 + (C857 - C858) * C82) *
                          C78890 * C78813 +
                      ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                       (C78891 * C7460 - C162 * C7358) * C94 +
                       (C78891 * C7461 - C162 * C7360) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78592 * C2521 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78813 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78592 * C2522 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78813 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C78592 * C2523 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C78813 +
                     ((C3238 - C3237) * C92 + (C3240 - C3239) * C81 +
                      (C78891 * C3234 - C162 * C3164) * C94 +
                      (C78891 * C3235 - C162 * C3166) * C82) *
                         C78890 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C11584 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C11585 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C11586 +
                     ((C162 * C10194 - C78891 * C10251) * C92 +
                      (C162 * C10200 - C78891 * C10255) * C81 +
                      (C11661 - C11662) * C94 + (C11663 - C11664) * C82) *
                         C78890 * C78858) *
                        C78592 * C78798 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C11584 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C11585 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C11586 +
                     ((C11662 - C11661) * C92 + (C11664 - C11663) * C81 +
                      (C78891 * C11658 - C162 * C11588) * C94 +
                      (C78891 * C11659 - C162 * C11590) * C82) *
                         C78890 * C78858) *
                        C78592 * C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[13] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C78813 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C4809 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C78813 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C4810 +
                     (((C78890 * C934 - C233 * C722) * C92 +
                       (C78890 * C942 - C233 * C733) * C81 +
                       (C953 - C954) * C94 + (C955 - C956) * C82) *
                          C78891 * C78813 +
                      ((C233 * C5932 - C78890 * C6115) * C92 +
                       (C233 * C5942 - C78890 * C6121) * C81 +
                       (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78798 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C78813 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C4809 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C78813 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C4810 +
                     (((C954 - C953) * C92 + (C956 - C955) * C81 +
                       (C961 - C962) * C94 + (C963 - C964) * C82) *
                          C78891 * C78813 +
                      ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                       (C78890 * C7564 - C233 * C7358) * C94 +
                       (C78890 * C7565 - C233 * C7360) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78592 * C2521 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78813 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78592 * C2522 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78813 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C78592 * C2523 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C78813 +
                     ((C3310 - C3309) * C92 + (C3312 - C3311) * C81 +
                      (C78890 * C3306 - C233 * C3164) * C94 +
                      (C78890 * C3307 - C233 * C3166) * C82) *
                         C78891 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C11584 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C11585 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C11586 +
                     ((C233 * C10194 - C78890 * C10301) * C92 +
                      (C233 * C10200 - C78890 * C10305) * C81 +
                      (C11733 - C11734) * C94 + (C11735 - C11736) * C82) *
                         C78891 * C78858) *
                        C78592 * C78798 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C11584 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C11585 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C11586 +
                     ((C11734 - C11733) * C92 + (C11736 - C11735) * C81 +
                      (C78890 * C11730 - C233 * C11588) * C94 +
                      (C78890 * C11731 - C233 * C11590) * C82) *
                         C78891 * C78858) *
                        C78592 * C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C4809 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C4810 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C4809 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C4810 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78813 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78813 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78813 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C162 +
            (C81 * C1957 - C92 * C1949 + C82 * C3379 - C94 * C3378) * C78891) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C11584 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C11585 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C11586 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C162 +
            (C92 * C10351 - C81 * C10355 + C94 * C10352 - C82 * C10356) *
                C78891) *
               C78890 * C78858) *
              C78592 * C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C11584 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C11585 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C11586 +
           ((C81 * C10197 - C92 * C10193 + C82 * C11589 - C94 * C11588) * C162 +
            (C81 * C10356 - C92 * C10352 + C82 * C11803 - C94 * C11802) *
                C78891) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C4809 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C4810 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C78813 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C4809 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C4810 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78813 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78592 * C2521 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
           (C391 * C82 + C390 * C81) * C78890 * C78813) *
              C78592 * C2522 +
          ((C391 * C81 + C392 * C82) * C78890 * C78813 -
           (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
              C78592 * C2523 +
          ((C3454 * C81 +
            (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
                C82) *
               C78890 * C78697 -
           (C393 * C82 + C392 * C81) * C78890 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C11584 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C11585 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C11586 -
           (C11878 * C82 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C81) *
               C78890 * C78858) *
              C78592 * C78798 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C11585 -
           (C391 * C82 + C390 * C81) * C78890 * C11584 -
           (C2069 * C82 + C2067 * C81) * C78890 * C11586 +
           (C11878 * C81 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C82) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C4809 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C4810 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C78813 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C78842) *
              C78798 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C4809 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C4810 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C78813 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78592 * C2521 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78813 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78697) *
              C78592 * C2522 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78813 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C78697) *
              C78592 * C2523 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78813 +
           (((C3310 - C3309) * C162 + (C3523 - C3522) * C78891) * C81 +
            ((C78890 * C3306 - C233 * C3164) * C162 +
             (C78890 * C3520 - C233 * C3378) * C78891) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C11584 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C11585 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C11586 +
           (((C233 * C10194 - C78890 * C10301) * C162 +
             (C233 * C10351 - C78890 * C10447) * C78891) *
                C81 +
            ((C11733 - C11734) * C162 + (C11946 - C11947) * C78891) * C82) *
               C78858) *
              C78592 * C78798 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C11584 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C11585 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C11586 +
           (((C11734 - C11733) * C162 + (C11947 - C11946) * C78891) * C81 +
            ((C78890 * C11730 - C233 * C11588) * C162 +
             (C78890 * C11944 - C233 * C11802) * C78891) *
                C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C4809 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C4810 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C4809 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C4810 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78813 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78813 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78813 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C233 +
            (C81 * C2247 - C92 * C2239 + C82 * C3590 - C94 * C3589) * C78890) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C11584 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C11585 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C11586 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C233 +
            (C92 * C10493 - C81 * C10497 + C94 * C10494 - C82 * C10498) *
                C78890) *
               C78891 * C78858) *
              C78592 * C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C11584 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C11585 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C11586 +
           ((C81 * C10197 - C92 * C10193 + C82 * C11589 - C94 * C11588) * C233 +
            (C81 * C10498 - C92 * C10494 + C82 * C12014 - C94 * C12013) *
                C78890) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C4809 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C4810 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C78813 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C78842) *
              C78798 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C4809 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C4810 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C78813 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78813 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78592 * C2521 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78813 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78697) *
              C78592 * C2522 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78813 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C78697) *
              C78592 * C2523 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78813 +
           (((C3238 - C3237) * C233 + (C3660 - C3659) * C78890) * C81 +
            ((C78891 * C3234 - C162 * C3164) * C233 +
             (C78891 * C3657 - C162 * C3589) * C78890) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C11584 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C11585 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C11586 +
           (((C162 * C10194 - C78891 * C10251) * C233 +
             (C162 * C10493 - C78891 * C10543) * C78890) *
                C81 +
            ((C11661 - C11662) * C233 + (C12083 - C12084) * C78890) * C82) *
               C78858) *
              C78592 * C78798 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C11584 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C11585 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C11586 +
           (((C11662 - C11661) * C233 + (C12084 - C12083) * C78890) * C81 +
            ((C78891 * C11658 - C162 * C11588) * C233 +
             (C78891 * C12081 - C162 * C12013) * C78890) *
                C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C4809 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C4810 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C78813 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C78842) *
              C78798 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C4809 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C4810 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78813 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78592 * C2521 +
          ((C2450 * C81 + C2452 * C82) * C78697 -
           (C638 * C82 + C637 * C81) * C78813) *
              C78592 * C2522 +
          ((C638 * C81 + C639 * C82) * C78813 -
           (C3735 * C82 + C2452 * C81) * C78697) *
              C78592 * C2523 +
          ((C3735 * C81 +
            (C233 * C3306 - C601 * C3164 - C233 * C3589 + C78890 * C3726) *
                C78891 * C82) *
               C78697 -
           (C640 * C82 + C639 * C81) * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C11584 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C11585 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C11586 -
           (C12159 * C82 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C78891 * C81) *
               C78858) *
              C78592 * C78798 +
          ((C2450 * C81 + C2452 * C82) * C11585 -
           (C638 * C82 + C637 * C81) * C11584 -
           (C2453 * C82 + C2451 * C81) * C11586 +
           (C12159 * C81 +
            (C233 * C11730 - C601 * C11588 - C233 * C12013 + C78890 * C12150) *
                C78891 * C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C717 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C78868 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C718 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C87 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C88 +
                    (C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                     C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C89 -
                    (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                     C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C90 +
                    (C92 * C110 - C93 * C100 - C92 * C111 + C81 * C118 +
                     C94 * C112 - C95 * C101 - C94 * C113 + C82 * C119) *
                        C78890 * C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78880 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C4810 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78864 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C5449 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C5450 +
                    (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78610 * C5451 -
                    (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                     C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                        C78890 * C78891 * C78610 * C5452 +
                    (C92 * C5463 - C93 * C5457 - C92 * C5464 + C81 * C5469 +
                     C94 * C5465 - C95 * C5458 - C94 * C5466 + C82 * C5470) *
                        C78890 * C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C8885 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C8886 +
                     (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                      C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                         C78890 * C78891 * C78845) *
                        C78592 * C78880 +
                    ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C8886 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C8885 -
                     (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
                      C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                         C78890 * C78891 * C78845) *
                        C78592 * C78864 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C8885 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C8886 +
                     (C92 * C1643 - C93 * C1630 - C92 * C1644 + C81 * C1654 +
                      C94 * C1647 - C95 * C1632 - C94 * C1648 + C82 * C1656) *
                         C78890 * C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C8885 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C8886 +
                     (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                      C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                         C78890 * C78891 * C78845) *
                        C78883 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C8886 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C8885 -
                     (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
                      C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                         C78890 * C78891 * C78845) *
                        C78868 +
                    ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C8885 -
                     (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                      C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                         C78890 * C78891 * C8886 +
                     (C92 * C5943 - C93 * C5933 - C92 * C5944 + C81 * C5951 +
                      C94 * C5945 - C95 * C5934 - C94 * C5946 + C82 * C5952) *
                         C78890 * C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C162 * C726 - C78891 * C832) * C94 +
                      (C162 * C741 - C78891 * C840) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C92 + (C187 - C186) * C81 +
                     (C188 - C189) * C94 + (C190 - C191) * C82) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C92 + (C191 - C190) * C81 +
                     (C78891 * C168 - C162 * C101) * C94 +
                     (C78891 * C174 - C162 * C113) * C82) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C162 * C5455 - C78891 * C5514) * C94 +
                     (C162 * C5460 - C78891 * C5518) * C82) *
                        C78890 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C92 +
                     (C78891 * C5519 - C162 * C5464) * C81 +
                     (C78891 * C5516 - C162 * C5458) * C94 +
                     (C78891 * C5520 - C162 * C5466) * C82) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C8885 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C8886 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78845) *
                        C78592 * C78880 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C8885 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C8886 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C78845) *
                        C78592 * C78864 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C8885 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C8886 +
                     ((C1761 - C1760) * C92 + (C1763 - C1762) * C81 +
                      (C78891 * C1738 - C162 * C1632) * C94 +
                      (C78891 * C1746 - C162 * C1648) * C82) *
                         C78890 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C8885 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C8886 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78845) *
                        C78883 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C8885 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C8886 +
                     ((C162 * C5930 - C78891 * C6027) * C92 +
                      (C162 * C5938 - C78891 * C6033) * C81 +
                      (C162 * C5929 - C78891 * C6028) * C94 +
                      (C162 * C5936 - C78891 * C6034) * C82) *
                         C78890 * C78845) *
                        C78868 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C8885 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                         C78890 * C8886 +
                     ((C78891 * C6031 - C162 * C5933) * C92 +
                      (C78891 * C6037 - C162 * C5944) * C81 +
                      (C78891 * C6032 - C162 * C5934) * C94 +
                      (C78891 * C6038 - C162 * C5946) * C82) *
                         C78890 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C233 * C726 - C78890 * C938) * C94 +
                      (C233 * C741 - C78890 * C946) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C92 + (C258 - C257) * C81 +
                     (C259 - C260) * C94 + (C261 - C262) * C82) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C92 + (C262 - C261) * C81 +
                     (C78890 * C239 - C233 * C101) * C94 +
                     (C78890 * C245 - C233 * C113) * C82) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C5449 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C5450 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C5451 +
                    ((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C233 * C5455 - C78890 * C5564) * C94 +
                     (C233 * C5460 - C78890 * C5568) * C82) *
                        C78891 * C78610 * C5452 +
                    ((C78890 * C5565 - C233 * C5457) * C92 +
                     (C78890 * C5569 - C233 * C5464) * C81 +
                     (C78890 * C5566 - C233 * C5458) * C94 +
                     (C78890 * C5570 - C233 * C5466) * C82) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C8885 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C8886 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78845) *
                        C78592 * C78880 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C8885 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C8886 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C78845) *
                        C78592 * C78864 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C8885 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C8886 +
                     ((C1867 - C1866) * C92 + (C1869 - C1868) * C81 +
                      (C78890 * C1844 - C233 * C1632) * C94 +
                      (C78890 * C1852 - C233 * C1648) * C82) *
                         C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C8885 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C8886 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78845) *
                        C78883 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C8885 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C8886 +
                     ((C233 * C5930 - C78890 * C6113) * C92 +
                      (C233 * C5938 - C78890 * C6119) * C81 +
                      (C233 * C5929 - C78890 * C6114) * C94 +
                      (C233 * C5936 - C78890 * C6120) * C82) *
                         C78891 * C78845) *
                        C78868 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C8885 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                         C78891 * C8886 +
                     ((C78890 * C6117 - C233 * C5933) * C92 +
                      (C78890 * C6123 - C233 * C5944) * C81 +
                      (C78890 * C6118 - C233 * C5934) * C94 +
                      (C78890 * C6124 - C233 * C5946) * C82) *
                         C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
           (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
              C78890 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
           (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
              C78890 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
           (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
              C78890 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C162 +
           (C81 * C314 - C92 * C308 + C82 * C315 - C94 * C309) * C78891) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
           (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
              C78890 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
           (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
              C78890 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
           (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
              C78890 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C162 +
           (C81 * C5619 - C92 * C5615 + C82 * C5620 - C94 * C5616) * C78891) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78592 * C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C8885 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C8886 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C78845) *
              C78592 * C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C8885 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C8886 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C162 +
            (C81 * C1956 - C92 * C1948 + C82 * C1958 - C94 * C1950) * C78891) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78883 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C8885 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C8886 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C78845) *
              C78868 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C8885 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C8886 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C162 +
            (C81 * C6209 - C92 * C6203 + C82 * C6210 - C94 * C6204) * C78891) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78883 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C717 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78868 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78883 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C718 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78883 -
           ((C162 * C832 - C358 * C726 - C162 * C1044 + C78891 * C1134) * C82 +
            C1163 * C81) *
               C78890 * C78610 * C78868 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C78592 * C87 -
          (C391 * C82 + C390 * C81) * C78890 * C78610 * C78592 * C88 +
          (C391 * C81 + C392 * C82) * C78890 * C78610 * C78592 * C89 -
          (C393 * C82 + C392 * C81) * C78890 * C78610 * C78592 * C90 +
          (C393 * C81 +
           (C162 * C168 - C358 * C101 - C162 * C309 + C78891 * C364) * C82) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C4809 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C78880 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C4810 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C4809 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C4809 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C4810 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C5449 -
          (C1161 * C82 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
              C78890 * C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
           C1162 * C82) *
              C78890 * C78610 * C5451 -
          ((C162 * C5514 - C358 * C5455 - C162 * C5614 + C78891 * C5663) * C82 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C81) *
              C78890 * C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) * C81 +
           (C162 * C5516 - C358 * C5458 - C162 * C5616 + C78891 * C5666) *
               C82) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C8885 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C8886 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78592 * C78880 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C8886 -
           (C391 * C82 + C390 * C81) * C78890 * C8885 -
           (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
              C78592 * C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C8885 -
           (C3454 * C82 + C2068 * C81) * C78890 * C8886 +
           (C2069 * C81 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C82) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C8885 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C8886 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78883 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C8886 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C8885 -
           ((C162 * C6028 - C358 * C5929 - C162 * C6200 + C78891 * C6285) *
                C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C78845) *
              C78868 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C8885 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C8886 +
           ((C162 * C6031 - C358 * C5933 - C162 * C6203 + C78891 * C6289) *
                C81 +
            (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78883 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78868 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78883 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78868 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78883 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C233 * C726 - C78890 * C938) * C162 +
             (C233 * C1044 - C78890 * C1244) * C78891) *
                C82) *
               C78610 * C78868 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
           ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
           ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
           ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C162 + (C449 - C448) * C78891) * C81 +
           ((C78890 * C239 - C233 * C101) * C162 +
            (C78890 * C440 - C233 * C309) * C78891) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C4809 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C4810 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C4809 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C4810 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C4809 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C4810 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C5449 +
          (((C233 * C721 - C78890 * C932) * C162 +
            (C233 * C1038 - C78890 * C1238) * C78891) *
               C81 +
           ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
              C78610 * C5450 +
          (((C78890 * C934 - C233 * C722) * C162 +
            (C78890 * C1240 - C233 * C1040) * C78891) *
               C81 +
           ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
              C78610 * C5451 +
          (((C233 * C5456 - C78890 * C5563) * C162 +
            (C233 * C5613 - C78890 * C5709) * C78891) *
               C81 +
           ((C233 * C5455 - C78890 * C5564) * C162 +
            (C233 * C5614 - C78890 * C5710) * C78891) *
               C82) *
              C78610 * C5452 +
          (((C78890 * C5565 - C233 * C5457) * C162 +
            (C78890 * C5711 - C233 * C5615) * C78891) *
               C81 +
           ((C78890 * C5566 - C233 * C5458) * C162 +
            (C78890 * C5712 - C233 * C5616) * C78891) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78592 * C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C8885 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C8886 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C78845) *
              C78592 * C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C8885 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C8886 +
           (((C1867 - C1866) * C162 + (C2159 - C2158) * C78891) * C81 +
            ((C78890 * C1844 - C233 * C1632) * C162 +
             (C78890 * C2150 - C233 * C1950) * C78891) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78883 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C8885 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C8886 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C233 * C5929 - C78890 * C6114) * C162 +
             (C233 * C6200 - C78890 * C6366) * C78891) *
                C82) *
               C78845) *
              C78868 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C8885 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C8886 +
           (((C78890 * C6117 - C233 * C5933) * C162 +
             (C78890 * C6369 - C233 * C6203) * C78891) *
                C81 +
            ((C78890 * C6118 - C233 * C5934) * C162 +
             (C78890 * C6370 - C233 * C6204) * C78891) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
           (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
              C78891 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
           (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
              C78891 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
           (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
              C78891 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C233 +
           (C81 * C501 - C92 * C495 + C82 * C502 - C94 * C496) * C78890) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
           (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
              C78891 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
           (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
              C78891 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
           (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
              C78891 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C233 +
           (C81 * C5761 - C92 * C5757 + C82 * C5762 - C94 * C5758) * C78890) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78592 * C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C8885 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C8886 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C8885 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C8886 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C233 +
            (C81 * C2246 - C92 * C2238 + C82 * C2248 - C94 * C2240) * C78890) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C8885 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C8886 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78883 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C8885 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C8886 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C78845) *
              C78868 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C8885 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C8886 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C233 +
            (C81 * C6455 - C92 * C6449 + C82 * C6456 - C94 * C6450) * C78890) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78883 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78868 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78883 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C162 * C726 - C78891 * C832) * C233 +
             (C162 * C1334 - C78891 * C1424) * C78890) *
                C82) *
               C78610 * C78868 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
           ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
           ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
           ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C233 + (C559 - C558) * C78890) * C81 +
           ((C78891 * C168 - C162 * C101) * C233 +
            (C78891 * C550 - C162 * C496) * C78890) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C4809 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C4810 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C4809 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C4810 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C233 +
            (C162 * C1328 - C78891 * C1418) * C78890) *
               C81 +
           ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C233 +
            (C78891 * C1420 - C162 * C1330) * C78890) *
               C81 +
           ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C233 +
            (C162 * C5755 - C78891 * C5805) * C78890) *
               C81 +
           ((C162 * C5455 - C78891 * C5514) * C233 +
            (C162 * C5756 - C78891 * C5806) * C78890) *
               C82) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C233 +
            (C78891 * C5807 - C162 * C5757) * C78890) *
               C81 +
           ((C78891 * C5516 - C162 * C5458) * C233 +
            (C78891 * C5808 - C162 * C5758) * C78890) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C8885 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C8886 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78592 * C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C8885 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C8886 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C78845) *
              C78592 * C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C8885 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C8886 +
           (((C1761 - C1760) * C233 + (C2339 - C2338) * C78890) * C81 +
            ((C78891 * C1738 - C162 * C1632) * C233 +
             (C78891 * C2330 - C162 * C2240) * C78890) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C8885 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C8886 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78883 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C8885 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C8886 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C162 * C5929 - C78891 * C6028) * C233 +
             (C162 * C6446 - C78891 * C6532) * C78890) *
                C82) *
               C78845) *
              C78868 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C8885 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C8886 +
           (((C78891 * C6031 - C162 * C5933) * C233 +
             (C78891 * C6535 - C162 * C6449) * C78890) *
                C81 +
            ((C78891 * C6032 - C162 * C5934) * C233 +
             (C78891 * C6536 - C162 * C6450) * C78890) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78883 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78868 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C717 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78868 -
           (C638 * C82 + C637 * C81) * C78610 * C78883 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C718 +
          ((C638 * C81 + C639 * C82) * C78610 * C78883 -
           ((C233 * C938 - C601 * C726 - C233 * C1334 + C78890 * C1514) *
                C78891 * C82 +
            C1547 * C81) *
               C78610 * C78868 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C78592 * C87 -
          (C638 * C82 + C637 * C81) * C78610 * C78592 * C88 +
          (C638 * C81 + C639 * C82) * C78610 * C78592 * C89 -
          (C640 * C82 + C639 * C81) * C78610 * C78592 * C90 +
          (C640 * C81 +
           (C233 * C239 - C601 * C101 - C233 * C496 + C78890 * C607) * C78891 *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C4809 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C4810 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C78880 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C4810 -
           (C638 * C82 + C637 * C81) * C78610 * C4809 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C78864 +
          ((C638 * C81 + C639 * C82) * C78610 * C4809 -
           (C3096 * C82 + C1547 * C81) * C78610 * C4810 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C5449 -
          (C1545 * C82 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C78891 * C81) *
              C78610 * C5450 +
          ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
               C78891 * C81 +
           C1546 * C82) *
              C78610 * C5451 -
          ((C233 * C5564 - C601 * C5455 - C233 * C5756 + C78890 * C5851) *
               C78891 * C82 +
           (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
               C78891 * C81) *
              C78610 * C5452 +
          ((C233 * C5565 - C601 * C5457 - C233 * C5757 + C78890 * C5853) *
               C78891 * C81 +
           (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
               C78891 * C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C8885 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78592 * C78880 +
          ((C2450 * C81 + C2452 * C82) * C8886 -
           (C638 * C82 + C637 * C81) * C8885 -
           (C2453 * C82 + C2451 * C81) * C78845) *
              C78592 * C78864 +
          ((C638 * C81 + C639 * C82) * C8885 -
           (C3735 * C82 + C2452 * C81) * C8886 +
           (C2453 * C81 +
            (C233 * C1844 - C601 * C1632 - C233 * C2240 + C78890 * C2420) *
                C78891 * C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C8885 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78883 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C8886 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C8885 -
           ((C233 * C6114 - C601 * C5929 - C233 * C6446 + C78890 * C6611) *
                C78891 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C78845) *
              C78868 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C8885 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C8886 +
           ((C233 * C6117 - C601 * C5933 - C233 * C6449 + C78890 * C6615) *
                C78891 * C81 +
            (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                C78891 * C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                       C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                          C78890 * C78891 * C17369 -
                      (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                       C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                          C78890 * C78891 * C78697) *
                         C78812 +
                     ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                       C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                          C78890 * C78891 * C78697 -
                      (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                       C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                          C78890 * C78891 * C17369) *
                         C78655) *
                        C78569 +
                    (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                       C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                          C78890 * C78891 * C78697 -
                      (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                       C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                          C78890 * C78891 * C17369) *
                         C78812 +
                     ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                       C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                          C78890 * C78891 * C17369 -
                      (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                       C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                          C78890 * C78891 * C78697) *
                         C78655) *
                        C78578 +
                    (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                       C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                          C78890 * C78891 * C17369 -
                      (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                       C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                          C78890 * C78891 * C78697) *
                         C78812 +
                     ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
                       C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                          C78890 * C78891 * C78697 -
                      (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                       C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                          C78890 * C78891 * C17369) *
                         C78655) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C17369 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C17369 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C78569 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C17369 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C17369 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C78578 +
                    ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                       (C184 - C185) * C94 + (C186 - C187) * C82) *
                          C78890 * C17369 +
                      ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                       (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C852 - C851) * C92 + (C854 - C853) * C81 +
                       (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                          C78890 * C17369 +
                      ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                       (C78891 * C3950 - C162 * C3836) * C94 +
                       (C78891 * C3954 - C162 * C3844) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C17369 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C17369 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C78569 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C17369 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C17369 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C78578 +
                    ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                       (C255 - C256) * C94 + (C257 - C258) * C82) *
                          C78891 * C17369 +
                      ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                       (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C958 - C957) * C92 + (C960 - C959) * C81 +
                       (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                          C78891 * C17369 +
                      ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                       (C78890 * C4064 - C233 * C3836) * C94 +
                       (C78890 * C4068 - C233 * C3844) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78812 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78655) *
              C78569 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C78812 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C78578 +
          (((C391 * C81 + C392 * C82) * C78890 * C17369 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C78812 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C78569 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C78578 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C17369 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C17369 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C17369 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C17369 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C78569 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C78578 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C17369 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C17369 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78812 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78655) *
              C78569 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C78812 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C78578 +
          (((C638 * C81 + C639 * C82) * C17369 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C78812 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C78693 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78700 +
            (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
             C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                C78890 * C78891 * C20337) *
               C78812 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78700 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C78693 -
            (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
             C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                C78890 * C78891 * C20337) *
               C78655) *
              C13455 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78700 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C78693 -
            (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
             C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                C78890 * C78891 * C20337) *
               C78812 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C78693 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78700 +
            (C92 * C5935 - C93 * C5929 - C92 * C5936 + C81 * C5947 +
             C94 * C10692 - C95 * C10691 - C94 * C10693 + C82 * C10694) *
                C78890 * C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C78693 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78700 +
                      ((C78891 * C1733 - C162 * C1627) * C92 +
                       (C78891 * C1741 - C162 * C1638) * C81 +
                       (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                          C78890 * C20337) *
                         C78812 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C78693 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78700 +
                      ((C162 * C5930 - C78891 * C6027) * C92 +
                       (C162 * C5938 - C78891 * C6033) * C81 +
                       (C10796 - C10797) * C94 + (C10798 - C10799) * C82) *
                          C78890 * C20337) *
                         C78655) *
                        C13455 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C78693 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78700 +
                      ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                       (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                          C78890 * C20337) *
                         C78812 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C78693 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78700 +
                      ((C10797 - C10796) * C92 + (C10799 - C10798) * C81 +
                       (C78891 * C10793 - C162 * C10691) * C94 +
                       (C78891 * C10794 - C162 * C10693) * C82) *
                          C78890 * C20337) *
                         C78655) *
                        C78575)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C78693 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78700 +
                      ((C78890 * C1839 - C233 * C1627) * C92 +
                       (C78890 * C1847 - C233 * C1638) * C81 +
                       (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                          C78891 * C20337) *
                         C78812 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C78693 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78700 +
                      ((C233 * C5930 - C78890 * C6113) * C92 +
                       (C233 * C5938 - C78890 * C6119) * C81 +
                       (C10900 - C10901) * C94 + (C10902 - C10903) * C82) *
                          C78891 * C20337) *
                         C78655) *
                        C13455 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C78693 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78700 +
                      ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                       (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                          C78891 * C20337) *
                         C78812 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C78693 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78700 +
                      ((C10901 - C10900) * C92 + (C10903 - C10902) * C81 +
                       (C78890 * C10897 - C233 * C10691) * C94 +
                       (C78890 * C10898 - C233 * C10693) * C82) *
                          C78891 * C20337) *
                         C78655) *
                        C78575)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78693 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78700 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
             (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
                C78890 * C20337) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78693 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78700 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
             (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
                C78890 * C20337) *
               C78655) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78693 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78700 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
             (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
                C78890 * C20337) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78693 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78700 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C162 +
             (C81 * C6206 - C92 * C6200 + C82 * C11002 - C94 * C11001) *
                 C78891) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78693 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78700 +
            ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                 C81 +
             C2067 * C82) *
                C78890 * C20337) *
               C78812 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78700 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78693 -
            (C11109 * C82 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C81) *
                C78890 * C20337) *
               C78655) *
              C13455 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78700 -
            (C391 * C82 + C390 * C81) * C78890 * C78693 -
            (C2069 * C82 + C2067 * C81) * C78890 * C20337) *
               C78812 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78693 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78700 +
            (C11109 * C81 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C82) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78693 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78700 +
            (((C78890 * C1839 - C233 * C1627) * C162 +
              (C78890 * C2145 - C233 * C1945) * C78891) *
                 C81 +
             ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
                C20337) *
               C78812 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78693 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78700 +
            (((C233 * C5930 - C78890 * C6113) * C162 +
              (C233 * C6199 - C78890 * C6365) * C78891) *
                 C81 +
             ((C10900 - C10901) * C162 + (C11209 - C11210) * C78891) * C82) *
                C20337) *
               C78655) *
              C13455 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78693 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78700 +
            (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
             ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
                C20337) *
               C78812 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78693 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78700 +
            (((C10901 - C10900) * C162 + (C11210 - C11209) * C78891) * C81 +
             ((C78890 * C10897 - C233 * C10691) * C162 +
              (C78890 * C11207 - C233 * C11001) * C78891) *
                 C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78693 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78700 +
            ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
             (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
                C78891 * C20337) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78693 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78700 +
            ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
             (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
                C78891 * C20337) *
               C78655) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78693 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78700 +
            ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
             (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
                C78891 * C20337) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78693 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78700 +
            ((C81 * C5935 - C92 * C5929 + C82 * C10692 - C94 * C10691) * C233 +
             (C81 * C6452 - C92 * C6446 + C82 * C11309 - C94 * C11308) *
                 C78890) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78693 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78700 +
            (((C78891 * C1733 - C162 * C1627) * C233 +
              (C78891 * C2325 - C162 * C2235) * C78890) *
                 C81 +
             ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
                C20337) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78693 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78700 +
            (((C162 * C5930 - C78891 * C6027) * C233 +
              (C162 * C6445 - C78891 * C6531) * C78890) *
                 C81 +
             ((C10796 - C10797) * C233 + (C11410 - C11411) * C78890) * C82) *
                C20337) *
               C78655) *
              C13455 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78693 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78700 +
            (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
             ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
                C20337) *
               C78812 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78693 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78700 +
            (((C10797 - C10796) * C233 + (C11411 - C11410) * C78890) * C81 +
             ((C78891 * C10793 - C162 * C10691) * C233 +
              (C78891 * C11408 - C162 * C11308) * C78890) *
                 C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78693 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78700 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C78891 * C81 +
             C2451 * C82) *
                C20337) *
               C78812 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78700 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78693 -
            (C11518 * C82 +
             (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                 C78891 * C81) *
                C20337) *
               C78655) *
              C13455 +
          (((C2450 * C81 + C2452 * C82) * C78700 -
            (C638 * C82 + C637 * C81) * C78693 -
            (C2453 * C82 + C2451 * C81) * C20337) *
               C78812 +
           ((C1545 * C81 + C1547 * C82) * C78693 -
            (C4735 * C82 + C4734 * C81) * C78700 +
            (C11518 * C81 +
             (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                 C78891 * C82) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
             C95 * C97 - C94 * C105 + C82 * C115) *
                C78890 * C78891 * C17369 -
            (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
             C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                C78890 * C78891 * C78697) *
               C78883 +
           ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
             C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                C78890 * C78891 * C78697 -
            (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 + C92 * C730 -
             C93 * C721 - C92 * C731 + C81 * C745) *
                C78890 * C78891 * C17369) *
               C78868 +
           ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 + C94 * C734 -
             C95 * C723 - C94 * C735 + C82 * C747) *
                C78890 * C78891 * C17369 -
            (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
             C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                C78890 * C78891 * C78697) *
               C78842) *
              C13455 +
          (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
             C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                C78890 * C78891 * C78697 -
            (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
             C93 * C97 - C92 * C105 + C81 * C115) *
                C78890 * C78891 * C17369) *
               C78883 +
           ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 + C94 * C736 -
             C95 * C724 - C94 * C737 + C82 * C748) *
                C78890 * C78891 * C17369 -
            (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
             C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                C78890 * C78891 * C78697) *
               C78868 +
           ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
             C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                C78890 * C78891 * C78697 -
            (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 + C92 * C734 -
             C93 * C723 - C92 * C735 + C81 * C747) *
                C78890 * C78891 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C17369 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78697) *
              C78592 * C78892 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C78697 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C17369) *
              C78592 * C78882 +
          ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 + C94 * C108 -
            C95 * C99 - C94 * C109 + C82 * C117) *
               C78890 * C78891 * C17369 -
           (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
            C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
               C78890 * C78891 * C78697) *
              C78592 * C78866 +
          ((C92 * C1645 - C93 * C1631 - C92 * C1646 + C81 * C1655 +
            C94 * C3165 - C95 * C3164 - C94 * C3166 + C82 * C3167) *
               C78890 * C78891 * C78697 -
           (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 + C92 * C108 -
            C93 * C99 - C92 * C109 + C81 * C117) *
               C78890 * C78891 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 + C94 * C104 -
            C95 * C97 - C94 * C105 + C82 * C115) *
               C78890 * C78891 * C78894 -
           (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
            C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
               C78890 * C78891 * C78888 +
           (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
            C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
               C78890 * C78891 * C78876 -
           (C94 * C10197 - C95 * C10193 - C94 * C10198 + C82 * C10205 +
            C92 * C10199 - C93 * C10194 - C92 * C10200 + C81 * C10206) *
               C78890 * C78891 * C78858) *
              C78592 * C13455 +
          ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
            C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
               C78890 * C78891 * C78888 -
           (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 + C92 * C104 -
            C93 * C97 - C92 * C105 + C81 * C115) *
               C78890 * C78891 * C78894 -
           (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
            C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
               C78890 * C78891 * C78876 +
           (C92 * C10197 - C93 * C10193 - C92 * C10198 + C81 * C10205 +
            C94 * C11589 - C95 * C11588 - C94 * C11590 + C82 * C11591) *
               C78890 * C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C17369 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C78883 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C17369 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C78868 +
                     (((C78891 * C828 - C162 * C722) * C92 +
                       (C78891 * C836 - C162 * C733) * C81 +
                       (C847 - C848) * C94 + (C849 - C850) * C82) *
                          C78890 * C17369 +
                      ((C162 * C5932 - C78891 * C6029) * C92 +
                       (C162 * C5942 - C78891 * C6035) * C81 +
                       (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C13455 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C17369 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C78883 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C17369 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C78868 +
                     (((C848 - C847) * C92 + (C850 - C849) * C81 +
                       (C855 - C856) * C94 + (C857 - C858) * C82) *
                          C78890 * C17369 +
                      ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                       (C78891 * C7460 - C162 * C7358) * C94 +
                       (C78891 * C7461 - C162 * C7360) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C17369 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78592 * C78892 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C17369 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78592 * C78882 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C17369 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C78592 * C78866 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C17369 +
                     ((C3238 - C3237) * C92 + (C3240 - C3239) * C81 +
                      (C78891 * C3234 - C162 * C3164) * C94 +
                      (C78891 * C3235 - C162 * C3166) * C82) *
                         C78890 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78894 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78888 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78876 +
                     ((C162 * C10194 - C78891 * C10251) * C92 +
                      (C162 * C10200 - C78891 * C10255) * C81 +
                      (C11661 - C11662) * C94 + (C11663 - C11664) * C82) *
                         C78890 * C78858) *
                        C78592 * C13455 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78894 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78888 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C78876 +
                     ((C11662 - C11661) * C92 + (C11664 - C11663) * C81 +
                      (C78891 * C11658 - C162 * C11588) * C94 +
                      (C78891 * C11659 - C162 * C11590) * C82) *
                         C78890 * C78858) *
                        C78592 * C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[17] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C17369 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C78883 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C17369 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C78868 +
                     (((C78890 * C934 - C233 * C722) * C92 +
                       (C78890 * C942 - C233 * C733) * C81 +
                       (C953 - C954) * C94 + (C955 - C956) * C82) *
                          C78891 * C17369 +
                      ((C233 * C5932 - C78890 * C6115) * C92 +
                       (C233 * C5942 - C78890 * C6121) * C81 +
                       (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C13455 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C17369 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C78883 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C17369 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C78868 +
                     (((C954 - C953) * C92 + (C956 - C955) * C81 +
                       (C961 - C962) * C94 + (C963 - C964) * C82) *
                          C78891 * C17369 +
                      ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                       (C78890 * C7564 - C233 * C7358) * C94 +
                       (C78890 * C7565 - C233 * C7360) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C17369 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78592 * C78892 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C17369 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78592 * C78882 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C17369 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C78592 * C78866 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C17369 +
                     ((C3310 - C3309) * C92 + (C3312 - C3311) * C81 +
                      (C78890 * C3306 - C233 * C3164) * C94 +
                      (C78890 * C3307 - C233 * C3166) * C82) *
                         C78891 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78894 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78888 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78876 +
                     ((C233 * C10194 - C78890 * C10301) * C92 +
                      (C233 * C10200 - C78890 * C10305) * C81 +
                      (C11733 - C11734) * C94 + (C11735 - C11736) * C82) *
                         C78891 * C78858) *
                        C78592 * C13455 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78894 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78888 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C78876 +
                     ((C11734 - C11733) * C92 + (C11736 - C11735) * C81 +
                      (C78890 * C11730 - C233 * C11588) * C94 +
                      (C78890 * C11731 - C233 * C11590) * C82) *
                         C78891 * C78858) *
                        C78592 * C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78883 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78868 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78883 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78868 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C17369 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C17369 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C17369 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C162 +
            (C81 * C1957 - C92 * C1949 + C82 * C3379 - C94 * C3378) * C78891) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78894 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78888 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78876 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C162 +
            (C92 * C10351 - C81 * C10355 + C94 * C10352 - C82 * C10356) *
                C78891) *
               C78890 * C78858) *
              C78592 * C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78894 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78888 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C78876 +
           ((C81 * C10197 - C92 * C10193 + C82 * C11589 - C94 * C11588) * C162 +
            (C81 * C10356 - C92 * C10352 + C82 * C11803 - C94 * C11802) *
                C78891) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78883 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78868 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C17369 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C78883 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78868 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C17369 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78592 * C78892 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
           (C391 * C82 + C390 * C81) * C78890 * C17369) *
              C78592 * C78882 +
          ((C391 * C81 + C392 * C82) * C78890 * C17369 -
           (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
              C78592 * C78866 +
          ((C3454 * C81 +
            (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
                C82) *
               C78890 * C78697 -
           (C393 * C82 + C392 * C81) * C78890 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78894 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78888 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78876 -
           (C11878 * C82 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C81) *
               C78890 * C78858) *
              C78592 * C13455 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78888 -
           (C391 * C82 + C390 * C81) * C78890 * C78894 -
           (C2069 * C82 + C2067 * C81) * C78890 * C78876 +
           (C11878 * C81 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C82) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78883 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78868 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C17369 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C78842) *
              C13455 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78883 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78868 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C17369 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78592 * C78892 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C17369 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78697) *
              C78592 * C78882 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C17369 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C78697) *
              C78592 * C78866 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C17369 +
           (((C3310 - C3309) * C162 + (C3523 - C3522) * C78891) * C81 +
            ((C78890 * C3306 - C233 * C3164) * C162 +
             (C78890 * C3520 - C233 * C3378) * C78891) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78894 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78888 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78876 +
           (((C233 * C10194 - C78890 * C10301) * C162 +
             (C233 * C10351 - C78890 * C10447) * C78891) *
                C81 +
            ((C11733 - C11734) * C162 + (C11946 - C11947) * C78891) * C82) *
               C78858) *
              C78592 * C13455 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78894 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78888 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C78876 +
           (((C11734 - C11733) * C162 + (C11947 - C11946) * C78891) * C81 +
            ((C78890 * C11730 - C233 * C11588) * C162 +
             (C78890 * C11944 - C233 * C11802) * C78891) *
                C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78883 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78868 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78883 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78868 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C17369 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C17369 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C17369 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C233 +
            (C81 * C2247 - C92 * C2239 + C82 * C3590 - C94 * C3589) * C78890) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78894 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78888 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78876 +
           ((C92 * C10194 - C81 * C10199 + C94 * C10193 - C82 * C10197) * C233 +
            (C92 * C10493 - C81 * C10497 + C94 * C10494 - C82 * C10498) *
                C78890) *
               C78891 * C78858) *
              C78592 * C13455 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78894 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78888 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C78876 +
           ((C81 * C10197 - C92 * C10193 + C82 * C11589 - C94 * C11588) * C233 +
            (C81 * C10498 - C92 * C10494 + C82 * C12014 - C94 * C12013) *
                C78890) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78883 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78868 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C17369 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C78842) *
              C13455 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78883 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78868 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C17369 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C17369 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78592 * C78892 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C17369 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78697) *
              C78592 * C78882 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C17369 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C78697) *
              C78592 * C78866 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C17369 +
           (((C3238 - C3237) * C233 + (C3660 - C3659) * C78890) * C81 +
            ((C78891 * C3234 - C162 * C3164) * C233 +
             (C78891 * C3657 - C162 * C3589) * C78890) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78894 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78888 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78876 +
           (((C162 * C10194 - C78891 * C10251) * C233 +
             (C162 * C10493 - C78891 * C10543) * C78890) *
                C81 +
            ((C11661 - C11662) * C233 + (C12083 - C12084) * C78890) * C82) *
               C78858) *
              C78592 * C13455 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78894 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78888 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C78876 +
           (((C11662 - C11661) * C233 + (C12084 - C12083) * C78890) * C81 +
            ((C78891 * C11658 - C162 * C11588) * C233 +
             (C78891 * C12081 - C162 * C12013) * C78890) *
                C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78883 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78868 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C17369 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C78842) *
              C13455 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C78883 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78868 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C17369 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78592 * C78892 +
          ((C2450 * C81 + C2452 * C82) * C78697 -
           (C638 * C82 + C637 * C81) * C17369) *
              C78592 * C78882 +
          ((C638 * C81 + C639 * C82) * C17369 -
           (C3735 * C82 + C2452 * C81) * C78697) *
              C78592 * C78866 +
          ((C3735 * C81 +
            (C233 * C3306 - C601 * C3164 - C233 * C3589 + C78890 * C3726) *
                C78891 * C82) *
               C78697 -
           (C640 * C82 + C639 * C81) * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78894 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78888 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78876 -
           (C12159 * C82 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C78891 * C81) *
               C78858) *
              C78592 * C13455 +
          ((C2450 * C81 + C2452 * C82) * C78888 -
           (C638 * C82 + C637 * C81) * C78894 -
           (C2453 * C82 + C2451 * C81) * C78876 +
           (C12159 * C81 +
            (C233 * C11730 - C601 * C11588 - C233 * C12013 + C78890 * C12150) *
                C78891 * C82) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78693 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78700 +
                     (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                      C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                         C78890 * C78891 * C20337) *
                        C78592 * C78569 +
                    ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78700 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78693 -
                     (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
                      C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                         C78890 * C78891 * C20337) *
                        C78592 * C78578 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78693 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78700 +
                     (C92 * C1643 - C93 * C1630 - C92 * C1644 + C81 * C1654 +
                      C94 * C1647 - C95 * C1632 - C94 * C1648 + C82 * C1656) *
                         C78890 * C78891 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78693 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78700 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C20337) *
                        C78592 * C78569 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78693 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78700 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C20337) *
                        C78592 * C78578 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78693 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78700 +
                     ((C1761 - C1760) * C92 + (C1763 - C1762) * C81 +
                      (C78891 * C1738 - C162 * C1632) * C94 +
                      (C78891 * C1746 - C162 * C1648) * C82) *
                         C78890 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78693 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78700 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C20337) *
                        C78592 * C78569 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78693 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78700 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C20337) *
                        C78592 * C78578 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78693 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78700 +
                     ((C1867 - C1866) * C92 + (C1869 - C1868) * C81 +
                      (C78890 * C1844 - C233 * C1632) * C94 +
                      (C78890 * C1852 - C233 * C1648) * C82) *
                         C78891 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78693 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78700 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C20337) *
              C78592 * C78569 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78693 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78700 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C20337) *
              C78592 * C78578 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78693 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78700 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C162 +
            (C81 * C1956 - C92 * C1948 + C82 * C1958 - C94 * C1950) * C78891) *
               C78890 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78693 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78700 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C20337) *
              C78592 * C78569 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78700 -
           (C391 * C82 + C390 * C81) * C78890 * C78693 -
           (C2069 * C82 + C2067 * C81) * C78890 * C20337) *
              C78592 * C78578 +
          ((C391 * C81 + C392 * C82) * C78890 * C78693 -
           (C3454 * C82 + C2068 * C81) * C78890 * C78700 +
           (C2069 * C81 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C82) *
               C78890 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78693 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78700 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C20337) *
              C78592 * C78569 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78693 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78700 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C20337) *
              C78592 * C78578 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78693 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C78700 +
           (((C1867 - C1866) * C162 + (C2159 - C2158) * C78891) * C81 +
            ((C78890 * C1844 - C233 * C1632) * C162 +
             (C78890 * C2150 - C233 * C1950) * C78891) *
                C82) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78693 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78700 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C20337) *
              C78592 * C78569 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78693 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78700 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C20337) *
              C78592 * C78578 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78693 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78700 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C233 +
            (C81 * C2246 - C92 * C2238 + C82 * C2248 - C94 * C2240) * C78890) *
               C78891 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78693 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78700 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C20337) *
              C78592 * C78569 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78693 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78700 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C20337) *
              C78592 * C78578 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78693 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C78700 +
           (((C1761 - C1760) * C233 + (C2339 - C2338) * C78890) * C81 +
            ((C78891 * C1738 - C162 * C1632) * C233 +
             (C78891 * C2330 - C162 * C2240) * C78890) *
                C82) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78693 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78700 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C20337) *
              C78592 * C78569 +
          ((C2450 * C81 + C2452 * C82) * C78700 -
           (C638 * C82 + C637 * C81) * C78693 -
           (C2453 * C82 + C2451 * C81) * C20337) *
              C78592 * C78578 +
          ((C638 * C81 + C639 * C82) * C78693 -
           (C3735 * C82 + C2452 * C81) * C78700 +
           (C2453 * C81 +
            (C233 * C1844 - C601 * C1632 - C233 * C2240 + C78890 * C2420) *
                C78891 * C82) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C17369 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C78592 * C78892 +
                    ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C17369) *
                        C78592 * C78882 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C17369 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78697) *
                        C78592 * C78866 +
                    ((C92 * C1645 - C93 * C1631 - C92 * C1646 + C81 * C1655 +
                      C94 * C3165 - C95 * C3164 - C94 * C3166 + C82 * C3167) *
                         C78890 * C78891 * C78697 -
                     (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                      C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                         C78890 * C78891 * C17369) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                       C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                          C78890 * C78891 * C17369 -
                      (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                       C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                          C78890 * C78891 * C78697) *
                         C78883 +
                     ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                       C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                          C78890 * C78891 * C78697 -
                      (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                       C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                          C78890 * C78891 * C17369) *
                         C78868 +
                     ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                       C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                          C78890 * C78891 * C17369 -
                      (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                       C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                          C78890 * C78891 * C78697) *
                         C78842) *
                        C13455 +
                    (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                       C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                          C78890 * C78891 * C78697 -
                      (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                       C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                          C78890 * C78891 * C17369) *
                         C78883 +
                     ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                       C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                          C78890 * C78891 * C17369 -
                      (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                       C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                          C78890 * C78891 * C78697) *
                         C78868 +
                     ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
                       C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                          C78890 * C78891 * C78697 -
                      (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                       C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                          C78890 * C78891 * C17369) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C17369 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78592 * C78892 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C17369 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78592 * C78882 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C17369 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C78592 * C78866 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C17369 +
                     ((C3238 - C3237) * C92 + (C3240 - C3239) * C81 +
                      (C78891 * C3234 - C162 * C3164) * C94 +
                      (C78891 * C3235 - C162 * C3166) * C82) *
                         C78890 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C17369 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C78883 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C17369 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C78868 +
                     (((C78891 * C828 - C162 * C722) * C92 +
                       (C78891 * C836 - C162 * C733) * C81 +
                       (C847 - C848) * C94 + (C849 - C850) * C82) *
                          C78890 * C17369 +
                      ((C162 * C5932 - C78891 * C6029) * C92 +
                       (C162 * C5942 - C78891 * C6035) * C81 +
                       (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C13455 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C17369 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C78883 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C17369 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C78868 +
                     (((C848 - C847) * C92 + (C850 - C849) * C81 +
                       (C855 - C856) * C94 + (C857 - C858) * C82) *
                          C78890 * C17369 +
                      ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                       (C78891 * C7460 - C162 * C7358) * C94 +
                       (C78891 * C7461 - C162 * C7360) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[19] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C17369 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78592 * C78892 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C17369 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78592 * C78882 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C17369 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C78592 * C78866 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C17369 +
                     ((C3310 - C3309) * C92 + (C3312 - C3311) * C81 +
                      (C78890 * C3306 - C233 * C3164) * C94 +
                      (C78890 * C3307 - C233 * C3166) * C82) *
                         C78891 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C17369 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C78883 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C17369 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C78868 +
                     (((C78890 * C934 - C233 * C722) * C92 +
                       (C78890 * C942 - C233 * C733) * C81 +
                       (C953 - C954) * C94 + (C955 - C956) * C82) *
                          C78891 * C17369 +
                      ((C233 * C5932 - C78890 * C6115) * C92 +
                       (C233 * C5942 - C78890 * C6121) * C81 +
                       (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C13455 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C17369 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C78883 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C17369 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C78868 +
                     (((C954 - C953) * C92 + (C956 - C955) * C81 +
                       (C961 - C962) * C94 + (C963 - C964) * C82) *
                          C78891 * C17369 +
                      ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                       (C78890 * C7564 - C233 * C7358) * C94 +
                       (C78890 * C7565 - C233 * C7360) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C17369 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C17369 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C17369 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C162 +
            (C81 * C1957 - C92 * C1949 + C82 * C3379 - C94 * C3378) * C78891) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78883 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78868 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78883 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78868 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C17369 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78592 * C78892 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
           (C391 * C82 + C390 * C81) * C78890 * C17369) *
              C78592 * C78882 +
          ((C391 * C81 + C392 * C82) * C78890 * C17369 -
           (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
              C78592 * C78866 +
          ((C3454 * C81 +
            (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
                C82) *
               C78890 * C78697 -
           (C393 * C82 + C392 * C81) * C78890 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C17369 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78883 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C17369) *
               C78868 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C17369 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C17369) *
               C78883 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C17369 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78868 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78592 * C78892 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C17369 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78697) *
              C78592 * C78882 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C17369 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C78697) *
              C78592 * C78866 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C17369 +
           (((C3310 - C3309) * C162 + (C3523 - C3522) * C78891) * C81 +
            ((C78890 * C3306 - C233 * C3164) * C162 +
             (C78890 * C3520 - C233 * C3378) * C78891) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78883 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C17369 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78868 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C17369 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C78842) *
              C13455 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C17369 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78883 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C17369 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78868 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C17369 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C17369 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C17369 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C17369 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C17369 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C233 +
            (C81 * C2247 - C92 * C2239 + C82 * C3590 - C94 * C3589) * C78890) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C17369 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78883 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C17369 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78868 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C17369 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C17369 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78883 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C17369 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78868 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C17369 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C17369 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78592 * C78892 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C17369 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78697) *
              C78592 * C78882 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C17369 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C78697) *
              C78592 * C78866 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C17369 +
           (((C3238 - C3237) * C233 + (C3660 - C3659) * C78890) * C81 +
            ((C78891 * C3234 - C162 * C3164) * C233 +
             (C78891 * C3657 - C162 * C3589) * C78890) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C17369 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78883 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C17369 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78868 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C17369 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C78842) *
              C13455 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C17369 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78883 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C17369 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78868 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C17369 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C17369 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78592 * C78892 +
          ((C2450 * C81 + C2452 * C82) * C78697 -
           (C638 * C82 + C637 * C81) * C17369) *
              C78592 * C78882 +
          ((C638 * C81 + C639 * C82) * C17369 -
           (C3735 * C82 + C2452 * C81) * C78697) *
              C78592 * C78866 +
          ((C3735 * C81 +
            (C233 * C3306 - C601 * C3164 - C233 * C3589 + C78890 * C3726) *
                C78891 * C82) *
               C78697 -
           (C640 * C82 + C639 * C81) * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C17369 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78883 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C17369) *
               C78868 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C17369 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C78842) *
              C13455 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C17369) *
               C78883 +
           ((C1545 * C81 + C1547 * C82) * C17369 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78868 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C78812 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C78655) *
                        C2521 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C78655 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C78812) *
                        C2522 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C78812 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C78655) *
                        C2523 +
                    ((C92 * C740 - C93 * C726 - C92 * C741 + C81 * C750 +
                      C94 * C2526 - C95 * C2525 - C94 * C2527 + C82 * C2528) *
                         C78890 * C78891 * C78610 * C78655 -
                     (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                      C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                         C78890 * C78891 * C78610 * C78812) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C6683 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C6684 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C6685 -
                     (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                      C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                         C78890 * C78891 * C78610 * C78852) *
                        C78798 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C6684 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C6683 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C6685 +
                     (C92 * C5459 - C93 * C5455 - C92 * C5460 + C81 * C5467 +
                      C94 * C6690 - C95 * C6689 - C94 * C6691 + C82 * C6692) *
                         C78890 * C78891 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C78655) *
                        C2521 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C78655) *
                        C2522 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78610 * C78655) *
                        C2523 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C78610 * C78812 +
                     ((C2599 - C2598) * C92 + (C2601 - C2600) * C81 +
                      (C78891 * C2595 - C162 * C2525) * C94 +
                      (C78891 * C2596 - C162 * C2527) * C82) *
                         C78890 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C6683 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C6684 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C6685 +
                     ((C162 * C5456 - C78891 * C5513) * C92 +
                      (C162 * C5462 - C78891 * C5517) * C81 +
                      (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                         C78890 * C78610 * C78852) *
                        C78798 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C6683 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C6684 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C6685 +
                     ((C6763 - C6762) * C92 + (C6765 - C6764) * C81 +
                      (C78891 * C6759 - C162 * C6689) * C94 +
                      (C78891 * C6760 - C162 * C6691) * C82) *
                         C78890 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C78655) *
                        C2521 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C78655) *
                        C2522 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78610 * C78655) *
                        C2523 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C78610 * C78812 +
                     ((C2671 - C2670) * C92 + (C2673 - C2672) * C81 +
                      (C78890 * C2667 - C233 * C2525) * C94 +
                      (C78890 * C2668 - C233 * C2527) * C82) *
                         C78891 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C6683 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C6684 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C6685 +
                     ((C233 * C5456 - C78890 * C5563) * C92 +
                      (C233 * C5462 - C78890 * C5567) * C81 +
                      (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                         C78891 * C78610 * C78852) *
                        C78798 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C6683 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C6684 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C6685 +
                     ((C6835 - C6834) * C92 + (C6837 - C6836) * C81 +
                      (C78890 * C6831 - C233 * C6689) * C94 +
                      (C78890 * C6832 - C233 * C6691) * C82) *
                         C78891 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78812 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78655) *
              C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78812 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78655) *
              C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78812 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78655) *
              C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78610 * C78812 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C162 +
            (C81 * C1052 - C92 * C1044 + C82 * C2740 - C94 * C2739) * C78891) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C6683 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C6684 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C6685 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78610 * C78852) *
              C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C6683 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C6684 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C6685 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C162 +
            (C81 * C5618 - C92 * C5614 + C82 * C6904 - C94 * C6903) * C78891) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78812 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78655) *
              C2521 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78655 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78812) *
              C2522 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78812 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C78655) *
              C2523 +
          ((C2815 * C81 +
            (C162 * C2595 - C358 * C2525 - C162 * C2739 + C78891 * C2807) *
                C82) *
               C78890 * C78610 * C78655 -
           (C393 * C82 + C392 * C81) * C78890 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C6683 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C6684 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C6685 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78610 * C78852) *
              C78798 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C6684 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C6683 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C6685 +
           (C6979 * C81 +
            (C162 * C6759 - C358 * C6689 - C162 * C6903 + C78891 * C6971) *
                C82) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78812 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78655) *
              C2521 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78812 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78655) *
              C2522 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78812 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C78655) *
              C2523 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78610 * C78812 +
           (((C2671 - C2670) * C162 + (C2884 - C2883) * C78891) * C81 +
            ((C78890 * C2667 - C233 * C2525) * C162 +
             (C78890 * C2881 - C233 * C2739) * C78891) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C6683 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C6684 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C6685 +
           (((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78610 * C78852) *
              C78798 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C6683 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C6684 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C6685 +
           (((C6835 - C6834) * C162 + (C7048 - C7047) * C78891) * C81 +
            ((C78890 * C6831 - C233 * C6689) * C162 +
             (C78890 * C7045 - C233 * C6903) * C78891) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78812 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78655) *
              C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78812 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78655) *
              C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78812 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78655) *
              C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78610 * C78812 +
           ((C81 * C740 - C92 * C726 + C82 * C2526 - C94 * C2525) * C233 +
            (C81 * C1342 - C92 * C1334 + C82 * C2951 - C94 * C2950) * C78890) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C6683 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C6684 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C6685 +
           ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78610 * C78852) *
              C78798 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C6683 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C6684 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C6685 +
           ((C81 * C5459 - C92 * C5455 + C82 * C6690 - C94 * C6689) * C233 +
            (C81 * C5760 - C92 * C5756 + C82 * C7115 - C94 * C7114) * C78890) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78812 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78655) *
              C2521 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78812 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78655) *
              C2522 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78812 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C78655) *
              C2523 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78610 * C78812 +
           (((C2599 - C2598) * C233 + (C3021 - C3020) * C78890) * C81 +
            ((C78891 * C2595 - C162 * C2525) * C233 +
             (C78891 * C3018 - C162 * C2950) * C78890) *
                C82) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C6683 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C6684 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C6685 +
           (((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78610 * C78852) *
              C78798 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C6683 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C6684 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C6685 +
           (((C6763 - C6762) * C233 + (C7185 - C7184) * C78890) * C81 +
            ((C78891 * C6759 - C162 * C6689) * C233 +
             (C78891 * C7182 - C162 * C7114) * C78890) *
                C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78812 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78655) *
              C2521 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78655 -
           (C638 * C82 + C637 * C81) * C78610 * C78812) *
              C2522 +
          ((C638 * C81 + C639 * C82) * C78610 * C78812 -
           (C3096 * C82 + C1547 * C81) * C78610 * C78655) *
              C2523 +
          ((C3096 * C81 +
            (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
                C78891 * C82) *
               C78610 * C78655 -
           (C640 * C82 + C639 * C81) * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C6683 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C6684 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C6685 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78610 * C78852) *
              C78798 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C6684 -
           (C638 * C82 + C637 * C81) * C78610 * C6683 -
           (C1548 * C82 + C1546 * C81) * C78610 * C6685 +
           (C7260 * C81 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C78891 * C82) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                       C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                          C78890 * C78891 * C78813 -
                      (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                       C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                          C78890 * C78891 * C78697) *
                         C78812 +
                     ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                       C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                          C78890 * C78891 * C78697 -
                      (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                       C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                          C78890 * C78891 * C78813) *
                         C78655) *
                        C717 +
                    (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                       C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                          C78890 * C78891 * C78697 -
                      (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                       C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                          C78890 * C78891 * C78813) *
                         C78812 +
                     ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                       C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                          C78890 * C78891 * C78813 -
                      (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                       C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                          C78890 * C78891 * C78697) *
                         C78655) *
                        C718 +
                    (((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                       C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                          C78890 * C78891 * C78813 -
                      (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                       C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                          C78890 * C78891 * C78697) *
                         C78812 +
                     ((C92 * C3841 - C93 * C3835 - C92 * C3842 + C81 * C3847 +
                       C94 * C3843 - C95 * C3836 - C94 * C3844 + C82 * C3848) *
                          C78890 * C78891 * C78697 -
                      (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                       C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                          C78890 * C78891 * C78813) *
                         C78655) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C6683 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78697 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78813) *
                        C6684 +
                    ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78813 -
                     (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                      C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                         C78890 * C78891 * C78697) *
                        C6685 +
                    ((C92 * C8253 - C93 * C8251 - C92 * C8254 + C81 * C8257 +
                      C94 * C8255 - C95 * C8252 - C94 * C8256 + C82 * C8258) *
                         C78890 * C78891 * C78697 -
                     (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                      C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                         C78890 * C78891 * C78813) *
                        C78852) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexy[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C78813 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C78813 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C717 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C78813 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C78813 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C718 +
                    ((((C181 - C180) * C92 + (C183 - C182) * C81 +
                       (C184 - C185) * C94 + (C186 - C187) * C82) *
                          C78890 * C78813 +
                      ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                       (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                          C78890 * C78697) *
                         C78812 +
                     (((C852 - C851) * C92 + (C854 - C853) * C81 +
                       (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                          C78890 * C78813 +
                      ((C3961 - C3960) * C92 + (C3963 - C3962) * C81 +
                       (C78891 * C3950 - C162 * C3836) * C94 +
                       (C78891 * C3954 - C162 * C3844) * C82) *
                          C78890 * C78697) *
                         C78655) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C6683 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78697) *
                        C6684 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78813 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                         C78890 * C78697) *
                        C6685 +
                    (((C162 * C5456 - C78891 * C5513) * C92 +
                      (C162 * C5462 - C78891 * C5517) * C81 +
                      (C6762 - C6763) * C94 + (C6764 - C6765) * C82) *
                         C78890 * C78813 +
                     ((C78891 * C8325 - C162 * C8251) * C92 +
                      (C78891 * C8327 - C162 * C8254) * C81 +
                      (C78891 * C8326 - C162 * C8252) * C94 +
                      (C78891 * C8328 - C162 * C8256) * C82) *
                         C78890 * C78697) *
                        C78852) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexz[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C78813 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C78813 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C717 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C78813 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C78813 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C718 +
                    ((((C252 - C251) * C92 + (C254 - C253) * C81 +
                       (C255 - C256) * C94 + (C257 - C258) * C82) *
                          C78891 * C78813 +
                      ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                       (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                          C78891 * C78697) *
                         C78812 +
                     (((C958 - C957) * C92 + (C960 - C959) * C81 +
                       (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                          C78891 * C78813 +
                      ((C4075 - C4074) * C92 + (C4077 - C4076) * C81 +
                       (C78890 * C4064 - C233 * C3836) * C94 +
                       (C78890 * C4068 - C233 * C3844) * C82) *
                          C78891 * C78697) *
                         C78655) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C6683 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78697) *
                        C6684 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78813 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                         C78891 * C78697) *
                        C6685 +
                    (((C233 * C5456 - C78890 * C5563) * C92 +
                      (C233 * C5462 - C78890 * C5567) * C81 +
                      (C6834 - C6835) * C94 + (C6836 - C6837) * C82) *
                         C78891 * C78813 +
                     ((C78890 * C8395 - C233 * C8251) * C92 +
                      (C78890 * C8397 - C233 * C8254) * C81 +
                      (C78890 * C8396 - C233 * C8252) * C94 +
                      (C78890 * C8398 - C233 * C8256) * C82) *
                         C78891 * C78697) *
                        C78852) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
             (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
                C78890 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
             (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
                C78890 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
             (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
                C78890 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C162 +
             (C81 * C4181 - C92 * C4177 + C82 * C4182 - C94 * C4178) * C78891) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C6683 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78813 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78697) *
              C6684 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78813 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78697) *
              C6685 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
            (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
               C78890 * C78813 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C162 +
            (C81 * C8467 - C92 * C8465 + C82 * C8468 - C94 * C8466) * C78891) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C78812 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C78655) *
              C717 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C78812 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C78655) *
              C718 +
          (((C391 * C81 + C392 * C82) * C78890 * C78813 -
            (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
               C78812 +
           ((C4299 * C81 +
             (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                 C82) *
                C78890 * C78697 -
            (C2815 * C82 + C1163 * C81) * C78890 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78813 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C6683 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78697 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78813) *
              C6684 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78813 -
           (C7776 * C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78697) *
              C6685 +
          (((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C81 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C82) *
               C78890 * C78697 -
           (C6979 * C82 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C81) *
               C78890 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C78655) *
              C717 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C78655) *
              C718 +
          (((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
             ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
                C78813 +
            (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
             ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
             ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
                C78813 +
            (((C4075 - C4074) * C162 + (C4405 - C4404) * C78891) * C81 +
             ((C78890 * C4064 - C233 * C3836) * C162 +
              (C78890 * C4400 - C233 * C4178) * C78891) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C6683 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78813 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78697) *
              C6684 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78813 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
               C78697) *
              C6685 +
          ((((C233 * C5456 - C78890 * C5563) * C162 +
             (C233 * C5613 - C78890 * C5709) * C78891) *
                C81 +
            ((C6834 - C6835) * C162 + (C7047 - C7048) * C78891) * C82) *
               C78813 +
           (((C78890 * C8395 - C233 * C8251) * C162 +
             (C78890 * C8603 - C233 * C8465) * C78891) *
                C81 +
            ((C78890 * C8396 - C233 * C8252) * C162 +
             (C78890 * C8604 - C233 * C8466) * C78891) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
             (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
                C78891 * C78813 +
            ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
             (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
                C78891 * C78697) *
               C78812 +
           (((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
             (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
                C78891 * C78813 +
            ((C81 * C3841 - C92 * C3835 + C82 * C3843 - C94 * C3836) * C233 +
             (C81 * C4509 - C92 * C4505 + C82 * C4510 - C94 * C4506) * C78890) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C6683 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78813 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78697) *
              C6684 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78813 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78697) *
              C6685 +
          (((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
            (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
               C78891 * C78813 +
           ((C81 * C8253 - C92 * C8251 + C82 * C8255 - C94 * C8252) * C233 +
            (C81 * C8673 - C92 * C8671 + C82 * C8674 - C94 * C8672) * C78890) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C78655) *
              C717 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C78655) *
              C718 +
          (((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
             ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
                C78813 +
            (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
             ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
             ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
                C78813 +
            (((C3961 - C3960) * C233 + (C4617 - C4616) * C78890) * C81 +
             ((C78891 * C3950 - C162 * C3836) * C233 +
              (C78891 * C4612 - C162 * C4506) * C78890) *
                 C82) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78813 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C6683 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78813 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78697) *
              C6684 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78813 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
               C78697) *
              C6685 +
          ((((C162 * C5456 - C78891 * C5513) * C233 +
             (C162 * C5755 - C78891 * C5805) * C78890) *
                C81 +
            ((C6762 - C6763) * C233 + (C7184 - C7185) * C78890) * C82) *
               C78813 +
           (((C78891 * C8325 - C162 * C8251) * C233 +
             (C78891 * C8741 - C162 * C8671) * C78890) *
                C81 +
            ((C78891 * C8326 - C162 * C8252) * C233 +
             (C78891 * C8742 - C162 * C8672) * C78890) *
                C82) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C78812 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C78655) *
              C717 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C78812 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C78655) *
              C718 +
          (((C638 * C81 + C639 * C82) * C78813 -
            (C3735 * C82 + C2452 * C81) * C78697) *
               C78812 +
           ((C4735 * C81 +
             (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                 C78891 * C82) *
                C78697 -
            (C3096 * C82 + C1547 * C81) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78813 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C6683 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78697 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78813) *
              C6684 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78813 -
           (C8185 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78697) *
              C6685 +
          (((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C78891 * C81 +
            (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                C78891 * C82) *
               C78697 -
           (C7260 * C82 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C78891 * C81) *
               C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C717 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C78868 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C718 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C87 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C88 +
                    (C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                     C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C89 -
                    (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                     C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C90 +
                    (C92 * C110 - C93 * C100 - C92 * C111 + C81 * C118 +
                     C94 * C112 - C95 * C101 - C94 * C113 + C82 * C119) *
                        C78890 * C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78884 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78870 +
                     (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                      C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                         C78890 * C78891 * C78845) *
                        C78592 * C717 +
                    ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78870 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78884 -
                     (C94 * C1643 - C95 * C1630 - C94 * C1644 + C82 * C1654 +
                      C92 * C1639 - C93 * C1628 - C92 * C1640 + C81 * C1652) *
                         C78890 * C78891 * C78845) *
                        C78592 * C718 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78884 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78870 +
                     (C92 * C1643 - C93 * C1630 - C92 * C1644 + C81 * C1654 +
                      C94 * C1647 - C95 * C1632 - C94 * C1648 + C82 * C1656) *
                         C78890 * C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78880 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C4810 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78864 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C5449 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C5450 +
                    (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78610 * C5451 -
                    (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                     C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                        C78890 * C78891 * C78610 * C5452 +
                    (C92 * C5463 - C93 * C5457 - C92 * C5464 + C81 * C5469 +
                     C94 * C5465 - C95 * C5458 - C94 * C5466 + C82 * C5470) *
                        C78890 * C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78884 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78870 +
                     (C92 * C1637 - C93 * C1627 - C92 * C1638 + C81 * C1651 +
                      C94 * C1639 - C95 * C1628 - C94 * C1640 + C82 * C1652) *
                         C78890 * C78891 * C78845) *
                        C4809 +
                    ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                      C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                         C78890 * C78891 * C78870 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78884 -
                     (C94 * C5935 - C95 * C5929 - C94 * C5936 + C82 * C5947 +
                      C92 * C5937 - C93 * C5930 - C92 * C5938 + C81 * C5948) *
                         C78890 * C78891 * C78845) *
                        C4810 +
                    ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78884 -
                     (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                      C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                         C78890 * C78891 * C78870 +
                     (C92 * C5943 - C93 * C5933 - C92 * C5944 + C81 * C5951 +
                      C94 * C5945 - C95 * C5934 - C94 * C5946 + C82 * C5952) *
                         C78890 * C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexy[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C162 * C726 - C78891 * C832) * C94 +
                      (C162 * C741 - C78891 * C840) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C92 + (C187 - C186) * C81 +
                     (C188 - C189) * C94 + (C190 - C191) * C82) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C92 + (C191 - C190) * C81 +
                     (C78891 * C168 - C162 * C101) * C94 +
                     (C78891 * C174 - C162 * C113) * C82) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78884 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78870 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78845) *
                        C78592 * C717 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78884 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78870 +
                     ((C1753 - C1752) * C92 + (C1755 - C1754) * C81 +
                      (C1760 - C1761) * C94 + (C1762 - C1763) * C82) *
                         C78890 * C78845) *
                        C78592 * C718 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78884 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C162 * C1631 - C78891 * C1737) * C94 +
                      (C162 * C1646 - C78891 * C1745) * C82) *
                         C78890 * C78870 +
                     ((C1761 - C1760) * C92 + (C1763 - C1762) * C81 +
                      (C78891 * C1738 - C162 * C1632) * C94 +
                      (C78891 * C1746 - C162 * C1648) * C82) *
                         C78890 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C162 * C5455 - C78891 * C5514) * C94 +
                     (C162 * C5460 - C78891 * C5518) * C82) *
                        C78890 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C92 +
                     (C78891 * C5519 - C162 * C5464) * C81 +
                     (C78891 * C5516 - C162 * C5458) * C94 +
                     (C78891 * C5520 - C162 * C5466) * C82) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78884 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78870 +
                     ((C78891 * C1733 - C162 * C1627) * C92 +
                      (C78891 * C1741 - C162 * C1638) * C81 +
                      (C1752 - C1753) * C94 + (C1754 - C1755) * C82) *
                         C78890 * C78845) *
                        C4809 +
                    (((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78884 +
                     ((C78891 * C3947 - C162 * C3833) * C92 +
                      (C78891 * C3951 - C162 * C3838) * C81 +
                      (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                         C78890 * C78870 +
                     ((C162 * C5930 - C78891 * C6027) * C92 +
                      (C162 * C5938 - C78891 * C6033) * C81 +
                      (C162 * C5929 - C78891 * C6028) * C94 +
                      (C162 * C5936 - C78891 * C6034) * C82) *
                         C78890 * C78845) *
                        C4810 +
                    (((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78884 +
                     ((C162 * C5932 - C78891 * C6029) * C92 +
                      (C162 * C5942 - C78891 * C6035) * C81 +
                      (C162 * C5931 - C78891 * C6030) * C94 +
                      (C162 * C5940 - C78891 * C6036) * C82) *
                         C78890 * C78870 +
                     ((C78891 * C6031 - C162 * C5933) * C92 +
                      (C78891 * C6037 - C162 * C5944) * C81 +
                      (C78891 * C6032 - C162 * C5934) * C94 +
                      (C78891 * C6038 - C162 * C5946) * C82) *
                         C78890 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexz[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C233 * C726 - C78890 * C938) * C94 +
                      (C233 * C741 - C78890 * C946) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C92 + (C258 - C257) * C81 +
                     (C259 - C260) * C94 + (C261 - C262) * C82) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C92 + (C262 - C261) * C81 +
                     (C78890 * C239 - C233 * C101) * C94 +
                     (C78890 * C245 - C233 * C113) * C82) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78884 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78870 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78845) *
                        C78592 * C717 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78884 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78870 +
                     ((C1859 - C1858) * C92 + (C1861 - C1860) * C81 +
                      (C1866 - C1867) * C94 + (C1868 - C1869) * C82) *
                         C78891 * C78845) *
                        C78592 * C718 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78884 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C233 * C1631 - C78890 * C1843) * C94 +
                      (C233 * C1646 - C78890 * C1851) * C82) *
                         C78891 * C78870 +
                     ((C1867 - C1866) * C92 + (C1869 - C1868) * C81 +
                      (C78890 * C1844 - C233 * C1632) * C94 +
                      (C78890 * C1852 - C233 * C1648) * C82) *
                         C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C5449 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C5450 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C5451 +
                    ((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C233 * C5455 - C78890 * C5564) * C94 +
                     (C233 * C5460 - C78890 * C5568) * C82) *
                        C78891 * C78610 * C5452 +
                    ((C78890 * C5565 - C233 * C5457) * C92 +
                     (C78890 * C5569 - C233 * C5464) * C81 +
                     (C78890 * C5566 - C233 * C5458) * C94 +
                     (C78890 * C5570 - C233 * C5466) * C82) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78884 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78870 +
                     ((C78890 * C1839 - C233 * C1627) * C92 +
                      (C78890 * C1847 - C233 * C1638) * C81 +
                      (C1858 - C1859) * C94 + (C1860 - C1861) * C82) *
                         C78891 * C78845) *
                        C4809 +
                    (((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78884 +
                     ((C78890 * C4061 - C233 * C3833) * C92 +
                      (C78890 * C4065 - C233 * C3838) * C81 +
                      (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                         C78891 * C78870 +
                     ((C233 * C5930 - C78890 * C6113) * C92 +
                      (C233 * C5938 - C78890 * C6119) * C81 +
                      (C233 * C5929 - C78890 * C6114) * C94 +
                      (C233 * C5936 - C78890 * C6120) * C82) *
                         C78891 * C78845) *
                        C4810 +
                    (((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78884 +
                     ((C233 * C5932 - C78890 * C6115) * C92 +
                      (C233 * C5942 - C78890 * C6121) * C81 +
                      (C233 * C5931 - C78890 * C6116) * C94 +
                      (C233 * C5940 - C78890 * C6122) * C82) *
                         C78891 * C78870 +
                     ((C78890 * C6117 - C233 * C5933) * C92 +
                      (C78890 * C6123 - C233 * C5944) * C81 +
                      (C78890 * C6118 - C233 * C5934) * C94 +
                      (C78890 * C6124 - C233 * C5946) * C82) *
                         C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
           (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
              C78890 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
           (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
              C78890 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
           (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
              C78890 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C162 +
           (C81 * C314 - C92 * C308 + C82 * C315 - C94 * C309) * C78891) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C78592 * C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78884 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78870 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C162 +
            (C92 * C1946 - C81 * C1954 + C94 * C1948 - C82 * C1956) * C78891) *
               C78890 * C78845) *
              C78592 * C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78884 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78870 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C162 +
            (C81 * C1956 - C92 * C1948 + C82 * C1958 - C94 * C1950) * C78891) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
           (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
              C78890 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
           (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
              C78890 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
           (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
              C78890 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C162 +
           (C81 * C5619 - C92 * C5615 + C82 * C5620 - C94 * C5616) * C78891) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C162 +
            (C81 * C1953 - C92 * C1945 + C82 * C1954 - C94 * C1946) * C78891) *
               C78890 * C78845) *
              C4809 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78884 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
            (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
               C78890 * C78870 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C162 +
            (C92 * C6199 - C81 * C6205 + C94 * C6200 - C82 * C6206) * C78891) *
               C78890 * C78845) *
              C4810 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78884 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
            (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
               C78890 * C78870 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C162 +
            (C81 * C6209 - C92 * C6203 + C82 * C6210 - C94 * C6204) * C78891) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78883 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C717 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78868 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78883 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C718 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78883 -
           ((C162 * C832 - C358 * C726 - C162 * C1044 + C78891 * C1134) * C82 +
            C1163 * C81) *
               C78890 * C78610 * C78868 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C78592 * C87 -
          (C391 * C82 + C390 * C81) * C78890 * C78610 * C78592 * C88 +
          (C391 * C81 + C392 * C82) * C78890 * C78610 * C78592 * C89 -
          (C393 * C82 + C392 * C81) * C78890 * C78610 * C78592 * C90 +
          (C393 * C81 +
           (C162 * C168 - C358 * C101 - C162 * C309 + C78891 * C364) * C82) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78884 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78870 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C78592 * C717 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78870 -
           (C391 * C82 + C390 * C81) * C78890 * C78884 -
           (C2069 * C82 + C2067 * C81) * C78890 * C78845) *
              C78592 * C718 +
          ((C391 * C81 + C392 * C82) * C78890 * C78884 -
           ((C162 * C1737 - C358 * C1631 - C162 * C1949 + C78891 * C2039) *
                C82 +
            C2068 * C81) *
               C78890 * C78870 +
           (C2069 * C81 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C82) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C4809 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C78880 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C4810 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C4809 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C4809 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C4810 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C5449 -
          (C1161 * C82 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
              C78890 * C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
           C1162 * C82) *
              C78890 * C78610 * C5451 -
          ((C162 * C5514 - C358 * C5455 - C162 * C5614 + C78891 * C5663) * C82 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C81) *
              C78890 * C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) * C81 +
           (C162 * C5516 - C358 * C5458 - C162 * C5616 + C78891 * C5666) *
               C82) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78884 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78870 +
           ((C162 * C1733 - C358 * C1627 - C162 * C1945 + C78891 * C2035) *
                C81 +
            C2067 * C82) *
               C78890 * C78845) *
              C4809 +
          (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C81 +
            C4298 * C82) *
               C78890 * C78870 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78884 -
           ((C162 * C6028 - C358 * C5929 - C162 * C6200 + C78891 * C6285) *
                C82 +
            (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                C81) *
               C78890 * C78845) *
              C4810 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78884 -
           ((C162 * C6030 - C358 * C5931 - C162 * C6202 + C78891 * C6287) *
                C82 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C81) *
               C78890 * C78870 +
           ((C162 * C6031 - C358 * C5933 - C162 * C6203 + C78891 * C6289) *
                C81 +
            (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                C82) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78883 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78868 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78883 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78868 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78883 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C233 * C726 - C78890 * C938) * C162 +
             (C233 * C1044 - C78890 * C1244) * C78891) *
                C82) *
               C78610 * C78868 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
           ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
           ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
           ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C162 + (C449 - C448) * C78891) * C81 +
           ((C78890 * C239 - C233 * C101) * C162 +
            (C78890 * C440 - C233 * C309) * C78891) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C78592 * C717 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78884 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78870 +
           (((C1859 - C1858) * C162 + (C2155 - C2154) * C78891) * C81 +
            ((C1866 - C1867) * C162 + (C2158 - C2159) * C78891) * C82) *
               C78845) *
              C78592 * C718 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78884 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C233 * C1631 - C78890 * C1843) * C162 +
             (C233 * C1949 - C78890 * C2149) * C78891) *
                C82) *
               C78870 +
           (((C1867 - C1866) * C162 + (C2159 - C2158) * C78891) * C81 +
            ((C78890 * C1844 - C233 * C1632) * C162 +
             (C78890 * C2150 - C233 * C1950) * C78891) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C4809 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C4810 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C4809 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C4810 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C4809 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C4810 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C5449 +
          (((C233 * C721 - C78890 * C932) * C162 +
            (C233 * C1038 - C78890 * C1238) * C78891) *
               C81 +
           ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
              C78610 * C5450 +
          (((C78890 * C934 - C233 * C722) * C162 +
            (C78890 * C1240 - C233 * C1040) * C78891) *
               C81 +
           ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
              C78610 * C5451 +
          (((C233 * C5456 - C78890 * C5563) * C162 +
            (C233 * C5613 - C78890 * C5709) * C78891) *
               C81 +
           ((C233 * C5455 - C78890 * C5564) * C162 +
            (C233 * C5614 - C78890 * C5710) * C78891) *
               C82) *
              C78610 * C5452 +
          (((C78890 * C5565 - C233 * C5457) * C162 +
            (C78890 * C5711 - C233 * C5615) * C78891) *
               C81 +
           ((C78890 * C5566 - C233 * C5458) * C162 +
            (C78890 * C5712 - C233 * C5616) * C78891) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C162 +
             (C78890 * C2145 - C233 * C1945) * C78891) *
                C81 +
            ((C1858 - C1859) * C162 + (C2154 - C2155) * C78891) * C82) *
               C78845) *
              C4809 +
          ((((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78884 +
           (((C78890 * C4061 - C233 * C3833) * C162 +
             (C78890 * C4397 - C233 * C4175) * C78891) *
                C81 +
            ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
               C78870 +
           (((C233 * C5930 - C78890 * C6113) * C162 +
             (C233 * C6199 - C78890 * C6365) * C78891) *
                C81 +
            ((C233 * C5929 - C78890 * C6114) * C162 +
             (C233 * C6200 - C78890 * C6366) * C78891) *
                C82) *
               C78845) *
              C4810 +
          ((((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78884 +
           (((C233 * C5932 - C78890 * C6115) * C162 +
             (C233 * C6201 - C78890 * C6367) * C78891) *
                C81 +
            ((C233 * C5931 - C78890 * C6116) * C162 +
             (C233 * C6202 - C78890 * C6368) * C78891) *
                C82) *
               C78870 +
           (((C78890 * C6117 - C233 * C5933) * C162 +
             (C78890 * C6369 - C233 * C6203) * C78891) *
                C81 +
            ((C78890 * C6118 - C233 * C5934) * C162 +
             (C78890 * C6370 - C233 * C6204) * C78891) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
           (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
              C78891 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
           (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
              C78891 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
           (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
              C78891 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C233 +
           (C81 * C501 - C92 * C495 + C82 * C502 - C94 * C496) * C78890) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C78592 * C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78884 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78870 +
           ((C92 * C1628 - C81 * C1639 + C94 * C1630 - C82 * C1643) * C233 +
            (C92 * C2236 - C81 * C2244 + C94 * C2238 - C82 * C2246) * C78890) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78884 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78870 +
           ((C81 * C1643 - C92 * C1630 + C82 * C1647 - C94 * C1632) * C233 +
            (C81 * C2246 - C92 * C2238 + C82 * C2248 - C94 * C2240) * C78890) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
           (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
              C78891 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
           (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
              C78891 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
           (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
              C78891 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C233 +
           (C81 * C5761 - C92 * C5757 + C82 * C5762 - C94 * C5758) * C78890) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78884 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78870 +
           ((C81 * C1637 - C92 * C1627 + C82 * C1639 - C94 * C1628) * C233 +
            (C81 * C2243 - C92 * C2235 + C82 * C2244 - C94 * C2236) * C78890) *
               C78891 * C78845) *
              C4809 +
          (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78884 +
           ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
            (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
               C78891 * C78870 +
           ((C92 * C5930 - C81 * C5937 + C94 * C5929 - C82 * C5935) * C233 +
            (C92 * C6445 - C81 * C6451 + C94 * C6446 - C82 * C6452) * C78890) *
               C78891 * C78845) *
              C4810 +
          (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78884 +
           ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
            (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
               C78891 * C78870 +
           ((C81 * C5943 - C92 * C5933 + C82 * C5945 - C94 * C5934) * C233 +
            (C81 * C6455 - C92 * C6449 + C82 * C6456 - C94 * C6450) * C78890) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78883 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78868 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78883 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C162 * C726 - C78891 * C832) * C233 +
             (C162 * C1334 - C78891 * C1424) * C78890) *
                C82) *
               C78610 * C78868 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
           ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
           ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
           ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C233 + (C559 - C558) * C78890) * C81 +
           ((C78891 * C168 - C162 * C101) * C233 +
            (C78891 * C550 - C162 * C496) * C78890) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78884 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78870 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C78592 * C717 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78884 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78870 +
           (((C1753 - C1752) * C233 + (C2335 - C2334) * C78890) * C81 +
            ((C1760 - C1761) * C233 + (C2338 - C2339) * C78890) * C82) *
               C78845) *
              C78592 * C718 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78884 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C162 * C1631 - C78891 * C1737) * C233 +
             (C162 * C2239 - C78891 * C2329) * C78890) *
                C82) *
               C78870 +
           (((C1761 - C1760) * C233 + (C2339 - C2338) * C78890) * C81 +
            ((C78891 * C1738 - C162 * C1632) * C233 +
             (C78891 * C2330 - C162 * C2240) * C78890) *
                C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C4809 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C4810 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C4809 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C4810 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C233 +
            (C162 * C1328 - C78891 * C1418) * C78890) *
               C81 +
           ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C233 +
            (C78891 * C1420 - C162 * C1330) * C78890) *
               C81 +
           ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C233 +
            (C162 * C5755 - C78891 * C5805) * C78890) *
               C81 +
           ((C162 * C5455 - C78891 * C5514) * C233 +
            (C162 * C5756 - C78891 * C5806) * C78890) *
               C82) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C233 +
            (C78891 * C5807 - C162 * C5757) * C78890) *
               C81 +
           ((C78891 * C5516 - C162 * C5458) * C233 +
            (C78891 * C5808 - C162 * C5758) * C78890) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78884 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78870 +
           (((C78891 * C1733 - C162 * C1627) * C233 +
             (C78891 * C2325 - C162 * C2235) * C78890) *
                C81 +
            ((C1752 - C1753) * C233 + (C2334 - C2335) * C78890) * C82) *
               C78845) *
              C4809 +
          ((((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78884 +
           (((C78891 * C3947 - C162 * C3833) * C233 +
             (C78891 * C4609 - C162 * C4503) * C78890) *
                C81 +
            ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
               C78870 +
           (((C162 * C5930 - C78891 * C6027) * C233 +
             (C162 * C6445 - C78891 * C6531) * C78890) *
                C81 +
            ((C162 * C5929 - C78891 * C6028) * C233 +
             (C162 * C6446 - C78891 * C6532) * C78890) *
                C82) *
               C78845) *
              C4810 +
          ((((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78884 +
           (((C162 * C5932 - C78891 * C6029) * C233 +
             (C162 * C6447 - C78891 * C6533) * C78890) *
                C81 +
            ((C162 * C5931 - C78891 * C6030) * C233 +
             (C162 * C6448 - C78891 * C6534) * C78890) *
                C82) *
               C78870 +
           (((C78891 * C6031 - C162 * C5933) * C233 +
             (C78891 * C6535 - C162 * C6449) * C78890) *
                C81 +
            ((C78891 * C6032 - C162 * C5934) * C233 +
             (C78891 * C6536 - C162 * C6450) * C78890) *
                C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78883 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78868 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C717 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78868 -
           (C638 * C82 + C637 * C81) * C78610 * C78883 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C718 +
          ((C638 * C81 + C639 * C82) * C78610 * C78883 -
           ((C233 * C938 - C601 * C726 - C233 * C1334 + C78890 * C1514) *
                C78891 * C82 +
            C1547 * C81) *
               C78610 * C78868 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C78592 * C87 -
          (C638 * C82 + C637 * C81) * C78610 * C78592 * C88 +
          (C638 * C81 + C639 * C82) * C78610 * C78592 * C89 -
          (C640 * C82 + C639 * C81) * C78610 * C78592 * C90 +
          (C640 * C81 +
           (C233 * C239 - C601 * C101 - C233 * C496 + C78890 * C607) * C78891 *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78884 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C78592 * C717 +
          ((C2450 * C81 + C2452 * C82) * C78870 -
           (C638 * C82 + C637 * C81) * C78884 -
           (C2453 * C82 + C2451 * C81) * C78845) *
              C78592 * C718 +
          ((C638 * C81 + C639 * C82) * C78884 -
           ((C233 * C1843 - C601 * C1631 - C233 * C2239 + C78890 * C2419) *
                C78891 * C82 +
            C2452 * C81) *
               C78870 +
           (C2453 * C81 +
            (C233 * C1844 - C601 * C1632 - C233 * C2240 + C78890 * C2420) *
                C78891 * C82) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C4809 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C4810 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C78880 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C4810 -
           (C638 * C82 + C637 * C81) * C78610 * C4809 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C78864 +
          ((C638 * C81 + C639 * C82) * C78610 * C4809 -
           (C3096 * C82 + C1547 * C81) * C78610 * C4810 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C5449 -
          (C1545 * C82 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C78891 * C81) *
              C78610 * C5450 +
          ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
               C78891 * C81 +
           C1546 * C82) *
              C78610 * C5451 -
          ((C233 * C5564 - C601 * C5455 - C233 * C5756 + C78890 * C5851) *
               C78891 * C82 +
           (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
               C78891 * C81) *
              C78610 * C5452 +
          ((C233 * C5565 - C601 * C5457 - C233 * C5757 + C78890 * C5853) *
               C78891 * C81 +
           (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
               C78891 * C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78884 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C78891 * C81 +
            C2451 * C82) *
               C78845) *
              C4809 +
          (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C78891 * C81 +
            C4734 * C82) *
               C78870 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78884 -
           ((C233 * C6114 - C601 * C5929 - C233 * C6446 + C78890 * C6611) *
                C78891 * C82 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C78891 * C81) *
               C78845) *
              C4810 +
          (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78884 -
           ((C233 * C6116 - C601 * C5931 - C233 * C6448 + C78890 * C6613) *
                C78891 * C82 +
            (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                C78891 * C81) *
               C78870 +
           ((C233 * C6117 - C601 * C5933 - C233 * C6449 + C78890 * C6615) *
                C78891 * C81 +
            (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                C78891 * C82) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                      C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                         C78890 * C78891 * C78697) *
                        C78592 * C2521 +
                    ((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                      C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                         C78890 * C78891 * C78697 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78813) *
                        C78592 * C2522 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78813 -
                     (C94 * C1645 - C95 * C1631 - C94 * C1646 + C82 * C1655 +
                      C92 * C1641 - C93 * C1629 - C92 * C1642 + C81 * C1653) *
                         C78890 * C78891 * C78697) *
                        C78592 * C2523 +
                    ((C92 * C1645 - C93 * C1631 - C92 * C1646 + C81 * C1655 +
                      C94 * C3165 - C95 * C3164 - C94 * C3166 + C82 * C3167) *
                         C78890 * C78891 * C78697 -
                     (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                      C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                         C78890 * C78891 * C78813) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                       C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                          C78890 * C78891 * C78813 -
                      (C94 * C1633 - C95 * C1625 - C94 * C1634 + C82 * C1649 +
                       C92 * C1635 - C93 * C1626 - C92 * C1636 + C81 * C1650) *
                          C78890 * C78891 * C78697) *
                         C4809 +
                     ((C92 * C3837 - C93 * C3833 - C92 * C3838 + C81 * C3845 +
                       C94 * C3839 - C95 * C3834 - C94 * C3840 + C82 * C3846) *
                          C78890 * C78891 * C78697 -
                      (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                       C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                          C78890 * C78891 * C78813) *
                         C4810 +
                     ((C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                       C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                          C78890 * C78891 * C78813 -
                      (C94 * C5939 - C95 * C5931 - C94 * C5940 + C82 * C5949 +
                       C92 * C5941 - C93 * C5932 - C92 * C5942 + C81 * C5950) *
                          C78890 * C78891 * C78697) *
                         C78842) *
                        C78798 +
                    (((C92 * C1633 - C93 * C1625 - C92 * C1634 + C81 * C1649 +
                       C94 * C1641 - C95 * C1629 - C94 * C1642 + C82 * C1653) *
                          C78890 * C78891 * C78697 -
                      (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                       C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                          C78890 * C78891 * C78813) *
                         C4809 +
                     ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                       C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                          C78890 * C78891 * C78813 -
                      (C94 * C3841 - C95 * C3835 - C94 * C3842 + C82 * C3847 +
                       C92 * C3839 - C93 * C3834 - C92 * C3840 + C81 * C3846) *
                          C78890 * C78891 * C78697) *
                         C4810 +
                     ((C92 * C5939 - C93 * C5931 - C92 * C5940 + C81 * C5949 +
                       C94 * C7359 - C95 * C7358 - C94 * C7360 + C82 * C7361) *
                          C78890 * C78891 * C78697 -
                      (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                       C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                          C78890 * C78891 * C78813) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexy[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78813 +
                     ((C162 * C1626 - C78891 * C1731) * C92 +
                      (C162 * C1636 - C78891 * C1739) * C81 +
                      (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                         C78890 * C78697) *
                        C78592 * C2521 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78813 +
                     ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                      (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                         C78890 * C78697) *
                        C78592 * C2522 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78813 +
                     ((C1757 - C1756) * C92 + (C1759 - C1758) * C81 +
                      (C3237 - C3238) * C94 + (C3239 - C3240) * C82) *
                         C78890 * C78697) *
                        C78592 * C2523 +
                    (((C185 - C184) * C92 + (C187 - C186) * C81 +
                      (C188 - C189) * C94 + (C190 - C191) * C82) *
                         C78890 * C78813 +
                     ((C3238 - C3237) * C92 + (C3240 - C3239) * C81 +
                      (C78891 * C3234 - C162 * C3164) * C94 +
                      (C78891 * C3235 - C162 * C3166) * C82) *
                         C78890 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78891 * C163 - C162 * C96) * C92 +
                       (C78891 * C169 - C162 * C103) * C81 +
                       (C176 - C177) * C94 + (C178 - C179) * C82) *
                          C78890 * C78813 +
                      ((C162 * C1626 - C78891 * C1731) * C92 +
                       (C162 * C1636 - C78891 * C1739) * C81 +
                       (C1748 - C1749) * C94 + (C1750 - C1751) * C82) *
                          C78890 * C78697) *
                         C4809 +
                     (((C162 * C721 - C78891 * C826) * C92 +
                       (C162 * C731 - C78891 * C834) * C81 +
                       (C843 - C844) * C94 + (C845 - C846) * C82) *
                          C78890 * C78813 +
                      ((C78891 * C3947 - C162 * C3833) * C92 +
                       (C78891 * C3951 - C162 * C3838) * C81 +
                       (C3956 - C3957) * C94 + (C3958 - C3959) * C82) *
                          C78890 * C78697) *
                         C4810 +
                     (((C78891 * C828 - C162 * C722) * C92 +
                       (C78891 * C836 - C162 * C733) * C81 +
                       (C847 - C848) * C94 + (C849 - C850) * C82) *
                          C78890 * C78813 +
                      ((C162 * C5932 - C78891 * C6029) * C92 +
                       (C162 * C5942 - C78891 * C6035) * C81 +
                       (C7463 - C7464) * C94 + (C7465 - C7466) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78798 +
                    ((((C177 - C176) * C92 + (C179 - C178) * C81 +
                       (C180 - C181) * C94 + (C182 - C183) * C82) *
                          C78890 * C78813 +
                      ((C1749 - C1748) * C92 + (C1751 - C1750) * C81 +
                       (C1756 - C1757) * C94 + (C1758 - C1759) * C82) *
                          C78890 * C78697) *
                         C4809 +
                     (((C844 - C843) * C92 + (C846 - C845) * C81 +
                       (C851 - C852) * C94 + (C853 - C854) * C82) *
                          C78890 * C78813 +
                      ((C3957 - C3956) * C92 + (C3959 - C3958) * C81 +
                       (C3960 - C3961) * C94 + (C3962 - C3963) * C82) *
                          C78890 * C78697) *
                         C4810 +
                     (((C848 - C847) * C92 + (C850 - C849) * C81 +
                       (C855 - C856) * C94 + (C857 - C858) * C82) *
                          C78890 * C78813 +
                      ((C7464 - C7463) * C92 + (C7466 - C7465) * C81 +
                       (C78891 * C7460 - C162 * C7358) * C94 +
                       (C78891 * C7461 - C162 * C7360) * C82) *
                          C78890 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eexz[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78813 +
                     ((C233 * C1626 - C78890 * C1837) * C92 +
                      (C233 * C1636 - C78890 * C1845) * C81 +
                      (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                         C78891 * C78697) *
                        C78592 * C2521 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78813 +
                     ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                      (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                         C78891 * C78697) *
                        C78592 * C2522 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78813 +
                     ((C1863 - C1862) * C92 + (C1865 - C1864) * C81 +
                      (C3309 - C3310) * C94 + (C3311 - C3312) * C82) *
                         C78891 * C78697) *
                        C78592 * C2523 +
                    (((C256 - C255) * C92 + (C258 - C257) * C81 +
                      (C259 - C260) * C94 + (C261 - C262) * C82) *
                         C78891 * C78813 +
                     ((C3310 - C3309) * C92 + (C3312 - C3311) * C81 +
                      (C78890 * C3306 - C233 * C3164) * C94 +
                      (C78890 * C3307 - C233 * C3166) * C82) *
                         C78891 * C78697) *
                        C78592 * C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   (((((C78890 * C234 - C233 * C96) * C92 +
                       (C78890 * C240 - C233 * C103) * C81 +
                       (C247 - C248) * C94 + (C249 - C250) * C82) *
                          C78891 * C78813 +
                      ((C233 * C1626 - C78890 * C1837) * C92 +
                       (C233 * C1636 - C78890 * C1845) * C81 +
                       (C1854 - C1855) * C94 + (C1856 - C1857) * C82) *
                          C78891 * C78697) *
                         C4809 +
                     (((C233 * C721 - C78890 * C932) * C92 +
                       (C233 * C731 - C78890 * C940) * C81 +
                       (C949 - C950) * C94 + (C951 - C952) * C82) *
                          C78891 * C78813 +
                      ((C78890 * C4061 - C233 * C3833) * C92 +
                       (C78890 * C4065 - C233 * C3838) * C81 +
                       (C4070 - C4071) * C94 + (C4072 - C4073) * C82) *
                          C78891 * C78697) *
                         C4810 +
                     (((C78890 * C934 - C233 * C722) * C92 +
                       (C78890 * C942 - C233 * C733) * C81 +
                       (C953 - C954) * C94 + (C955 - C956) * C82) *
                          C78891 * C78813 +
                      ((C233 * C5932 - C78890 * C6115) * C92 +
                       (C233 * C5942 - C78890 * C6121) * C81 +
                       (C7567 - C7568) * C94 + (C7569 - C7570) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78798 +
                    ((((C248 - C247) * C92 + (C250 - C249) * C81 +
                       (C251 - C252) * C94 + (C253 - C254) * C82) *
                          C78891 * C78813 +
                      ((C1855 - C1854) * C92 + (C1857 - C1856) * C81 +
                       (C1862 - C1863) * C94 + (C1864 - C1865) * C82) *
                          C78891 * C78697) *
                         C4809 +
                     (((C950 - C949) * C92 + (C952 - C951) * C81 +
                       (C957 - C958) * C94 + (C959 - C960) * C82) *
                          C78891 * C78813 +
                      ((C4071 - C4070) * C92 + (C4073 - C4072) * C81 +
                       (C4074 - C4075) * C94 + (C4076 - C4077) * C82) *
                          C78891 * C78697) *
                         C4810 +
                     (((C954 - C953) * C92 + (C956 - C955) * C81 +
                       (C961 - C962) * C94 + (C963 - C964) * C82) *
                          C78891 * C78813 +
                      ((C7568 - C7567) * C92 + (C7570 - C7569) * C81 +
                       (C78890 * C7564 - C233 * C7358) * C94 +
                       (C78890 * C7565 - C233 * C7360) * C82) *
                          C78891 * C78697) *
                         C78842) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
            (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78813 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
            (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78813 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C162 +
            (C92 * C1947 - C81 * C1955 + C94 * C1949 - C82 * C1957) * C78891) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
            (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
               C78890 * C78813 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C162 +
            (C81 * C1957 - C92 * C1949 + C82 * C3379 - C94 * C3378) * C78891) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
             (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
                C78890 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C162 +
             (C92 * C1943 - C81 * C1951 + C94 * C1944 - C82 * C1952) * C78891) *
                C78890 * C78697) *
               C4809 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
             (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
                C78890 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C162 +
             (C81 * C4179 - C92 * C4175 + C82 * C4180 - C94 * C4176) * C78891) *
                C78890 * C78697) *
               C4810 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
             (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
                C78890 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C162 +
             (C92 * C6201 - C81 * C6207 + C94 * C6202 - C82 * C6208) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
             (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
                C78890 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C162 +
             (C81 * C1952 - C92 * C1944 + C82 * C1955 - C94 * C1947) * C78891) *
                C78890 * C78697) *
               C4809 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
             (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
                C78890 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C162 +
             (C92 * C4176 - C81 * C4180 + C94 * C4177 - C82 * C4181) * C78891) *
                C78890 * C78697) *
               C4810 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
             (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
                C78890 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C162 +
             (C81 * C6208 - C92 * C6202 + C82 * C7669 - C94 * C7668) * C78891) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78813 -
           (C2066 * C82 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C81) *
               C78890 * C78697) *
              C78592 * C2521 +
          ((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
           (C391 * C82 + C390 * C81) * C78890 * C78813) *
              C78592 * C2522 +
          ((C391 * C81 + C392 * C82) * C78890 * C78813 -
           (C3454 * C82 + C2068 * C81) * C78890 * C78697) *
              C78592 * C2523 +
          ((C3454 * C81 +
            (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
                C82) *
               C78890 * C78697 -
           (C393 * C82 + C392 * C81) * C78890 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
             C390 * C82) *
                C78890 * C78813 -
            (C2066 * C82 +
             (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                 C81) *
                C78890 * C78697) *
               C4809 +
           (((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                 C81 +
             C4298 * C82) *
                C78890 * C78697 -
            (C1161 * C82 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C81) *
                C78890 * C78813) *
               C4810 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
             C1162 * C82) *
                C78890 * C78813 -
            (C7776 * C82 +
             (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                 C81) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          (((C2066 * C81 + C2068 * C82) * C78890 * C78697 -
            (C391 * C82 + C390 * C81) * C78890 * C78813) *
               C4809 +
           ((C1161 * C81 + C1163 * C82) * C78890 * C78813 -
            (C4299 * C82 + C4298 * C81) * C78890 * C78697) *
               C4810 +
           ((C7776 * C81 +
             (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                 C82) *
                C78890 * C78697 -
            (C1164 * C82 + C1162 * C81) * C78890 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C162 +
             (C233 * C1943 - C78890 * C2143) * C78891) *
                C81 +
            ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
               C78697) *
              C78592 * C2521 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78813 +
           (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
            ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
               C78697) *
              C78592 * C2522 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78813 +
           (((C1863 - C1862) * C162 + (C2157 - C2156) * C78891) * C81 +
            ((C3309 - C3310) * C162 + (C3522 - C3523) * C78891) * C82) *
               C78697) *
              C78592 * C2523 +
          ((((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
            ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
               C78813 +
           (((C3310 - C3309) * C162 + (C3523 - C3522) * C78891) * C81 +
            ((C78890 * C3306 - C233 * C3164) * C162 +
             (C78890 * C3520 - C233 * C3378) * C78891) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C162 +
              (C78890 * C435 - C233 * C304) * C78891) *
                 C81 +
             ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C162 +
              (C233 * C1943 - C78890 * C2143) * C78891) *
                 C81 +
             ((C1854 - C1855) * C162 + (C2152 - C2153) * C78891) * C82) *
                C78697) *
               C4809 +
           ((((C233 * C721 - C78890 * C932) * C162 +
              (C233 * C1038 - C78890 * C1238) * C78891) *
                 C81 +
             ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
                C78813 +
            (((C78890 * C4061 - C233 * C3833) * C162 +
              (C78890 * C4397 - C233 * C4175) * C78891) *
                 C81 +
             ((C4070 - C4071) * C162 + (C4402 - C4403) * C78891) * C82) *
                C78697) *
               C4810 +
           ((((C78890 * C934 - C233 * C722) * C162 +
              (C78890 * C1240 - C233 * C1040) * C78891) *
                 C81 +
             ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
                C78813 +
            (((C233 * C5932 - C78890 * C6115) * C162 +
              (C233 * C6201 - C78890 * C6367) * C78891) *
                 C81 +
             ((C7567 - C7568) * C162 + (C7876 - C7877) * C78891) * C82) *
                C78697) *
               C78842) *
              C78798 +
          (((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
             ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
                C78813 +
            (((C1855 - C1854) * C162 + (C2153 - C2152) * C78891) * C81 +
             ((C1862 - C1863) * C162 + (C2156 - C2157) * C78891) * C82) *
                C78697) *
               C4809 +
           ((((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
             ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
                C78813 +
            (((C4071 - C4070) * C162 + (C4403 - C4402) * C78891) * C81 +
             ((C4074 - C4075) * C162 + (C4404 - C4405) * C78891) * C82) *
                C78697) *
               C4810 +
           ((((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
             ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
                C78813 +
            (((C7568 - C7567) * C162 + (C7877 - C7876) * C78891) * C81 +
             ((C78890 * C7564 - C233 * C7358) * C162 +
              (C78890 * C7874 - C233 * C7668) * C78891) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78813 +
           ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
            (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78813 +
           ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
            (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78813 +
           ((C92 * C1629 - C81 * C1641 + C94 * C1631 - C82 * C1645) * C233 +
            (C92 * C2237 - C81 * C2245 + C94 * C2239 - C82 * C2247) * C78890) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
            (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
               C78891 * C78813 +
           ((C81 * C1645 - C92 * C1631 + C82 * C3165 - C94 * C3164) * C233 +
            (C81 * C2247 - C92 * C2239 + C82 * C3590 - C94 * C3589) * C78890) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
             (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
                C78891 * C78813 +
            ((C92 * C1626 - C81 * C1635 + C94 * C1625 - C82 * C1633) * C233 +
             (C92 * C2233 - C81 * C2241 + C94 * C2234 - C82 * C2242) * C78890) *
                C78891 * C78697) *
               C4809 +
           (((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
             (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
                C78891 * C78813 +
            ((C81 * C3837 - C92 * C3833 + C82 * C3839 - C94 * C3834) * C233 +
             (C81 * C4507 - C92 * C4503 + C82 * C4508 - C94 * C4504) * C78890) *
                C78891 * C78697) *
               C4810 +
           (((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
             (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
                C78891 * C78813 +
            ((C92 * C5932 - C81 * C5941 + C94 * C5931 - C82 * C5939) * C233 +
             (C92 * C6447 - C81 * C6453 + C94 * C6448 - C82 * C6454) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
             (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
                C78891 * C78813 +
            ((C81 * C1633 - C92 * C1625 + C82 * C1641 - C94 * C1629) * C233 +
             (C81 * C2242 - C92 * C2234 + C82 * C2245 - C94 * C2237) * C78890) *
                C78891 * C78697) *
               C4809 +
           (((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
             (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
                C78891 * C78813 +
            ((C92 * C3834 - C81 * C3839 + C94 * C3835 - C82 * C3841) * C233 +
             (C92 * C4504 - C81 * C4508 + C94 * C4505 - C82 * C4509) * C78890) *
                C78891 * C78697) *
               C4810 +
           (((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
             (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
                C78891 * C78813 +
            ((C81 * C5939 - C92 * C5931 + C82 * C7359 - C94 * C7358) * C233 +
             (C81 * C6454 - C92 * C6448 + C82 * C7976 - C94 * C7975) * C78890) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78813 +
           (((C162 * C1626 - C78891 * C1731) * C233 +
             (C162 * C2233 - C78891 * C2323) * C78890) *
                C81 +
            ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
               C78697) *
              C78592 * C2521 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78813 +
           (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
            ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
               C78697) *
              C78592 * C2522 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78813 +
           (((C1757 - C1756) * C233 + (C2337 - C2336) * C78890) * C81 +
            ((C3237 - C3238) * C233 + (C3659 - C3660) * C78890) * C82) *
               C78697) *
              C78592 * C2523 +
          ((((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
            ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
               C78813 +
           (((C3238 - C3237) * C233 + (C3660 - C3659) * C78890) * C81 +
            ((C78891 * C3234 - C162 * C3164) * C233 +
             (C78891 * C3657 - C162 * C3589) * C78890) *
                C82) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C233 +
              (C78891 * C545 - C162 * C491) * C78890) *
                 C81 +
             ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
                C78813 +
            (((C162 * C1626 - C78891 * C1731) * C233 +
              (C162 * C2233 - C78891 * C2323) * C78890) *
                 C81 +
             ((C1748 - C1749) * C233 + (C2332 - C2333) * C78890) * C82) *
                C78697) *
               C4809 +
           ((((C162 * C721 - C78891 * C826) * C233 +
              (C162 * C1328 - C78891 * C1418) * C78890) *
                 C81 +
             ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
                C78813 +
            (((C78891 * C3947 - C162 * C3833) * C233 +
              (C78891 * C4609 - C162 * C4503) * C78890) *
                 C81 +
             ((C3956 - C3957) * C233 + (C4614 - C4615) * C78890) * C82) *
                C78697) *
               C4810 +
           ((((C78891 * C828 - C162 * C722) * C233 +
              (C78891 * C1420 - C162 * C1330) * C78890) *
                 C81 +
             ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
                C78813 +
            (((C162 * C5932 - C78891 * C6029) * C233 +
              (C162 * C6447 - C78891 * C6533) * C78890) *
                 C81 +
             ((C7463 - C7464) * C233 + (C8077 - C8078) * C78890) * C82) *
                C78697) *
               C78842) *
              C78798 +
          (((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
             ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
                C78813 +
            (((C1749 - C1748) * C233 + (C2333 - C2332) * C78890) * C81 +
             ((C1756 - C1757) * C233 + (C2336 - C2337) * C78890) * C82) *
                C78697) *
               C4809 +
           ((((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
             ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
                C78813 +
            (((C3957 - C3956) * C233 + (C4615 - C4614) * C78890) * C81 +
             ((C3960 - C3961) * C233 + (C4616 - C4617) * C78890) * C82) *
                C78697) *
               C4810 +
           ((((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
             ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
                C78813 +
            (((C7464 - C7463) * C233 + (C8078 - C8077) * C78890) * C81 +
             ((C78891 * C7460 - C162 * C7358) * C233 +
              (C78891 * C8075 - C162 * C7975) * C78890) *
                 C82) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78813 -
           (C2450 * C82 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C78891 * C81) *
               C78697) *
              C78592 * C2521 +
          ((C2450 * C81 + C2452 * C82) * C78697 -
           (C638 * C82 + C637 * C81) * C78813) *
              C78592 * C2522 +
          ((C638 * C81 + C639 * C82) * C78813 -
           (C3735 * C82 + C2452 * C81) * C78697) *
              C78592 * C2523 +
          ((C3735 * C81 +
            (C233 * C3306 - C601 * C3164 - C233 * C3589 + C78890 * C3726) *
                C78891 * C82) *
               C78697 -
           (C640 * C82 + C639 * C81) * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                 C81 +
             C637 * C82) *
                C78813 -
            (C2450 * C82 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C78891 * C81) *
                C78697) *
               C4809 +
           (((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                 C78891 * C81 +
             C4734 * C82) *
                C78697 -
            (C1545 * C82 +
             (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                 C78891 * C81) *
                C78813) *
               C4810 +
           (((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                 C78891 * C81 +
             C1546 * C82) *
                C78813 -
            (C8185 * C82 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C78891 * C81) *
                C78697) *
               C78842) *
              C78798 +
          (((C2450 * C81 + C2452 * C82) * C78697 -
            (C638 * C82 + C637 * C81) * C78813) *
               C4809 +
           ((C1545 * C81 + C1547 * C82) * C78813 -
            (C4735 * C82 + C4734 * C81) * C78697) *
               C4810 +
           ((C8185 * C81 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C78891 * C82) *
                C78697 -
            (C1548 * C82 + C1546 * C81) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C87 -
                    (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                     C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                        C78890 * C78891 * C78610 * C78592 * C88 +
                    (C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                     C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C89 -
                    (C94 * C110 - C95 * C100 - C94 * C111 + C82 * C118 +
                     C92 * C108 - C93 * C99 - C92 * C109 + C81 * C117) *
                        C78890 * C78891 * C78610 * C78592 * C90 +
                    (C92 * C110 - C93 * C100 - C92 * C111 + C81 * C118 +
                     C94 * C112 - C95 * C101 - C94 * C113 + C82 * C119) *
                        C78890 * C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C717 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C78868 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C718 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C78883 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C78868 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                      C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                      C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                      C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78880 +
                    ((C92 * C728 - C93 * C720 - C92 * C729 + C81 * C744 +
                      C94 * C736 - C95 * C724 - C94 * C737 + C82 * C748) *
                         C78890 * C78891 * C78610 * C4810 -
                     (C94 * C106 - C95 * C98 - C94 * C107 + C82 * C116 +
                      C92 * C104 - C93 * C97 - C92 * C105 + C81 * C115) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C738 - C95 * C725 - C94 * C739 + C82 * C749 +
                      C92 * C734 - C93 * C723 - C92 * C735 + C81 * C747) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78864 +
                    ((C92 * C106 - C93 * C98 - C92 * C107 + C81 * C116 +
                      C94 * C108 - C95 * C99 - C94 * C109 + C82 * C117) *
                         C78890 * C78891 * C78610 * C4809 -
                     (C94 * C740 - C95 * C726 - C94 * C741 + C82 * C750 +
                      C92 * C736 - C93 * C724 - C92 * C737 + C81 * C748) *
                         C78890 * C78891 * C78610 * C4810 +
                     (C92 * C738 - C93 * C725 - C92 * C739 + C81 * C749 +
                      C94 * C742 - C95 * C727 - C94 * C743 + C82 * C751) *
                         C78890 * C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((C92 * C102 - C93 * C96 - C92 * C103 + C81 * C114 +
                     C94 * C104 - C95 * C97 - C94 * C105 + C82 * C115) *
                        C78890 * C78891 * C78610 * C5449 -
                    (C94 * C728 - C95 * C720 - C94 * C729 + C82 * C744 +
                     C92 * C730 - C93 * C721 - C92 * C731 + C81 * C745) *
                        C78890 * C78891 * C78610 * C5450 +
                    (C92 * C732 - C93 * C722 - C92 * C733 + C81 * C746 +
                     C94 * C734 - C95 * C723 - C94 * C735 + C82 * C747) *
                        C78890 * C78891 * C78610 * C5451 -
                    (C94 * C5459 - C95 * C5455 - C94 * C5460 + C82 * C5467 +
                     C92 * C5461 - C93 * C5456 - C92 * C5462 + C81 * C5468) *
                        C78890 * C78891 * C78610 * C5452 +
                    (C92 * C5463 - C93 * C5457 - C92 * C5464 + C81 * C5469 +
                     C94 * C5465 - C95 * C5458 - C94 * C5466 + C82 * C5470) *
                        C78890 * C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexy[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C92 + (C179 - C178) * C81 +
                     (C180 - C181) * C94 + (C182 - C183) * C82) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C92 + (C183 - C182) * C81 +
                     (C184 - C185) * C94 + (C186 - C187) * C82) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C92 + (C187 - C186) * C81 +
                     (C188 - C189) * C94 + (C190 - C191) * C82) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C92 + (C191 - C190) * C81 +
                     (C78891 * C168 - C162 * C101) * C94 +
                     (C78891 * C174 - C162 * C113) * C82) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C78883 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C162 * C726 - C78891 * C832) * C94 +
                      (C162 * C741 - C78891 * C840) * C82) *
                         C78890 * C78610 * C78868 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C92 +
                      (C78891 * C169 - C162 * C103) * C81 +
                      (C176 - C177) * C94 + (C178 - C179) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C92 +
                      (C162 * C731 - C78891 * C834) * C81 +
                      (C843 - C844) * C94 + (C845 - C846) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C92 +
                      (C78891 * C836 - C162 * C733) * C81 +
                      (C847 - C848) * C94 + (C849 - C850) * C82) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C92 + (C179 - C178) * C81 +
                      (C180 - C181) * C94 + (C182 - C183) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C844 - C843) * C92 + (C846 - C845) * C81 +
                      (C851 - C852) * C94 + (C853 - C854) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C848 - C847) * C92 + (C850 - C849) * C81 +
                      (C855 - C856) * C94 + (C857 - C858) * C82) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C92 + (C183 - C182) * C81 +
                      (C184 - C185) * C94 + (C186 - C187) * C82) *
                         C78890 * C78610 * C4809 +
                     ((C852 - C851) * C92 + (C854 - C853) * C81 +
                      (C2598 - C2599) * C94 + (C2600 - C2601) * C82) *
                         C78890 * C78610 * C4810 +
                     ((C856 - C855) * C92 + (C858 - C857) * C81 +
                      (C78891 * C833 - C162 * C727) * C94 +
                      (C78891 * C841 - C162 * C743) * C82) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C92 +
                     (C78891 * C169 - C162 * C103) * C81 + (C176 - C177) * C94 +
                     (C178 - C179) * C82) *
                        C78890 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C92 +
                     (C162 * C731 - C78891 * C834) * C81 + (C843 - C844) * C94 +
                     (C845 - C846) * C82) *
                        C78890 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C92 +
                     (C78891 * C836 - C162 * C733) * C81 + (C847 - C848) * C94 +
                     (C849 - C850) * C82) *
                        C78890 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C92 +
                     (C162 * C5462 - C78891 * C5517) * C81 +
                     (C162 * C5455 - C78891 * C5514) * C94 +
                     (C162 * C5460 - C78891 * C5518) * C82) *
                        C78890 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C92 +
                     (C78891 * C5519 - C162 * C5464) * C81 +
                     (C78891 * C5516 - C162 * C5458) * C94 +
                     (C78891 * C5520 - C162 * C5466) * C82) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eexz[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C92 + (C250 - C249) * C81 +
                     (C251 - C252) * C94 + (C253 - C254) * C82) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C92 + (C254 - C253) * C81 +
                     (C255 - C256) * C94 + (C257 - C258) * C82) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C92 + (C258 - C257) * C81 +
                     (C259 - C260) * C94 + (C261 - C262) * C82) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C92 + (C262 - C261) * C81 +
                     (C78890 * C239 - C233 * C101) * C94 +
                     (C78890 * C245 - C233 * C113) * C82) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C78883 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C233 * C726 - C78890 * C938) * C94 +
                      (C233 * C741 - C78890 * C946) * C82) *
                         C78891 * C78610 * C78868 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C92 +
                      (C78890 * C240 - C233 * C103) * C81 +
                      (C247 - C248) * C94 + (C249 - C250) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C233 * C721 - C78890 * C932) * C92 +
                      (C233 * C731 - C78890 * C940) * C81 +
                      (C949 - C950) * C94 + (C951 - C952) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C78890 * C934 - C233 * C722) * C92 +
                      (C78890 * C942 - C233 * C733) * C81 +
                      (C953 - C954) * C94 + (C955 - C956) * C82) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C92 + (C250 - C249) * C81 +
                      (C251 - C252) * C94 + (C253 - C254) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C950 - C949) * C92 + (C952 - C951) * C81 +
                      (C957 - C958) * C94 + (C959 - C960) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C954 - C953) * C92 + (C956 - C955) * C81 +
                      (C961 - C962) * C94 + (C963 - C964) * C82) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C92 + (C254 - C253) * C81 +
                      (C255 - C256) * C94 + (C257 - C258) * C82) *
                         C78891 * C78610 * C4809 +
                     ((C958 - C957) * C92 + (C960 - C959) * C81 +
                      (C2670 - C2671) * C94 + (C2672 - C2673) * C82) *
                         C78891 * C78610 * C4810 +
                     ((C962 - C961) * C92 + (C964 - C963) * C81 +
                      (C78890 * C939 - C233 * C727) * C94 +
                      (C78890 * C947 - C233 * C743) * C82) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C92 +
                     (C78890 * C240 - C233 * C103) * C81 + (C247 - C248) * C94 +
                     (C249 - C250) * C82) *
                        C78891 * C78610 * C5449 +
                    ((C233 * C721 - C78890 * C932) * C92 +
                     (C233 * C731 - C78890 * C940) * C81 + (C949 - C950) * C94 +
                     (C951 - C952) * C82) *
                        C78891 * C78610 * C5450 +
                    ((C78890 * C934 - C233 * C722) * C92 +
                     (C78890 * C942 - C233 * C733) * C81 + (C953 - C954) * C94 +
                     (C955 - C956) * C82) *
                        C78891 * C78610 * C5451 +
                    ((C233 * C5456 - C78890 * C5563) * C92 +
                     (C233 * C5462 - C78890 * C5567) * C81 +
                     (C233 * C5455 - C78890 * C5564) * C94 +
                     (C233 * C5460 - C78890 * C5568) * C82) *
                        C78891 * C78610 * C5452 +
                    ((C78890 * C5565 - C233 * C5457) * C92 +
                     (C78890 * C5569 - C233 * C5464) * C81 +
                     (C78890 * C5566 - C233 * C5458) * C94 +
                     (C78890 * C5570 - C233 * C5466) * C82) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
           (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
              C78890 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
           (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
              C78890 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C162 +
           (C92 * C307 - C81 * C313 + C94 * C308 - C82 * C314) * C78891) *
              C78890 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C162 +
           (C81 * C314 - C92 * C308 + C82 * C315 - C94 * C309) * C78891) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
            (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
            (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
            (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C162 +
            (C92 * C305 - C81 * C311 + C94 * C306 - C82 * C312) * C78891) *
               C78890 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C162 +
            (C81 * C1047 - C92 * C1039 + C82 * C1050 - C94 * C1042) * C78891) *
               C78890 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C162 +
            (C92 * C1041 - C81 * C1049 + C94 * C1043 - C82 * C1051) * C78891) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C162 +
            (C81 * C312 - C92 * C306 + C82 * C313 - C94 * C307) * C78891) *
               C78890 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C162 +
            (C92 * C1042 - C81 * C1050 + C94 * C1044 - C82 * C1052) * C78891) *
               C78890 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C162 +
            (C81 * C1051 - C92 * C1043 + C82 * C1053 - C94 * C1045) * C78891) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C162 +
           (C81 * C310 - C92 * C304 + C82 * C311 - C94 * C305) * C78891) *
              C78890 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C162 +
           (C92 * C1038 - C81 * C1046 + C94 * C1039 - C82 * C1047) * C78891) *
              C78890 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C162 +
           (C81 * C1048 - C92 * C1040 + C82 * C1049 - C94 * C1041) * C78891) *
              C78890 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C162 +
           (C92 * C5613 - C81 * C5617 + C94 * C5614 - C82 * C5618) * C78891) *
              C78890 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C162 +
           (C81 * C5619 - C92 * C5615 + C82 * C5620 - C94 * C5616) * C78891) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C78592 * C87 -
          (C391 * C82 + C390 * C81) * C78890 * C78610 * C78592 * C88 +
          (C391 * C81 + C392 * C82) * C78890 * C78610 * C78592 * C89 -
          (C393 * C82 + C392 * C81) * C78890 * C78610 * C78592 * C90 +
          (C393 * C81 +
           (C162 * C168 - C358 * C101 - C162 * C309 + C78891 * C364) * C82) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C78883 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C717 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C78868 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C78883 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C718 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C78883 -
           ((C162 * C832 - C358 * C726 - C162 * C1044 + C78891 * C1134) * C82 +
            C1163 * C81) *
               C78890 * C78610 * C78868 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
            C390 * C82) *
               C78890 * C78610 * C4809 -
           (C1161 * C82 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
               C78890 * C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
            C1162 * C82) *
               C78890 * C78610 * C78842) *
              C78880 +
          ((C1161 * C81 + C1163 * C82) * C78890 * C78610 * C4810 -
           (C391 * C82 + C390 * C81) * C78890 * C78610 * C4809 -
           (C1164 * C82 + C1162 * C81) * C78890 * C78610 * C78842) *
              C78864 +
          ((C391 * C81 + C392 * C82) * C78890 * C78610 * C4809 -
           (C2815 * C82 + C1163 * C81) * C78890 * C78610 * C4810 +
           (C1164 * C81 +
            (C162 * C833 - C358 * C727 - C162 * C1045 + C78891 * C1135) * C82) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C81 +
           C390 * C82) *
              C78890 * C78610 * C5449 -
          (C1161 * C82 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) * C81) *
              C78890 * C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) * C81 +
           C1162 * C82) *
              C78890 * C78610 * C5451 -
          ((C162 * C5514 - C358 * C5455 - C162 * C5614 + C78891 * C5663) * C82 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C81) *
              C78890 * C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) * C81 +
           (C162 * C5516 - C358 * C5458 - C162 * C5616 + C78891 * C5666) *
               C82) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
           ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
           ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C162 + (C447 - C446) * C78891) * C81 +
           ((C259 - C260) * C162 + (C448 - C449) * C78891) * C82) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C162 + (C449 - C448) * C78891) * C81 +
           ((C78890 * C239 - C233 * C101) * C162 +
            (C78890 * C440 - C233 * C309) * C78891) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C78883 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C78868 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C78883 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C78868 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C78883 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C233 * C726 - C78890 * C938) * C162 +
             (C233 * C1044 - C78890 * C1244) * C78891) *
                C82) *
               C78610 * C78868 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C162 +
             (C78890 * C435 - C233 * C304) * C78891) *
                C81 +
            ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
               C78610 * C4809 +
           (((C233 * C721 - C78890 * C932) * C162 +
             (C233 * C1038 - C78890 * C1238) * C78891) *
                C81 +
            ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
               C78610 * C4810 +
           (((C78890 * C934 - C233 * C722) * C162 +
             (C78890 * C1240 - C233 * C1040) * C78891) *
                C81 +
            ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C162 + (C443 - C442) * C78891) * C81 +
            ((C251 - C252) * C162 + (C444 - C445) * C78891) * C82) *
               C78610 * C4809 +
           (((C950 - C949) * C162 + (C1248 - C1247) * C78891) * C81 +
            ((C957 - C958) * C162 + (C1251 - C1252) * C78891) * C82) *
               C78610 * C4810 +
           (((C954 - C953) * C162 + (C1250 - C1249) * C78891) * C81 +
            ((C961 - C962) * C162 + (C1253 - C1254) * C78891) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C162 + (C445 - C444) * C78891) * C81 +
            ((C255 - C256) * C162 + (C446 - C447) * C78891) * C82) *
               C78610 * C4809 +
           (((C958 - C957) * C162 + (C1252 - C1251) * C78891) * C81 +
            ((C2670 - C2671) * C162 + (C2883 - C2884) * C78891) * C82) *
               C78610 * C4810 +
           (((C962 - C961) * C162 + (C1254 - C1253) * C78891) * C81 +
            ((C78890 * C939 - C233 * C727) * C162 +
             (C78890 * C1245 - C233 * C1045) * C78891) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C162 +
            (C78890 * C435 - C233 * C304) * C78891) *
               C81 +
           ((C247 - C248) * C162 + (C442 - C443) * C78891) * C82) *
              C78610 * C5449 +
          (((C233 * C721 - C78890 * C932) * C162 +
            (C233 * C1038 - C78890 * C1238) * C78891) *
               C81 +
           ((C949 - C950) * C162 + (C1247 - C1248) * C78891) * C82) *
              C78610 * C5450 +
          (((C78890 * C934 - C233 * C722) * C162 +
            (C78890 * C1240 - C233 * C1040) * C78891) *
               C81 +
           ((C953 - C954) * C162 + (C1249 - C1250) * C78891) * C82) *
              C78610 * C5451 +
          (((C233 * C5456 - C78890 * C5563) * C162 +
            (C233 * C5613 - C78890 * C5709) * C78891) *
               C81 +
           ((C233 * C5455 - C78890 * C5564) * C162 +
            (C233 * C5614 - C78890 * C5710) * C78891) *
               C82) *
              C78610 * C5452 +
          (((C78890 * C5565 - C233 * C5457) * C162 +
            (C78890 * C5711 - C233 * C5615) * C78891) *
               C81 +
           ((C78890 * C5566 - C233 * C5458) * C162 +
            (C78890 * C5712 - C233 * C5616) * C78891) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C78592 * C87 +
          ((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
           (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
              C78891 * C78610 * C78592 * C88 +
          ((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
           (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
              C78891 * C78610 * C78592 * C89 +
          ((C92 * C99 - C81 * C108 + C94 * C100 - C82 * C110) * C233 +
           (C92 * C494 - C81 * C500 + C94 * C495 - C82 * C501) * C78890) *
              C78891 * C78610 * C78592 * C90 +
          ((C81 * C110 - C92 * C100 + C82 * C112 - C94 * C101) * C233 +
           (C81 * C501 - C92 * C495 + C82 * C502 - C94 * C496) * C78890) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C78883 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C78868 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C78883 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C78868 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
            (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
            (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
            (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C92 * C97 - C81 * C104 + C94 * C98 - C82 * C106) * C233 +
            (C92 * C492 - C81 * C498 + C94 * C493 - C82 * C499) * C78890) *
               C78891 * C78610 * C4809 +
           ((C81 * C728 - C92 * C720 + C82 * C736 - C94 * C724) * C233 +
            (C81 * C1337 - C92 * C1329 + C82 * C1340 - C94 * C1332) * C78890) *
               C78891 * C78610 * C4810 +
           ((C92 * C723 - C81 * C734 + C94 * C725 - C82 * C738) * C233 +
            (C92 * C1331 - C81 * C1339 + C94 * C1333 - C82 * C1341) * C78890) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C81 * C106 - C92 * C98 + C82 * C108 - C94 * C99) * C233 +
            (C81 * C499 - C92 * C493 + C82 * C500 - C94 * C494) * C78890) *
               C78891 * C78610 * C4809 +
           ((C92 * C724 - C81 * C736 + C94 * C726 - C82 * C740) * C233 +
            (C92 * C1332 - C81 * C1340 + C94 * C1334 - C82 * C1342) * C78890) *
               C78891 * C78610 * C4810 +
           ((C81 * C738 - C92 * C725 + C82 * C742 - C94 * C727) * C233 +
            (C81 * C1341 - C92 * C1333 + C82 * C1343 - C94 * C1335) * C78890) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C81 * C102 - C92 * C96 + C82 * C104 - C94 * C97) * C233 +
           (C81 * C497 - C92 * C491 + C82 * C498 - C94 * C492) * C78890) *
              C78891 * C78610 * C5449 +
          ((C92 * C721 - C81 * C730 + C94 * C720 - C82 * C728) * C233 +
           (C92 * C1328 - C81 * C1336 + C94 * C1329 - C82 * C1337) * C78890) *
              C78891 * C78610 * C5450 +
          ((C81 * C732 - C92 * C722 + C82 * C734 - C94 * C723) * C233 +
           (C81 * C1338 - C92 * C1330 + C82 * C1339 - C94 * C1331) * C78890) *
              C78891 * C78610 * C5451 +
          ((C92 * C5456 - C81 * C5461 + C94 * C5455 - C82 * C5459) * C233 +
           (C92 * C5755 - C81 * C5759 + C94 * C5756 - C82 * C5760) * C78890) *
              C78891 * C78610 * C5452 +
          ((C81 * C5463 - C92 * C5457 + C82 * C5465 - C94 * C5458) * C233 +
           (C81 * C5761 - C92 * C5757 + C82 * C5762 - C94 * C5758) * C78890) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
           ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
           ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C233 + (C557 - C556) * C78890) * C81 +
           ((C188 - C189) * C233 + (C558 - C559) * C78890) * C82) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C233 + (C559 - C558) * C78890) * C81 +
           ((C78891 * C168 - C162 * C101) * C233 +
            (C78891 * C550 - C162 * C496) * C78890) *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C78883 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C78868 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C78883 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C162 * C726 - C78891 * C832) * C233 +
             (C162 * C1334 - C78891 * C1424) * C78890) *
                C82) *
               C78610 * C78868 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C233 +
             (C78891 * C545 - C162 * C491) * C78890) *
                C81 +
            ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C233 +
             (C162 * C1328 - C78891 * C1418) * C78890) *
                C81 +
            ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C233 +
             (C78891 * C1420 - C162 * C1330) * C78890) *
                C81 +
            ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C233 + (C553 - C552) * C78890) * C81 +
            ((C180 - C181) * C233 + (C554 - C555) * C78890) * C82) *
               C78610 * C4809 +
           (((C844 - C843) * C233 + (C1428 - C1427) * C78890) * C81 +
            ((C851 - C852) * C233 + (C1431 - C1432) * C78890) * C82) *
               C78610 * C4810 +
           (((C848 - C847) * C233 + (C1430 - C1429) * C78890) * C81 +
            ((C855 - C856) * C233 + (C1433 - C1434) * C78890) * C82) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C233 + (C555 - C554) * C78890) * C81 +
            ((C184 - C185) * C233 + (C556 - C557) * C78890) * C82) *
               C78610 * C4809 +
           (((C852 - C851) * C233 + (C1432 - C1431) * C78890) * C81 +
            ((C2598 - C2599) * C233 + (C3020 - C3021) * C78890) * C82) *
               C78610 * C4810 +
           (((C856 - C855) * C233 + (C1434 - C1433) * C78890) * C81 +
            ((C78891 * C833 - C162 * C727) * C233 +
             (C78891 * C1425 - C162 * C1335) * C78890) *
                C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C233 +
            (C78891 * C545 - C162 * C491) * C78890) *
               C81 +
           ((C176 - C177) * C233 + (C552 - C553) * C78890) * C82) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C233 +
            (C162 * C1328 - C78891 * C1418) * C78890) *
               C81 +
           ((C843 - C844) * C233 + (C1427 - C1428) * C78890) * C82) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C233 +
            (C78891 * C1420 - C162 * C1330) * C78890) *
               C81 +
           ((C847 - C848) * C233 + (C1429 - C1430) * C78890) * C82) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C233 +
            (C162 * C5755 - C78891 * C5805) * C78890) *
               C81 +
           ((C162 * C5455 - C78891 * C5514) * C233 +
            (C162 * C5756 - C78891 * C5806) * C78890) *
               C82) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C233 +
            (C78891 * C5807 - C162 * C5757) * C78890) *
               C81 +
           ((C78891 * C5516 - C162 * C5458) * C233 +
            (C78891 * C5808 - C162 * C5758) * C78890) *
               C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C78592 * C87 -
          (C638 * C82 + C637 * C81) * C78610 * C78592 * C88 +
          (C638 * C81 + C639 * C82) * C78610 * C78592 * C89 -
          (C640 * C82 + C639 * C81) * C78610 * C78592 * C90 +
          (C640 * C81 +
           (C233 * C239 - C601 * C101 - C233 * C496 + C78890 * C607) * C78891 *
               C82) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C78883 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C78868 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C717 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C78868 -
           (C638 * C82 + C637 * C81) * C78610 * C78883 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C718 +
          ((C638 * C81 + C639 * C82) * C78610 * C78883 -
           ((C233 * C938 - C601 * C726 - C233 * C1334 + C78890 * C1514) *
                C78891 * C82 +
            C1547 * C81) *
               C78610 * C78868 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
                C81 +
            C637 * C82) *
               C78610 * C4809 -
           (C1545 * C82 +
            (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                C78891 * C81) *
               C78610 * C4810 +
           ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
                C78891 * C81 +
            C1546 * C82) *
               C78610 * C78842) *
              C78880 +
          ((C1545 * C81 + C1547 * C82) * C78610 * C4810 -
           (C638 * C82 + C637 * C81) * C78610 * C4809 -
           (C1548 * C82 + C1546 * C81) * C78610 * C78842) *
              C78864 +
          ((C638 * C81 + C639 * C82) * C78610 * C4809 -
           (C3096 * C82 + C1547 * C81) * C78610 * C4810 +
           (C1548 * C81 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C78891 * C82) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C78891 *
               C81 +
           C637 * C82) *
              C78610 * C5449 -
          (C1545 * C82 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C78891 * C81) *
              C78610 * C5450 +
          ((C233 * C934 - C601 * C722 - C233 * C1330 + C78890 * C1510) *
               C78891 * C81 +
           C1546 * C82) *
              C78610 * C5451 -
          ((C233 * C5564 - C601 * C5455 - C233 * C5756 + C78890 * C5851) *
               C78891 * C82 +
           (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
               C78891 * C81) *
              C78610 * C5452 +
          ((C233 * C5565 - C601 * C5457 - C233 * C5757 + C78890 * C5853) *
               C78891 * C81 +
           (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
               C78891 * C82) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78651 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78658 +
           (C26817 * C26355 + C31007 * C26356) * C78610 * C14943) *
              C78569 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78658 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78651 -
           (C32231 * C26356 + C26819 * C26355) * C78610 * C14943) *
              C78578 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78651 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78658 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78651 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78658 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C14943) *
              C78569 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78651 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78658 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C14943) *
              C78578 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78651 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78658 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78651 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78658 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78610 * C14943) *
              C78569 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78651 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78658 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C14943) *
              C78578 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78651 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78658 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78651 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78658 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C78610 * C14943) *
                        C78569 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78651 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78658 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                         C78890 * C78610 * C14943) *
                        C78578 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C78651 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78658 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C14943) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78651 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78658 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C14943) *
              C78569 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78658 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78651 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C14943) *
              C78578 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78651 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78658 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78651 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78658 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C78610 * C14943) *
                        C78569 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78651 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78658 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C14943) *
                        C78578 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C78651 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78658 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C14943) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78651 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78658 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78610 * C14943) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78651 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78658 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
               C78610 * C14943) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78651 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78658 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78651 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78658 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C14943) *
              C78569 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78651 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78658 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C14943) *
              C78578 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78651 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78658 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78651 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78658 +
           (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C14943) *
              C78569 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78658 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78651 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C14943) *
              C78578 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78651 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78658 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78651 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C78658 +
           ((C26817 * C26355 + C31007 * C26356) * C78813 -
            (C33739 * C26356 + C31495 * C26355) * C78697) *
               C14943) *
              C13455 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C78651 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78658 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78651 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78658 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C14943) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78651 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78658 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78651 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78658 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C78813 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                 C26356) *
                C78697) *
               C14943) *
              C13455 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78651 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78658 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C78813 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78651 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78658 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C78813 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                C78890 * C78697) *
               C14943) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78651 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78658 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C78813 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78651 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C78658 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C78813 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C14943) *
              C13455 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C78651 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78658 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78651 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78658 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C78813 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                C78889 * C78697) *
               C14943) *
              C13455 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78651 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78658 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C78813 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78651 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78658 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C78813 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
                C78697) *
               C14943) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78651 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78658 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C78813 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78651 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78658 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C14943) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78651 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78658 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78651 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C78658 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C78813 -
            (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
               C14943) *
              C13455 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C78651 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78658 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78893 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78886 +
           (C26817 * C26355 + C31007 * C26356) * C78610 * C78873 -
           (C31008 * C26356 + C31007 * C26355) * C78610 * C78852) *
              C13455 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78886 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78893 -
           (C32231 * C26356 + C26819 * C26355) * C78610 * C78873 +
           (C32231 * C26355 + (C26357 * C5465 - C26358 * C5458 -
                               C26357 * C5466 + C78889 * C5470) *
                                  C78890 * C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C12851 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78655) *
              C78892 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78655 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C12851) *
              C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C12851 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78655) *
              C78866 +
          ((C28215 * C26355 +
            (C26357 * C742 - C26358 * C727 - C26357 * C743 + C78889 * C751) *
                C78890 * C26356) *
               C78610 * C78655 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78884 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78870 +
            ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
              C78889 * C1651) *
                 C78890 * C26355 +
             C31494 * C26356) *
                C78845) *
               C12851 +
           ((C29463 * C26355 + C31495 * C26356) * C78870 -
            (C26817 * C26356 + C26816 * C26355) * C78884 -
            (C31496 * C26356 + C31494 * C26355) * C78845) *
               C78655) *
              C13455 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78870 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78884 -
            (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                                C26357 * C1640 + C78889 * C1652) *
                                   C78890 * C26355) *
                C78845) *
               C12851 +
           ((C26818 * C26355 + C26819 * C26356) * C78884 -
            (C32871 * C26356 + C29464 * C26355) * C78870 +
            (C36130 * C26355 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C78890 * C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78893 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78886 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78873 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78610 * C78852) *
              C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78893 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78886 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78873 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C26357 +
            (C26355 * C5518 - C26401 * C5460 + C26356 * C5520 -
             C26402 * C5466) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C26357 +
            (C26355 * C840 - C26401 * C741 + C26356 * C841 - C26402 * C743) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78884 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78870 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C26357 +
             (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
              C26402 * C5938) *
                 C78889) *
                C78890 * C78845) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78884 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78870 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C26357 +
             (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
              C26356 * C6037) *
                 C78889) *
                C78890 * C78845) *
               C78655) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78884 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78870 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C26357 +
             (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
              C26356 * C6034) *
                 C78889) *
                C78890 * C78845) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78884 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78870 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C26357 +
             (C26355 * C6034 - C26401 * C5936 + C26356 * C6038 -
              C26402 * C5946) *
                 C78889) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78893 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78886 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78610 * C78873 +
           (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78610 * C78852) *
              C13455 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78893 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78886 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78873 +
           (((C6835 - C6834) * C26357 + (C6837 - C6836) * C78889) * C26355 +
            ((C78890 * C5566 - C233 * C5458) * C26357 +
             (C78890 * C5570 - C233 * C5466) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C12851 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78892 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C12851 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78655) *
              C78882 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C12851 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78655) *
              C78866 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78610 * C12851 +
           (((C2671 - C2670) * C26357 + (C2673 - C2672) * C78889) * C26355 +
            ((C78890 * C939 - C233 * C727) * C26357 +
             (C78890 * C947 - C233 * C743) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78884 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78870 +
            (((C78890 * C1839 - C233 * C1627) * C26357 +
              (C78890 * C1847 - C233 * C1638) * C78889) *
                 C26355 +
             ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                 C26356) *
                C78845) *
               C12851 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78884 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78870 +
            (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) *
                 C26355 +
             ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                 C26356) *
                C78845) *
               C78655) *
              C13455 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78884 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78870 +
            (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
             ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                 C26356) *
                C78845) *
               C12851 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78884 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78870 +
            (((C10901 - C10900) * C26357 + (C10903 - C10902) * C78889) *
                 C26355 +
             ((C78890 * C6118 - C233 * C5934) * C26357 +
              (C78890 * C6124 - C233 * C5946) * C78889) *
                 C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78610 * C78893 +
           ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78610 * C78886 +
           ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C78610 * C78873 +
           ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C78610 * C78852) *
              C13455 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78610 * C78893 +
           ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
            (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
               C78890 * C78610 * C78886 +
           ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
            (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
               C78890 * C78610 * C78873 +
           ((C32431 - C32430) * C26401 + (C32433 - C32432) * C26355 +
            (C78889 * C5465 - C26357 * C5458) * C26402 +
            (C78889 * C5620 - C26357 * C5616) * C26356) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78610 * C12851 +
           ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78610 * C78655) *
              C78892 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78610 * C12851 +
           ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
            (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
               C78890 * C78610 * C78655) *
              C78882 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78610 * C12851 +
           ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
            (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
               C78890 * C78610 * C78655) *
              C78866 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C78610 * C12851 +
           ((C28415 - C28414) * C26401 + (C28417 - C28416) * C26355 +
            (C78889 * C742 - C26357 * C727) * C26402 +
            (C78889 * C1053 - C26357 * C1045) * C26356) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78884 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78870 +
            ((C78889 * C1637 - C26357 * C1627) * C26401 +
             (C78889 * C1953 - C26357 * C1945) * C26355 +
             (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                C78890 * C78845) *
               C12851 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78884 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78870 +
            ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
             (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                C78890 * C78845) *
               C78655) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78884 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78870 +
            ((C26357 * C1628 - C78889 * C1639) * C26401 +
             (C26357 * C1946 - C78889 * C1954) * C26355 +
             (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
                C78890 * C78845) *
               C12851 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78884 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78870 +
            ((C36426 - C36425) * C26401 + (C36428 - C36427) * C26355 +
             (C78889 * C5945 - C26357 * C5934) * C26402 +
             (C78889 * C6210 - C26357 * C6204) * C26356) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78893 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78886 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78873 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78610 * C78852) *
              C13455 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78886 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78893 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78873 +
           (C26401 * C5514 - C26529 * C5455 - C26401 * C5614 + C26355 * C5663 +
            C26402 * C5516 - C26530 * C5458 - C26402 * C5616 + C26356 * C5666) *
               C78889 * C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C12851 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78655) *
              C78892 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C12851) *
              C78882 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C12851 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78655) *
              C78866 +
          ((C26401 * C832 - C26529 * C726 - C26401 * C1044 + C26355 * C1134 +
            C26402 * C833 - C26530 * C727 - C26402 * C1045 + C26356 * C1135) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78884 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78870 +
            (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
             C26402 * C6027 - C26530 * C5930 - C26402 * C6199 +
             C26356 * C6286) *
                C78889 * C78890 * C78845) *
               C12851 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78870 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78884 -
            (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
             C26401 * C6027 - C26529 * C5930 - C26401 * C6199 +
             C26355 * C6286) *
                C78889 * C78890 * C78845) *
               C78655) *
              C13455 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78870 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78884 -
            (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
             C26401 * C1734 - C26529 * C1628 - C26401 * C1946 +
             C26355 * C2036) *
                C78889 * C78890 * C78845) *
               C12851 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78884 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78870 +
            (C26401 * C6028 - C26529 * C5929 - C26401 * C6200 + C26355 * C6285 +
             C26402 * C6032 - C26530 * C5934 - C26402 * C6204 +
             C26356 * C6290) *
                C78889 * C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78610 * C78893 +
           ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78610 * C78886 +
           ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C78610 * C78873 +
           ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78610 * C78893 +
           ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
            (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
               C78889 * C78610 * C78886 +
           ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
            (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
               C78889 * C78610 * C78873 +
           ((C6835 - C6834) * C26401 + (C7048 - C7047) * C26355 +
            (C78890 * C5566 - C233 * C5458) * C26402 +
            (C78890 * C5712 - C233 * C5616) * C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78610 * C12851 +
           ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78610 * C12851 +
           ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
            (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78610 * C12851 +
           ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
            (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C78610 * C12851 +
           ((C2671 - C2670) * C26401 + (C2884 - C2883) * C26355 +
            (C78890 * C939 - C233 * C727) * C26402 +
            (C78890 * C1245 - C233 * C1045) * C26356) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78884 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78870 +
            ((C78890 * C1839 - C233 * C1627) * C26401 +
             (C78890 * C2145 - C233 * C1945) * C26355 +
             (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                C78889 * C78845) *
               C12851 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78884 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78870 +
            ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
             (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                C78889 * C78845) *
               C78655) *
              C13455 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78884 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78870 +
            ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
             (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                C78889 * C78845) *
               C12851 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78884 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78870 +
            ((C10901 - C10900) * C26401 + (C11210 - C11209) * C26355 +
             (C78890 * C6118 - C233 * C5934) * C26402 +
             (C78890 * C6370 - C233 * C6204) * C26356) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78893 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78886 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78610 * C78873 +
           (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78610 * C78852) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78893 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78886 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
               C78610 * C78873 +
           (((C32431 - C32430) * C233 + (C32633 - C32632) * C78890) * C26355 +
            ((C78889 * C5465 - C26357 * C5458) * C233 +
             (C78889 * C5762 - C26357 * C5758) * C78890) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78655) *
              C78892 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78655) *
              C78882 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78655) *
              C78866 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78610 * C12851 +
           (((C28415 - C28414) * C233 + (C28617 - C28616) * C78890) * C26355 +
            ((C78889 * C742 - C26357 * C727) * C233 +
             (C78889 * C1343 - C26357 * C1335) * C78890) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78884 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78870 +
            (((C78889 * C1637 - C26357 * C1627) * C233 +
              (C78889 * C2243 - C26357 * C2235) * C78890) *
                 C26355 +
             ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
                C78845) *
               C12851 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78884 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78870 +
            (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
             ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
                C78845) *
               C78655) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78884 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78870 +
            (((C26357 * C1628 - C78889 * C1639) * C233 +
              (C26357 * C2236 - C78889 * C2244) * C78890) *
                 C26355 +
             ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
                C78845) *
               C12851 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78884 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78870 +
            (((C36426 - C36425) * C233 + (C36724 - C36723) * C78890) * C26355 +
             ((C78889 * C5945 - C26357 * C5934) * C233 +
              (C78889 * C6456 - C26357 * C6450) * C78890) *
                 C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78893 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78886 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78873 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78893 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78886 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78873 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C233 +
            (C26355 * C5806 - C26401 * C5756 + C26356 * C5808 -
             C26402 * C5758) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C233 +
            (C26355 * C1424 - C26401 * C1334 + C26356 * C1425 -
             C26402 * C1335) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78884 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78870 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C233 +
             (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
              C26402 * C6445) *
                 C78890) *
                C78889 * C78845) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78884 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78870 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C233 +
             (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
              C26356 * C6535) *
                 C78890) *
                C78889 * C78845) *
               C78655) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78884 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78870 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C233 +
             (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
              C26356 * C6532) *
                 C78890) *
                C78889 * C78845) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78884 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78870 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C233 +
             (C26355 * C6532 - C26401 * C6446 + C26356 * C6536 -
              C26402 * C6450) *
                 C78890) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78893 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78886 +
           (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C78873 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C78852) *
              C13455 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78886 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78893 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78873 +
           (C7259 * C26355 +
            (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
                C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C12851 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78655) *
              C78892 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78655 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C12851) *
              C78882 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C12851 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78655) *
              C78866 +
          ((C3095 * C26355 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C26356) *
               C78889 * C78610 * C78655 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78884 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78870 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C26355 +
             C32155 * C26356) *
                C78889 * C78845) *
               C12851 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78870 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78884 -
            (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
               C78655) *
              C13455 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78870 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78884 -
            (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
               C12851 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78884 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78870 +
            (C11517 * C26355 +
             (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                 C26356) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C78655) *
              C78569 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C12851 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78655) *
              C78578 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C78813 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C12851 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78569 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C78578 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C78813 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C78813 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C78813 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C78655) *
              C78569 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C12851 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C78578 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C78813 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C78813 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C78813 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78569 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78578 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C78813 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C12851 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C78655) *
              C78569 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C12851 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C78578 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C78813 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C12851 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C12851 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78655) *
              C78892 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78655 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C12851) *
              C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C12851 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78655) *
              C78866 +
          ((C28215 * C26355 +
            (C26357 * C742 - C26358 * C727 - C26357 * C743 + C78889 * C751) *
                C78890 * C26356) *
               C78610 * C78655 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78893 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78886 +
           (C26817 * C26355 + C31007 * C26356) * C78610 * C78873 -
           (C31008 * C26356 + C31007 * C26355) * C78610 * C78852) *
              C13455 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78886 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78893 -
           (C32231 * C26356 + C26819 * C26355) * C78610 * C78873 +
           (C32231 * C26355 + (C26357 * C5465 - C26358 * C5458 -
                               C26357 * C5466 + C78889 * C5470) *
                                  C78890 * C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78610 * C12851 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C26357 +
            (C26355 * C840 - C26401 * C741 + C26356 * C841 - C26402 * C743) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78893 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78886 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78873 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78610 * C78852) *
              C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78893 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78886 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78873 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C26357 +
            (C26355 * C5518 - C26401 * C5460 + C26356 * C5520 -
             C26402 * C5466) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C12851 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78892 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C12851 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78655) *
              C78882 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C12851 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78655) *
              C78866 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78610 * C12851 +
           (((C2671 - C2670) * C26357 + (C2673 - C2672) * C78889) * C26355 +
            ((C78890 * C939 - C233 * C727) * C26357 +
             (C78890 * C947 - C233 * C743) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78893 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78886 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78610 * C78873 +
           (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78610 * C78852) *
              C13455 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78893 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78886 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78873 +
           (((C6835 - C6834) * C26357 + (C6837 - C6836) * C78889) * C26355 +
            ((C78890 * C5566 - C233 * C5458) * C26357 +
             (C78890 * C5570 - C233 * C5466) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C12851 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78655) *
                        C78892 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C12851 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78655) *
                        C78882 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C12851 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78655) *
                        C78866 +
                    (((C26357 * C99 - C78889 * C108) * C26401 +
                      (C26357 * C307 - C78889 * C313) * C26355 +
                      (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
                         C78890 * C78610 * C12851 +
                     ((C28415 - C28414) * C26401 + (C28417 - C28416) * C26355 +
                      (C78889 * C742 - C26357 * C727) * C26402 +
                      (C78889 * C1053 - C26357 * C1045) * C26356) *
                         C78890 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78893 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78886 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C78610 * C78873 +
                     ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
                      (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
                         C78890 * C78610 * C78852) *
                        C13455 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78893 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78886 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                         C78890 * C78610 * C78873 +
                     ((C32431 - C32430) * C26401 + (C32433 - C32432) * C26355 +
                      (C78889 * C5465 - C26357 * C5458) * C26402 +
                      (C78889 * C5620 - C26357 * C5616) * C26356) *
                         C78890 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C12851 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78655) *
              C78892 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C12851) *
              C78882 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C12851 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78655) *
              C78866 +
          ((C26401 * C832 - C26529 * C726 - C26401 * C1044 + C26355 * C1134 +
            C26402 * C833 - C26530 * C727 - C26402 * C1045 + C26356 * C1135) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78893 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78886 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78873 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78610 * C78852) *
              C13455 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78886 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78893 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78873 +
           (C26401 * C5514 - C26529 * C5455 - C26401 * C5614 + C26355 * C5663 +
            C26402 * C5516 - C26530 * C5458 - C26402 * C5616 + C26356 * C5666) *
               C78889 * C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C12851 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78655) *
                        C78892 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C12851 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78655) *
                        C78882 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C12851 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78655) *
                        C78866 +
                    (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
                      (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                         C78889 * C78610 * C12851 +
                     ((C2671 - C2670) * C26401 + (C2884 - C2883) * C26355 +
                      (C78890 * C939 - C233 * C727) * C26402 +
                      (C78890 * C1245 - C233 * C1045) * C26356) *
                         C78889 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78893 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78886 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C78610 * C78873 +
                     ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
                      (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
                         C78889 * C78610 * C78852) *
                        C13455 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78893 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78886 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78873 +
                     ((C6835 - C6834) * C26401 + (C7048 - C7047) * C26355 +
                      (C78890 * C5566 - C233 * C5458) * C26402 +
                      (C78890 * C5712 - C233 * C5616) * C26356) *
                         C78889 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78655) *
              C78892 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78655) *
              C78882 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C12851 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78655) *
              C78866 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78610 * C12851 +
           (((C28415 - C28414) * C233 + (C28617 - C28616) * C78890) * C26355 +
            ((C78889 * C742 - C26357 * C727) * C233 +
             (C78889 * C1343 - C26357 * C1335) * C78890) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78893 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78886 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78610 * C78873 +
           (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78610 * C78852) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78893 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78886 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
               C78610 * C78873 +
           (((C32431 - C32430) * C233 + (C32633 - C32632) * C78890) * C26355 +
            ((C78889 * C5465 - C26357 * C5458) * C233 +
             (C78889 * C5762 - C26357 * C5758) * C78890) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78610 * C12851 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C233 +
            (C26355 * C1424 - C26401 * C1334 + C26356 * C1425 -
             C26402 * C1335) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78893 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78886 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78873 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78893 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78886 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78873 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C233 +
            (C26355 * C5806 - C26401 * C5756 + C26356 * C5808 -
             C26402 * C5758) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C12851 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78655) *
              C78892 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78655 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C12851) *
              C78882 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C12851 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78655) *
              C78866 +
          ((C3095 * C26355 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C26356) *
               C78889 * C78610 * C78655 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78893 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78886 +
           (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C78873 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C78852) *
              C13455 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78886 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78893 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78873 +
           (C7259 * C26355 +
            (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
                C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78651 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78658 +
           ((C26817 * C26355 + C31007 * C26356) * C17369 -
            (C33739 * C26356 + C31495 * C26355) * C78697) *
               C14943) *
              C78798 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C78651 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78658 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78651 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78658 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C14943) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78651 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78658 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78651 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78658 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C17369 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                 C26356) *
                C78697) *
               C14943) *
              C78798 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78651 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78658 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C17369 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78651 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78658 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C17369 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                C78890 * C78697) *
               C14943) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78651 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78658 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C17369 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78651 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78658 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C17369 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C14943) *
              C78798 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C78651 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78658 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78651 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78658 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C17369 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                C78889 * C78697) *
               C14943) *
              C78798 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78651 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78658 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C17369 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78651 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78658 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C17369 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
                C78697) *
               C14943) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78651 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78658 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C17369 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78651 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78658 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C14943) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78651 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78658 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78651 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78658 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C17369 -
            (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
               C14943) *
              C78798 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C78651 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78658 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78693 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78700 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C20337) *
              C78651 +
          ((C29463 * C26355 + C31495 * C26356) * C78700 -
           (C26817 * C26356 + C26816 * C26355) * C78693 -
           (C31496 * C26356 + C31494 * C26355) * C20337) *
              C78658 +
          ((C26817 * C26355 + C31007 * C26356) * C78693 -
           (C33739 * C26356 + C31495 * C26355) * C78700 +
           (C31496 * C26355 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C78890 * C26356) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78693 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78700 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C20337) *
              C78651 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78693 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78700 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C20337) *
              C78658 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78693 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78700 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C26357 +
            (C26355 * C6037 - C26401 * C5944 + C26356 * C31571 -
             C26402 * C31470) *
                C78889) *
               C78890 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78693 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78700 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C20337) *
              C78651 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78693 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78700 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C20337) *
              C78658 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78693 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C78700 +
           (((C31658 - C31657) * C26357 + (C31660 - C31659) * C78889) * C26355 +
            ((C78890 * C31646 - C233 * C31468) * C26357 +
             (C78890 * C31647 - C233 * C31470) * C78889) *
                C26356) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78693 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                         C78890 * C78700 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                         C78890 * C20337) *
                        C78651 +
                    (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78693 +
                     ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
                      (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                         C78890 * C78700 +
                     ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
                      (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                         C78890 * C20337) *
                        C78658 +
                    (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C78693 +
                     ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
                      (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                         C78890 * C78700 +
                     ((C31746 - C31745) * C26401 + (C31748 - C31747) * C26355 +
                      (C78889 * C31469 - C26357 * C31468) * C26402 +
                      (C78889 * C31735 - C26357 * C31734) * C26356) *
                         C78890 * C20337) *
                        C14943) *
                   C78564) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78693 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78700 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C20337) *
              C78651 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78700 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78693 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C20337) *
              C78658 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78693 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78700 +
           (C26401 * C6031 - C26529 * C5933 - C26401 * C6203 + C26355 * C6289 +
            C26402 * C31570 - C26530 * C31468 - C26402 * C31734 +
            C26356 * C31822) *
               C78889 * C78890 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78693 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                         C78889 * C78700 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                         C78889 * C20337) *
                        C78651 +
                    (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78693 +
                     ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
                      (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                         C78889 * C78700 +
                     ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
                      (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                         C78889 * C20337) *
                        C78658 +
                    (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C78693 +
                     ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
                      (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                         C78889 * C78700 +
                     ((C31658 - C31657) * C26401 + (C31904 - C31903) * C26355 +
                      (C78890 * C31646 - C233 * C31468) * C26402 +
                      (C78890 * C31897 - C233 * C31734) * C26356) *
                         C78889 * C20337) *
                        C14943) *
                   C78564) /
                  (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78693 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78700 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C20337) *
              C78651 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78693 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78700 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C20337) *
              C78658 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78693 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C78700 +
           (((C31746 - C31745) * C233 + (C31986 - C31985) * C78890) * C26355 +
            ((C78889 * C31469 - C26357 * C31468) * C233 +
             (C78889 * C31979 - C26357 * C31978) * C78890) *
                C26356) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78693 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78700 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C20337) *
              C78651 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78693 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78700 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C20337) *
              C78658 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78693 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78700 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C233 +
            (C26355 * C6535 - C26401 * C6449 + C26356 * C32060 -
             C26402 * C31978) *
                C78890) *
               C78889 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78693 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78700 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C20337) *
              C78651 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78700 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78693 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C20337) *
              C78658 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C78693 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C78700 +
           (C32157 * C26355 +
            (C233 * C31646 - C601 * C31468 - C233 * C31978 + C78890 * C32135) *
                C26356) *
               C78889 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C17369 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C78893 +
          ((C29463 * C26355 + C31495 * C26356) * C78697 -
           (C26817 * C26356 + C26816 * C26355) * C17369) *
              C78886 +
          ((C26817 * C26355 + C31007 * C26356) * C17369 -
           (C33739 * C26356 + C31495 * C26355) * C78697) *
              C78873 +
          ((C33739 * C26355 + (C26357 * C33728 - C26358 * C33727 -
                               C26357 * C33729 + C78889 * C33730) *
                                  C78890 * C26356) *
               C78697 -
           (C31008 * C26356 + C31007 * C26355) * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78655) *
              C78880 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C12851 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78655) *
              C78864 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C17369 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78894 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78888 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78876 -
           (C37592 * C26356 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C78890 * C26355) *
               C78858) *
              C12851 +
          ((C29463 * C26355 + C31495 * C26356) * C78888 -
           (C26817 * C26356 + C26816 * C26355) * C78894 -
           (C31496 * C26356 + C31494 * C26355) * C78876 +
           (C37592 * C26355 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C78890 * C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78893 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78697) *
              C78886 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78697) *
              C78873 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C26357 +
            (C26355 * C8327 - C26401 * C8254 + C26356 * C33806 -
             C26402 * C33729) *
                C78889) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78894 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78888 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78876 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C26357 +
            (C26401 * C10200 - C26355 * C10255 + C26402 * C12228 -
             C26356 * C12301) *
                C78889) *
               C78890 * C78858) *
              C12851 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78894 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78888 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C78876 +
           ((C26355 * C12299 - C26401 * C12225 + C26356 * C37658 -
             C26402 * C37580) *
                C26357 +
            (C26355 * C12301 - C26401 * C12228 + C26356 * C37659 -
             C26402 * C37582) *
                C78889) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C78893 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C17369 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78697) *
              C78886 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C17369 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C78697) *
              C78873 +
          ((((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C17369 +
           (((C33877 - C33876) * C26357 + (C33879 - C33878) * C78889) * C26355 +
            ((C78890 * C33873 - C233 * C33727) * C26357 +
             (C78890 * C33874 - C233 * C33729) * C78889) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C12851 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78880 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C78864 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C17369 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C17369 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78894 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78888 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78876 +
           (((C233 * C10194 - C78890 * C10301) * C26357 +
             (C233 * C10200 - C78890 * C10305) * C78889) *
                C26355 +
            ((C37729 - C37730) * C26357 + (C37731 - C37732) * C78889) *
                C26356) *
               C78858) *
              C12851 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78894 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78888 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C78876 +
           (((C37730 - C37729) * C26357 + (C37732 - C37731) * C78889) * C26355 +
            ((C78890 * C37726 - C233 * C37580) * C26357 +
             (C78890 * C37727 - C233 * C37582) * C78889) *
                C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C78893 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C17369 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78697) *
              C78886 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C17369 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
               C78890 * C78697) *
              C78873 +
          (((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C17369 +
           ((C33949 - C33948) * C26401 + (C33951 - C33950) * C26355 +
            (C78889 * C33728 - C26357 * C33727) * C26402 +
            (C78889 * C33946 - C26357 * C33945) * C26356) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C17369 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78894 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78888 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C78876 +
           ((C26357 * C10194 - C78889 * C10199) * C26401 +
            (C26357 * C10351 - C78889 * C10355) * C26355 +
            (C37801 - C37802) * C26402 + (C37803 - C37804) * C26356) *
               C78890 * C78858) *
              C12851 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78894 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78888 +
           ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
            (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
               C78890 * C78876 +
           ((C37802 - C37801) * C26401 + (C37804 - C37803) * C26355 +
            (C78889 * C37581 - C26357 * C37580) * C26402 +
            (C78889 * C37799 - C26357 * C37798) * C26356) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C17369 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78893 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78697 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C17369) *
              C78886 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C17369 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78697) *
              C78873 +
          ((C26401 * C8325 - C26529 * C8251 - C26401 * C8465 + C26355 * C8535 +
            C26402 * C33805 - C26530 * C33727 - C26402 * C33945 +
            C26356 * C34017) *
               C78889 * C78890 * C78697 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78655) *
              C78880 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C12851 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C78864 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C17369 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78894 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78888 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78876 -
           (C26402 * C12299 - C26530 * C12225 - C26402 * C12439 +
            C26356 * C12509 + C26401 * C10251 - C26529 * C10194 -
            C26401 * C10351 + C26355 * C10402) *
               C78889 * C78890 * C78858) *
              C12851 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78888 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78894 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C78876 +
           (C26401 * C12299 - C26529 * C12225 - C26401 * C12439 +
            C26355 * C12509 + C26402 * C37658 - C26530 * C37580 -
            C26402 * C37798 + C26356 * C37870) *
               C78889 * C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C17369 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C78893 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C17369 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78697) *
              C78886 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C17369 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
               C78889 * C78697) *
              C78873 +
          (((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C17369 +
           ((C33877 - C33876) * C26401 + (C34087 - C34086) * C26355 +
            (C78890 * C33873 - C233 * C33727) * C26402 +
            (C78890 * C34084 - C233 * C33945) * C26356) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C17369 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C17369 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78894 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78888 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C78876 +
           ((C233 * C10194 - C78890 * C10301) * C26401 +
            (C233 * C10351 - C78890 * C10447) * C26355 +
            (C37729 - C37730) * C26402 + (C37939 - C37940) * C26356) *
               C78889 * C78858) *
              C12851 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78894 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78888 +
           ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
            (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
               C78889 * C78876 +
           ((C37730 - C37729) * C26401 + (C37940 - C37939) * C26355 +
            (C78890 * C37726 - C233 * C37580) * C26402 +
            (C78890 * C37937 - C233 * C37798) * C26356) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C78893 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C17369 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78697) *
              C78886 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C17369 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C78697) *
              C78873 +
          ((((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C17369 +
           (((C33949 - C33948) * C233 + (C34157 - C34156) * C78890) * C26355 +
            ((C78889 * C33728 - C26357 * C33727) * C233 +
             (C78889 * C34154 - C26357 * C34153) * C78890) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78880 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78864 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C17369 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78894 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78888 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78876 +
           (((C26357 * C10194 - C78889 * C10199) * C233 +
             (C26357 * C10493 - C78889 * C10497) * C78890) *
                C26355 +
            ((C37801 - C37802) * C233 + (C38009 - C38010) * C78890) * C26356) *
               C78858) *
              C12851 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78894 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78888 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C78876 +
           (((C37802 - C37801) * C233 + (C38010 - C38009) * C78890) * C26355 +
            ((C78889 * C37581 - C26357 * C37580) * C233 +
             (C78889 * C38007 - C26357 * C38006) * C78890) *
                C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78893 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78697) *
              C78886 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78697) *
              C78873 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C233 +
            (C26355 * C8741 - C26401 * C8671 + C26356 * C34223 -
             C26402 * C34153) *
                C78890) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78894 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78888 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78876 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C233 +
            (C26401 * C10493 - C26355 * C10543 + C26402 * C12645 -
             C26356 * C12715) *
                C78890) *
               C78889 * C78858) *
              C12851 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78894 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78888 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C78876 +
           ((C26355 * C12299 - C26401 * C12225 + C26356 * C37658 -
             C26402 * C37580) *
                C233 +
            (C26355 * C12715 - C26401 * C12645 + C26356 * C38076 -
             C26402 * C38006) *
                C78890) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C17369 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78893 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
              C78886 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C17369 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
              C78873 +
          ((C34298 * C26355 +
            (C233 * C33873 - C601 * C33727 - C233 * C34153 + C78890 * C34290) *
                C26356) *
               C78889 * C78697 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C12851 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78655) *
              C78880 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C12851 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C78864 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C17369 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C12851 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78894 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78888 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78876 -
           (C38151 * C26356 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C26355) *
               C78889 * C78858) *
              C12851 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78888 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78894 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C78876 +
           (C38151 * C26355 +
            (C233 * C37726 - C601 * C37580 - C233 * C38006 + C78890 * C38143) *
                C26356) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78693 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78700 +
            ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
              C78889 * C1651) *
                 C78890 * C26355 +
             C31494 * C26356) *
                C20337) *
               C12851 +
           ((C29463 * C26355 + C31495 * C26356) * C78700 -
            (C26817 * C26356 + C26816 * C26355) * C78693 -
            (C31496 * C26356 + C31494 * C26355) * C20337) *
               C78655) *
              C78798 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78700 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78693 -
            (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                                C26357 * C1640 + C78889 * C1652) *
                                   C78890 * C26355) *
                C20337) *
               C12851 +
           ((C26818 * C26355 + C26819 * C26356) * C78693 -
            (C32871 * C26356 + C29464 * C26355) * C78700 +
            (C36130 * C26355 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C78890 * C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78693 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78700 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C26357 +
             (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
              C26402 * C5938) *
                 C78889) *
                C78890 * C20337) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78693 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78700 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C26357 +
             (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
              C26356 * C6037) *
                 C78889) *
                C78890 * C20337) *
               C78655) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78693 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78700 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C26357 +
             (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
              C26356 * C6034) *
                 C78889) *
                C78890 * C20337) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78693 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78700 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C26357 +
             (C26355 * C6034 - C26401 * C5936 + C26356 * C6038 -
              C26402 * C5946) *
                 C78889) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78693 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78700 +
            (((C78890 * C1839 - C233 * C1627) * C26357 +
              (C78890 * C1847 - C233 * C1638) * C78889) *
                 C26355 +
             ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                 C26356) *
                C20337) *
               C12851 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78693 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78700 +
            (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) *
                 C26355 +
             ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                 C26356) *
                C20337) *
               C78655) *
              C78798 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78693 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78700 +
            (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
             ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                 C26356) *
                C20337) *
               C12851 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78693 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78700 +
            (((C10901 - C10900) * C26357 + (C10903 - C10902) * C78889) *
                 C26355 +
             ((C78890 * C6118 - C233 * C5934) * C26357 +
              (C78890 * C6124 - C233 * C5946) * C78889) *
                 C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78693 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78700 +
            ((C78889 * C1637 - C26357 * C1627) * C26401 +
             (C78889 * C1953 - C26357 * C1945) * C26355 +
             (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                C78890 * C20337) *
               C12851 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78693 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78700 +
            ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
             (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                C78890 * C20337) *
               C78655) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78693 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78700 +
            ((C26357 * C1628 - C78889 * C1639) * C26401 +
             (C26357 * C1946 - C78889 * C1954) * C26355 +
             (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
                C78890 * C20337) *
               C12851 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78693 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78700 +
            ((C36426 - C36425) * C26401 + (C36428 - C36427) * C26355 +
             (C78889 * C5945 - C26357 * C5934) * C26402 +
             (C78889 * C6210 - C26357 * C6204) * C26356) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78693 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78700 +
            (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
             C26402 * C6027 - C26530 * C5930 - C26402 * C6199 +
             C26356 * C6286) *
                C78889 * C78890 * C20337) *
               C12851 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78700 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78693 -
            (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
             C26401 * C6027 - C26529 * C5930 - C26401 * C6199 +
             C26355 * C6286) *
                C78889 * C78890 * C20337) *
               C78655) *
              C78798 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78700 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78693 -
            (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
             C26401 * C1734 - C26529 * C1628 - C26401 * C1946 +
             C26355 * C2036) *
                C78889 * C78890 * C20337) *
               C12851 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78693 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78700 +
            (C26401 * C6028 - C26529 * C5929 - C26401 * C6200 + C26355 * C6285 +
             C26402 * C6032 - C26530 * C5934 - C26402 * C6204 +
             C26356 * C6290) *
                C78889 * C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78693 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78700 +
            ((C78890 * C1839 - C233 * C1627) * C26401 +
             (C78890 * C2145 - C233 * C1945) * C26355 +
             (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                C78889 * C20337) *
               C12851 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78693 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78700 +
            ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
             (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                C78889 * C20337) *
               C78655) *
              C78798 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78693 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78700 +
            ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
             (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                C78889 * C20337) *
               C12851 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78693 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78700 +
            ((C10901 - C10900) * C26401 + (C11210 - C11209) * C26355 +
             (C78890 * C6118 - C233 * C5934) * C26402 +
             (C78890 * C6370 - C233 * C6204) * C26356) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78693 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78700 +
            (((C78889 * C1637 - C26357 * C1627) * C233 +
              (C78889 * C2243 - C26357 * C2235) * C78890) *
                 C26355 +
             ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
                C20337) *
               C12851 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78693 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78700 +
            (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
             ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
                C20337) *
               C78655) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78693 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78700 +
            (((C26357 * C1628 - C78889 * C1639) * C233 +
              (C26357 * C2236 - C78889 * C2244) * C78890) *
                 C26355 +
             ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
                C20337) *
               C12851 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78693 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78700 +
            (((C36426 - C36425) * C233 + (C36724 - C36723) * C78890) * C26355 +
             ((C78889 * C5945 - C26357 * C5934) * C233 +
              (C78889 * C6456 - C26357 * C6450) * C78890) *
                 C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78693 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78700 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C233 +
             (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
              C26402 * C6445) *
                 C78890) *
                C78889 * C20337) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78693 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78700 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C233 +
             (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
              C26356 * C6535) *
                 C78890) *
                C78889 * C20337) *
               C78655) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78693 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78700 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C233 +
             (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
              C26356 * C6532) *
                 C78890) *
                C78889 * C20337) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78693 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78700 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C233 +
             (C26355 * C6532 - C26401 * C6446 + C26356 * C6536 -
              C26402 * C6450) *
                 C78890) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78693 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78700 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C26355 +
             C32155 * C26356) *
                C78889 * C20337) *
               C12851 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78700 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78693 -
            (C32157 * C26356 + C32155 * C26355) * C78889 * C20337) *
               C78655) *
              C78798 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78700 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78693 -
            (C11517 * C26356 + C2447 * C26355) * C78889 * C20337) *
               C12851 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78693 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78700 +
            (C11517 * C26355 +
             (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                 C26356) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78655) *
              C78880 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C12851 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78655) *
              C78864 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C17369 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C12851 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C17369 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C78893 +
          ((C29463 * C26355 + C31495 * C26356) * C78697 -
           (C26817 * C26356 + C26816 * C26355) * C17369) *
              C78886 +
          ((C26817 * C26355 + C31007 * C26356) * C17369 -
           (C33739 * C26356 + C31495 * C26355) * C78697) *
              C78873 +
          ((C33739 * C26355 + (C26357 * C33728 - C26358 * C33727 -
                               C26357 * C33729 + C78889 * C33730) *
                                  C78890 * C26356) *
               C78697 -
           (C31008 * C26356 + C31007 * C26355) * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78893 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78697) *
              C78886 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78697) *
              C78873 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C26357 +
            (C26355 * C8327 - C26401 * C8254 + C26356 * C33806 -
             C26402 * C33729) *
                C78889) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C12851 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78880 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C78864 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C17369 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C12851 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C17369 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C78893 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C17369 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78697) *
              C78886 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C17369 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C78697) *
              C78873 +
          ((((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C17369 +
           (((C33877 - C33876) * C26357 + (C33879 - C33878) * C78889) * C26355 +
            ((C78890 * C33873 - C233 * C33727) * C26357 +
             (C78890 * C33874 - C233 * C33729) * C78889) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C12851 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C17369 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C78893 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C17369 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78697) *
              C78886 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C17369 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
               C78890 * C78697) *
              C78873 +
          (((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C17369 +
           ((C33949 - C33948) * C26401 + (C33951 - C33950) * C26355 +
            (C78889 * C33728 - C26357 * C33727) * C26402 +
            (C78889 * C33946 - C26357 * C33945) * C26356) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78655) *
              C78880 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C12851 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C78864 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C17369 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C12851 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C17369 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78893 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78697 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C17369) *
              C78886 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C17369 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78697) *
              C78873 +
          ((C26401 * C8325 - C26529 * C8251 - C26401 * C8465 + C26355 * C8535 +
            C26402 * C33805 - C26530 * C33727 - C26402 * C33945 +
            C26356 * C34017) *
               C78889 * C78890 * C78697 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C17369 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C12851 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C17369 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C17369 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C78893 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C17369 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78697) *
              C78886 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C17369 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
               C78889 * C78697) *
              C78873 +
          (((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C17369 +
           ((C33877 - C33876) * C26401 + (C34087 - C34086) * C26355 +
            (C78890 * C33873 - C233 * C33727) * C26402 +
            (C78890 * C34084 - C233 * C33945) * C26356) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78880 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78864 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C17369 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C78893 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C17369 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78697) *
              C78886 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C17369 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C78697) *
              C78873 +
          ((((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C17369 +
           (((C33949 - C33948) * C233 + (C34157 - C34156) * C78890) * C26355 +
            ((C78889 * C33728 - C26357 * C33727) * C233 +
             (C78889 * C34154 - C26357 * C34153) * C78890) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C12851 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78893 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78697) *
              C78886 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78697) *
              C78873 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C233 +
            (C26355 * C8741 - C26401 * C8671 + C26356 * C34223 -
             C26402 * C34153) *
                C78890) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C12851 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78655) *
              C78880 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C12851 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C78864 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C17369 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C12851 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C17369 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78893 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
              C78886 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C17369 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
              C78873 +
          ((C34298 * C26355 +
            (C233 * C33873 - C601 * C33727 - C233 * C34153 + C78890 * C34290) *
                C26356) *
               C78889 * C78697 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C6683 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C6684 +
           (C26817 * C26355 + C31007 * C26356) * C78610 * C6685 -
           (C31008 * C26356 + C31007 * C26355) * C78610 * C78852) *
              C78798 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C6684 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C6683 -
           (C32231 * C26356 + C26819 * C26355) * C78610 * C6685 +
           (C32231 * C26355 + (C26357 * C5465 - C26358 * C5458 -
                               C26357 * C5466 + C78889 * C5470) *
                                  C78890 * C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78812 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78655) *
              C2521 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78655 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78812) *
              C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78812 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78655) *
              C2523 +
          ((C28215 * C26355 +
            (C26357 * C742 - C26358 * C727 - C26357 * C743 + C78889 * C751) *
                C78890 * C26356) *
               C78610 * C78655 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C8885 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C8886 +
            ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
              C78889 * C1651) *
                 C78890 * C26355 +
             C31494 * C26356) *
                C78845) *
               C78812 +
           ((C29463 * C26355 + C31495 * C26356) * C8886 -
            (C26817 * C26356 + C26816 * C26355) * C8885 -
            (C31496 * C26356 + C31494 * C26355) * C78845) *
               C78655) *
              C78798 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C8886 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C8885 -
            (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                                C26357 * C1640 + C78889 * C1652) *
                                   C78890 * C26355) *
                C78845) *
               C78812 +
           ((C26818 * C26355 + C26819 * C26356) * C8885 -
            (C32871 * C26356 + C29464 * C26355) * C8886 +
            (C36130 * C26355 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C78890 * C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C6683 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C6684 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C6685 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C6683 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C6684 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C6685 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C26357 +
            (C26355 * C5518 - C26401 * C5460 + C26356 * C5520 -
             C26402 * C5466) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C26357 +
            (C26355 * C840 - C26401 * C741 + C26356 * C841 - C26402 * C743) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C8885 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C8886 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C26357 +
             (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
              C26402 * C5938) *
                 C78889) *
                C78890 * C78845) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C8885 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C8886 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C26357 +
             (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
              C26356 * C6037) *
                 C78889) *
                C78890 * C78845) *
               C78655) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C8885 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C8886 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C26357 +
             (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
              C26356 * C6034) *
                 C78889) *
                C78890 * C78845) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C8885 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C8886 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C26357 +
             (C26355 * C6034 - C26401 * C5936 + C26356 * C6038 -
              C26402 * C5946) *
                 C78889) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C6683 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C6684 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78610 * C6685 +
           (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78798 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C6683 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C6684 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C6685 +
           (((C6835 - C6834) * C26357 + (C6837 - C6836) * C78889) * C26355 +
            ((C78890 * C5566 - C233 * C5458) * C26357 +
             (C78890 * C5570 - C233 * C5466) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78812 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78655) *
              C2521 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78812 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78655) *
              C2522 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78812 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78655) *
              C2523 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78610 * C78812 +
           (((C2671 - C2670) * C26357 + (C2673 - C2672) * C78889) * C26355 +
            ((C78890 * C939 - C233 * C727) * C26357 +
             (C78890 * C947 - C233 * C743) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C8885 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C8886 +
            (((C78890 * C1839 - C233 * C1627) * C26357 +
              (C78890 * C1847 - C233 * C1638) * C78889) *
                 C26355 +
             ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                 C26356) *
                C78845) *
               C78812 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C8885 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C8886 +
            (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) *
                 C26355 +
             ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                 C26356) *
                C78845) *
               C78655) *
              C78798 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C8885 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C8886 +
            (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
             ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                 C26356) *
                C78845) *
               C78812 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C8885 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C8886 +
            (((C10901 - C10900) * C26357 + (C10903 - C10902) * C78889) *
                 C26355 +
             ((C78890 * C6118 - C233 * C5934) * C26357 +
              (C78890 * C6124 - C233 * C5946) * C78889) *
                 C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78610 * C6683 +
           ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78610 * C6684 +
           ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C78610 * C6685 +
           ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C78610 * C78852) *
              C78798 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78610 * C6683 +
           ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
            (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
               C78890 * C78610 * C6684 +
           ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
            (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
               C78890 * C78610 * C6685 +
           ((C32431 - C32430) * C26401 + (C32433 - C32432) * C26355 +
            (C78889 * C5465 - C26357 * C5458) * C26402 +
            (C78889 * C5620 - C26357 * C5616) * C26356) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78610 * C78812 +
           ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78610 * C78655) *
              C2521 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78610 * C78812 +
           ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
            (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
               C78890 * C78610 * C78655) *
              C2522 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78610 * C78812 +
           ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
            (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
               C78890 * C78610 * C78655) *
              C2523 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C78610 * C78812 +
           ((C28415 - C28414) * C26401 + (C28417 - C28416) * C26355 +
            (C78889 * C742 - C26357 * C727) * C26402 +
            (C78889 * C1053 - C26357 * C1045) * C26356) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C8885 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C8886 +
            ((C78889 * C1637 - C26357 * C1627) * C26401 +
             (C78889 * C1953 - C26357 * C1945) * C26355 +
             (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                C78890 * C78845) *
               C78812 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C8885 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C8886 +
            ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
             (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                C78890 * C78845) *
               C78655) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C8885 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C8886 +
            ((C26357 * C1628 - C78889 * C1639) * C26401 +
             (C26357 * C1946 - C78889 * C1954) * C26355 +
             (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
                C78890 * C78845) *
               C78812 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C8885 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C8886 +
            ((C36426 - C36425) * C26401 + (C36428 - C36427) * C26355 +
             (C78889 * C5945 - C26357 * C5934) * C26402 +
             (C78889 * C6210 - C26357 * C6204) * C26356) *
                C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C6683 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C6684 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C6685 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78610 * C78852) *
              C78798 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C6684 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C6683 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C6685 +
           (C26401 * C5514 - C26529 * C5455 - C26401 * C5614 + C26355 * C5663 +
            C26402 * C5516 - C26530 * C5458 - C26402 * C5616 + C26356 * C5666) *
               C78889 * C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78812 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78655) *
              C2521 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78812) *
              C2522 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78812 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78655) *
              C2523 +
          ((C26401 * C832 - C26529 * C726 - C26401 * C1044 + C26355 * C1134 +
            C26402 * C833 - C26530 * C727 - C26402 * C1045 + C26356 * C1135) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C8885 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C8886 +
            (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
             C26402 * C6027 - C26530 * C5930 - C26402 * C6199 +
             C26356 * C6286) *
                C78889 * C78890 * C78845) *
               C78812 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C8886 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C8885 -
            (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
             C26401 * C6027 - C26529 * C5930 - C26401 * C6199 +
             C26355 * C6286) *
                C78889 * C78890 * C78845) *
               C78655) *
              C78798 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C8886 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C8885 -
            (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
             C26401 * C1734 - C26529 * C1628 - C26401 * C1946 +
             C26355 * C2036) *
                C78889 * C78890 * C78845) *
               C78812 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C8885 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C8886 +
            (C26401 * C6028 - C26529 * C5929 - C26401 * C6200 + C26355 * C6285 +
             C26402 * C6032 - C26530 * C5934 - C26402 * C6204 +
             C26356 * C6290) *
                C78889 * C78890 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78610 * C6683 +
           ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78610 * C6684 +
           ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C78610 * C6685 +
           ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78610 * C6683 +
           ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
            (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
               C78889 * C78610 * C6684 +
           ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
            (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
               C78889 * C78610 * C6685 +
           ((C6835 - C6834) * C26401 + (C7048 - C7047) * C26355 +
            (C78890 * C5566 - C233 * C5458) * C26402 +
            (C78890 * C5712 - C233 * C5616) * C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78610 * C78812 +
           ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78610 * C78812 +
           ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
            (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78610 * C78812 +
           ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
            (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C78610 * C78812 +
           ((C2671 - C2670) * C26401 + (C2884 - C2883) * C26355 +
            (C78890 * C939 - C233 * C727) * C26402 +
            (C78890 * C1245 - C233 * C1045) * C26356) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C8885 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C8886 +
            ((C78890 * C1839 - C233 * C1627) * C26401 +
             (C78890 * C2145 - C233 * C1945) * C26355 +
             (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                C78889 * C78845) *
               C78812 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C8885 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C8886 +
            ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
             (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                C78889 * C78845) *
               C78655) *
              C78798 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C8885 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C8886 +
            ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
             (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                C78889 * C78845) *
               C78812 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C8885 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C8886 +
            ((C10901 - C10900) * C26401 + (C11210 - C11209) * C26355 +
             (C78890 * C6118 - C233 * C5934) * C26402 +
             (C78890 * C6370 - C233 * C6204) * C26356) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C6683 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C6684 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78610 * C6685 +
           (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78610 * C78852) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C6683 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C6684 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
               C78610 * C6685 +
           (((C32431 - C32430) * C233 + (C32633 - C32632) * C78890) * C26355 +
            ((C78889 * C5465 - C26357 * C5458) * C233 +
             (C78889 * C5762 - C26357 * C5758) * C78890) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78655) *
              C2521 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78655) *
              C2522 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78655) *
              C2523 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78610 * C78812 +
           (((C28415 - C28414) * C233 + (C28617 - C28616) * C78890) * C26355 +
            ((C78889 * C742 - C26357 * C727) * C233 +
             (C78889 * C1343 - C26357 * C1335) * C78890) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C8885 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C8886 +
            (((C78889 * C1637 - C26357 * C1627) * C233 +
              (C78889 * C2243 - C26357 * C2235) * C78890) *
                 C26355 +
             ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
                C78845) *
               C78812 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C8885 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C8886 +
            (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
             ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
                C78845) *
               C78655) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C8885 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C8886 +
            (((C26357 * C1628 - C78889 * C1639) * C233 +
              (C26357 * C2236 - C78889 * C2244) * C78890) *
                 C26355 +
             ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
                C78845) *
               C78812 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C8885 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C8886 +
            (((C36426 - C36425) * C233 + (C36724 - C36723) * C78890) * C26355 +
             ((C78889 * C5945 - C26357 * C5934) * C233 +
              (C78889 * C6456 - C26357 * C6450) * C78890) *
                 C26356) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C6683 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C6684 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C6685 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C6683 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C6684 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C6685 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C233 +
            (C26355 * C5806 - C26401 * C5756 + C26356 * C5808 -
             C26402 * C5758) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C233 +
            (C26355 * C1424 - C26401 * C1334 + C26356 * C1425 -
             C26402 * C1335) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C8885 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C8886 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C233 +
             (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
              C26402 * C6445) *
                 C78890) *
                C78889 * C78845) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C8885 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C8886 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C233 +
             (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
              C26356 * C6535) *
                 C78890) *
                C78889 * C78845) *
               C78655) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C8885 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C8886 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C233 +
             (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
              C26356 * C6532) *
                 C78890) *
                C78889 * C78845) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C8885 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C8886 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C233 +
             (C26355 * C6532 - C26401 * C6446 + C26356 * C6536 -
              C26402 * C6450) *
                 C78890) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C6683 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C6684 +
           (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C6685 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C78852) *
              C78798 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C6684 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C6683 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C6685 +
           (C7259 * C26355 +
            (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
                C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78812 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78655) *
              C2521 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78655 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78812) *
              C2522 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78812 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78655) *
              C2523 +
          ((C3095 * C26355 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C26356) *
               C78889 * C78610 * C78655 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C8885 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C8886 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C26355 +
             C32155 * C26356) *
                C78889 * C78845) *
               C78812 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C8886 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C8885 -
            (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
               C78655) *
              C78798 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C8886 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C8885 -
            (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
               C78812 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C8885 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C8886 +
            (C11517 * C26355 +
             (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                 C26356) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78813 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C6683 +
          ((C29463 * C26355 + C31495 * C26356) * C78697 -
           (C26817 * C26356 + C26816 * C26355) * C78813) *
              C6684 +
          ((C26817 * C26355 + C31007 * C26356) * C78813 -
           (C33739 * C26356 + C31495 * C26355) * C78697) *
              C6685 +
          ((C33739 * C26355 + (C26357 * C33728 - C26358 * C33727 -
                               C26357 * C33729 + C78889 * C33730) *
                                  C78890 * C26356) *
               C78697 -
           (C31008 * C26356 + C31007 * C26355) * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29463 * C26355 + (C26357 * C5941 - C26358 * C5932 -
                                C26357 * C5942 + C78889 * C5950) *
                                   C78890 * C26356) *
                C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C78655) *
              C717 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C78812 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            ((C26357 * C5939 - C26358 * C5931 - C26357 * C5940 +
              C78889 * C5949) *
                 C78890 * C26356 +
             C29464 * C26355) *
                C78697) *
               C78655) *
              C718 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C78813 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C11584 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C11585 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C11586 -
           (C37592 * C26356 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C78890 * C26355) *
               C78858) *
              C78812 +
          ((C29463 * C26355 + C31495 * C26356) * C11585 -
           (C26817 * C26356 + C26816 * C26355) * C11584 -
           (C31496 * C26356 + C31494 * C26355) * C11586 +
           (C37592 * C26355 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C78890 * C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C6683 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78697) *
              C6684 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78697) *
              C6685 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C26357 +
            (C26355 * C8327 - C26401 * C8254 + C26356 * C33806 -
             C26402 * C33729) *
                C78889) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C11584 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C11585 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C11586 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C26357 +
            (C26401 * C10200 - C26355 * C10255 + C26402 * C12228 -
             C26356 * C12301) *
                C78889) *
               C78890 * C78858) *
              C78812 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C11584 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C11585 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C11586 +
           ((C26355 * C12299 - C26401 * C12225 + C26356 * C37658 -
             C26402 * C37580) *
                C26357 +
            (C26355 * C12301 - C26401 * C12228 + C26356 * C37659 -
             C26402 * C37582) *
                C78889) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C6683 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78813 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78697) *
              C6684 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78813 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C78697) *
              C6685 +
          ((((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78813 +
           (((C33877 - C33876) * C26357 + (C33879 - C33878) * C78889) * C26355 +
            ((C78890 * C33873 - C233 * C33727) * C26357 +
             (C78890 * C33874 - C233 * C33729) * C78889) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78812 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C78890 * C6115 - C233 * C5932) * C26357 +
              (C78890 * C6121 - C233 * C5942) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C717 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C718 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C78813 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C78813 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C11584 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C11585 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C11586 +
           (((C233 * C10194 - C78890 * C10301) * C26357 +
             (C233 * C10200 - C78890 * C10305) * C78889) *
                C26355 +
            ((C37729 - C37730) * C26357 + (C37731 - C37732) * C78889) *
                C26356) *
               C78858) *
              C78812 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C11584 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C11585 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C11586 +
           (((C37730 - C37729) * C26357 + (C37732 - C37731) * C78889) * C26355 +
            ((C78890 * C37726 - C233 * C37580) * C26357 +
             (C78890 * C37727 - C233 * C37582) * C78889) *
                C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C6683 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78813 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78697) *
              C6684 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C78813 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
               C78890 * C78697) *
              C6685 +
          (((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C78813 +
           ((C33949 - C33948) * C26401 + (C33951 - C33950) * C26355 +
            (C78889 * C33728 - C26357 * C33727) * C26402 +
            (C78889 * C33946 - C26357 * C33945) * C26356) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C78889 * C5941 - C26357 * C5932) * C26402 +
             (C78889 * C6207 - C26357 * C6201) * C26356) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C26357 * C5931 - C78889 * C5939) * C26402 +
             (C26357 * C6202 - C78889 * C6208) * C26356) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C78813 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C11584 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C11585 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C11586 +
           ((C26357 * C10194 - C78889 * C10199) * C26401 +
            (C26357 * C10351 - C78889 * C10355) * C26355 +
            (C37801 - C37802) * C26402 + (C37803 - C37804) * C26356) *
               C78890 * C78858) *
              C78812 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C11584 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C11585 +
           ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
            (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
               C78890 * C11586 +
           ((C37802 - C37801) * C26401 + (C37804 - C37803) * C26355 +
            (C78889 * C37581 - C26357 * C37580) * C26402 +
            (C78889 * C37799 - C26357 * C37798) * C26356) *
               C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78813 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C6683 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78697 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78813) *
              C6684 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78813 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78697) *
              C6685 +
          ((C26401 * C8325 - C26529 * C8251 - C26401 * C8465 + C26355 * C8535 +
            C26402 * C33805 - C26530 * C33727 - C26402 * C33945 +
            C26356 * C34017) *
               C78889 * C78890 * C78697 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C78655) *
              C717 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C78812 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C718 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C78813 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C11584 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C11585 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C11586 -
           (C26402 * C12299 - C26530 * C12225 - C26402 * C12439 +
            C26356 * C12509 + C26401 * C10251 - C26529 * C10194 -
            C26401 * C10351 + C26355 * C10402) *
               C78889 * C78890 * C78858) *
              C78812 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C11585 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C11584 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C11586 +
           (C26401 * C12299 - C26529 * C12225 - C26401 * C12439 +
            C26355 * C12509 + C26402 * C37658 - C26530 * C37580 -
            C26402 * C37798 + C26356 * C37870) *
               C78889 * C78890 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78813 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C6683 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78813 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78697) *
              C6684 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C78813 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
               C78889 * C78697) *
              C6685 +
          (((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C78813 +
           ((C33877 - C33876) * C26401 + (C34087 - C34086) * C26355 +
            (C78890 * C33873 - C233 * C33727) * C26402 +
            (C78890 * C34084 - C233 * C33945) * C26356) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C78890 * C6115 - C233 * C5932) * C26402 +
             (C78890 * C6367 - C233 * C6201) * C26356) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C78813 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C78813 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C11584 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C11585 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C11586 +
           ((C233 * C10194 - C78890 * C10301) * C26401 +
            (C233 * C10351 - C78890 * C10447) * C26355 +
            (C37729 - C37730) * C26402 + (C37939 - C37940) * C26356) *
               C78889 * C78858) *
              C78812 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C11584 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C11585 +
           ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
            (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
               C78889 * C11586 +
           ((C37730 - C37729) * C26401 + (C37940 - C37939) * C26355 +
            (C78890 * C37726 - C233 * C37580) * C26402 +
            (C78890 * C37937 - C233 * C37798) * C26356) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C6683 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78813 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78697) *
              C6684 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78813 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C78697) *
              C6685 +
          ((((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78813 +
           (((C33949 - C33948) * C233 + (C34157 - C34156) * C78890) * C26355 +
            ((C78889 * C33728 - C26357 * C33727) * C233 +
             (C78889 * C34154 - C26357 * C34153) * C78890) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C78889 * C5941 - C26357 * C5932) * C233 +
              (C78889 * C6453 - C26357 * C6447) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C717 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C26357 * C5931 - C78889 * C5939) * C233 +
              (C26357 * C6448 - C78889 * C6454) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C718 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C78813 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C11584 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C11585 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C11586 +
           (((C26357 * C10194 - C78889 * C10199) * C233 +
             (C26357 * C10493 - C78889 * C10497) * C78890) *
                C26355 +
            ((C37801 - C37802) * C233 + (C38009 - C38010) * C78890) * C26356) *
               C78858) *
              C78812 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C11584 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C11585 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C11586 +
           (((C37802 - C37801) * C233 + (C38010 - C38009) * C78890) * C26355 +
            ((C78889 * C37581 - C26357 * C37580) * C233 +
             (C78889 * C38007 - C26357 * C38006) * C78890) *
                C26356) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C6683 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78697) *
              C6684 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78697) *
              C6685 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C233 +
            (C26355 * C8741 - C26401 * C8671 + C26356 * C34223 -
             C26402 * C34153) *
                C78890) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C11584 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C11585 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C11586 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C233 +
            (C26401 * C10493 - C26355 * C10543 + C26402 * C12645 -
             C26356 * C12715) *
                C78890) *
               C78889 * C78858) *
              C78812 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C11584 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C11585 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C11586 +
           ((C26355 * C12299 - C26401 * C12225 + C26356 * C37658 -
             C26402 * C37580) *
                C233 +
            (C26355 * C12715 - C26401 * C12645 + C26356 * C38076 -
             C26402 * C38006) *
                C78890) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78813 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C6683 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
              C6684 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C78813 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
              C6685 +
          ((C34298 * C26355 +
            (C233 * C33873 - C601 * C33727 - C233 * C34153 + C78890 * C34290) *
                C26356) *
               C78889 * C78697 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78812 +
           ((C30280 * C26355 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C26356) *
                C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C78655) *
              C717 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C78812 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C718 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C78813 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C78812 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C11584 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C11585 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C11586 -
           (C38151 * C26356 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C26355) *
               C78889 * C78858) *
              C78812 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C11585 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C11584 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C11586 +
           (C38151 * C26355 +
            (C233 * C37726 - C601 * C37580 - C233 * C38006 + C78890 * C38143) *
                C26356) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                   C78890 * C26355 +
               (C26357 * C730 - C26358 * C721 - C26357 * C731 + C78889 * C745) *
                   C78890 * C26356) *
                  C78610 * C78592 * C87 -
              ((C26357 * C728 - C26358 * C720 - C26357 * C729 + C78889 * C744) *
                   C78890 * C26356 +
               (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                   C78890 * C26355) *
                  C78610 * C78592 * C88 +
              ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                   C78890 * C26355 +
               (C26357 * C736 - C26358 * C724 - C26357 * C737 + C78889 * C748) *
                   C78890 * C26356) *
                  C78610 * C78592 * C89 -
              ((C26357 * C740 - C26358 * C726 - C26357 * C741 + C78889 * C750) *
                   C78890 * C26356 +
               (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                   C78890 * C26355) *
                  C78610 * C78592 * C90 +
              ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
                   C78890 * C26355 +
               (C26357 * C2526 - C26358 * C2525 - C26357 * C2527 +
                C78889 * C2528) *
                   C78890 * C26356) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                    C78890 * C26355 +
                C26816 * C26356) *
                   C78610 * C78883 -
               (C26817 * C26356 + C26816 * C26355) * C78610 * C78868 +
               (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                                   C26357 * C5462 + C78889 * C5468) *
                                      C78890 * C26356) *
                   C78610 * C78842) *
                  C717 +
              ((C26818 * C26355 + C26819 * C26356) * C78610 * C78868 -
               (C26818 * C26356 +
                (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                    C78890 * C26355) *
                   C78610 * C78883 -
               ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
                 C78889 * C5467) *
                    C78890 * C26356 +
                C26819 * C26355) *
                   C78610 * C78842) *
                  C718 +
              (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                    C78890 * C26355 +
                C26820 * C26356) *
                   C78610 * C78883 -
               (C26821 * C26356 + C26820 * C26355) * C78610 * C78868 +
               (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                                   C26357 * C6691 + C78889 * C6692) *
                                      C78890 * C26356) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78884 -
           ((C26357 * C3837 - C26358 * C3833 - C26357 * C3838 +
             C78889 * C3845) *
                C78890 * C26356 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C78890 * C26355) *
               C78870 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            (C26357 * C5937 - C26358 * C5930 - C26357 * C5938 +
             C78889 * C5948) *
                C78890 * C26356) *
               C78845) *
              C78592 * C717 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            (C26357 * C3839 - C26358 * C3834 - C26357 * C3840 +
             C78889 * C3846) *
                C78890 * C26356) *
               C78870 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78884 -
           ((C26357 * C5935 - C26358 * C5929 - C26357 * C5936 +
             C78889 * C5947) *
                C78890 * C26356 +
            (C26357 * C1639 - C26358 * C1628 - C26357 * C1640 +
             C78889 * C1652) *
                C78890 * C26355) *
               C78845) *
              C78592 * C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78884 -
           ((C26357 * C3841 - C26358 * C3835 - C26357 * C3842 +
             C78889 * C3847) *
                C78890 * C26356 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C78890 * C26355) *
               C78870 +
           ((C26357 * C1643 - C26358 * C1630 - C26357 * C1644 +
             C78889 * C1654) *
                C78890 * C26355 +
            (C26357 * C10692 - C26358 * C10691 - C26357 * C10693 +
             C78889 * C10694) *
                C78890 * C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C4809 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C4810 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78880 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C4810 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C4809 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C4809 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C4810 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           C26816 * C26356) *
              C78610 * C5449 -
          (C26817 * C26356 + C26816 * C26355) * C78610 * C5450 +
          (C26817 * C26355 + C31007 * C26356) * C78610 * C5451 -
          (C31008 * C26356 + C31007 * C26355) * C78610 * C5452 +
          (C31008 * C26355 + (C26357 * C30989 - C26358 * C30988 -
                              C26357 * C30990 + C78889 * C30991) *
                                 C78890 * C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78884 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78870 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C4809 +
          ((C29463 * C26355 + C31495 * C26356) * C78870 -
           (C26817 * C26356 + C26816 * C26355) * C78884 -
           (C31496 * C26356 + C31494 * C26355) * C78845) *
              C4810 +
          ((C26817 * C26355 + C31007 * C26356) * C78884 -
           ((C26357 * C8253 - C26358 * C8251 - C26357 * C8254 +
             C78889 * C8257) *
                C78890 * C26356 +
            C31495 * C26355) *
               C78870 +
           (C31496 * C26355 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C78890 * C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C8885 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C78592 * C78880 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C8886 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C8885 -
           ((C26357 * C5935 - C26358 * C5929 - C26357 * C5936 +
             C78889 * C5947) *
                C78890 * C26356 +
            (C26357 * C1639 - C26358 * C1628 - C26357 * C1640 +
             C78889 * C1652) *
                C78890 * C26355) *
               C78845) *
              C78592 * C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C8885 -
           (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                               C26357 * C1642 + C78889 * C1653) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1643 - C26358 * C1630 - C26357 * C1644 +
             C78889 * C1654) *
                C78890 * C26355 +
            (C26357 * C10692 - C26358 * C10691 - C26357 * C10693 +
             C78889 * C10694) *
                C78890 * C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C8885 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C78883 +
          ((C29463 * C26355 + C31495 * C26356) * C8886 -
           (C26817 * C26356 + C26816 * C26355) * C8885 -
           (C31496 * C26356 + C31494 * C26355) * C78845) *
              C78868 +
          ((C26817 * C26355 + C31007 * C26356) * C8885 -
           (C33739 * C26356 + C31495 * C26355) * C8886 +
           (C31496 * C26355 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C78890 * C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           C26816 * C26356) *
              C10188 -
          (C29463 * C26356 +
           (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 + C78889 * C1650) *
               C78890 * C26355) *
              C10189 +
          ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 + C78889 * C1651) *
               C78890 * C26355 +
           C31494 * C26356) *
              C10190 -
          ((C26357 * C12227 - C26358 * C12225 - C26357 * C12228 +
            C78889 * C12231) *
               C78890 * C26356 +
           (C26357 * C10199 - C26358 * C10194 - C26357 * C10200 +
            C78889 * C10206) *
               C78890 * C26355) *
              C10191 +
          ((C26357 * C10201 - C26358 * C10195 - C26357 * C10202 +
            C78889 * C10207) *
               C78890 * C26355 +
           (C26357 * C35673 - C26358 * C35672 - C26357 * C35674 +
            C78889 * C35675) *
               C78890 * C26356) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                   C26357 +
               (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                   C78889) *
                  C78890 * C78610 * C78592 * C87 +
              ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                   C26357 +
               (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                   C78889) *
                  C78890 * C78610 * C78592 * C88 +
              ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                   C26357 +
               (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                   C78889) *
                  C78890 * C78610 * C78592 * C89 +
              ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                   C26357 +
               (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                   C78889) *
                  C78890 * C78610 * C78592 * C90 +
              ((C26355 * C167 - C26401 * C100 + C26356 * C2595 -
                C26402 * C2525) *
                   C26357 +
               (C26355 * C173 - C26401 * C111 + C26356 * C2596 -
                C26402 * C2527) *
                   C78889) *
                  C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                    C26357 +
                (C26355 * C169 - C26401 * C103 + C26356 * C834 -
                 C26402 * C731) *
                    C78889) *
                   C78890 * C78610 * C78883 +
               ((C26401 * C721 - C26355 * C826 + C26402 * C722 -
                 C26356 * C828) *
                    C26357 +
                (C26401 * C731 - C26355 * C834 + C26402 * C733 -
                 C26356 * C836) *
                    C78889) *
                   C78890 * C78610 * C78868 +
               ((C26355 * C828 - C26401 * C722 + C26356 * C5513 -
                 C26402 * C5456) *
                    C26357 +
                (C26355 * C836 - C26401 * C733 + C26356 * C5517 -
                 C26402 * C5462) *
                    C78889) *
                   C78890 * C78610 * C78842) *
                  C717 +
              (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                    C26357 +
                (C26401 * C105 - C26355 * C170 + C26402 * C729 -
                 C26356 * C835) *
                    C78889) *
                   C78890 * C78610 * C78883 +
               ((C26355 * C827 - C26401 * C720 + C26356 * C829 -
                 C26402 * C723) *
                    C26357 +
                (C26355 * C835 - C26401 * C729 + C26356 * C837 -
                 C26402 * C735) *
                    C78889) *
                   C78890 * C78610 * C78868 +
               ((C26401 * C723 - C26355 * C829 + C26402 * C5455 -
                 C26356 * C5514) *
                    C26357 +
                (C26401 * C735 - C26355 * C837 + C26402 * C5460 -
                 C26356 * C5518) *
                    C78889) *
                   C78890 * C78610 * C78842) *
                  C718 +
              (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                    C26357 +
                (C26355 * C171 - C26401 * C107 + C26356 * C838 -
                 C26402 * C737) *
                    C78889) *
                   C78890 * C78610 * C78883 +
               ((C26401 * C724 - C26355 * C830 + C26402 * C725 -
                 C26356 * C831) *
                    C26357 +
                (C26401 * C737 - C26355 * C838 + C26402 * C739 -
                 C26356 * C839) *
                    C78889) *
                   C78890 * C78610 * C78868 +
               ((C26355 * C831 - C26401 * C725 + C26356 * C6759 -
                 C26402 * C6689) *
                    C26357 +
                (C26355 * C839 - C26401 * C739 + C26356 * C6760 -
                 C26402 * C6691) *
                    C78889) *
                   C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78592 * C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78884 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78870 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C78845) *
              C78592 * C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C26357 +
            (C26355 * C1744 - C26401 * C1644 + C26356 * C10794 -
             C26402 * C10693) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C26357 +
           (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
               C78889) *
              C78890 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C26357 +
           (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
               C78889) *
              C78890 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C26357 +
           (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 - C26356 * C5519) *
               C78889) *
              C78890 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C26357 +
           (C26355 * C5519 - C26401 * C5464 + C26356 * C31051 -
            C26402 * C30990) *
               C78889) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C4809 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78884 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78870 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C78845) *
              C4810 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C26357 +
            (C26355 * C6037 - C26401 * C5944 + C26356 * C31571 -
             C26402 * C31470) *
                C78889) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C8885 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C8886 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C26357 +
            (C26355 * C1744 - C26401 * C1644 + C26356 * C10794 -
             C26402 * C10693) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78883 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C8885 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C8886 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C78845) *
              C78868 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C26357 +
            (C26355 * C6037 - C26401 * C5944 + C26356 * C31571 -
             C26402 * C31470) *
                C78889) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C10188 +
          ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 - C26356 * C3947) *
               C26357 +
           (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 - C26356 * C3951) *
               C78889) *
              C78890 * C10189 +
          ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 - C26402 * C5930) *
               C26357 +
           (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 - C26402 * C5938) *
               C78889) *
              C78890 * C10190 +
          ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
            C26356 * C12299) *
               C26357 +
           (C26401 * C10200 - C26355 * C10255 + C26402 * C12228 -
            C26356 * C12301) *
               C78889) *
              C78890 * C10191 +
          ((C26355 * C10253 - C26401 * C10195 + C26356 * C35718 -
            C26402 * C35672) *
               C26357 +
           (C26355 * C10257 - C26401 * C10202 + C26356 * C35719 -
            C26402 * C35674) *
               C78889) *
              C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78890 * C234 - C233 * C96) * C26357 +
                (C78890 * C240 - C233 * C103) * C78889) *
                   C26355 +
               ((C78890 * C932 - C233 * C721) * C26357 +
                (C78890 * C940 - C233 * C731) * C78889) *
                   C26356) *
                  C78610 * C78592 * C87 +
              (((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
               ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                  C78610 * C78592 * C88 +
              (((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
               ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                  C78610 * C78592 * C89 +
              (((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
               ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
                  C78610 * C78592 * C90 +
              (((C260 - C259) * C26357 + (C262 - C261) * C78889) * C26355 +
               ((C78890 * C2667 - C233 * C2525) * C26357 +
                (C78890 * C2668 - C233 * C2527) * C78889) *
                   C26356) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78890 * C234 - C233 * C96) * C26357 +
                 (C78890 * C240 - C233 * C103) * C78889) *
                    C26355 +
                ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                    C26356) *
                   C78610 * C78883 +
               (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                    C26355 +
                ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                    C26356) *
                   C78610 * C78868 +
               (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                    C26355 +
                ((C78890 * C5563 - C233 * C5456) * C26357 +
                 (C78890 * C5567 - C233 * C5462) * C78889) *
                    C26356) *
                   C78610 * C78842) *
                  C717 +
              ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
                ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                   C78610 * C78883 +
               (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
                ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                   C78610 * C78868 +
               (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
                ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) *
                    C26356) *
                   C78610 * C78842) *
                  C718 +
              ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
                ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                   C78610 * C78883 +
               (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
                ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                   C78610 * C78868 +
               (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
                ((C78890 * C6831 - C233 * C6689) * C26357 +
                 (C78890 * C6832 - C233 * C6691) * C78889) *
                    C26356) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C233 * C3833 - C78890 * C4061) * C26357 +
             (C233 * C3838 - C78890 * C4065) * C78889) *
                C26356) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C78890 * C6113 - C233 * C5930) * C26357 +
             (C78890 * C6119 - C233 * C5938) * C78889) *
                C26356) *
               C78845) *
              C78592 * C717 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78884 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78870 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C78845) *
              C78592 * C718 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78884 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78870 +
           (((C1867 - C1866) * C26357 + (C1869 - C1868) * C78889) * C26355 +
            ((C78890 * C10897 - C233 * C10691) * C26357 +
             (C78890 * C10898 - C233 * C10693) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C4809 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C4810 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C4809 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C4810 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C4809 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C4810 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) * C26356) *
              C78610 * C5449 +
          (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
           ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) * C26356) *
              C78610 * C5450 +
          (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
           ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) * C26356) *
              C78610 * C5451 +
          (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
           ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) * C26356) *
              C78610 * C5452 +
          (((C31102 - C31101) * C26357 + (C31104 - C31103) * C78889) * C26355 +
           ((C78890 * C31094 - C233 * C30988) * C26357 +
            (C78890 * C31095 - C233 * C30990) * C78889) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C4809 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78884 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78870 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C78845) *
              C4810 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78884 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C233 * C8251 - C78890 * C8395) * C26357 +
             (C233 * C8254 - C78890 * C8397) * C78889) *
                C26356) *
               C78870 +
           (((C31658 - C31657) * C26357 + (C31660 - C31659) * C78889) * C26355 +
            ((C78890 * C31646 - C233 * C31468) * C26357 +
             (C78890 * C31647 - C233 * C31470) * C78889) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C8885 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C8886 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C8885 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C8886 +
           (((C1867 - C1866) * C26357 + (C1869 - C1868) * C78889) * C26355 +
            ((C78890 * C10897 - C233 * C10691) * C26357 +
             (C78890 * C10898 - C233 * C10693) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C78883 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C8885 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C8886 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C78845) *
              C78868 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C8885 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C8886 +
           (((C31658 - C31657) * C26357 + (C31660 - C31659) * C78889) * C26355 +
            ((C78890 * C31646 - C233 * C31468) * C26357 +
             (C78890 * C31647 - C233 * C31470) * C78889) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) * C26356) *
              C10188 +
          (((C233 * C1626 - C78890 * C1837) * C26357 +
            (C233 * C1636 - C78890 * C1845) * C78889) *
               C26355 +
           ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) * C26356) *
              C10189 +
          (((C78890 * C1839 - C233 * C1627) * C26357 +
            (C78890 * C1847 - C233 * C1638) * C78889) *
               C26355 +
           ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) * C26356) *
              C10190 +
          (((C233 * C10194 - C78890 * C10301) * C26357 +
            (C233 * C10200 - C78890 * C10305) * C78889) *
               C26355 +
           ((C233 * C12225 - C78890 * C12369) * C26357 +
            (C233 * C12228 - C78890 * C12371) * C78889) *
               C26356) *
              C10191 +
          (((C78890 * C10303 - C233 * C10195) * C26357 +
            (C78890 * C10307 - C233 * C10202) * C78889) *
               C26355 +
           ((C78890 * C35762 - C233 * C35672) * C26357 +
            (C78890 * C35763 - C233 * C35674) * C78889) *
               C26356) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C78889 * C102 - C26357 * C96) * C26401 +
               (C78889 * C310 - C26357 * C304) * C26355 +
               (C78889 * C730 - C26357 * C721) * C26402 +
               (C78889 * C1046 - C26357 * C1038) * C26356) *
                  C78890 * C78610 * C78592 * C87 +
              ((C26357 * C97 - C78889 * C104) * C26401 +
               (C26357 * C305 - C78889 * C311) * C26355 +
               (C26357 * C720 - C78889 * C728) * C26402 +
               (C26357 * C1039 - C78889 * C1047) * C26356) *
                  C78890 * C78610 * C78592 * C88 +
              ((C78889 * C106 - C26357 * C98) * C26401 +
               (C78889 * C312 - C26357 * C306) * C26355 +
               (C78889 * C736 - C26357 * C724) * C26402 +
               (C78889 * C1050 - C26357 * C1042) * C26356) *
                  C78890 * C78610 * C78592 * C89 +
              ((C26357 * C99 - C78889 * C108) * C26401 +
               (C26357 * C307 - C78889 * C313) * C26355 +
               (C26357 * C726 - C78889 * C740) * C26402 +
               (C26357 * C1044 - C78889 * C1052) * C26356) *
                  C78890 * C78610 * C78592 * C90 +
              ((C78889 * C110 - C26357 * C100) * C26401 +
               (C78889 * C314 - C26357 * C308) * C26355 +
               (C78889 * C2526 - C26357 * C2525) * C26402 +
               (C78889 * C2740 - C26357 * C2739) * C26356) *
                  C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C78889 * C102 - C26357 * C96) * C26401 +
                (C78889 * C310 - C26357 * C304) * C26355 +
                (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                   C78890 * C78610 * C78883 +
               ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                   C78890 * C78610 * C78868 +
               ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                (C78889 * C5461 - C26357 * C5456) * C26402 +
                (C78889 * C5617 - C26357 * C5613) * C26356) *
                   C78890 * C78610 * C78842) *
                  C717 +
              (((C26357 * C97 - C78889 * C104) * C26401 +
                (C26357 * C305 - C78889 * C311) * C26355 +
                (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                   C78890 * C78610 * C78883 +
               ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                   C78890 * C78610 * C78868 +
               ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                (C26357 * C5455 - C78889 * C5459) * C26402 +
                (C26357 * C5614 - C78889 * C5618) * C26356) *
                   C78890 * C78610 * C78842) *
                  C718 +
              (((C78889 * C106 - C26357 * C98) * C26401 +
                (C78889 * C312 - C26357 * C306) * C26355 +
                (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                   C78890 * C78610 * C78883 +
               ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                   C78890 * C78610 * C78868 +
               ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                (C78889 * C6690 - C26357 * C6689) * C26402 +
                (C78889 * C6904 - C26357 * C6903) * C26356) *
                   C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78884 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C26357 * C3833 - C78889 * C3837) * C26402 +
            (C26357 * C4175 - C78889 * C4179) * C26356) *
               C78890 * C78870 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C78889 * C5937 - C26357 * C5930) * C26402 +
            (C78889 * C6205 - C26357 * C6199) * C26356) *
               C78890 * C78845) *
              C78592 * C717 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78884 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C78889 * C3839 - C26357 * C3834) * C26402 +
            (C78889 * C4180 - C26357 * C4176) * C26356) *
               C78890 * C78870 +
           ((C26357 * C1628 - C78889 * C1639) * C26401 +
            (C26357 * C1946 - C78889 * C1954) * C26355 +
            (C26357 * C5929 - C78889 * C5935) * C26402 +
            (C26357 * C6200 - C78889 * C6206) * C26356) *
               C78890 * C78845) *
              C78592 * C718 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78884 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C26357 * C3835 - C78889 * C3841) * C26402 +
            (C26357 * C4177 - C78889 * C4181) * C26356) *
               C78890 * C78870 +
           ((C78889 * C1643 - C26357 * C1630) * C26401 +
            (C78889 * C1956 - C26357 * C1948) * C26355 +
            (C78889 * C10692 - C26357 * C10691) * C26402 +
            (C78889 * C11002 - C26357 * C11001) * C26356) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78610 * C4809 +
           ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78610 * C4810 +
           ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C78889 * C5461 - C26357 * C5456) * C26402 +
            (C78889 * C5617 - C26357 * C5613) * C26356) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78610 * C4809 +
           ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
            (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
               C78890 * C78610 * C4810 +
           ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
            (C26357 * C5455 - C78889 * C5459) * C26402 +
            (C26357 * C5614 - C78889 * C5618) * C26356) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78610 * C4809 +
           ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
            (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
               C78890 * C78610 * C4810 +
           ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
            (C78889 * C6690 - C26357 * C6689) * C26402 +
            (C78889 * C6904 - C26357 * C6903) * C26356) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C78889 * C102 - C26357 * C96) * C26401 +
           (C78889 * C310 - C26357 * C304) * C26355 +
           (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
              C78890 * C78610 * C5449 +
          ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
           (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
              C78890 * C78610 * C5450 +
          ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
           (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
              C78890 * C78610 * C5451 +
          ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
           (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
              C78890 * C78610 * C5452 +
          ((C31154 - C31153) * C26401 + (C31156 - C31155) * C26355 +
           (C78889 * C30989 - C26357 * C30988) * C26402 +
           (C78889 * C31147 - C26357 * C31146) * C26356) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78884 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78870 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C78845) *
              C4809 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78884 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78870 +
           ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
            (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
               C78890 * C78845) *
              C4810 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C78884 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C26357 * C8251 - C78889 * C8253) * C26402 +
            (C26357 * C8465 - C78889 * C8467) * C26356) *
               C78890 * C78870 +
           ((C31746 - C31745) * C26401 + (C31748 - C31747) * C26355 +
            (C78889 * C31469 - C26357 * C31468) * C26402 +
            (C78889 * C31735 - C26357 * C31734) * C26356) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C8885 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C8886 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C78845) *
              C78592 * C78880 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C8885 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
               C78890 * C8886 +
           ((C26357 * C1628 - C78889 * C1639) * C26401 +
            (C26357 * C1946 - C78889 * C1954) * C26355 +
            (C26357 * C5929 - C78889 * C5935) * C26402 +
            (C26357 * C6200 - C78889 * C6206) * C26356) *
               C78890 * C78845) *
              C78592 * C78864 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C8885 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
               C78890 * C8886 +
           ((C78889 * C1643 - C26357 * C1630) * C26401 +
            (C78889 * C1956 - C26357 * C1948) * C26355 +
            (C78889 * C10692 - C26357 * C10691) * C26402 +
            (C78889 * C11002 - C26357 * C11001) * C26356) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C8885 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C8886 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C78845) *
              C78883 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C8885 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C8886 +
           ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
            (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
               C78890 * C78845) *
              C78868 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C8885 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
               C78890 * C8886 +
           ((C31746 - C31745) * C26401 + (C31748 - C31747) * C26355 +
            (C78889 * C31469 - C26357 * C31468) * C26402 +
            (C78889 * C31735 - C26357 * C31734) * C26356) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C78889 * C102 - C26357 * C96) * C26401 +
           (C78889 * C310 - C26357 * C304) * C26355 +
           (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
              C78890 * C10188 +
          ((C26357 * C1626 - C78889 * C1635) * C26401 +
           (C26357 * C1943 - C78889 * C1951) * C26355 +
           (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
              C78890 * C10189 +
          ((C78889 * C1637 - C26357 * C1627) * C26401 +
           (C78889 * C1953 - C26357 * C1945) * C26355 +
           (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
              C78890 * C10190 +
          ((C26357 * C10194 - C78889 * C10199) * C26401 +
           (C26357 * C10351 - C78889 * C10355) * C26355 +
           (C26357 * C12225 - C78889 * C12227) * C26402 +
           (C26357 * C12439 - C78889 * C12441) * C26356) *
              C78890 * C10191 +
          ((C78889 * C10201 - C26357 * C10195) * C26401 +
           (C78889 * C10357 - C26357 * C10353) * C26355 +
           (C78889 * C35673 - C26357 * C35672) * C26402 +
           (C78889 * C35807 - C26357 * C35806) * C26356) *
              C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
               C26402 * C826 - C26530 * C721 - C26402 * C1038 +
               C26356 * C1129) *
                  C78889 * C78890 * C78610 * C78592 * C87 -
              (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
               C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                  C78889 * C78890 * C78610 * C78592 * C88 +
              (C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
               C26402 * C830 - C26530 * C724 - C26402 * C1042 +
               C26356 * C1132) *
                  C78889 * C78890 * C78610 * C78592 * C89 -
              (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
               C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
                  C78889 * C78890 * C78610 * C78592 * C90 +
              (C26401 * C167 - C26529 * C100 - C26401 * C308 + C26355 * C363 +
               C26402 * C2595 - C26530 * C2525 - C26402 * C2739 +
               C26356 * C2807) *
                  C78889 * C78890 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
                C26402 * C826 - C26530 * C721 - C26402 * C1038 +
                C26356 * C1129) *
                   C78889 * C78890 * C78610 * C78883 -
               (C26402 * C828 - C26530 * C722 - C26402 * C1040 +
                C26356 * C1130 + C26401 * C826 - C26529 * C721 -
                C26401 * C1038 + C26355 * C1129) *
                   C78889 * C78890 * C78610 * C78868 +
               (C26401 * C828 - C26529 * C722 - C26401 * C1040 +
                C26355 * C1130 + C26402 * C5513 - C26530 * C5456 -
                C26402 * C5613 + C26356 * C5664) *
                   C78889 * C78890 * C78610 * C78842) *
                  C717 +
              ((C26401 * C827 - C26529 * C720 - C26401 * C1039 +
                C26355 * C1128 + C26402 * C829 - C26530 * C723 -
                C26402 * C1041 + C26356 * C1131) *
                   C78889 * C78890 * C78610 * C78868 -
               (C26402 * C827 - C26530 * C720 - C26402 * C1039 +
                C26356 * C1128 + C26401 * C164 - C26529 * C97 - C26401 * C305 +
                C26355 * C360) *
                   C78889 * C78890 * C78610 * C78883 -
               (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 +
                C26356 * C5663 + C26401 * C829 - C26529 * C723 -
                C26401 * C1041 + C26355 * C1131) *
                   C78889 * C78890 * C78610 * C78842) *
                  C718 +
              ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
                C26402 * C830 - C26530 * C724 - C26402 * C1042 +
                C26356 * C1132) *
                   C78889 * C78890 * C78610 * C78883 -
               (C26402 * C831 - C26530 * C725 - C26402 * C1043 +
                C26356 * C1133 + C26401 * C830 - C26529 * C724 -
                C26401 * C1042 + C26355 * C1132) *
                   C78889 * C78890 * C78610 * C78868 +
               (C26401 * C831 - C26529 * C725 - C26401 * C1043 +
                C26355 * C1133 + C26402 * C6759 - C26530 * C6689 -
                C26402 * C6903 + C26356 * C6971) *
                   C78889 * C78890 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78870 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78592 * C717 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78870 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78884 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C78845) *
              C78592 * C718 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78884 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78870 +
           (C26401 * C1736 - C26529 * C1630 - C26401 * C1948 + C26355 * C2038 +
            C26402 * C10793 - C26530 * C10691 - C26402 * C11001 +
            C26356 * C11101) *
               C78889 * C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C78880 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C4810 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C5449 -
          (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
           C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
              C78889 * C78890 * C78610 * C5450 +
          (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
           C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
              C78889 * C78890 * C78610 * C5451 -
          (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
           C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
              C78889 * C78890 * C78610 * C5452 +
          (C26401 * C5515 - C26529 * C5457 - C26401 * C5615 + C26355 * C5665 +
           C26402 * C31050 - C26530 * C30988 - C26402 * C31146 +
           C26356 * C31198) *
              C78889 * C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78870 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C4809 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78870 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C78845) *
              C4810 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78884 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78870 +
           (C26401 * C6031 - C26529 * C5933 - C26401 * C6203 + C26355 * C6289 +
            C26402 * C31570 - C26530 * C31468 - C26402 * C31734 +
            C26356 * C31822) *
               C78889 * C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C8886 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78592 * C78880 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C8886 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C8885 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C78845) *
              C78592 * C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C8885 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C8886 +
           (C26401 * C1736 - C26529 * C1630 - C26401 * C1948 + C26355 * C2038 +
            C26402 * C10793 - C26530 * C10691 - C26402 * C11001 +
            C26356 * C11101) *
               C78889 * C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C8886 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78883 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C8886 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C78845) *
              C78868 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C8885 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C8886 +
           (C26401 * C6031 - C26529 * C5933 - C26401 * C6203 + C26355 * C6289 +
            C26402 * C31570 - C26530 * C31468 - C26402 * C31734 +
            C26356 * C31822) *
               C78889 * C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C10188 -
          (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
           C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
              C78889 * C78890 * C10189 +
          (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
           C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
              C78889 * C78890 * C10190 -
          (C26402 * C12299 - C26530 * C12225 - C26402 * C12439 +
           C26356 * C12509 + C26401 * C10251 - C26529 * C10194 -
           C26401 * C10351 + C26355 * C10402) *
              C78889 * C78890 * C10191 +
          (C26401 * C10253 - C26529 * C10195 - C26401 * C10353 +
           C26355 * C10403 + C26402 * C35718 - C26530 * C35672 -
           C26402 * C35806 + C26356 * C35850) *
              C78889 * C78890 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C78890 * C234 - C233 * C96) * C26401 +
               (C78890 * C435 - C233 * C304) * C26355 +
               (C78890 * C932 - C233 * C721) * C26402 +
               (C78890 * C1238 - C233 * C1038) * C26356) *
                  C78889 * C78610 * C78592 * C87 +
              ((C248 - C247) * C26401 + (C443 - C442) * C26355 +
               (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                  C78889 * C78610 * C78592 * C88 +
              ((C252 - C251) * C26401 + (C445 - C444) * C26355 +
               (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                  C78889 * C78610 * C78592 * C89 +
              ((C256 - C255) * C26401 + (C447 - C446) * C26355 +
               (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                  C78889 * C78610 * C78592 * C90 +
              ((C260 - C259) * C26401 + (C449 - C448) * C26355 +
               (C78890 * C2667 - C233 * C2525) * C26402 +
               (C78890 * C2881 - C233 * C2739) * C26356) *
                  C78889 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C78890 * C234 - C233 * C96) * C26401 +
                (C78890 * C435 - C233 * C304) * C26355 +
                (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                   C78889 * C78610 * C78883 +
               ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                   C78889 * C78610 * C78868 +
               ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                (C78890 * C5563 - C233 * C5456) * C26402 +
                (C78890 * C5709 - C233 * C5613) * C26356) *
                   C78889 * C78610 * C78842) *
                  C717 +
              (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                   C78889 * C78610 * C78883 +
               ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                   C78889 * C78610 * C78868 +
               ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                   C78889 * C78610 * C78842) *
                  C718 +
              (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                   C78889 * C78610 * C78883 +
               ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                   C78889 * C78610 * C78868 +
               ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                (C78890 * C6831 - C233 * C6689) * C26402 +
                (C78890 * C7045 - C233 * C6903) * C26356) *
                   C78889 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78884 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C233 * C3833 - C78890 * C4061) * C26402 +
            (C233 * C4175 - C78890 * C4397) * C26356) *
               C78889 * C78870 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C78890 * C6113 - C233 * C5930) * C26402 +
            (C78890 * C6365 - C233 * C6199) * C26356) *
               C78889 * C78845) *
              C78592 * C717 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78884 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78870 +
           ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
            (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
               C78889 * C78845) *
              C78592 * C718 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78884 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C78870 +
           ((C1867 - C1866) * C26401 + (C2159 - C2158) * C26355 +
            (C78890 * C10897 - C233 * C10691) * C26402 +
            (C78890 * C11207 - C233 * C11001) * C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78610 * C4809 +
           ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78610 * C4810 +
           ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C78890 * C5563 - C233 * C5456) * C26402 +
            (C78890 * C5709 - C233 * C5613) * C26356) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78610 * C4809 +
           ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
            (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
               C78889 * C78610 * C4810 +
           ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
            (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78610 * C4809 +
           ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
            (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
               C78889 * C78610 * C4810 +
           ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
            (C78890 * C6831 - C233 * C6689) * C26402 +
            (C78890 * C7045 - C233 * C6903) * C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C78890 * C234 - C233 * C96) * C26401 +
           (C78890 * C435 - C233 * C304) * C26355 + (C26970 - C26971) * C26402 +
           (C27224 - C27225) * C26356) *
              C78889 * C78610 * C5449 +
          ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
           (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
              C78889 * C78610 * C5450 +
          ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
           (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
              C78889 * C78610 * C5451 +
          ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
           (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
              C78889 * C78610 * C5452 +
          ((C31102 - C31101) * C26401 + (C31246 - C31245) * C26355 +
           (C78890 * C31094 - C233 * C30988) * C26402 +
           (C78890 * C31241 - C233 * C31146) * C26356) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78884 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78870 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C78845) *
              C4809 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78884 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78870 +
           ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
            (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
               C78889 * C78845) *
              C4810 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C78884 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C233 * C8251 - C78890 * C8395) * C26402 +
            (C233 * C8465 - C78890 * C8603) * C26356) *
               C78889 * C78870 +
           ((C31658 - C31657) * C26401 + (C31904 - C31903) * C26355 +
            (C78890 * C31646 - C233 * C31468) * C26402 +
            (C78890 * C31897 - C233 * C31734) * C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C8885 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C8886 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C78845) *
              C78592 * C78880 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C8885 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C8886 +
           ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
            (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
               C78889 * C78845) *
              C78592 * C78864 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C8885 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C8886 +
           ((C1867 - C1866) * C26401 + (C2159 - C2158) * C26355 +
            (C78890 * C10897 - C233 * C10691) * C26402 +
            (C78890 * C11207 - C233 * C11001) * C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C8885 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C8886 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C78845) *
              C78883 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C8885 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C8886 +
           ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
            (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
               C78889 * C78845) *
              C78868 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C8885 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
               C78889 * C8886 +
           ((C31658 - C31657) * C26401 + (C31904 - C31903) * C26355 +
            (C78890 * C31646 - C233 * C31468) * C26402 +
            (C78890 * C31897 - C233 * C31734) * C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C78890 * C234 - C233 * C96) * C26401 +
           (C78890 * C435 - C233 * C304) * C26355 + (C26970 - C26971) * C26402 +
           (C27224 - C27225) * C26356) *
              C78889 * C10188 +
          ((C233 * C1626 - C78890 * C1837) * C26401 +
           (C233 * C1943 - C78890 * C2143) * C26355 +
           (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
              C78889 * C10189 +
          ((C78890 * C1839 - C233 * C1627) * C26401 +
           (C78890 * C2145 - C233 * C1945) * C26355 +
           (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
              C78889 * C10190 +
          ((C233 * C10194 - C78890 * C10301) * C26401 +
           (C233 * C10351 - C78890 * C10447) * C26355 +
           (C233 * C12225 - C78890 * C12369) * C26402 +
           (C233 * C12439 - C78890 * C12577) * C26356) *
              C78889 * C10191 +
          ((C78890 * C10303 - C233 * C10195) * C26401 +
           (C78890 * C10449 - C233 * C10353) * C26355 +
           (C78890 * C35762 - C233 * C35672) * C26402 +
           (C78890 * C35893 - C233 * C35806) * C26356) *
              C78889 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78889 * C102 - C26357 * C96) * C233 +
                (C78889 * C497 - C26357 * C491) * C78890) *
                   C26355 +
               ((C78889 * C730 - C26357 * C721) * C233 +
                (C78889 * C1336 - C26357 * C1328) * C78890) *
                   C26356) *
                  C78610 * C78592 * C87 +
              (((C26357 * C97 - C78889 * C104) * C233 +
                (C26357 * C492 - C78889 * C498) * C78890) *
                   C26355 +
               ((C26357 * C720 - C78889 * C728) * C233 +
                (C26357 * C1329 - C78889 * C1337) * C78890) *
                   C26356) *
                  C78610 * C78592 * C88 +
              (((C78889 * C106 - C26357 * C98) * C233 +
                (C78889 * C499 - C26357 * C493) * C78890) *
                   C26355 +
               ((C78889 * C736 - C26357 * C724) * C233 +
                (C78889 * C1340 - C26357 * C1332) * C78890) *
                   C26356) *
                  C78610 * C78592 * C89 +
              (((C26357 * C99 - C78889 * C108) * C233 +
                (C26357 * C494 - C78889 * C500) * C78890) *
                   C26355 +
               ((C26357 * C726 - C78889 * C740) * C233 +
                (C26357 * C1334 - C78889 * C1342) * C78890) *
                   C26356) *
                  C78610 * C78592 * C90 +
              (((C78889 * C110 - C26357 * C100) * C233 +
                (C78889 * C501 - C26357 * C495) * C78890) *
                   C26355 +
               ((C78889 * C2526 - C26357 * C2525) * C233 +
                (C78889 * C2951 - C26357 * C2950) * C78890) *
                   C26356) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78889 * C102 - C26357 * C96) * C233 +
                 (C78889 * C497 - C26357 * C491) * C78890) *
                    C26355 +
                ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) *
                    C26356) *
                   C78610 * C78883 +
               (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) *
                    C26355 +
                ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) *
                    C26356) *
                   C78610 * C78868 +
               (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) *
                    C26355 +
                ((C78889 * C5461 - C26357 * C5456) * C233 +
                 (C78889 * C5759 - C26357 * C5755) * C78890) *
                    C26356) *
                   C78610 * C78842) *
                  C717 +
              ((((C26357 * C97 - C78889 * C104) * C233 +
                 (C26357 * C492 - C78889 * C498) * C78890) *
                    C26355 +
                ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) *
                    C26356) *
                   C78610 * C78883 +
               (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) *
                    C26355 +
                ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) *
                    C26356) *
                   C78610 * C78868 +
               (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) *
                    C26355 +
                ((C26357 * C5455 - C78889 * C5459) * C233 +
                 (C26357 * C5756 - C78889 * C5760) * C78890) *
                    C26356) *
                   C78610 * C78842) *
                  C718 +
              ((((C78889 * C106 - C26357 * C98) * C233 +
                 (C78889 * C499 - C26357 * C493) * C78890) *
                    C26355 +
                ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) *
                    C26356) *
                   C78610 * C78883 +
               (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) *
                    C26355 +
                ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) *
                    C26356) *
                   C78610 * C78868 +
               (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) *
                    C26355 +
                ((C78889 * C6690 - C26357 * C6689) * C233 +
                 (C78889 * C7115 - C26357 * C7114) * C78890) *
                    C26356) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C26357 * C3833 - C78889 * C3837) * C233 +
             (C26357 * C4503 - C78889 * C4507) * C78890) *
                C26356) *
               C78870 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C78889 * C5937 - C26357 * C5930) * C233 +
             (C78889 * C6451 - C26357 * C6445) * C78890) *
                C26356) *
               C78845) *
              C78592 * C717 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78884 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C78889 * C3839 - C26357 * C3834) * C233 +
             (C78889 * C4508 - C26357 * C4504) * C78890) *
                C26356) *
               C78870 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C26357 * C5929 - C78889 * C5935) * C233 +
             (C26357 * C6446 - C78889 * C6452) * C78890) *
                C26356) *
               C78845) *
              C78592 * C718 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C26357 * C3835 - C78889 * C3841) * C233 +
             (C26357 * C4505 - C78889 * C4509) * C78890) *
                C26356) *
               C78870 +
           (((C78889 * C1643 - C26357 * C1630) * C233 +
             (C78889 * C2246 - C26357 * C2238) * C78890) *
                C26355 +
            ((C78889 * C10692 - C26357 * C10691) * C233 +
             (C78889 * C11309 - C26357 * C11308) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
              C78610 * C5449 +
          (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
           ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
              C78610 * C5450 +
          (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
           ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
              C78610 * C5451 +
          (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
           ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
              C78610 * C5452 +
          (((C31154 - C31153) * C233 + (C31294 - C31293) * C78890) * C26355 +
           ((C78889 * C30989 - C26357 * C30988) * C233 +
            (C78889 * C31289 - C26357 * C31288) * C78890) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78870 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C4809 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78884 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78870 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C78845) *
              C4810 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78884 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C26357 * C8251 - C78889 * C8253) * C233 +
             (C26357 * C8671 - C78889 * C8673) * C78890) *
                C26356) *
               C78870 +
           (((C31746 - C31745) * C233 + (C31986 - C31985) * C78890) * C26355 +
            ((C78889 * C31469 - C26357 * C31468) * C233 +
             (C78889 * C31979 - C26357 * C31978) * C78890) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C78592 * C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C8885 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C8886 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C26357 * C5929 - C78889 * C5935) * C233 +
             (C26357 * C6446 - C78889 * C6452) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1643 - C26357 * C1630) * C233 +
             (C78889 * C2246 - C26357 * C2238) * C78890) *
                C26355 +
            ((C78889 * C10692 - C26357 * C10691) * C233 +
             (C78889 * C11309 - C26357 * C11308) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C78883 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C8885 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C8886 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C78845) *
              C78868 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C8885 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C8886 +
           (((C31746 - C31745) * C233 + (C31986 - C31985) * C78890) * C26355 +
            ((C78889 * C31469 - C26357 * C31468) * C233 +
             (C78889 * C31979 - C26357 * C31978) * C78890) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
              C10188 +
          (((C26357 * C1626 - C78889 * C1635) * C233 +
            (C26357 * C2233 - C78889 * C2241) * C78890) *
               C26355 +
           ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
              C10189 +
          (((C78889 * C1637 - C26357 * C1627) * C233 +
            (C78889 * C2243 - C26357 * C2235) * C78890) *
               C26355 +
           ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
              C10190 +
          (((C26357 * C10194 - C78889 * C10199) * C233 +
            (C26357 * C10493 - C78889 * C10497) * C78890) *
               C26355 +
           ((C26357 * C12225 - C78889 * C12227) * C233 +
            (C26357 * C12645 - C78889 * C12647) * C78890) *
               C26356) *
              C10191 +
          (((C78889 * C10201 - C26357 * C10195) * C233 +
            (C78889 * C10499 - C26357 * C10495) * C78890) *
               C26355 +
           ((C78889 * C35673 - C26357 * C35672) * C233 +
            (C78889 * C35937 - C26357 * C35936) * C78890) *
               C26356) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                   C233 +
               (C26355 * C545 - C26401 * C491 + C26356 * C1418 -
                C26402 * C1328) *
                   C78890) *
                  C78889 * C78610 * C78592 * C87 +
              ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                   C233 +
               (C26401 * C492 - C26355 * C546 + C26402 * C1329 -
                C26356 * C1419) *
                   C78890) *
                  C78889 * C78610 * C78592 * C88 +
              ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                   C233 +
               (C26355 * C547 - C26401 * C493 + C26356 * C1422 -
                C26402 * C1332) *
                   C78890) *
                  C78889 * C78610 * C78592 * C89 +
              ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                   C233 +
               (C26401 * C494 - C26355 * C548 + C26402 * C1334 -
                C26356 * C1424) *
                   C78890) *
                  C78889 * C78610 * C78592 * C90 +
              ((C26355 * C167 - C26401 * C100 + C26356 * C2595 -
                C26402 * C2525) *
                   C233 +
               (C26355 * C549 - C26401 * C495 + C26356 * C3018 -
                C26402 * C2950) *
                   C78890) *
                  C78889 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                    C233 +
                (C26355 * C545 - C26401 * C491 + C26356 * C1418 -
                 C26402 * C1328) *
                    C78890) *
                   C78889 * C78610 * C78883 +
               ((C26401 * C721 - C26355 * C826 + C26402 * C722 -
                 C26356 * C828) *
                    C233 +
                (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
                 C26356 * C1420) *
                    C78890) *
                   C78889 * C78610 * C78868 +
               ((C26355 * C828 - C26401 * C722 + C26356 * C5513 -
                 C26402 * C5456) *
                    C233 +
                (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
                 C26402 * C5755) *
                    C78890) *
                   C78889 * C78610 * C78842) *
                  C717 +
              (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                    C233 +
                (C26401 * C492 - C26355 * C546 + C26402 * C1329 -
                 C26356 * C1419) *
                    C78890) *
                   C78889 * C78610 * C78883 +
               ((C26355 * C827 - C26401 * C720 + C26356 * C829 -
                 C26402 * C723) *
                    C233 +
                (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
                 C26402 * C1331) *
                    C78890) *
                   C78889 * C78610 * C78868 +
               ((C26401 * C723 - C26355 * C829 + C26402 * C5455 -
                 C26356 * C5514) *
                    C233 +
                (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
                 C26356 * C5806) *
                    C78890) *
                   C78889 * C78610 * C78842) *
                  C718 +
              (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                    C233 +
                (C26355 * C547 - C26401 * C493 + C26356 * C1422 -
                 C26402 * C1332) *
                    C78890) *
                   C78889 * C78610 * C78883 +
               ((C26401 * C724 - C26355 * C830 + C26402 * C725 -
                 C26356 * C831) *
                    C233 +
                (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
                 C26356 * C1423) *
                    C78890) *
                   C78889 * C78610 * C78868 +
               ((C26355 * C831 - C26401 * C725 + C26356 * C6759 -
                 C26402 * C6689) *
                    C233 +
                (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
                 C26402 * C7114) *
                    C78890) *
                   C78889 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78592 * C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78884 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78870 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C78845) *
              C78592 * C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C233 +
            (C26355 * C2328 - C26401 * C2238 + C26356 * C11408 -
             C26402 * C11308) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C233 +
           (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 - C26356 * C1420) *
               C78890) *
              C78889 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C233 +
           (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 - C26402 * C5755) *
               C78890) *
              C78889 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C233 +
           (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 - C26356 * C5807) *
               C78890) *
              C78889 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C233 +
           (C26355 * C5807 - C26401 * C5757 + C26356 * C31336 -
            C26402 * C31288) *
               C78890) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C4809 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78884 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78870 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C78845) *
              C4810 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C233 +
            (C26355 * C6535 - C26401 * C6449 + C26356 * C32060 -
             C26402 * C31978) *
                C78890) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C8885 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C8886 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C233 +
            (C26355 * C2328 - C26401 * C2238 + C26356 * C11408 -
             C26402 * C11308) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78883 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C8885 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C8886 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C78845) *
              C78868 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C233 +
            (C26355 * C6535 - C26401 * C6449 + C26356 * C32060 -
             C26402 * C31978) *
                C78890) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C10188 +
          ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 - C26356 * C3947) *
               C233 +
           (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 - C26356 * C4609) *
               C78890) *
              C78889 * C10189 +
          ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 - C26402 * C5930) *
               C233 +
           (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 - C26402 * C6445) *
               C78890) *
              C78889 * C10190 +
          ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
            C26356 * C12299) *
               C233 +
           (C26401 * C10493 - C26355 * C10543 + C26402 * C12645 -
            C26356 * C12715) *
               C78890) *
              C78889 * C10191 +
          ((C26355 * C10253 - C26401 * C10195 + C26356 * C35718 -
            C26402 * C35672) *
               C233 +
           (C26355 * C10545 - C26401 * C10495 + C26356 * C35980 -
            C26402 * C35936) *
               C78890) *
              C78889 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) *
                   C26355 +
               (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
                   C26356) *
                  C78889 * C78610 * C78592 * C87 -
              (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78592 *
                  C88 +
              (C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78592 *
                  C89 -
              (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78592 *
                  C90 +
              (C636 * C26355 +
               (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
                   C26356) *
                  C78889 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) *
                    C26355 +
                C27474 * C26356) *
                   C78889 * C78610 * C78883 -
               (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78868 +
               (C27475 * C26355 +
                (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                    C26356) *
                   C78889 * C78610 * C78842) *
                  C717 +
              ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78868 -
               (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78883 -
               (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
                  C718 +
              ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78883 -
               (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78868 +
               (C1544 * C26355 +
                (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                    C26356) *
                   C78889 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78884 -
           ((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C26356) *
               C78889 * C78845) *
              C78592 * C717 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78870 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78884 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
              C78592 * C718 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78884 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78870 +
           (C2449 * C26355 +
            (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C4809 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C4810 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78880 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C4810 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C4809 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C4809 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C4810 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           C27474 * C26356) *
              C78889 * C78610 * C5449 -
          (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C5450 +
          (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C5451 -
          (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C5452 +
          (C31394 * C26355 +
           (C233 * C31094 - C601 * C30988 - C233 * C31288 + C78890 * C31379) *
               C26356) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78884 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C4809 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78870 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78884 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
              C4810 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C78884 -
           ((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C26356 +
            C32156 * C26355) *
               C78889 * C78870 +
           (C32157 * C26355 +
            (C233 * C31646 - C601 * C31468 - C233 * C31978 + C78890 * C32135) *
                C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C8885 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C78592 * C78880 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C8886 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C8885 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
              C78592 * C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C8885 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C8886 +
           (C2449 * C26355 +
            (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C8885 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C78883 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C8886 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C8885 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
              C78868 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C8885 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C8886 +
           (C32157 * C26355 +
            (C233 * C31646 - C601 * C31468 - C233 * C31978 + C78890 * C32135) *
                C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           C27474 * C26356) *
              C78889 * C10188 -
          (C30280 * C26356 +
           (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
               C26355) *
              C78889 * C10189 +
          ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
               C26355 +
           C32155 * C26356) *
              C78889 * C10190 -
          ((C233 * C12369 - C601 * C12225 - C233 * C12645 + C78890 * C12783) *
               C26356 +
           (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
               C26355) *
              C78889 * C10191 +
          ((C233 * C10303 - C601 * C10195 - C233 * C10495 + C78890 * C10591) *
               C26355 +
           (C233 * C35762 - C601 * C35672 - C233 * C35936 + C78890 * C36023) *
               C26356) *
              C78889 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C4809 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C4810 +
           ((C26817 * C26355 + C31007 * C26356) * C78813 -
            ((C26357 * C8253 - C26358 * C8251 - C26357 * C8254 +
              C78889 * C8257) *
                 C78890 * C26356 +
             C31495 * C26355) *
                C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C4809 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C4810 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78813 -
           ((C26357 * C3837 - C26358 * C3833 - C26357 * C3838 +
             C78889 * C3845) *
                C78890 * C26356 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C78890 * C26355) *
               C78697) *
              C78592 * C2521 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            (C26357 * C3839 - C26358 * C3834 - C26357 * C3840 +
             C78889 * C3846) *
                C78890 * C26356) *
               C78697 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78813) *
              C78592 * C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78813 -
           ((C26357 * C3841 - C26358 * C3835 - C26357 * C3842 +
             C78889 * C3847) *
                C78890 * C26356 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C78890 * C26355) *
               C78697) *
              C78592 * C2523 +
          (((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C78890 * C26355 +
            (C26357 * C3843 - C26358 * C3836 - C26357 * C3844 +
             C78889 * C3848) *
                C78890 * C26356) *
               C78697 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C11584 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C11585 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C11586 -
           ((C26357 * C12227 - C26358 * C12225 - C26357 * C12228 +
             C78889 * C12231) *
                C78890 * C26356 +
            (C26357 * C10199 - C26358 * C10194 - C26357 * C10200 +
             C78889 * C10206) *
                C78890 * C26355) *
               C78858) *
              C78592 * C78798 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C11585 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C11584 -
           (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                               C26357 * C1640 + C78889 * C1652) *
                                  C78890 * C26355) *
               C11586 +
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C78890 * C26355 +
            (C26357 * C12229 - C26358 * C12226 - C26357 * C12230 +
             C78889 * C12232) *
                C78890 * C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C4809 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C4810 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C4809 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C4810 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C26357 +
            (C26355 * C1745 - C26401 * C1646 + C26356 * C3954 -
             C26402 * C3844) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C11584 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C11585 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C11586 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C26357 +
            (C26401 * C10200 - C26355 * C10255 + C26402 * C12228 -
             C26356 * C12301) *
                C78889) *
               C78890 * C78858) *
              C78592 * C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C11584 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C11585 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C11586 +
           ((C26355 * C10252 - C26401 * C10193 + C26356 * C12300 -
             C26402 * C12226) *
                C26357 +
            (C26355 * C10256 - C26401 * C10198 + C26356 * C12302 -
             C26402 * C12230) *
                C78889) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C4809 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C4810 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C78813 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C233 * C8251 - C78890 * C8395) * C26357 +
              (C233 * C8254 - C78890 * C8397) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78798 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C4809 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C4810 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C78813 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C233 * C3833 - C78890 * C4061) * C26357 +
             (C233 * C3838 - C78890 * C4065) * C78889) *
                C26356) *
               C78697) *
              C78592 * C2521 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78813 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78697) *
              C78592 * C2522 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78813 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78697) *
              C78592 * C2523 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78813 +
           (((C3310 - C3309) * C26357 + (C3312 - C3311) * C78889) * C26355 +
            ((C78890 * C4064 - C233 * C3836) * C26357 +
             (C78890 * C4068 - C233 * C3844) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C11584 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C11585 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C11586 +
           (((C233 * C10194 - C78890 * C10301) * C26357 +
             (C233 * C10200 - C78890 * C10305) * C78889) *
                C26355 +
            ((C233 * C12225 - C78890 * C12369) * C26357 +
             (C233 * C12228 - C78890 * C12371) * C78889) *
                C26356) *
               C78858) *
              C78592 * C78798 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C11584 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C11585 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C11586 +
           (((C11734 - C11733) * C26357 + (C11736 - C11735) * C78889) * C26355 +
            ((C78890 * C12370 - C233 * C12226) * C26357 +
             (C78890 * C12372 - C233 * C12230) * C78889) *
                C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C4809 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C4810 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C78813 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C26357 * C8251 - C78889 * C8253) * C26402 +
             (C26357 * C8465 - C78889 * C8467) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C4809 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C4810 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C78813 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C26357 * C3833 - C78889 * C3837) * C26402 +
            (C26357 * C4175 - C78889 * C4179) * C26356) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78813 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C78889 * C3839 - C26357 * C3834) * C26402 +
            (C78889 * C4180 - C26357 * C4176) * C26356) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C26357 * C3835 - C78889 * C3841) * C26402 +
            (C26357 * C4177 - C78889 * C4181) * C26356) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C78813 +
           ((C78889 * C1645 - C26357 * C1631) * C26401 +
            (C78889 * C1957 - C26357 * C1949) * C26355 +
            (C78889 * C3843 - C26357 * C3836) * C26402 +
            (C78889 * C4182 - C26357 * C4178) * C26356) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C11584 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C11585 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C11586 +
           ((C26357 * C10194 - C78889 * C10199) * C26401 +
            (C26357 * C10351 - C78889 * C10355) * C26355 +
            (C26357 * C12225 - C78889 * C12227) * C26402 +
            (C26357 * C12439 - C78889 * C12441) * C26356) *
               C78890 * C78858) *
              C78592 * C78798 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C11584 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
               C78890 * C11585 +
           ((C26357 * C1628 - C78889 * C1639) * C26401 +
            (C26357 * C1946 - C78889 * C1954) * C26355 +
            (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
               C78890 * C11586 +
           ((C78889 * C10197 - C26357 * C10193) * C26401 +
            (C78889 * C10356 - C26357 * C10352) * C26355 +
            (C78889 * C12229 - C26357 * C12226) * C26402 +
            (C78889 * C12442 - C26357 * C12440) * C26356) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C4809 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C4810 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C78813 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C78842) *
              C78798 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C4809 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C4810 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78813 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78592 * C2521 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78697 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78813) *
              C78592 * C2522 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78813 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78697) *
              C78592 * C2523 +
          ((C26401 * C1737 - C26529 * C1631 - C26401 * C1949 + C26355 * C2039 +
            C26402 * C3950 - C26530 * C3836 - C26402 * C4178 + C26356 * C4284) *
               C78889 * C78890 * C78697 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C11584 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C11585 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C11586 -
           (C26402 * C12299 - C26530 * C12225 - C26402 * C12439 +
            C26356 * C12509 + C26401 * C10251 - C26529 * C10194 -
            C26401 * C10351 + C26355 * C10402) *
               C78889 * C78890 * C78858) *
              C78592 * C78798 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C11585 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C11584 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C11586 +
           (C26401 * C10252 - C26529 * C10193 - C26401 * C10352 +
            C26355 * C10401 + C26402 * C12300 - C26530 * C12226 -
            C26402 * C12440 + C26356 * C12510) *
               C78889 * C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C4809 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C4810 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C78813 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C233 * C8251 - C78890 * C8395) * C26402 +
             (C233 * C8465 - C78890 * C8603) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C4809 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C4810 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C78813 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78813 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C233 * C3833 - C78890 * C4061) * C26402 +
            (C233 * C4175 - C78890 * C4397) * C26356) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78813 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78813 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C78813 +
           ((C3310 - C3309) * C26401 + (C3523 - C3522) * C26355 +
            (C78890 * C4064 - C233 * C3836) * C26402 +
            (C78890 * C4400 - C233 * C4178) * C26356) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C11584 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C11585 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C11586 +
           ((C233 * C10194 - C78890 * C10301) * C26401 +
            (C233 * C10351 - C78890 * C10447) * C26355 +
            (C233 * C12225 - C78890 * C12369) * C26402 +
            (C233 * C12439 - C78890 * C12577) * C26356) *
               C78889 * C78858) *
              C78592 * C78798 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C11584 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C11585 +
           ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
            (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
               C78889 * C11586 +
           ((C11734 - C11733) * C26401 + (C11947 - C11946) * C26355 +
            (C78890 * C12370 - C233 * C12226) * C26402 +
            (C78890 * C12578 - C233 * C12440) * C26356) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C4809 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C4810 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C78813 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C26357 * C8251 - C78889 * C8253) * C233 +
              (C26357 * C8671 - C78889 * C8673) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C4809 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C4810 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C78813 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C26357 * C3833 - C78889 * C3837) * C233 +
             (C26357 * C4503 - C78889 * C4507) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2521 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78813 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C78889 * C3839 - C26357 * C3834) * C233 +
             (C78889 * C4508 - C26357 * C4504) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2522 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C26357 * C3835 - C78889 * C3841) * C233 +
             (C26357 * C4505 - C78889 * C4509) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2523 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78813 +
           (((C78889 * C1645 - C26357 * C1631) * C233 +
             (C78889 * C2247 - C26357 * C2239) * C78890) *
                C26355 +
            ((C78889 * C3843 - C26357 * C3836) * C233 +
             (C78889 * C4510 - C26357 * C4506) * C78890) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C11584 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C11585 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C11586 +
           (((C26357 * C10194 - C78889 * C10199) * C233 +
             (C26357 * C10493 - C78889 * C10497) * C78890) *
                C26355 +
            ((C26357 * C12225 - C78889 * C12227) * C233 +
             (C26357 * C12645 - C78889 * C12647) * C78890) *
                C26356) *
               C78858) *
              C78592 * C78798 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C11584 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C11585 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
               C11586 +
           (((C78889 * C10197 - C26357 * C10193) * C233 +
             (C78889 * C10498 - C26357 * C10494) * C78890) *
                C26355 +
            ((C78889 * C12229 - C26357 * C12226) * C233 +
             (C78889 * C12648 - C26357 * C12646) * C78890) *
                C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C4809 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C4810 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C4809 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C4810 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C233 +
            (C26355 * C2329 - C26401 * C2239 + C26356 * C4612 -
             C26402 * C4506) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C11584 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C11585 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C11586 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C233 +
            (C26401 * C10493 - C26355 * C10543 + C26402 * C12645 -
             C26356 * C12715) *
                C78890) *
               C78889 * C78858) *
              C78592 * C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C11584 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C11585 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C11586 +
           ((C26355 * C10252 - C26401 * C10193 + C26356 * C12300 -
             C26402 * C12226) *
                C233 +
            (C26355 * C10544 - C26401 * C10494 + C26356 * C12716 -
             C26402 * C12646) *
                C78890) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C4809 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C4810 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C78813 -
            ((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                 C26356 +
             C32156 * C26355) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C4809 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C4810 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78813 -
           ((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78592 * C2521 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
              C78592 * C2522 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78813 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
              C78592 * C2523 +
          ((C3734 * C26355 +
            (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                C26356) *
               C78889 * C78697 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C11584 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C11585 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C11586 -
           ((C233 * C12369 - C601 * C12225 - C233 * C12645 + C78890 * C12783) *
                C26356 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C26355) *
               C78889 * C78858) *
              C78592 * C78798 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C11585 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C11584 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C11586 +
           (C12158 * C26355 +
            (C233 * C12370 - C601 * C12226 - C233 * C12646 + C78890 * C12784) *
                C26356) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78883 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78868 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C717 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78868 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78883 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78883 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78868 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           (C26357 * C730 - C26358 * C721 - C26357 * C731 + C78889 * C745) *
               C78890 * C26356) *
              C78610 * C78592 * C87 -
          ((C26357 * C728 - C26358 * C720 - C26357 * C729 + C78889 * C744) *
               C78890 * C26356 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C78890 * C26355) *
              C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C78890 * C26355 +
           (C26357 * C736 - C26358 * C724 - C26357 * C737 + C78889 * C748) *
               C78890 * C26356) *
              C78610 * C78592 * C89 -
          ((C26357 * C740 - C26358 * C726 - C26357 * C741 + C78889 * C750) *
               C78890 * C26356 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C78890 * C26355) *
              C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C78890 * C26355 +
           (C26357 * C2526 - C26358 * C2525 - C26357 * C2527 + C78889 * C2528) *
               C78890 * C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C4809 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C4810 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78880 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C4810 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C4809 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C4809 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C4810 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           C26816 * C26356) *
              C78610 * C5449 -
          (C26817 * C26356 + C26816 * C26355) * C78610 * C5450 +
          (C26817 * C26355 + C31007 * C26356) * C78610 * C5451 -
          (C31008 * C26356 + C31007 * C26355) * C78610 * C5452 +
          (C31008 * C26355 + (C26357 * C30989 - C26358 * C30988 -
                              C26357 * C30990 + C78889 * C30991) *
                                 C78890 * C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C8885 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C78592 * C78880 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C8886 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C8885 -
           ((C26357 * C5935 - C26358 * C5929 - C26357 * C5936 +
             C78889 * C5947) *
                C78890 * C26356 +
            (C26357 * C1639 - C26358 * C1628 - C26357 * C1640 +
             C78889 * C1652) *
                C78890 * C26355) *
               C78845) *
              C78592 * C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C8885 -
           (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                               C26357 * C1642 + C78889 * C1653) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1643 - C26358 * C1630 - C26357 * C1644 +
             C78889 * C1654) *
                C78890 * C26355 +
            (C26357 * C10692 - C26358 * C10691 - C26357 * C10693 +
             C78889 * C10694) *
                C78890 * C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C8885 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C8886 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C78883 +
          ((C29463 * C26355 + C31495 * C26356) * C8886 -
           (C26817 * C26356 + C26816 * C26355) * C8885 -
           (C31496 * C26356 + C31494 * C26355) * C78845) *
              C78868 +
          ((C26817 * C26355 + C31007 * C26356) * C8885 -
           (C33739 * C26356 + C31495 * C26355) * C8886 +
           (C31496 * C26355 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C78890 * C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C26357 +
           (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
               C78889) *
              C78890 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C26357 +
           (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
               C78889) *
              C78890 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C26357 +
           (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
               C78889) *
              C78890 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C26357 +
           (C26355 * C173 - C26401 * C111 + C26356 * C2596 - C26402 * C2527) *
               C78889) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C26357 +
           (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
               C78889) *
              C78890 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C26357 +
           (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
               C78889) *
              C78890 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C26357 +
           (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 - C26356 * C5519) *
               C78889) *
              C78890 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C26357 +
           (C26355 * C5519 - C26401 * C5464 + C26356 * C31051 -
            C26402 * C30990) *
               C78889) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C8885 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C8886 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C26357 +
            (C26355 * C1744 - C26401 * C1644 + C26356 * C10794 -
             C26402 * C10693) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78883 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C8885 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C8886 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C78845) *
              C78868 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C8885 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C8886 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C26357 +
            (C26355 * C6037 - C26401 * C5944 + C26356 * C31571 -
             C26402 * C31470) *
                C78889) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78883 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78868 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78883 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78868 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78883 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78868 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C78890 * C932 - C233 * C721) * C26357 +
            (C78890 * C940 - C233 * C731) * C78889) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
           ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
           ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
           ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C26357 + (C262 - C261) * C78889) * C26355 +
           ((C78890 * C2667 - C233 * C2525) * C26357 +
            (C78890 * C2668 - C233 * C2527) * C78889) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C4809 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C4810 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C4809 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C4810 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C4809 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C4810 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) * C26356) *
              C78610 * C5449 +
          (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
           ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) * C26356) *
              C78610 * C5450 +
          (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
           ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) * C26356) *
              C78610 * C5451 +
          (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
           ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) * C26356) *
              C78610 * C5452 +
          (((C31102 - C31101) * C26357 + (C31104 - C31103) * C78889) * C26355 +
           ((C78890 * C31094 - C233 * C30988) * C26357 +
            (C78890 * C31095 - C233 * C30990) * C78889) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C8885 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C8886 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C8885 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C8886 +
           (((C1867 - C1866) * C26357 + (C1869 - C1868) * C78889) * C26355 +
            ((C78890 * C10897 - C233 * C10691) * C26357 +
             (C78890 * C10898 - C233 * C10693) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C8885 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C8886 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C78883 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C8885 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C8886 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C78845) *
              C78868 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C8885 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C8886 +
           (((C31658 - C31657) * C26357 + (C31660 - C31659) * C78889) * C26355 +
            ((C78890 * C31646 - C233 * C31468) * C26357 +
             (C78890 * C31647 - C233 * C31470) * C78889) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C78889 * C730 - C26357 * C721) * C26402 +
                     (C78889 * C1046 - C26357 * C1038) * C26356) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C26401 +
                     (C26357 * C305 - C78889 * C311) * C26355 +
                     (C26357 * C720 - C78889 * C728) * C26402 +
                     (C26357 * C1039 - C78889 * C1047) * C26356) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C26401 +
                     (C78889 * C312 - C26357 * C306) * C26355 +
                     (C78889 * C736 - C26357 * C724) * C26402 +
                     (C78889 * C1050 - C26357 * C1042) * C26356) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C26401 +
                     (C26357 * C307 - C78889 * C313) * C26355 +
                     (C26357 * C726 - C78889 * C740) * C26402 +
                     (C26357 * C1044 - C78889 * C1052) * C26356) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C26401 +
                     (C78889 * C314 - C26357 * C308) * C26355 +
                     (C78889 * C2526 - C26357 * C2525) * C26402 +
                     (C78889 * C2740 - C26357 * C2739) * C26356) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                        C78890 * C78610 * C5449 +
                    ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                     (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                        C78890 * C78610 * C5450 +
                    ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                     (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                        C78890 * C78610 * C5451 +
                    ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
                     (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
                        C78890 * C78610 * C5452 +
                    ((C31154 - C31153) * C26401 + (C31156 - C31155) * C26355 +
                     (C78889 * C30989 - C26357 * C30988) * C26402 +
                     (C78889 * C31147 - C26357 * C31146) * C26356) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C8885 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                         C78890 * C8886 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                         C78890 * C78845) *
                        C78592 * C78880 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C8885 +
                     ((C78889 * C1633 - C26357 * C1625) * C26401 +
                      (C78889 * C1952 - C26357 * C1944) * C26355 +
                      (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                         C78890 * C8886 +
                     ((C26357 * C1628 - C78889 * C1639) * C26401 +
                      (C26357 * C1946 - C78889 * C1954) * C26355 +
                      (C26357 * C5929 - C78889 * C5935) * C26402 +
                      (C26357 * C6200 - C78889 * C6206) * C26356) *
                         C78890 * C78845) *
                        C78592 * C78864 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C8885 +
                     ((C26357 * C1629 - C78889 * C1641) * C26401 +
                      (C26357 * C1947 - C78889 * C1955) * C26355 +
                      (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                         C78890 * C8886 +
                     ((C78889 * C1643 - C26357 * C1630) * C26401 +
                      (C78889 * C1956 - C26357 * C1948) * C26355 +
                      (C78889 * C10692 - C26357 * C10691) * C26402 +
                      (C78889 * C11002 - C26357 * C11001) * C26356) *
                         C78890 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C8885 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                         C78890 * C8886 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                         C78890 * C78845) *
                        C78883 +
                    (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C8885 +
                     ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
                      (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                         C78890 * C8886 +
                     ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
                      (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                         C78890 * C78845) *
                        C78868 +
                    (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C8885 +
                     ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
                      (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                         C78890 * C8886 +
                     ((C31746 - C31745) * C26401 + (C31748 - C31747) * C26355 +
                      (C78889 * C31469 - C26357 * C31468) * C26402 +
                      (C78889 * C31735 - C26357 * C31734) * C26356) *
                         C78890 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C717 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78868 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C718 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C78592 * C87 -
          (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
           C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
              C78889 * C78890 * C78610 * C78592 * C88 +
          (C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
           C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
              C78889 * C78890 * C78610 * C78592 * C89 -
          (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
           C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
              C78889 * C78890 * C78610 * C78592 * C90 +
          (C26401 * C167 - C26529 * C100 - C26401 * C308 + C26355 * C363 +
           C26402 * C2595 - C26530 * C2525 - C26402 * C2739 + C26356 * C2807) *
              C78889 * C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C78880 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C4810 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C5449 -
          (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
           C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
              C78889 * C78890 * C78610 * C5450 +
          (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
           C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
              C78889 * C78890 * C78610 * C5451 -
          (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
           C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
              C78889 * C78890 * C78610 * C5452 +
          (C26401 * C5515 - C26529 * C5457 - C26401 * C5615 + C26355 * C5665 +
           C26402 * C31050 - C26530 * C30988 - C26402 * C31146 +
           C26356 * C31198) *
              C78889 * C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C8886 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78592 * C78880 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C8886 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C8885 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C78845) *
              C78592 * C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C8885 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C8886 +
           (C26401 * C1736 - C26529 * C1630 - C26401 * C1948 + C26355 * C2038 +
            C26402 * C10793 - C26530 * C10691 - C26402 * C11001 +
            C26356 * C11101) *
               C78889 * C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C8886 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78883 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C8886 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C8885 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C78845) *
              C78868 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C8885 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C8886 +
           (C26401 * C6031 - C26529 * C5933 - C26401 * C6203 + C26355 * C6289 +
            C26402 * C31570 - C26530 * C31468 - C26402 * C31734 +
            C26356 * C31822) *
               C78889 * C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C78890 * C932 - C233 * C721) * C26402 +
                     (C78890 * C1238 - C233 * C1038) * C26356) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                     (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                     (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C26401 + (C447 - C446) * C26355 +
                     (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C26401 + (C449 - C448) * C26355 +
                     (C78890 * C2667 - C233 * C2525) * C26402 +
                     (C78890 * C2881 - C233 * C2739) * C26356) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                        C78889 * C78610 * C5449 +
                    ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                     (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                        C78889 * C78610 * C5450 +
                    ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                     (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                        C78889 * C78610 * C5451 +
                    ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
                     (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
                        C78889 * C78610 * C5452 +
                    ((C31102 - C31101) * C26401 + (C31246 - C31245) * C26355 +
                     (C78890 * C31094 - C233 * C30988) * C26402 +
                     (C78890 * C31241 - C233 * C31146) * C26356) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C8885 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                         C78889 * C8886 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                         C78889 * C78845) *
                        C78592 * C78880 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C8885 +
                     ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
                      (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                         C78889 * C8886 +
                     ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
                      (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                         C78889 * C78845) *
                        C78592 * C78864 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C8885 +
                     ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
                      (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                         C78889 * C8886 +
                     ((C1867 - C1866) * C26401 + (C2159 - C2158) * C26355 +
                      (C78890 * C10897 - C233 * C10691) * C26402 +
                      (C78890 * C11207 - C233 * C11001) * C26356) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C8885 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                         C78889 * C8886 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                         C78889 * C78845) *
                        C78883 +
                    (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C8885 +
                     ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
                      (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                         C78889 * C8886 +
                     ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
                      (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                         C78889 * C78845) *
                        C78868 +
                    (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C8885 +
                     ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
                      (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                         C78889 * C8886 +
                     ((C31658 - C31657) * C26401 + (C31904 - C31903) * C26355 +
                      (C78890 * C31646 - C233 * C31468) * C26402 +
                      (C78890 * C31897 - C233 * C31734) * C26356) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezx[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C78889 * C730 - C26357 * C721) * C233 +
            (C78889 * C1336 - C26357 * C1328) * C78890) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C233 +
            (C26357 * C492 - C78889 * C498) * C78890) *
               C26355 +
           ((C26357 * C720 - C78889 * C728) * C233 +
            (C26357 * C1329 - C78889 * C1337) * C78890) *
               C26356) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C233 +
            (C78889 * C499 - C26357 * C493) * C78890) *
               C26355 +
           ((C78889 * C736 - C26357 * C724) * C233 +
            (C78889 * C1340 - C26357 * C1332) * C78890) *
               C26356) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C233 +
            (C26357 * C494 - C78889 * C500) * C78890) *
               C26355 +
           ((C26357 * C726 - C78889 * C740) * C233 +
            (C26357 * C1334 - C78889 * C1342) * C78890) *
               C26356) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C233 +
            (C78889 * C501 - C26357 * C495) * C78890) *
               C26355 +
           ((C78889 * C2526 - C26357 * C2525) * C233 +
            (C78889 * C2951 - C26357 * C2950) * C78890) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
              C78610 * C5449 +
          (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
           ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
              C78610 * C5450 +
          (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
           ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
              C78610 * C5451 +
          (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
           ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
              C78610 * C5452 +
          (((C31154 - C31153) * C233 + (C31294 - C31293) * C78890) * C26355 +
           ((C78889 * C30989 - C26357 * C30988) * C233 +
            (C78889 * C31289 - C26357 * C31288) * C78890) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C78592 * C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C8885 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C8886 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C26357 * C5929 - C78889 * C5935) * C233 +
             (C26357 * C6446 - C78889 * C6452) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1643 - C26357 * C1630) * C233 +
             (C78889 * C2246 - C26357 * C2238) * C78890) *
                C26355 +
            ((C78889 * C10692 - C26357 * C10691) * C233 +
             (C78889 * C11309 - C26357 * C11308) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C8885 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C8886 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C78883 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C8885 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C8886 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C78845) *
              C78868 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C8885 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C8886 +
           (((C31746 - C31745) * C233 + (C31986 - C31985) * C78890) * C26355 +
            ((C78889 * C31469 - C26357 * C31468) * C233 +
             (C78889 * C31979 - C26357 * C31978) * C78890) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C233 +
           (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
               C78890) *
              C78889 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C233 +
           (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
               C78890) *
              C78889 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C233 +
           (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
               C78890) *
              C78889 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C233 +
           (C26355 * C549 - C26401 * C495 + C26356 * C3018 - C26402 * C2950) *
               C78890) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C233 +
           (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 - C26356 * C1420) *
               C78890) *
              C78889 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C233 +
           (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 - C26402 * C5755) *
               C78890) *
              C78889 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C233 +
           (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 - C26356 * C5807) *
               C78890) *
              C78889 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C233 +
           (C26355 * C5807 - C26401 * C5757 + C26356 * C31336 -
            C26402 * C31288) *
               C78890) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C8885 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C8886 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C233 +
            (C26355 * C2328 - C26401 * C2238 + C26356 * C11408 -
             C26402 * C11308) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78883 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C8885 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C8886 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C78845) *
              C78868 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C8885 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C8886 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C233 +
            (C26355 * C6535 - C26401 * C6449 + C26356 * C32060 -
             C26402 * C31978) *
                C78890) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78883 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78868 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C717 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78868 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78883 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C718 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78883 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78868 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C26356) *
              C78889 * C78610 * C78592 * C87 -
          (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78592 * C88 +
          (C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78592 * C89 -
          (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78592 * C90 +
          (C636 * C26355 +
           (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
               C26356) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C4809 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C4810 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78880 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C4810 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C4809 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C4809 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C4810 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           C27474 * C26356) *
              C78889 * C78610 * C5449 -
          (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C5450 +
          (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C5451 -
          (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C5452 +
          (C31394 * C26355 +
           (C233 * C31094 - C601 * C30988 - C233 * C31288 + C78890 * C31379) *
               C26356) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C8885 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C78592 * C78880 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C8886 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C8885 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
              C78592 * C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C8885 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C8886 +
           (C2449 * C26355 +
            (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C8885 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C8886 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C78883 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C8886 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C8885 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
              C78868 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C8885 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C8886 +
           (C32157 * C26355 +
            (C233 * C31646 - C601 * C31468 - C233 * C31978 + C78890 * C32135) *
                C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78655) *
              C78569 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C78812 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78655) *
              C78578 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C17369 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78812 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78569 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C78578 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C17369 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C17369 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C17369 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78655) *
              C78569 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C78812 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C78578 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C17369 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C17369 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C17369 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78569 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78655) *
              C78578 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C17369 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78812 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78655) *
              C78569 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C78812 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C78578 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C17369 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C78812 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78693 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78700 +
            ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
              C78889 * C1651) *
                 C78890 * C26355 +
             C31494 * C26356) *
                C20337) *
               C78812 +
           ((C29463 * C26355 + C31495 * C26356) * C78700 -
            (C26817 * C26356 + C26816 * C26355) * C78693 -
            (C31496 * C26356 + C31494 * C26355) * C20337) *
               C78655) *
              C13455 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78700 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78693 -
            (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                                C26357 * C1640 + C78889 * C1652) *
                                   C78890 * C26355) *
                C20337) *
               C78812 +
           ((C26818 * C26355 + C26819 * C26356) * C78693 -
            (C32871 * C26356 + C29464 * C26355) * C78700 +
            (C36130 * C26355 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C78890 * C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78693 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78700 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C26357 +
             (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
              C26402 * C5938) *
                 C78889) *
                C78890 * C20337) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78693 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78700 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C26357 +
             (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
              C26356 * C6037) *
                 C78889) *
                C78890 * C20337) *
               C78655) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78693 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78700 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C26357 +
             (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
              C26356 * C6034) *
                 C78889) *
                C78890 * C20337) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78693 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78700 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C26357 +
             (C26355 * C6034 - C26401 * C5936 + C26356 * C6038 -
              C26402 * C5946) *
                 C78889) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78693 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78700 +
            (((C78890 * C1839 - C233 * C1627) * C26357 +
              (C78890 * C1847 - C233 * C1638) * C78889) *
                 C26355 +
             ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                 C26356) *
                C20337) *
               C78812 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78693 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78700 +
            (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) *
                 C26355 +
             ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                 C26356) *
                C20337) *
               C78655) *
              C13455 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78693 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78700 +
            (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
             ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                 C26356) *
                C20337) *
               C78812 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78693 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78700 +
            (((C10901 - C10900) * C26357 + (C10903 - C10902) * C78889) *
                 C26355 +
             ((C78890 * C6118 - C233 * C5934) * C26357 +
              (C78890 * C6124 - C233 * C5946) * C78889) *
                 C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78693 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78700 +
            ((C78889 * C1637 - C26357 * C1627) * C26401 +
             (C78889 * C1953 - C26357 * C1945) * C26355 +
             (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                C78890 * C20337) *
               C78812 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78693 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78700 +
            ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
             (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                C78890 * C20337) *
               C78655) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78693 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78700 +
            ((C26357 * C1628 - C78889 * C1639) * C26401 +
             (C26357 * C1946 - C78889 * C1954) * C26355 +
             (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
                C78890 * C20337) *
               C78812 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78693 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78700 +
            ((C36426 - C36425) * C26401 + (C36428 - C36427) * C26355 +
             (C78889 * C5945 - C26357 * C5934) * C26402 +
             (C78889 * C6210 - C26357 * C6204) * C26356) *
                C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78693 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78700 +
            (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
             C26402 * C6027 - C26530 * C5930 - C26402 * C6199 +
             C26356 * C6286) *
                C78889 * C78890 * C20337) *
               C78812 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78700 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78693 -
            (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
             C26401 * C6027 - C26529 * C5930 - C26401 * C6199 +
             C26355 * C6286) *
                C78889 * C78890 * C20337) *
               C78655) *
              C13455 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78700 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78693 -
            (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
             C26401 * C1734 - C26529 * C1628 - C26401 * C1946 +
             C26355 * C2036) *
                C78889 * C78890 * C20337) *
               C78812 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78693 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78700 +
            (C26401 * C6028 - C26529 * C5929 - C26401 * C6200 + C26355 * C6285 +
             C26402 * C6032 - C26530 * C5934 - C26402 * C6204 +
             C26356 * C6290) *
                C78889 * C78890 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78693 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78700 +
            ((C78890 * C1839 - C233 * C1627) * C26401 +
             (C78890 * C2145 - C233 * C1945) * C26355 +
             (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                C78889 * C20337) *
               C78812 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78693 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78700 +
            ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
             (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                C78889 * C20337) *
               C78655) *
              C13455 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78693 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78700 +
            ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
             (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                C78889 * C20337) *
               C78812 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78693 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78700 +
            ((C10901 - C10900) * C26401 + (C11210 - C11209) * C26355 +
             (C78890 * C6118 - C233 * C5934) * C26402 +
             (C78890 * C6370 - C233 * C6204) * C26356) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78693 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78700 +
            (((C78889 * C1637 - C26357 * C1627) * C233 +
              (C78889 * C2243 - C26357 * C2235) * C78890) *
                 C26355 +
             ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
                C20337) *
               C78812 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78693 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78700 +
            (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
             ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
                C20337) *
               C78655) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78693 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78700 +
            (((C26357 * C1628 - C78889 * C1639) * C233 +
              (C26357 * C2236 - C78889 * C2244) * C78890) *
                 C26355 +
             ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
                C20337) *
               C78812 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78693 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78700 +
            (((C36426 - C36425) * C233 + (C36724 - C36723) * C78890) * C26355 +
             ((C78889 * C5945 - C26357 * C5934) * C233 +
              (C78889 * C6456 - C26357 * C6450) * C78890) *
                 C26356) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78693 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78700 +
            ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
              C26402 * C5930) *
                 C233 +
             (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
              C26402 * C6445) *
                 C78890) *
                C78889 * C20337) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78693 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78700 +
            ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
              C26356 * C6031) *
                 C233 +
             (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
              C26356 * C6535) *
                 C78890) *
                C78889 * C20337) *
               C78655) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78693 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78700 +
            ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
              C26356 * C6028) *
                 C233 +
             (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
              C26356 * C6532) *
                 C78890) *
                C78889 * C20337) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78693 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78700 +
            ((C26355 * C6028 - C26401 * C5929 + C26356 * C6032 -
              C26402 * C5934) *
                 C233 +
             (C26355 * C6532 - C26401 * C6446 + C26356 * C6536 -
              C26402 * C6450) *
                 C78890) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78693 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78700 +
            ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                 C26355 +
             C32155 * C26356) *
                C78889 * C20337) *
               C78812 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78700 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78693 -
            (C32157 * C26356 + C32155 * C26355) * C78889 * C20337) *
               C78655) *
              C13455 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78700 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78693 -
            (C11517 * C26356 + C2447 * C26355) * C78889 * C20337) *
               C78812 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78693 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78700 +
            (C11517 * C26355 +
             (C233 * C6118 - C601 * C5934 - C233 * C6450 + C78890 * C6616) *
                 C26356) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78883 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78868 +
           ((C26817 * C26355 + C31007 * C26356) * C17369 -
            (C33739 * C26356 + C31495 * C26355) * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C78883 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78868 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C17369 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C78592 * C78892 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C78697 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C17369) *
              C78592 * C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C17369 -
           (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                               C26357 * C1642 + C78889 * C1653) *
                                  C78890 * C26355) *
               C78697) *
              C78592 * C78866 +
          (((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C78890 * C26355 +
            (C26357 * C3843 - C26358 * C3836 - C26357 * C3844 +
             C78889 * C3848) *
                C78890 * C26356) *
               C78697 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78894 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78888 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78876 -
           (C37592 * C26356 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C78890 * C26355) *
               C78858) *
              C78592 * C13455 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C78888 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78894 -
           (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                               C26357 * C1640 + C78889 * C1652) *
                                  C78890 * C26355) *
               C78876 +
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C78890 * C26355 +
            (C26357 * C12229 - C26358 * C12226 - C26357 * C12230 +
             C78889 * C12232) *
                C78890 * C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78883 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78868 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78883 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78868 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C26357 +
            (C26355 * C1745 - C26401 * C1646 + C26356 * C3954 -
             C26402 * C3844) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78894 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78888 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78876 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C26357 +
            (C26401 * C10200 - C26355 * C10255 + C26402 * C12228 -
             C26356 * C12301) *
                C78889) *
               C78890 * C78858) *
              C78592 * C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78894 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78888 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C78876 +
           ((C26355 * C10252 - C26401 * C10193 + C26356 * C12300 -
             C26402 * C12226) *
                C26357 +
            (C26355 * C10256 - C26401 * C10198 + C26356 * C12302 -
             C26402 * C12230) *
                C78889) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78883 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78868 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C17369 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C13455 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78883 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78868 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C17369 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78892 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C17369 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78697) *
              C78592 * C78882 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C17369 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78697) *
              C78592 * C78866 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C17369 +
           (((C3310 - C3309) * C26357 + (C3312 - C3311) * C78889) * C26355 +
            ((C78890 * C4064 - C233 * C3836) * C26357 +
             (C78890 * C4068 - C233 * C3844) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78894 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78888 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78876 +
           (((C233 * C10194 - C78890 * C10301) * C26357 +
             (C233 * C10200 - C78890 * C10305) * C78889) *
                C26355 +
            ((C37729 - C37730) * C26357 + (C37731 - C37732) * C78889) *
                C26356) *
               C78858) *
              C78592 * C13455 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78894 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78888 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C78876 +
           (((C11734 - C11733) * C26357 + (C11736 - C11735) * C78889) * C26355 +
            ((C78890 * C12370 - C233 * C12226) * C26357 +
             (C78890 * C12372 - C233 * C12230) * C78889) *
                C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78883 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78868 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C17369 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78883 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78868 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C17369 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C17369 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C17369 +
           ((C78889 * C1645 - C26357 * C1631) * C26401 +
            (C78889 * C1957 - C26357 * C1949) * C26355 +
            (C78889 * C3843 - C26357 * C3836) * C26402 +
            (C78889 * C4182 - C26357 * C4178) * C26356) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78894 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78888 +
           ((C78889 * C1637 - C26357 * C1627) * C26401 +
            (C78889 * C1953 - C26357 * C1945) * C26355 +
            (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
               C78890 * C78876 +
           ((C26357 * C10194 - C78889 * C10199) * C26401 +
            (C26357 * C10351 - C78889 * C10355) * C26355 +
            (C37801 - C37802) * C26402 + (C37803 - C37804) * C26356) *
               C78890 * C78858) *
              C78592 * C13455 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78894 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
               C78890 * C78888 +
           ((C26357 * C1628 - C78889 * C1639) * C26401 +
            (C26357 * C1946 - C78889 * C1954) * C26355 +
            (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
               C78890 * C78876 +
           ((C78889 * C10197 - C26357 * C10193) * C26401 +
            (C78889 * C10356 - C26357 * C10352) * C26355 +
            (C78889 * C12229 - C26357 * C12226) * C26402 +
            (C78889 * C12442 - C26357 * C12440) * C26356) *
               C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78883 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78868 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C17369 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C78842) *
              C13455 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C78883 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78868 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C17369 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78592 * C78892 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78697 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C17369) *
              C78592 * C78882 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C17369 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78697) *
              C78592 * C78866 +
          ((C26401 * C1737 - C26529 * C1631 - C26401 * C1949 + C26355 * C2039 +
            C26402 * C3950 - C26530 * C3836 - C26402 * C4178 + C26356 * C4284) *
               C78889 * C78890 * C78697 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78894 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78888 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78876 -
           (C26402 * C12299 - C26530 * C12225 - C26402 * C12439 +
            C26356 * C12509 + C26401 * C10251 - C26529 * C10194 -
            C26401 * C10351 + C26355 * C10402) *
               C78889 * C78890 * C78858) *
              C78592 * C13455 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78888 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78894 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C78876 +
           (C26401 * C10252 - C26529 * C10193 - C26401 * C10352 +
            C26355 * C10401 + C26402 * C12300 - C26530 * C12226 -
            C26402 * C12440 + C26356 * C12510) *
               C78889 * C78890 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78883 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78868 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C17369 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78883 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78868 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C17369 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C17369 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C17369 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C17369 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C17369 +
           ((C3310 - C3309) * C26401 + (C3523 - C3522) * C26355 +
            (C78890 * C4064 - C233 * C3836) * C26402 +
            (C78890 * C4400 - C233 * C4178) * C26356) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78894 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78888 +
           ((C78890 * C1839 - C233 * C1627) * C26401 +
            (C78890 * C2145 - C233 * C1945) * C26355 +
            (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
               C78889 * C78876 +
           ((C233 * C10194 - C78890 * C10301) * C26401 +
            (C233 * C10351 - C78890 * C10447) * C26355 +
            (C37729 - C37730) * C26402 + (C37939 - C37940) * C26356) *
               C78889 * C78858) *
              C78592 * C13455 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78894 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78888 +
           ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
            (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
               C78889 * C78876 +
           ((C11734 - C11733) * C26401 + (C11947 - C11946) * C26355 +
            (C78890 * C12370 - C233 * C12226) * C26402 +
            (C78890 * C12578 - C233 * C12440) * C26356) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78883 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78868 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C17369 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
                C78697) *
               C78842) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78883 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78868 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C17369 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C78592 * C78892 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C17369 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C78697) *
              C78592 * C78882 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
               C78697) *
              C78592 * C78866 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C17369 +
           (((C78889 * C1645 - C26357 * C1631) * C233 +
             (C78889 * C2247 - C26357 * C2239) * C78890) *
                C26355 +
            ((C78889 * C3843 - C26357 * C3836) * C233 +
             (C78889 * C4510 - C26357 * C4506) * C78890) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78894 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78888 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78876 +
           (((C26357 * C10194 - C78889 * C10199) * C233 +
             (C26357 * C10493 - C78889 * C10497) * C78890) *
                C26355 +
            ((C37801 - C37802) * C233 + (C38009 - C38010) * C78890) * C26356) *
               C78858) *
              C78592 * C13455 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78894 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C78888 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
               C78876 +
           (((C78889 * C10197 - C26357 * C10193) * C233 +
             (C78889 * C10498 - C26357 * C10494) * C78890) *
                C26355 +
            ((C78889 * C12229 - C26357 * C12226) * C233 +
             (C78889 * C12648 - C26357 * C12646) * C78890) *
                C26356) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78883 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78868 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78883 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78868 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C233 +
            (C26355 * C2329 - C26401 * C2239 + C26356 * C4612 -
             C26402 * C4506) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78894 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78888 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78876 +
           ((C26401 * C10194 - C26355 * C10251 + C26402 * C12225 -
             C26356 * C12299) *
                C233 +
            (C26401 * C10493 - C26355 * C10543 + C26402 * C12645 -
             C26356 * C12715) *
                C78890) *
               C78889 * C78858) *
              C78592 * C13455 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78894 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78888 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C78876 +
           ((C26355 * C10252 - C26401 * C10193 + C26356 * C12300 -
             C26402 * C12226) *
                C233 +
            (C26355 * C10544 - C26401 * C10494 + C26356 * C12716 -
             C26402 * C12646) *
                C78890) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78883 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78868 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C17369 -
            (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
               C78842) *
              C13455 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C78883 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78868 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C17369 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78592 * C78892 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
              C78592 * C78882 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C17369 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
              C78592 * C78866 +
          ((C3734 * C26355 +
            (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                C26356) *
               C78889 * C78697 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78894 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78888 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78876 -
           (C38151 * C26356 +
            (C233 * C10301 - C601 * C10194 - C233 * C10493 + C78890 * C10590) *
                C26355) *
               C78889 * C78858) *
              C78592 * C13455 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78888 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78894 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C78876 +
           (C12158 * C26355 +
            (C233 * C12370 - C601 * C12226 - C233 * C12646 + C78890 * C12784) *
                C26356) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78693 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78700 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C20337) *
              C78592 * C78569 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C78700 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78693 -
           (C36130 * C26356 + (C26357 * C1639 - C26358 * C1628 -
                               C26357 * C1640 + C78889 * C1652) *
                                  C78890 * C26355) *
               C20337) *
              C78592 * C78578 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78693 -
           (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                               C26357 * C1642 + C78889 * C1653) *
                                  C78890 * C26355) *
               C78700 +
           ((C26357 * C1643 - C26358 * C1630 - C26357 * C1644 +
             C78889 * C1654) *
                C78890 * C26355 +
            (C26357 * C10692 - C26358 * C10691 - C26357 * C10693 +
             C78889 * C10694) *
                C78890 * C26356) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78693 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78700 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C20337) *
              C78592 * C78569 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78693 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78700 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C20337) *
              C78592 * C78578 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78693 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78700 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C26357 +
            (C26355 * C1744 - C26401 * C1644 + C26356 * C10794 -
             C26402 * C10693) *
                C78889) *
               C78890 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78693 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78700 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C20337) *
              C78592 * C78569 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78693 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78700 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C20337) *
              C78592 * C78578 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78693 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78700 +
           (((C1867 - C1866) * C26357 + (C1869 - C1868) * C78889) * C26355 +
            ((C78890 * C10897 - C233 * C10691) * C26357 +
             (C78890 * C10898 - C233 * C10693) * C78889) *
                C26356) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78693 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                         C78890 * C78700 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                         C78890 * C20337) *
                        C78592 * C78569 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78693 +
                     ((C78889 * C1633 - C26357 * C1625) * C26401 +
                      (C78889 * C1952 - C26357 * C1944) * C26355 +
                      (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                         C78890 * C78700 +
                     ((C26357 * C1628 - C78889 * C1639) * C26401 +
                      (C26357 * C1946 - C78889 * C1954) * C26355 +
                      (C36425 - C36426) * C26402 + (C36427 - C36428) * C26356) *
                         C78890 * C20337) *
                        C78592 * C78578 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78693 +
                     ((C26357 * C1629 - C78889 * C1641) * C26401 +
                      (C26357 * C1947 - C78889 * C1955) * C26355 +
                      (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                         C78890 * C78700 +
                     ((C78889 * C1643 - C26357 * C1630) * C26401 +
                      (C78889 * C1956 - C26357 * C1948) * C26355 +
                      (C78889 * C10692 - C26357 * C10691) * C26402 +
                      (C78889 * C11002 - C26357 * C11001) * C26356) *
                         C78890 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78693 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78700 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C20337) *
              C78592 * C78569 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78700 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78693 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C20337) *
              C78592 * C78578 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78693 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78700 +
           (C26401 * C1736 - C26529 * C1630 - C26401 * C1948 + C26355 * C2038 +
            C26402 * C10793 - C26530 * C10691 - C26402 * C11001 +
            C26356 * C11101) *
               C78889 * C78890 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78693 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                         C78889 * C78700 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                         C78889 * C20337) *
                        C78592 * C78569 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78693 +
                     ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
                      (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                         C78889 * C78700 +
                     ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
                      (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                         C78889 * C20337) *
                        C78592 * C78578 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78693 +
                     ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
                      (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                         C78889 * C78700 +
                     ((C1867 - C1866) * C26401 + (C2159 - C2158) * C26355 +
                      (C78890 * C10897 - C233 * C10691) * C26402 +
                      (C78890 * C11207 - C233 * C11001) * C26356) *
                         C78889 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78693 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78700 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C20337) *
              C78592 * C78569 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78693 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C78700 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C36425 - C36426) * C233 + (C36723 - C36724) * C78890) * C26356) *
               C20337) *
              C78592 * C78578 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78693 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
               C78700 +
           (((C78889 * C1643 - C26357 * C1630) * C233 +
             (C78889 * C2246 - C26357 * C2238) * C78890) *
                C26355 +
            ((C78889 * C10692 - C26357 * C10691) * C233 +
             (C78889 * C11309 - C26357 * C11308) * C78890) *
                C26356) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78693 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78700 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C20337) *
              C78592 * C78569 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78693 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78700 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C20337) *
              C78592 * C78578 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78693 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78700 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C233 +
            (C26355 * C2328 - C26401 * C2238 + C26356 * C11408 -
             C26402 * C11308) *
                C78890) *
               C78889 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78693 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78700 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C20337) *
              C78592 * C78569 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78700 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78693 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C20337) *
              C78592 * C78578 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78693 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78700 +
           (C2449 * C26355 +
            (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                C26356) *
               C78889 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C17369 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C78592 * C78892 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            C29464 * C26356) *
               C78697 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C17369) *
              C78592 * C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C17369 -
           (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                               C26357 * C1642 + C78889 * C1653) *
                                  C78890 * C26355) *
               C78697) *
              C78592 * C78866 +
          (((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C78890 * C26355 +
            (C26357 * C3843 - C26358 * C3836 - C26357 * C3844 +
             C78889 * C3848) *
                C78890 * C26356) *
               C78697 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C17369 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78883 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C17369) *
               C78868 +
           ((C26817 * C26355 + C31007 * C26356) * C17369 -
            (C33739 * C26356 + C31495 * C26355) * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C17369) *
               C78883 +
           ((C26818 * C26355 + C26819 * C26356) * C17369 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C78868 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C17369 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C17369 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C26357 +
            (C26355 * C1745 - C26401 * C1646 + C26356 * C3954 -
             C26402 * C3844) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78883 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78868 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78883 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78868 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C17369 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78892 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C17369 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78697) *
              C78592 * C78882 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C17369 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78697) *
              C78592 * C78866 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C17369 +
           (((C3310 - C3309) * C26357 + (C3312 - C3311) * C78889) * C26355 +
            ((C78890 * C4064 - C233 * C3836) * C26357 +
             (C78890 * C4068 - C233 * C3844) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C17369 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78883 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C17369 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C78868 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C17369 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C13455 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C17369 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78883 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C17369 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78868 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C17369 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C78592 * C78892 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C17369 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
               C78890 * C78697) *
              C78592 * C78882 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C17369 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
               C78890 * C78697) *
              C78592 * C78866 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C17369 +
           ((C78889 * C1645 - C26357 * C1631) * C26401 +
            (C78889 * C1957 - C26357 * C1949) * C26355 +
            (C78889 * C3843 - C26357 * C3836) * C26402 +
            (C78889 * C4182 - C26357 * C4178) * C26356) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C17369 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78883 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C17369 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C78868 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C17369 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
                C78890 * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C17369 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78883 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C17369 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C78868 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C17369 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C17369 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78592 * C78892 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78697 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C17369) *
              C78592 * C78882 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C17369 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78697) *
              C78592 * C78866 +
          ((C26401 * C1737 - C26529 * C1631 - C26401 * C1949 + C26355 * C2039 +
            C26402 * C3950 - C26530 * C3836 - C26402 * C4178 + C26356 * C4284) *
               C78889 * C78890 * C78697 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C17369 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78883 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C17369) *
               C78868 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C17369 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C78842) *
              C13455 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C17369) *
               C78883 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C17369 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78868 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C17369 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C17369 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C17369 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C17369 +
           ((C3310 - C3309) * C26401 + (C3523 - C3522) * C26355 +
            (C78890 * C4064 - C233 * C3836) * C26402 +
            (C78890 * C4400 - C233 * C4178) * C26356) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C17369 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78883 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C17369 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C78868 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C17369 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C17369 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78883 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C17369 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78868 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C17369 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C78592 * C78892 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C17369 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
               C78697) *
              C78592 * C78882 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C17369 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
               C78697) *
              C78592 * C78866 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C17369 +
           (((C78889 * C1645 - C26357 * C1631) * C233 +
             (C78889 * C2247 - C26357 * C2239) * C78890) *
                C26355 +
            ((C78889 * C3843 - C26357 * C3836) * C233 +
             (C78889 * C4510 - C26357 * C4506) * C78890) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C17369 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78883 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C17369 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C78868 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C17369 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
                C78697) *
               C78842) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C17369 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78883 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C17369 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C78868 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C17369 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C17369 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C17369 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C233 +
            (C26355 * C2329 - C26401 * C2239 + C26356 * C4612 -
             C26402 * C4506) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78883 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78868 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78883 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C17369 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78868 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C17369 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C17369 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78592 * C78892 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
              C78592 * C78882 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C17369 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
              C78592 * C78866 +
          ((C3734 * C26355 +
            (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                C26356) *
               C78889 * C78697 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C17369 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78883 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C17369) *
               C78868 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C17369 -
            (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
               C78842) *
              C13455 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C17369) *
               C78883 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C17369 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78868 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78812 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78655) *
              C2521 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78655 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78812) *
              C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78812 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78655) *
              C2523 +
          ((C28215 * C26355 +
            (C26357 * C742 - C26358 * C727 - C26357 * C743 + C78889 * C751) *
                C78890 * C26356) *
               C78610 * C78655 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C6683 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C6684 +
           (C26817 * C26355 + C31007 * C26356) * C78610 * C6685 -
           (C31008 * C26356 + C31007 * C26355) * C78610 * C78852) *
              C78798 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C6684 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C6683 -
           (C32231 * C26356 + C26819 * C26355) * C78610 * C6685 +
           (C32231 * C26355 + (C26357 * C5465 - C26358 * C5458 -
                               C26357 * C5466 + C78889 * C5470) *
                                  C78890 * C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78655) *
              C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78610 * C78812 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C26357 +
            (C26355 * C840 - C26401 * C741 + C26356 * C841 - C26402 * C743) *
                C78889) *
               C78890 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C6683 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C6684 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C6685 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C6683 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C6684 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C6685 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C26357 +
            (C26355 * C5518 - C26401 * C5460 + C26356 * C5520 -
             C26402 * C5466) *
                C78889) *
               C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78812 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78655) *
              C2521 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78812 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78655) *
              C2522 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78812 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78655) *
              C2523 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78610 * C78812 +
           (((C2671 - C2670) * C26357 + (C2673 - C2672) * C78889) * C26355 +
            ((C78890 * C939 - C233 * C727) * C26357 +
             (C78890 * C947 - C233 * C743) * C78889) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C6683 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C6684 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78610 * C6685 +
           (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78798 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C6683 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C6684 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C6685 +
           (((C6835 - C6834) * C26357 + (C6837 - C6836) * C78889) * C26355 +
            ((C78890 * C5566 - C233 * C5458) * C26357 +
             (C78890 * C5570 - C233 * C5466) * C78889) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78812 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78655) *
                        C2521 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78812 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78655) *
                        C2522 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C78812 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78655) *
                        C2523 +
                    (((C26357 * C99 - C78889 * C108) * C26401 +
                      (C26357 * C307 - C78889 * C313) * C26355 +
                      (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
                         C78890 * C78610 * C78812 +
                     ((C28415 - C28414) * C26401 + (C28417 - C28416) * C26355 +
                      (C78889 * C742 - C26357 * C727) * C26402 +
                      (C78889 * C1053 - C26357 * C1045) * C26356) *
                         C78890 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C6683 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C6684 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C78610 * C6685 +
                     ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
                      (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
                         C78890 * C78610 * C78852) *
                        C78798 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C6683 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C6684 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                         C78890 * C78610 * C6685 +
                     ((C32431 - C32430) * C26401 + (C32433 - C32432) * C26355 +
                      (C78889 * C5465 - C26357 * C5458) * C26402 +
                      (C78889 * C5620 - C26357 * C5616) * C26356) *
                         C78890 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78812 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78655) *
              C2521 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78812) *
              C2522 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78812 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78655) *
              C2523 +
          ((C26401 * C832 - C26529 * C726 - C26401 * C1044 + C26355 * C1134 +
            C26402 * C833 - C26530 * C727 - C26402 * C1045 + C26356 * C1135) *
               C78889 * C78890 * C78610 * C78655 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C6683 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C6684 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C6685 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78610 * C78852) *
              C78798 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C6684 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C6683 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C6685 +
           (C26401 * C5514 - C26529 * C5455 - C26401 * C5614 + C26355 * C5663 +
            C26402 * C5516 - C26530 * C5458 - C26402 * C5616 + C26356 * C5666) *
               C78889 * C78890 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[45] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78812 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78655) *
                        C2521 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78812 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78655) *
                        C2522 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C78812 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78655) *
                        C2523 +
                    (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
                      (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                         C78889 * C78610 * C78812 +
                     ((C2671 - C2670) * C26401 + (C2884 - C2883) * C26355 +
                      (C78890 * C939 - C233 * C727) * C26402 +
                      (C78890 * C1245 - C233 * C1045) * C26356) *
                         C78889 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C6683 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C6684 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C78610 * C6685 +
                     ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
                      (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
                         C78889 * C78610 * C78852) *
                        C78798 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C6683 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C6684 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C6685 +
                     ((C6835 - C6834) * C26401 + (C7048 - C7047) * C26355 +
                      (C78890 * C5566 - C233 * C5458) * C26402 +
                      (C78890 * C5712 - C233 * C5616) * C26356) *
                         C78889 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78655) *
              C2521 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78655) *
              C2522 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78812 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78655) *
              C2523 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78610 * C78812 +
           (((C28415 - C28414) * C233 + (C28617 - C28616) * C78890) * C26355 +
            ((C78889 * C742 - C26357 * C727) * C233 +
             (C78889 * C1343 - C26357 * C1335) * C78890) *
                C26356) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C6683 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C6684 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78610 * C6685 +
           (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78610 * C78852) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C6683 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C6684 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
               C78610 * C6685 +
           (((C32431 - C32430) * C233 + (C32633 - C32632) * C78890) * C26355 +
            ((C78889 * C5465 - C26357 * C5458) * C233 +
             (C78889 * C5762 - C26357 * C5758) * C78890) *
                C26356) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78610 * C78812 +
           ((C26355 * C832 - C26401 * C726 + C26356 * C833 - C26402 * C727) *
                C233 +
            (C26355 * C1424 - C26401 * C1334 + C26356 * C1425 -
             C26402 * C1335) *
                C78890) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C6683 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C6684 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C6685 +
           ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C6683 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C6684 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C6685 +
           ((C26355 * C5514 - C26401 * C5455 + C26356 * C5516 -
             C26402 * C5458) *
                C233 +
            (C26355 * C5806 - C26401 * C5756 + C26356 * C5808 -
             C26402 * C5758) *
                C78890) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78812 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78655) *
              C2521 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78655 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78812) *
              C2522 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78812 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78655) *
              C2523 +
          ((C3095 * C26355 +
            (C233 * C939 - C601 * C727 - C233 * C1335 + C78890 * C1515) *
                C26356) *
               C78889 * C78610 * C78655 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C6683 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C6684 +
           (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C6685 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C78852) *
              C78798 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C6684 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C6683 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C6685 +
           (C7259 * C26355 +
            (C233 * C5566 - C601 * C5458 - C233 * C5758 + C78890 * C5854) *
                C26356) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29463 * C26355 + (C26357 * C5941 - C26358 * C5932 -
                                C26357 * C5942 + C78889 * C5950) *
                                   C78890 * C26356) *
                C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C78655) *
              C717 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C78812 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            ((C26357 * C5939 - C26358 * C5931 - C26357 * C5940 +
              C78889 * C5949) *
                 C78890 * C26356 +
             C29464 * C26355) *
                C78697) *
               C78655) *
              C718 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C78890 * C26355 +
             C26820 * C26356) *
                C78813 -
            (C29465 * C26356 + (C26357 * C1641 - C26358 * C1629 -
                                C26357 * C1642 + C78889 * C1653) *
                                   C78890 * C26355) *
                C78697) *
               C78812 +
           ((C29465 * C26355 + (C26357 * C7359 - C26358 * C7358 -
                                C26357 * C7360 + C78889 * C7361) *
                                   C78890 * C26356) *
                C78697 -
            (C26821 * C26356 + C26820 * C26355) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78813 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78697) *
              C6683 +
          ((C29463 * C26355 + C31495 * C26356) * C78697 -
           (C26817 * C26356 + C26816 * C26355) * C78813) *
              C6684 +
          ((C26817 * C26355 + C31007 * C26356) * C78813 -
           (C33739 * C26356 + C31495 * C26355) * C78697) *
              C6685 +
          ((C33739 * C26355 + (C26357 * C33728 - C26358 * C33727 -
                               C26357 * C33729 + C78889 * C33730) *
                                  C78890 * C26356) *
               C78697 -
           (C31008 * C26356 + C31007 * C26355) * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C26357 +
             (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C26357 +
             (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
              C26356 * C3953) *
                 C78889) *
                C78890 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C26357 +
             (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C26357 +
             (C26355 * C3953 - C26401 * C3842 + C26356 * C7461 -
              C26402 * C7360) *
                 C78889) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C6683 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78697) *
              C6684 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78697) *
              C6685 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C26357 +
            (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 -
             C26356 * C5519) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C26357 +
            (C26355 * C8327 - C26401 * C8254 + C26356 * C33806 -
             C26402 * C33729) *
                C78889) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C78812 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C78890 * C6115 - C233 * C5932) * C26357 +
              (C78890 * C6121 - C233 * C5942) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C717 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C78655) *
              C718 +
          (((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
             ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
                C78813 +
            (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
             ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
                C78697) *
               C78812 +
           ((((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
             ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
                C78813 +
            (((C4075 - C4074) * C26357 + (C4077 - C4076) * C78889) * C26355 +
             ((C78890 * C7564 - C233 * C7358) * C26357 +
              (C78890 * C7565 - C233 * C7360) * C78889) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78697) *
              C6683 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78813 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78697) *
              C6684 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78813 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C33876 - C33877) * C26357 + (C33878 - C33879) * C78889) *
                C26356) *
               C78697) *
              C6685 +
          ((((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
            ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) *
                C26356) *
               C78813 +
           (((C33877 - C33876) * C26357 + (C33879 - C33878) * C78889) * C26355 +
            ((C78890 * C33873 - C233 * C33727) * C26357 +
             (C78890 * C33874 - C233 * C33729) * C78889) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C78889 * C5941 - C26357 * C5932) * C26402 +
             (C78889 * C6207 - C26357 * C6201) * C26356) *
                C78890 * C78697) *
               C78655) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C26357 * C5931 - C78889 * C5939) * C26402 +
             (C26357 * C6202 - C78889 * C6208) * C26356) *
                C78890 * C78697) *
               C78655) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C26401 +
             (C78889 * C312 - C26357 * C306) * C26355 +
             (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1629 - C78889 * C1641) * C26401 +
             (C26357 * C1947 - C78889 * C1955) * C26355 +
             (C29772 - C29773) * C26402 + (C29774 - C29775) * C26356) *
                C78890 * C78697) *
               C78812 +
           (((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
             (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                C78890 * C78813 +
            ((C29773 - C29772) * C26401 + (C29775 - C29774) * C26355 +
             (C78889 * C7359 - C26357 * C7358) * C26402 +
             (C78889 * C7669 - C26357 * C7668) * C26356) *
                C78890 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
               C78890 * C78697) *
              C6683 +
          (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
            (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
               C78890 * C78813 +
           ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
            (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
               C78890 * C78697) *
              C6684 +
          (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
            (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
               C78890 * C78813 +
           ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
            (C33948 - C33949) * C26402 + (C33950 - C33951) * C26356) *
               C78890 * C78697) *
              C6685 +
          (((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
            (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
               C78890 * C78813 +
           ((C33949 - C33948) * C26401 + (C33951 - C33950) * C26355 +
            (C78889 * C33728 - C26357 * C33727) * C26402 +
            (C78889 * C33946 - C26357 * C33945) * C26356) *
               C78890 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C78655) *
              C717 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C78812 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C78655) *
              C718 +
          (((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
             C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
                C78889 * C78890 * C78813 -
            (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
             C26401 * C1735 - C26529 * C1629 - C26401 * C1947 +
             C26355 * C2037) *
                C78889 * C78890 * C78697) *
               C78812 +
           ((C26401 * C3949 - C26529 * C3835 - C26401 * C4177 + C26355 * C4283 +
             C26402 * C7460 - C26530 * C7358 - C26402 * C7668 +
             C26356 * C7768) *
                C78889 * C78890 * C78697 -
            (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
             C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
                C78889 * C78890 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78813 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C6683 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78697 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78813) *
              C6684 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78813 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78697) *
              C6685 +
          ((C26401 * C8325 - C26529 * C8251 - C26401 * C8465 + C26355 * C8535 +
            C26402 * C33805 - C26530 * C33727 - C26402 * C33945 +
            C26356 * C34017) *
               C78889 * C78890 * C78697 -
           (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
            C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
               C78889 * C78890 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C78890 * C6115 - C233 * C5932) * C26402 +
             (C78890 * C6367 - C233 * C6201) * C26356) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C252 - C251) * C26401 + (C445 - C444) * C26355 +
             (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                C78889 * C78813 +
            ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
             (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                C78889 * C78697) *
               C78812 +
           (((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
             (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                C78889 * C78813 +
            ((C4075 - C4074) * C26401 + (C4405 - C4404) * C26355 +
             (C78890 * C7564 - C233 * C7358) * C26402 +
             (C78890 * C7874 - C233 * C7668) * C26356) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78813 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
               C78889 * C78697) *
              C6683 +
          (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
            (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
               C78889 * C78813 +
           ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
            (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
               C78889 * C78697) *
              C6684 +
          (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
            (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
               C78889 * C78813 +
           ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
            (C33876 - C33877) * C26402 + (C34086 - C34087) * C26356) *
               C78889 * C78697) *
              C6685 +
          (((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
            (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
               C78889 * C78813 +
           ((C33877 - C33876) * C26401 + (C34087 - C34086) * C26355 +
            (C78890 * C33873 - C233 * C33727) * C26402 +
            (C78890 * C34084 - C233 * C33945) * C26356) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C78889 * C5941 - C26357 * C5932) * C233 +
              (C78889 * C6453 - C26357 * C6447) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C717 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C26357 * C5931 - C78889 * C5939) * C233 +
              (C26357 * C6448 - C78889 * C6454) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C718 +
          (((((C78889 * C106 - C26357 * C98) * C233 +
              (C78889 * C499 - C26357 * C493) * C78890) *
                 C26355 +
             ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1629 - C78889 * C1641) * C233 +
              (C26357 * C2237 - C78889 * C2245) * C78890) *
                 C26355 +
             ((C29772 - C29773) * C233 + (C30076 - C30077) * C78890) * C26356) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
             ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
                C78813 +
            (((C29773 - C29772) * C233 + (C30077 - C30076) * C78890) * C26355 +
             ((C78889 * C7359 - C26357 * C7358) * C233 +
              (C78889 * C7976 - C26357 * C7975) * C78890) *
                 C26356) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78697) *
              C6683 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78813 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78697) *
              C6684 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78813 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C33948 - C33949) * C233 + (C34156 - C34157) * C78890) * C26356) *
               C78697) *
              C6685 +
          ((((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
            ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
               C78813 +
           (((C33949 - C33948) * C233 + (C34157 - C34156) * C78890) * C26355 +
            ((C78889 * C33728 - C26357 * C33727) * C233 +
             (C78889 * C34154 - C26357 * C34153) * C78890) *
                C26356) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                 C233 +
             (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
              C26356 * C3949) *
                 C233 +
             (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
              C26356 * C4611) *
                 C78890) *
                C78889 * C78697) *
               C78812 +
           (((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                 C233 +
             (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
              C26356 * C1423) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3949 - C26401 * C3835 + C26356 * C7460 -
              C26402 * C7358) *
                 C233 +
             (C26355 * C4611 - C26401 * C4505 + C26356 * C8075 -
              C26402 * C7975) *
                 C78890) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C6683 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78697) *
              C6684 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78697) *
              C6685 +
          (((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 -
             C26356 * C5515) *
                C233 +
            (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 -
             C26356 * C5807) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C8325 - C26401 * C8251 + C26356 * C33805 -
             C26402 * C33727) *
                C233 +
            (C26355 * C8741 - C26401 * C8671 + C26356 * C34223 -
             C26402 * C34153) *
                C78890) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C78812 +
           ((C30280 * C26355 +
             (C233 * C6115 - C601 * C5932 - C233 * C6447 + C78890 * C6614) *
                 C26356) *
                C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C78655) *
              C717 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C78812 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C78655) *
              C718 +
          (((C634 * C26355 + C1543 * C26356) * C78889 * C78813 -
            (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
               C78812 +
           ((C4733 * C26355 +
             (C233 * C7564 - C601 * C7358 - C233 * C7975 + C78890 * C8176) *
                 C26356) *
                C78889 * C78697 -
            (C1544 * C26356 + C1543 * C26355) * C78889 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78813 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C6683 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
              C6684 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C78813 -
           (C34298 * C26356 + C32156 * C26355) * C78889 * C78697) *
              C6685 +
          ((C34298 * C26355 +
            (C233 * C33873 - C601 * C33727 - C233 * C34153 + C78890 * C34290) *
                C26356) *
               C78889 * C78697 -
           (C31394 * C26356 + C31393 * C26355) * C78889 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78883 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78868 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C717 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78868 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78883 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78883 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78868 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           (C26357 * C730 - C26358 * C721 - C26357 * C731 + C78889 * C745) *
               C78890 * C26356) *
              C78610 * C78592 * C87 -
          ((C26357 * C728 - C26358 * C720 - C26357 * C729 + C78889 * C744) *
               C78890 * C26356 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C78890 * C26355) *
              C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C78890 * C26355 +
           (C26357 * C736 - C26358 * C724 - C26357 * C737 + C78889 * C748) *
               C78890 * C26356) *
              C78610 * C78592 * C89 -
          ((C26357 * C740 - C26358 * C726 - C26357 * C741 + C78889 * C750) *
               C78890 * C26356 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C78890 * C26355) *
              C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C78890 * C26355 +
           (C26357 * C2526 - C26358 * C2525 - C26357 * C2527 + C78889 * C2528) *
               C78890 * C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78884 -
           ((C26357 * C3837 - C26358 * C3833 - C26357 * C3838 +
             C78889 * C3845) *
                C78890 * C26356 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C78890 * C26355) *
               C78870 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            (C26357 * C5937 - C26358 * C5930 - C26357 * C5938 +
             C78889 * C5948) *
                C78890 * C26356) *
               C78845) *
              C78592 * C717 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            (C26357 * C3839 - C26358 * C3834 - C26357 * C3840 +
             C78889 * C3846) *
                C78890 * C26356) *
               C78870 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78884 -
           ((C26357 * C5935 - C26358 * C5929 - C26357 * C5936 +
             C78889 * C5947) *
                C78890 * C26356 +
            (C26357 * C1639 - C26358 * C1628 - C26357 * C1640 +
             C78889 * C1652) *
                C78890 * C26355) *
               C78845) *
              C78592 * C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78884 -
           ((C26357 * C3841 - C26358 * C3835 - C26357 * C3842 +
             C78889 * C3847) *
                C78890 * C26356 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C78890 * C26355) *
               C78870 +
           ((C26357 * C1643 - C26358 * C1630 - C26357 * C1644 +
             C78889 * C1654) *
                C78890 * C26355 +
            (C26357 * C10692 - C26358 * C10691 - C26357 * C10693 +
             C78889 * C10694) *
                C78890 * C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C4809 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C4810 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78880 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C4810 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C4809 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C4809 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C4810 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           C26816 * C26356) *
              C78610 * C5449 -
          (C26817 * C26356 + C26816 * C26355) * C78610 * C5450 +
          (C26817 * C26355 + C31007 * C26356) * C78610 * C5451 -
          (C31008 * C26356 + C31007 * C26355) * C78610 * C5452 +
          (C31008 * C26355 + (C26357 * C30989 - C26358 * C30988 -
                              C26357 * C30990 + C78889 * C30991) *
                                 C78890 * C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78884 -
           (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                               C26357 * C1636 + C78889 * C1650) *
                                  C78890 * C26355) *
               C78870 +
           ((C26357 * C1637 - C26358 * C1627 - C26357 * C1638 +
             C78889 * C1651) *
                C78890 * C26355 +
            C31494 * C26356) *
               C78845) *
              C4809 +
          ((C29463 * C26355 + C31495 * C26356) * C78870 -
           (C26817 * C26356 + C26816 * C26355) * C78884 -
           (C31496 * C26356 + C31494 * C26355) * C78845) *
              C4810 +
          ((C26817 * C26355 + C31007 * C26356) * C78884 -
           ((C26357 * C8253 - C26358 * C8251 - C26357 * C8254 +
             C78889 * C8257) *
                C78890 * C26356 +
            C31495 * C26355) *
               C78870 +
           (C31496 * C26355 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C78890 * C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C26357 +
           (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
               C78889) *
              C78890 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C26357 +
           (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
               C78889) *
              C78890 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C26357 +
           (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
               C78889) *
              C78890 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C26357 +
           (C26355 * C173 - C26401 * C111 + C26356 * C2596 - C26402 * C2527) *
               C78889) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C78592 * C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78884 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78870 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C26357 +
            (C26401 * C1640 - C26355 * C1742 + C26402 * C5936 -
             C26356 * C6034) *
                C78889) *
               C78890 * C78845) *
              C78592 * C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C26357 +
            (C26355 * C1744 - C26401 * C1644 + C26356 * C10794 -
             C26402 * C10693) *
                C78889) *
               C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C26357 +
           (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
               C78889) *
              C78890 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C26357 +
           (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
               C78889) *
              C78890 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C26357 +
           (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 - C26356 * C5519) *
               C78889) *
              C78890 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C26357 +
           (C26355 * C5519 - C26401 * C5464 + C26356 * C31051 -
            C26402 * C30990) *
               C78889) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C26357 +
            (C26355 * C1741 - C26401 * C1638 + C26356 * C6033 -
             C26402 * C5938) *
                C78889) *
               C78890 * C78845) *
              C4809 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78884 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C26357 +
            (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
             C26402 * C5942) *
                C78889) *
               C78890 * C78870 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C26357 +
            (C26401 * C5938 - C26355 * C6033 + C26402 * C5944 -
             C26356 * C6037) *
                C78889) *
               C78890 * C78845) *
              C4810 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78884 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C26357 +
            (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
             C26356 * C8327) *
                C78889) *
               C78890 * C78870 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C26357 +
            (C26355 * C6037 - C26401 * C5944 + C26356 * C31571 -
             C26402 * C31470) *
                C78889) *
               C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78883 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78868 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78883 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78868 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78883 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78868 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C78890 * C932 - C233 * C721) * C26357 +
            (C78890 * C940 - C233 * C731) * C78889) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
           ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
           ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
           ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C26357 + (C262 - C261) * C78889) * C26355 +
           ((C78890 * C2667 - C233 * C2525) * C26357 +
            (C78890 * C2668 - C233 * C2527) * C78889) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C233 * C3833 - C78890 * C4061) * C26357 +
             (C233 * C3838 - C78890 * C4065) * C78889) *
                C26356) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C78890 * C6113 - C233 * C5930) * C26357 +
             (C78890 * C6119 - C233 * C5938) * C78889) *
                C26356) *
               C78845) *
              C78592 * C717 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78884 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78870 +
           (((C1859 - C1858) * C26357 + (C1861 - C1860) * C78889) * C26355 +
            ((C10900 - C10901) * C26357 + (C10902 - C10903) * C78889) *
                C26356) *
               C78845) *
              C78592 * C718 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78884 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78870 +
           (((C1867 - C1866) * C26357 + (C1869 - C1868) * C78889) * C26355 +
            ((C78890 * C10897 - C233 * C10691) * C26357 +
             (C78890 * C10898 - C233 * C10693) * C78889) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C4809 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C4810 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C4809 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C4810 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C4809 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C4810 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) * C26356) *
              C78610 * C5449 +
          (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
           ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) * C26356) *
              C78610 * C5450 +
          (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
           ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) * C26356) *
              C78610 * C5451 +
          (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
           ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) * C26356) *
              C78610 * C5452 +
          (((C31102 - C31101) * C26357 + (C31104 - C31103) * C78889) * C26355 +
           ((C78890 * C31094 - C233 * C30988) * C26357 +
            (C78890 * C31095 - C233 * C30990) * C78889) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78884 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                C26356) *
               C78870 +
           (((C78890 * C1839 - C233 * C1627) * C26357 +
             (C78890 * C1847 - C233 * C1638) * C78889) *
                C26355 +
            ((C31649 - C31650) * C26357 + (C31651 - C31652) * C78889) *
                C26356) *
               C78845) *
              C4809 +
          ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78884 +
           (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) * C26355 +
            ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                C26356) *
               C78870 +
           (((C31650 - C31649) * C26357 + (C31652 - C31651) * C78889) * C26355 +
            ((C31657 - C31658) * C26357 + (C31659 - C31660) * C78889) *
                C26356) *
               C78845) *
              C4810 +
          ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                C26356) *
               C78884 +
           (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) * C26355 +
            ((C233 * C8251 - C78890 * C8395) * C26357 +
             (C233 * C8254 - C78890 * C8397) * C78889) *
                C26356) *
               C78870 +
           (((C31658 - C31657) * C26357 + (C31660 - C31659) * C78889) * C26355 +
            ((C78890 * C31646 - C233 * C31468) * C26357 +
             (C78890 * C31647 - C233 * C31470) * C78889) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[47] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C78889 * C730 - C26357 * C721) * C26402 +
                     (C78889 * C1046 - C26357 * C1038) * C26356) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C26401 +
                     (C26357 * C305 - C78889 * C311) * C26355 +
                     (C26357 * C720 - C78889 * C728) * C26402 +
                     (C26357 * C1039 - C78889 * C1047) * C26356) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C26401 +
                     (C78889 * C312 - C26357 * C306) * C26355 +
                     (C78889 * C736 - C26357 * C724) * C26402 +
                     (C78889 * C1050 - C26357 * C1042) * C26356) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C26401 +
                     (C26357 * C307 - C78889 * C313) * C26355 +
                     (C26357 * C726 - C78889 * C740) * C26402 +
                     (C26357 * C1044 - C78889 * C1052) * C26356) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C26401 +
                     (C78889 * C314 - C26357 * C308) * C26355 +
                     (C78889 * C2526 - C26357 * C2525) * C26402 +
                     (C78889 * C2740 - C26357 * C2739) * C26356) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78884 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C26357 * C3833 - C78889 * C3837) * C26402 +
                      (C26357 * C4175 - C78889 * C4179) * C26356) *
                         C78890 * C78870 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C78889 * C5937 - C26357 * C5930) * C26402 +
                      (C78889 * C6205 - C26357 * C6199) * C26356) *
                         C78890 * C78845) *
                        C78592 * C717 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78884 +
                     ((C78889 * C1633 - C26357 * C1625) * C26401 +
                      (C78889 * C1952 - C26357 * C1944) * C26355 +
                      (C78889 * C3839 - C26357 * C3834) * C26402 +
                      (C78889 * C4180 - C26357 * C4176) * C26356) *
                         C78890 * C78870 +
                     ((C26357 * C1628 - C78889 * C1639) * C26401 +
                      (C26357 * C1946 - C78889 * C1954) * C26355 +
                      (C26357 * C5929 - C78889 * C5935) * C26402 +
                      (C26357 * C6200 - C78889 * C6206) * C26356) *
                         C78890 * C78845) *
                        C78592 * C718 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78884 +
                     ((C26357 * C1629 - C78889 * C1641) * C26401 +
                      (C26357 * C1947 - C78889 * C1955) * C26355 +
                      (C26357 * C3835 - C78889 * C3841) * C26402 +
                      (C26357 * C4177 - C78889 * C4181) * C26356) *
                         C78890 * C78870 +
                     ((C78889 * C1643 - C26357 * C1630) * C26401 +
                      (C78889 * C1956 - C26357 * C1948) * C26355 +
                      (C78889 * C10692 - C26357 * C10691) * C26402 +
                      (C78889 * C11002 - C26357 * C11001) * C26356) *
                         C78890 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                        C78890 * C78610 * C5449 +
                    ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                     (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                        C78890 * C78610 * C5450 +
                    ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                     (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                        C78890 * C78610 * C5451 +
                    ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
                     (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
                        C78890 * C78610 * C5452 +
                    ((C31154 - C31153) * C26401 + (C31156 - C31155) * C26355 +
                     (C78889 * C30989 - C26357 * C30988) * C26402 +
                     (C78889 * C31147 - C26357 * C31146) * C26356) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78884 +
                     ((C26357 * C1626 - C78889 * C1635) * C26401 +
                      (C26357 * C1943 - C78889 * C1951) * C26355 +
                      (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                         C78890 * C78870 +
                     ((C78889 * C1637 - C26357 * C1627) * C26401 +
                      (C78889 * C1953 - C26357 * C1945) * C26355 +
                      (C31737 - C31738) * C26402 + (C31739 - C31740) * C26356) *
                         C78890 * C78845) *
                        C4809 +
                    (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78884 +
                     ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
                      (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                         C78890 * C78870 +
                     ((C31738 - C31737) * C26401 + (C31740 - C31739) * C26355 +
                      (C31745 - C31746) * C26402 + (C31747 - C31748) * C26356) *
                         C78890 * C78845) *
                        C4810 +
                    (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                         C78890 * C78884 +
                     ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
                      (C26357 * C8251 - C78889 * C8253) * C26402 +
                      (C26357 * C8465 - C78889 * C8467) * C26356) *
                         C78890 * C78870 +
                     ((C31746 - C31745) * C26401 + (C31748 - C31747) * C26355 +
                      (C78889 * C31469 - C26357 * C31468) * C26402 +
                      (C78889 * C31735 - C26357 * C31734) * C26356) *
                         C78890 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C717 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78868 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C718 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C78592 * C87 -
          (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
           C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
              C78889 * C78890 * C78610 * C78592 * C88 +
          (C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
           C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
              C78889 * C78890 * C78610 * C78592 * C89 -
          (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
           C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
              C78889 * C78890 * C78610 * C78592 * C90 +
          (C26401 * C167 - C26529 * C100 - C26401 * C308 + C26355 * C363 +
           C26402 * C2595 - C26530 * C2525 - C26402 * C2739 + C26356 * C2807) *
              C78889 * C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78870 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C78592 * C717 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78870 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78884 -
           (C26402 * C6028 - C26530 * C5929 - C26402 * C6200 + C26356 * C6285 +
            C26401 * C1734 - C26529 * C1628 - C26401 * C1946 + C26355 * C2036) *
               C78889 * C78890 * C78845) *
              C78592 * C718 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78884 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78870 +
           (C26401 * C1736 - C26529 * C1630 - C26401 * C1948 + C26355 * C2038 +
            C26402 * C10793 - C26530 * C10691 - C26402 * C11001 +
            C26356 * C11101) *
               C78889 * C78890 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C78880 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C4810 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C5449 -
          (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
           C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
              C78889 * C78890 * C78610 * C5450 +
          (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
           C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
              C78889 * C78890 * C78610 * C5451 -
          (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
           C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
              C78889 * C78890 * C78610 * C5452 +
          (C26401 * C5515 - C26529 * C5457 - C26401 * C5615 + C26355 * C5665 +
           C26402 * C31050 - C26530 * C30988 - C26402 * C31146 +
           C26356 * C31198) *
              C78889 * C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78870 +
           (C26401 * C1733 - C26529 * C1627 - C26401 * C1945 + C26355 * C2035 +
            C26402 * C6027 - C26530 * C5930 - C26402 * C6199 + C26356 * C6286) *
               C78889 * C78890 * C78845) *
              C4809 +
          ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
            C26402 * C6029 - C26530 * C5932 - C26402 * C6201 + C26356 * C6288) *
               C78889 * C78890 * C78870 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78884 -
           (C26402 * C6031 - C26530 * C5933 - C26402 * C6203 + C26356 * C6289 +
            C26401 * C6027 - C26529 * C5930 - C26401 * C6199 + C26355 * C6286) *
               C78889 * C78890 * C78845) *
              C4810 +
          ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78884 -
           (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
            C26401 * C6029 - C26529 * C5932 - C26401 * C6201 + C26355 * C6288) *
               C78889 * C78890 * C78870 +
           (C26401 * C6031 - C26529 * C5933 - C26401 * C6203 + C26355 * C6289 +
            C26402 * C31570 - C26530 * C31468 - C26402 * C31734 +
            C26356 * C31822) *
               C78889 * C78890 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[47] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C78890 * C932 - C233 * C721) * C26402 +
                     (C78890 * C1238 - C233 * C1038) * C26356) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                     (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                     (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C26401 + (C447 - C446) * C26355 +
                     (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C26401 + (C449 - C448) * C26355 +
                     (C78890 * C2667 - C233 * C2525) * C26402 +
                     (C78890 * C2881 - C233 * C2739) * C26356) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78884 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C233 * C3833 - C78890 * C4061) * C26402 +
                      (C233 * C4175 - C78890 * C4397) * C26356) *
                         C78889 * C78870 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C78890 * C6113 - C233 * C5930) * C26402 +
                      (C78890 * C6365 - C233 * C6199) * C26356) *
                         C78889 * C78845) *
                        C78592 * C717 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78884 +
                     ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
                      (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                         C78889 * C78870 +
                     ((C1859 - C1858) * C26401 + (C2155 - C2154) * C26355 +
                      (C10900 - C10901) * C26402 + (C11209 - C11210) * C26356) *
                         C78889 * C78845) *
                        C78592 * C718 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78884 +
                     ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
                      (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
                         C78889 * C78870 +
                     ((C1867 - C1866) * C26401 + (C2159 - C2158) * C26355 +
                      (C78890 * C10897 - C233 * C10691) * C26402 +
                      (C78890 * C11207 - C233 * C11001) * C26356) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                        C78889 * C78610 * C5449 +
                    ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                     (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                        C78889 * C78610 * C5450 +
                    ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                     (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                        C78889 * C78610 * C5451 +
                    ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
                     (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
                        C78889 * C78610 * C5452 +
                    ((C31102 - C31101) * C26401 + (C31246 - C31245) * C26355 +
                     (C78890 * C31094 - C233 * C30988) * C26402 +
                     (C78890 * C31241 - C233 * C31146) * C26356) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78884 +
                     ((C233 * C1626 - C78890 * C1837) * C26401 +
                      (C233 * C1943 - C78890 * C2143) * C26355 +
                      (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                         C78889 * C78870 +
                     ((C78890 * C1839 - C233 * C1627) * C26401 +
                      (C78890 * C2145 - C233 * C1945) * C26355 +
                      (C31649 - C31650) * C26402 + (C31899 - C31900) * C26356) *
                         C78889 * C78845) *
                        C4809 +
                    (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78884 +
                     ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
                      (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                         C78889 * C78870 +
                     ((C31650 - C31649) * C26401 + (C31900 - C31899) * C26355 +
                      (C31657 - C31658) * C26402 + (C31903 - C31904) * C26356) *
                         C78889 * C78845) *
                        C4810 +
                    (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                         C78889 * C78884 +
                     ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
                      (C233 * C8251 - C78890 * C8395) * C26402 +
                      (C233 * C8465 - C78890 * C8603) * C26356) *
                         C78889 * C78870 +
                     ((C31658 - C31657) * C26401 + (C31904 - C31903) * C26355 +
                      (C78890 * C31646 - C233 * C31468) * C26402 +
                      (C78890 * C31897 - C233 * C31734) * C26356) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezx[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C78889 * C730 - C26357 * C721) * C233 +
            (C78889 * C1336 - C26357 * C1328) * C78890) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C233 +
            (C26357 * C492 - C78889 * C498) * C78890) *
               C26355 +
           ((C26357 * C720 - C78889 * C728) * C233 +
            (C26357 * C1329 - C78889 * C1337) * C78890) *
               C26356) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C233 +
            (C78889 * C499 - C26357 * C493) * C78890) *
               C26355 +
           ((C78889 * C736 - C26357 * C724) * C233 +
            (C78889 * C1340 - C26357 * C1332) * C78890) *
               C26356) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C233 +
            (C26357 * C494 - C78889 * C500) * C78890) *
               C26355 +
           ((C26357 * C726 - C78889 * C740) * C233 +
            (C26357 * C1334 - C78889 * C1342) * C78890) *
               C26356) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C233 +
            (C78889 * C501 - C26357 * C495) * C78890) *
               C26355 +
           ((C78889 * C2526 - C26357 * C2525) * C233 +
            (C78889 * C2951 - C26357 * C2950) * C78890) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C26357 * C3833 - C78889 * C3837) * C233 +
             (C26357 * C4503 - C78889 * C4507) * C78890) *
                C26356) *
               C78870 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C78889 * C5937 - C26357 * C5930) * C233 +
             (C78889 * C6451 - C26357 * C6445) * C78890) *
                C26356) *
               C78845) *
              C78592 * C717 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78884 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C78889 * C3839 - C26357 * C3834) * C233 +
             (C78889 * C4508 - C26357 * C4504) * C78890) *
                C26356) *
               C78870 +
           (((C26357 * C1628 - C78889 * C1639) * C233 +
             (C26357 * C2236 - C78889 * C2244) * C78890) *
                C26355 +
            ((C26357 * C5929 - C78889 * C5935) * C233 +
             (C26357 * C6446 - C78889 * C6452) * C78890) *
                C26356) *
               C78845) *
              C78592 * C718 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C26357 * C3835 - C78889 * C3841) * C233 +
             (C26357 * C4505 - C78889 * C4509) * C78890) *
                C26356) *
               C78870 +
           (((C78889 * C1643 - C26357 * C1630) * C233 +
             (C78889 * C2246 - C26357 * C2238) * C78890) *
                C26355 +
            ((C78889 * C10692 - C26357 * C10691) * C233 +
             (C78889 * C11309 - C26357 * C11308) * C78890) *
                C26356) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
              C78610 * C5449 +
          (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
           ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
              C78610 * C5450 +
          (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
           ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
              C78610 * C5451 +
          (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
           ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
              C78610 * C5452 +
          (((C31154 - C31153) * C233 + (C31294 - C31293) * C78890) * C26355 +
           ((C78889 * C30989 - C26357 * C30988) * C233 +
            (C78889 * C31289 - C26357 * C31288) * C78890) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78884 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
               C78870 +
           (((C78889 * C1637 - C26357 * C1627) * C233 +
             (C78889 * C2243 - C26357 * C2235) * C78890) *
                C26355 +
            ((C31737 - C31738) * C233 + (C31981 - C31982) * C78890) * C26356) *
               C78845) *
              C4809 +
          ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78884 +
           (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
            ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
               C78870 +
           (((C31738 - C31737) * C233 + (C31982 - C31981) * C78890) * C26355 +
            ((C31745 - C31746) * C233 + (C31985 - C31986) * C78890) * C26356) *
               C78845) *
              C4810 +
          ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
               C78884 +
           (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
            ((C26357 * C8251 - C78889 * C8253) * C233 +
             (C26357 * C8671 - C78889 * C8673) * C78890) *
                C26356) *
               C78870 +
           (((C31746 - C31745) * C233 + (C31986 - C31985) * C78890) * C26355 +
            ((C78889 * C31469 - C26357 * C31468) * C233 +
             (C78889 * C31979 - C26357 * C31978) * C78890) *
                C26356) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C233 +
           (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
               C78890) *
              C78889 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C233 +
           (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
               C78890) *
              C78889 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C233 +
           (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
               C78890) *
              C78889 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C233 +
           (C26355 * C549 - C26401 * C495 + C26356 * C3018 - C26402 * C2950) *
               C78890) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C78592 * C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78884 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78870 +
           ((C26401 * C1628 - C26355 * C1734 + C26402 * C5929 -
             C26356 * C6028) *
                C233 +
            (C26401 * C2236 - C26355 * C2326 + C26402 * C6446 -
             C26356 * C6532) *
                C78890) *
               C78889 * C78845) *
              C78592 * C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1736 - C26401 * C1630 + C26356 * C10793 -
             C26402 * C10691) *
                C233 +
            (C26355 * C2328 - C26401 * C2238 + C26356 * C11408 -
             C26402 * C11308) *
                C78890) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C233 +
           (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 - C26356 * C1420) *
               C78890) *
              C78889 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C233 +
           (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 - C26402 * C5755) *
               C78890) *
              C78889 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C233 +
           (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 - C26356 * C5807) *
               C78890) *
              C78889 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C233 +
           (C26355 * C5807 - C26401 * C5757 + C26356 * C31336 -
            C26402 * C31288) *
               C78890) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C1733 - C26401 * C1627 + C26356 * C6027 -
             C26402 * C5930) *
                C233 +
            (C26355 * C2325 - C26401 * C2235 + C26356 * C6531 -
             C26402 * C6445) *
                C78890) *
               C78889 * C78845) *
              C4809 +
          (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78884 +
           ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
             C26402 * C5932) *
                C233 +
            (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
             C26402 * C6447) *
                C78890) *
               C78889 * C78870 +
           ((C26401 * C5930 - C26355 * C6027 + C26402 * C5933 -
             C26356 * C6031) *
                C233 +
            (C26401 * C6445 - C26355 * C6531 + C26402 * C6449 -
             C26356 * C6535) *
                C78890) *
               C78889 * C78845) *
              C4810 +
          (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78884 +
           ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
             C26356 * C8325) *
                C233 +
            (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
             C26356 * C8741) *
                C78890) *
               C78889 * C78870 +
           ((C26355 * C6031 - C26401 * C5933 + C26356 * C31570 -
             C26402 * C31468) *
                C233 +
            (C26355 * C6535 - C26401 * C6449 + C26356 * C32060 -
             C26402 * C31978) *
                C78890) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78883 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78868 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C717 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78868 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78883 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C718 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78883 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78868 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C26356) *
              C78889 * C78610 * C78592 * C87 -
          (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78592 * C88 +
          (C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78592 * C89 -
          (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78592 * C90 +
          (C636 * C26355 +
           (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
               C26356) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78884 -
           ((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            (C233 * C6113 - C601 * C5930 - C233 * C6445 + C78890 * C6612) *
                C26356) *
               C78889 * C78845) *
              C78592 * C717 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78870 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78884 -
           (C11517 * C26356 + C2447 * C26355) * C78889 * C78845) *
              C78592 * C718 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78884 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78870 +
           (C2449 * C26355 +
            (C233 * C10897 - C601 * C10691 - C233 * C11308 + C78890 * C11509) *
                C26356) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C4809 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C4810 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78880 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C4810 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C4809 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C4809 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C4810 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           C27474 * C26356) *
              C78889 * C78610 * C5449 -
          (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C5450 +
          (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C5451 -
          (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C5452 +
          (C31394 * C26355 +
           (C233 * C31094 - C601 * C30988 - C233 * C31288 + C78890 * C31379) *
               C26356) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78884 -
           (C30280 * C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78870 +
           ((C233 * C1839 - C601 * C1627 - C233 * C2235 + C78890 * C2415) *
                C26355 +
            C32155 * C26356) *
               C78889 * C78845) *
              C4809 +
          ((C30280 * C26355 + C32156 * C26356) * C78889 * C78870 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78884 -
           (C32157 * C26356 + C32155 * C26355) * C78889 * C78845) *
              C4810 +
          ((C27475 * C26355 + C31393 * C26356) * C78889 * C78884 -
           ((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                C26356 +
            C32156 * C26355) *
               C78889 * C78870 +
           (C32157 * C26355 +
            (C233 * C31646 - C601 * C31468 - C233 * C31978 + C78890 * C32135) *
                C26356) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78813 -
           ((C26357 * C3837 - C26358 * C3833 - C26357 * C3838 +
             C78889 * C3845) *
                C78890 * C26356 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C78890 * C26355) *
               C78697) *
              C78592 * C2521 +
          (((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C78890 * C26355 +
            (C26357 * C3839 - C26358 * C3834 - C26357 * C3840 +
             C78889 * C3846) *
                C78890 * C26356) *
               C78697 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78813) *
              C78592 * C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78813 -
           ((C26357 * C3841 - C26358 * C3835 - C26357 * C3842 +
             C78889 * C3847) *
                C78890 * C26356 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C78890 * C26355) *
               C78697) *
              C78592 * C2523 +
          (((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C78890 * C26355 +
            (C26357 * C3843 - C26358 * C3836 - C26357 * C3844 +
             C78889 * C3848) *
                C78890 * C26356) *
               C78697 -
           (C28215 * C26356 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C78890 * C26355) *
               C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C78890 * C26355 +
             C26816 * C26356) *
                C78813 -
            (C29463 * C26356 + (C26357 * C1635 - C26358 * C1626 -
                                C26357 * C1636 + C78889 * C1650) *
                                   C78890 * C26355) *
                C78697) *
               C4809 +
           ((C29463 * C26355 + C31495 * C26356) * C78697 -
            (C26817 * C26356 + C26816 * C26355) * C78813) *
               C4810 +
           ((C26817 * C26355 + C31007 * C26356) * C78813 -
            ((C26357 * C8253 - C26358 * C8251 - C26357 * C8254 +
              C78889 * C8257) *
                 C78890 * C26356 +
             C31495 * C26355) *
                C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
              C78889 * C1649) *
                 C78890 * C26355 +
             C29464 * C26356) *
                C78697 -
            (C26818 * C26356 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C78890 * C26355) *
                C78813) *
               C4809 +
           ((C26818 * C26355 + C26819 * C26356) * C78813 -
            (C32871 * C26356 + C29464 * C26355) * C78697) *
               C4810 +
           ((C32871 * C26355 + (C26357 * C8255 - C26358 * C8252 -
                                C26357 * C8256 + C78889 * C8258) *
                                   C78890 * C26356) *
                C78697 -
            (C32231 * C26356 + C26819 * C26355) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C26357 +
            (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
             C26356 * C3951) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C26357 +
            (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
             C26402 * C3840) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78813 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C26357 +
            (C26401 * C1642 - C26355 * C1743 + C26402 * C3842 -
             C26356 * C3953) *
                C78889) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C26357 +
            (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
                C78889) *
               C78890 * C78813 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C26357 +
            (C26355 * C1745 - C26401 * C1646 + C26356 * C3954 -
             C26402 * C3844) *
                C78889) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C26357 +
             (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C26357 +
             (C26401 * C1636 - C26355 * C1739 + C26402 * C3838 -
              C26356 * C3951) *
                 C78889) *
                C78890 * C78697) *
               C4809 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C26357 +
             (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C26357 +
             (C26355 * C3951 - C26401 * C3838 + C26356 * C6035 -
              C26402 * C5942) *
                 C78889) *
                C78890 * C78697) *
               C4810 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C26357 +
             (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C26357 +
             (C26401 * C5942 - C26355 * C6035 + C26402 * C8254 -
              C26356 * C8327) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C26357 +
             (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C26357 +
             (C26355 * C1740 - C26401 * C1634 + C26356 * C3952 -
              C26402 * C3840) *
                 C78889) *
                C78890 * C78697) *
               C4809 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C26357 +
             (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                 C78889) *
                C78890 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C26357 +
             (C26401 * C3840 - C26355 * C3952 + C26402 * C5940 -
              C26356 * C6036) *
                 C78889) *
                C78890 * C78697) *
               C4810 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C26357 +
             (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                 C78889) *
                C78890 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C26357 +
             (C26355 * C6036 - C26401 * C5940 + C26356 * C8328 -
              C26402 * C8256) *
                 C78889) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78813 +
           (((C233 * C1626 - C78890 * C1837) * C26357 +
             (C233 * C1636 - C78890 * C1845) * C78889) *
                C26355 +
            ((C233 * C3833 - C78890 * C4061) * C26357 +
             (C233 * C3838 - C78890 * C4065) * C78889) *
                C26356) *
               C78697) *
              C78592 * C2521 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78813 +
           (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
            ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
               C78697) *
              C78592 * C2522 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78813 +
           (((C1863 - C1862) * C26357 + (C1865 - C1864) * C78889) * C26355 +
            ((C4074 - C4075) * C26357 + (C4076 - C4077) * C78889) * C26356) *
               C78697) *
              C78592 * C2523 +
          ((((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
            ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
               C78813 +
           (((C3310 - C3309) * C26357 + (C3312 - C3311) * C78889) * C26355 +
            ((C78890 * C4064 - C233 * C3836) * C26357 +
             (C78890 * C4068 - C233 * C3844) * C78889) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78890 * C234 - C233 * C96) * C26357 +
              (C78890 * C240 - C233 * C103) * C78889) *
                 C26355 +
             ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                 C26356) *
                C78813 +
            (((C233 * C1626 - C78890 * C1837) * C26357 +
              (C233 * C1636 - C78890 * C1845) * C78889) *
                 C26355 +
             ((C29662 - C29663) * C26357 + (C29664 - C29665) * C78889) *
                 C26356) *
                C78697) *
               C4809 +
           ((((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) *
                 C26355 +
             ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                 C26356) *
                C78813 +
            (((C29663 - C29662) * C26357 + (C29665 - C29664) * C78889) *
                 C26355 +
             ((C31653 - C31654) * C26357 + (C31655 - C31656) * C78889) *
                 C26356) *
                C78697) *
               C4810 +
           ((((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) *
                 C26355 +
             ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) *
                 C26356) *
                C78813 +
            (((C31654 - C31653) * C26357 + (C31656 - C31655) * C78889) *
                 C26355 +
             ((C233 * C8251 - C78890 * C8395) * C26357 +
              (C233 * C8254 - C78890 * C8397) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78798 +
          (((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
             ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
                C78813 +
            (((C1855 - C1854) * C26357 + (C1857 - C1856) * C78889) * C26355 +
             ((C4070 - C4071) * C26357 + (C4072 - C4073) * C78889) * C26356) *
                C78697) *
               C4809 +
           ((((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
             ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
                C78813 +
            (((C4071 - C4070) * C26357 + (C4073 - C4072) * C78889) * C26355 +
             ((C7567 - C7568) * C26357 + (C7569 - C7570) * C78889) * C26356) *
                C78697) *
               C4810 +
           ((((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
             ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
                C78813 +
            (((C7568 - C7567) * C26357 + (C7570 - C7569) * C78889) * C26355 +
             ((C78890 * C8396 - C233 * C8252) * C26357 +
              (C78890 * C8398 - C233 * C8256) * C78889) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C26401 +
            (C78889 * C310 - C26357 * C304) * C26355 +
            (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1626 - C78889 * C1635) * C26401 +
            (C26357 * C1943 - C78889 * C1951) * C26355 +
            (C26357 * C3833 - C78889 * C3837) * C26402 +
            (C26357 * C4175 - C78889 * C4179) * C26356) *
               C78890 * C78697) *
              C78592 * C2521 +
          (((C26357 * C97 - C78889 * C104) * C26401 +
            (C26357 * C305 - C78889 * C311) * C26355 +
            (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
               C78890 * C78813 +
           ((C78889 * C1633 - C26357 * C1625) * C26401 +
            (C78889 * C1952 - C26357 * C1944) * C26355 +
            (C78889 * C3839 - C26357 * C3834) * C26402 +
            (C78889 * C4180 - C26357 * C4176) * C26356) *
               C78890 * C78697) *
              C78592 * C2522 +
          (((C78889 * C106 - C26357 * C98) * C26401 +
            (C78889 * C312 - C26357 * C306) * C26355 +
            (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
               C78890 * C78813 +
           ((C26357 * C1629 - C78889 * C1641) * C26401 +
            (C26357 * C1947 - C78889 * C1955) * C26355 +
            (C26357 * C3835 - C78889 * C3841) * C26402 +
            (C26357 * C4177 - C78889 * C4181) * C26356) *
               C78890 * C78697) *
              C78592 * C2523 +
          (((C26357 * C99 - C78889 * C108) * C26401 +
            (C26357 * C307 - C78889 * C313) * C26355 +
            (C28414 - C28415) * C26402 + (C28416 - C28417) * C26356) *
               C78890 * C78813 +
           ((C78889 * C1645 - C26357 * C1631) * C26401 +
            (C78889 * C1957 - C26357 * C1949) * C26355 +
            (C78889 * C3843 - C26357 * C3836) * C26402 +
            (C78889 * C4182 - C26357 * C4178) * C26356) *
               C78890 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C26401 +
             (C78889 * C310 - C26357 * C304) * C26355 +
             (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                C78890 * C78813 +
            ((C26357 * C1626 - C78889 * C1635) * C26401 +
             (C26357 * C1943 - C78889 * C1951) * C26355 +
             (C29764 - C29765) * C26402 + (C29766 - C29767) * C26356) *
                C78890 * C78697) *
               C4809 +
           (((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
             (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                C78890 * C78813 +
            ((C29765 - C29764) * C26401 + (C29767 - C29766) * C26355 +
             (C31741 - C31742) * C26402 + (C31743 - C31744) * C26356) *
                C78890 * C78697) *
               C4810 +
           (((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
             (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                C78890 * C78813 +
            ((C31742 - C31741) * C26401 + (C31744 - C31743) * C26355 +
             (C26357 * C8251 - C78889 * C8253) * C26402 +
             (C26357 * C8465 - C78889 * C8467) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C26401 +
             (C26357 * C305 - C78889 * C311) * C26355 +
             (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                C78890 * C78813 +
            ((C78889 * C1633 - C26357 * C1625) * C26401 +
             (C78889 * C1952 - C26357 * C1944) * C26355 +
             (C29768 - C29769) * C26402 + (C29770 - C29771) * C26356) *
                C78890 * C78697) *
               C4809 +
           (((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
             (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                C78890 * C78813 +
            ((C29769 - C29768) * C26401 + (C29771 - C29770) * C26355 +
             (C33166 - C33167) * C26402 + (C33168 - C33169) * C26356) *
                C78890 * C78697) *
               C4810 +
           (((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
             (C32430 - C32431) * C26402 + (C32432 - C32433) * C26356) *
                C78890 * C78813 +
            ((C33167 - C33166) * C26401 + (C33169 - C33168) * C26355 +
             (C78889 * C8255 - C26357 * C8252) * C26402 +
             (C78889 * C8468 - C26357 * C8466) * C26356) *
                C78890 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78813 -
           (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
            C26401 * C1731 - C26529 * C1626 - C26401 * C1943 + C26355 * C2034) *
               C78889 * C78890 * C78697) *
              C78592 * C2521 +
          ((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
            C26402 * C3948 - C26530 * C3834 - C26402 * C4176 + C26356 * C4282) *
               C78889 * C78890 * C78697 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78813) *
              C78592 * C2522 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78813 -
           (C26402 * C3949 - C26530 * C3835 - C26402 * C4177 + C26356 * C4283 +
            C26401 * C1735 - C26529 * C1629 - C26401 * C1947 + C26355 * C2037) *
               C78889 * C78890 * C78697) *
              C78592 * C2523 +
          ((C26401 * C1737 - C26529 * C1631 - C26401 * C1949 + C26355 * C2039 +
            C26402 * C3950 - C26530 * C3836 - C26402 * C4178 + C26356 * C4284) *
               C78889 * C78890 * C78697 -
           (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
            C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
               C78889 * C78890 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
             C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
                C78889 * C78890 * C78813 -
            (C26402 * C3947 - C26530 * C3833 - C26402 * C4175 + C26356 * C4281 +
             C26401 * C1731 - C26529 * C1626 - C26401 * C1943 +
             C26355 * C2034) *
                C78889 * C78890 * C78697) *
               C4809 +
           ((C26401 * C3947 - C26529 * C3833 - C26401 * C4175 + C26355 * C4281 +
             C26402 * C6029 - C26530 * C5932 - C26402 * C6201 +
             C26356 * C6288) *
                C78889 * C78890 * C78697 -
            (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
             C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
                C78889 * C78890 * C78813) *
               C4810 +
           ((C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
             C26402 * C5513 - C26530 * C5456 - C26402 * C5613 +
             C26356 * C5664) *
                C78889 * C78890 * C78813 -
            (C26402 * C8325 - C26530 * C8251 - C26402 * C8465 + C26356 * C8535 +
             C26401 * C6029 - C26529 * C5932 - C26401 * C6201 +
             C26355 * C6288) *
                C78889 * C78890 * C78697) *
               C78842) *
              C78798 +
          (((C26401 * C1732 - C26529 * C1625 - C26401 * C1944 + C26355 * C2033 +
             C26402 * C3948 - C26530 * C3834 - C26402 * C4176 +
             C26356 * C4282) *
                C78889 * C78890 * C78697 -
            (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
             C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
                C78889 * C78890 * C78813) *
               C4809 +
           ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
             C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
                C78889 * C78890 * C78813 -
            (C26402 * C6030 - C26530 * C5931 - C26402 * C6202 + C26356 * C6287 +
             C26401 * C3948 - C26529 * C3834 - C26401 * C4176 +
             C26355 * C4282) *
                C78889 * C78890 * C78697) *
               C4810 +
           ((C26401 * C6030 - C26529 * C5931 - C26401 * C6202 + C26355 * C6287 +
             C26402 * C8326 - C26530 * C8252 - C26402 * C8466 +
             C26356 * C8536) *
                C78889 * C78890 * C78697 -
            (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
             C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
                C78889 * C78890 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26401 +
            (C78890 * C435 - C233 * C304) * C26355 +
            (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
               C78889 * C78813 +
           ((C233 * C1626 - C78890 * C1837) * C26401 +
            (C233 * C1943 - C78890 * C2143) * C26355 +
            (C233 * C3833 - C78890 * C4061) * C26402 +
            (C233 * C4175 - C78890 * C4397) * C26356) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
            (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
               C78889 * C78813 +
           ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
            (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
            (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
               C78889 * C78813 +
           ((C1863 - C1862) * C26401 + (C2157 - C2156) * C26355 +
            (C4074 - C4075) * C26402 + (C4404 - C4405) * C26356) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C256 - C255) * C26401 + (C447 - C446) * C26355 +
            (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
               C78889 * C78813 +
           ((C3310 - C3309) * C26401 + (C3523 - C3522) * C26355 +
            (C78890 * C4064 - C233 * C3836) * C26402 +
            (C78890 * C4400 - C233 * C4178) * C26356) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26401 +
             (C78890 * C435 - C233 * C304) * C26355 +
             (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                C78889 * C78813 +
            ((C233 * C1626 - C78890 * C1837) * C26401 +
             (C233 * C1943 - C78890 * C2143) * C26355 +
             (C29662 - C29663) * C26402 + (C29972 - C29973) * C26356) *
                C78889 * C78697) *
               C4809 +
           (((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
             (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                C78889 * C78813 +
            ((C29663 - C29662) * C26401 + (C29973 - C29972) * C26355 +
             (C31653 - C31654) * C26402 + (C31901 - C31902) * C26356) *
                C78889 * C78697) *
               C4810 +
           (((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
             (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                C78889 * C78813 +
            ((C31654 - C31653) * C26401 + (C31902 - C31901) * C26355 +
             (C233 * C8251 - C78890 * C8395) * C26402 +
             (C233 * C8465 - C78890 * C8603) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C248 - C247) * C26401 + (C443 - C442) * C26355 +
             (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                C78889 * C78813 +
            ((C1855 - C1854) * C26401 + (C2153 - C2152) * C26355 +
             (C4070 - C4071) * C26402 + (C4402 - C4403) * C26356) *
                C78889 * C78697) *
               C4809 +
           (((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
             (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                C78889 * C78813 +
            ((C4071 - C4070) * C26401 + (C4403 - C4402) * C26355 +
             (C7567 - C7568) * C26402 + (C7876 - C7877) * C26356) *
                C78889 * C78697) *
               C4810 +
           (((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
             (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                C78889 * C78813 +
            ((C7568 - C7567) * C26401 + (C7877 - C7876) * C26355 +
             (C78890 * C8396 - C233 * C8252) * C26402 +
             (C78890 * C8604 - C233 * C8466) * C26356) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1626 - C78889 * C1635) * C233 +
             (C26357 * C2233 - C78889 * C2241) * C78890) *
                C26355 +
            ((C26357 * C3833 - C78889 * C3837) * C233 +
             (C26357 * C4503 - C78889 * C4507) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2521 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78813 +
           (((C78889 * C1633 - C26357 * C1625) * C233 +
             (C78889 * C2242 - C26357 * C2234) * C78890) *
                C26355 +
            ((C78889 * C3839 - C26357 * C3834) * C233 +
             (C78889 * C4508 - C26357 * C4504) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2522 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78813 +
           (((C26357 * C1629 - C78889 * C1641) * C233 +
             (C26357 * C2237 - C78889 * C2245) * C78890) *
                C26355 +
            ((C26357 * C3835 - C78889 * C3841) * C233 +
             (C26357 * C4505 - C78889 * C4509) * C78890) *
                C26356) *
               C78697) *
              C78592 * C2523 +
          ((((C26357 * C99 - C78889 * C108) * C233 +
             (C26357 * C494 - C78889 * C500) * C78890) *
                C26355 +
            ((C28414 - C28415) * C233 + (C28616 - C28617) * C78890) * C26356) *
               C78813 +
           (((C78889 * C1645 - C26357 * C1631) * C233 +
             (C78889 * C2247 - C26357 * C2239) * C78890) *
                C26355 +
            ((C78889 * C3843 - C26357 * C3836) * C233 +
             (C78889 * C4510 - C26357 * C4506) * C78890) *
                C26356) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C233 +
              (C78889 * C497 - C26357 * C491) * C78890) *
                 C26355 +
             ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
                C78813 +
            (((C26357 * C1626 - C78889 * C1635) * C233 +
              (C26357 * C2233 - C78889 * C2241) * C78890) *
                 C26355 +
             ((C29764 - C29765) * C233 + (C30072 - C30073) * C78890) * C26356) *
                C78697) *
               C4809 +
           ((((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
             ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
                C78813 +
            (((C29765 - C29764) * C233 + (C30073 - C30072) * C78890) * C26355 +
             ((C31741 - C31742) * C233 + (C31983 - C31984) * C78890) * C26356) *
                C78697) *
               C4810 +
           ((((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
             ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
                C78813 +
            (((C31742 - C31741) * C233 + (C31984 - C31983) * C78890) * C26355 +
             ((C26357 * C8251 - C78889 * C8253) * C233 +
              (C26357 * C8671 - C78889 * C8673) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C233 +
              (C26357 * C492 - C78889 * C498) * C78890) *
                 C26355 +
             ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
                C78813 +
            (((C78889 * C1633 - C26357 * C1625) * C233 +
              (C78889 * C2242 - C26357 * C2234) * C78890) *
                 C26355 +
             ((C29768 - C29769) * C233 + (C30074 - C30075) * C78890) * C26356) *
                C78697) *
               C4809 +
           ((((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
             ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
                C78813 +
            (((C29769 - C29768) * C233 + (C30075 - C30074) * C78890) * C26355 +
             ((C33166 - C33167) * C233 + (C33464 - C33465) * C78890) * C26356) *
                C78697) *
               C4810 +
           ((((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
             ((C32430 - C32431) * C233 + (C32632 - C32633) * C78890) * C26356) *
                C78813 +
            (((C33167 - C33166) * C233 + (C33465 - C33464) * C78890) * C26355 +
             ((C78889 * C8255 - C26357 * C8252) * C233 +
              (C78889 * C8674 - C26357 * C8672) * C78890) *
                 C26356) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
             C26356 * C3947) *
                C233 +
            (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
             C26356 * C4609) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
             C26402 * C3834) *
                C233 +
            (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
             C26402 * C4504) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78813 +
           ((C26401 * C1629 - C26355 * C1735 + C26402 * C3835 -
             C26356 * C3949) *
                C233 +
            (C26401 * C2237 - C26355 * C2327 + C26402 * C4505 -
             C26356 * C4611) *
                C78890) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
                C233 +
            (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
                C78890) *
               C78889 * C78813 +
           ((C26355 * C1737 - C26401 * C1631 + C26356 * C3950 -
             C26402 * C3836) *
                C233 +
            (C26355 * C2329 - C26401 * C2239 + C26356 * C4612 -
             C26402 * C4506) *
                C78890) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                 C233 +
             (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C1626 - C26355 * C1731 + C26402 * C3833 -
              C26356 * C3947) *
                 C233 +
             (C26401 * C2233 - C26355 * C2323 + C26402 * C4503 -
              C26356 * C4609) *
                 C78890) *
                C78889 * C78697) *
               C4809 +
           (((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                 C233 +
             (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
              C26356 * C1420) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C3947 - C26401 * C3833 + C26356 * C6029 -
              C26402 * C5932) *
                 C233 +
             (C26355 * C4609 - C26401 * C4503 + C26356 * C6533 -
              C26402 * C6447) *
                 C78890) *
                C78889 * C78697) *
               C4810 +
           (((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                 C233 +
             (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
              C26402 * C5755) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C5932 - C26355 * C6029 + C26402 * C8251 -
              C26356 * C8325) *
                 C233 +
             (C26401 * C6447 - C26355 * C6533 + C26402 * C8671 -
              C26356 * C8741) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                 C233 +
             (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C1732 - C26401 * C1625 + C26356 * C3948 -
              C26402 * C3834) *
                 C233 +
             (C26355 * C2324 - C26401 * C2234 + C26356 * C4610 -
              C26402 * C4504) *
                 C78890) *
                C78889 * C78697) *
               C4809 +
           (((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                 C233 +
             (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
              C26402 * C1331) *
                 C78890) *
                C78889 * C78813 +
            ((C26401 * C3834 - C26355 * C3948 + C26402 * C5931 -
              C26356 * C6030) *
                 C233 +
             (C26401 * C4504 - C26355 * C4610 + C26402 * C6448 -
              C26356 * C6534) *
                 C78890) *
                C78889 * C78697) *
               C4810 +
           (((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                 C233 +
             (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
              C26356 * C5806) *
                 C78890) *
                C78889 * C78813 +
            ((C26355 * C6030 - C26401 * C5931 + C26356 * C8326 -
              C26402 * C8252) *
                 C233 +
             (C26355 * C6534 - C26401 * C6448 + C26356 * C8742 -
              C26402 * C8672) *
                 C78890) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78813 -
           ((C233 * C4061 - C601 * C3833 - C233 * C4503 + C78890 * C4715) *
                C26356 +
            (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                C26355) *
               C78889 * C78697) *
              C78592 * C2521 +
          ((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
              C78592 * C2522 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78813 -
           (C4733 * C26356 + C2448 * C26355) * C78889 * C78697) *
              C78592 * C2523 +
          ((C3734 * C26355 +
            (C233 * C4064 - C601 * C3836 - C233 * C4506 + C78890 * C4718) *
                C26356) *
               C78889 * C78697 -
           (C3095 * C26356 + C635 * C26355) * C78889 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
             C27474 * C26356) *
                C78889 * C78813 -
            (C30280 * C26356 +
             (C233 * C1837 - C601 * C1626 - C233 * C2233 + C78890 * C2414) *
                 C26355) *
                C78889 * C78697) *
               C4809 +
           ((C30280 * C26355 + C32156 * C26356) * C78889 * C78697 -
            (C27475 * C26356 + C27474 * C26355) * C78889 * C78813) *
               C4810 +
           ((C27475 * C26355 + C31393 * C26356) * C78889 * C78813 -
            ((C233 * C8395 - C601 * C8251 - C233 * C8671 + C78890 * C8809) *
                 C26356 +
             C32156 * C26355) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          (((C2446 * C26355 + C4732 * C26356) * C78889 * C78697 -
            (C1541 * C26356 + C633 * C26355) * C78889 * C78813) *
               C4809 +
           ((C1541 * C26355 + C1542 * C26356) * C78889 * C78813 -
            (C8184 * C26356 + C4732 * C26355) * C78889 * C78697) *
               C4810 +
           ((C8184 * C26355 +
             (C233 * C8396 - C601 * C8252 - C233 * C8672 + C78890 * C8810) *
                 C26356) *
                C78889 * C78697 -
            (C7259 * C26356 + C1542 * C26355) * C78889 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           (C26357 * C730 - C26358 * C721 - C26357 * C731 + C78889 * C745) *
               C78890 * C26356) *
              C78610 * C78592 * C87 -
          ((C26357 * C728 - C26358 * C720 - C26357 * C729 + C78889 * C744) *
               C78890 * C26356 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C78890 * C26355) *
              C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C78890 * C26355 +
           (C26357 * C736 - C26358 * C724 - C26357 * C737 + C78889 * C748) *
               C78890 * C26356) *
              C78610 * C78592 * C89 -
          ((C26357 * C740 - C26358 * C726 - C26357 * C741 + C78889 * C750) *
               C78890 * C26356 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C78890 * C26355) *
              C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C78890 * C26355 +
           (C26357 * C2526 - C26358 * C2525 - C26357 * C2527 + C78889 * C2528) *
               C78890 * C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C78883 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C78868 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C717 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C78868 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C78883 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C78883 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C78868 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C78890 * C26355 +
            C26816 * C26356) *
               C78610 * C4809 -
           (C26817 * C26356 + C26816 * C26355) * C78610 * C4810 +
           (C26817 * C26355 + (C26357 * C5461 - C26358 * C5456 -
                               C26357 * C5462 + C78889 * C5468) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78880 +
          ((C26818 * C26355 + C26819 * C26356) * C78610 * C4810 -
           (C26818 * C26356 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C78890 * C26355) *
               C78610 * C4809 -
           ((C26357 * C5459 - C26358 * C5455 - C26357 * C5460 +
             C78889 * C5467) *
                C78890 * C26356 +
            C26819 * C26355) *
               C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C78890 * C26355 +
            C26820 * C26356) *
               C78610 * C4809 -
           (C26821 * C26356 + C26820 * C26355) * C78610 * C4810 +
           (C26821 * C26355 + (C26357 * C6690 - C26358 * C6689 -
                               C26357 * C6691 + C78889 * C6692) *
                                  C78890 * C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C78890 * C26355 +
           C26816 * C26356) *
              C78610 * C5449 -
          (C26817 * C26356 + C26816 * C26355) * C78610 * C5450 +
          (C26817 * C26355 + C31007 * C26356) * C78610 * C5451 -
          (C31008 * C26356 + C31007 * C26355) * C78610 * C5452 +
          (C31008 * C26355 + (C26357 * C30989 - C26358 * C30988 -
                              C26357 * C30990 + C78889 * C30991) *
                                 C78890 * C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C26357 +
           (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
               C78889) *
              C78890 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C26357 +
           (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
               C78889) *
              C78890 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C26357 +
           (C26401 * C109 - C26355 * C172 + C26402 * C741 - C26356 * C840) *
               C78889) *
              C78890 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C26357 +
           (C26355 * C173 - C26401 * C111 + C26356 * C2596 - C26402 * C2527) *
               C78889) *
              C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C26357 +
            (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C26357 +
            (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C26357 +
            (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C26357 +
            (C26401 * C105 - C26355 * C170 + C26402 * C729 - C26356 * C835) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C26357 +
            (C26355 * C835 - C26401 * C729 + C26356 * C837 - C26402 * C735) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C26357 +
            (C26401 * C735 - C26355 * C837 + C26402 * C5460 - C26356 * C5518) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C26357 +
            (C26355 * C171 - C26401 * C107 + C26356 * C838 - C26402 * C737) *
                C78889) *
               C78890 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C26357 +
            (C26401 * C737 - C26355 * C838 + C26402 * C739 - C26356 * C839) *
                C78889) *
               C78890 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C26357 +
            (C26355 * C839 - C26401 * C739 + C26356 * C6760 - C26402 * C6691) *
                C78889) *
               C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C26357 +
           (C26355 * C169 - C26401 * C103 + C26356 * C834 - C26402 * C731) *
               C78889) *
              C78890 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C26357 +
           (C26401 * C731 - C26355 * C834 + C26402 * C733 - C26356 * C836) *
               C78889) *
              C78890 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C26357 +
           (C26355 * C836 - C26401 * C733 + C26356 * C5517 - C26402 * C5462) *
               C78889) *
              C78890 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C26357 +
           (C26401 * C5462 - C26355 * C5517 + C26402 * C5464 - C26356 * C5519) *
               C78889) *
              C78890 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C26357 +
           (C26355 * C5519 - C26401 * C5464 + C26356 * C31051 -
            C26402 * C30990) *
               C78889) *
              C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C78890 * C932 - C233 * C721) * C26357 +
            (C78890 * C940 - C233 * C731) * C78889) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
           ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
              C78610 * C78592 * C88 +
          (((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
           ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
              C78610 * C78592 * C89 +
          (((C256 - C255) * C26357 + (C258 - C257) * C78889) * C26355 +
           ((C2670 - C2671) * C26357 + (C2672 - C2673) * C78889) * C26356) *
              C78610 * C78592 * C90 +
          (((C260 - C259) * C26357 + (C262 - C261) * C78889) * C26355 +
           ((C78890 * C2667 - C233 * C2525) * C26357 +
            (C78890 * C2668 - C233 * C2527) * C78889) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C78883 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C78868 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C78883 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C78868 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C718 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C78883 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C78868 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78890 * C234 - C233 * C96) * C26357 +
             (C78890 * C240 - C233 * C103) * C78889) *
                C26355 +
            ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) *
                C26356) *
               C78610 * C4809 +
           (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
            ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) *
                C26356) *
               C78610 * C4810 +
           (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
            ((C78890 * C5563 - C233 * C5456) * C26357 +
             (C78890 * C5567 - C233 * C5462) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C248 - C247) * C26357 + (C250 - C249) * C78889) * C26355 +
            ((C949 - C950) * C26357 + (C951 - C952) * C78889) * C26356) *
               C78610 * C4809 +
           (((C950 - C949) * C26357 + (C952 - C951) * C78889) * C26355 +
            ((C953 - C954) * C26357 + (C955 - C956) * C78889) * C26356) *
               C78610 * C4810 +
           (((C954 - C953) * C26357 + (C956 - C955) * C78889) * C26355 +
            ((C6834 - C6835) * C26357 + (C6836 - C6837) * C78889) * C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C252 - C251) * C26357 + (C254 - C253) * C78889) * C26355 +
            ((C957 - C958) * C26357 + (C959 - C960) * C78889) * C26356) *
               C78610 * C4809 +
           (((C958 - C957) * C26357 + (C960 - C959) * C78889) * C26355 +
            ((C961 - C962) * C26357 + (C963 - C964) * C78889) * C26356) *
               C78610 * C4810 +
           (((C962 - C961) * C26357 + (C964 - C963) * C78889) * C26355 +
            ((C78890 * C6831 - C233 * C6689) * C26357 +
             (C78890 * C6832 - C233 * C6691) * C78889) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78890 * C234 - C233 * C96) * C26357 +
            (C78890 * C240 - C233 * C103) * C78889) *
               C26355 +
           ((C26970 - C26971) * C26357 + (C26972 - C26973) * C78889) * C26356) *
              C78610 * C5449 +
          (((C26971 - C26970) * C26357 + (C26973 - C26972) * C78889) * C26355 +
           ((C26974 - C26975) * C26357 + (C26976 - C26977) * C78889) * C26356) *
              C78610 * C5450 +
          (((C26975 - C26974) * C26357 + (C26977 - C26976) * C78889) * C26355 +
           ((C31097 - C31098) * C26357 + (C31099 - C31100) * C78889) * C26356) *
              C78610 * C5451 +
          (((C31098 - C31097) * C26357 + (C31100 - C31099) * C78889) * C26355 +
           ((C31101 - C31102) * C26357 + (C31103 - C31104) * C78889) * C26356) *
              C78610 * C5452 +
          (((C31102 - C31101) * C26357 + (C31104 - C31103) * C78889) * C26355 +
           ((C78890 * C31094 - C233 * C30988) * C26357 +
            (C78890 * C31095 - C233 * C30990) * C78889) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C78889 * C730 - C26357 * C721) * C26402 +
                     (C78889 * C1046 - C26357 * C1038) * C26356) *
                        C78890 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C26401 +
                     (C26357 * C305 - C78889 * C311) * C26355 +
                     (C26357 * C720 - C78889 * C728) * C26402 +
                     (C26357 * C1039 - C78889 * C1047) * C26356) *
                        C78890 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C26401 +
                     (C78889 * C312 - C26357 * C306) * C26355 +
                     (C78889 * C736 - C26357 * C724) * C26402 +
                     (C78889 * C1050 - C26357 * C1042) * C26356) *
                        C78890 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C26401 +
                     (C26357 * C307 - C78889 * C313) * C26355 +
                     (C26357 * C726 - C78889 * C740) * C26402 +
                     (C26357 * C1044 - C78889 * C1052) * C26356) *
                        C78890 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C26401 +
                     (C78889 * C314 - C26357 * C308) * C26355 +
                     (C78889 * C2526 - C26357 * C2525) * C26402 +
                     (C78889 * C2740 - C26357 * C2739) * C26356) *
                        C78890 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C78883 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C78868 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C26401 +
                      (C78889 * C310 - C26357 * C304) * C26355 +
                      (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                      (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                      (C78889 * C5461 - C26357 * C5456) * C26402 +
                      (C78889 * C5617 - C26357 * C5613) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C26401 +
                      (C26357 * C305 - C78889 * C311) * C26355 +
                      (C27060 - C27061) * C26402 + (C27062 - C27063) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27061 - C27060) * C26401 + (C27063 - C27062) * C26355 +
                      (C27064 - C27065) * C26402 + (C27066 - C27067) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27065 - C27064) * C26401 + (C27067 - C27066) * C26355 +
                      (C26357 * C5455 - C78889 * C5459) * C26402 +
                      (C26357 * C5614 - C78889 * C5618) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C26401 +
                      (C78889 * C312 - C26357 * C306) * C26355 +
                      (C27068 - C27069) * C26402 + (C27070 - C27071) * C26356) *
                         C78890 * C78610 * C4809 +
                     ((C27069 - C27068) * C26401 + (C27071 - C27070) * C26355 +
                      (C27072 - C27073) * C26402 + (C27074 - C27075) * C26356) *
                         C78890 * C78610 * C4810 +
                     ((C27073 - C27072) * C26401 + (C27075 - C27074) * C26355 +
                      (C78889 * C6690 - C26357 * C6689) * C26402 +
                      (C78889 * C6904 - C26357 * C6903) * C26356) *
                         C78890 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C26401 +
                     (C78889 * C310 - C26357 * C304) * C26355 +
                     (C27052 - C27053) * C26402 + (C27054 - C27055) * C26356) *
                        C78890 * C78610 * C5449 +
                    ((C27053 - C27052) * C26401 + (C27055 - C27054) * C26355 +
                     (C27056 - C27057) * C26402 + (C27058 - C27059) * C26356) *
                        C78890 * C78610 * C5450 +
                    ((C27057 - C27056) * C26401 + (C27059 - C27058) * C26355 +
                     (C31149 - C31150) * C26402 + (C31151 - C31152) * C26356) *
                        C78890 * C78610 * C5451 +
                    ((C31150 - C31149) * C26401 + (C31152 - C31151) * C26355 +
                     (C31153 - C31154) * C26402 + (C31155 - C31156) * C26356) *
                        C78890 * C78610 * C5452 +
                    ((C31154 - C31153) * C26401 + (C31156 - C31155) * C26355 +
                     (C78889 * C30989 - C26357 * C30988) * C26402 +
                     (C78889 * C31147 - C26357 * C31146) * C26356) *
                        C78890 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C78592 * C87 -
          (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
           C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
              C78889 * C78890 * C78610 * C78592 * C88 +
          (C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
           C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
              C78889 * C78890 * C78610 * C78592 * C89 -
          (C26402 * C832 - C26530 * C726 - C26402 * C1044 + C26356 * C1134 +
           C26401 * C166 - C26529 * C99 - C26401 * C307 + C26355 * C362) *
              C78889 * C78890 * C78610 * C78592 * C90 +
          (C26401 * C167 - C26529 * C100 - C26401 * C308 + C26355 * C363 +
           C26402 * C2595 - C26530 * C2525 - C26402 * C2739 + C26356 * C2807) *
              C78889 * C78890 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C717 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C78868 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C718 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C78883 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C78868 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
            C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
            C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
            C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
               C78889 * C78890 * C78610 * C78842) *
              C78880 +
          ((C26401 * C827 - C26529 * C720 - C26401 * C1039 + C26355 * C1128 +
            C26402 * C829 - C26530 * C723 - C26402 * C1041 + C26356 * C1131) *
               C78889 * C78890 * C78610 * C4810 -
           (C26402 * C827 - C26530 * C720 - C26402 * C1039 + C26356 * C1128 +
            C26401 * C164 - C26529 * C97 - C26401 * C305 + C26355 * C360) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C5514 - C26530 * C5455 - C26402 * C5614 + C26356 * C5663 +
            C26401 * C829 - C26529 * C723 - C26401 * C1041 + C26355 * C1131) *
               C78889 * C78890 * C78610 * C78842) *
              C78864 +
          ((C26401 * C165 - C26529 * C98 - C26401 * C306 + C26355 * C361 +
            C26402 * C830 - C26530 * C724 - C26402 * C1042 + C26356 * C1132) *
               C78889 * C78890 * C78610 * C4809 -
           (C26402 * C831 - C26530 * C725 - C26402 * C1043 + C26356 * C1133 +
            C26401 * C830 - C26529 * C724 - C26401 * C1042 + C26355 * C1132) *
               C78889 * C78890 * C78610 * C4810 +
           (C26401 * C831 - C26529 * C725 - C26401 * C1043 + C26355 * C1133 +
            C26402 * C6759 - C26530 * C6689 - C26402 * C6903 + C26356 * C6971) *
               C78889 * C78890 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C26401 * C163 - C26529 * C96 - C26401 * C304 + C26355 * C359 +
           C26402 * C826 - C26530 * C721 - C26402 * C1038 + C26356 * C1129) *
              C78889 * C78890 * C78610 * C5449 -
          (C26402 * C828 - C26530 * C722 - C26402 * C1040 + C26356 * C1130 +
           C26401 * C826 - C26529 * C721 - C26401 * C1038 + C26355 * C1129) *
              C78889 * C78890 * C78610 * C5450 +
          (C26401 * C828 - C26529 * C722 - C26401 * C1040 + C26355 * C1130 +
           C26402 * C5513 - C26530 * C5456 - C26402 * C5613 + C26356 * C5664) *
              C78889 * C78890 * C78610 * C5451 -
          (C26402 * C5515 - C26530 * C5457 - C26402 * C5615 + C26356 * C5665 +
           C26401 * C5513 - C26529 * C5456 - C26401 * C5613 + C26355 * C5664) *
              C78889 * C78890 * C78610 * C5452 +
          (C26401 * C5515 - C26529 * C5457 - C26401 * C5615 + C26355 * C5665 +
           C26402 * C31050 - C26530 * C30988 - C26402 * C31146 +
           C26356 * C31198) *
              C78889 * C78890 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[49] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C78890 * C932 - C233 * C721) * C26402 +
                     (C78890 * C1238 - C233 * C1038) * C26356) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                     (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                     (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C256 - C255) * C26401 + (C447 - C446) * C26355 +
                     (C2670 - C2671) * C26402 + (C2883 - C2884) * C26356) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C260 - C259) * C26401 + (C449 - C448) * C26355 +
                     (C78890 * C2667 - C233 * C2525) * C26402 +
                     (C78890 * C2881 - C233 * C2739) * C26356) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C78883 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C78868 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78890 * C234 - C233 * C96) * C26401 +
                      (C78890 * C435 - C233 * C304) * C26355 +
                      (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                      (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                      (C78890 * C5563 - C233 * C5456) * C26402 +
                      (C78890 * C5709 - C233 * C5613) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C248 - C247) * C26401 + (C443 - C442) * C26355 +
                      (C949 - C950) * C26402 + (C1247 - C1248) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C950 - C949) * C26401 + (C1248 - C1247) * C26355 +
                      (C953 - C954) * C26402 + (C1249 - C1250) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C954 - C953) * C26401 + (C1250 - C1249) * C26355 +
                      (C6834 - C6835) * C26402 + (C7047 - C7048) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C252 - C251) * C26401 + (C445 - C444) * C26355 +
                      (C957 - C958) * C26402 + (C1251 - C1252) * C26356) *
                         C78889 * C78610 * C4809 +
                     ((C958 - C957) * C26401 + (C1252 - C1251) * C26355 +
                      (C961 - C962) * C26402 + (C1253 - C1254) * C26356) *
                         C78889 * C78610 * C4810 +
                     ((C962 - C961) * C26401 + (C1254 - C1253) * C26355 +
                      (C78890 * C6831 - C233 * C6689) * C26402 +
                      (C78890 * C7045 - C233 * C6903) * C26356) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78890 * C234 - C233 * C96) * C26401 +
                     (C78890 * C435 - C233 * C304) * C26355 +
                     (C26970 - C26971) * C26402 + (C27224 - C27225) * C26356) *
                        C78889 * C78610 * C5449 +
                    ((C26971 - C26970) * C26401 + (C27225 - C27224) * C26355 +
                     (C26974 - C26975) * C26402 + (C27226 - C27227) * C26356) *
                        C78889 * C78610 * C5450 +
                    ((C26975 - C26974) * C26401 + (C27227 - C27226) * C26355 +
                     (C31097 - C31098) * C26402 + (C31243 - C31244) * C26356) *
                        C78889 * C78610 * C5451 +
                    ((C31098 - C31097) * C26401 + (C31244 - C31243) * C26355 +
                     (C31101 - C31102) * C26402 + (C31245 - C31246) * C26356) *
                        C78889 * C78610 * C5452 +
                    ((C31102 - C31101) * C26401 + (C31246 - C31245) * C26355 +
                     (C78890 * C31094 - C233 * C30988) * C26402 +
                     (C78890 * C31241 - C233 * C31146) * C26356) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezx[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C78889 * C730 - C26357 * C721) * C233 +
            (C78889 * C1336 - C26357 * C1328) * C78890) *
               C26356) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C233 +
            (C26357 * C492 - C78889 * C498) * C78890) *
               C26355 +
           ((C26357 * C720 - C78889 * C728) * C233 +
            (C26357 * C1329 - C78889 * C1337) * C78890) *
               C26356) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C233 +
            (C78889 * C499 - C26357 * C493) * C78890) *
               C26355 +
           ((C78889 * C736 - C26357 * C724) * C233 +
            (C78889 * C1340 - C26357 * C1332) * C78890) *
               C26356) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C233 +
            (C26357 * C494 - C78889 * C500) * C78890) *
               C26355 +
           ((C26357 * C726 - C78889 * C740) * C233 +
            (C26357 * C1334 - C78889 * C1342) * C78890) *
               C26356) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C233 +
            (C78889 * C501 - C26357 * C495) * C78890) *
               C26355 +
           ((C78889 * C2526 - C26357 * C2525) * C233 +
            (C78889 * C2951 - C26357 * C2950) * C78890) *
               C26356) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C78883 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C78868 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C233 +
             (C78889 * C497 - C26357 * C491) * C78890) *
                C26355 +
            ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
            ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
            ((C78889 * C5461 - C26357 * C5456) * C233 +
             (C78889 * C5759 - C26357 * C5755) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C233 +
             (C26357 * C492 - C78889 * C498) * C78890) *
                C26355 +
            ((C27060 - C27061) * C233 + (C27306 - C27307) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27061 - C27060) * C233 + (C27307 - C27306) * C78890) * C26355 +
            ((C27064 - C27065) * C233 + (C27308 - C27309) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27065 - C27064) * C233 + (C27309 - C27308) * C78890) * C26355 +
            ((C26357 * C5455 - C78889 * C5459) * C233 +
             (C26357 * C5756 - C78889 * C5760) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C233 +
             (C78889 * C499 - C26357 * C493) * C78890) *
                C26355 +
            ((C27068 - C27069) * C233 + (C27310 - C27311) * C78890) * C26356) *
               C78610 * C4809 +
           (((C27069 - C27068) * C233 + (C27311 - C27310) * C78890) * C26355 +
            ((C27072 - C27073) * C233 + (C27312 - C27313) * C78890) * C26356) *
               C78610 * C4810 +
           (((C27073 - C27072) * C233 + (C27313 - C27312) * C78890) * C26355 +
            ((C78889 * C6690 - C26357 * C6689) * C233 +
             (C78889 * C7115 - C26357 * C7114) * C78890) *
                C26356) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C233 +
            (C78889 * C497 - C26357 * C491) * C78890) *
               C26355 +
           ((C27052 - C27053) * C233 + (C27302 - C27303) * C78890) * C26356) *
              C78610 * C5449 +
          (((C27053 - C27052) * C233 + (C27303 - C27302) * C78890) * C26355 +
           ((C27056 - C27057) * C233 + (C27304 - C27305) * C78890) * C26356) *
              C78610 * C5450 +
          (((C27057 - C27056) * C233 + (C27305 - C27304) * C78890) * C26355 +
           ((C31149 - C31150) * C233 + (C31291 - C31292) * C78890) * C26356) *
              C78610 * C5451 +
          (((C31150 - C31149) * C233 + (C31292 - C31291) * C78890) * C26355 +
           ((C31153 - C31154) * C233 + (C31293 - C31294) * C78890) * C26356) *
              C78610 * C5452 +
          (((C31154 - C31153) * C233 + (C31294 - C31293) * C78890) * C26355 +
           ((C78889 * C30989 - C26357 * C30988) * C233 +
            (C78889 * C31289 - C26357 * C31288) * C78890) *
               C26356) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C78592 * C87 +
          ((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
               C233 +
           (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
               C78890) *
              C78889 * C78610 * C78592 * C88 +
          ((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
               C233 +
           (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
               C78890) *
              C78889 * C78610 * C78592 * C89 +
          ((C26401 * C99 - C26355 * C166 + C26402 * C726 - C26356 * C832) *
               C233 +
           (C26401 * C494 - C26355 * C548 + C26402 * C1334 - C26356 * C1424) *
               C78890) *
              C78889 * C78610 * C78592 * C90 +
          ((C26355 * C167 - C26401 * C100 + C26356 * C2595 - C26402 * C2525) *
               C233 +
           (C26355 * C549 - C26401 * C495 + C26356 * C3018 - C26402 * C2950) *
               C78890) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C78883 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C78868 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
                C233 +
            (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
                C233 +
            (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 -
             C26356 * C1420) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
                C233 +
            (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 -
             C26402 * C5755) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C26401 * C97 - C26355 * C164 + C26402 * C720 - C26356 * C827) *
                C233 +
            (C26401 * C492 - C26355 * C546 + C26402 * C1329 - C26356 * C1419) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26355 * C827 - C26401 * C720 + C26356 * C829 - C26402 * C723) *
                C233 +
            (C26355 * C1419 - C26401 * C1329 + C26356 * C1421 -
             C26402 * C1331) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26401 * C723 - C26355 * C829 + C26402 * C5455 - C26356 * C5514) *
                C233 +
            (C26401 * C1331 - C26355 * C1421 + C26402 * C5756 -
             C26356 * C5806) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C26355 * C165 - C26401 * C98 + C26356 * C830 - C26402 * C724) *
                C233 +
            (C26355 * C547 - C26401 * C493 + C26356 * C1422 - C26402 * C1332) *
                C78890) *
               C78889 * C78610 * C4809 +
           ((C26401 * C724 - C26355 * C830 + C26402 * C725 - C26356 * C831) *
                C233 +
            (C26401 * C1332 - C26355 * C1422 + C26402 * C1333 -
             C26356 * C1423) *
                C78890) *
               C78889 * C78610 * C4810 +
           ((C26355 * C831 - C26401 * C725 + C26356 * C6759 - C26402 * C6689) *
                C233 +
            (C26355 * C1423 - C26401 * C1333 + C26356 * C7182 -
             C26402 * C7114) *
                C78890) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26355 * C163 - C26401 * C96 + C26356 * C826 - C26402 * C721) *
               C233 +
           (C26355 * C545 - C26401 * C491 + C26356 * C1418 - C26402 * C1328) *
               C78890) *
              C78889 * C78610 * C5449 +
          ((C26401 * C721 - C26355 * C826 + C26402 * C722 - C26356 * C828) *
               C233 +
           (C26401 * C1328 - C26355 * C1418 + C26402 * C1330 - C26356 * C1420) *
               C78890) *
              C78889 * C78610 * C5450 +
          ((C26355 * C828 - C26401 * C722 + C26356 * C5513 - C26402 * C5456) *
               C233 +
           (C26355 * C1420 - C26401 * C1330 + C26356 * C5805 - C26402 * C5755) *
               C78890) *
              C78889 * C78610 * C5451 +
          ((C26401 * C5456 - C26355 * C5513 + C26402 * C5457 - C26356 * C5515) *
               C233 +
           (C26401 * C5755 - C26355 * C5805 + C26402 * C5757 - C26356 * C5807) *
               C78890) *
              C78889 * C78610 * C5452 +
          ((C26355 * C5515 - C26401 * C5457 + C26356 * C31050 -
            C26402 * C30988) *
               C233 +
           (C26355 * C5807 - C26401 * C5757 + C26356 * C31336 -
            C26402 * C31288) *
               C78890) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           (C233 * C932 - C601 * C721 - C233 * C1328 + C78890 * C1509) *
               C26356) *
              C78889 * C78610 * C78592 * C87 -
          (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78592 * C88 +
          (C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78592 * C89 -
          (C3095 * C26356 + C635 * C26355) * C78889 * C78610 * C78592 * C90 +
          (C636 * C26355 +
           (C233 * C2667 - C601 * C2525 - C233 * C2950 + C78890 * C3087) *
               C26356) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C78883 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C78868 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C717 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C78868 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C78883 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C718 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C78883 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C78868 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
            C27474 * C26356) *
               C78889 * C78610 * C4809 -
           (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C4810 +
           (C27475 * C26355 +
            (C233 * C5563 - C601 * C5456 - C233 * C5755 + C78890 * C5852) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78880 +
          ((C1541 * C26355 + C1542 * C26356) * C78889 * C78610 * C4810 -
           (C1541 * C26356 + C633 * C26355) * C78889 * C78610 * C4809 -
           (C7259 * C26356 + C1542 * C26355) * C78889 * C78610 * C78842) *
              C78864 +
          ((C634 * C26355 + C1543 * C26356) * C78889 * C78610 * C4809 -
           (C1544 * C26356 + C1543 * C26355) * C78889 * C78610 * C4810 +
           (C1544 * C26355 +
            (C233 * C6831 - C601 * C6689 - C233 * C7114 + C78890 * C7251) *
                C26356) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C233 * C234 - C601 * C96 - C233 * C491 + C78890 * C602) * C26355 +
           C27474 * C26356) *
              C78889 * C78610 * C5449 -
          (C27475 * C26356 + C27474 * C26355) * C78889 * C78610 * C5450 +
          (C27475 * C26355 + C31393 * C26356) * C78889 * C78610 * C5451 -
          (C31394 * C26356 + C31393 * C26355) * C78889 * C78610 * C5452 +
          (C31394 * C26355 +
           (C233 * C31094 - C601 * C30988 - C233 * C31288 + C78890 * C31379) *
               C26356) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C78651 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78658 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C14943) *
              C78569 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78658 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78651 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C14943) *
              C78578 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C78651 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78658 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C78651 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C78658 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78610 * C14943) *
              C78569 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78651 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78658 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C14943) *
              C78578 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78651 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78658 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78651 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78658 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C14943) *
              C78569 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78651 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78658 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C14943) *
              C78578 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78651 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78658 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C78651 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78658 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C14943) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C78651 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78658 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C14943) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C78651 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78658 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C78651 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78658 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78610 * C14943) *
              C78569 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C78658 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C78651 -
           (C58414 * C51694 + C1162 * C78889 * C51693) * C78610 * C14943) *
              C78578 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C78651 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C78658 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78651 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78658 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C14943) *
              C78569 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78651 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78658 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C14943) *
              C78578 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78651 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78658 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C78651 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78658 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C14943) *
                        C78569 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C78651 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78658 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C14943) *
                        C78578 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C78651 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78658 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C14943) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[50] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C78651 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C78658 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78610 * C14943) *
                        C78569 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78651 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78658 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C14943) *
                        C78578 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C78651 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78658 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C14943) *
                        C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78651 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78658 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C14943) *
              C78569 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78658 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78651 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C14943) *
              C78578 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78651 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78658 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C14943) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78651 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C78658 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C78813 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C14943) *
              C13455 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C78651 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78658 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78651 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78658 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C78813 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C14943) *
              C13455 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78651 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78658 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C78813 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78651 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78658 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C14943) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78651 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78658 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78651 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78658 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C78813 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C14943) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78651 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78658 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C78813 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78651 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C78658 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C78813 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C14943) *
              C13455 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C78651 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78658 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78651 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78658 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C14943) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78651 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78658 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78651 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78658 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C78813 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C14943) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78651 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78658 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C78813 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78651 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78658 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C78813 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C14943) *
              C13455 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78651 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78658 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C78813 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78651 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C78658 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C78813 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C14943) *
              C13455 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C78651 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78658 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C78813) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C78893 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78886 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78873 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C78852) *
              C13455 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78886 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78893 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78873 +
           (C32230 * C51693 + (C26357 * C8255 - C26358 * C8252 -
                               C26357 * C8256 + C78889 * C8258) *
                                  C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C12851 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78655) *
              C78892 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78655 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C12851) *
              C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C12851 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78655) *
              C78866 +
          ((C28214 * C51693 + (C26357 * C3843 - C26358 * C3836 -
                               C26357 * C3844 + C78889 * C3848) *
                                  C51694) *
               C78891 * C78610 * C78655 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78884 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78870 +
            (C52813 * C51693 + C60805 * C51694) * C78891 * C78845) *
               C12851 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78870 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78884 -
            (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
               C78655) *
              C13455 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78870 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78884 -
            (C62150 * C51694 + C52815 * C51693) * C78891 * C78845) *
               C12851 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78884 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78870 +
            (C36129 * C51693 + (C26357 * C12229 - C26358 * C12226 -
                                C26357 * C12230 + C78889 * C12232) *
                                   C51694) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C78893 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C78886 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78610 * C78873 +
           (((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C78610 * C78852) *
              C13455 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78893 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78886 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78873 +
           (((C6763 - C6762) * C26357 + (C6765 - C6764) * C78889) * C51693 +
            ((C78891 * C8326 - C162 * C8252) * C26357 +
             (C78891 * C8328 - C162 * C8256) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C12851 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78892 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C12851 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78655) *
              C78882 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C12851 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78655) *
              C78866 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78610 * C12851 +
           (((C2599 - C2598) * C26357 + (C2601 - C2600) * C78889) * C51693 +
            ((C78891 * C3950 - C162 * C3836) * C26357 +
             (C78891 * C3954 - C162 * C3844) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78884 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78870 +
            (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) *
                 C51693 +
             ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                 C51694) *
                C78845) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78884 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78870 +
            (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) *
                 C51693 +
             ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                 C51694) *
                C78845) *
               C78655) *
              C13455 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78884 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78870 +
            (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
             ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                 C51694) *
                C78845) *
               C12851 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78884 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78870 +
            (((C10797 - C10796) * C26357 + (C10799 - C10798) * C78889) *
                 C51693 +
             ((C78891 * C12300 - C162 * C12226) * C26357 +
              (C78891 * C12302 - C162 * C12230) * C78889) *
                 C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78893 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78886 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78873 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78610 * C78852) *
              C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78893 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78886 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78873 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C26357 +
            (C51693 * C5568 - C51779 * C5460 + C51694 * C8398 -
             C51780 * C8256) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C26357 +
            (C51693 * C946 - C51779 * C741 + C51694 * C4068 - C51780 * C3844) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78884 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78870 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C26357 +
             (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
              C51780 * C10200) *
                 C78889) *
                C78891 * C78845) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78884 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78870 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C26357 +
             (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
              C51694 * C12371) *
                 C78889) *
                C78891 * C78845) *
               C78655) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78884 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78870 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C26357 +
             (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
              C51694 * C10306) *
                 C78889) *
                C78891 * C78845) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78884 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78870 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C26357 +
             (C51693 * C6120 - C51779 * C5936 + C51694 * C12372 -
              C51780 * C12230) *
                 C78889) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C78893 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78886 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78873 +
           (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78610 * C78852) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C78893 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78886 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78873 +
           (((C32431 - C32430) * C162 + (C32433 - C32432) * C78891) * C51693 +
            ((C78889 * C8255 - C26357 * C8252) * C162 +
             (C78889 * C8468 - C26357 * C8466) * C78891) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78655) *
              C78892 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78655) *
              C78882 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78655) *
              C78866 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C78610 * C12851 +
           (((C28415 - C28414) * C162 + (C28417 - C28416) * C78891) * C51693 +
            ((C78889 * C3843 - C26357 * C3836) * C162 +
             (C78889 * C4182 - C26357 * C4178) * C78891) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78884 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78870 +
            (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
             ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
                C78845) *
               C12851 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78884 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78870 +
            (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
             ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
                C78845) *
               C78655) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78884 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78870 +
            (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
             ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
                C78845) *
               C12851 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78884 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78870 +
            (((C36426 - C36425) * C162 + (C36428 - C36427) * C78891) * C51693 +
             ((C78889 * C12229 - C26357 * C12226) * C162 +
              (C78889 * C12442 - C26357 * C12440) * C78891) *
                 C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C78893 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78886 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78610 * C78873 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78610 * C78852) *
              C13455 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C78886 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C78893 -
           (C58414 * C51694 + C1162 * C78889 * C51693) * C78610 * C78873 +
           (C6979 * C78889 * C51693 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C78889 * C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C12851 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78655) *
              C78892 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C78655 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C12851) *
              C78882 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C12851 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C78655) *
              C78866 +
          ((C2815 * C78889 * C51693 +
            (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                C78889 * C51694) *
               C78610 * C78655 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78884 -
            (C53165 * C51694 + C53164 * C51693) * C78870 +
            (C53165 * C51693 + C61012 * C51694) * C78845) *
               C12851 +
           ((C55183 * C51693 + C57025 * C51694) * C78870 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78884 -
            (C63027 * C51694 + C57025 * C51693) * C78845) *
               C78655) *
              C13455 +
          (((C53154 * C51693 + C53155 * C51694) * C78870 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78884 -
            (C62419 * C51694 + C53155 * C51693) * C78845) *
               C12851 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78884 -
            (C61685 * C51694 + C55178 * C51693) * C78870 +
            (C61685 * C51693 +
             (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                 C78889 * C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78893 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78886 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78873 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78893 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78886 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78873 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C162 +
            (C51693 * C5710 - C51779 * C5614 + C51694 * C8604 -
             C51780 * C8466) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C162 +
            (C51693 * C1244 - C51779 * C1044 + C51694 * C4400 -
             C51780 * C4178) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78884 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78870 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C162 +
             (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
              C51780 * C10351) *
                 C78891) *
                C78889 * C78845) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78884 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78870 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C162 +
             (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
              C51694 * C12577) *
                 C78891) *
                C78889 * C78845) *
               C78655) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78884 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78870 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C162 +
             (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
              C51694 * C10448) *
                 C78891) *
                C78889 * C78845) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78884 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78870 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C162 +
             (C51693 * C6366 - C51779 * C6200 + C51694 * C12578 -
              C51780 * C12440) *
                 C78891) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78610 * C78893 +
           ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78610 * C78886 +
           ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78610 * C78873 +
           ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C78610 * C78852) *
              C13455 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78610 * C78893 +
           ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
            (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
               C78891 * C78610 * C78886 +
           ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
            (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
               C78891 * C78610 * C78873 +
           ((C32431 - C32430) * C51779 + (C32633 - C32632) * C51693 +
            (C78889 * C8255 - C26357 * C8252) * C51780 +
            (C78889 * C8674 - C26357 * C8672) * C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78610 * C12851 +
           ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78610 * C78655) *
              C78892 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78610 * C12851 +
           ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
            (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
               C78891 * C78610 * C78655) *
              C78882 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78610 * C12851 +
           ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
            (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
               C78891 * C78610 * C78655) *
              C78866 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
               C78891 * C78610 * C12851 +
           ((C28415 - C28414) * C51779 + (C28617 - C28616) * C51693 +
            (C78889 * C3843 - C26357 * C3836) * C51780 +
            (C78889 * C4510 - C26357 * C4506) * C51694) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78884 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78870 +
            ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
             (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                C78891 * C78845) *
               C12851 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78884 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78870 +
            ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
             (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                C78891 * C78845) *
               C78655) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78884 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78870 +
            ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
             (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
                C78891 * C78845) *
               C12851 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78884 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78870 +
            ((C36426 - C36425) * C51779 + (C36724 - C36723) * C51693 +
             (C78889 * C12229 - C26357 * C12226) * C51780 +
             (C78889 * C12648 - C26357 * C12646) * C51694) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78610 * C78893 +
           ((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78610 * C78886 +
           ((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C78610 * C78873 +
           ((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78610 * C78893 +
           ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
            (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
               C78889 * C78610 * C78886 +
           ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
            (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
               C78889 * C78610 * C78873 +
           ((C6763 - C6762) * C51779 + (C7185 - C7184) * C51693 +
            (C78891 * C8326 - C162 * C8252) * C51780 +
            (C78891 * C8742 - C162 * C8672) * C51694) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78610 * C12851 +
           ((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78610 * C12851 +
           ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
            (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C78610 * C12851 +
           ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
            (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C78610 * C12851 +
           ((C2599 - C2598) * C51779 + (C3021 - C3020) * C51693 +
            (C78891 * C3950 - C162 * C3836) * C51780 +
            (C78891 * C4612 - C162 * C4506) * C51694) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78884 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78870 +
            ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
             (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                C78889 * C78845) *
               C12851 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78884 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78870 +
            ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
             (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
                C78889 * C78845) *
               C78655) *
              C13455 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78884 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78870 +
            ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
             (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                C78889 * C78845) *
               C12851 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78884 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78870 +
            ((C10797 - C10796) * C51779 + (C11411 - C11410) * C51693 +
             (C78891 * C12300 - C162 * C12226) * C51780 +
             (C78891 * C12716 - C162 * C12646) * C51694) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78893 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78886 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78873 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78610 * C78852) *
              C13455 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78886 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78893 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78873 +
           (C51779 * C5564 - C52033 * C5455 - C51779 * C5756 + C51693 * C5851 +
            C51780 * C8396 - C52034 * C8252 - C51780 * C8672 + C51694 * C8810) *
               C78891 * C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C12851 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78655) *
              C78892 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C12851) *
              C78882 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C12851 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78655) *
              C78866 +
          ((C51779 * C938 - C52033 * C726 - C51779 * C1334 + C51693 * C1514 +
            C51780 * C4064 - C52034 * C3836 - C51780 * C4506 + C51694 * C4718) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78884 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78870 +
            (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
             C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
             C51694 * C10590) *
                C78891 * C78889 * C78845) *
               C12851 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78870 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78884 -
            (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
             C51694 * C12783 + C51779 * C6113 - C52033 * C5930 -
             C51779 * C6445 + C51693 * C6612) *
                C78891 * C78889 * C78845) *
               C78655) *
              C13455 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78870 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78884 -
            (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
             C51694 * C10589 + C51779 * C1840 - C52033 * C1628 -
             C51779 * C2236 + C51693 * C2416) *
                C78891 * C78889 * C78845) *
               C12851 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78884 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78870 +
            (C51779 * C6114 - C52033 * C5929 - C51779 * C6446 + C51693 * C6611 +
             C51780 * C12370 - C52034 * C12226 - C51780 * C12646 +
             C51694 * C12784) *
                C78891 * C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C78655) *
              C78569 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C12851 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C78813 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78569 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78578 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C78813 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C78813 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78569 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78578 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C78813 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C78813 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C12851 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C78655) *
              C78569 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C12851 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C78578 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C78813 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C12851 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C78813 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C78813 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C78813 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C78813 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C78655) *
              C78569 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C12851 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C78578 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C78813 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C78813) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C12851 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78655) *
              C78892 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78655 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C12851) *
              C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C12851 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78655) *
              C78866 +
          ((C28214 * C51693 + (C26357 * C3843 - C26358 * C3836 -
                               C26357 * C3844 + C78889 * C3848) *
                                  C51694) *
               C78891 * C78610 * C78655 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C78893 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78886 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78873 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C78852) *
              C13455 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78886 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78893 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78873 +
           (C32230 * C51693 + (C26357 * C8255 - C26358 * C8252 -
                               C26357 * C8256 + C78889 * C8258) *
                                  C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C12851 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78892 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C12851 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78655) *
              C78882 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C12851 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78655) *
              C78866 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78610 * C12851 +
           (((C2599 - C2598) * C26357 + (C2601 - C2600) * C78889) * C51693 +
            ((C78891 * C3950 - C162 * C3836) * C26357 +
             (C78891 * C3954 - C162 * C3844) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C78893 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C78886 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78610 * C78873 +
           (((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C78610 * C78852) *
              C13455 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78893 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78886 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78873 +
           (((C6763 - C6762) * C26357 + (C6765 - C6764) * C78889) * C51693 +
            ((C78891 * C8326 - C162 * C8252) * C26357 +
             (C78891 * C8328 - C162 * C8256) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78610 * C12851 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C26357 +
            (C51693 * C946 - C51779 * C741 + C51694 * C4068 - C51780 * C3844) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78893 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78886 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78873 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78610 * C78852) *
              C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78893 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78886 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78873 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C26357 +
            (C51693 * C5568 - C51779 * C5460 + C51694 * C8398 -
             C51780 * C8256) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78655) *
              C78892 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78655) *
              C78882 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C12851 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78655) *
              C78866 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C78610 * C12851 +
           (((C28415 - C28414) * C162 + (C28417 - C28416) * C78891) * C51693 +
            ((C78889 * C3843 - C26357 * C3836) * C162 +
             (C78889 * C4182 - C26357 * C4178) * C78891) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C78893 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78886 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78873 +
           (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78610 * C78852) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C78893 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78886 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78873 +
           (((C32431 - C32430) * C162 + (C32433 - C32432) * C78891) * C51693 +
            ((C78889 * C8255 - C26357 * C8252) * C162 +
             (C78889 * C8468 - C26357 * C8466) * C78891) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C12851 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78655) *
              C78892 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C78655 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C12851) *
              C78882 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C12851 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C78655) *
              C78866 +
          ((C2815 * C78889 * C51693 +
            (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                C78889 * C51694) *
               C78610 * C78655 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C78893 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78886 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78610 * C78873 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78610 * C78852) *
              C13455 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C78886 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C78893 -
           (C58414 * C51694 + C1162 * C78889 * C51693) * C78610 * C78873 +
           (C6979 * C78889 * C51693 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C78889 * C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78610 * C12851 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C162 +
            (C51693 * C1244 - C51779 * C1044 + C51694 * C4400 -
             C51780 * C4178) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78893 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78886 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78873 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78610 * C78852) *
              C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78893 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78886 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78873 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C162 +
            (C51693 * C5710 - C51779 * C5614 + C51694 * C8604 -
             C51780 * C8466) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C12851 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78655) *
                        C78892 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C12851 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78655) *
                        C78882 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C12851 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78655) *
                        C78866 +
                    (((C26357 * C99 - C78889 * C108) * C51779 +
                      (C26357 * C494 - C78889 * C500) * C51693 +
                      (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
                         C78891 * C78610 * C12851 +
                     ((C28415 - C28414) * C51779 + (C28617 - C28616) * C51693 +
                      (C78889 * C3843 - C26357 * C3836) * C51780 +
                      (C78889 * C4510 - C26357 * C4506) * C51694) *
                         C78891 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C78893 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78886 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78873 +
                     ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
                      (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
                         C78891 * C78610 * C78852) *
                        C13455 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C78893 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78886 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78873 +
                     ((C32431 - C32430) * C51779 + (C32633 - C32632) * C51693 +
                      (C78889 * C8255 - C26357 * C8252) * C51780 +
                      (C78889 * C8674 - C26357 * C8672) * C51694) *
                         C78891 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[54] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C12851 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C78655) *
                        C78892 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C12851 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78655) *
                        C78882 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C12851 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78655) *
                        C78866 +
                    (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                      (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                         C78889 * C78610 * C12851 +
                     ((C2599 - C2598) * C51779 + (C3021 - C3020) * C51693 +
                      (C78891 * C3950 - C162 * C3836) * C51780 +
                      (C78891 * C4612 - C162 * C4506) * C51694) *
                         C78889 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C78893 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C78886 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78610 * C78873 +
                     ((C162 * C5456 - C78891 * C5513) * C51779 +
                      (C162 * C5755 - C78891 * C5805) * C51693 +
                      (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
                         C78889 * C78610 * C78852) *
                        C13455 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78893 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78886 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78873 +
                     ((C6763 - C6762) * C51779 + (C7185 - C7184) * C51693 +
                      (C78891 * C8326 - C162 * C8252) * C51780 +
                      (C78891 * C8742 - C162 * C8672) * C51694) *
                         C78889 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C12851 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78655) *
              C78892 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C12851) *
              C78882 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C12851 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78655) *
              C78866 +
          ((C51779 * C938 - C52033 * C726 - C51779 * C1334 + C51693 * C1514 +
            C51780 * C4064 - C52034 * C3836 - C51780 * C4506 + C51694 * C4718) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78610 * C12851) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78893 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78886 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78873 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78610 * C78852) *
              C13455 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78886 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78893 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78873 +
           (C51779 * C5564 - C52033 * C5455 - C51779 * C5756 + C51693 * C5851 +
            C51780 * C8396 - C52034 * C8252 - C51780 * C8672 + C51694 * C8810) *
               C78891 * C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78651 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78658 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C17369 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C14943) *
              C78798 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C78651 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78658 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78651 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78658 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C17369 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C14943) *
              C78798 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78651 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78658 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C17369 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78651 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78658 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C14943) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78651 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78658 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78651 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78658 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C17369 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C14943) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78651 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78658 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C17369 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78651 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78658 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C17369 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C14943) *
              C78798 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C78651 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78658 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78651 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78658 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C14943) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78651 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78658 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78651 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78658 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C17369 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C14943) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78651 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78658 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C17369 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78651 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78658 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C17369 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C14943) *
              C78798 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78651 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78658 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C17369 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78651 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78658 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C17369 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C14943) *
              C78798 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C78651 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78658 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C17369) *
               C14943) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78693 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78700 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C20337) *
              C78651 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78700 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78693 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C20337) *
              C78658 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C78693 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78700 +
           (C31493 * C51693 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C51694) *
               C78891 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78693 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78700 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C20337) *
              C78651 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78693 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78700 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                C51694) *
               C20337) *
              C78658 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78693 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78700 +
           (((C56779 - C56778) * C26357 + (C56781 - C56780) * C78889) * C51693 +
            ((C78891 * C37658 - C162 * C37580) * C26357 +
             (C78891 * C37659 - C162 * C37582) * C78889) *
                C51694) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78693 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78700 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C20337) *
              C78651 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78693 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78700 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C20337) *
              C78658 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78693 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78700 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C26357 +
            (C51693 * C6123 - C51779 * C5944 + C51694 * C37727 -
             C51780 * C37582) *
                C78889) *
               C78891 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyx[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78693 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78700 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C20337) *
              C78651 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78693 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78700 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C20337) *
              C78658 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78693 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78700 +
           (((C31746 - C31745) * C162 + (C31748 - C31747) * C78891) * C51693 +
            ((C78889 * C37581 - C26357 * C37580) * C162 +
             (C78889 * C37799 - C26357 * C37798) * C78891) *
                C51694) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyy[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78693 -
           (C53165 * C51694 + C53164 * C51693) * C78700 +
           (C53165 * C51693 + C61012 * C51694) * C20337) *
              C78651 +
          ((C55183 * C51693 + C57025 * C51694) * C78700 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78693 -
           (C63027 * C51694 + C57025 * C51693) * C20337) *
              C78658 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78693 -
           (C57027 * C51694 + C57026 * C51693) * C78700 +
           (C57027 * C51693 +
            (C162 * C37658 - C358 * C37580 - C162 * C37798 + C78891 * C37870) *
                C78889 * C51694) *
               C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eeyz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78693 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78700 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C20337) *
              C78651 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78693 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78700 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C20337) *
              C78658 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78693 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78700 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C162 +
            (C51693 * C6369 - C51779 * C6203 + C51694 * C37937 -
             C51780 * C37798) *
                C78891) *
               C78889 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eezx[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78693 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C78700 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                         C78891 * C20337) *
                        C78651 +
                    (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78693 +
                     ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
                      (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                         C78891 * C78700 +
                     ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
                      (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                         C78891 * C20337) *
                        C78658 +
                    (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78693 +
                     ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
                      (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                         C78891 * C78700 +
                     ((C31746 - C31745) * C51779 + (C31986 - C31985) * C51693 +
                      (C78889 * C37581 - C26357 * C37580) * C51780 +
                      (C78889 * C38007 - C26357 * C38006) * C51694) *
                         C78891 * C20337) *
                        C14943) *
                   C78564) /
                  (p * q * std::sqrt(p + q));
    d2eezy[56] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78693 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78700 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                         C78889 * C20337) *
                        C78651 +
                    (((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78693 +
                     ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
                      (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                         C78889 * C78700 +
                     ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
                      (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
                         C78889 * C20337) *
                        C78658 +
                    (((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78693 +
                     ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
                      (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                         C78889 * C78700 +
                     ((C56779 - C56778) * C51779 + (C57255 - C57254) * C51693 +
                      (C78891 * C37658 - C162 * C37580) * C51780 +
                      (C78891 * C38076 - C162 * C38006) * C51694) *
                         C78889 * C20337) *
                        C14943) *
                   C78564) /
                  (p * q * std::sqrt(p + q));
    d2eezz[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78693 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78700 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C20337) *
              C78651 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78700 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78693 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C20337) *
              C78658 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78693 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78700 +
           (C51779 * C6117 - C52033 * C5933 - C51779 * C6449 + C51693 * C6615 +
            C51780 * C37726 - C52034 * C37580 - C51780 * C38006 +
            C51694 * C38143) *
               C78891 * C78889 * C20337) *
              C14943) *
         C78564) /
        (p * q * std::sqrt(p + q));
    d2eexx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C17369 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78893 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
              C78886 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C17369 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
              C78873 +
          ((C33738 * C51693 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C51694) *
               C78891 * C78697 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78655) *
              C78880 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C12851 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C17369 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78894 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78888 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C78876 -
           (C60806 * C51694 + C60805 * C51693) * C78891 * C78858) *
              C12851 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78888 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78894 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C78876 +
           (C37591 * C51693 + (C26357 * C35673 - C26358 * C35672 -
                               C26357 * C35674 + C78889 * C35675) *
                                  C51694) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C17369 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78893 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C17369 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78697) *
              C78886 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C17369 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78697) *
              C78873 +
          ((((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C17369 +
           (((C58940 - C58939) * C26357 + (C58942 - C58941) * C78889) * C51693 +
            ((C78891 * C31570 - C162 * C31468) * C26357 +
             (C78891 * C31571 - C162 * C31470) * C78889) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78880 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78864 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C17369 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C17369 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78894 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78888 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C78876 +
           (((C60852 - C60851) * C26357 + (C60854 - C60853) * C78889) * C51693 +
            ((C60855 - C60856) * C26357 + (C60857 - C60858) * C78889) *
                C51694) *
               C78858) *
              C12851 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78894 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78888 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                C51694) *
               C78876 +
           (((C62819 - C62818) * C26357 + (C62821 - C62820) * C78889) * C51693 +
            ((C78891 * C35718 - C162 * C35672) * C26357 +
             (C78891 * C35719 - C162 * C35674) * C78889) *
                C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78893 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78697) *
              C78886 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78697) *
              C78873 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C26357 +
            (C51693 * C8397 - C51779 * C8254 + C51694 * C31647 -
             C51780 * C31470) *
                C78889) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78894 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78888 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78876 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C26357 +
            (C51779 * C10200 - C51693 * C10305 + C51780 * C10202 -
             C51694 * C10307) *
                C78889) *
               C78891 * C78858) *
              C12851 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78894 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78888 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C78876 +
           ((C51693 * C12369 - C51779 * C12225 + C51694 * C35762 -
             C51780 * C35672) *
                C26357 +
            (C51693 * C12371 - C51779 * C12228 + C51694 * C35763 -
             C51780 * C35674) *
                C78889) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C17369 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78893 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C17369 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78697) *
              C78886 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C17369 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78697) *
              C78873 +
          ((((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C17369 +
           (((C33949 - C33948) * C162 + (C33951 - C33950) * C78891) * C51693 +
            ((C78889 * C31469 - C26357 * C31468) * C162 +
             (C78889 * C31735 - C26357 * C31734) * C78891) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78880 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78864 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C17369 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C17369 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78894 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78888 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C78876 +
           (((C60948 - C60947) * C162 + (C60950 - C60949) * C78891) * C51693 +
            ((C60951 - C60952) * C162 + (C60953 - C60954) * C78891) * C51694) *
               C78858) *
              C12851 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78894 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78888 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C78876 +
           (((C37802 - C37801) * C162 + (C37804 - C37803) * C78891) * C51693 +
            ((C78889 * C35673 - C26357 * C35672) * C162 +
             (C78889 * C35807 - C26357 * C35806) * C78891) *
                C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C17369 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78893 +
          ((C55183 * C51693 + C57025 * C51694) * C78697 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C17369) *
              C78886 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C17369 -
           (C57027 * C51694 + C57026 * C51693) * C78697) *
              C78873 +
          ((C59148 * C51693 +
            (C162 * C31570 - C358 * C31468 - C162 * C31734 + C78891 * C31822) *
                C78889 * C51694) *
               C78697 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C12851 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78655) *
              C78880 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C12851 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C78864 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C17369 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C12851 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78894 -
           (C53165 * C51694 + C53164 * C51693) * C78888 +
           (C53165 * C51693 + C61012 * C51694) * C78876 -
           (C61013 * C51694 + C61012 * C51693) * C78858) *
              C12851 +
          ((C55183 * C51693 + C57025 * C51694) * C78888 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78894 -
           (C63027 * C51694 + C57025 * C51693) * C78876 +
           (C63027 * C51693 +
            (C162 * C35718 - C358 * C35672 - C162 * C35806 + C78891 * C35850) *
                C78889 * C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78893 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78697) *
              C78886 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78697) *
              C78873 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C162 +
            (C51693 * C8603 - C51779 * C8465 + C51694 * C31897 -
             C51780 * C31734) *
                C78891) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78894 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78888 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78876 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C162 +
            (C51779 * C10351 - C51693 * C10447 + C51780 * C10353 -
             C51694 * C10449) *
                C78891) *
               C78889 * C78858) *
              C12851 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78894 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78888 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C78876 +
           ((C51693 * C12369 - C51779 * C12225 + C51694 * C35762 -
             C51780 * C35672) *
                C162 +
            (C51693 * C12577 - C51779 * C12439 + C51694 * C35893 -
             C51780 * C35806) *
                C78891) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C17369 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78893 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C17369 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78697) *
              C78886 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C17369 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C78697) *
              C78873 +
          (((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C17369 +
           ((C33949 - C33948) * C51779 + (C34157 - C34156) * C51693 +
            (C78889 * C31469 - C26357 * C31468) * C51780 +
            (C78889 * C31979 - C26357 * C31978) * C51694) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C17369 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C17369 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78894 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78888 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
               C78891 * C78876 +
           ((C60948 - C60947) * C51779 + (C61102 - C61101) * C51693 +
            (C60951 - C60952) * C51780 + (C61103 - C61104) * C51694) *
               C78891 * C78858) *
              C12851 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78894 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78888 +
           ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
            (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
               C78891 * C78876 +
           ((C37802 - C37801) * C51779 + (C38010 - C38009) * C51693 +
            (C78889 * C35673 - C26357 * C35672) * C51780 +
            (C78889 * C35937 - C26357 * C35936) * C51694) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C17369 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78893 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C17369 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C78697) *
              C78886 +
          (((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C17369 +
           ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
            (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
               C78889 * C78697) *
              C78873 +
          (((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
               C78889 * C17369 +
           ((C58940 - C58939) * C51779 + (C59348 - C59347) * C51693 +
            (C78891 * C31570 - C162 * C31468) * C51780 +
            (C78891 * C32060 - C162 * C31978) * C51694) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C17369 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C17369 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78894 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78888 +
           ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
            (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
               C78889 * C78876 +
           ((C60852 - C60851) * C51779 + (C61149 - C61148) * C51693 +
            (C60855 - C60856) * C51780 + (C61150 - C61151) * C51694) *
               C78889 * C78858) *
              C12851 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78894 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C78888 +
           ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
            (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
               C78889 * C78876 +
           ((C62819 - C62818) * C51779 + (C63227 - C63226) * C51693 +
            (C78891 * C35718 - C162 * C35672) * C51780 +
            (C78891 * C35980 - C162 * C35936) * C51694) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C17369 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78893 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78697 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C17369) *
              C78886 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C17369 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78697) *
              C78873 +
          ((C51779 * C8395 - C52033 * C8251 - C51779 * C8671 + C51693 * C8809 +
            C51780 * C31646 - C52034 * C31468 - C51780 * C31978 +
            C51694 * C32135) *
               C78891 * C78889 * C78697 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78655) *
              C78880 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C12851 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C78864 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C17369 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78894 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78888 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78876 -
           (C51780 * C10303 - C52034 * C10195 - C51780 * C10495 +
            C51694 * C10591 + C51779 * C10301 - C52033 * C10194 -
            C51779 * C10493 + C51693 * C10590) *
               C78891 * C78889 * C78858) *
              C12851 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78888 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78894 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C78876 +
           (C51779 * C12369 - C52033 * C12225 - C51779 * C12645 +
            C51693 * C12783 + C51780 * C35762 - C52034 * C35672 -
            C51780 * C35936 + C51694 * C36023) *
               C78891 * C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78693 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78700 +
            (C52813 * C51693 + C60805 * C51694) * C78891 * C20337) *
               C12851 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78700 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78693 -
            (C37591 * C51694 + C31491 * C51693) * C78891 * C20337) *
               C78655) *
              C78798 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78700 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78693 -
            (C62150 * C51694 + C52815 * C51693) * C78891 * C20337) *
               C12851 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78693 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78700 +
            (C36129 * C51693 + (C26357 * C12229 - C26358 * C12226 -
                                C26357 * C12230 + C78889 * C12232) *
                                   C51694) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78693 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78700 +
            (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) *
                 C51693 +
             ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                 C51694) *
                C20337) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78693 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78700 +
            (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) *
                 C51693 +
             ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                 C51694) *
                C20337) *
               C78655) *
              C78798 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78693 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78700 +
            (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
             ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                 C51694) *
                C20337) *
               C12851 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78693 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78700 +
            (((C10797 - C10796) * C26357 + (C10799 - C10798) * C78889) *
                 C51693 +
             ((C78891 * C12300 - C162 * C12226) * C26357 +
              (C78891 * C12302 - C162 * C12230) * C78889) *
                 C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78693 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78700 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C26357 +
             (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
              C51780 * C10200) *
                 C78889) *
                C78891 * C20337) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78693 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78700 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C26357 +
             (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
              C51694 * C12371) *
                 C78889) *
                C78891 * C20337) *
               C78655) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78693 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78700 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C26357 +
             (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
              C51694 * C10306) *
                 C78889) *
                C78891 * C20337) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78693 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78700 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C26357 +
             (C51693 * C6120 - C51779 * C5936 + C51694 * C12372 -
              C51780 * C12230) *
                 C78889) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78693 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78700 +
            (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
             ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
                C20337) *
               C12851 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78693 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78700 +
            (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
             ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
                C20337) *
               C78655) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78693 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78700 +
            (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
             ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
                C20337) *
               C12851 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78693 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78700 +
            (((C36426 - C36425) * C162 + (C36428 - C36427) * C78891) * C51693 +
             ((C78889 * C12229 - C26357 * C12226) * C162 +
              (C78889 * C12442 - C26357 * C12440) * C78891) *
                 C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78693 -
            (C53165 * C51694 + C53164 * C51693) * C78700 +
            (C53165 * C51693 + C61012 * C51694) * C20337) *
               C12851 +
           ((C55183 * C51693 + C57025 * C51694) * C78700 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78693 -
            (C63027 * C51694 + C57025 * C51693) * C20337) *
               C78655) *
              C78798 +
          (((C53154 * C51693 + C53155 * C51694) * C78700 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78693 -
            (C62419 * C51694 + C53155 * C51693) * C20337) *
               C12851 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78693 -
            (C61685 * C51694 + C55178 * C51693) * C78700 +
            (C61685 * C51693 +
             (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                 C78889 * C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78693 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78700 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C162 +
             (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
              C51780 * C10351) *
                 C78891) *
                C78889 * C20337) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78693 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78700 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C162 +
             (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
              C51694 * C12577) *
                 C78891) *
                C78889 * C20337) *
               C78655) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78693 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78700 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C162 +
             (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
              C51694 * C10448) *
                 C78891) *
                C78889 * C20337) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78693 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78700 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C162 +
             (C51693 * C6366 - C51779 * C6200 + C51694 * C12578 -
              C51780 * C12440) *
                 C78891) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78693 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78700 +
            ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
             (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                C78891 * C20337) *
               C12851 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78693 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78700 +
            ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
             (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                C78891 * C20337) *
               C78655) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78693 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78700 +
            ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
             (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
                C78891 * C20337) *
               C12851 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78693 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78700 +
            ((C36426 - C36425) * C51779 + (C36724 - C36723) * C51693 +
             (C78889 * C12229 - C26357 * C12226) * C51780 +
             (C78889 * C12648 - C26357 * C12646) * C51694) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78693 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78700 +
            ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
             (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                C78889 * C20337) *
               C12851 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78693 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78700 +
            ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
             (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
                C78889 * C20337) *
               C78655) *
              C78798 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78693 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78700 +
            ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
             (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                C78889 * C20337) *
               C12851 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78693 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78700 +
            ((C10797 - C10796) * C51779 + (C11411 - C11410) * C51693 +
             (C78891 * C12300 - C162 * C12226) * C51780 +
             (C78891 * C12716 - C162 * C12646) * C51694) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78693 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78700 +
            (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
             C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
             C51694 * C10590) *
                C78891 * C78889 * C20337) *
               C12851 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78700 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78693 -
            (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
             C51694 * C12783 + C51779 * C6113 - C52033 * C5930 -
             C51779 * C6445 + C51693 * C6612) *
                C78891 * C78889 * C20337) *
               C78655) *
              C78798 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78700 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78693 -
            (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
             C51694 * C10589 + C51779 * C1840 - C52033 * C1628 -
             C51779 * C2236 + C51693 * C2416) *
                C78891 * C78889 * C20337) *
               C12851 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78693 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78700 +
            (C51779 * C6114 - C52033 * C5929 - C51779 * C6446 + C51693 * C6611 +
             C51780 * C12370 - C52034 * C12226 - C51780 * C12646 +
             C51694 * C12784) *
                C78891 * C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78655) *
              C78880 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C12851 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C17369 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C12851 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C17369 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78893 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
              C78886 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C17369 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
              C78873 +
          ((C33738 * C51693 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C51694) *
               C78891 * C78697 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C12851 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78880 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78864 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C17369 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C12851 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C17369 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C17369 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78893 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C17369 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78697) *
              C78886 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C17369 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78697) *
              C78873 +
          ((((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C17369 +
           (((C58940 - C58939) * C26357 + (C58942 - C58941) * C78889) * C51693 +
            ((C78891 * C31570 - C162 * C31468) * C26357 +
             (C78891 * C31571 - C162 * C31470) * C78889) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78893 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78697) *
              C78886 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78697) *
              C78873 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C26357 +
            (C51693 * C8397 - C51779 * C8254 + C51694 * C31647 -
             C51780 * C31470) *
                C78889) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78880 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78864 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C17369 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C12851 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C17369 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C17369 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78893 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C17369 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78697) *
              C78886 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C17369 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78697) *
              C78873 +
          ((((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C17369 +
           (((C33949 - C33948) * C162 + (C33951 - C33950) * C78891) * C51693 +
            ((C78889 * C31469 - C26357 * C31468) * C162 +
             (C78889 * C31735 - C26357 * C31734) * C78891) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C12851 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78655) *
              C78880 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C12851 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C78864 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C17369 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C12851 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C17369 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78893 +
          ((C55183 * C51693 + C57025 * C51694) * C78697 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C17369) *
              C78886 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C17369 -
           (C57027 * C51694 + C57026 * C51693) * C78697) *
              C78873 +
          ((C59148 * C51693 +
            (C162 * C31570 - C358 * C31468 - C162 * C31734 + C78891 * C31822) *
                C78889 * C51694) *
               C78697 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C12851 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78893 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78697) *
              C78886 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78697) *
              C78873 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C162 +
            (C51693 * C8603 - C51779 * C8465 + C51694 * C31897 -
             C51780 * C31734) *
                C78891) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C17369 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C12851 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C17369 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C17369 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78893 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C17369 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78697) *
              C78886 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C17369 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C78697) *
              C78873 +
          (((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C17369 +
           ((C33949 - C33948) * C51779 + (C34157 - C34156) * C51693 +
            (C78889 * C31469 - C26357 * C31468) * C51780 +
            (C78889 * C31979 - C26357 * C31978) * C51694) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78880 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78864 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C17369 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C12851 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C17369 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C17369 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78893 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C17369 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C78697) *
              C78886 +
          (((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C17369 +
           ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
            (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
               C78889 * C78697) *
              C78873 +
          (((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
               C78889 * C17369 +
           ((C58940 - C58939) * C51779 + (C59348 - C59347) * C51693 +
            (C78891 * C31570 - C162 * C31468) * C51780 +
            (C78891 * C32060 - C162 * C31978) * C51694) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78655) *
              C78880 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C12851 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C78864 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C17369 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C12851 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C17369) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C17369 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78893 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78697 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C17369) *
              C78886 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C17369 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78697) *
              C78873 +
          ((C51779 * C8395 - C52033 * C8251 - C51779 * C8671 + C51693 * C8809 +
            C51780 * C31646 - C52034 * C31468 - C51780 * C31978 +
            C51694 * C32135) *
               C78891 * C78889 * C78697 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C17369) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C6683 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C6684 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C6685 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C78852) *
              C78798 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C6684 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C6683 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C6685 +
           (C32230 * C51693 + (C26357 * C8255 - C26358 * C8252 -
                               C26357 * C8256 + C78889 * C8258) *
                                  C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C78812 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78655) *
              C2521 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78655 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78812) *
              C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C78812 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78655) *
              C2523 +
          ((C28214 * C51693 + (C26357 * C3843 - C26358 * C3836 -
                               C26357 * C3844 + C78889 * C3848) *
                                  C51694) *
               C78891 * C78610 * C78655 -
           ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C8885 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C8886 +
            (C52813 * C51693 + C60805 * C51694) * C78891 * C78845) *
               C78812 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C8886 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C8885 -
            (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
               C78655) *
              C78798 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C8886 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C8885 -
            ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
              C78889 * C10205) *
                 C51694 +
             C52815 * C51693) *
                C78891 * C78845) *
               C78812 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C8885 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C8886 +
            (C36129 * C51693 + (C26357 * C12229 - C26358 * C12226 -
                                C26357 * C12230 + C78889 * C12232) *
                                   C51694) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C6683 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C6684 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78610 * C6685 +
           (((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C162 * C8251 - C78891 * C8325) * C26357 +
             (C162 * C8254 - C78891 * C8327) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78798 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C6683 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C6684 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C6685 +
           (((C6763 - C6762) * C26357 + (C6765 - C6764) * C78889) * C51693 +
            ((C78891 * C8326 - C162 * C8252) * C26357 +
             (C78891 * C8328 - C162 * C8256) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C78812 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C162 * C3833 - C78891 * C3947) * C26357 +
             (C162 * C3838 - C78891 * C3951) * C78889) *
                C51694) *
               C78610 * C78655) *
              C2521 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78812 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78655) *
              C2522 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78812 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78655) *
              C2523 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78610 * C78812 +
           (((C2599 - C2598) * C26357 + (C2601 - C2600) * C78889) * C51693 +
            ((C78891 * C3950 - C162 * C3836) * C26357 +
             (C78891 * C3954 - C162 * C3844) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C8885 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C8886 +
            (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) *
                 C51693 +
             ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                 C51694) *
                C78845) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C8885 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C8886 +
            (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) *
                 C51693 +
             ((C162 * C12225 - C78891 * C12299) * C26357 +
              (C162 * C12228 - C78891 * C12301) * C78889) *
                 C51694) *
                C78845) *
               C78655) *
              C78798 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C8885 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C8886 +
            (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
             ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                 C51694) *
                C78845) *
               C78812 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C8885 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C8886 +
            (((C10797 - C10796) * C26357 + (C10799 - C10798) * C78889) *
                 C51693 +
             ((C78891 * C12300 - C162 * C12226) * C26357 +
              (C78891 * C12302 - C162 * C12230) * C78889) *
                 C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C6683 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C6684 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C6685 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C6683 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C6684 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C6685 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C26357 +
            (C51693 * C5568 - C51779 * C5460 + C51694 * C8398 -
             C51780 * C8256) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C26357 +
            (C51693 * C946 - C51779 * C741 + C51694 * C4068 - C51780 * C3844) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C8885 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C8886 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C26357 +
             (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
              C51780 * C10200) *
                 C78889) *
                C78891 * C78845) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C8885 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C8886 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C26357 +
             (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
              C51694 * C12371) *
                 C78889) *
                C78891 * C78845) *
               C78655) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C8885 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C8886 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C26357 +
             (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
              C51694 * C10306) *
                 C78889) *
                C78891 * C78845) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C8885 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C8886 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C26357 +
             (C51693 * C6120 - C51779 * C5936 + C51694 * C12372 -
              C51780 * C12230) *
                 C78889) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C6683 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C6684 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C6685 +
           (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78610 * C78852) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C6683 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C6684 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C6685 +
           (((C32431 - C32430) * C162 + (C32433 - C32432) * C78891) * C51693 +
            ((C78889 * C8255 - C26357 * C8252) * C162 +
             (C78889 * C8468 - C26357 * C8466) * C78891) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78655) *
              C2521 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78655) *
              C2522 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78655) *
              C2523 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C26357 * C1631 - C78889 * C1645) * C162 +
             (C26357 * C1949 - C78889 * C1957) * C78891) *
                C51694) *
               C78610 * C78812 +
           (((C28415 - C28414) * C162 + (C28417 - C28416) * C78891) * C51693 +
            ((C78889 * C3843 - C26357 * C3836) * C162 +
             (C78889 * C4182 - C26357 * C4178) * C78891) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C8885 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C8886 +
            (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
             ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
                C78845) *
               C78812 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C8885 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C8886 +
            (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
             ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
                C78845) *
               C78655) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C8885 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C8886 +
            (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
             ((C26357 * C10193 - C78889 * C10197) * C162 +
              (C26357 * C10352 - C78889 * C10356) * C78891) *
                 C51694) *
                C78845) *
               C78812 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C8885 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C8886 +
            (((C36426 - C36425) * C162 + (C36428 - C36427) * C78891) * C51693 +
             ((C78889 * C12229 - C26357 * C12226) * C162 +
              (C78889 * C12442 - C26357 * C12440) * C78891) *
                 C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C6683 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C6684 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78610 * C6685 -
           ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C78889 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78610 * C78852) *
              C78798 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C6684 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C6683 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C6685 +
           (C6979 * C78889 * C51693 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C78889 * C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C78812 -
           ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C78889 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78655) *
              C2521 +
          ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
               C78655 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C78812) *
              C2522 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C78812 -
           (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
               C78655) *
              C2523 +
          ((C2815 * C78889 * C51693 +
            (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                C78889 * C51694) *
               C78610 * C78655 -
           (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 *
               C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C8885 -
            (C53165 * C51694 + C53164 * C51693) * C8886 +
            (C53165 * C51693 + C61012 * C51694) * C78845) *
               C78812 +
           ((C55183 * C51693 + C57025 * C51694) * C8886 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C8885 -
            ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                 C78889 * C51694 +
             C57025 * C51693) *
                C78845) *
               C78655) *
              C78798 +
          (((C53154 * C51693 + C53155 * C51694) * C8886 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C8885 -
            (C11878 * C78889 * C51694 + C53155 * C51693) * C78845) *
               C78812 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C8885 -
            (C61685 * C51694 + C55178 * C51693) * C8886 +
            (C61685 * C51693 +
             (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                 C78889 * C51694) *
                C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C6683 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C6684 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C6685 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C6683 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C6684 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C6685 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C162 +
            (C51693 * C5710 - C51779 * C5614 + C51694 * C8604 -
             C51780 * C8466) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C162 +
            (C51693 * C1244 - C51779 * C1044 + C51694 * C4400 -
             C51780 * C4178) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C8885 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C8886 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C162 +
             (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
              C51780 * C10351) *
                 C78891) *
                C78889 * C78845) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C8885 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C8886 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C162 +
             (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
              C51694 * C12577) *
                 C78891) *
                C78889 * C78845) *
               C78655) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C8885 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C8886 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C162 +
             (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
              C51694 * C10448) *
                 C78891) *
                C78889 * C78845) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C8885 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C8886 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C162 +
             (C51693 * C6366 - C51779 * C6200 + C51694 * C12578 -
              C51780 * C12440) *
                 C78891) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78610 * C6683 +
           ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78610 * C6684 +
           ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78610 * C6685 +
           ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C78610 * C78852) *
              C78798 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78610 * C6683 +
           ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
            (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
               C78891 * C78610 * C6684 +
           ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
            (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
               C78891 * C78610 * C6685 +
           ((C32431 - C32430) * C51779 + (C32633 - C32632) * C51693 +
            (C78889 * C8255 - C26357 * C8252) * C51780 +
            (C78889 * C8674 - C26357 * C8672) * C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78610 * C78812 +
           ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78610 * C78655) *
              C2521 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78610 * C78812 +
           ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
            (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
               C78891 * C78610 * C78655) *
              C2522 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78610 * C78812 +
           ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
            (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
               C78891 * C78610 * C78655) *
              C2523 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C26357 * C1631 - C78889 * C1645) * C51780 +
            (C26357 * C2239 - C78889 * C2247) * C51694) *
               C78891 * C78610 * C78812 +
           ((C28415 - C28414) * C51779 + (C28617 - C28616) * C51693 +
            (C78889 * C3843 - C26357 * C3836) * C51780 +
            (C78889 * C4510 - C26357 * C4506) * C51694) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C8885 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C8886 +
            ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
             (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                C78891 * C78845) *
               C78812 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C8885 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C8886 +
            ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
             (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                C78891 * C78845) *
               C78655) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C8885 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C8886 +
            ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
             (C26357 * C10193 - C78889 * C10197) * C51780 +
             (C26357 * C10494 - C78889 * C10498) * C51694) *
                C78891 * C78845) *
               C78812 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C8885 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C8886 +
            ((C36426 - C36425) * C51779 + (C36724 - C36723) * C51693 +
             (C78889 * C12229 - C26357 * C12226) * C51780 +
             (C78889 * C12648 - C26357 * C12646) * C51694) *
                C78891 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78610 * C6683 +
           ((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78610 * C6684 +
           ((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C78610 * C6685 +
           ((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C162 * C8251 - C78891 * C8325) * C51780 +
            (C162 * C8671 - C78891 * C8741) * C51694) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78610 * C6683 +
           ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
            (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
               C78889 * C78610 * C6684 +
           ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
            (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
               C78889 * C78610 * C6685 +
           ((C6763 - C6762) * C51779 + (C7185 - C7184) * C51693 +
            (C78891 * C8326 - C162 * C8252) * C51780 +
            (C78891 * C8742 - C162 * C8672) * C51694) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78610 * C78812 +
           ((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C162 * C3833 - C78891 * C3947) * C51780 +
            (C162 * C4503 - C78891 * C4609) * C51694) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78610 * C78812 +
           ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
            (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C78610 * C78812 +
           ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
            (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C78610 * C78812 +
           ((C2599 - C2598) * C51779 + (C3021 - C3020) * C51693 +
            (C78891 * C3950 - C162 * C3836) * C51780 +
            (C78891 * C4612 - C162 * C4506) * C51694) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C8885 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C8886 +
            ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
             (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                C78889 * C78845) *
               C78812 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C8885 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C8886 +
            ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
             (C162 * C12225 - C78891 * C12299) * C51780 +
             (C162 * C12645 - C78891 * C12715) * C51694) *
                C78889 * C78845) *
               C78655) *
              C78798 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C8885 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C8886 +
            ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
             (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                C78889 * C78845) *
               C78812 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C8885 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C8886 +
            ((C10797 - C10796) * C51779 + (C11411 - C11410) * C51693 +
             (C78891 * C12300 - C162 * C12226) * C51780 +
             (C78891 * C12716 - C162 * C12646) * C51694) *
                C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C6683 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C6684 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C6685 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78610 * C78852) *
              C78798 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C6684 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C6683 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C6685 +
           (C51779 * C5564 - C52033 * C5455 - C51779 * C5756 + C51693 * C5851 +
            C51780 * C8396 - C52034 * C8252 - C51780 * C8672 + C51694 * C8810) *
               C78891 * C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78812 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78655) *
              C2521 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78812) *
              C2522 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78812 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78655) *
              C2523 +
          ((C51779 * C938 - C52033 * C726 - C51779 * C1334 + C51693 * C1514 +
            C51780 * C4064 - C52034 * C3836 - C51780 * C4506 + C51694 * C4718) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C8885 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C8886 +
            (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
             C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
             C51694 * C10590) *
                C78891 * C78889 * C78845) *
               C78812 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C8886 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C8885 -
            (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
             C51694 * C12783 + C51779 * C6113 - C52033 * C5930 -
             C51779 * C6445 + C51693 * C6612) *
                C78891 * C78889 * C78845) *
               C78655) *
              C78798 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C8886 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C8885 -
            (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
             C51694 * C10589 + C51779 * C1840 - C52033 * C1628 -
             C51779 * C2236 + C51693 * C2416) *
                C78891 * C78889 * C78845) *
               C78812 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C8885 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C8886 +
            (C51779 * C6114 - C52033 * C5929 - C51779 * C6446 + C51693 * C6611 +
             C51780 * C12370 - C52034 * C12226 - C51780 * C12646 +
             C51694 * C12784) *
                C78891 * C78889 * C78845) *
               C78655) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78813 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C6683 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
              C6684 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C78813 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
              C6685 +
          ((C33738 * C51693 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C51694) *
               C78891 * C78697 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C78655) *
              C717 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C78812 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C718 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C78813 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C11584 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C11585 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C11586 -
           (C60806 * C51694 + C60805 * C51693) * C78891 * C78858) *
              C78812 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C11585 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C11584 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C11586 +
           (C37591 * C51693 + (C26357 * C35673 - C26358 * C35672 -
                               C26357 * C35674 + C78889 * C35675) *
                                  C51694) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78813 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C6683 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78813 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78697) *
              C6684 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78813 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78697) *
              C6685 +
          ((((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C78813 +
           (((C58940 - C58939) * C26357 + (C58942 - C58941) * C78889) * C51693 +
            ((C78891 * C31570 - C162 * C31468) * C26357 +
             (C78891 * C31571 - C162 * C31470) * C78889) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C78891 * C6027 - C162 * C5930) * C26357 +
              (C78891 * C6033 - C162 * C5938) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C717 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C718 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C78813 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C78813 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C11584 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C11585 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C11586 +
           (((C60852 - C60851) * C26357 + (C60854 - C60853) * C78889) * C51693 +
            ((C60855 - C60856) * C26357 + (C60857 - C60858) * C78889) *
                C51694) *
               C78858) *
              C78812 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C11584 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C11585 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                C51694) *
               C11586 +
           (((C62819 - C62818) * C26357 + (C62821 - C62820) * C78889) * C51693 +
            ((C78891 * C35718 - C162 * C35672) * C26357 +
             (C78891 * C35719 - C162 * C35674) * C78889) *
                C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C6683 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78697) *
              C6684 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78697) *
              C6685 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C26357 +
            (C51693 * C8397 - C51779 * C8254 + C51694 * C31647 -
             C51780 * C31470) *
                C78889) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C11584 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C11585 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C11586 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C26357 +
            (C51779 * C10200 - C51693 * C10305 + C51780 * C10202 -
             C51694 * C10307) *
                C78889) *
               C78891 * C78858) *
              C78812 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C11584 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C11585 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C11586 +
           ((C51693 * C12369 - C51779 * C12225 + C51694 * C35762 -
             C51780 * C35672) *
                C26357 +
            (C51693 * C12371 - C51779 * C12228 + C51694 * C35763 -
             C51780 * C35674) *
                C78889) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78813 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C6683 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78813 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78697) *
              C6684 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78813 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78697) *
              C6685 +
          ((((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78813 +
           (((C33949 - C33948) * C162 + (C33951 - C33950) * C78891) * C51693 +
            ((C78889 * C31469 - C26357 * C31468) * C162 +
             (C78889 * C31735 - C26357 * C31734) * C78891) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C717 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C718 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C78813 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C78813 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C11584 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C11585 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C11586 +
           (((C60948 - C60947) * C162 + (C60950 - C60949) * C78891) * C51693 +
            ((C60951 - C60952) * C162 + (C60953 - C60954) * C78891) * C51694) *
               C78858) *
              C78812 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C11584 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C11585 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C11586 +
           (((C37802 - C37801) * C162 + (C37804 - C37803) * C78891) * C51693 +
            ((C78889 * C35673 - C26357 * C35672) * C162 +
             (C78889 * C35807 - C26357 * C35806) * C78891) *
                C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78813 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C6683 +
          ((C55183 * C51693 + C57025 * C51694) * C78697 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78813) *
              C6684 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78813 -
           (C57027 * C51694 + C57026 * C51693) * C78697) *
              C6685 +
          ((C59148 * C51693 +
            (C162 * C31570 - C358 * C31468 - C162 * C31734 + C78891 * C31822) *
                C78889 * C51694) *
               C78697 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78812 +
           ((C55183 * C51693 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C78889 * C51694) *
                C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C78655) *
              C717 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C78812 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C11109 * C78889 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C718 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C78813 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C78812 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C11584 -
           (C53165 * C51694 + C53164 * C51693) * C11585 +
           (C53165 * C51693 + C61012 * C51694) * C11586 -
           (C61013 * C51694 + C61012 * C51693) * C78858) *
              C78812 +
          ((C55183 * C51693 + C57025 * C51694) * C11585 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C11584 -
           (C63027 * C51694 + C57025 * C51693) * C11586 +
           (C63027 * C51693 +
            (C162 * C35718 - C358 * C35672 - C162 * C35806 + C78891 * C35850) *
                C78889 * C51694) *
               C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C6683 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78697) *
              C6684 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78697) *
              C6685 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C162 +
            (C51693 * C8603 - C51779 * C8465 + C51694 * C31897 -
             C51780 * C31734) *
                C78891) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C11584 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C11585 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C11586 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C162 +
            (C51779 * C10351 - C51693 * C10447 + C51780 * C10353 -
             C51694 * C10449) *
                C78891) *
               C78889 * C78858) *
              C78812 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C11584 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C11585 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C11586 +
           ((C51693 * C12369 - C51779 * C12225 + C51694 * C35762 -
             C51780 * C35672) *
                C162 +
            (C51693 * C12577 - C51779 * C12439 + C51694 * C35893 -
             C51780 * C35806) *
                C78891) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78813 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C6683 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78813 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78697) *
              C6684 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78813 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C78697) *
              C6685 +
          (((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C78813 +
           ((C33949 - C33948) * C51779 + (C34157 - C34156) * C51693 +
            (C78889 * C31469 - C26357 * C31468) * C51780 +
            (C78889 * C31979 - C26357 * C31978) * C51694) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C78813 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C78813 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C11584 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C11585 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
               C78891 * C11586 +
           ((C60948 - C60947) * C51779 + (C61102 - C61101) * C51693 +
            (C60951 - C60952) * C51780 + (C61103 - C61104) * C51694) *
               C78891 * C78858) *
              C78812 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C11584 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C11585 +
           ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
            (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
               C78891 * C11586 +
           ((C37802 - C37801) * C51779 + (C38010 - C38009) * C51693 +
            (C78889 * C35673 - C26357 * C35672) * C51780 +
            (C78889 * C35937 - C26357 * C35936) * C51694) *
               C78891 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78813 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C6683 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78813 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C78697) *
              C6684 +
          (((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C78813 +
           ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
            (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
               C78889 * C78697) *
              C6685 +
          (((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
               C78889 * C78813 +
           ((C58940 - C58939) * C51779 + (C59348 - C59347) * C51693 +
            (C78891 * C31570 - C162 * C31468) * C51780 +
            (C78891 * C32060 - C162 * C31978) * C51694) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C78891 * C6027 - C162 * C5930) * C51780 +
             (C78891 * C6531 - C162 * C6445) * C51694) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C78813 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C78813 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C11584 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C11585 +
           ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
            (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
               C78889 * C11586 +
           ((C60852 - C60851) * C51779 + (C61149 - C61148) * C51693 +
            (C60855 - C60856) * C51780 + (C61150 - C61151) * C51694) *
               C78889 * C78858) *
              C78812 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C11584 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C11585 +
           ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
            (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
               C78889 * C11586 +
           ((C62819 - C62818) * C51779 + (C63227 - C63226) * C51693 +
            (C78891 * C35718 - C162 * C35672) * C51780 +
            (C78891 * C35980 - C162 * C35936) * C51694) *
               C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78813 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C6683 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78697 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78813) *
              C6684 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78813 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78697) *
              C6685 +
          ((C51779 * C8395 - C52033 * C8251 - C51779 * C8671 + C51693 * C8809 +
            C51780 * C31646 - C52034 * C31468 - C51780 * C31978 +
            C51694 * C32135) *
               C78891 * C78889 * C78697 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C78655) *
              C717 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C78812 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C718 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C78813 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C11584 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C11585 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C11586 -
           (C51780 * C10303 - C52034 * C10195 - C51780 * C10495 +
            C51694 * C10591 + C51779 * C10301 - C52033 * C10194 -
            C51779 * C10493 + C51693 * C10590) *
               C78891 * C78889 * C78858) *
              C78812 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C11585 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C11584 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C11586 +
           (C51779 * C12369 - C52033 * C12225 - C51779 * C12645 +
            C51693 * C12783 + C51780 * C35762 - C52034 * C35672 -
            C51780 * C35936 + C51694 * C36023) *
               C78891 * C78889 * C78858) *
              C78655) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                   C51693 +
               (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
                C78889 * C1650) *
                   C51694) *
                  C78891 * C78610 * C78592 * C87 -
              ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
                C78889 * C1649) *
                   C51694 +
               (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                   C51693) *
                  C78891 * C78610 * C78592 * C88 +
              ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                   C51693 +
               (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
                C78889 * C1653) *
                   C51694) *
                  C78891 * C78610 * C78592 * C89 -
              ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
                C78889 * C1655) *
                   C51694 +
               (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                   C51693) *
                  C78891 * C78610 * C78592 * C90 +
              ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
                   C51693 +
               (C26357 * C3165 - C26358 * C3164 - C26357 * C3166 +
                C78889 * C3167) *
                   C51694) *
                  C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                    C51693 +
                (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
                 C78889 * C1650) *
                    C51694) *
                   C78891 * C78610 * C78883 -
               (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78868 +
               (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
                  C717 +
              ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78868 -
               ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
                 C78889 * C1649) *
                    C51694 +
                (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                    C51693) *
                   C78891 * C78610 * C78883 -
               (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
                  C718 +
              (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                    C51693 +
                (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
                 C78889 * C1653) *
                    C51694) *
                   C78891 * C78610 * C78883 -
               (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78868 +
               (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                                   C26357 * C7360 + C78889 * C7361) *
                                      C51694) *
                   C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78884 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78870 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C717 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78870 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78884 -
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C51694 +
            C52815 * C51693) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78884 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78870 +
           (C52817 * C51693 + (C26357 * C11589 - C26358 * C11588 -
                               C26357 * C11590 + C78889 * C11591) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C4809 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C4810 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C78880 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C4810 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C4809 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C4809 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C4810 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           C52812 * C51694) *
              C78891 * C78610 * C5449 -
          (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C5450 +
          (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C5451 -
          (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C5452 +
          (C31006 * C51693 + (C26357 * C33728 - C26358 * C33727 -
                              C26357 * C33729 + C78889 * C33730) *
                                 C51694) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78884 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78870 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C4809 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78870 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78884 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
              C4810 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C78884 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78870 +
           (C31493 * C51693 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C8885 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C8886 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78880 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C8886 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C8885 -
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C51694 +
            C52815 * C51693) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C8885 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C8886 +
           (C52817 * C51693 + (C26357 * C11589 - C26358 * C11588 -
                               C26357 * C11590 + C78889 * C11591) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C8885 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C8886 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78883 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C8886 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C8885 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
              C78868 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C8885 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C8886 +
           (C31493 * C51693 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           C52812 * C51694) *
              C78891 * C10188 -
          (C52813 * C51694 + C52812 * C51693) * C78891 * C10189 +
          (C52813 * C51693 + C60805 * C51694) * C78891 * C10190 -
          (C60806 * C51694 + C60805 * C51693) * C78891 * C10191 +
          (C60806 * C51693 + (C26357 * C60789 - C26358 * C60788 -
                              C26357 * C60790 + C78889 * C60791) *
                                 C51694) *
              C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78891 * C163 - C162 * C96) * C26357 +
                (C78891 * C169 - C162 * C103) * C78889) *
                   C51693 +
               ((C78891 * C1731 - C162 * C1626) * C26357 +
                (C78891 * C1739 - C162 * C1636) * C78889) *
                   C51694) *
                  C78610 * C78592 * C87 +
              (((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
               ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                  C78610 * C78592 * C88 +
              (((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
               ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                  C78610 * C78592 * C89 +
              (((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
               ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
                  C78610 * C78592 * C90 +
              (((C189 - C188) * C26357 + (C191 - C190) * C78889) * C51693 +
               ((C78891 * C3234 - C162 * C3164) * C26357 +
                (C78891 * C3235 - C162 * C3166) * C78889) *
                   C51694) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78891 * C163 - C162 * C96) * C26357 +
                 (C78891 * C169 - C162 * C103) * C78889) *
                    C51693 +
                ((C78891 * C1731 - C162 * C1626) * C26357 +
                 (C78891 * C1739 - C162 * C1636) * C78889) *
                    C51694) *
                   C78610 * C78883 +
               (((C162 * C721 - C78891 * C826) * C26357 +
                 (C162 * C731 - C78891 * C834) * C78889) *
                    C51693 +
                ((C162 * C3833 - C78891 * C3947) * C26357 +
                 (C162 * C3838 - C78891 * C3951) * C78889) *
                    C51694) *
                   C78610 * C78868 +
               (((C78891 * C828 - C162 * C722) * C26357 +
                 (C78891 * C836 - C162 * C733) * C78889) *
                    C51693 +
                ((C78891 * C6029 - C162 * C5932) * C26357 +
                 (C78891 * C6035 - C162 * C5942) * C78889) *
                    C51694) *
                   C78610 * C78842) *
                  C717 +
              ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
                ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) *
                    C51694) *
                   C78610 * C78883 +
               (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
                ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) *
                    C51694) *
                   C78610 * C78868 +
               (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
                ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) *
                    C51694) *
                   C78610 * C78842) *
                  C718 +
              ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
                ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) *
                    C51694) *
                   C78610 * C78883 +
               (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
                ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) *
                    C51694) *
                   C78610 * C78868 +
               (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
                ((C78891 * C7460 - C162 * C7358) * C26357 +
                 (C78891 * C7461 - C162 * C7360) * C78889) *
                    C51694) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78884 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78870 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78592 * C717 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78884 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78870 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C78845) *
              C78592 * C718 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78884 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78870 +
           (((C1761 - C1760) * C26357 + (C1763 - C1762) * C78889) * C51693 +
            ((C78891 * C11658 - C162 * C11588) * C26357 +
             (C78891 * C11659 - C162 * C11590) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C4809 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C4810 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C4809 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C4810 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) * C51694) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C26357 +
            (C162 * C731 - C78891 * C834) * C78889) *
               C51693 +
           ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) * C51694) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C26357 +
            (C78891 * C836 - C162 * C733) * C78889) *
               C51693 +
           ((C78891 * C6029 - C162 * C5932) * C26357 +
            (C78891 * C6035 - C162 * C5942) * C78889) *
               C51694) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C26357 +
            (C162 * C5462 - C78891 * C5517) * C78889) *
               C51693 +
           ((C162 * C8251 - C78891 * C8325) * C26357 +
            (C162 * C8254 - C78891 * C8327) * C78889) *
               C51694) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C26357 +
            (C78891 * C5519 - C162 * C5464) * C78889) *
               C51693 +
           ((C78891 * C33805 - C162 * C33727) * C26357 +
            (C78891 * C33806 - C162 * C33729) * C78889) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78884 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78870 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C4809 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78884 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78870 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C162 * C12225 - C78891 * C12299) * C26357 +
             (C162 * C12228 - C78891 * C12301) * C78889) *
                C51694) *
               C78845) *
              C4810 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78884 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78870 +
           (((C56779 - C56778) * C26357 + (C56781 - C56780) * C78889) * C51693 +
            ((C78891 * C37658 - C162 * C37580) * C26357 +
             (C78891 * C37659 - C162 * C37582) * C78889) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C8885 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C8886 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C8885 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C8886 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C8885 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C8886 +
           (((C1761 - C1760) * C26357 + (C1763 - C1762) * C78889) * C51693 +
            ((C78891 * C11658 - C162 * C11588) * C26357 +
             (C78891 * C11659 - C162 * C11590) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C8885 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C8886 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78883 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C8885 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C8886 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C162 * C12225 - C78891 * C12299) * C26357 +
             (C162 * C12228 - C78891 * C12301) * C78889) *
                C51694) *
               C78845) *
              C78868 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C8885 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C8886 +
           (((C56779 - C56778) * C26357 + (C56781 - C56780) * C78889) * C51693 +
            ((C78891 * C37658 - C162 * C37580) * C26357 +
             (C78891 * C37659 - C162 * C37582) * C78889) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) * C51694) *
              C10188 +
          (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
           ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) * C51694) *
              C10189 +
          (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
           ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) * C51694) *
              C10190 +
          (((C60852 - C60851) * C26357 + (C60854 - C60853) * C78889) * C51693 +
           ((C60855 - C60856) * C26357 + (C60857 - C60858) * C78889) * C51694) *
              C10191 +
          (((C60856 - C60855) * C26357 + (C60858 - C60857) * C78889) * C51693 +
           ((C78891 * C60848 - C162 * C60788) * C26357 +
            (C78891 * C60849 - C162 * C60790) * C78889) *
               C51694) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C51693 * C234 - C51779 * C96 + C51694 * C1837 -
                C51780 * C1626) *
                   C26357 +
               (C51693 * C240 - C51779 * C103 + C51694 * C1845 -
                C51780 * C1636) *
                   C78889) *
                  C78891 * C78610 * C78592 * C87 +
              ((C51779 * C97 - C51693 * C235 + C51780 * C1625 -
                C51694 * C1838) *
                   C26357 +
               (C51779 * C105 - C51693 * C241 + C51780 * C1634 -
                C51694 * C1846) *
                   C78889) *
                  C78891 * C78610 * C78592 * C88 +
              ((C51693 * C236 - C51779 * C98 + C51694 * C1841 -
                C51780 * C1629) *
                   C26357 +
               (C51693 * C242 - C51779 * C107 + C51694 * C1849 -
                C51780 * C1642) *
                   C78889) *
                  C78891 * C78610 * C78592 * C89 +
              ((C51779 * C99 - C51693 * C237 + C51780 * C1631 -
                C51694 * C1843) *
                   C26357 +
               (C51779 * C109 - C51693 * C243 + C51780 * C1646 -
                C51694 * C1851) *
                   C78889) *
                  C78891 * C78610 * C78592 * C90 +
              ((C51693 * C238 - C51779 * C100 + C51694 * C3306 -
                C51780 * C3164) *
                   C26357 +
               (C51693 * C244 - C51779 * C111 + C51694 * C3307 -
                C51780 * C3166) *
                   C78889) *
                  C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 -
                 C51780 * C1626) *
                    C26357 +
                (C51693 * C240 - C51779 * C103 + C51694 * C1845 -
                 C51780 * C1636) *
                    C78889) *
                   C78891 * C78610 * C78883 +
               ((C51779 * C721 - C51693 * C932 + C51780 * C3833 -
                 C51694 * C4061) *
                    C26357 +
                (C51779 * C731 - C51693 * C940 + C51780 * C3838 -
                 C51694 * C4065) *
                    C78889) *
                   C78891 * C78610 * C78868 +
               ((C51693 * C934 - C51779 * C722 + C51694 * C6115 -
                 C51780 * C5932) *
                    C26357 +
                (C51693 * C942 - C51779 * C733 + C51694 * C6121 -
                 C51780 * C5942) *
                    C78889) *
                   C78891 * C78610 * C78842) *
                  C717 +
              (((C51779 * C97 - C51693 * C235 + C51780 * C1625 -
                 C51694 * C1838) *
                    C26357 +
                (C51779 * C105 - C51693 * C241 + C51780 * C1634 -
                 C51694 * C1846) *
                    C78889) *
                   C78891 * C78610 * C78883 +
               ((C51693 * C933 - C51779 * C720 + C51694 * C4062 -
                 C51780 * C3834) *
                    C26357 +
                (C51693 * C941 - C51779 * C729 + C51694 * C4066 -
                 C51780 * C3840) *
                    C78889) *
                   C78891 * C78610 * C78868 +
               ((C51779 * C723 - C51693 * C935 + C51780 * C5931 -
                 C51694 * C6116) *
                    C26357 +
                (C51779 * C735 - C51693 * C943 + C51780 * C5940 -
                 C51694 * C6122) *
                    C78889) *
                   C78891 * C78610 * C78842) *
                  C718 +
              (((C51693 * C236 - C51779 * C98 + C51694 * C1841 -
                 C51780 * C1629) *
                    C26357 +
                (C51693 * C242 - C51779 * C107 + C51694 * C1849 -
                 C51780 * C1642) *
                    C78889) *
                   C78891 * C78610 * C78883 +
               ((C51779 * C724 - C51693 * C936 + C51780 * C3835 -
                 C51694 * C4063) *
                    C26357 +
                (C51779 * C737 - C51693 * C944 + C51780 * C3842 -
                 C51694 * C4067) *
                    C78889) *
                   C78891 * C78610 * C78868 +
               ((C51693 * C937 - C51779 * C725 + C51694 * C7564 -
                 C51780 * C7358) *
                    C26357 +
                (C51693 * C945 - C51779 * C739 + C51694 * C7565 -
                 C51780 * C7360) *
                    C78889) *
                   C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78592 * C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78884 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78870 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C26357 +
            (C51693 * C1850 - C51779 * C1644 + C51694 * C11731 -
             C51780 * C11590) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C26357 +
           (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
               C78889) *
              C78891 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C26357 +
           (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
               C78889) *
              C78891 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C26357 +
           (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 - C51694 * C8397) *
               C78889) *
              C78891 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C26357 +
           (C51693 * C5569 - C51779 * C5464 + C51694 * C33874 -
            C51780 * C33729) *
               C78889) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C4809 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78884 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78870 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C78845) *
              C4810 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C26357 +
            (C51693 * C6123 - C51779 * C5944 + C51694 * C37727 -
             C51780 * C37582) *
                C78889) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C8885 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C8886 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C26357 +
            (C51693 * C1850 - C51779 * C1644 + C51694 * C11731 -
             C51780 * C11590) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78883 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C8885 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C8886 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C78845) *
              C78868 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C26357 +
            (C51693 * C6123 - C51779 * C5944 + C51694 * C37727 -
             C51780 * C37582) *
                C78889) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C10188 +
          ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 - C51694 * C1839) *
               C26357 +
           (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 - C51694 * C1847) *
               C78889) *
              C78891 * C10189 +
          ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
            C51780 * C10194) *
               C26357 +
           (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
            C51780 * C10200) *
               C78889) *
              C78891 * C10190 +
          ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
            C51694 * C10303) *
               C26357 +
           (C51779 * C10200 - C51693 * C10305 + C51780 * C10202 -
            C51694 * C10307) *
               C78889) *
              C78891 * C10191 +
          ((C51693 * C10303 - C51779 * C10195 + C51694 * C60900 -
            C51780 * C60788) *
               C26357 +
           (C51693 * C10307 - C51779 * C10202 + C51694 * C60901 -
            C51780 * C60790) *
               C78889) *
              C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C78889 * C102 - C26357 * C96) * C162 +
                (C78889 * C310 - C26357 * C304) * C78891) *
                   C51693 +
               ((C78889 * C1635 - C26357 * C1626) * C162 +
                (C78889 * C1951 - C26357 * C1943) * C78891) *
                   C51694) *
                  C78610 * C78592 * C87 +
              (((C26357 * C97 - C78889 * C104) * C162 +
                (C26357 * C305 - C78889 * C311) * C78891) *
                   C51693 +
               ((C26357 * C1625 - C78889 * C1633) * C162 +
                (C26357 * C1944 - C78889 * C1952) * C78891) *
                   C51694) *
                  C78610 * C78592 * C88 +
              (((C78889 * C106 - C26357 * C98) * C162 +
                (C78889 * C312 - C26357 * C306) * C78891) *
                   C51693 +
               ((C78889 * C1641 - C26357 * C1629) * C162 +
                (C78889 * C1955 - C26357 * C1947) * C78891) *
                   C51694) *
                  C78610 * C78592 * C89 +
              (((C26357 * C99 - C78889 * C108) * C162 +
                (C26357 * C307 - C78889 * C313) * C78891) *
                   C51693 +
               ((C26357 * C1631 - C78889 * C1645) * C162 +
                (C26357 * C1949 - C78889 * C1957) * C78891) *
                   C51694) *
                  C78610 * C78592 * C90 +
              (((C78889 * C110 - C26357 * C100) * C162 +
                (C78889 * C314 - C26357 * C308) * C78891) *
                   C51693 +
               ((C78889 * C3165 - C26357 * C3164) * C162 +
                (C78889 * C3379 - C26357 * C3378) * C78891) *
                   C51694) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C78889 * C102 - C26357 * C96) * C162 +
                 (C78889 * C310 - C26357 * C304) * C78891) *
                    C51693 +
                ((C78889 * C1635 - C26357 * C1626) * C162 +
                 (C78889 * C1951 - C26357 * C1943) * C78891) *
                    C51694) *
                   C78610 * C78883 +
               (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) *
                    C51693 +
                ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) *
                    C51694) *
                   C78610 * C78868 +
               (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) *
                    C51693 +
                ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) *
                    C51694) *
                   C78610 * C78842) *
                  C717 +
              ((((C26357 * C97 - C78889 * C104) * C162 +
                 (C26357 * C305 - C78889 * C311) * C78891) *
                    C51693 +
                ((C26357 * C1625 - C78889 * C1633) * C162 +
                 (C26357 * C1944 - C78889 * C1952) * C78891) *
                    C51694) *
                   C78610 * C78883 +
               (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) *
                    C51693 +
                ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) *
                    C51694) *
                   C78610 * C78868 +
               (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) *
                    C51693 +
                ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) *
                    C51694) *
                   C78610 * C78842) *
                  C718 +
              ((((C78889 * C106 - C26357 * C98) * C162 +
                 (C78889 * C312 - C26357 * C306) * C78891) *
                    C51693 +
                ((C78889 * C1641 - C26357 * C1629) * C162 +
                 (C78889 * C1955 - C26357 * C1947) * C78891) *
                    C51694) *
                   C78610 * C78883 +
               (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) *
                    C51693 +
                ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) *
                    C51694) *
                   C78610 * C78868 +
               (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) *
                    C51693 +
                ((C78889 * C7359 - C26357 * C7358) * C162 +
                 (C78889 * C7669 - C26357 * C7668) * C78891) *
                    C51694) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78884 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78870 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78592 * C717 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78884 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78870 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C26357 * C10193 - C78889 * C10197) * C162 +
             (C26357 * C10352 - C78889 * C10356) * C78891) *
                C51694) *
               C78845) *
              C78592 * C718 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78884 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78870 +
           (((C53069 - C53068) * C162 + (C53071 - C53070) * C78891) * C51693 +
            ((C78889 * C11589 - C26357 * C11588) * C162 +
             (C78889 * C11803 - C26357 * C11802) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
              C78610 * C5449 +
          (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
           ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
              C78610 * C5450 +
          (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
           ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
              C78610 * C5451 +
          (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
           ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
              C78610 * C5452 +
          (((C31154 - C31153) * C162 + (C31156 - C31155) * C78891) * C51693 +
           ((C78889 * C33728 - C26357 * C33727) * C162 +
            (C78889 * C33946 - C26357 * C33945) * C78891) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78884 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78870 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C4809 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78884 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78870 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C78845) *
              C4810 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78884 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78870 +
           (((C31746 - C31745) * C162 + (C31748 - C31747) * C78891) * C51693 +
            ((C78889 * C37581 - C26357 * C37580) * C162 +
             (C78889 * C37799 - C26357 * C37798) * C78891) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C8885 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C8886 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C8885 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C8886 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C26357 * C10193 - C78889 * C10197) * C162 +
             (C26357 * C10352 - C78889 * C10356) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C8885 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C8886 +
           (((C53069 - C53068) * C162 + (C53071 - C53070) * C78891) * C51693 +
            ((C78889 * C11589 - C26357 * C11588) * C162 +
             (C78889 * C11803 - C26357 * C11802) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C8885 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C8886 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78883 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C8885 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C8886 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C78845) *
              C78868 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C8885 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C8886 +
           (((C31746 - C31745) * C162 + (C31748 - C31747) * C78891) * C51693 +
            ((C78889 * C37581 - C26357 * C37580) * C162 +
             (C78889 * C37799 - C26357 * C37798) * C78891) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
              C10188 +
          (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
           ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
              C10189 +
          (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
           ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
              C10190 +
          (((C60948 - C60947) * C162 + (C60950 - C60949) * C78891) * C51693 +
           ((C60951 - C60952) * C162 + (C60953 - C60954) * C78891) * C51694) *
              C10191 +
          (((C60952 - C60951) * C162 + (C60954 - C60953) * C78891) * C51693 +
           ((C78889 * C60789 - C26357 * C60788) * C162 +
            (C78889 * C60945 - C26357 * C60944) * C78891) *
               C51694) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) *
                   C78889 * C51693 +
               (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                   C78889 * C51694) *
                  C78610 * C78592 * C87 -
              (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 *
                  C78592 * C88 +
              (C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 *
                  C78592 * C89 -
              (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 *
                  C78592 * C90 +
              (C393 * C78889 * C51693 +
               (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
                   C78889 * C51694) *
                  C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) *
                    C78889 * C51693 +
                (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                    C78889 * C51694) *
                   C78610 * C78883 -
               ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                    C78889 * C51694 +
                (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                    C78889 * C51693) *
                   C78610 * C78868 +
               ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                    C78889 * C51693 +
                (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                    C78889 * C51694) *
                   C78610 * C78842) *
                  C717 +
              ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
                   C78868 -
               (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 *
                   C78883 -
               (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
                   C78842) *
                  C718 +
              ((C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 *
                   C78883 -
               (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
                   C78868 +
               (C1164 * C78889 * C51693 +
                (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                    C78889 * C51694) *
                   C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78884 -
           (C53165 * C51694 + C53164 * C51693) * C78870 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78592 * C717 +
          ((C53154 * C51693 + C53155 * C51694) * C78870 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78884 -
           (C11878 * C78889 * C51694 + C53155 * C51693) * C78845) *
              C78592 * C718 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78884 -
           (C53157 * C51694 + C53156 * C51693) * C78870 +
           (C53157 * C51693 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C4809 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78880 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C4810 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C4809 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C4809 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C4810 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           C53164 * C51694) *
              C78610 * C5449 -
          (C55183 * C51694 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
               C78889 * C51693) *
              C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
               C78889 * C51693 +
           (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
               C78889 * C51694) *
              C78610 * C5451 -
          ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
               C78889 * C51694 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C78889 * C51693) *
              C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) *
               C78889 * C51693 +
           (C162 * C33805 - C358 * C33727 - C162 * C33945 + C78891 * C34017) *
               C78889 * C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78884 -
           (C53165 * C51694 + C53164 * C51693) * C78870 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C4809 +
          ((C55183 * C51693 + C57025 * C51694) * C78870 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78884 -
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C78889 * C51694 +
            C57025 * C51693) *
               C78845) *
              C4810 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78884 -
           (C57027 * C51694 + C57026 * C51693) * C78870 +
           (C57027 * C51693 +
            (C162 * C37658 - C358 * C37580 - C162 * C37798 + C78891 * C37870) *
                C78889 * C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C8885 -
           (C53165 * C51694 + C53164 * C51693) * C8886 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78880 +
          ((C53154 * C51693 + C53155 * C51694) * C8886 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C8885 -
           (C11878 * C78889 * C51694 + C53155 * C51693) * C78845) *
              C78592 * C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C8885 -
           (C53157 * C51694 + C53156 * C51693) * C8886 +
           (C53157 * C51693 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C8885 -
           (C53165 * C51694 + C53164 * C51693) * C8886 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78883 +
          ((C55183 * C51693 + C57025 * C51694) * C8886 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C8885 -
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C78889 * C51694 +
            C57025 * C51693) *
               C78845) *
              C78868 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C8885 -
           (C57027 * C51694 + C57026 * C51693) * C8886 +
           (C57027 * C51693 +
            (C162 * C37658 - C358 * C37580 - C162 * C37798 + C78891 * C37870) *
                C78889 * C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           C53164 * C51694) *
              C10188 -
          (C53165 * C51694 + C53164 * C51693) * C10189 +
          (C53165 * C51693 + C61012 * C51694) * C10190 -
          (C61013 * C51694 + C61012 * C51693) * C10191 +
          (C61013 * C51693 +
           (C162 * C60848 - C358 * C60788 - C162 * C60944 + C78891 * C60996) *
               C78889 * C51694) *
              C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C51693 * C234 - C51779 * C96 + C51694 * C1837 -
                C51780 * C1626) *
                   C162 +
               (C51693 * C435 - C51779 * C304 + C51694 * C2143 -
                C51780 * C1943) *
                   C78891) *
                  C78889 * C78610 * C78592 * C87 +
              ((C51779 * C97 - C51693 * C235 + C51780 * C1625 -
                C51694 * C1838) *
                   C162 +
               (C51779 * C305 - C51693 * C436 + C51780 * C1944 -
                C51694 * C2144) *
                   C78891) *
                  C78889 * C78610 * C78592 * C88 +
              ((C51693 * C236 - C51779 * C98 + C51694 * C1841 -
                C51780 * C1629) *
                   C162 +
               (C51693 * C437 - C51779 * C306 + C51694 * C2147 -
                C51780 * C1947) *
                   C78891) *
                  C78889 * C78610 * C78592 * C89 +
              ((C51779 * C99 - C51693 * C237 + C51780 * C1631 -
                C51694 * C1843) *
                   C162 +
               (C51779 * C307 - C51693 * C438 + C51780 * C1949 -
                C51694 * C2149) *
                   C78891) *
                  C78889 * C78610 * C78592 * C90 +
              ((C51693 * C238 - C51779 * C100 + C51694 * C3306 -
                C51780 * C3164) *
                   C162 +
               (C51693 * C439 - C51779 * C308 + C51694 * C3520 -
                C51780 * C3378) *
                   C78891) *
                  C78889 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 -
                 C51780 * C1626) *
                    C162 +
                (C51693 * C435 - C51779 * C304 + C51694 * C2143 -
                 C51780 * C1943) *
                    C78891) *
                   C78889 * C78610 * C78883 +
               ((C51779 * C721 - C51693 * C932 + C51780 * C3833 -
                 C51694 * C4061) *
                    C162 +
                (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
                 C51694 * C4397) *
                    C78891) *
                   C78889 * C78610 * C78868 +
               ((C51693 * C934 - C51779 * C722 + C51694 * C6115 -
                 C51780 * C5932) *
                    C162 +
                (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
                 C51780 * C6201) *
                    C78891) *
                   C78889 * C78610 * C78842) *
                  C717 +
              (((C51779 * C97 - C51693 * C235 + C51780 * C1625 -
                 C51694 * C1838) *
                    C162 +
                (C51779 * C305 - C51693 * C436 + C51780 * C1944 -
                 C51694 * C2144) *
                    C78891) *
                   C78889 * C78610 * C78883 +
               ((C51693 * C933 - C51779 * C720 + C51694 * C4062 -
                 C51780 * C3834) *
                    C162 +
                (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
                 C51780 * C4176) *
                    C78891) *
                   C78889 * C78610 * C78868 +
               ((C51779 * C723 - C51693 * C935 + C51780 * C5931 -
                 C51694 * C6116) *
                    C162 +
                (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
                 C51694 * C6368) *
                    C78891) *
                   C78889 * C78610 * C78842) *
                  C718 +
              (((C51693 * C236 - C51779 * C98 + C51694 * C1841 -
                 C51780 * C1629) *
                    C162 +
                (C51693 * C437 - C51779 * C306 + C51694 * C2147 -
                 C51780 * C1947) *
                    C78891) *
                   C78889 * C78610 * C78883 +
               ((C51779 * C724 - C51693 * C936 + C51780 * C3835 -
                 C51694 * C4063) *
                    C162 +
                (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
                 C51694 * C4399) *
                    C78891) *
                   C78889 * C78610 * C78868 +
               ((C51693 * C937 - C51779 * C725 + C51694 * C7564 -
                 C51780 * C7358) *
                    C162 +
                (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
                 C51780 * C7668) *
                    C78891) *
                   C78889 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78592 * C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78884 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78870 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C78845) *
              C78592 * C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C162 +
            (C51693 * C2148 - C51779 * C1948 + C51694 * C11944 -
             C51780 * C11802) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C162 +
           (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 - C51694 * C4397) *
               C78891) *
              C78889 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C162 +
           (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 - C51780 * C6201) *
               C78891) *
              C78889 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C162 +
           (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 - C51694 * C8603) *
               C78891) *
              C78889 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C162 +
           (C51693 * C5711 - C51779 * C5615 + C51694 * C34084 -
            C51780 * C33945) *
               C78891) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C4809 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78884 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78870 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C78845) *
              C4810 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C162 +
            (C51693 * C6369 - C51779 * C6203 + C51694 * C37937 -
             C51780 * C37798) *
                C78891) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C8885 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C8886 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C162 +
            (C51693 * C2148 - C51779 * C1948 + C51694 * C11944 -
             C51780 * C11802) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78883 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C8885 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C8886 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C78845) *
              C78868 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C162 +
            (C51693 * C6369 - C51779 * C6203 + C51694 * C37937 -
             C51780 * C37798) *
                C78891) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C10188 +
          ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 - C51694 * C1839) *
               C162 +
           (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 - C51694 * C2145) *
               C78891) *
              C78889 * C10189 +
          ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
            C51780 * C10194) *
               C162 +
           (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
            C51780 * C10351) *
               C78891) *
              C78889 * C10190 +
          ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
            C51694 * C10303) *
               C162 +
           (C51779 * C10351 - C51693 * C10447 + C51780 * C10353 -
            C51694 * C10449) *
               C78891) *
              C78889 * C10191 +
          ((C51693 * C10303 - C51779 * C10195 + C51694 * C60900 -
            C51780 * C60788) *
               C162 +
           (C51693 * C10449 - C51779 * C10353 + C51694 * C61055 -
            C51780 * C60944) *
               C78891) *
              C78889 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C78889 * C102 - C26357 * C96) * C51779 +
               (C78889 * C497 - C26357 * C491) * C51693 +
               (C78889 * C1635 - C26357 * C1626) * C51780 +
               (C78889 * C2241 - C26357 * C2233) * C51694) *
                  C78891 * C78610 * C78592 * C87 +
              ((C26357 * C97 - C78889 * C104) * C51779 +
               (C26357 * C492 - C78889 * C498) * C51693 +
               (C26357 * C1625 - C78889 * C1633) * C51780 +
               (C26357 * C2234 - C78889 * C2242) * C51694) *
                  C78891 * C78610 * C78592 * C88 +
              ((C78889 * C106 - C26357 * C98) * C51779 +
               (C78889 * C499 - C26357 * C493) * C51693 +
               (C78889 * C1641 - C26357 * C1629) * C51780 +
               (C78889 * C2245 - C26357 * C2237) * C51694) *
                  C78891 * C78610 * C78592 * C89 +
              ((C26357 * C99 - C78889 * C108) * C51779 +
               (C26357 * C494 - C78889 * C500) * C51693 +
               (C26357 * C1631 - C78889 * C1645) * C51780 +
               (C26357 * C2239 - C78889 * C2247) * C51694) *
                  C78891 * C78610 * C78592 * C90 +
              ((C78889 * C110 - C26357 * C100) * C51779 +
               (C78889 * C501 - C26357 * C495) * C51693 +
               (C78889 * C3165 - C26357 * C3164) * C51780 +
               (C78889 * C3590 - C26357 * C3589) * C51694) *
                  C78891 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C78889 * C102 - C26357 * C96) * C51779 +
                (C78889 * C497 - C26357 * C491) * C51693 +
                (C78889 * C1635 - C26357 * C1626) * C51780 +
                (C78889 * C2241 - C26357 * C2233) * C51694) *
                   C78891 * C78610 * C78883 +
               ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                   C78891 * C78610 * C78868 +
               ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                   C78891 * C78610 * C78842) *
                  C717 +
              (((C26357 * C97 - C78889 * C104) * C51779 +
                (C26357 * C492 - C78889 * C498) * C51693 +
                (C26357 * C1625 - C78889 * C1633) * C51780 +
                (C26357 * C2234 - C78889 * C2242) * C51694) *
                   C78891 * C78610 * C78883 +
               ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                   C78891 * C78610 * C78868 +
               ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                   C78891 * C78610 * C78842) *
                  C718 +
              (((C78889 * C106 - C26357 * C98) * C51779 +
                (C78889 * C499 - C26357 * C493) * C51693 +
                (C78889 * C1641 - C26357 * C1629) * C51780 +
                (C78889 * C2245 - C26357 * C2237) * C51694) *
                   C78891 * C78610 * C78883 +
               ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                   C78891 * C78610 * C78868 +
               ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                (C78889 * C7359 - C26357 * C7358) * C51780 +
                (C78889 * C7976 - C26357 * C7975) * C51694) *
                   C78891 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78884 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78870 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C78889 * C10199 - C26357 * C10194) * C51780 +
            (C78889 * C10497 - C26357 * C10493) * C51694) *
               C78891 * C78845) *
              C78592 * C717 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78884 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78870 +
           ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
            (C26357 * C10193 - C78889 * C10197) * C51780 +
            (C26357 * C10494 - C78889 * C10498) * C51694) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78884 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C78870 +
           ((C53069 - C53068) * C51779 + (C53325 - C53324) * C51693 +
            (C78889 * C11589 - C26357 * C11588) * C51780 +
            (C78889 * C12014 - C26357 * C12013) * C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78610 * C4809 +
           ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78610 * C4810 +
           ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78610 * C4809 +
           ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
            (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
               C78891 * C78610 * C4810 +
           ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
            (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78610 * C4809 +
           ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
            (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
               C78891 * C78610 * C4810 +
           ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
            (C78889 * C7359 - C26357 * C7358) * C51780 +
            (C78889 * C7976 - C26357 * C7975) * C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C78889 * C102 - C26357 * C96) * C51779 +
           (C78889 * C497 - C26357 * C491) * C51693 +
           (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
              C78891 * C78610 * C5449 +
          ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
           (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
              C78891 * C78610 * C5450 +
          ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
           (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
              C78891 * C78610 * C5451 +
          ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
           (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
              C78891 * C78610 * C5452 +
          ((C31154 - C31153) * C51779 + (C31294 - C31293) * C51693 +
           (C78889 * C33728 - C26357 * C33727) * C51780 +
           (C78889 * C34154 - C26357 * C34153) * C51694) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78884 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78870 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C78889 * C10199 - C26357 * C10194) * C51780 +
            (C78889 * C10497 - C26357 * C10493) * C51694) *
               C78891 * C78845) *
              C4809 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78884 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78870 +
           ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
            (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
               C78891 * C78845) *
              C4810 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78884 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C78870 +
           ((C31746 - C31745) * C51779 + (C31986 - C31985) * C51693 +
            (C78889 * C37581 - C26357 * C37580) * C51780 +
            (C78889 * C38007 - C26357 * C38006) * C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C8885 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C8886 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C78889 * C10199 - C26357 * C10194) * C51780 +
            (C78889 * C10497 - C26357 * C10493) * C51694) *
               C78891 * C78845) *
              C78592 * C78880 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C8885 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C8886 +
           ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
            (C26357 * C10193 - C78889 * C10197) * C51780 +
            (C26357 * C10494 - C78889 * C10498) * C51694) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C8885 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C8886 +
           ((C53069 - C53068) * C51779 + (C53325 - C53324) * C51693 +
            (C78889 * C11589 - C26357 * C11588) * C51780 +
            (C78889 * C12014 - C26357 * C12013) * C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C8885 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C8886 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C78889 * C10199 - C26357 * C10194) * C51780 +
            (C78889 * C10497 - C26357 * C10493) * C51694) *
               C78891 * C78845) *
              C78883 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C8885 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C8886 +
           ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
            (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
               C78891 * C78845) *
              C78868 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C8885 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C8886 +
           ((C31746 - C31745) * C51779 + (C31986 - C31985) * C51693 +
            (C78889 * C37581 - C26357 * C37580) * C51780 +
            (C78889 * C38007 - C26357 * C38006) * C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C78889 * C102 - C26357 * C96) * C51779 +
           (C78889 * C497 - C26357 * C491) * C51693 +
           (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
              C78891 * C10188 +
          ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
           (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
              C78891 * C10189 +
          ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
           (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
              C78891 * C10190 +
          ((C60948 - C60947) * C51779 + (C61102 - C61101) * C51693 +
           (C60951 - C60952) * C51780 + (C61103 - C61104) * C51694) *
              C78891 * C10191 +
          ((C60952 - C60951) * C51779 + (C61104 - C61103) * C51693 +
           (C78889 * C60789 - C26357 * C60788) * C51780 +
           (C78889 * C61099 - C26357 * C61098) * C51694) *
              C78891 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[62] += (0.5 * std::pow(Pi, 2.5) *
                       (((C78891 * C163 - C162 * C96) * C51779 +
                         (C78891 * C545 - C162 * C491) * C51693 +
                         (C78891 * C1731 - C162 * C1626) * C51780 +
                         (C78891 * C2323 - C162 * C2233) * C51694) *
                            C78889 * C78610 * C78592 * C87 +
                        ((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                         (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                            C78889 * C78610 * C78592 * C88 +
                        ((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                         (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                            C78889 * C78610 * C78592 * C89 +
                        ((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                         (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                            C78889 * C78610 * C78592 * C90 +
                        ((C189 - C188) * C51779 + (C559 - C558) * C51693 +
                         (C78891 * C3234 - C162 * C3164) * C51780 +
                         (C78891 * C3657 - C162 * C3589) * C51694) *
                            C78889 * C78610 * C78592 * C91) +
                   0.5 * std::pow(Pi, 2.5) *
                       ((((C78891 * C163 - C162 * C96) * C51779 +
                          (C78891 * C545 - C162 * C491) * C51693 +
                          (C78891 * C1731 - C162 * C1626) * C51780 +
                          (C78891 * C2323 - C162 * C2233) * C51694) *
                             C78889 * C78610 * C78883 +
                         ((C162 * C721 - C78891 * C826) * C51779 +
                          (C162 * C1328 - C78891 * C1418) * C51693 +
                          (C162 * C3833 - C78891 * C3947) * C51780 +
                          (C162 * C4503 - C78891 * C4609) * C51694) *
                             C78889 * C78610 * C78868 +
                         ((C78891 * C828 - C162 * C722) * C51779 +
                          (C78891 * C1420 - C162 * C1330) * C51693 +
                          (C78891 * C6029 - C162 * C5932) * C51780 +
                          (C78891 * C6533 - C162 * C6447) * C51694) *
                             C78889 * C78610 * C78842) *
                            C717 +
                        (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                          (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                             C78889 * C78610 * C78883 +
                         ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                          (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                             C78889 * C78610 * C78868 +
                         ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                          (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                             C78889 * C78610 * C78842) *
                            C718 +
                        (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                          (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                             C78889 * C78610 * C78883 +
                         ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                          (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                             C78889 * C78610 * C78868 +
                         ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                          (C78891 * C7460 - C162 * C7358) * C51780 +
                          (C78891 * C8075 - C162 * C7975) * C51694) *
                             C78889 * C78610 * C78842) *
                            C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78884 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78870 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78592 * C717 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78884 +
                     ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
                      (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                         C78889 * C78870 +
                     ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
                      (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                         C78889 * C78845) *
                        C78592 * C718 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78884 +
                     ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
                      (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                         C78889 * C78870 +
                     ((C1761 - C1760) * C51779 + (C2339 - C2338) * C51693 +
                      (C78891 * C11658 - C162 * C11588) * C51780 +
                      (C78891 * C12081 - C162 * C12013) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (0.5 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                        C78889 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C51779 +
                     (C162 * C1328 - C78891 * C1418) * C51693 +
                     (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                        C78889 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C51779 +
                     (C78891 * C1420 - C162 * C1330) * C51693 +
                     (C78891 * C6029 - C162 * C5932) * C51780 +
                     (C78891 * C6533 - C162 * C6447) * C51694) *
                        C78889 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C51779 +
                     (C162 * C5755 - C78891 * C5805) * C51693 +
                     (C162 * C8251 - C78891 * C8325) * C51780 +
                     (C162 * C8671 - C78891 * C8741) * C51694) *
                        C78889 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C51779 +
                     (C78891 * C5807 - C162 * C5757) * C51693 +
                     (C78891 * C33805 - C162 * C33727) * C51780 +
                     (C78891 * C34223 - C162 * C34153) * C51694) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78884 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78870 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C4809 +
                    (((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78884 +
                     ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
                      (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                         C78889 * C78870 +
                     ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
                      (C162 * C12225 - C78891 * C12299) * C51780 +
                      (C162 * C12645 - C78891 * C12715) * C51694) *
                         C78889 * C78845) *
                        C4810 +
                    (((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78884 +
                     ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
                      (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                         C78889 * C78870 +
                     ((C56779 - C56778) * C51779 + (C57255 - C57254) * C51693 +
                      (C78891 * C37658 - C162 * C37580) * C51780 +
                      (C78891 * C38076 - C162 * C38006) * C51694) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C8885 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C8886 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C8885 +
                     ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
                      (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                         C78889 * C8886 +
                     ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
                      (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C8885 +
                     ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
                      (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                         C78889 * C8886 +
                     ((C1761 - C1760) * C51779 + (C2339 - C2338) * C51693 +
                      (C78891 * C11658 - C162 * C11588) * C51780 +
                      (C78891 * C12081 - C162 * C12013) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C8885 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C8886 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78883 +
                    (((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C8885 +
                     ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
                      (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                         C78889 * C8886 +
                     ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
                      (C162 * C12225 - C78891 * C12299) * C51780 +
                      (C162 * C12645 - C78891 * C12715) * C51694) *
                         C78889 * C78845) *
                        C78868 +
                    (((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C8885 +
                     ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
                      (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                         C78889 * C8886 +
                     ((C56779 - C56778) * C51779 + (C57255 - C57254) * C51693 +
                      (C78891 * C37658 - C162 * C37580) * C51780 +
                      (C78891 * C38076 - C162 * C38006) * C51694) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                        C78889 * C10188 +
                    ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                     (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                        C78889 * C10189 +
                    ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                     (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                        C78889 * C10190 +
                    ((C60852 - C60851) * C51779 + (C61149 - C61148) * C51693 +
                     (C60855 - C60856) * C51780 + (C61150 - C61151) * C51694) *
                        C78889 * C10191 +
                    ((C60856 - C60855) * C51779 + (C61151 - C61150) * C51693 +
                     (C78891 * C60848 - C162 * C60788) * C51780 +
                     (C78891 * C61146 - C162 * C61098) * C51694) *
                        C78889 * C10192) *
                   C78592 * C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezz[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
               C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
               C51694 * C2414) *
                  C78891 * C78889 * C78610 * C78592 * C87 -
              (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 +
               C51694 * C2413 + C51779 * C235 - C52033 * C97 - C51779 * C492 +
               C51693 * C603) *
                  C78891 * C78889 * C78610 * C78592 * C88 +
              (C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
               C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
               C51694 * C2417) *
                  C78891 * C78889 * C78610 * C78592 * C89 -
              (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 +
               C51694 * C2419 + C51779 * C237 - C52033 * C99 - C51779 * C494 +
               C51693 * C605) *
                  C78891 * C78889 * C78610 * C78592 * C90 +
              (C51779 * C238 - C52033 * C100 - C51779 * C495 + C51693 * C606 +
               C51780 * C3306 - C52034 * C3164 - C51780 * C3589 +
               C51694 * C3726) *
                  C78891 * C78889 * C78610 * C78592 * C91) +
         0.5 * std::pow(Pi, 2.5) *
             (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
                C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
                C51694 * C2414) *
                   C78891 * C78889 * C78610 * C78883 -
               (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 +
                C51694 * C4715 + C51779 * C932 - C52033 * C721 -
                C51779 * C1328 + C51693 * C1509) *
                   C78891 * C78889 * C78610 * C78868 +
               (C51779 * C934 - C52033 * C722 - C51779 * C1330 +
                C51693 * C1510 + C51780 * C6115 - C52034 * C5932 -
                C51780 * C6447 + C51694 * C6614) *
                   C78891 * C78889 * C78610 * C78842) *
                  C717 +
              ((C51779 * C933 - C52033 * C720 - C51779 * C1329 +
                C51693 * C1508 + C51780 * C4062 - C52034 * C3834 -
                C51780 * C4504 + C51694 * C4716) *
                   C78891 * C78889 * C78610 * C78868 -
               (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 +
                C51694 * C2413 + C51779 * C235 - C52033 * C97 - C51779 * C492 +
                C51693 * C603) *
                   C78891 * C78889 * C78610 * C78883 -
               (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 +
                C51694 * C6613 + C51779 * C935 - C52033 * C723 -
                C51779 * C1331 + C51693 * C1511) *
                   C78891 * C78889 * C78610 * C78842) *
                  C718 +
              ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
                C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
                C51694 * C2417) *
                   C78891 * C78889 * C78610 * C78883 -
               (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 +
                C51694 * C4717 + C51779 * C936 - C52033 * C724 -
                C51779 * C1332 + C51693 * C1512) *
                   C78891 * C78889 * C78610 * C78868 +
               (C51779 * C937 - C52033 * C725 - C51779 * C1333 +
                C51693 * C1513 + C51780 * C7564 - C52034 * C7358 -
                C51780 * C7975 + C51694 * C8176) *
                   C78891 * C78889 * C78610 * C78842) *
                  C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78884 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78870 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78592 * C717 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78870 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78884 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C78845) *
              C78592 * C718 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78884 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78870 +
           (C51779 * C1842 - C52033 * C1630 - C51779 * C2238 + C51693 * C2418 +
            C51780 * C11730 - C52034 * C11588 - C51780 * C12013 +
            C51694 * C12150) *
               C78891 * C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C78880 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C4810 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C5449 -
          (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
           C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
              C78891 * C78889 * C78610 * C5450 +
          (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
           C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
              C78891 * C78889 * C78610 * C5451 -
          (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
           C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
              C78891 * C78889 * C78610 * C5452 +
          (C51779 * C5565 - C52033 * C5457 - C51779 * C5757 + C51693 * C5853 +
           C51780 * C33873 - C52034 * C33727 - C51780 * C34153 +
           C51694 * C34290) *
              C78891 * C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78884 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78870 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C4809 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78870 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78884 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C78845) *
              C4810 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78884 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78870 +
           (C51779 * C6117 - C52033 * C5933 - C51779 * C6449 + C51693 * C6615 +
            C51780 * C37726 - C52034 * C37580 - C51780 * C38006 +
            C51694 * C38143) *
               C78891 * C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C8885 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C8886 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78592 * C78880 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C8886 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C8885 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C78845) *
              C78592 * C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C8885 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C8886 +
           (C51779 * C1842 - C52033 * C1630 - C51779 * C2238 + C51693 * C2418 +
            C51780 * C11730 - C52034 * C11588 - C51780 * C12013 +
            C51694 * C12150) *
               C78891 * C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C8885 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C8886 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78883 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C8886 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C8885 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C78845) *
              C78868 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C8885 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C8886 +
           (C51779 * C6117 - C52033 * C5933 - C51779 * C6449 + C51693 * C6615 +
            C51780 * C37726 - C52034 * C37580 - C51780 * C38006 +
            C51694 * C38143) *
               C78891 * C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C10188 -
          (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
           C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
              C78891 * C78889 * C10189 +
          (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
           C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
           C51694 * C10590) *
              C78891 * C78889 * C10190 -
          (C51780 * C10303 - C52034 * C10195 - C51780 * C10495 +
           C51694 * C10591 + C51779 * C10301 - C52033 * C10194 -
           C51779 * C10493 + C51693 * C10590) *
              C78891 * C78889 * C10191 +
          (C51779 * C10303 - C52033 * C10195 - C51779 * C10495 +
           C51693 * C10591 + C51780 * C60900 - C52034 * C60788 -
           C51780 * C61098 + C51694 * C61193) *
              C78891 * C78889 * C10192) *
         C78592 * C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C4809 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C4810 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C78813 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C78842) *
              C78798 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C4809 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C4810 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78813 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78592 * C2521 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78813) *
              C78592 * C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78813 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
              C78592 * C2523 +
          ((C54144 * C51693 + (C26357 * C1647 - C26358 * C1632 -
                               C26357 * C1648 + C78889 * C1656) *
                                  C51694) *
               C78891 * C78697 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C11584 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C11585 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C11586 -
           (C60806 * C51694 + C60805 * C51693) * C78891 * C78858) *
              C78592 * C78798 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C11585 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C11584 -
           (C62150 * C51694 + C52815 * C51693) * C78891 * C11586 +
           (C62150 * C51693 + (C26357 * C10203 - C26358 * C10196 -
                               C26357 * C10204 + C78889 * C10208) *
                                  C51694) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C4809 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C4810 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C78813 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78798 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C4809 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C4810 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C78813 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78813 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78592 * C2521 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78813 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78697) *
              C78592 * C2522 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78813 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78697) *
              C78592 * C2523 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78813 +
           (((C3238 - C3237) * C26357 + (C3240 - C3239) * C78889) * C51693 +
            ((C78891 * C1738 - C162 * C1632) * C26357 +
             (C78891 * C1746 - C162 * C1648) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C11584 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C11585 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C11586 +
           (((C60852 - C60851) * C26357 + (C60854 - C60853) * C78889) * C51693 +
            ((C60855 - C60856) * C26357 + (C60857 - C60858) * C78889) *
                C51694) *
               C78858) *
              C78592 * C78798 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C11584 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C11585 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C11586 +
           (((C11662 - C11661) * C26357 + (C11664 - C11663) * C78889) * C51693 +
            ((C78891 * C10254 - C162 * C10196) * C26357 +
             (C78891 * C10258 - C162 * C10204) * C78889) *
                C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C4809 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C4810 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C4809 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C4810 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C26357 +
            (C51693 * C1851 - C51779 * C1646 + C51694 * C1852 -
             C51780 * C1648) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C11584 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C11585 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C11586 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C26357 +
            (C51779 * C10200 - C51693 * C10305 + C51780 * C10202 -
             C51694 * C10307) *
                C78889) *
               C78891 * C78858) *
              C78592 * C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C11584 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C11585 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C11586 +
           ((C51693 * C10302 - C51779 * C10193 + C51694 * C10304 -
             C51780 * C10196) *
                C26357 +
            (C51693 * C10306 - C51779 * C10198 + C51694 * C10308 -
             C51780 * C10204) *
                C78889) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C4809 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C4810 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C78813 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C78842) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C4809 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C4810 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C78813 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78813 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78592 * C2521 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78813 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78697) *
              C78592 * C2522 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78813 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78697) *
              C78592 * C2523 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C78813 +
           (((C54344 - C54343) * C162 + (C54346 - C54345) * C78891) * C51693 +
            ((C78889 * C1647 - C26357 * C1632) * C162 +
             (C78889 * C1958 - C26357 * C1950) * C78891) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C11584 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C11585 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C11586 +
           (((C60948 - C60947) * C162 + (C60950 - C60949) * C78891) * C51693 +
            ((C60951 - C60952) * C162 + (C60953 - C60954) * C78891) * C51694) *
               C78858) *
              C78592 * C78798 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C11584 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C11585 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
               C11586 +
           (((C62350 - C62349) * C162 + (C62352 - C62351) * C78891) * C51693 +
            ((C78889 * C10203 - C26357 * C10196) * C162 +
             (C78889 * C10358 - C26357 * C10354) * C78891) *
                C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C4809 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C4810 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C78813 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C78842) *
              C78798 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C4809 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C11109 * C78889 * C51694 + C55178 * C51693) * C78697) *
               C4810 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78813 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78592 * C2521 +
          ((C53154 * C51693 + C53155 * C51694) * C78697 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
              C78592 * C2522 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78813 -
           (C53157 * C51694 + C53156 * C51693) * C78697) *
              C78592 * C2523 +
          ((C54413 * C51693 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C78889 * C51694) *
               C78697 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C11584 -
           (C53165 * C51694 + C53164 * C51693) * C11585 +
           (C53165 * C51693 + C61012 * C51694) * C11586 -
           (C61013 * C51694 + C61012 * C51693) * C78858) *
              C78592 * C78798 +
          ((C53154 * C51693 + C53155 * C51694) * C11585 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C11584 -
           (C62419 * C51694 + C53155 * C51693) * C11586 +
           (C62419 * C51693 +
            (C162 * C10254 - C358 * C10196 - C162 * C10354 + C78891 * C10404) *
                C78889 * C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C4809 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C4810 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C4809 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C4810 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C162 +
            (C51693 * C2149 - C51779 * C1949 + C51694 * C2150 -
             C51780 * C1950) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C11584 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C11585 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C11586 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C162 +
            (C51779 * C10351 - C51693 * C10447 + C51780 * C10353 -
             C51694 * C10449) *
                C78891) *
               C78889 * C78858) *
              C78592 * C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C11584 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C11585 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C11586 +
           ((C51693 * C10302 - C51779 * C10193 + C51694 * C10304 -
             C51780 * C10196) *
                C162 +
            (C51693 * C10448 - C51779 * C10352 + C51694 * C10450 -
             C51780 * C10354) *
                C78891) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C4809 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C4810 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C78813 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C4809 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C4810 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C78813 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78813 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78813 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78813 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
               C78891 * C78813 +
           ((C54344 - C54343) * C51779 + (C54547 - C54546) * C51693 +
            (C78889 * C1647 - C26357 * C1632) * C51780 +
            (C78889 * C2248 - C26357 * C2240) * C51694) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C11584 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C11585 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
               C78891 * C11586 +
           ((C60948 - C60947) * C51779 + (C61102 - C61101) * C51693 +
            (C60951 - C60952) * C51780 + (C61103 - C61104) * C51694) *
               C78891 * C78858) *
              C78592 * C78798 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C11584 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C11585 +
           ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
            (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
               C78891 * C11586 +
           ((C62350 - C62349) * C51779 + (C62553 - C62552) * C51693 +
            (C78889 * C10203 - C26357 * C10196) * C51780 +
            (C78889 * C10500 - C26357 * C10496) * C51694) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C4809 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C4810 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C78813 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C4809 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C4810 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C78813 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78813 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78813 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C78813 +
           ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
            (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C78813 +
           ((C3238 - C3237) * C51779 + (C3660 - C3659) * C51693 +
            (C78891 * C1738 - C162 * C1632) * C51780 +
            (C78891 * C2330 - C162 * C2240) * C51694) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C11584 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C11585 +
           ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
            (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
               C78889 * C11586 +
           ((C60852 - C60851) * C51779 + (C61149 - C61148) * C51693 +
            (C60855 - C60856) * C51780 + (C61150 - C61151) * C51694) *
               C78889 * C78858) *
              C78592 * C78798 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C11584 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C11585 +
           ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
            (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
               C78889 * C11586 +
           ((C11662 - C11661) * C51779 + (C12084 - C12083) * C51693 +
            (C78891 * C10254 - C162 * C10196) * C51780 +
            (C78891 * C10546 - C162 * C10496) * C51694) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C4809 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C4810 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C78813 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C78842) *
              C78798 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C4809 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C4810 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78813 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78592 * C2521 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78697 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78813) *
              C78592 * C2522 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78813 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78697) *
              C78592 * C2523 +
          ((C51779 * C1843 - C52033 * C1631 - C51779 * C2239 + C51693 * C2419 +
            C51780 * C1844 - C52034 * C1632 - C51780 * C2240 + C51694 * C2420) *
               C78891 * C78889 * C78697 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C11584 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C11585 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C11586 -
           (C51780 * C10303 - C52034 * C10195 - C51780 * C10495 +
            C51694 * C10591 + C51779 * C10301 - C52033 * C10194 -
            C51779 * C10493 + C51693 * C10590) *
               C78891 * C78889 * C78858) *
              C78592 * C78798 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C11585 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C11584 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C11586 +
           (C51779 * C10302 - C52033 * C10193 - C51779 * C10494 +
            C51693 * C10589 + C51780 * C10304 - C52034 * C10196 -
            C51780 * C10496 + C51694 * C10592) *
               C78891 * C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78868 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C717 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78868 -
           ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78883 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78868 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 + C78889 * C1650) *
               C51694) *
              C78891 * C78610 * C78592 * C87 -
          ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 + C78889 * C1649) *
               C51694 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C51693) *
              C78891 * C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C51693 +
           (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 + C78889 * C1653) *
               C51694) *
              C78891 * C78610 * C78592 * C89 -
          ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 + C78889 * C1655) *
               C51694 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C51693) *
              C78891 * C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C51693 +
           (C26357 * C3165 - C26358 * C3164 - C26357 * C3166 + C78889 * C3167) *
               C51694) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C4809 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C4810 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C78880 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C4810 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C4809 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C4809 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C4810 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           C52812 * C51694) *
              C78891 * C78610 * C5449 -
          (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C5450 +
          (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C5451 -
          (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C5452 +
          (C31006 * C51693 + (C26357 * C33728 - C26358 * C33727 -
                              C26357 * C33729 + C78889 * C33730) *
                                 C51694) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C8885 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C8886 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78880 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C8886 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C8885 -
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C51694 +
            C52815 * C51693) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C8885 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C8886 +
           (C52817 * C51693 + (C26357 * C11589 - C26358 * C11588 -
                               C26357 * C11590 + C78889 * C11591) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C8885 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C8886 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78883 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C8886 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C8885 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
              C78868 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C8885 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C8886 +
           (C31493 * C51693 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C78891 * C1731 - C162 * C1626) * C26357 +
             (C78891 * C1739 - C162 * C1636) * C78889) *
                C51694) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C162 * C3833 - C78891 * C3947) * C26357 +
             (C162 * C3838 - C78891 * C3951) * C78889) *
                C51694) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78883 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78868 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78883 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78868 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C78891 * C1731 - C162 * C1626) * C26357 +
            (C78891 * C1739 - C162 * C1636) * C78889) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
           ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
           ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
           ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C26357 + (C191 - C190) * C78889) * C51693 +
           ((C78891 * C3234 - C162 * C3164) * C26357 +
            (C78891 * C3235 - C162 * C3166) * C78889) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C4809 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C4810 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C4809 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C4810 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) * C51694) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C26357 +
            (C162 * C731 - C78891 * C834) * C78889) *
               C51693 +
           ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) * C51694) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C26357 +
            (C78891 * C836 - C162 * C733) * C78889) *
               C51693 +
           ((C78891 * C6029 - C162 * C5932) * C26357 +
            (C78891 * C6035 - C162 * C5942) * C78889) *
               C51694) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C26357 +
            (C162 * C5462 - C78891 * C5517) * C78889) *
               C51693 +
           ((C162 * C8251 - C78891 * C8325) * C26357 +
            (C162 * C8254 - C78891 * C8327) * C78889) *
               C51694) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C26357 +
            (C78891 * C5519 - C162 * C5464) * C78889) *
               C51693 +
           ((C78891 * C33805 - C162 * C33727) * C26357 +
            (C78891 * C33806 - C162 * C33729) * C78889) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C8885 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C8886 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C8885 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C8886 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C8885 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C8886 +
           (((C1761 - C1760) * C26357 + (C1763 - C1762) * C78889) * C51693 +
            ((C78891 * C11658 - C162 * C11588) * C26357 +
             (C78891 * C11659 - C162 * C11590) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C8885 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C8886 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78883 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C8885 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C8886 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C162 * C12225 - C78891 * C12299) * C26357 +
             (C162 * C12228 - C78891 * C12301) * C78889) *
                C51694) *
               C78845) *
              C78868 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C8885 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C8886 +
           (((C56779 - C56778) * C26357 + (C56781 - C56780) * C78889) * C51693 +
            ((C78891 * C37658 - C162 * C37580) * C26357 +
             (C78891 * C37659 - C162 * C37582) * C78889) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C26357 +
           (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
               C78889) *
              C78891 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C26357 +
           (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
               C78889) *
              C78891 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C26357 +
           (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
               C78889) *
              C78891 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C26357 +
           (C51693 * C244 - C51779 * C111 + C51694 * C3307 - C51780 * C3166) *
               C78889) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C26357 +
           (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
               C78889) *
              C78891 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C26357 +
           (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
               C78889) *
              C78891 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C26357 +
           (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 - C51694 * C8397) *
               C78889) *
              C78891 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C26357 +
           (C51693 * C5569 - C51779 * C5464 + C51694 * C33874 -
            C51780 * C33729) *
               C78889) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C8885 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C8886 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C26357 +
            (C51693 * C1850 - C51779 * C1644 + C51694 * C11731 -
             C51780 * C11590) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78883 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C8885 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C8886 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C78845) *
              C78868 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C8885 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C8886 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C26357 +
            (C51693 * C6123 - C51779 * C5944 + C51694 * C37727 -
             C51780 * C37582) *
                C78889) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C78889 * C1635 - C26357 * C1626) * C162 +
             (C78889 * C1951 - C26357 * C1943) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C26357 * C1625 - C78889 * C1633) * C162 +
             (C26357 * C1944 - C78889 * C1952) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C78889 * C1641 - C26357 * C1629) * C162 +
             (C78889 * C1955 - C26357 * C1947) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C78889 * C1635 - C26357 * C1626) * C162 +
            (C78889 * C1951 - C26357 * C1943) * C78891) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C162 +
            (C26357 * C305 - C78889 * C311) * C78891) *
               C51693 +
           ((C26357 * C1625 - C78889 * C1633) * C162 +
            (C26357 * C1944 - C78889 * C1952) * C78891) *
               C51694) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C162 +
            (C78889 * C312 - C26357 * C306) * C78891) *
               C51693 +
           ((C78889 * C1641 - C26357 * C1629) * C162 +
            (C78889 * C1955 - C26357 * C1947) * C78891) *
               C51694) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C162 +
            (C26357 * C307 - C78889 * C313) * C78891) *
               C51693 +
           ((C26357 * C1631 - C78889 * C1645) * C162 +
            (C26357 * C1949 - C78889 * C1957) * C78891) *
               C51694) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C162 +
            (C78889 * C314 - C26357 * C308) * C78891) *
               C51693 +
           ((C78889 * C3165 - C26357 * C3164) * C162 +
            (C78889 * C3379 - C26357 * C3378) * C78891) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
              C78610 * C5449 +
          (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
           ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
              C78610 * C5450 +
          (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
           ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
              C78610 * C5451 +
          (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
           ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
              C78610 * C5452 +
          (((C31154 - C31153) * C162 + (C31156 - C31155) * C78891) * C51693 +
           ((C78889 * C33728 - C26357 * C33727) * C162 +
            (C78889 * C33946 - C26357 * C33945) * C78891) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C8885 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C8886 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C8885 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C8886 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C26357 * C10193 - C78889 * C10197) * C162 +
             (C26357 * C10352 - C78889 * C10356) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C8885 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C8886 +
           (((C53069 - C53068) * C162 + (C53071 - C53070) * C78891) * C51693 +
            ((C78889 * C11589 - C26357 * C11588) * C162 +
             (C78889 * C11803 - C26357 * C11802) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C8885 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C8886 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78883 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C8885 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C8886 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C78845) *
              C78868 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C8885 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C8886 +
           (((C31746 - C31745) * C162 + (C31748 - C31747) * C78891) * C51693 +
            ((C78889 * C37581 - C26357 * C37580) * C162 +
             (C78889 * C37799 - C26357 * C37798) * C78891) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C78889 * C51694) *
               C78610 * C78883 -
           ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C78889 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C717 +
          ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
               C78868 -
           (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 *
               C78883 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C718 +
          ((C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 *
               C78883 -
           (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
               C78868 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
               C78889 * C51694) *
              C78610 * C78592 * C87 -
          (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 * C78592 *
              C88 +
          (C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 * C78592 *
              C89 -
          (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 * C78592 *
              C90 +
          (C393 * C78889 * C51693 +
           (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
               C78889 * C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C4809 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78880 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C4810 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C4809 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C4809 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C4810 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           C53164 * C51694) *
              C78610 * C5449 -
          (C55183 * C51694 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
               C78889 * C51693) *
              C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
               C78889 * C51693 +
           (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
               C78889 * C51694) *
              C78610 * C5451 -
          ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
               C78889 * C51694 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C78889 * C51693) *
              C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) *
               C78889 * C51693 +
           (C162 * C33805 - C358 * C33727 - C162 * C33945 + C78891 * C34017) *
               C78889 * C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C8885 -
           (C53165 * C51694 + C53164 * C51693) * C8886 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78880 +
          ((C53154 * C51693 + C53155 * C51694) * C8886 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C8885 -
           (C11878 * C78889 * C51694 + C53155 * C51693) * C78845) *
              C78592 * C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C8885 -
           (C53157 * C51694 + C53156 * C51693) * C8886 +
           (C53157 * C51693 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C8885 -
           (C53165 * C51694 + C53164 * C51693) * C8886 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78883 +
          ((C55183 * C51693 + C57025 * C51694) * C8886 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C8885 -
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C78889 * C51694 +
            C57025 * C51693) *
               C78845) *
              C78868 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C8885 -
           (C57027 * C51694 + C57026 * C51693) * C8886 +
           (C57027 * C51693 +
            (C162 * C37658 - C358 * C37580 - C162 * C37798 + C78891 * C37870) *
                C78889 * C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C162 +
           (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
               C78891) *
              C78889 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C162 +
           (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
               C78891) *
              C78889 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C162 +
           (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
               C78891) *
              C78889 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C162 +
           (C51693 * C439 - C51779 * C308 + C51694 * C3520 - C51780 * C3378) *
               C78891) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C162 +
           (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 - C51694 * C4397) *
               C78891) *
              C78889 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C162 +
           (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 - C51780 * C6201) *
               C78891) *
              C78889 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C162 +
           (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 - C51694 * C8603) *
               C78891) *
              C78889 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C162 +
           (C51693 * C5711 - C51779 * C5615 + C51694 * C34084 -
            C51780 * C33945) *
               C78891) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C8885 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C8886 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C162 +
            (C51693 * C2148 - C51779 * C1948 + C51694 * C11944 -
             C51780 * C11802) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78883 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C8885 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C8886 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C78845) *
              C78868 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C8885 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C8886 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C162 +
            (C51693 * C6369 - C51779 * C6203 + C51694 * C37937 -
             C51780 * C37798) *
                C78891) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[64] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C78889 * C1635 - C26357 * C1626) * C51780 +
                      (C78889 * C2241 - C26357 * C2233) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C26357 * C1625 - C78889 * C1633) * C51780 +
                      (C26357 * C2234 - C78889 * C2242) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C78889 * C1641 - C26357 * C1629) * C51780 +
                      (C78889 * C2245 - C26357 * C2237) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C78889 * C1635 - C26357 * C1626) * C51780 +
                     (C78889 * C2241 - C26357 * C2233) * C51694) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C51779 +
                     (C26357 * C492 - C78889 * C498) * C51693 +
                     (C26357 * C1625 - C78889 * C1633) * C51780 +
                     (C26357 * C2234 - C78889 * C2242) * C51694) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C51779 +
                     (C78889 * C499 - C26357 * C493) * C51693 +
                     (C78889 * C1641 - C26357 * C1629) * C51780 +
                     (C78889 * C2245 - C26357 * C2237) * C51694) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C51779 +
                     (C26357 * C494 - C78889 * C500) * C51693 +
                     (C26357 * C1631 - C78889 * C1645) * C51780 +
                     (C26357 * C2239 - C78889 * C2247) * C51694) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C51779 +
                     (C78889 * C501 - C26357 * C495) * C51693 +
                     (C78889 * C3165 - C26357 * C3164) * C51780 +
                     (C78889 * C3590 - C26357 * C3589) * C51694) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                        C78891 * C78610 * C5449 +
                    ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                     (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                        C78891 * C78610 * C5450 +
                    ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                     (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                        C78891 * C78610 * C5451 +
                    ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
                     (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
                        C78891 * C78610 * C5452 +
                    ((C31154 - C31153) * C51779 + (C31294 - C31293) * C51693 +
                     (C78889 * C33728 - C26357 * C33727) * C51780 +
                     (C78889 * C34154 - C26357 * C34153) * C51694) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C8885 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C8886 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C78889 * C10199 - C26357 * C10194) * C51780 +
                      (C78889 * C10497 - C26357 * C10493) * C51694) *
                         C78891 * C78845) *
                        C78592 * C78880 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C8885 +
                     ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
                      (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                         C78891 * C8886 +
                     ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
                      (C26357 * C10193 - C78889 * C10197) * C51780 +
                      (C26357 * C10494 - C78889 * C10498) * C51694) *
                         C78891 * C78845) *
                        C78592 * C78864 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C8885 +
                     ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
                      (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                         C78891 * C8886 +
                     ((C53069 - C53068) * C51779 + (C53325 - C53324) * C51693 +
                      (C78889 * C11589 - C26357 * C11588) * C51780 +
                      (C78889 * C12014 - C26357 * C12013) * C51694) *
                         C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C8885 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C8886 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C78889 * C10199 - C26357 * C10194) * C51780 +
                      (C78889 * C10497 - C26357 * C10493) * C51694) *
                         C78891 * C78845) *
                        C78883 +
                    (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C8885 +
                     ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
                      (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                         C78891 * C8886 +
                     ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
                      (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                         C78891 * C78845) *
                        C78868 +
                    (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C8885 +
                     ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
                      (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                         C78891 * C8886 +
                     ((C31746 - C31745) * C51779 + (C31986 - C31985) * C51693 +
                      (C78889 * C37581 - C26357 * C37580) * C51780 +
                      (C78889 * C38007 - C26357 * C38006) * C51694) *
                         C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezy[64] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C78891 * C1731 - C162 * C1626) * C51780 +
                      (C78891 * C2323 - C162 * C2233) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C162 * C3833 - C78891 * C3947) * C51780 +
                      (C162 * C4503 - C78891 * C4609) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C78891 * C1731 - C162 * C1626) * C51780 +
                     (C78891 * C2323 - C162 * C2233) * C51694) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                     (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                     (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                     (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C51779 + (C559 - C558) * C51693 +
                     (C78891 * C3234 - C162 * C3164) * C51780 +
                     (C78891 * C3657 - C162 * C3589) * C51694) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                        C78889 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C51779 +
                     (C162 * C1328 - C78891 * C1418) * C51693 +
                     (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                        C78889 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C51779 +
                     (C78891 * C1420 - C162 * C1330) * C51693 +
                     (C78891 * C6029 - C162 * C5932) * C51780 +
                     (C78891 * C6533 - C162 * C6447) * C51694) *
                        C78889 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C51779 +
                     (C162 * C5755 - C78891 * C5805) * C51693 +
                     (C162 * C8251 - C78891 * C8325) * C51780 +
                     (C162 * C8671 - C78891 * C8741) * C51694) *
                        C78889 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C51779 +
                     (C78891 * C5807 - C162 * C5757) * C51693 +
                     (C78891 * C33805 - C162 * C33727) * C51780 +
                     (C78891 * C34223 - C162 * C34153) * C51694) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C8885 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C8886 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C8885 +
                     ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
                      (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                         C78889 * C8886 +
                     ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
                      (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C8885 +
                     ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
                      (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                         C78889 * C8886 +
                     ((C1761 - C1760) * C51779 + (C2339 - C2338) * C51693 +
                      (C78891 * C11658 - C162 * C11588) * C51780 +
                      (C78891 * C12081 - C162 * C12013) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C8885 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C8886 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78883 +
                    (((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C8885 +
                     ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
                      (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                         C78889 * C8886 +
                     ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
                      (C162 * C12225 - C78891 * C12299) * C51780 +
                      (C162 * C12645 - C78891 * C12715) * C51694) *
                         C78889 * C78845) *
                        C78868 +
                    (((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C8885 +
                     ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
                      (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                         C78889 * C8886 +
                     ((C56779 - C56778) * C51779 + (C57255 - C57254) * C51693 +
                      (C78891 * C37658 - C162 * C37580) * C51780 +
                      (C78891 * C38076 - C162 * C38006) * C51694) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezz[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C717 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78868 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C718 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C78592 * C87 -
          (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
           C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
              C78891 * C78889 * C78610 * C78592 * C88 +
          (C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
           C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
              C78891 * C78889 * C78610 * C78592 * C89 -
          (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
           C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
              C78891 * C78889 * C78610 * C78592 * C90 +
          (C51779 * C238 - C52033 * C100 - C51779 * C495 + C51693 * C606 +
           C51780 * C3306 - C52034 * C3164 - C51780 * C3589 + C51694 * C3726) *
              C78891 * C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C78880 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C4810 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C5449 -
          (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
           C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
              C78891 * C78889 * C78610 * C5450 +
          (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
           C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
              C78891 * C78889 * C78610 * C5451 -
          (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
           C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
              C78891 * C78889 * C78610 * C5452 +
          (C51779 * C5565 - C52033 * C5457 - C51779 * C5757 + C51693 * C5853 +
           C51780 * C33873 - C52034 * C33727 - C51780 * C34153 +
           C51694 * C34290) *
              C78891 * C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C8885 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C8886 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78592 * C78880 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C8886 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C8885 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C78845) *
              C78592 * C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C8885 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C8886 +
           (C51779 * C1842 - C52033 * C1630 - C51779 * C2238 + C51693 * C2418 +
            C51780 * C11730 - C52034 * C11588 - C51780 * C12013 +
            C51694 * C12150) *
               C78891 * C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C8885 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C8886 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78883 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C8886 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C8885 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C78845) *
              C78868 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C8885 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C8886 +
           (C51779 * C6117 - C52033 * C5933 - C51779 * C6449 + C51693 * C6615 +
            C51780 * C37726 - C52034 * C37580 - C51780 * C38006 +
            C51694 * C38143) *
               C78891 * C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78655) *
              C78569 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C78812 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C17369 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78569 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78578 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C17369 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C17369 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78569 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C78578 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C17369 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C17369 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78812 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78655) *
              C78569 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C78812 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C78578 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C17369 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C78812 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78569 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78578 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C17369 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C17369 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezy[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78569 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78578 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C17369 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C17369 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezz[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78655) *
              C78569 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C78812 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C78578 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C17369 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C17369) *
               C78655) *
              C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78693 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78700 +
            (C52813 * C51693 + C60805 * C51694) * C78891 * C20337) *
               C78812 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78700 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78693 -
            (C37591 * C51694 + C31491 * C51693) * C78891 * C20337) *
               C78655) *
              C13455 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78700 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78693 -
            (C62150 * C51694 + C52815 * C51693) * C78891 * C20337) *
               C78812 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78693 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78700 +
            (C36129 * C51693 + (C26357 * C12229 - C26358 * C12226 -
                                C26357 * C12230 + C78889 * C12232) *
                                   C51694) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78693 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78700 +
            (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) *
                 C51693 +
             ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                 C51694) *
                C20337) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78693 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78700 +
            (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) *
                 C51693 +
             ((C62818 - C62819) * C26357 + (C62820 - C62821) * C78889) *
                 C51694) *
                C20337) *
               C78655) *
              C13455 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78693 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78700 +
            (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
             ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                 C51694) *
                C20337) *
               C78812 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78693 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78700 +
            (((C10797 - C10796) * C26357 + (C10799 - C10798) * C78889) *
                 C51693 +
             ((C78891 * C12300 - C162 * C12226) * C26357 +
              (C78891 * C12302 - C162 * C12230) * C78889) *
                 C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78693 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78700 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C26357 +
             (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
              C51780 * C10200) *
                 C78889) *
                C78891 * C20337) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78693 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78700 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C26357 +
             (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
              C51694 * C12371) *
                 C78889) *
                C78891 * C20337) *
               C78655) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78693 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78700 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C26357 +
             (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
              C51694 * C10306) *
                 C78889) *
                C78891 * C20337) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78693 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78700 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C26357 +
             (C51693 * C6120 - C51779 * C5936 + C51694 * C12372 -
              C51780 * C12230) *
                 C78889) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78693 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78700 +
            (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
             ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
                C20337) *
               C78812 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78693 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78700 +
            (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
             ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
                C20337) *
               C78655) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78693 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78700 +
            (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
             ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
                C20337) *
               C78812 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78693 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78700 +
            (((C36426 - C36425) * C162 + (C36428 - C36427) * C78891) * C51693 +
             ((C78889 * C12229 - C26357 * C12226) * C162 +
              (C78889 * C12442 - C26357 * C12440) * C78891) *
                 C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78693 -
            (C53165 * C51694 + C53164 * C51693) * C78700 +
            (C53165 * C51693 + C61012 * C51694) * C20337) *
               C78812 +
           ((C55183 * C51693 + C57025 * C51694) * C78700 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78693 -
            (C63027 * C51694 + C57025 * C51693) * C20337) *
               C78655) *
              C13455 +
          (((C53154 * C51693 + C53155 * C51694) * C78700 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78693 -
            (C62419 * C51694 + C53155 * C51693) * C20337) *
               C78812 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78693 -
            (C61685 * C51694 + C55178 * C51693) * C78700 +
            (C61685 * C51693 +
             (C162 * C12300 - C358 * C12226 - C162 * C12440 + C78891 * C12510) *
                 C78889 * C51694) *
                C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78693 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78700 +
            ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
              C51780 * C10194) *
                 C162 +
             (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
              C51780 * C10351) *
                 C78891) *
                C78889 * C20337) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78693 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78700 +
            ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
              C51694 * C12369) *
                 C162 +
             (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
              C51694 * C12577) *
                 C78891) *
                C78889 * C20337) *
               C78655) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78693 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78700 +
            ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
              C51694 * C10302) *
                 C162 +
             (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
              C51694 * C10448) *
                 C78891) *
                C78889 * C20337) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78693 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78700 +
            ((C51693 * C6114 - C51779 * C5929 + C51694 * C12370 -
              C51780 * C12226) *
                 C162 +
             (C51693 * C6366 - C51779 * C6200 + C51694 * C12578 -
              C51780 * C12440) *
                 C78891) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezx[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78693 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78700 +
            ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
             (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                C78891 * C20337) *
               C78812 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78693 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78700 +
            ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
             (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                C78891 * C20337) *
               C78655) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78693 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78700 +
            ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
             (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
                C78891 * C20337) *
               C78812 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78693 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78700 +
            ((C36426 - C36425) * C51779 + (C36724 - C36723) * C51693 +
             (C78889 * C12229 - C26357 * C12226) * C51780 +
             (C78889 * C12648 - C26357 * C12646) * C51694) *
                C78891 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezy[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78693 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78700 +
            ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
             (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                C78889 * C20337) *
               C78812 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78693 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78700 +
            ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
             (C62818 - C62819) * C51780 + (C63226 - C63227) * C51694) *
                C78889 * C20337) *
               C78655) *
              C13455 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78693 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78700 +
            ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
             (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                C78889 * C20337) *
               C78812 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78693 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78700 +
            ((C10797 - C10796) * C51779 + (C11411 - C11410) * C51693 +
             (C78891 * C12300 - C162 * C12226) * C51780 +
             (C78891 * C12716 - C162 * C12646) * C51694) *
                C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eezz[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78693 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78700 +
            (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
             C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
             C51694 * C10590) *
                C78891 * C78889 * C20337) *
               C78812 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78700 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78693 -
            (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
             C51694 * C12783 + C51779 * C6113 - C52033 * C5930 -
             C51779 * C6445 + C51693 * C6612) *
                C78891 * C78889 * C20337) *
               C78655) *
              C13455 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78700 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78693 -
            (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
             C51694 * C10589 + C51779 * C1840 - C52033 * C1628 -
             C51779 * C2236 + C51693 * C2416) *
                C78891 * C78889 * C20337) *
               C78812 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78693 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78700 +
            (C51779 * C6114 - C52033 * C5929 - C51779 * C6446 + C51693 * C6611 +
             C51780 * C12370 - C52034 * C12226 - C51780 * C12646 +
             C51694 * C12784) *
                C78891 * C78889 * C20337) *
               C78655) *
              C78575)) /
        (p * q * std::sqrt(p + q));
    d2eexx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78883 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78868 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C17369 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C78842) *
              C13455 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C78883 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78868 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C17369 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78592 * C78892 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C17369) *
              C78592 * C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C17369 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
              C78592 * C78866 +
          ((C54144 * C51693 + (C26357 * C1647 - C26358 * C1632 -
                               C26357 * C1648 + C78889 * C1656) *
                                  C51694) *
               C78891 * C78697 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78894 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78888 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C78876 -
           (C60806 * C51694 + C60805 * C51693) * C78891 * C78858) *
              C78592 * C13455 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78888 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78894 -
           (C62150 * C51694 + C52815 * C51693) * C78891 * C78876 +
           (C62150 * C51693 + (C26357 * C10203 - C26358 * C10196 -
                               C26357 * C10204 + C78889 * C10208) *
                                  C51694) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78883 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78868 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C17369 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C13455 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78883 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78868 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C17369 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C17369 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78892 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C17369 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78697) *
              C78592 * C78882 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C17369 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78697) *
              C78592 * C78866 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C17369 +
           (((C3238 - C3237) * C26357 + (C3240 - C3239) * C78889) * C51693 +
            ((C78891 * C1738 - C162 * C1632) * C26357 +
             (C78891 * C1746 - C162 * C1648) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78894 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78888 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C78876 +
           (((C60852 - C60851) * C26357 + (C60854 - C60853) * C78889) * C51693 +
            ((C60855 - C60856) * C26357 + (C60857 - C60858) * C78889) *
                C51694) *
               C78858) *
              C78592 * C13455 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78894 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78888 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C78876 +
           (((C11662 - C11661) * C26357 + (C11664 - C11663) * C78889) * C51693 +
            ((C78891 * C10254 - C162 * C10196) * C26357 +
             (C78891 * C10258 - C162 * C10204) * C78889) *
                C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78883 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78868 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78883 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78868 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C26357 +
            (C51693 * C1851 - C51779 * C1646 + C51694 * C1852 -
             C51780 * C1648) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78894 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78888 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78876 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C26357 +
            (C51779 * C10200 - C51693 * C10305 + C51780 * C10202 -
             C51694 * C10307) *
                C78889) *
               C78891 * C78858) *
              C78592 * C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78894 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78888 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C78876 +
           ((C51693 * C10302 - C51779 * C10193 + C51694 * C10304 -
             C51780 * C10196) *
                C26357 +
            (C51693 * C10306 - C51779 * C10198 + C51694 * C10308 -
             C51780 * C10204) *
                C78889) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78883 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78868 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C17369 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C78842) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78883 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78868 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C17369 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C17369 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78592 * C78892 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C17369 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78697) *
              C78592 * C78882 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C17369 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78697) *
              C78592 * C78866 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C17369 +
           (((C54344 - C54343) * C162 + (C54346 - C54345) * C78891) * C51693 +
            ((C78889 * C1647 - C26357 * C1632) * C162 +
             (C78889 * C1958 - C26357 * C1950) * C78891) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78894 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78888 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C78876 +
           (((C60948 - C60947) * C162 + (C60950 - C60949) * C78891) * C51693 +
            ((C60951 - C60952) * C162 + (C60953 - C60954) * C78891) * C51694) *
               C78858) *
              C78592 * C13455 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78894 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78888 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
               C78876 +
           (((C62350 - C62349) * C162 + (C62352 - C62351) * C78891) * C51693 +
            ((C78889 * C10203 - C26357 * C10196) * C162 +
             (C78889 * C10358 - C26357 * C10354) * C78891) *
                C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78883 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78868 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C17369 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C78842) *
              C13455 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C78883 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78868 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C17369 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78592 * C78892 +
          ((C53154 * C51693 + C53155 * C51694) * C78697 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
              C78592 * C78882 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C17369 -
           (C53157 * C51694 + C53156 * C51693) * C78697) *
              C78592 * C78866 +
          ((C54413 * C51693 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C78889 * C51694) *
               C78697 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78894 -
           (C53165 * C51694 + C53164 * C51693) * C78888 +
           (C53165 * C51693 + C61012 * C51694) * C78876 -
           (C61013 * C51694 + C61012 * C51693) * C78858) *
              C78592 * C13455 +
          ((C53154 * C51693 + C53155 * C51694) * C78888 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78894 -
           (C62419 * C51694 + C53155 * C51693) * C78876 +
           (C62419 * C51693 +
            (C162 * C10254 - C358 * C10196 - C162 * C10354 + C78891 * C10404) *
                C78889 * C51694) *
               C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78883 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78868 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78883 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78868 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C162 +
            (C51693 * C2149 - C51779 * C1949 + C51694 * C2150 -
             C51780 * C1950) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78894 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78888 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78876 +
           ((C51779 * C10194 - C51693 * C10301 + C51780 * C10195 -
             C51694 * C10303) *
                C162 +
            (C51779 * C10351 - C51693 * C10447 + C51780 * C10353 -
             C51694 * C10449) *
                C78891) *
               C78889 * C78858) *
              C78592 * C13455 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78894 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78888 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C78876 +
           ((C51693 * C10302 - C51779 * C10193 + C51694 * C10304 -
             C51780 * C10196) *
                C162 +
            (C51693 * C10448 - C51779 * C10352 + C51694 * C10450 -
             C51780 * C10354) *
                C78891) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78883 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78868 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C17369 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78883 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78868 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C17369 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C17369 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C17369 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C17369 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
               C78891 * C17369 +
           ((C54344 - C54343) * C51779 + (C54547 - C54546) * C51693 +
            (C78889 * C1647 - C26357 * C1632) * C51780 +
            (C78889 * C2248 - C26357 * C2240) * C51694) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78894 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78888 +
           ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
            (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
               C78891 * C78876 +
           ((C60948 - C60947) * C51779 + (C61102 - C61101) * C51693 +
            (C60951 - C60952) * C51780 + (C61103 - C61104) * C51694) *
               C78891 * C78858) *
              C78592 * C13455 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78894 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78888 +
           ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
            (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
               C78891 * C78876 +
           ((C62350 - C62349) * C51779 + (C62553 - C62552) * C51693 +
            (C78889 * C10203 - C26357 * C10196) * C51780 +
            (C78889 * C10500 - C26357 * C10496) * C51694) *
               C78891 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78883 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78868 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C17369 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78883 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78868 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C17369 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C17369 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C17369 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C17369 +
           ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
            (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C17369 +
           ((C3238 - C3237) * C51779 + (C3660 - C3659) * C51693 +
            (C78891 * C1738 - C162 * C1632) * C51780 +
            (C78891 * C2330 - C162 * C2240) * C51694) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78894 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78888 +
           ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
            (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
               C78889 * C78876 +
           ((C60852 - C60851) * C51779 + (C61149 - C61148) * C51693 +
            (C60855 - C60856) * C51780 + (C61150 - C61151) * C51694) *
               C78889 * C78858) *
              C78592 * C13455 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78894 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C78888 +
           ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
            (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
               C78889 * C78876 +
           ((C11662 - C11661) * C51779 + (C12084 - C12083) * C51693 +
            (C78891 * C10254 - C162 * C10196) * C51780 +
            (C78891 * C10546 - C162 * C10496) * C51694) *
               C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78883 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78868 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C17369 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C78842) *
              C13455 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C78883 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78868 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C17369 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78592 * C78892 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78697 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C17369) *
              C78592 * C78882 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C17369 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78697) *
              C78592 * C78866 +
          ((C51779 * C1843 - C52033 * C1631 - C51779 * C2239 + C51693 * C2419 +
            C51780 * C1844 - C52034 * C1632 - C51780 * C2240 + C51694 * C2420) *
               C78891 * C78889 * C78697 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78894 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78888 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78876 -
           (C51780 * C10303 - C52034 * C10195 - C51780 * C10495 +
            C51694 * C10591 + C51779 * C10301 - C52033 * C10194 -
            C51779 * C10493 + C51693 * C10590) *
               C78891 * C78889 * C78858) *
              C78592 * C13455 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78888 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78894 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C78876 +
           (C51779 * C10302 - C52033 * C10193 - C51779 * C10494 +
            C51693 * C10589 + C51780 * C10304 - C52034 * C10196 -
            C51780 * C10496 + C51694 * C10592) *
               C78891 * C78889 * C78858) *
              C78592 * C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78693 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78700 +
           (C52813 * C51693 + C60805 * C51694) * C78891 * C20337) *
              C78592 * C78569 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78700 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78693 -
           (C62150 * C51694 + C52815 * C51693) * C78891 * C20337) *
              C78592 * C78578 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78693 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78700 +
           (C52817 * C51693 + (C26357 * C11589 - C26358 * C11588 -
                               C26357 * C11590 + C78889 * C11591) *
                                  C51694) *
               C78891 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexy[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78693 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78700 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C60851 - C60852) * C26357 + (C60853 - C60854) * C78889) *
                C51694) *
               C20337) *
              C78592 * C78569 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78693 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78700 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C20337) *
              C78592 * C78578 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78693 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78700 +
           (((C1761 - C1760) * C26357 + (C1763 - C1762) * C78889) * C51693 +
            ((C78891 * C11658 - C162 * C11588) * C26357 +
             (C78891 * C11659 - C162 * C11590) * C78889) *
                C51694) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78693 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78700 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C20337) *
              C78592 * C78569 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78693 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78700 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C20337) *
              C78592 * C78578 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78693 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78700 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C26357 +
            (C51693 * C1850 - C51779 * C1644 + C51694 * C11731 -
             C51780 * C11590) *
                C78889) *
               C78891 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78693 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78700 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C60947 - C60948) * C162 + (C60949 - C60950) * C78891) * C51694) *
               C20337) *
              C78592 * C78569 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78693 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78700 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C62349 - C62350) * C162 + (C62351 - C62352) * C78891) * C51694) *
               C20337) *
              C78592 * C78578 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78693 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78700 +
           (((C53069 - C53068) * C162 + (C53071 - C53070) * C78891) * C51693 +
            ((C78889 * C11589 - C26357 * C11588) * C162 +
             (C78889 * C11803 - C26357 * C11802) * C78891) *
                C51694) *
               C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) *
                          C78889 * C51693 +
                      C53164 * C51694) *
                         C78693 -
                     (C53165 * C51694 + C53164 * C51693) * C78700 +
                     (C53165 * C51693 + C61012 * C51694) * C20337) *
                        C78592 * C78569 +
                    ((C53154 * C51693 + C53155 * C51694) * C78700 -
                     (C53154 * C51694 + C390 * C78889 * C51693) * C78693 -
                     (C62419 * C51694 + C53155 * C51693) * C20337) *
                        C78592 * C78578 +
                    ((C391 * C78889 * C51693 + C53156 * C51694) * C78693 -
                     (C53157 * C51694 + C53156 * C51693) * C78700 +
                     (C53157 * C51693 + (C162 * C11658 - C358 * C11588 -
                                         C162 * C11802 + C78891 * C11870) *
                                            C78889 * C51694) *
                         C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eeyz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78693 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78700 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C20337) *
              C78592 * C78569 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78693 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78700 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C20337) *
              C78592 * C78578 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78693 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78700 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C162 +
            (C51693 * C2148 - C51779 * C1948 + C51694 * C11944 -
             C51780 * C11802) *
                C78891) *
               C78889 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eezx[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78693 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C78700 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C60947 - C60948) * C51780 + (C61101 - C61102) * C51694) *
                         C78891 * C20337) *
                        C78592 * C78569 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78693 +
                     ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
                      (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                         C78891 * C78700 +
                     ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
                      (C62349 - C62350) * C51780 + (C62552 - C62553) * C51694) *
                         C78891 * C20337) *
                        C78592 * C78578 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78693 +
                     ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
                      (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                         C78891 * C78700 +
                     ((C53069 - C53068) * C51779 + (C53325 - C53324) * C51693 +
                      (C78889 * C11589 - C26357 * C11588) * C51780 +
                      (C78889 * C12014 - C26357 * C12013) * C51694) *
                         C78891 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[68] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78693 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78700 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C60851 - C60852) * C51780 + (C61148 - C61149) * C51694) *
                         C78889 * C20337) *
                        C78592 * C78569 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78693 +
                     ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
                      (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                         C78889 * C78700 +
                     ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
                      (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                         C78889 * C20337) *
                        C78592 * C78578 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78693 +
                     ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
                      (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                         C78889 * C78700 +
                     ((C1761 - C1760) * C51779 + (C2339 - C2338) * C51693 +
                      (C78891 * C11658 - C162 * C11588) * C51780 +
                      (C78891 * C12081 - C162 * C12013) * C51694) *
                         C78889 * C20337) *
                        C78592 * C14946)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78693 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78700 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C20337) *
              C78592 * C78569 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78700 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78693 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C20337) *
              C78592 * C78578 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78693 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78700 +
           (C51779 * C1842 - C52033 * C1630 - C51779 * C2238 + C51693 * C2418 +
            C51780 * C11730 - C52034 * C11588 - C51780 * C12013 +
            C51694 * C12150) *
               C78891 * C78889 * C20337) *
              C78592 * C14946)) /
        (p * q * std::sqrt(p + q));
    d2eexx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C17369 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78592 * C78892 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C17369) *
              C78592 * C78882 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C17369 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
              C78592 * C78866 +
          ((C54144 * C51693 + (C26357 * C1647 - C26358 * C1632 -
                               C26357 * C1648 + C78889 * C1656) *
                                  C51694) *
               C78891 * C78697 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C17369 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78883 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C17369) *
               C78868 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C17369 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C78842) *
              C13455 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C17369) *
               C78883 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C17369 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78868 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C17369 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78892 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C17369 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78697) *
              C78592 * C78882 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C17369 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78697) *
              C78592 * C78866 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C17369 +
           (((C3238 - C3237) * C26357 + (C3240 - C3239) * C78889) * C51693 +
            ((C78891 * C1738 - C162 * C1632) * C26357 +
             (C78891 * C1746 - C162 * C1648) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C17369 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78883 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C17369 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C78868 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C17369 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C13455 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C17369 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78883 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C17369 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78868 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C17369 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C17369 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C17369 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C26357 +
            (C51693 * C1851 - C51779 * C1646 + C51694 * C1852 -
             C51780 * C1648) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78883 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78868 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78883 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78868 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C17369 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78592 * C78892 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C17369 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78697) *
              C78592 * C78882 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C17369 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78697) *
              C78592 * C78866 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C17369 +
           (((C54344 - C54343) * C162 + (C54346 - C54345) * C78891) * C51693 +
            ((C78889 * C1647 - C26357 * C1632) * C162 +
             (C78889 * C1958 - C26357 * C1950) * C78891) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C17369 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78883 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C17369 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78868 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C17369 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C78842) *
              C13455 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C17369 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78883 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C17369 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78868 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C17369 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C17369 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78592 * C78892 +
          ((C53154 * C51693 + C53155 * C51694) * C78697 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
              C78592 * C78882 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C17369 -
           (C53157 * C51694 + C53156 * C51693) * C78697) *
              C78592 * C78866 +
          ((C54413 * C51693 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C78889 * C51694) *
               C78697 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C17369 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78883 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C17369) *
               C78868 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C17369 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C78842) *
              C13455 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C17369) *
               C78883 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C17369 -
            (C61685 * C51694 + C55178 * C51693) * C78697) *
               C78868 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C17369 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C17369 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C162 +
            (C51693 * C2149 - C51779 * C1949 + C51694 * C2150 -
             C51780 * C1950) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78883 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78868 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78883 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C17369 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78868 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C17369 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C17369 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78592 * C78892 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C17369 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78697) *
              C78592 * C78882 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C17369 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C78697) *
              C78592 * C78866 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
               C78891 * C17369 +
           ((C54344 - C54343) * C51779 + (C54547 - C54546) * C51693 +
            (C78889 * C1647 - C26357 * C1632) * C51780 +
            (C78889 * C2248 - C26357 * C2240) * C51694) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C17369 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78883 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C17369 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78868 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C17369 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C78842) *
              C13455 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C17369 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78883 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C17369 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78868 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C17369 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C17369 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78592 * C78892 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C17369 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C78697) *
              C78592 * C78882 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C17369 +
           ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
            (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
               C78889 * C78697) *
              C78592 * C78866 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C17369 +
           ((C3238 - C3237) * C51779 + (C3660 - C3659) * C51693 +
            (C78891 * C1738 - C162 * C1632) * C51780 +
            (C78891 * C2330 - C162 * C2240) * C51694) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C17369 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78883 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C17369 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C78868 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C17369 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C78842) *
              C13455 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C17369 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78883 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C17369 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78868 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C17369 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C17369 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78592 * C78892 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78697 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C17369) *
              C78592 * C78882 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C17369 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78697) *
              C78592 * C78866 +
          ((C51779 * C1843 - C52033 * C1631 - C51779 * C2239 + C51693 * C2419 +
            C51780 * C1844 - C52034 * C1632 - C51780 * C2240 + C51694 * C2420) *
               C78891 * C78889 * C78697 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C17369) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C17369 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78883 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C17369) *
               C78868 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C17369 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C78842) *
              C13455 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C17369) *
               C78883 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C17369 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78868 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C17369) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C78812 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78655) *
              C2521 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78655 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78812) *
              C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C78812 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78655) *
              C2523 +
          ((C28214 * C51693 + (C26357 * C3843 - C26358 * C3836 -
                               C26357 * C3844 + C78889 * C3848) *
                                  C51694) *
               C78891 * C78610 * C78655 -
           ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 +
             C78889 * C1655) *
                C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C6683 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C6684 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C6685 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C78852) *
              C78798 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C6684 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C6683 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C6685 +
           (C32230 * C51693 + (C26357 * C8255 - C26358 * C8252 -
                               C26357 * C8256 + C78889 * C8258) *
                                  C51694) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C78812 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C162 * C3833 - C78891 * C3947) * C26357 +
             (C162 * C3838 - C78891 * C3951) * C78889) *
                C51694) *
               C78610 * C78655) *
              C2521 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78812 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78655) *
              C2522 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78812 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78655) *
              C2523 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78610 * C78812 +
           (((C2599 - C2598) * C26357 + (C2601 - C2600) * C78889) * C51693 +
            ((C78891 * C3950 - C162 * C3836) * C26357 +
             (C78891 * C3954 - C162 * C3844) * C78889) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C6683 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C6684 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78610 * C6685 +
           (((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C162 * C8251 - C78891 * C8325) * C26357 +
             (C162 * C8254 - C78891 * C8327) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78798 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C6683 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C6684 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C6685 +
           (((C6763 - C6762) * C26357 + (C6765 - C6764) * C78889) * C51693 +
            ((C78891 * C8326 - C162 * C8252) * C26357 +
             (C78891 * C8328 - C162 * C8256) * C78889) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78655) *
              C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78610 * C78812 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C26357 +
            (C51693 * C946 - C51779 * C741 + C51694 * C4068 - C51780 * C3844) *
                C78889) *
               C78891 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C6683 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C6684 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C6685 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C6683 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C6684 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C6685 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C26357 +
            (C51693 * C5568 - C51779 * C5460 + C51694 * C8398 -
             C51780 * C8256) *
                C78889) *
               C78891 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78655) *
              C2521 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78655) *
              C2522 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C78812 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78655) *
              C2523 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C26357 * C1631 - C78889 * C1645) * C162 +
             (C26357 * C1949 - C78889 * C1957) * C78891) *
                C51694) *
               C78610 * C78812 +
           (((C28415 - C28414) * C162 + (C28417 - C28416) * C78891) * C51693 +
            ((C78889 * C3843 - C26357 * C3836) * C162 +
             (C78889 * C4182 - C26357 * C4178) * C78891) *
                C51694) *
               C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C6683 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C6684 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C6685 +
           (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78610 * C78852) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C6683 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C6684 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C6685 +
           (((C32431 - C32430) * C162 + (C32433 - C32432) * C78891) * C51693 +
            ((C78889 * C8255 - C26357 * C8252) * C162 +
             (C78889 * C8468 - C26357 * C8466) * C78891) *
                C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C78812 -
           ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C78889 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78655) *
              C2521 +
          ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
               C78655 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C78812) *
              C2522 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C78812 -
           (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
               C78655) *
              C2523 +
          ((C2815 * C78889 * C51693 +
            (C162 * C3950 - C358 * C3836 - C162 * C4178 + C78891 * C4284) *
                C78889 * C51694) *
               C78610 * C78655 -
           (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 *
               C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C6683 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C6684 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78610 * C6685 -
           ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
                C78889 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78610 * C78852) *
              C78798 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C6684 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C6683 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C6685 +
           (C6979 * C78889 * C51693 +
            (C162 * C8326 - C358 * C8252 - C162 * C8466 + C78891 * C8536) *
                C78889 * C51694) *
               C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78655) *
              C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78610 * C78812 +
           ((C51693 * C938 - C51779 * C726 + C51694 * C4064 - C51780 * C3836) *
                C162 +
            (C51693 * C1244 - C51779 * C1044 + C51694 * C4400 -
             C51780 * C4178) *
                C78891) *
               C78889 * C78610 * C78655) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C6683 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C6684 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C6685 +
           ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78798 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C6683 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C6684 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C6685 +
           ((C51693 * C5564 - C51779 * C5455 + C51694 * C8396 -
             C51780 * C8252) *
                C162 +
            (C51693 * C5710 - C51779 * C5614 + C51694 * C8604 -
             C51780 * C8466) *
                C78891) *
               C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C78812 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78655) *
                        C2521 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C78812 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78655) *
                        C2522 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C78812 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78655) *
                        C2523 +
                    (((C26357 * C99 - C78889 * C108) * C51779 +
                      (C26357 * C494 - C78889 * C500) * C51693 +
                      (C26357 * C1631 - C78889 * C1645) * C51780 +
                      (C26357 * C2239 - C78889 * C2247) * C51694) *
                         C78891 * C78610 * C78812 +
                     ((C28415 - C28414) * C51779 + (C28617 - C28616) * C51693 +
                      (C78889 * C3843 - C26357 * C3836) * C51780 +
                      (C78889 * C4510 - C26357 * C4506) * C51694) *
                         C78891 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C6683 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C6684 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C6685 +
                     ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
                      (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
                         C78891 * C78610 * C78852) *
                        C78798 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C6683 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C6684 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C6685 +
                     ((C32431 - C32430) * C51779 + (C32633 - C32632) * C51693 +
                      (C78889 * C8255 - C26357 * C8252) * C51780 +
                      (C78889 * C8674 - C26357 * C8672) * C51694) *
                         C78891 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[70] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C78812 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C162 * C3833 - C78891 * C3947) * C51780 +
                      (C162 * C4503 - C78891 * C4609) * C51694) *
                         C78889 * C78610 * C78655) *
                        C2521 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78812 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78655) *
                        C2522 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C78812 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78655) *
                        C2523 +
                    (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                      (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                         C78889 * C78610 * C78812 +
                     ((C2599 - C2598) * C51779 + (C3021 - C3020) * C51693 +
                      (C78891 * C3950 - C162 * C3836) * C51780 +
                      (C78891 * C4612 - C162 * C4506) * C51694) *
                         C78889 * C78610 * C78655) *
                        C78846)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C6683 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C6684 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78610 * C6685 +
                     ((C162 * C5456 - C78891 * C5513) * C51779 +
                      (C162 * C5755 - C78891 * C5805) * C51693 +
                      (C162 * C8251 - C78891 * C8325) * C51780 +
                      (C162 * C8671 - C78891 * C8741) * C51694) *
                         C78889 * C78610 * C78852) *
                        C78798 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C6683 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C6684 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C6685 +
                     ((C6763 - C6762) * C51779 + (C7185 - C7184) * C51693 +
                      (C78891 * C8326 - C162 * C8252) * C51780 +
                      (C78891 * C8742 - C162 * C8672) * C51694) *
                         C78889 * C78610 * C78852) *
                        C78575)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78812 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78655) *
              C2521 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78812) *
              C2522 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78812 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78655) *
              C2523 +
          ((C51779 * C938 - C52033 * C726 - C51779 * C1334 + C51693 * C1514 +
            C51780 * C4064 - C52034 * C3836 - C51780 * C4506 + C51694 * C4718) *
               C78891 * C78889 * C78610 * C78655 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78610 * C78812) *
              C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C6683 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C6684 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C6685 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78610 * C78852) *
              C78798 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C6684 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C6683 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C6685 +
           (C51779 * C5564 - C52033 * C5455 - C51779 * C5756 + C51693 * C5851 +
            C51780 * C8396 - C52034 * C8252 - C51780 * C8672 + C51694 * C8810) *
               C78891 * C78889 * C78610 * C78852) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C78655) *
              C717 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C78812 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C78655) *
              C718 +
          ((((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                 C51693 +
             C52816 * C51694) *
                C78891 * C78813 -
            (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
               C78812 +
           ((C29462 * C51693 + (C26357 * C10692 - C26358 * C10691 -
                                C26357 * C10693 + C78889 * C10694) *
                                   C51694) *
                C78891 * C78697 -
            (C29462 * C51694 + C26814 * C51693) * C78891 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78813 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C6683 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
              C6684 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C78813 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
              C6685 +
          ((C33738 * C51693 + (C26357 * C31469 - C26358 * C31468 -
                               C26357 * C31470 + C78889 * C31471) *
                                  C51694) *
               C78891 * C78697 -
           (C33738 * C51694 + C31005 * C51693) * C78891 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C78812 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C78891 * C6027 - C162 * C5930) * C26357 +
              (C78891 * C6033 - C162 * C5938) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C717 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C718 +
          (((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
             ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
                C78813 +
            (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
             ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
                C78697) *
               C78812 +
           ((((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
             ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
                C78813 +
            (((C3961 - C3960) * C26357 + (C3963 - C3962) * C78889) * C51693 +
             ((C78891 * C10793 - C162 * C10691) * C26357 +
              (C78891 * C10794 - C162 * C10693) * C78889) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78813 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C6683 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78813 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78697) *
              C6684 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78813 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78697) *
              C6685 +
          ((((C162 * C5456 - C78891 * C5513) * C26357 +
             (C162 * C5462 - C78891 * C5517) * C78889) *
                C51693 +
            ((C58939 - C58940) * C26357 + (C58941 - C58942) * C78889) *
                C51694) *
               C78813 +
           (((C58940 - C58939) * C26357 + (C58942 - C58941) * C78889) * C51693 +
            ((C78891 * C31570 - C162 * C31468) * C26357 +
             (C78891 * C31571 - C162 * C31470) * C78889) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C26357 +
             (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C26357 +
             (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
              C51694 * C1850) *
                 C78889) *
                C78891 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C26357 +
             (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C26357 +
             (C51693 * C4067 - C51779 * C3842 + C51694 * C10898 -
              C51780 * C10693) *
                 C78889) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C6683 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78697) *
              C6684 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78697) *
              C6685 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C26357 +
            (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 -
             C51694 * C8397) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C26357 +
            (C51693 * C8397 - C51779 * C8254 + C51694 * C31647 -
             C51780 * C31470) *
                C78889) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C78655) *
              C717 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C78655) *
              C718 +
          (((((C78889 * C106 - C26357 * C98) * C162 +
              (C78889 * C312 - C26357 * C306) * C78891) *
                 C51693 +
             ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
                C78813 +
            (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
             ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
                C78697) *
               C78812 +
           ((((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
             ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
                C78813 +
            (((C29773 - C29772) * C162 + (C29775 - C29774) * C78891) * C51693 +
             ((C78889 * C10692 - C26357 * C10691) * C162 +
              (C78889 * C11002 - C26357 * C11001) * C78891) *
                 C51694) *
                C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78813 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C6683 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78813 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78697) *
              C6684 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78813 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78697) *
              C6685 +
          ((((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
            ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
               C78813 +
           (((C33949 - C33948) * C162 + (C33951 - C33950) * C78891) * C51693 +
            ((C78889 * C31469 - C26357 * C31468) * C162 +
             (C78889 * C31735 - C26357 * C31734) * C78891) *
                C51694) *
               C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C78812 +
           ((C55183 * C51693 +
             (C162 * C6027 - C358 * C5930 - C162 * C6199 + C78891 * C6286) *
                 C78889 * C51694) *
                C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C78655) *
              C717 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C78812 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C11109 * C78889 * C51694 + C55178 * C51693) * C78697) *
               C78655) *
              C718 +
          (((C391 * C78889 * C51693 + C53156 * C51694) * C78813 -
            (C53157 * C51694 + C53156 * C51693) * C78697) *
               C78812 +
           ((C55179 * C51693 +
             (C162 * C10793 - C358 * C10691 - C162 * C11001 + C78891 * C11101) *
                 C78889 * C51694) *
                C78697 -
            (C55179 * C51694 + C1163 * C78889 * C51693) * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78813 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C6683 +
          ((C55183 * C51693 + C57025 * C51694) * C78697 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78813) *
              C6684 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78813 -
           (C57027 * C51694 + C57026 * C51693) * C78697) *
              C6685 +
          ((C59148 * C51693 +
            (C162 * C31570 - C358 * C31468 - C162 * C31734 + C78891 * C31822) *
                C78889 * C51694) *
               C78697 -
           (C59148 * C51694 +
            (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
                C78889 * C51693) *
               C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                 C162 +
             (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
              C51694 * C1842) *
                 C162 +
             (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
              C51694 * C2148) *
                 C78891) *
                C78889 * C78697) *
               C78812 +
           (((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                 C162 +
             (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
              C51694 * C4399) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4063 - C51779 * C3835 + C51694 * C10897 -
              C51780 * C10691) *
                 C162 +
             (C51693 * C4399 - C51779 * C4177 + C51694 * C11207 -
              C51780 * C11001) *
                 C78891) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C6683 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78697) *
              C6684 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78697) *
              C6685 +
          (((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 -
             C51694 * C8395) *
                C162 +
            (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 -
             C51694 * C8603) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C8395 - C51779 * C8251 + C51694 * C31646 -
             C51780 * C31468) *
                C162 +
            (C51693 * C8603 - C51779 * C8465 + C51694 * C31897 -
             C51780 * C31734) *
                C78891) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C78655) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C78655) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C51779 +
             (C78889 * C499 - C26357 * C493) * C51693 +
             (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                C78891 * C78813 +
            ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
             (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                C78891 * C78697) *
               C78812 +
           (((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
             (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                C78891 * C78813 +
            ((C29773 - C29772) * C51779 + (C30077 - C30076) * C51693 +
             (C78889 * C10692 - C26357 * C10691) * C51780 +
             (C78889 * C11309 - C26357 * C11308) * C51694) *
                C78891 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78813 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C6683 +
          (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
            (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
               C78891 * C78813 +
           ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
            (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
               C78891 * C78697) *
              C6684 +
          (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
            (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
               C78891 * C78813 +
           ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
            (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
               C78891 * C78697) *
              C6685 +
          (((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
            (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
               C78891 * C78813 +
           ((C33949 - C33948) * C51779 + (C34157 - C34156) * C51693 +
            (C78889 * C31469 - C26357 * C31468) * C51780 +
            (C78889 * C31979 - C26357 * C31978) * C51694) *
               C78891 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezy[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C78891 * C6027 - C162 * C5930) * C51780 +
             (C78891 * C6531 - C162 * C6445) * C51694) *
                C78889 * C78697) *
               C78655) *
              C717 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C78655) *
              C718 +
          ((((C181 - C180) * C51779 + (C555 - C554) * C51693 +
             (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                C78889 * C78813 +
            ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
             (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                C78889 * C78697) *
               C78812 +
           (((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
             (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                C78889 * C78813 +
            ((C3961 - C3960) * C51779 + (C4617 - C4616) * C51693 +
             (C78891 * C10793 - C162 * C10691) * C51780 +
             (C78891 * C11408 - C162 * C11308) * C51694) *
                C78889 * C78697) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78813 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C6683 +
          (((C162 * C721 - C78891 * C826) * C51779 +
            (C162 * C1328 - C78891 * C1418) * C51693 +
            (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
               C78889 * C78813 +
           ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
            (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
               C78889 * C78697) *
              C6684 +
          (((C78891 * C828 - C162 * C722) * C51779 +
            (C78891 * C1420 - C162 * C1330) * C51693 +
            (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
               C78889 * C78813 +
           ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
            (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
               C78889 * C78697) *
              C6685 +
          (((C162 * C5456 - C78891 * C5513) * C51779 +
            (C162 * C5755 - C78891 * C5805) * C51693 +
            (C58939 - C58940) * C51780 + (C59347 - C59348) * C51694) *
               C78889 * C78813 +
           ((C58940 - C58939) * C51779 + (C59348 - C59347) * C51693 +
            (C78891 * C31570 - C162 * C31468) * C51780 +
            (C78891 * C32060 - C162 * C31978) * C51694) *
               C78889 * C78697) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezz[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C78655) *
              C717 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C78812 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C78655) *
              C718 +
          (((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
             C51780 * C1841 - C52034 * C1629 - C51780 * C2237 +
             C51694 * C2417) *
                C78891 * C78889 * C78813 -
            (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
             C51779 * C1841 - C52033 * C1629 - C51779 * C2237 +
             C51693 * C2417) *
                C78891 * C78889 * C78697) *
               C78812 +
           ((C51779 * C4063 - C52033 * C3835 - C51779 * C4505 + C51693 * C4717 +
             C51780 * C10897 - C52034 * C10691 - C51780 * C11308 +
             C51694 * C11509) *
                C78891 * C78889 * C78697 -
            (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
             C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
                C78891 * C78889 * C78813) *
               C78655) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78813 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C6683 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78697 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78813) *
              C6684 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78813 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78697) *
              C6685 +
          ((C51779 * C8395 - C52033 * C8251 - C51779 * C8671 + C51693 * C8809 +
            C51780 * C31646 - C52034 * C31468 - C51780 * C31978 +
            C51694 * C32135) *
               C78891 * C78889 * C78697 -
           (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
            C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
               C78891 * C78889 * C78813) *
              C78852) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78868 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C717 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78868 -
           ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78883 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78868 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 + C78889 * C1650) *
               C51694) *
              C78891 * C78610 * C78592 * C87 -
          ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 + C78889 * C1649) *
               C51694 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C51693) *
              C78891 * C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C51693 +
           (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 + C78889 * C1653) *
               C51694) *
              C78891 * C78610 * C78592 * C89 -
          ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 + C78889 * C1655) *
               C51694 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C51693) *
              C78891 * C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C51693 +
           (C26357 * C3165 - C26358 * C3164 - C26357 * C3166 + C78889 * C3167) *
               C51694) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78884 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78870 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C717 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78870 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78884 -
           ((C26357 * C10197 - C26358 * C10193 - C26357 * C10198 +
             C78889 * C10205) *
                C51694 +
            C52815 * C51693) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78884 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78870 +
           (C52817 * C51693 + (C26357 * C11589 - C26358 * C11588 -
                               C26357 * C11590 + C78889 * C11591) *
                                  C51694) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C4809 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C4810 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C78880 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C4810 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C4809 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C4809 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C4810 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           C52812 * C51694) *
              C78891 * C78610 * C5449 -
          (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C5450 +
          (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C5451 -
          (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C5452 +
          (C31006 * C51693 + (C26357 * C33728 - C26358 * C33727 -
                              C26357 * C33729 + C78889 * C33730) *
                                 C51694) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78884 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78870 +
           (C52813 * C51693 + (C26357 * C10199 - C26358 * C10194 -
                               C26357 * C10200 + C78889 * C10206) *
                                  C51694) *
               C78891 * C78845) *
              C4809 +
          ((C29460 * C51693 + C31491 * C51694) * C78891 * C78870 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78884 -
           (C37591 * C51694 + C31491 * C51693) * C78891 * C78845) *
              C4810 +
          ((C26811 * C51693 + C31492 * C51694) * C78891 * C78884 -
           (C31493 * C51694 + C31492 * C51693) * C78891 * C78870 +
           (C31493 * C51693 + (C26357 * C37581 - C26358 * C37580 -
                               C26357 * C37582 + C78889 * C37583) *
                                  C51694) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C78891 * C1731 - C162 * C1626) * C26357 +
             (C78891 * C1739 - C162 * C1636) * C78889) *
                C51694) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C162 * C3833 - C78891 * C3947) * C26357 +
             (C162 * C3838 - C78891 * C3951) * C78889) *
                C51694) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78883 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78868 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78883 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78868 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C78891 * C1731 - C162 * C1626) * C26357 +
            (C78891 * C1739 - C162 * C1636) * C78889) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
           ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
           ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
           ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C26357 + (C191 - C190) * C78889) * C51693 +
           ((C78891 * C3234 - C162 * C3164) * C26357 +
            (C78891 * C3235 - C162 * C3166) * C78889) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78884 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78870 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C78592 * C717 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78884 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78870 +
           (((C1753 - C1752) * C26357 + (C1755 - C1754) * C78889) * C51693 +
            ((C11661 - C11662) * C26357 + (C11663 - C11664) * C78889) *
                C51694) *
               C78845) *
              C78592 * C718 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78884 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78870 +
           (((C1761 - C1760) * C26357 + (C1763 - C1762) * C78889) * C51693 +
            ((C78891 * C11658 - C162 * C11588) * C26357 +
             (C78891 * C11659 - C162 * C11590) * C78889) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C4809 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C4810 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C4809 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C4810 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) * C51694) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C26357 +
            (C162 * C731 - C78891 * C834) * C78889) *
               C51693 +
           ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) * C51694) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C26357 +
            (C78891 * C836 - C162 * C733) * C78889) *
               C51693 +
           ((C78891 * C6029 - C162 * C5932) * C26357 +
            (C78891 * C6035 - C162 * C5942) * C78889) *
               C51694) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C26357 +
            (C162 * C5462 - C78891 * C5517) * C78889) *
               C51693 +
           ((C162 * C8251 - C78891 * C8325) * C26357 +
            (C162 * C8254 - C78891 * C8327) * C78889) *
               C51694) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C26357 +
            (C78891 * C5519 - C162 * C5464) * C78889) *
               C51693 +
           ((C78891 * C33805 - C162 * C33727) * C26357 +
            (C78891 * C33806 - C162 * C33729) * C78889) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78884 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78870 +
           (((C52897 - C52896) * C26357 + (C52899 - C52898) * C78889) * C51693 +
            ((C78891 * C10251 - C162 * C10194) * C26357 +
             (C78891 * C10255 - C162 * C10200) * C78889) *
                C51694) *
               C78845) *
              C4809 +
          ((((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78884 +
           (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) * C51693 +
            ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                C51694) *
               C78870 +
           (((C56771 - C56770) * C26357 + (C56773 - C56772) * C78889) * C51693 +
            ((C162 * C12225 - C78891 * C12299) * C26357 +
             (C162 * C12228 - C78891 * C12301) * C78889) *
                C51694) *
               C78845) *
              C4810 +
          ((((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                C51694) *
               C78884 +
           (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) * C51693 +
            ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                C51694) *
               C78870 +
           (((C56779 - C56778) * C26357 + (C56781 - C56780) * C78889) * C51693 +
            ((C78891 * C37658 - C162 * C37580) * C26357 +
             (C78891 * C37659 - C162 * C37582) * C78889) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C26357 +
           (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
               C78889) *
              C78891 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C26357 +
           (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
               C78889) *
              C78891 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C26357 +
           (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
               C78889) *
              C78891 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C26357 +
           (C51693 * C244 - C51779 * C111 + C51694 * C3307 - C51780 * C3166) *
               C78889) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C78592 * C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78884 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78870 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C26357 +
            (C51779 * C1640 - C51693 * C1848 + C51780 * C10198 -
             C51694 * C10306) *
                C78889) *
               C78891 * C78845) *
              C78592 * C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C26357 +
            (C51693 * C1850 - C51779 * C1644 + C51694 * C11731 -
             C51780 * C11590) *
                C78889) *
               C78891 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C26357 +
           (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
               C78889) *
              C78891 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C26357 +
           (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
               C78889) *
              C78891 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C26357 +
           (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 - C51694 * C8397) *
               C78889) *
              C78891 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C26357 +
           (C51693 * C5569 - C51779 * C5464 + C51694 * C33874 -
            C51780 * C33729) *
               C78889) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C26357 +
            (C51693 * C1847 - C51779 * C1638 + C51694 * C10305 -
             C51780 * C10200) *
                C78889) *
               C78891 * C78845) *
              C4809 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78884 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C26357 +
            (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
             C51780 * C5938) *
                C78889) *
               C78891 * C78870 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C26357 +
            (C51779 * C5938 - C51693 * C6119 + C51780 * C12228 -
             C51694 * C12371) *
                C78889) *
               C78891 * C78845) *
              C4810 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78884 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C26357 +
            (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
             C51694 * C6123) *
                C78889) *
               C78891 * C78870 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C26357 +
            (C51693 * C6123 - C51779 * C5944 + C51694 * C37727 -
             C51780 * C37582) *
                C78889) *
               C78891 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C78889 * C1635 - C26357 * C1626) * C162 +
             (C78889 * C1951 - C26357 * C1943) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C26357 * C1625 - C78889 * C1633) * C162 +
             (C26357 * C1944 - C78889 * C1952) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C78889 * C1641 - C26357 * C1629) * C162 +
             (C78889 * C1955 - C26357 * C1947) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C78889 * C1635 - C26357 * C1626) * C162 +
            (C78889 * C1951 - C26357 * C1943) * C78891) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C162 +
            (C26357 * C305 - C78889 * C311) * C78891) *
               C51693 +
           ((C26357 * C1625 - C78889 * C1633) * C162 +
            (C26357 * C1944 - C78889 * C1952) * C78891) *
               C51694) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C162 +
            (C78889 * C312 - C26357 * C306) * C78891) *
               C51693 +
           ((C78889 * C1641 - C26357 * C1629) * C162 +
            (C78889 * C1955 - C26357 * C1947) * C78891) *
               C51694) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C162 +
            (C26357 * C307 - C78889 * C313) * C78891) *
               C51693 +
           ((C26357 * C1631 - C78889 * C1645) * C162 +
            (C26357 * C1949 - C78889 * C1957) * C78891) *
               C51694) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C162 +
            (C78889 * C314 - C26357 * C308) * C78891) *
               C51693 +
           ((C78889 * C3165 - C26357 * C3164) * C162 +
            (C78889 * C3379 - C26357 * C3378) * C78891) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78884 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78870 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C78592 * C717 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78884 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78870 +
           (((C53061 - C53060) * C162 + (C53063 - C53062) * C78891) * C51693 +
            ((C26357 * C10193 - C78889 * C10197) * C162 +
             (C26357 * C10352 - C78889 * C10356) * C78891) *
                C51694) *
               C78845) *
              C78592 * C718 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78884 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78870 +
           (((C53069 - C53068) * C162 + (C53071 - C53070) * C78891) * C51693 +
            ((C78889 * C11589 - C26357 * C11588) * C162 +
             (C78889 * C11803 - C26357 * C11802) * C78891) *
                C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
              C78610 * C5449 +
          (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
           ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
              C78610 * C5450 +
          (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
           ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
              C78610 * C5451 +
          (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
           ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
              C78610 * C5452 +
          (((C31154 - C31153) * C162 + (C31156 - C31155) * C78891) * C51693 +
           ((C78889 * C33728 - C26357 * C33727) * C162 +
            (C78889 * C33946 - C26357 * C33945) * C78891) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78884 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78870 +
           (((C53053 - C53052) * C162 + (C53055 - C53054) * C78891) * C51693 +
            ((C78889 * C10199 - C26357 * C10194) * C162 +
             (C78889 * C10355 - C26357 * C10351) * C78891) *
                C51694) *
               C78845) *
              C4809 +
          ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78884 +
           (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
            ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
               C78870 +
           (((C31738 - C31737) * C162 + (C31740 - C31739) * C78891) * C51693 +
            ((C37801 - C37802) * C162 + (C37803 - C37804) * C78891) * C51694) *
               C78845) *
              C4810 +
          ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78884 +
           (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
            ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
               C78870 +
           (((C31746 - C31745) * C162 + (C31748 - C31747) * C78891) * C51693 +
            ((C78889 * C37581 - C26357 * C37580) * C162 +
             (C78889 * C37799 - C26357 * C37798) * C78891) *
                C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C78889 * C51694) *
               C78610 * C78883 -
           ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C78889 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C717 +
          ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
               C78868 -
           (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 *
               C78883 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C718 +
          ((C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 *
               C78883 -
           (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
               C78868 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
               C78889 * C51694) *
              C78610 * C78592 * C87 -
          (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 * C78592 *
              C88 +
          (C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 * C78592 *
              C89 -
          (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 * C78592 *
              C90 +
          (C393 * C78889 * C51693 +
           (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
               C78889 * C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78884 -
           (C53165 * C51694 + C53164 * C51693) * C78870 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C78592 * C717 +
          ((C53154 * C51693 + C53155 * C51694) * C78870 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78884 -
           (C11878 * C78889 * C51694 + C53155 * C51693) * C78845) *
              C78592 * C718 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78884 -
           (C53157 * C51694 + C53156 * C51693) * C78870 +
           (C53157 * C51693 +
            (C162 * C11658 - C358 * C11588 - C162 * C11802 + C78891 * C11870) *
                C78889 * C51694) *
               C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C4809 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78880 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C4810 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C4809 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C4809 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C4810 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           C53164 * C51694) *
              C78610 * C5449 -
          (C55183 * C51694 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
               C78889 * C51693) *
              C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
               C78889 * C51693 +
           (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
               C78889 * C51694) *
              C78610 * C5451 -
          ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
               C78889 * C51694 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C78889 * C51693) *
              C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) *
               C78889 * C51693 +
           (C162 * C33805 - C358 * C33727 - C162 * C33945 + C78891 * C34017) *
               C78889 * C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78884 -
           (C53165 * C51694 + C53164 * C51693) * C78870 +
           (C53165 * C51693 +
            (C162 * C10251 - C358 * C10194 - C162 * C10351 + C78891 * C10402) *
                C78889 * C51694) *
               C78845) *
              C4809 +
          ((C55183 * C51693 + C57025 * C51694) * C78870 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78884 -
           ((C162 * C12299 - C358 * C12225 - C162 * C12439 + C78891 * C12509) *
                C78889 * C51694 +
            C57025 * C51693) *
               C78845) *
              C4810 +
          (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            C57026 * C51694) *
               C78884 -
           (C57027 * C51694 + C57026 * C51693) * C78870 +
           (C57027 * C51693 +
            (C162 * C37658 - C358 * C37580 - C162 * C37798 + C78891 * C37870) *
                C78889 * C51694) *
               C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C162 +
           (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
               C78891) *
              C78889 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C162 +
           (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
               C78891) *
              C78889 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C162 +
           (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
               C78891) *
              C78889 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C162 +
           (C51693 * C439 - C51779 * C308 + C51694 * C3520 - C51780 * C3378) *
               C78891) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C78592 * C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78884 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78870 +
           ((C51779 * C1628 - C51693 * C1840 + C51780 * C10193 -
             C51694 * C10302) *
                C162 +
            (C51779 * C1946 - C51693 * C2146 + C51780 * C10352 -
             C51694 * C10448) *
                C78891) *
               C78889 * C78845) *
              C78592 * C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1842 - C51779 * C1630 + C51694 * C11730 -
             C51780 * C11588) *
                C162 +
            (C51693 * C2148 - C51779 * C1948 + C51694 * C11944 -
             C51780 * C11802) *
                C78891) *
               C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C162 +
           (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 - C51694 * C4397) *
               C78891) *
              C78889 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C162 +
           (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 - C51780 * C6201) *
               C78891) *
              C78889 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C162 +
           (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 - C51694 * C8603) *
               C78891) *
              C78889 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C162 +
           (C51693 * C5711 - C51779 * C5615 + C51694 * C34084 -
            C51780 * C33945) *
               C78891) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C1839 - C51779 * C1627 + C51694 * C10301 -
             C51780 * C10194) *
                C162 +
            (C51693 * C2145 - C51779 * C1945 + C51694 * C10447 -
             C51780 * C10351) *
                C78891) *
               C78889 * C78845) *
              C4809 +
          (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78884 +
           ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
             C51780 * C5930) *
                C162 +
            (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
             C51780 * C6199) *
                C78891) *
               C78889 * C78870 +
           ((C51779 * C5930 - C51693 * C6113 + C51780 * C12225 -
             C51694 * C12369) *
                C162 +
            (C51779 * C6199 - C51693 * C6365 + C51780 * C12439 -
             C51694 * C12577) *
                C78891) *
               C78889 * C78845) *
              C4810 +
          (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78884 +
           ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
             C51694 * C6117) *
                C162 +
            (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
             C51694 * C6369) *
                C78891) *
               C78889 * C78870 +
           ((C51693 * C6117 - C51779 * C5933 + C51694 * C37726 -
             C51780 * C37580) *
                C162 +
            (C51693 * C6369 - C51779 * C6203 + C51694 * C37937 -
             C51780 * C37798) *
                C78891) *
               C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C78889 * C1635 - C26357 * C1626) * C51780 +
                      (C78889 * C2241 - C26357 * C2233) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C26357 * C1625 - C78889 * C1633) * C51780 +
                      (C26357 * C2234 - C78889 * C2242) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C78889 * C1641 - C26357 * C1629) * C51780 +
                      (C78889 * C2245 - C26357 * C2237) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C78889 * C1635 - C26357 * C1626) * C51780 +
                     (C78889 * C2241 - C26357 * C2233) * C51694) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C51779 +
                     (C26357 * C492 - C78889 * C498) * C51693 +
                     (C26357 * C1625 - C78889 * C1633) * C51780 +
                     (C26357 * C2234 - C78889 * C2242) * C51694) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C51779 +
                     (C78889 * C499 - C26357 * C493) * C51693 +
                     (C78889 * C1641 - C26357 * C1629) * C51780 +
                     (C78889 * C2245 - C26357 * C2237) * C51694) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C51779 +
                     (C26357 * C494 - C78889 * C500) * C51693 +
                     (C26357 * C1631 - C78889 * C1645) * C51780 +
                     (C26357 * C2239 - C78889 * C2247) * C51694) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C51779 +
                     (C78889 * C501 - C26357 * C495) * C51693 +
                     (C78889 * C3165 - C26357 * C3164) * C51780 +
                     (C78889 * C3590 - C26357 * C3589) * C51694) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78884 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C78870 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C78889 * C10199 - C26357 * C10194) * C51780 +
                      (C78889 * C10497 - C26357 * C10493) * C51694) *
                         C78891 * C78845) *
                        C78592 * C717 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78884 +
                     ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
                      (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                         C78891 * C78870 +
                     ((C53061 - C53060) * C51779 + (C53321 - C53320) * C51693 +
                      (C26357 * C10193 - C78889 * C10197) * C51780 +
                      (C26357 * C10494 - C78889 * C10498) * C51694) *
                         C78891 * C78845) *
                        C78592 * C718 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78884 +
                     ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
                      (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
                         C78891 * C78870 +
                     ((C53069 - C53068) * C51779 + (C53325 - C53324) * C51693 +
                      (C78889 * C11589 - C26357 * C11588) * C51780 +
                      (C78889 * C12014 - C26357 * C12013) * C51694) *
                         C78891 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                        C78891 * C78610 * C5449 +
                    ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                     (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                        C78891 * C78610 * C5450 +
                    ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                     (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                        C78891 * C78610 * C5451 +
                    ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
                     (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
                        C78891 * C78610 * C5452 +
                    ((C31154 - C31153) * C51779 + (C31294 - C31293) * C51693 +
                     (C78889 * C33728 - C26357 * C33727) * C51780 +
                     (C78889 * C34154 - C26357 * C34153) * C51694) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78884 +
                     ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
                      (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                         C78891 * C78870 +
                     ((C53053 - C53052) * C51779 + (C53317 - C53316) * C51693 +
                      (C78889 * C10199 - C26357 * C10194) * C51780 +
                      (C78889 * C10497 - C26357 * C10493) * C51694) *
                         C78891 * C78845) *
                        C4809 +
                    (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78884 +
                     ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
                      (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                         C78891 * C78870 +
                     ((C31738 - C31737) * C51779 + (C31982 - C31981) * C51693 +
                      (C37801 - C37802) * C51780 + (C38009 - C38010) * C51694) *
                         C78891 * C78845) *
                        C4810 +
                    (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78884 +
                     ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
                      (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                         C78891 * C78870 +
                     ((C31746 - C31745) * C51779 + (C31986 - C31985) * C51693 +
                      (C78889 * C37581 - C26357 * C37580) * C51780 +
                      (C78889 * C38007 - C26357 * C38006) * C51694) *
                         C78891 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezy[72] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C78891 * C1731 - C162 * C1626) * C51780 +
                      (C78891 * C2323 - C162 * C2233) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C162 * C3833 - C78891 * C3947) * C51780 +
                      (C162 * C4503 - C78891 * C4609) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C78891 * C1731 - C162 * C1626) * C51780 +
                     (C78891 * C2323 - C162 * C2233) * C51694) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                     (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                     (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                     (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C51779 + (C559 - C558) * C51693 +
                     (C78891 * C3234 - C162 * C3164) * C51780 +
                     (C78891 * C3657 - C162 * C3589) * C51694) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78884 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78870 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C78592 * C717 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78884 +
                     ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
                      (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                         C78889 * C78870 +
                     ((C1753 - C1752) * C51779 + (C2335 - C2334) * C51693 +
                      (C11661 - C11662) * C51780 + (C12083 - C12084) * C51694) *
                         C78889 * C78845) *
                        C78592 * C718 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78884 +
                     ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
                      (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
                         C78889 * C78870 +
                     ((C1761 - C1760) * C51779 + (C2339 - C2338) * C51693 +
                      (C78891 * C11658 - C162 * C11588) * C51780 +
                      (C78891 * C12081 - C162 * C12013) * C51694) *
                         C78889 * C78845) *
                        C78592 * C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                        C78889 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C51779 +
                     (C162 * C1328 - C78891 * C1418) * C51693 +
                     (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                        C78889 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C51779 +
                     (C78891 * C1420 - C162 * C1330) * C51693 +
                     (C78891 * C6029 - C162 * C5932) * C51780 +
                     (C78891 * C6533 - C162 * C6447) * C51694) *
                        C78889 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C51779 +
                     (C162 * C5755 - C78891 * C5805) * C51693 +
                     (C162 * C8251 - C78891 * C8325) * C51780 +
                     (C162 * C8671 - C78891 * C8741) * C51694) *
                        C78889 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C51779 +
                     (C78891 * C5807 - C162 * C5757) * C51693 +
                     (C78891 * C33805 - C162 * C33727) * C51780 +
                     (C78891 * C34223 - C162 * C34153) * C51694) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78884 +
                     ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
                      (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                         C78889 * C78870 +
                     ((C52897 - C52896) * C51779 + (C53403 - C53402) * C51693 +
                      (C78891 * C10251 - C162 * C10194) * C51780 +
                      (C78891 * C10543 - C162 * C10493) * C51694) *
                         C78889 * C78845) *
                        C4809 +
                    (((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78884 +
                     ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
                      (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                         C78889 * C78870 +
                     ((C56771 - C56770) * C51779 + (C57251 - C57250) * C51693 +
                      (C162 * C12225 - C78891 * C12299) * C51780 +
                      (C162 * C12645 - C78891 * C12715) * C51694) *
                         C78889 * C78845) *
                        C4810 +
                    (((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                         C78889 * C78884 +
                     ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
                      (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                         C78889 * C78870 +
                     ((C56779 - C56778) * C51779 + (C57255 - C57254) * C51693 +
                      (C78891 * C37658 - C162 * C37580) * C51780 +
                      (C78891 * C38076 - C162 * C38006) * C51694) *
                         C78889 * C78845) *
                        C78842) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezz[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C717 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78868 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C718 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C78592 * C87 -
          (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
           C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
              C78891 * C78889 * C78610 * C78592 * C88 +
          (C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
           C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
              C78891 * C78889 * C78610 * C78592 * C89 -
          (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
           C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
              C78891 * C78889 * C78610 * C78592 * C90 +
          (C51779 * C238 - C52033 * C100 - C51779 * C495 + C51693 * C606 +
           C51780 * C3306 - C52034 * C3164 - C51780 * C3589 + C51694 * C3726) *
              C78891 * C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78884 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78870 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C78592 * C717 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78870 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78884 -
           (C51780 * C10302 - C52034 * C10193 - C51780 * C10494 +
            C51694 * C10589 + C51779 * C1840 - C52033 * C1628 - C51779 * C2236 +
            C51693 * C2416) *
               C78891 * C78889 * C78845) *
              C78592 * C718 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78884 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78870 +
           (C51779 * C1842 - C52033 * C1630 - C51779 * C2238 + C51693 * C2418 +
            C51780 * C11730 - C52034 * C11588 - C51780 * C12013 +
            C51694 * C12150) *
               C78891 * C78889 * C78845) *
              C78592 * C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C78880 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C4810 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C5449 -
          (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
           C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
              C78891 * C78889 * C78610 * C5450 +
          (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
           C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
              C78891 * C78889 * C78610 * C5451 -
          (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
           C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
              C78891 * C78889 * C78610 * C5452 +
          (C51779 * C5565 - C52033 * C5457 - C51779 * C5757 + C51693 * C5853 +
           C51780 * C33873 - C52034 * C33727 - C51780 * C34153 +
           C51694 * C34290) *
              C78891 * C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78884 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78870 +
           (C51779 * C1839 - C52033 * C1627 - C51779 * C2235 + C51693 * C2415 +
            C51780 * C10301 - C52034 * C10194 - C51780 * C10493 +
            C51694 * C10590) *
               C78891 * C78889 * C78845) *
              C4809 +
          ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
            C51780 * C6113 - C52034 * C5930 - C51780 * C6445 + C51694 * C6612) *
               C78891 * C78889 * C78870 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78884 -
           (C51780 * C12369 - C52034 * C12225 - C51780 * C12645 +
            C51694 * C12783 + C51779 * C6113 - C52033 * C5930 - C51779 * C6445 +
            C51693 * C6612) *
               C78891 * C78889 * C78845) *
              C4810 +
          ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78884 -
           (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
            C51779 * C6115 - C52033 * C5932 - C51779 * C6447 + C51693 * C6614) *
               C78891 * C78889 * C78870 +
           (C51779 * C6117 - C52033 * C5933 - C51779 * C6449 + C51693 * C6615 +
            C51780 * C37726 - C52034 * C37580 - C51780 * C38006 +
            C51694 * C38143) *
               C78891 * C78889 * C78845) *
              C78842) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78813 -
           (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
              C78592 * C2521 +
          ((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78813) *
              C78592 * C2522 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78813 -
           (C52817 * C51694 + C52816 * C51693) * C78891 * C78697) *
              C78592 * C2523 +
          ((C54144 * C51693 + (C26357 * C1647 - C26358 * C1632 -
                               C26357 * C1648 + C78889 * C1656) *
                                  C51694) *
               C78891 * C78697 -
           (C54144 * C51694 +
            (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
                C51693) *
               C78891 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                 C51693 +
             C52812 * C51694) *
                C78891 * C78813 -
            (C52813 * C51694 + C52812 * C51693) * C78891 * C78697) *
               C4809 +
           ((C29460 * C51693 + C31491 * C51694) * C78891 * C78697 -
            (C29460 * C51694 + C26810 * C51693) * C78891 * C78813) *
               C4810 +
           ((C26811 * C51693 + C31492 * C51694) * C78891 * C78813 -
            (C31493 * C51694 + C31492 * C51693) * C78891 * C78697) *
               C78842) *
              C78798 +
          (((C52814 * C51693 + C52815 * C51694) * C78891 * C78697 -
            (C52814 * C51694 +
             (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                 C51693) *
                C78891 * C78813) *
               C4809 +
           ((C26812 * C51693 + C29461 * C51694) * C78891 * C78813 -
            (C36129 * C51694 + C29461 * C51693) * C78891 * C78697) *
               C4810 +
           ((C32870 * C51693 + (C26357 * C5945 - C26358 * C5934 -
                                C26357 * C5946 + C78889 * C5952) *
                                   C51694) *
                C78891 * C78697 -
            (C32870 * C51694 + C26813 * C51693) * C78891 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78813 +
           (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) * C51693 +
            ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                C51694) *
               C78697) *
              C78592 * C2521 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78813 +
           (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
            ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
               C78697) *
              C78592 * C2522 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78813 +
           (((C1757 - C1756) * C26357 + (C1759 - C1758) * C78889) * C51693 +
            ((C1760 - C1761) * C26357 + (C1762 - C1763) * C78889) * C51694) *
               C78697) *
              C78592 * C2523 +
          ((((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
            ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
               C78813 +
           (((C3238 - C3237) * C26357 + (C3240 - C3239) * C78889) * C51693 +
            ((C78891 * C1738 - C162 * C1632) * C26357 +
             (C78891 * C1746 - C162 * C1648) * C78889) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78891 * C163 - C162 * C96) * C26357 +
              (C78891 * C169 - C162 * C103) * C78889) *
                 C51693 +
             ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                 C51694) *
                C78813 +
            (((C52893 - C52892) * C26357 + (C52895 - C52894) * C78889) *
                 C51693 +
             ((C52896 - C52897) * C26357 + (C52898 - C52899) * C78889) *
                 C51694) *
                C78697) *
               C4809 +
           ((((C162 * C721 - C78891 * C826) * C26357 +
              (C162 * C731 - C78891 * C834) * C78889) *
                 C51693 +
             ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                 C51694) *
                C78813 +
            (((C54877 - C54876) * C26357 + (C54879 - C54878) * C78889) *
                 C51693 +
             ((C56770 - C56771) * C26357 + (C56772 - C56773) * C78889) *
                 C51694) *
                C78697) *
               C4810 +
           ((((C78891 * C828 - C162 * C722) * C26357 +
              (C78891 * C836 - C162 * C733) * C78889) *
                 C51693 +
             ((C56774 - C56775) * C26357 + (C56776 - C56777) * C78889) *
                 C51694) *
                C78813 +
            (((C56775 - C56774) * C26357 + (C56777 - C56776) * C78889) *
                 C51693 +
             ((C56778 - C56779) * C26357 + (C56780 - C56781) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78798 +
          (((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
             ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
                C78813 +
            (((C1749 - C1748) * C26357 + (C1751 - C1750) * C78889) * C51693 +
             ((C1752 - C1753) * C26357 + (C1754 - C1755) * C78889) * C51694) *
                C78697) *
               C4809 +
           ((((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
             ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
                C78813 +
            (((C3957 - C3956) * C26357 + (C3959 - C3958) * C78889) * C51693 +
             ((C10796 - C10797) * C26357 + (C10798 - C10799) * C78889) *
                 C51694) *
                C78697) *
               C4810 +
           ((((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
             ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
                C78813 +
            (((C7464 - C7463) * C26357 + (C7466 - C7465) * C78889) * C51693 +
             ((C78891 * C6032 - C162 * C5934) * C26357 +
              (C78891 * C6038 - C162 * C5946) * C78889) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C26357 +
            (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
             C51694 * C1847) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C26357 +
            (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
             C51780 * C1640) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78813 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C26357 +
            (C51779 * C1642 - C51693 * C1849 + C51780 * C1644 -
             C51694 * C1850) *
                C78889) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C26357 +
            (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
                C78889) *
               C78891 * C78813 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C26357 +
            (C51693 * C1851 - C51779 * C1646 + C51694 * C1852 -
             C51780 * C1648) *
                C78889) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C26357 +
             (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C26357 +
             (C51779 * C1636 - C51693 * C1845 + C51780 * C1638 -
              C51694 * C1847) *
                 C78889) *
                C78891 * C78697) *
               C4809 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C26357 +
             (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C26357 +
             (C51693 * C4065 - C51779 * C3838 + C51694 * C6119 -
              C51780 * C5938) *
                 C78889) *
                C78891 * C78697) *
               C4810 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C26357 +
             (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C26357 +
             (C51779 * C5942 - C51693 * C6121 + C51780 * C5944 -
              C51694 * C6123) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C26357 +
             (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C26357 +
             (C51693 * C1846 - C51779 * C1634 + C51694 * C1848 -
              C51780 * C1640) *
                 C78889) *
                C78891 * C78697) *
               C4809 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C26357 +
             (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                 C78889) *
                C78891 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C26357 +
             (C51779 * C3840 - C51693 * C4066 + C51780 * C5936 -
              C51694 * C6120) *
                 C78889) *
                C78891 * C78697) *
               C4810 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C26357 +
             (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                 C78889) *
                C78891 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C26357 +
             (C51693 * C6122 - C51779 * C5940 + C51694 * C6124 -
              C51780 * C5946) *
                 C78889) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78813 +
           (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
            ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
               C78697) *
              C78592 * C2521 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78813 +
           (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
            ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
               C78697) *
              C78592 * C2522 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78813 +
           (((C53065 - C53064) * C162 + (C53067 - C53066) * C78891) * C51693 +
            ((C53068 - C53069) * C162 + (C53070 - C53071) * C78891) * C51694) *
               C78697) *
              C78592 * C2523 +
          ((((C26357 * C99 - C78889 * C108) * C162 +
             (C26357 * C307 - C78889 * C313) * C78891) *
                C51693 +
            ((C54343 - C54344) * C162 + (C54345 - C54346) * C78891) * C51694) *
               C78813 +
           (((C54344 - C54343) * C162 + (C54346 - C54345) * C78891) * C51693 +
            ((C78889 * C1647 - C26357 * C1632) * C162 +
             (C78889 * C1958 - C26357 * C1950) * C78891) *
                C51694) *
               C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C78889 * C102 - C26357 * C96) * C162 +
              (C78889 * C310 - C26357 * C304) * C78891) *
                 C51693 +
             ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
                C78813 +
            (((C53049 - C53048) * C162 + (C53051 - C53050) * C78891) * C51693 +
             ((C53052 - C53053) * C162 + (C53054 - C53055) * C78891) * C51694) *
                C78697) *
               C4809 +
           ((((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
             ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
                C78813 +
            (((C29765 - C29764) * C162 + (C29767 - C29766) * C78891) * C51693 +
             ((C31737 - C31738) * C162 + (C31739 - C31740) * C78891) * C51694) *
                C78697) *
               C4810 +
           ((((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
             ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
                C78813 +
            (((C31742 - C31741) * C162 + (C31744 - C31743) * C78891) * C51693 +
             ((C31745 - C31746) * C162 + (C31747 - C31748) * C78891) * C51694) *
                C78697) *
               C78842) *
              C78798 +
          (((((C26357 * C97 - C78889 * C104) * C162 +
              (C26357 * C305 - C78889 * C311) * C78891) *
                 C51693 +
             ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
                C78813 +
            (((C53057 - C53056) * C162 + (C53059 - C53058) * C78891) * C51693 +
             ((C53060 - C53061) * C162 + (C53062 - C53063) * C78891) * C51694) *
                C78697) *
               C4809 +
           ((((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
             ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
                C78813 +
            (((C29769 - C29768) * C162 + (C29771 - C29770) * C78891) * C51693 +
             ((C36425 - C36426) * C162 + (C36427 - C36428) * C78891) * C51694) *
                C78697) *
               C4810 +
           ((((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
             ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
                C78813 +
            (((C33167 - C33166) * C162 + (C33169 - C33168) * C78891) * C51693 +
             ((C78889 * C5945 - C26357 * C5934) * C162 +
              (C78889 * C6210 - C26357 * C6204) * C78891) *
                 C51694) *
                C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78813 -
           (C53165 * C51694 + C53164 * C51693) * C78697) *
              C78592 * C2521 +
          ((C53154 * C51693 + C53155 * C51694) * C78697 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
              C78592 * C2522 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78813 -
           (C53157 * C51694 + C53156 * C51693) * C78697) *
              C78592 * C2523 +
          ((C54413 * C51693 +
            (C162 * C1738 - C358 * C1632 - C162 * C1950 + C78891 * C2040) *
                C78889 * C51694) *
               C78697 -
           (C54413 * C51694 + C392 * C78889 * C51693) * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                 C51693 +
             C53164 * C51694) *
                C78813 -
            (C53165 * C51694 + C53164 * C51693) * C78697) *
               C4809 +
           ((C55183 * C51693 + C57025 * C51694) * C78697 -
            (C55183 * C51694 +
             (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                 C78889 * C51693) *
                C78813) *
               C4810 +
           (((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                 C78889 * C51693 +
             C57026 * C51694) *
                C78813 -
            (C57027 * C51694 + C57026 * C51693) * C78697) *
               C78842) *
              C78798 +
          (((C53154 * C51693 + C53155 * C51694) * C78697 -
            (C53154 * C51694 + C390 * C78889 * C51693) * C78813) *
               C4809 +
           ((C1161 * C78889 * C51693 + C55178 * C51694) * C78813 -
            (C11109 * C78889 * C51694 + C55178 * C51693) * C78697) *
               C4810 +
           ((C58414 * C51693 +
             (C162 * C6032 - C358 * C5934 - C162 * C6204 + C78891 * C6290) *
                 C78889 * C51694) *
                C78697 -
            (C58414 * C51694 + C1162 * C78889 * C51693) * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
             C51694 * C1839) *
                C162 +
            (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
             C51694 * C2145) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
             C51780 * C1628) *
                C162 +
            (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
             C51780 * C1946) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78813 +
           ((C51779 * C1629 - C51693 * C1841 + C51780 * C1630 -
             C51694 * C1842) *
                C162 +
            (C51779 * C1947 - C51693 * C2147 + C51780 * C1948 -
             C51694 * C2148) *
                C78891) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
                C162 +
            (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
                C78891) *
               C78889 * C78813 +
           ((C51693 * C1843 - C51779 * C1631 + C51694 * C1844 -
             C51780 * C1632) *
                C162 +
            (C51693 * C2149 - C51779 * C1949 + C51694 * C2150 -
             C51780 * C1950) *
                C78891) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                 C162 +
             (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C1626 - C51693 * C1837 + C51780 * C1627 -
              C51694 * C1839) *
                 C162 +
             (C51779 * C1943 - C51693 * C2143 + C51780 * C1945 -
              C51694 * C2145) *
                 C78891) *
                C78889 * C78697) *
               C4809 +
           (((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                 C162 +
             (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
              C51694 * C4397) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C4061 - C51779 * C3833 + C51694 * C6113 -
              C51780 * C5930) *
                 C162 +
             (C51693 * C4397 - C51779 * C4175 + C51694 * C6365 -
              C51780 * C6199) *
                 C78891) *
                C78889 * C78697) *
               C4810 +
           (((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                 C162 +
             (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
              C51780 * C6201) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C5932 - C51693 * C6115 + C51780 * C5933 -
              C51694 * C6117) *
                 C162 +
             (C51779 * C6201 - C51693 * C6367 + C51780 * C6203 -
              C51694 * C6369) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                 C162 +
             (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C1838 - C51779 * C1625 + C51694 * C1840 -
              C51780 * C1628) *
                 C162 +
             (C51693 * C2144 - C51779 * C1944 + C51694 * C2146 -
              C51780 * C1946) *
                 C78891) *
                C78889 * C78697) *
               C4809 +
           (((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                 C162 +
             (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
              C51780 * C4176) *
                 C78891) *
                C78889 * C78813 +
            ((C51779 * C3834 - C51693 * C4062 + C51780 * C5929 -
              C51694 * C6114) *
                 C162 +
             (C51779 * C4176 - C51693 * C4398 + C51780 * C6200 -
              C51694 * C6366) *
                 C78891) *
                C78889 * C78697) *
               C4810 +
           (((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                 C162 +
             (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
              C51694 * C6368) *
                 C78891) *
                C78889 * C78813 +
            ((C51693 * C6116 - C51779 * C5931 + C51694 * C6118 -
              C51780 * C5934) *
                 C162 +
             (C51693 * C6368 - C51779 * C6202 + C51694 * C6370 -
              C51780 * C6204) *
                 C78891) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezx[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C51779 +
            (C78889 * C497 - C26357 * C491) * C51693 +
            (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
               C78891 * C78813 +
           ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
            (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
               C78891 * C78697) *
              C78592 * C2521 +
          (((C26357 * C97 - C78889 * C104) * C51779 +
            (C26357 * C492 - C78889 * C498) * C51693 +
            (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
               C78891 * C78813 +
           ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
            (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
               C78891 * C78697) *
              C78592 * C2522 +
          (((C78889 * C106 - C26357 * C98) * C51779 +
            (C78889 * C499 - C26357 * C493) * C51693 +
            (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
               C78891 * C78813 +
           ((C53065 - C53064) * C51779 + (C53323 - C53322) * C51693 +
            (C53068 - C53069) * C51780 + (C53324 - C53325) * C51694) *
               C78891 * C78697) *
              C78592 * C2523 +
          (((C26357 * C99 - C78889 * C108) * C51779 +
            (C26357 * C494 - C78889 * C500) * C51693 +
            (C54343 - C54344) * C51780 + (C54546 - C54547) * C51694) *
               C78891 * C78813 +
           ((C54344 - C54343) * C51779 + (C54547 - C54546) * C51693 +
            (C78889 * C1647 - C26357 * C1632) * C51780 +
            (C78889 * C2248 - C26357 * C2240) * C51694) *
               C78891 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C51779 +
             (C78889 * C497 - C26357 * C491) * C51693 +
             (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                C78891 * C78813 +
            ((C53049 - C53048) * C51779 + (C53315 - C53314) * C51693 +
             (C53052 - C53053) * C51780 + (C53316 - C53317) * C51694) *
                C78891 * C78697) *
               C4809 +
           (((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
             (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                C78891 * C78813 +
            ((C29765 - C29764) * C51779 + (C30073 - C30072) * C51693 +
             (C31737 - C31738) * C51780 + (C31981 - C31982) * C51694) *
                C78891 * C78697) *
               C4810 +
           (((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
             (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                C78891 * C78813 +
            ((C31742 - C31741) * C51779 + (C31984 - C31983) * C51693 +
             (C31745 - C31746) * C51780 + (C31985 - C31986) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78798 +
          ((((C26357 * C97 - C78889 * C104) * C51779 +
             (C26357 * C492 - C78889 * C498) * C51693 +
             (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                C78891 * C78813 +
            ((C53057 - C53056) * C51779 + (C53319 - C53318) * C51693 +
             (C53060 - C53061) * C51780 + (C53320 - C53321) * C51694) *
                C78891 * C78697) *
               C4809 +
           (((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
             (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                C78891 * C78813 +
            ((C29769 - C29768) * C51779 + (C30075 - C30074) * C51693 +
             (C36425 - C36426) * C51780 + (C36723 - C36724) * C51694) *
                C78891 * C78697) *
               C4810 +
           (((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
             (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                C78891 * C78813 +
            ((C33167 - C33166) * C51779 + (C33465 - C33464) * C51693 +
             (C78889 * C5945 - C26357 * C5934) * C51780 +
             (C78889 * C6456 - C26357 * C6450) * C51694) *
                C78891 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezy[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C51779 +
            (C78891 * C545 - C162 * C491) * C51693 +
            (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
               C78889 * C78813 +
           ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
            (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
               C78889 * C78697) *
              C78592 * C2521 +
          (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
            (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
               C78889 * C78813 +
           ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
            (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
               C78889 * C78697) *
              C78592 * C2522 +
          (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
            (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
               C78889 * C78813 +
           ((C1757 - C1756) * C51779 + (C2337 - C2336) * C51693 +
            (C1760 - C1761) * C51780 + (C2338 - C2339) * C51694) *
               C78889 * C78697) *
              C78592 * C2523 +
          (((C185 - C184) * C51779 + (C557 - C556) * C51693 +
            (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
               C78889 * C78813 +
           ((C3238 - C3237) * C51779 + (C3660 - C3659) * C51693 +
            (C78891 * C1738 - C162 * C1632) * C51780 +
            (C78891 * C2330 - C162 * C2240) * C51694) *
               C78889 * C78697) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C51779 +
             (C78891 * C545 - C162 * C491) * C51693 +
             (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                C78889 * C78813 +
            ((C52893 - C52892) * C51779 + (C53401 - C53400) * C51693 +
             (C52896 - C52897) * C51780 + (C53402 - C53403) * C51694) *
                C78889 * C78697) *
               C4809 +
           (((C162 * C721 - C78891 * C826) * C51779 +
             (C162 * C1328 - C78891 * C1418) * C51693 +
             (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                C78889 * C78813 +
            ((C54877 - C54876) * C51779 + (C55479 - C55478) * C51693 +
             (C56770 - C56771) * C51780 + (C57250 - C57251) * C51694) *
                C78889 * C78697) *
               C4810 +
           (((C78891 * C828 - C162 * C722) * C51779 +
             (C78891 * C1420 - C162 * C1330) * C51693 +
             (C56774 - C56775) * C51780 + (C57252 - C57253) * C51694) *
                C78889 * C78813 +
            ((C56775 - C56774) * C51779 + (C57253 - C57252) * C51693 +
             (C56778 - C56779) * C51780 + (C57254 - C57255) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78798 +
          ((((C177 - C176) * C51779 + (C553 - C552) * C51693 +
             (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                C78889 * C78813 +
            ((C1749 - C1748) * C51779 + (C2333 - C2332) * C51693 +
             (C1752 - C1753) * C51780 + (C2334 - C2335) * C51694) *
                C78889 * C78697) *
               C4809 +
           (((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
             (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                C78889 * C78813 +
            ((C3957 - C3956) * C51779 + (C4615 - C4614) * C51693 +
             (C10796 - C10797) * C51780 + (C11410 - C11411) * C51694) *
                C78889 * C78697) *
               C4810 +
           (((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
             (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                C78889 * C78813 +
            ((C7464 - C7463) * C51779 + (C8078 - C8077) * C51693 +
             (C78891 * C6032 - C162 * C5934) * C51780 +
             (C78891 * C6536 - C162 * C6450) * C51694) *
                C78889 * C78697) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eezz[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78813 -
           (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
            C51779 * C1837 - C52033 * C1626 - C51779 * C2233 + C51693 * C2414) *
               C78891 * C78889 * C78697) *
              C78592 * C2521 +
          ((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
            C51780 * C1840 - C52034 * C1628 - C51780 * C2236 + C51694 * C2416) *
               C78891 * C78889 * C78697 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78813) *
              C78592 * C2522 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78813 -
           (C51780 * C1842 - C52034 * C1630 - C51780 * C2238 + C51694 * C2418 +
            C51779 * C1841 - C52033 * C1629 - C51779 * C2237 + C51693 * C2417) *
               C78891 * C78889 * C78697) *
              C78592 * C2523 +
          ((C51779 * C1843 - C52033 * C1631 - C51779 * C2239 + C51693 * C2419 +
            C51780 * C1844 - C52034 * C1632 - C51780 * C2240 + C51694 * C2420) *
               C78891 * C78889 * C78697 -
           (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
            C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
               C78891 * C78889 * C78813) *
              C78592 * C78846)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
             C51780 * C1837 - C52034 * C1626 - C51780 * C2233 +
             C51694 * C2414) *
                C78891 * C78889 * C78813 -
            (C51780 * C1839 - C52034 * C1627 - C51780 * C2235 + C51694 * C2415 +
             C51779 * C1837 - C52033 * C1626 - C51779 * C2233 +
             C51693 * C2414) *
                C78891 * C78889 * C78697) *
               C4809 +
           ((C51779 * C4061 - C52033 * C3833 - C51779 * C4503 + C51693 * C4715 +
             C51780 * C6113 - C52034 * C5930 - C51780 * C6445 +
             C51694 * C6612) *
                C78891 * C78889 * C78697 -
            (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
             C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
                C78891 * C78889 * C78813) *
               C4810 +
           ((C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
             C51780 * C6115 - C52034 * C5932 - C51780 * C6447 +
             C51694 * C6614) *
                C78891 * C78889 * C78813 -
            (C51780 * C6117 - C52034 * C5933 - C51780 * C6449 + C51694 * C6615 +
             C51779 * C6115 - C52033 * C5932 - C51779 * C6447 +
             C51693 * C6614) *
                C78891 * C78889 * C78697) *
               C78842) *
              C78798 +
          (((C51779 * C1838 - C52033 * C1625 - C51779 * C2234 + C51693 * C2413 +
             C51780 * C1840 - C52034 * C1628 - C51780 * C2236 +
             C51694 * C2416) *
                C78891 * C78889 * C78697 -
            (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
             C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
                C78891 * C78889 * C78813) *
               C4809 +
           ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
             C51780 * C4062 - C52034 * C3834 - C51780 * C4504 +
             C51694 * C4716) *
                C78891 * C78889 * C78813 -
            (C51780 * C6114 - C52034 * C5929 - C51780 * C6446 + C51694 * C6611 +
             C51779 * C4062 - C52033 * C3834 - C51779 * C4504 +
             C51693 * C4716) *
                C78891 * C78889 * C78697) *
               C4810 +
           ((C51779 * C6116 - C52033 * C5931 - C51779 * C6448 + C51693 * C6613 +
             C51780 * C6118 - C52034 * C5934 - C51780 * C6450 +
             C51694 * C6616) *
                C78891 * C78889 * C78697 -
            (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
             C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
                C78891 * C78889 * C78813) *
               C78842) *
              C78575)) /
            (p * q * std::sqrt(p + q));
    d2eexx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 + C78889 * C1650) *
               C51694) *
              C78891 * C78610 * C78592 * C87 -
          ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 + C78889 * C1649) *
               C51694 +
           (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
               C51693) *
              C78891 * C78610 * C78592 * C88 +
          ((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
               C51693 +
           (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 + C78889 * C1653) *
               C51694) *
              C78891 * C78610 * C78592 * C89 -
          ((C26357 * C1645 - C26358 * C1631 - C26357 * C1646 + C78889 * C1655) *
               C51694 +
           (C26357 * C108 - C26358 * C99 - C26357 * C109 + C78889 * C117) *
               C51693) *
              C78891 * C78610 * C78592 * C90 +
          ((C26357 * C110 - C26358 * C100 - C26357 * C111 + C78889 * C118) *
               C51693 +
           (C26357 * C3165 - C26358 * C3164 - C26357 * C3166 + C78889 * C3167) *
               C51694) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            (C26357 * C1635 - C26358 * C1626 - C26357 * C1636 +
             C78889 * C1650) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C78868 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C717 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C78868 -
           ((C26357 * C1633 - C26358 * C1625 - C26357 * C1634 +
             C78889 * C1649) *
                C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C78883 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C718 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            (C26357 * C1641 - C26358 * C1629 - C26357 * C1642 +
             C78889 * C1653) *
                C51694) *
               C78891 * C78610 * C78883 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C78868 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
                C51693 +
            C52812 * C51694) *
               C78891 * C78610 * C4809 -
           (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C4810 +
           (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C78842) *
              C78880 +
          ((C26812 * C51693 + C29461 * C51694) * C78891 * C78610 * C4810 -
           (C52814 * C51694 +
            (C26357 * C104 - C26358 * C97 - C26357 * C105 + C78889 * C115) *
                C51693) *
               C78891 * C78610 * C4809 -
           (C32870 * C51694 + C26813 * C51693) * C78891 * C78610 * C78842) *
              C78864 +
          (((C26357 * C106 - C26358 * C98 - C26357 * C107 + C78889 * C116) *
                C51693 +
            C52816 * C51694) *
               C78891 * C78610 * C4809 -
           (C29462 * C51694 + C26814 * C51693) * C78891 * C78610 * C4810 +
           (C26815 * C51693 + (C26357 * C7359 - C26358 * C7358 -
                               C26357 * C7360 + C78889 * C7361) *
                                  C51694) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C26357 * C102 - C26358 * C96 - C26357 * C103 + C78889 * C114) *
               C51693 +
           C52812 * C51694) *
              C78891 * C78610 * C5449 -
          (C29460 * C51694 + C26810 * C51693) * C78891 * C78610 * C5450 +
          (C26811 * C51693 + C31492 * C51694) * C78891 * C78610 * C5451 -
          (C33738 * C51694 + C31005 * C51693) * C78891 * C78610 * C5452 +
          (C31006 * C51693 + (C26357 * C33728 - C26358 * C33727 -
                              C26357 * C33729 + C78889 * C33730) *
                                 C51694) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C78891 * C1731 - C162 * C1626) * C26357 +
            (C78891 * C1739 - C162 * C1636) * C78889) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
           ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
              C78610 * C78592 * C88 +
          (((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
           ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
              C78610 * C78592 * C89 +
          (((C185 - C184) * C26357 + (C187 - C186) * C78889) * C51693 +
           ((C3237 - C3238) * C26357 + (C3239 - C3240) * C78889) * C51694) *
              C78610 * C78592 * C90 +
          (((C189 - C188) * C26357 + (C191 - C190) * C78889) * C51693 +
           ((C78891 * C3234 - C162 * C3164) * C26357 +
            (C78891 * C3235 - C162 * C3166) * C78889) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C78891 * C1731 - C162 * C1626) * C26357 +
             (C78891 * C1739 - C162 * C1636) * C78889) *
                C51694) *
               C78610 * C78883 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C162 * C3833 - C78891 * C3947) * C26357 +
             (C162 * C3838 - C78891 * C3951) * C78889) *
                C51694) *
               C78610 * C78868 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C717 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C78883 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C78868 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C78883 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C78868 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78891 * C163 - C162 * C96) * C26357 +
             (C78891 * C169 - C162 * C103) * C78889) *
                C51693 +
            ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) *
                C51694) *
               C78610 * C4809 +
           (((C162 * C721 - C78891 * C826) * C26357 +
             (C162 * C731 - C78891 * C834) * C78889) *
                C51693 +
            ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) *
                C51694) *
               C78610 * C4810 +
           (((C78891 * C828 - C162 * C722) * C26357 +
             (C78891 * C836 - C162 * C733) * C78889) *
                C51693 +
            ((C78891 * C6029 - C162 * C5932) * C26357 +
             (C78891 * C6035 - C162 * C5942) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C177 - C176) * C26357 + (C179 - C178) * C78889) * C51693 +
            ((C1748 - C1749) * C26357 + (C1750 - C1751) * C78889) * C51694) *
               C78610 * C4809 +
           (((C844 - C843) * C26357 + (C846 - C845) * C78889) * C51693 +
            ((C3956 - C3957) * C26357 + (C3958 - C3959) * C78889) * C51694) *
               C78610 * C4810 +
           (((C848 - C847) * C26357 + (C850 - C849) * C78889) * C51693 +
            ((C7463 - C7464) * C26357 + (C7465 - C7466) * C78889) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C181 - C180) * C26357 + (C183 - C182) * C78889) * C51693 +
            ((C1756 - C1757) * C26357 + (C1758 - C1759) * C78889) * C51694) *
               C78610 * C4809 +
           (((C852 - C851) * C26357 + (C854 - C853) * C78889) * C51693 +
            ((C3960 - C3961) * C26357 + (C3962 - C3963) * C78889) * C51694) *
               C78610 * C4810 +
           (((C856 - C855) * C26357 + (C858 - C857) * C78889) * C51693 +
            ((C78891 * C7460 - C162 * C7358) * C26357 +
             (C78891 * C7461 - C162 * C7360) * C78889) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78891 * C163 - C162 * C96) * C26357 +
            (C78891 * C169 - C162 * C103) * C78889) *
               C51693 +
           ((C52892 - C52893) * C26357 + (C52894 - C52895) * C78889) * C51694) *
              C78610 * C5449 +
          (((C162 * C721 - C78891 * C826) * C26357 +
            (C162 * C731 - C78891 * C834) * C78889) *
               C51693 +
           ((C54876 - C54877) * C26357 + (C54878 - C54879) * C78889) * C51694) *
              C78610 * C5450 +
          (((C78891 * C828 - C162 * C722) * C26357 +
            (C78891 * C836 - C162 * C733) * C78889) *
               C51693 +
           ((C78891 * C6029 - C162 * C5932) * C26357 +
            (C78891 * C6035 - C162 * C5942) * C78889) *
               C51694) *
              C78610 * C5451 +
          (((C162 * C5456 - C78891 * C5513) * C26357 +
            (C162 * C5462 - C78891 * C5517) * C78889) *
               C51693 +
           ((C162 * C8251 - C78891 * C8325) * C26357 +
            (C162 * C8254 - C78891 * C8327) * C78889) *
               C51694) *
              C78610 * C5452 +
          (((C78891 * C5515 - C162 * C5457) * C26357 +
            (C78891 * C5519 - C162 * C5464) * C78889) *
               C51693 +
           ((C78891 * C33805 - C162 * C33727) * C26357 +
            (C78891 * C33806 - C162 * C33729) * C78889) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eexz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C26357 +
           (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
               C78889) *
              C78891 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C26357 +
           (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
               C78889) *
              C78891 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C26357 +
           (C51779 * C109 - C51693 * C243 + C51780 * C1646 - C51694 * C1851) *
               C78889) *
              C78891 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C26357 +
           (C51693 * C244 - C51779 * C111 + C51694 * C3307 - C51780 * C3166) *
               C78889) *
              C78891 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C26357 +
            (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C26357 +
            (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C26357 +
            (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C26357 +
            (C51779 * C105 - C51693 * C241 + C51780 * C1634 - C51694 * C1846) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C26357 +
            (C51693 * C941 - C51779 * C729 + C51694 * C4066 - C51780 * C3840) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C26357 +
            (C51779 * C735 - C51693 * C943 + C51780 * C5940 - C51694 * C6122) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C26357 +
            (C51693 * C242 - C51779 * C107 + C51694 * C1849 - C51780 * C1642) *
                C78889) *
               C78891 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C26357 +
            (C51779 * C737 - C51693 * C944 + C51780 * C3842 - C51694 * C4067) *
                C78889) *
               C78891 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C26357 +
            (C51693 * C945 - C51779 * C739 + C51694 * C7565 - C51780 * C7360) *
                C78889) *
               C78891 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C26357 +
           (C51693 * C240 - C51779 * C103 + C51694 * C1845 - C51780 * C1636) *
               C78889) *
              C78891 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C26357 +
           (C51779 * C731 - C51693 * C940 + C51780 * C3838 - C51694 * C4065) *
               C78889) *
              C78891 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C26357 +
           (C51693 * C942 - C51779 * C733 + C51694 * C6121 - C51780 * C5942) *
               C78889) *
              C78891 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C26357 +
           (C51779 * C5462 - C51693 * C5567 + C51780 * C8254 - C51694 * C8397) *
               C78889) *
              C78891 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C26357 +
           (C51693 * C5569 - C51779 * C5464 + C51694 * C33874 -
            C51780 * C33729) *
               C78889) *
              C78891 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyx[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C78889 * C1635 - C26357 * C1626) * C162 +
            (C78889 * C1951 - C26357 * C1943) * C78891) *
               C51694) *
              C78610 * C78592 * C87 +
          (((C26357 * C97 - C78889 * C104) * C162 +
            (C26357 * C305 - C78889 * C311) * C78891) *
               C51693 +
           ((C26357 * C1625 - C78889 * C1633) * C162 +
            (C26357 * C1944 - C78889 * C1952) * C78891) *
               C51694) *
              C78610 * C78592 * C88 +
          (((C78889 * C106 - C26357 * C98) * C162 +
            (C78889 * C312 - C26357 * C306) * C78891) *
               C51693 +
           ((C78889 * C1641 - C26357 * C1629) * C162 +
            (C78889 * C1955 - C26357 * C1947) * C78891) *
               C51694) *
              C78610 * C78592 * C89 +
          (((C26357 * C99 - C78889 * C108) * C162 +
            (C26357 * C307 - C78889 * C313) * C78891) *
               C51693 +
           ((C26357 * C1631 - C78889 * C1645) * C162 +
            (C26357 * C1949 - C78889 * C1957) * C78891) *
               C51694) *
              C78610 * C78592 * C90 +
          (((C78889 * C110 - C26357 * C100) * C162 +
            (C78889 * C314 - C26357 * C308) * C78891) *
               C51693 +
           ((C78889 * C3165 - C26357 * C3164) * C162 +
            (C78889 * C3379 - C26357 * C3378) * C78891) *
               C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C78889 * C1635 - C26357 * C1626) * C162 +
             (C78889 * C1951 - C26357 * C1943) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C717 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C26357 * C1625 - C78889 * C1633) * C162 +
             (C26357 * C1944 - C78889 * C1952) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C718 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C78889 * C1641 - C26357 * C1629) * C162 +
             (C78889 * C1955 - C26357 * C1947) * C78891) *
                C51694) *
               C78610 * C78883 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C78868 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C78889 * C102 - C26357 * C96) * C162 +
             (C78889 * C310 - C26357 * C304) * C78891) *
                C51693 +
            ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
            ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
            ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
               C78610 * C78842) *
              C78880 +
          ((((C26357 * C97 - C78889 * C104) * C162 +
             (C26357 * C305 - C78889 * C311) * C78891) *
                C51693 +
            ((C53056 - C53057) * C162 + (C53058 - C53059) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27061 - C27060) * C162 + (C27063 - C27062) * C78891) * C51693 +
            ((C29768 - C29769) * C162 + (C29770 - C29771) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27065 - C27064) * C162 + (C27067 - C27066) * C78891) * C51693 +
            ((C33166 - C33167) * C162 + (C33168 - C33169) * C78891) * C51694) *
               C78610 * C78842) *
              C78864 +
          ((((C78889 * C106 - C26357 * C98) * C162 +
             (C78889 * C312 - C26357 * C306) * C78891) *
                C51693 +
            ((C53064 - C53065) * C162 + (C53066 - C53067) * C78891) * C51694) *
               C78610 * C4809 +
           (((C27069 - C27068) * C162 + (C27071 - C27070) * C78891) * C51693 +
            ((C29772 - C29773) * C162 + (C29774 - C29775) * C78891) * C51694) *
               C78610 * C4810 +
           (((C27073 - C27072) * C162 + (C27075 - C27074) * C78891) * C51693 +
            ((C78889 * C7359 - C26357 * C7358) * C162 +
             (C78889 * C7669 - C26357 * C7668) * C78891) *
                C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C78889 * C102 - C26357 * C96) * C162 +
            (C78889 * C310 - C26357 * C304) * C78891) *
               C51693 +
           ((C53048 - C53049) * C162 + (C53050 - C53051) * C78891) * C51694) *
              C78610 * C5449 +
          (((C27053 - C27052) * C162 + (C27055 - C27054) * C78891) * C51693 +
           ((C29764 - C29765) * C162 + (C29766 - C29767) * C78891) * C51694) *
              C78610 * C5450 +
          (((C27057 - C27056) * C162 + (C27059 - C27058) * C78891) * C51693 +
           ((C31741 - C31742) * C162 + (C31743 - C31744) * C78891) * C51694) *
              C78610 * C5451 +
          (((C31150 - C31149) * C162 + (C31152 - C31151) * C78891) * C51693 +
           ((C33948 - C33949) * C162 + (C33950 - C33951) * C78891) * C51694) *
              C78610 * C5452 +
          (((C31154 - C31153) * C162 + (C31156 - C31155) * C78891) * C51693 +
           ((C78889 * C33728 - C26357 * C33727) * C162 +
            (C78889 * C33946 - C26357 * C33945) * C78891) *
               C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyy[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
               C78889 * C51694) *
              C78610 * C78592 * C87 -
          (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 * C78592 *
              C88 +
          (C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 * C78592 *
              C89 -
          (C3454 * C78889 * C51694 + C392 * C78889 * C51693) * C78610 * C78592 *
              C90 +
          (C393 * C78889 * C51693 +
           (C162 * C3234 - C358 * C3164 - C162 * C3378 + C78891 * C3446) *
               C78889 * C51694) *
              C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            (C162 * C1731 - C358 * C1626 - C162 * C1943 + C78891 * C2034) *
                C78889 * C51694) *
               C78610 * C78883 -
           ((C162 * C3947 - C358 * C3833 - C162 * C4175 + C78891 * C4281) *
                C78889 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C78868 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C717 +
          ((C1161 * C78889 * C51693 + C4298 * C78889 * C51694) * C78610 *
               C78868 -
           (C2066 * C78889 * C51694 + C390 * C78889 * C51693) * C78610 *
               C78883 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C718 +
          ((C391 * C78889 * C51693 + C2068 * C78889 * C51694) * C78610 *
               C78883 -
           (C4299 * C78889 * C51694 + C1163 * C78889 * C51693) * C78610 *
               C78868 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
                C51693 +
            C53164 * C51694) *
               C78610 * C4809 -
           (C55183 * C51694 +
            (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
                C78889 * C51693) *
               C78610 * C4810 +
           ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
                C78889 * C51693 +
            (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78880 +
          ((C1161 * C78889 * C51693 + C55178 * C51694) * C78610 * C4810 -
           (C53154 * C51694 + C390 * C78889 * C51693) * C78610 * C4809 -
           (C7776 * C78889 * C51694 + C1162 * C78889 * C51693) * C78610 *
               C78842) *
              C78864 +
          ((C391 * C78889 * C51693 + C53156 * C51694) * C78610 * C4809 -
           (C55179 * C51694 + C1163 * C78889 * C51693) * C78610 * C4810 +
           (C1164 * C78889 * C51693 +
            (C162 * C7460 - C358 * C7358 - C162 * C7668 + C78891 * C7768) *
                C78889 * C51694) *
               C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C162 * C163 - C358 * C96 - C162 * C304 + C78891 * C359) * C78889 *
               C51693 +
           C53164 * C51694) *
              C78610 * C5449 -
          (C55183 * C51694 +
           (C162 * C826 - C358 * C721 - C162 * C1038 + C78891 * C1129) *
               C78889 * C51693) *
              C78610 * C5450 +
          ((C162 * C828 - C358 * C722 - C162 * C1040 + C78891 * C1130) *
               C78889 * C51693 +
           (C162 * C6029 - C358 * C5932 - C162 * C6201 + C78891 * C6288) *
               C78889 * C51694) *
              C78610 * C5451 -
          ((C162 * C8325 - C358 * C8251 - C162 * C8465 + C78891 * C8535) *
               C78889 * C51694 +
           (C162 * C5513 - C358 * C5456 - C162 * C5613 + C78891 * C5664) *
               C78889 * C51693) *
              C78610 * C5452 +
          ((C162 * C5515 - C358 * C5457 - C162 * C5615 + C78891 * C5665) *
               C78889 * C51693 +
           (C162 * C33805 - C358 * C33727 - C162 * C33945 + C78891 * C34017) *
               C78889 * C51694) *
              C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eeyz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C78592 * C87 +
          ((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
               C162 +
           (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
               C78891) *
              C78889 * C78610 * C78592 * C88 +
          ((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
               C162 +
           (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
               C78891) *
              C78889 * C78610 * C78592 * C89 +
          ((C51779 * C99 - C51693 * C237 + C51780 * C1631 - C51694 * C1843) *
               C162 +
           (C51779 * C307 - C51693 * C438 + C51780 * C1949 - C51694 * C2149) *
               C78891) *
              C78889 * C78610 * C78592 * C90 +
          ((C51693 * C238 - C51779 * C100 + C51694 * C3306 - C51780 * C3164) *
               C162 +
           (C51693 * C439 - C51779 * C308 + C51694 * C3520 - C51780 * C3378) *
               C78891) *
              C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C717 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C718 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C78883 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C78868 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
                C162 +
            (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
                C162 +
            (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 -
             C51694 * C4397) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
                C162 +
            (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 -
             C51780 * C6201) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78880 +
          (((C51779 * C97 - C51693 * C235 + C51780 * C1625 - C51694 * C1838) *
                C162 +
            (C51779 * C305 - C51693 * C436 + C51780 * C1944 - C51694 * C2144) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51693 * C933 - C51779 * C720 + C51694 * C4062 - C51780 * C3834) *
                C162 +
            (C51693 * C1239 - C51779 * C1039 + C51694 * C4398 -
             C51780 * C4176) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51779 * C723 - C51693 * C935 + C51780 * C5931 - C51694 * C6116) *
                C162 +
            (C51779 * C1041 - C51693 * C1241 + C51780 * C6202 -
             C51694 * C6368) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78864 +
          (((C51693 * C236 - C51779 * C98 + C51694 * C1841 - C51780 * C1629) *
                C162 +
            (C51693 * C437 - C51779 * C306 + C51694 * C2147 - C51780 * C1947) *
                C78891) *
               C78889 * C78610 * C4809 +
           ((C51779 * C724 - C51693 * C936 + C51780 * C3835 - C51694 * C4063) *
                C162 +
            (C51779 * C1042 - C51693 * C1242 + C51780 * C4177 -
             C51694 * C4399) *
                C78891) *
               C78889 * C78610 * C4810 +
           ((C51693 * C937 - C51779 * C725 + C51694 * C7564 - C51780 * C7358) *
                C162 +
            (C51693 * C1243 - C51779 * C1043 + C51694 * C7874 -
             C51780 * C7668) *
                C78891) *
               C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51693 * C234 - C51779 * C96 + C51694 * C1837 - C51780 * C1626) *
               C162 +
           (C51693 * C435 - C51779 * C304 + C51694 * C2143 - C51780 * C1943) *
               C78891) *
              C78889 * C78610 * C5449 +
          ((C51779 * C721 - C51693 * C932 + C51780 * C3833 - C51694 * C4061) *
               C162 +
           (C51779 * C1038 - C51693 * C1238 + C51780 * C4175 - C51694 * C4397) *
               C78891) *
              C78889 * C78610 * C5450 +
          ((C51693 * C934 - C51779 * C722 + C51694 * C6115 - C51780 * C5932) *
               C162 +
           (C51693 * C1240 - C51779 * C1040 + C51694 * C6367 - C51780 * C6201) *
               C78891) *
              C78889 * C78610 * C5451 +
          ((C51779 * C5456 - C51693 * C5563 + C51780 * C8251 - C51694 * C8395) *
               C162 +
           (C51779 * C5613 - C51693 * C5709 + C51780 * C8465 - C51694 * C8603) *
               C78891) *
              C78889 * C78610 * C5452 +
          ((C51693 * C5565 - C51779 * C5457 + C51694 * C33873 -
            C51780 * C33727) *
               C162 +
           (C51693 * C5711 - C51779 * C5615 + C51694 * C34084 -
            C51780 * C33945) *
               C78891) *
              C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
    d2eezx[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C78889 * C1635 - C26357 * C1626) * C51780 +
                     (C78889 * C2241 - C26357 * C2233) * C51694) *
                        C78891 * C78610 * C78592 * C87 +
                    ((C26357 * C97 - C78889 * C104) * C51779 +
                     (C26357 * C492 - C78889 * C498) * C51693 +
                     (C26357 * C1625 - C78889 * C1633) * C51780 +
                     (C26357 * C2234 - C78889 * C2242) * C51694) *
                        C78891 * C78610 * C78592 * C88 +
                    ((C78889 * C106 - C26357 * C98) * C51779 +
                     (C78889 * C499 - C26357 * C493) * C51693 +
                     (C78889 * C1641 - C26357 * C1629) * C51780 +
                     (C78889 * C2245 - C26357 * C2237) * C51694) *
                        C78891 * C78610 * C78592 * C89 +
                    ((C26357 * C99 - C78889 * C108) * C51779 +
                     (C26357 * C494 - C78889 * C500) * C51693 +
                     (C26357 * C1631 - C78889 * C1645) * C51780 +
                     (C26357 * C2239 - C78889 * C2247) * C51694) *
                        C78891 * C78610 * C78592 * C90 +
                    ((C78889 * C110 - C26357 * C100) * C51779 +
                     (C78889 * C501 - C26357 * C495) * C51693 +
                     (C78889 * C3165 - C26357 * C3164) * C51780 +
                     (C78889 * C3590 - C26357 * C3589) * C51694) *
                        C78891 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C78889 * C1635 - C26357 * C1626) * C51780 +
                      (C78889 * C2241 - C26357 * C2233) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C717 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C26357 * C1625 - C78889 * C1633) * C51780 +
                      (C26357 * C2234 - C78889 * C2242) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C718 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C78889 * C1641 - C26357 * C1629) * C51780 +
                      (C78889 * C2245 - C26357 * C2237) * C51694) *
                         C78891 * C78610 * C78883 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C78868 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78889 * C102 - C26357 * C96) * C51779 +
                      (C78889 * C497 - C26357 * C491) * C51693 +
                      (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                      (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                      (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78880 +
                    (((C26357 * C97 - C78889 * C104) * C51779 +
                      (C26357 * C492 - C78889 * C498) * C51693 +
                      (C53056 - C53057) * C51780 + (C53318 - C53319) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27061 - C27060) * C51779 + (C27307 - C27306) * C51693 +
                      (C29768 - C29769) * C51780 + (C30074 - C30075) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27065 - C27064) * C51779 + (C27309 - C27308) * C51693 +
                      (C33166 - C33167) * C51780 + (C33464 - C33465) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78864 +
                    (((C78889 * C106 - C26357 * C98) * C51779 +
                      (C78889 * C499 - C26357 * C493) * C51693 +
                      (C53064 - C53065) * C51780 + (C53322 - C53323) * C51694) *
                         C78891 * C78610 * C4809 +
                     ((C27069 - C27068) * C51779 + (C27311 - C27310) * C51693 +
                      (C29772 - C29773) * C51780 + (C30076 - C30077) * C51694) *
                         C78891 * C78610 * C4810 +
                     ((C27073 - C27072) * C51779 + (C27313 - C27312) * C51693 +
                      (C78889 * C7359 - C26357 * C7358) * C51780 +
                      (C78889 * C7976 - C26357 * C7975) * C51694) *
                         C78891 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78889 * C102 - C26357 * C96) * C51779 +
                     (C78889 * C497 - C26357 * C491) * C51693 +
                     (C53048 - C53049) * C51780 + (C53314 - C53315) * C51694) *
                        C78891 * C78610 * C5449 +
                    ((C27053 - C27052) * C51779 + (C27303 - C27302) * C51693 +
                     (C29764 - C29765) * C51780 + (C30072 - C30073) * C51694) *
                        C78891 * C78610 * C5450 +
                    ((C27057 - C27056) * C51779 + (C27305 - C27304) * C51693 +
                     (C31741 - C31742) * C51780 + (C31983 - C31984) * C51694) *
                        C78891 * C78610 * C5451 +
                    ((C31150 - C31149) * C51779 + (C31292 - C31291) * C51693 +
                     (C33948 - C33949) * C51780 + (C34156 - C34157) * C51694) *
                        C78891 * C78610 * C5452 +
                    ((C31154 - C31153) * C51779 + (C31294 - C31293) * C51693 +
                     (C78889 * C33728 - C26357 * C33727) * C51780 +
                     (C78889 * C34154 - C26357 * C34153) * C51694) *
                        C78891 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezy[74] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C78891 * C1731 - C162 * C1626) * C51780 +
                     (C78891 * C2323 - C162 * C2233) * C51694) *
                        C78889 * C78610 * C78592 * C87 +
                    ((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                     (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                        C78889 * C78610 * C78592 * C88 +
                    ((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                     (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                        C78889 * C78610 * C78592 * C89 +
                    ((C185 - C184) * C51779 + (C557 - C556) * C51693 +
                     (C3237 - C3238) * C51780 + (C3659 - C3660) * C51694) *
                        C78889 * C78610 * C78592 * C90 +
                    ((C189 - C188) * C51779 + (C559 - C558) * C51693 +
                     (C78891 * C3234 - C162 * C3164) * C51780 +
                     (C78891 * C3657 - C162 * C3589) * C51694) *
                        C78889 * C78610 * C78592 * C91)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C78891 * C1731 - C162 * C1626) * C51780 +
                      (C78891 * C2323 - C162 * C2233) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C162 * C3833 - C78891 * C3947) * C51780 +
                      (C162 * C4503 - C78891 * C4609) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C717 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C718 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C78883 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C78868 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   ((((C78891 * C163 - C162 * C96) * C51779 +
                      (C78891 * C545 - C162 * C491) * C51693 +
                      (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C162 * C721 - C78891 * C826) * C51779 +
                      (C162 * C1328 - C78891 * C1418) * C51693 +
                      (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C78891 * C828 - C162 * C722) * C51779 +
                      (C78891 * C1420 - C162 * C1330) * C51693 +
                      (C78891 * C6029 - C162 * C5932) * C51780 +
                      (C78891 * C6533 - C162 * C6447) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78880 +
                    (((C177 - C176) * C51779 + (C553 - C552) * C51693 +
                      (C1748 - C1749) * C51780 + (C2332 - C2333) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C844 - C843) * C51779 + (C1428 - C1427) * C51693 +
                      (C3956 - C3957) * C51780 + (C4614 - C4615) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C848 - C847) * C51779 + (C1430 - C1429) * C51693 +
                      (C7463 - C7464) * C51780 + (C8077 - C8078) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78864 +
                    (((C181 - C180) * C51779 + (C555 - C554) * C51693 +
                      (C1756 - C1757) * C51780 + (C2336 - C2337) * C51694) *
                         C78889 * C78610 * C4809 +
                     ((C852 - C851) * C51779 + (C1432 - C1431) * C51693 +
                      (C3960 - C3961) * C51780 + (C4616 - C4617) * C51694) *
                         C78889 * C78610 * C4810 +
                     ((C856 - C855) * C51779 + (C1434 - C1433) * C51693 +
                      (C78891 * C7460 - C162 * C7358) * C51780 +
                      (C78891 * C8075 - C162 * C7975) * C51694) *
                         C78889 * C78610 * C78842) *
                        C78836)) /
                      (p * q * std::sqrt(p + q)) +
                  (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                   (((C78891 * C163 - C162 * C96) * C51779 +
                     (C78891 * C545 - C162 * C491) * C51693 +
                     (C52892 - C52893) * C51780 + (C53400 - C53401) * C51694) *
                        C78889 * C78610 * C5449 +
                    ((C162 * C721 - C78891 * C826) * C51779 +
                     (C162 * C1328 - C78891 * C1418) * C51693 +
                     (C54876 - C54877) * C51780 + (C55478 - C55479) * C51694) *
                        C78889 * C78610 * C5450 +
                    ((C78891 * C828 - C162 * C722) * C51779 +
                     (C78891 * C1420 - C162 * C1330) * C51693 +
                     (C78891 * C6029 - C162 * C5932) * C51780 +
                     (C78891 * C6533 - C162 * C6447) * C51694) *
                        C78889 * C78610 * C5451 +
                    ((C162 * C5456 - C78891 * C5513) * C51779 +
                     (C162 * C5755 - C78891 * C5805) * C51693 +
                     (C162 * C8251 - C78891 * C8325) * C51780 +
                     (C162 * C8671 - C78891 * C8741) * C51694) *
                        C78889 * C78610 * C5452 +
                    ((C78891 * C5515 - C162 * C5457) * C51779 +
                     (C78891 * C5807 - C162 * C5757) * C51693 +
                     (C78891 * C33805 - C162 * C33727) * C51780 +
                     (C78891 * C34223 - C162 * C34153) * C51694) *
                        C78889 * C78610 * C5453) *
                   C78564) /
                      (p * q * std::sqrt(p + q));
    d2eezz[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C78592 * C87 -
          (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
           C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
              C78891 * C78889 * C78610 * C78592 * C88 +
          (C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
           C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
              C78891 * C78889 * C78610 * C78592 * C89 -
          (C51780 * C1843 - C52034 * C1631 - C51780 * C2239 + C51694 * C2419 +
           C51779 * C237 - C52033 * C99 - C51779 * C494 + C51693 * C605) *
              C78891 * C78889 * C78610 * C78592 * C90 +
          (C51779 * C238 - C52033 * C100 - C51779 * C495 + C51693 * C606 +
           C51780 * C3306 - C52034 * C3164 - C51780 * C3589 + C51694 * C3726) *
              C78891 * C78889 * C78610 * C78592 * C91)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C717 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C78868 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C718 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C78883 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C78868 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
            C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
            C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
            C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
               C78891 * C78889 * C78610 * C78842) *
              C78880 +
          ((C51779 * C933 - C52033 * C720 - C51779 * C1329 + C51693 * C1508 +
            C51780 * C4062 - C52034 * C3834 - C51780 * C4504 + C51694 * C4716) *
               C78891 * C78889 * C78610 * C4810 -
           (C51780 * C1838 - C52034 * C1625 - C51780 * C2234 + C51694 * C2413 +
            C51779 * C235 - C52033 * C97 - C51779 * C492 + C51693 * C603) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C6116 - C52034 * C5931 - C51780 * C6448 + C51694 * C6613 +
            C51779 * C935 - C52033 * C723 - C51779 * C1331 + C51693 * C1511) *
               C78891 * C78889 * C78610 * C78842) *
              C78864 +
          ((C51779 * C236 - C52033 * C98 - C51779 * C493 + C51693 * C604 +
            C51780 * C1841 - C52034 * C1629 - C51780 * C2237 + C51694 * C2417) *
               C78891 * C78889 * C78610 * C4809 -
           (C51780 * C4063 - C52034 * C3835 - C51780 * C4505 + C51694 * C4717 +
            C51779 * C936 - C52033 * C724 - C51779 * C1332 + C51693 * C1512) *
               C78891 * C78889 * C78610 * C4810 +
           (C51779 * C937 - C52033 * C725 - C51779 * C1333 + C51693 * C1513 +
            C51780 * C7564 - C52034 * C7358 - C51780 * C7975 + C51694 * C8176) *
               C78891 * C78889 * C78610 * C78842) *
              C78836)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((C51779 * C234 - C52033 * C96 - C51779 * C491 + C51693 * C602 +
           C51780 * C1837 - C52034 * C1626 - C51780 * C2233 + C51694 * C2414) *
              C78891 * C78889 * C78610 * C5449 -
          (C51780 * C4061 - C52034 * C3833 - C51780 * C4503 + C51694 * C4715 +
           C51779 * C932 - C52033 * C721 - C51779 * C1328 + C51693 * C1509) *
              C78891 * C78889 * C78610 * C5450 +
          (C51779 * C934 - C52033 * C722 - C51779 * C1330 + C51693 * C1510 +
           C51780 * C6115 - C52034 * C5932 - C51780 * C6447 + C51694 * C6614) *
              C78891 * C78889 * C78610 * C5451 -
          (C51780 * C8395 - C52034 * C8251 - C51780 * C8671 + C51694 * C8809 +
           C51779 * C5563 - C52033 * C5456 - C51779 * C5755 + C51693 * C5852) *
              C78891 * C78889 * C78610 * C5452 +
          (C51779 * C5565 - C52033 * C5457 - C51779 * C5757 + C51693 * C5853 +
           C51780 * C33873 - C52034 * C33727 - C51780 * C34153 +
           C51694 * C34290) *
              C78891 * C78889 * C78610 * C5453) *
         C78564) /
            (p * q * std::sqrt(p + q));
}
