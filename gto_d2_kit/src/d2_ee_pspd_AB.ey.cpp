/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_pspd_AB.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
//
void second_derivative_ee_1012_12(const double ae,
                                  const double xA,
                                  const double yA,
                                  const double zA,
                                  const double be,
                                  const double xB,
                                  const double yB,
                                  const double zB,
                                  const double ce,
                                  const double xC,
                                  const double yC,
                                  const double zC,
                                  const double de,
                                  const double xD,
                                  const double yD,
                                  const double zD,
                                  const double* const bs,
                                  double* const d2eexx,
                                  double* const d2eexy,
                                  double* const d2eexz,
                                  double* const d2eeyx,
                                  double* const d2eeyy,
                                  double* const d2eeyz,
                                  double* const d2eezx,
                                  double* const d2eezy,
                                  double* const d2eezz)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C25630 = xA - xB;
    const double C25629 = ae + be;
    const double C25633 = ae * be;
    const double C25647 = yA - yB;
    const double C25650 = zA - zB;
    const double C25681 = p + q;
    const double C25680 = p * q;
    const double C25686 = xP - xQ;
    const double C25685 = bs[2];
    const double C25691 = bs[3];
    const double C25702 = bs[4];
    const double C25723 = bs[5];
    const double C25755 = yP - yQ;
    const double C25781 = zP - zQ;
    const double C87 = bs[0];
    const double C26562 = ce + de;
    const double C26561 = ce * de;
    const double C26560 = xC - xD;
    const double C26584 = yC - yD;
    const double C26600 = zC - zD;
    const double C26703 = std::pow(C25630, 2);
    const double C26704 = 2 * C25629;
    const double C25634 = C25633 * C25630;
    const double C25663 = C25633 * C25647;
    const double C26706 = std::pow(C25647, 2);
    const double C25675 = C25633 * C25650;
    const double C26705 = std::pow(C25650, 2);
    const double C25682 = 2 * C25680;
    const double C25694 = C25686 * ae;
    const double C25693 = C25686 * be;
    const double C25690 = std::pow(C25686, 2);
    const double C25758 = C25755 * be;
    const double C25757 = C25686 * C25755;
    const double C25809 = C25755 * ae;
    const double C25808 = C25755 * C25686;
    const double C25833 = std::pow(C25755, 2);
    const double C25784 = C25781 * be;
    const double C25783 = C25686 * C25781;
    const double C25847 = C25755 * C25781;
    const double C25860 = C25781 * ae;
    const double C25859 = C25781 * C25686;
    const double C25884 = C25781 * C25755;
    const double C25896 = std::pow(C25781, 2);
    const double C26564 = 2 * C26562;
    const double C26574 = std::pow(C26562, 2);
    const double C26566 = C26560 * de;
    const double C26565 = C26560 * ce;
    const double C26563 = std::pow(C26560, 2);
    const double C26585 = std::pow(C26584, 2);
    const double C26637 = C26584 * de;
    const double C26636 = C26584 * ce;
    const double C26601 = std::pow(C26600, 2);
    const double C26665 = C26600 * de;
    const double C26664 = C26600 * ce;
    const double C26727 = C26703 * C25633;
    const double C26728 = std::pow(C26704, -1);
    const double C26730 = C26706 * C25633;
    const double C26729 = C26705 * C25633;
    const double C25684 = C25682 / C25681;
    const double C102 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C25682 / C25681, 2) -
          (bs[1] * C25682) / C25681) *
         C25633) /
        std::pow(C25629, 2);
    const double C88 = -(C25686 * bs[1] * C25682) / C25681;
    const double C580 = -(C25755 * bs[1] * C25682) / C25681;
    const double C1183 = -(C25781 * bs[1] * C25682) / C25681;
    const double C25697 = C25691 * C25694;
    const double C25708 = C25702 * C25694;
    const double C25731 = C25723 * C25694;
    const double C93 = (-(bs[1] * C25694 * C25682) / C25681) / C25629;
    const double C25696 = C25691 * C25693;
    const double C25705 = C25702 * C25693;
    const double C25727 = C25723 * C25693;
    const double C92 = (-(bs[1] * C25693 * C25682) / C25681) / C25629;
    const double C25704 = C25690 * C25702;
    const double C25726 = C25690 * C25723;
    const double C25760 = C25691 * C25758;
    const double C25765 = C25702 * C25758;
    const double C25772 = C25723 * C25758;
    const double C142 = (-(bs[1] * C25758 * C25682) / C25681) / C25629;
    const double C25759 = C25757 * ae;
    const double C25811 = C25691 * C25809;
    const double C25816 = C25702 * C25809;
    const double C25823 = C25723 * C25809;
    const double C255 = (-(bs[1] * C25809 * C25682) / C25681) / C25629;
    const double C25810 = C25808 * ae;
    const double C25835 = C25833 * C25702;
    const double C25840 = C25833 * C25723;
    const double C25786 = C25691 * C25784;
    const double C25791 = C25702 * C25784;
    const double C25798 = C25723 * C25784;
    const double C199 = (-(bs[1] * C25784 * C25682) / C25681) / C25629;
    const double C25785 = C25783 * ae;
    const double C25848 = C25847 * ae;
    const double C25862 = C25691 * C25860;
    const double C25867 = C25702 * C25860;
    const double C25874 = C25723 * C25860;
    const double C405 = (-(bs[1] * C25860 * C25682) / C25681) / C25629;
    const double C25861 = C25859 * ae;
    const double C25885 = C25884 * ae;
    const double C25898 = C25896 * C25702;
    const double C25903 = C25896 * C25723;
    const double C26575 = std::pow(C26564, -1);
    const double C26715 = std::pow(C26564, -2);
    const double C26579 = 2 * C26574;
    const double C26713 = 4 * C26574;
    const double C26567 = C26563 * C26561;
    const double C26586 = C26585 * C26561;
    const double C26602 = C26601 * C26561;
    const double C26740 = C26727 / C25629;
    const double C26742 = C26730 / C25629;
    const double C26741 = C26729 / C25629;
    const double C25687 = std::pow(C25684, 2);
    const double C25692 = -C25684;
    const double C25703 = std::pow(C25684, 4);
    const double C25761 = C25759 * be;
    const double C25812 = C25810 * be;
    const double C25787 = C25785 * be;
    const double C25849 = C25848 * be;
    const double C25863 = C25861 * be;
    const double C25886 = C25885 * be;
    const double C26568 = C26567 / C26562;
    const double C26587 = C26586 / C26562;
    const double C26603 = C26602 / C26562;
    const double C26749 = -C26740;
    const double C26751 = -C26742;
    const double C26750 = -C26741;
    const double C25689 = C25685 * C25687;
    const double C103 = (ae * C25687 * C25685 * C25686 * be +
                         be * C25687 * C25685 * C25686 * ae +
                         C25686 *
                             (C25685 * C25687 + std::pow(C25686, 2) * bs[3] *
                                                    std::pow(-C25684, 3)) *
                             C25633) /
                        std::pow(C25629, 2);
    const double C147 =
        (C25687 * C25685 * C25686 * (yP - yQ) * ae * be) / std::pow(C25629, 2);
    const double C204 =
        (C25687 * C25685 * C25686 * (zP - zQ) * ae * be) / std::pow(C25629, 2);
    const double C260 =
        (C25687 * C25685 * C25755 * C25686 * ae * be) / std::pow(C25629, 2);
    const double C300 =
        ((std::pow(C25755, 2) * C25685 * C25687 - (bs[1] * C25682) / C25681) *
         C25633) /
        std::pow(C25629, 2);
    const double C360 =
        (C25687 * C25685 * C25755 * C25781 * ae * be) / std::pow(C25629, 2);
    const double C410 =
        (C25687 * C25685 * C25781 * C25686 * ae * be) / std::pow(C25629, 2);
    const double C449 =
        (C25687 * C25685 * C25781 * C25755 * ae * be) / std::pow(C25629, 2);
    const double C495 =
        ((std::pow(C25781, 2) * C25685 * C25687 - (bs[1] * C25682) / C25681) *
         C25633) /
        std::pow(C25629, 2);
    const double C94 = (C25686 * C25687 * C25685 * C25693) / C25629 -
                       (be * bs[1] * C25682) / (C25681 * C25629);
    const double C95 = (C25686 * C25687 * C25685 * C25694) / C25629 -
                       (ae * bs[1] * C25682) / (C25681 * C25629);
    const double C143 = (C25686 * C25687 * C25685 * C25758) / C25629;
    const double C200 = (C25686 * C25687 * C25685 * C25784) / C25629;
    const double C256 = (C25686 * C25687 * C25685 * C25809) / C25629;
    const double C406 = (C25686 * C25687 * C25685 * C25860) / C25629;
    const double C587 = (C25755 * C25687 * C25685 * C25693) / C25629;
    const double C588 = (C25755 * C25687 * C25685 * C25694) / C25629;
    const double C653 = (C25755 * C25687 * C25685 * C25758) / C25629 -
                        (be * bs[1] * C25682) / (C25681 * C25629);
    const double C723 = (C25755 * C25687 * C25685 * C25784) / C25629;
    const double C793 = (C25755 * C25687 * C25685 * C25809) / C25629 -
                        (ae * bs[1] * C25682) / (C25681 * C25629);
    const double C985 = (C25755 * C25687 * C25685 * C25860) / C25629;
    const double C1190 = (C25781 * C25687 * C25685 * C25693) / C25629;
    const double C1191 = (C25781 * C25687 * C25685 * C25694) / C25629;
    const double C1256 = (C25781 * C25687 * C25685 * C25758) / C25629;
    const double C1326 = (C25781 * C25687 * C25685 * C25784) / C25629 -
                         (be * bs[1] * C25682) / (C25681 * C25629);
    const double C1396 = (C25781 * C25687 * C25685 * C25809) / C25629;
    const double C1588 = (C25781 * C25687 * C25685 * C25860) / C25629 -
                         (ae * bs[1] * C25682) / (C25681 * C25629);
    const double C25695 = std::pow(C25692, 3);
    const double C25724 = std::pow(C25692, 5);
    const double C25712 = C25703 * C25708;
    const double C25711 = C25703 * C25705;
    const double C25710 = C25704 * C25703;
    const double C25722 = C25702 * C25703;
    const double C25767 = C25703 * C25765;
    const double C25793 = C25703 * C25791;
    const double C25818 = C25703 * C25816;
    const double C25836 = C25835 * C25703;
    const double C25869 = C25703 * C25867;
    const double C25899 = C25898 * C25703;
    const double C25764 = C25702 * C25761;
    const double C25771 = C25723 * C25761;
    const double C25815 = C25702 * C25812;
    const double C25822 = C25723 * C25812;
    const double C25790 = C25702 * C25787;
    const double C25797 = C25723 * C25787;
    const double C25851 = C25702 * C25849;
    const double C25854 = C25723 * C25849;
    const double C25866 = C25702 * C25863;
    const double C25873 = C25723 * C25863;
    const double C25888 = C25702 * C25886;
    const double C25891 = C25723 * C25886;
    const double C26569 = -C26568;
    const double C26588 = -C26587;
    const double C26604 = -C26603;
    const double C26752 = std::exp(C26749);
    const double C26754 = std::exp(C26751);
    const double C26753 = std::exp(C26750);
    const double C89 = C25689 * C25690 - (bs[1] * C25682) / C25681;
    const double C579 = C25755 * C25686 * C25689;
    const double C581 = C25689 * C25833 - (bs[1] * C25682) / C25681;
    const double C1182 = C25781 * C25686 * C25689;
    const double C1184 = C25689 * C25896 - (bs[1] * C25682) / C25681;
    const double C2791 = C25781 * C25755 * C25689;
    const double C25699 = C25695 * C25697;
    const double C25698 = C25695 * C25696;
    const double C25701 = C25691 * C25695;
    const double C25762 = C25695 * C25760;
    const double C25788 = C25695 * C25786;
    const double C25813 = C25695 * C25811;
    const double C25864 = C25695 * C25862;
    const double C148 = (ae * C25687 * C25685 * C25755 * be +
                         C25686 * C25695 * C25691 * C25686 * C25755 * ae * be) /
                        std::pow(C25629, 2);
    const double C205 = (ae * C25687 * C25685 * C25781 * be +
                         C25686 * C25695 * C25691 * C25686 * C25781 * ae * be) /
                        std::pow(C25629, 2);
    const double C261 = (be * C25687 * C25685 * C25755 * ae +
                         C25686 * C25695 * C25691 * C25755 * C25686 * ae * be) /
                        std::pow(C25629, 2);
    const double C301 =
        (C25686 * (C25689 + std::pow(C25755, 2) * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C361 = (C25686 * C25695 * C25691 * C25755 * C25781 * ae * be) /
                        std::pow(C25629, 2);
    const double C362 =
        (C25695 * C25691 * C25849 + C25703 * C25702 * C25849 * C25690) /
        std::pow(C25629, 2);
    const double C411 = (be * C25687 * C25685 * C25781 * ae +
                         C25686 * C25695 * C25691 * C25781 * C25686 * ae * be) /
                        std::pow(C25629, 2);
    const double C450 = (C25686 * C25695 * C25691 * C25781 * C25755 * ae * be) /
                        std::pow(C25629, 2);
    const double C451 =
        (C25695 * C25691 * C25886 + C25703 * C25702 * C25886 * C25690) /
        std::pow(C25629, 2);
    const double C496 =
        (C25686 * (C25689 + std::pow(C25781, 2) * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C598 =
        (C25755 * (C25689 + C25690 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C659 =
        (be * C25687 * C25685 * C25694 + C25755 * C25695 * C25691 * C25761) /
        std::pow(C25629, 2);
    const double C729 =
        (C25755 * C25695 * C25691 * C25787) / std::pow(C25629, 2);
    const double C799 =
        (ae * C25687 * C25685 * C25693 + C25755 * C25695 * C25691 * C25812) /
        std::pow(C25629, 2);
    const double C856 =
        (ae * C25687 * C25685 * C25758 + be * C25687 * C25685 * C25809 +
         C25755 * (C25689 + C25833 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C925 =
        (ae * C25687 * C25685 * C25784 + C25755 * C25695 * C25691 * C25849) /
        std::pow(C25629, 2);
    const double C991 =
        (C25755 * C25695 * C25691 * C25863) / std::pow(C25629, 2);
    const double C1047 =
        (be * C25687 * C25685 * C25860 + C25755 * C25695 * C25691 * C25886) /
        std::pow(C25629, 2);
    const double C1108 =
        (C25755 * (C25689 + C25896 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C1201 =
        (C25781 * (C25689 + C25690 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C1262 =
        (C25781 * C25695 * C25691 * C25761) / std::pow(C25629, 2);
    const double C1332 =
        (be * C25687 * C25685 * C25694 + C25781 * C25695 * C25691 * C25787) /
        std::pow(C25629, 2);
    const double C1402 =
        (C25781 * C25695 * C25691 * C25812) / std::pow(C25629, 2);
    const double C1459 =
        (C25781 * (C25689 + C25833 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C1528 =
        (be * C25687 * C25685 * C25809 + C25781 * C25695 * C25691 * C25849) /
        std::pow(C25629, 2);
    const double C1594 =
        (ae * C25687 * C25685 * C25693 + C25781 * C25695 * C25691 * C25863) /
        std::pow(C25629, 2);
    const double C1650 =
        (ae * C25687 * C25685 * C25758 + C25781 * C25695 * C25691 * C25886) /
        std::pow(C25629, 2);
    const double C1711 =
        (ae * C25687 * C25685 * C25784 + be * C25687 * C25685 * C25860 +
         C25781 * (C25689 + C25896 * C25691 * C25695) * C25633) /
        std::pow(C25629, 2);
    const double C25737 = C25724 * C25731;
    const double C25734 = C25724 * C25727;
    const double C25733 = C25726 * C25724;
    const double C25774 = C25724 * C25772;
    const double C25800 = C25724 * C25798;
    const double C25825 = C25724 * C25823;
    const double C25841 = C25840 * C25724;
    const double C25876 = C25724 * C25874;
    const double C25904 = C25903 * C25724;
    const double C25715 = C25686 * C25712;
    const double C25721 = be * C25712;
    const double C26103 = C25755 * C25712;
    const double C26259 = C25781 * C25712;
    const double C25714 = C25686 * C25711;
    const double C25720 = ae * C25711;
    const double C26113 = C25755 * C25711;
    const double C26271 = C25781 * C25711;
    const double C25732 = C25722 * ae;
    const double C25730 = C25722 * C25690;
    const double C25729 = C25686 * C25722;
    const double C25728 = C25722 * be;
    const double C26187 = C25722 * C25833;
    const double C26186 = C25755 * C25722;
    const double C26287 = C25722 * C25896;
    const double C26286 = C25781 * C25722;
    const double C25770 = ae * C25767;
    const double C25769 = C25686 * C25767;
    const double C26080 = C25755 * C25767;
    const double C26277 = C25781 * C25767;
    const double C25796 = ae * C25793;
    const double C25795 = C25686 * C25793;
    const double C26122 = C25755 * C25793;
    const double C26165 = C25781 * C25793;
    const double C25821 = be * C25818;
    const double C25820 = C25686 * C25818;
    const double C26082 = C25755 * C25818;
    const double C26267 = C25781 * C25818;
    const double C25872 = be * C25869;
    const double C25871 = C25686 * C25869;
    const double C26123 = C25755 * C25869;
    const double C26167 = C25781 * C25869;
    const double C25766 = C25703 * C25764;
    const double C25773 = C25724 * C25771;
    const double C25817 = C25703 * C25815;
    const double C25824 = C25724 * C25822;
    const double C25792 = C25703 * C25790;
    const double C25799 = C25724 * C25797;
    const double C25852 = C25703 * C25851;
    const double C25855 = C25724 * C25854;
    const double C25868 = C25703 * C25866;
    const double C25875 = C25724 * C25873;
    const double C25889 = C25703 * C25888;
    const double C25892 = C25724 * C25891;
    const double C26570 = std::exp(C26569);
    const double C26589 = std::exp(C26588);
    const double C26605 = std::exp(C26604);
    const double C9502 = C26752 * C587;
    const double C18336 = C26752 * C1190;
    const double C25635 = C25634 * C26752;
    const double C83 =
        (-(0 * be) / C25629) / (2 * C25629) -
        ((C26752 - (C25630 * 2 * ae * be * C25630 * C26752) / C25629) * be) /
            C25629;
    const double C73 = -(C26752 * C25630 * be) / C25629;
    const double C74 = C26728 * C26752;
    const double C153 = C26754 * C143;
    const double C18228 = C26754 * C1256;
    const double C25664 = C25663 * C26754;
    const double C141 = -(2 * C25633 * (yA - yB) * C26754) / C25629;
    const double C299 =
        -((C26754 - (C25647 * 2 * C25633 * C25647 * C26754) / C25629) * 2 *
          C25633) /
        C25629;
    const double C9019 =
        (-(0 * be) / C25629) / (2 * C25629) -
        ((C26754 - (C25647 * 2 * C25633 * C25647 * C26754) / C25629) * be) /
            C25629;
    const double C9020 =
        (-(2 * C25633 * C25647 * C26754) / C25629) / (2 * C25629) -
        (0 * be) / C25629;
    const double C8981 = -(C26754 * C25647 * be) / C25629;
    const double C8982 = C26728 * C26754;
    const double C210 = C26753 * C200;
    const double C9444 = C26753 * C723;
    const double C25676 = C25675 * C26753;
    const double C198 = -(2 * C25633 * (zA - zB) * C26753) / C25629;
    const double C494 =
        -((C26753 - (C25650 * 2 * C25633 * C25650 * C26753) / C25629) * 2 *
          C25633) /
        C25629;
    const double C17441 =
        (-(0 * be) / C25629) / (2 * C25629) -
        ((C26753 - (C25650 * 2 * C25633 * C25650 * C26753) / C25629) * be) /
            C25629;
    const double C17442 =
        (-(2 * C25633 * C25650 * C26753) / C25629) / (2 * C25629) -
        (0 * be) / C25629;
    const double C17371 = -(C26753 * C25650 * be) / C25629;
    const double C17372 = C26728 * C26753;
    const double C97 =
        (C25687 * C25685 * C25694 + C25686 * (C25686 * C25699 + C25689 * ae) +
         C25686 * C25689 * ae) /
        C25629;
    const double C586 = (C25755 * (C25686 * C25699 + C25689 * ae)) / C25629;
    const double C590 = (C25687 * C25685 * C25694 + C25699 * C25833) / C25629;
    const double C1189 = (C25781 * (C25686 * C25699 + C25689 * ae)) / C25629;
    const double C1193 = (C25687 * C25685 * C25694 + C25699 * C25896) / C25629;
    const double C2795 = (C25781 * C25755 * C25699) / C25629;
    const double C3893 =
        (2 * C25755 * C25699 + C25755 * (C25699 + C25712 * C25833)) / C25629;
    const double C5778 = (C25781 * (C25699 + C25712 * C25833)) / C25629;
    const double C7150 =
        (2 * C25781 * C25699 + C25781 * (C25699 + C25712 * C25896)) / C25629;
    const double C104 =
        ((C25689 + C25690 * C25691 * C25695) * C25633 +
         ae * (C25686 * C25698 + C25689 * be) +
         be * (C25686 * C25699 + C25689 * ae) +
         C25686 *
             (ae * C25698 + be * C25699 +
              C25686 *
                  (C25691 * C25695 + C25690 * bs[4] * std::pow(C25684, 4)) *
                  C25633)) /
        std::pow(C25629, 2);
    const double C96 =
        (C25687 * C25685 * C25693 + C25686 * (C25686 * C25698 + C25689 * be) +
         C25686 * C25689 * be) /
        C25629;
    const double C585 = (C25755 * (C25686 * C25698 + C25689 * be)) / C25629;
    const double C589 = (C25687 * C25685 * C25693 + C25698 * C25833) / C25629;
    const double C1188 = (C25781 * (C25686 * C25698 + C25689 * be)) / C25629;
    const double C1192 = (C25687 * C25685 * C25693 + C25698 * C25896) / C25629;
    const double C2794 = (C25781 * C25755 * C25698) / C25629;
    const double C3892 =
        (2 * C25755 * C25698 + C25755 * (C25698 + C25711 * C25833)) / C25629;
    const double C5777 = (C25781 * (C25698 + C25711 * C25833)) / C25629;
    const double C7149 =
        (2 * C25781 * C25698 + C25781 * (C25698 + C25711 * C25896)) / C25629;
    const double C25709 = C25701 * ae;
    const double C25707 = C25686 * C25701;
    const double C25706 = C25701 * be;
    const double C25713 = C25701 + C25710;
    const double C25837 = C25701 + C25836;
    const double C25900 = C25701 + C25899;
    const double C26081 = C25755 * C25701;
    const double C26166 = C25781 * C25701;
    const double C302 =
        ((C25689 + C25833 * C25691 * C25695) * C25633 +
         (C25701 + C25833 * C25702 * C25703) * C25633 * C25690) /
        std::pow(C25629, 2);
    const double C497 =
        ((C25689 + C25896 * C25691 * C25695) * C25633 +
         (C25701 + C25896 * C25702 * C25703) * C25633 * C25690) /
        std::pow(C25629, 2);
    const double C90 =
        2 * C25686 * C25689 + C25686 * (C25689 + C25701 * C25690);
    const double C583 = C25755 * (C25689 + C25701 * C25690);
    const double C1186 = C25781 * (C25689 + C25701 * C25690);
    const double C3889 =
        2 * C25755 * C25689 + C25755 * (C25689 + C25701 * C25833);
    const double C5774 = C25781 * (C25689 + C25701 * C25833);
    const double C7146 =
        2 * C25781 * C25689 + C25781 * (C25689 + C25701 * C25896);
    const double C149 =
        (C25695 * C25691 * C25761 + ae * C25686 * C25762 +
         C25686 * (ae * C25762 + C25686 * C25703 * C25702 * C25761)) /
        std::pow(C25629, 2);
    const double C144 = (C25687 * C25685 * C25758 + C25762 * C25690) / C25629;
    const double C145 =
        (2 * C25686 * C25762 + C25686 * (C25762 + C25767 * C25690)) / C25629;
    const double C654 =
        (C25755 * C25686 * C25762 + C25686 * C25689 * be) / C25629;
    const double C655 =
        (C25687 * C25685 * C25758 + C25755 * (C25755 * C25762 + C25689 * be) +
         C25755 * C25689 * be) /
        C25629;
    const double C657 = (C25755 * (C25762 + C25767 * C25690) +
                         (C25689 + C25701 * C25690) * be) /
                        C25629;
    const double C1257 = (C25781 * C25686 * C25762) / C25629;
    const double C1258 = (C25687 * C25685 * C25758 + C25762 * C25896) / C25629;
    const double C1260 = (C25781 * (C25762 + C25767 * C25690)) / C25629;
    const double C2869 = (C25781 * (C25755 * C25762 + C25689 * be)) / C25629;
    const double C7187 =
        (2 * C25781 * C25762 + C25781 * (C25762 + C25767 * C25896)) / C25629;
    const double C206 =
        (C25695 * C25691 * C25787 + ae * C25686 * C25788 +
         C25686 * (ae * C25788 + C25686 * C25703 * C25702 * C25787)) /
        std::pow(C25629, 2);
    const double C201 = (C25687 * C25685 * C25784 + C25788 * C25690) / C25629;
    const double C202 =
        (2 * C25686 * C25788 + C25686 * (C25788 + C25793 * C25690)) / C25629;
    const double C724 = (C25755 * C25686 * C25788) / C25629;
    const double C725 = (C25687 * C25685 * C25784 + C25788 * C25833) / C25629;
    const double C727 = (C25755 * (C25788 + C25793 * C25690)) / C25629;
    const double C1327 =
        (C25781 * C25686 * C25788 + C25686 * C25689 * be) / C25629;
    const double C1328 =
        (C25687 * C25685 * C25784 + C25781 * (C25781 * C25788 + C25689 * be) +
         C25781 * C25689 * be) /
        C25629;
    const double C1330 = (C25781 * (C25788 + C25793 * C25690) +
                          (C25689 + C25701 * C25690) * be) /
                         C25629;
    const double C2945 =
        (C25781 * C25755 * C25788 + C25755 * C25689 * be) / C25629;
    const double C3968 =
        (2 * C25755 * C25788 + C25755 * (C25788 + C25793 * C25833)) / C25629;
    const double C5885 = (C25781 * (C25788 + C25793 * C25833) +
                          (C25689 + C25701 * C25833) * be) /
                         C25629;
    const double C262 =
        (C25695 * C25691 * C25812 + be * C25686 * C25813 +
         C25686 * (be * C25813 + C25686 * C25703 * C25702 * C25812)) /
        std::pow(C25629, 2);
    const double C257 = (C25687 * C25685 * C25809 + C25813 * C25690) / C25629;
    const double C258 =
        (2 * C25686 * C25813 + C25686 * (C25813 + C25818 * C25690)) / C25629;
    const double C794 =
        (C25755 * C25686 * C25813 + C25686 * C25689 * ae) / C25629;
    const double C795 =
        (C25687 * C25685 * C25809 + C25755 * (C25755 * C25813 + C25689 * ae) +
         C25755 * C25689 * ae) /
        C25629;
    const double C797 = (C25755 * (C25813 + C25818 * C25690) +
                         (C25689 + C25701 * C25690) * ae) /
                        C25629;
    const double C1397 = (C25781 * C25686 * C25813) / C25629;
    const double C1398 = (C25687 * C25685 * C25809 + C25813 * C25896) / C25629;
    const double C1400 = (C25781 * (C25813 + C25818 * C25690)) / C25629;
    const double C3021 = (C25781 * (C25755 * C25813 + C25689 * ae)) / C25629;
    const double C7263 =
        (2 * C25781 * C25813 + C25781 * (C25813 + C25818 * C25896)) / C25629;
    const double C412 =
        (C25695 * C25691 * C25863 + be * C25686 * C25864 +
         C25686 * (be * C25864 + C25686 * C25703 * C25702 * C25863)) /
        std::pow(C25629, 2);
    const double C407 = (C25687 * C25685 * C25860 + C25864 * C25690) / C25629;
    const double C408 =
        (2 * C25686 * C25864 + C25686 * (C25864 + C25869 * C25690)) / C25629;
    const double C986 = (C25755 * C25686 * C25864) / C25629;
    const double C987 = (C25687 * C25685 * C25860 + C25864 * C25833) / C25629;
    const double C989 = (C25755 * (C25864 + C25869 * C25690)) / C25629;
    const double C1589 =
        (C25781 * C25686 * C25864 + C25686 * C25689 * ae) / C25629;
    const double C1590 =
        (C25687 * C25685 * C25860 + C25781 * (C25781 * C25864 + C25689 * ae) +
         C25781 * C25689 * ae) /
        C25629;
    const double C1592 = (C25781 * (C25864 + C25869 * C25690) +
                          (C25689 + C25701 * C25690) * ae) /
                         C25629;
    const double C3240 =
        (C25781 * C25755 * C25864 + C25755 * C25689 * ae) / C25629;
    const double C4116 =
        (2 * C25755 * C25864 + C25755 * (C25864 + C25869 * C25833)) / C25629;
    const double C6097 = (C25781 * (C25864 + C25869 * C25833) +
                          (C25689 + C25701 * C25833) * ae) /
                         C25629;
    const double C155 = C26754 * C148;
    const double C212 = C26753 * C205;
    const double C309 = C26754 * C301;
    const double C366 = C26753 * C361;
    const double C369 = C26753 * C362;
    const double C455 = C26754 * C450;
    const double C458 = C26754 * C451;
    const double C504 = C26753 * C496;
    const double C9315 = C26752 * C598;
    const double C9446 = C26753 * C729;
    const double C9504 = C26752 * C799;
    const double C9618 = C26753 * C925;
    const double C9672 = C26752 * C991;
    const double C9783 = C26753 * C1108;
    const double C18153 = C26752 * C1201;
    const double C18230 = C26754 * C1262;
    const double C18338 = C26752 * C1402;
    const double C18405 = C26754 * C1459;
    const double C18520 = C26752 * C1594;
    const double C18578 = C26754 * C1650;
    const double C25741 = C25686 * C25737;
    const double C26173 = C25737 * C25833;
    const double C26239 = C25755 * C25737;
    const double C26261 = C25737 * C25896;
    const double C25740 = C25686 * C25734;
    const double C26179 = C25734 * C25833;
    const double C26245 = C25755 * C25734;
    const double C26273 = C25734 * C25896;
    const double C25739 = C25722 + C25733;
    const double C25776 = C25774 * C25690;
    const double C26072 = C25686 * C25774;
    const double C26185 = C25755 * C25774;
    const double C26279 = C25774 * C25896;
    const double C25802 = C25800 * C25690;
    const double C26088 = C25686 * C25800;
    const double C26203 = C25800 * C25833;
    const double C26249 = C25755 * C25800;
    const double C26285 = C25781 * C25800;
    const double C25827 = C25825 * C25690;
    const double C26074 = C25686 * C25825;
    const double C26188 = C25755 * C25825;
    const double C26268 = C25825 * C25896;
    const double C25842 = C25722 + C25841;
    const double C25878 = C25876 * C25690;
    const double C26094 = C25686 * C25876;
    const double C26209 = C25876 * C25833;
    const double C26251 = C25755 * C25876;
    const double C26288 = C25781 * C25876;
    const double C25905 = C25722 + C25904;
    const double C4247 = (C25755 * C25699 + C26103 * C25896) / C25629;
    const double C25725 = C25720 + C25721;
    const double C4246 = (C25755 * C25698 + C26113 * C25896) / C25629;
    const double C25736 = C25701 + C25730;
    const double C25738 = C25729 * ae;
    const double C25735 = C25729 * be;
    const double C26073 = C25755 * C25729;
    const double C26160 = C25781 * C25729;
    const double C26192 = C25701 + C26187;
    const double C26194 = C26186 * ae;
    const double C26191 = C26186 * be;
    const double C26250 = C25781 * C26186;
    const double C26292 = C25701 + C26287;
    const double C26294 = C26286 * ae;
    const double C26291 = C26286 * be;
    const double C1259 = (C25686 * C25762 + C25769 * C25896) / C25629;
    const double C726 = (C25686 * C25788 + C25795 * C25833) / C25629;
    const double C26183 = C25770 + C25821;
    const double C1399 = (C25686 * C25813 + C25820 * C25896) / C25629;
    const double C26283 = C25796 + C25872;
    const double C988 = (C25686 * C25864 + C25871 * C25833) / C25629;
    const double C150 =
        (2 * (ae * C25762 + C25686 * C25766) + ae * (C25762 + C25767 * C25690) +
         C25686 *
             (C25766 + ae * C25686 * C25767 +
              C25686 * (ae * C25767 + C25686 * C25724 * C25723 * C25761))) /
        std::pow(C25629, 2);
    const double C660 = (be * (C25686 * C25699 + C25689 * ae) +
                         C25755 * (ae * C25762 + C25686 * C25766)) /
                        std::pow(C25629, 2);
    const double C661 = (C25695 * C25691 * C25761 + be * C25755 * C25699 +
                         C25755 * (be * C25699 + C25755 * C25766)) /
                        std::pow(C25629, 2);
    const double C1263 =
        (C25781 * (ae * C25762 + C25686 * C25766)) / std::pow(C25629, 2);
    const double C1264 =
        (C25695 * C25691 * C25761 + C25766 * C25896) / std::pow(C25629, 2);
    const double C2872 =
        (C25781 * (be * C25699 + C25755 * C25766)) / std::pow(C25629, 2);
    const double C25775 = C25686 * C25773;
    const double C26172 = C25755 * C25773;
    const double C3932 =
        (2 * (be * C25699 + C25755 * C25766) + be * (C25699 + C25712 * C25833) +
         C25755 * (C25766 + be * C25755 * C25712 +
                   C25755 * (C25721 + C25755 * C25773))) /
        std::pow(C25629, 2);
    const double C4302 =
        (be * C25699 + C25755 * C25766 + (C25721 + C25755 * C25773) * C25896) /
        std::pow(C25629, 2);
    const double C5833 = (C25781 * (C25766 + be * C26103 +
                                    C25755 * (C25721 + C25755 * C25773))) /
                         std::pow(C25629, 2);
    const double C7189 =
        (2 * C25781 * C25766 + C25781 * (C25766 + C25773 * C25896)) /
        std::pow(C25629, 2);
    const double C23862 =
        (3 * (C25766 + C25773 * C25896) +
         C25781 * (2 * C25781 * C25773 +
                   C25781 * (C25773 +
                             std::pow(C25684, 6) * bs[6] * C25761 * C25896))) /
        std::pow(C25629, 2);
    const double C263 =
        (2 * (be * C25813 + C25686 * C25817) + be * (C25813 + C25818 * C25690) +
         C25686 *
             (C25817 + be * C25686 * C25818 +
              C25686 * (be * C25818 + C25686 * C25724 * C25723 * C25812))) /
        std::pow(C25629, 2);
    const double C800 = (ae * (C25686 * C25698 + C25689 * be) +
                         C25755 * (be * C25813 + C25686 * C25817)) /
                        std::pow(C25629, 2);
    const double C801 = (C25695 * C25691 * C25812 + ae * C25755 * C25698 +
                         C25755 * (ae * C25698 + C25755 * C25817)) /
                        std::pow(C25629, 2);
    const double C1403 =
        (C25781 * (be * C25813 + C25686 * C25817)) / std::pow(C25629, 2);
    const double C1404 =
        (C25695 * C25691 * C25812 + C25817 * C25896) / std::pow(C25629, 2);
    const double C3024 =
        (ae * C25781 * C25698 + C25755 * C25781 * C25817) / std::pow(C25629, 2);
    const double C25826 = C25686 * C25824;
    const double C26178 = C25755 * C25824;
    const double C26226 = C25781 * C25824;
    const double C4008 =
        (2 * (ae * C25698 + C25755 * C25817) + ae * (C25698 + C25711 * C25833) +
         C25755 * (C25817 + ae * C25755 * C25711 +
                   C25755 * (C25720 + C25755 * C25824))) /
        std::pow(C25629, 2);
    const double C4410 = (ae * (C25698 + C25711 * C25896) +
                          C25755 * (C25817 + C25824 * C25896)) /
                         std::pow(C25629, 2);
    const double C5941 =
        (C25781 * C25817 + ae * C25781 * C26113 +
         C25755 * (ae * C25781 * C25711 + C25755 * C25781 * C25824)) /
        std::pow(C25629, 2);
    const double C7265 =
        (2 * C25781 * C25817 + C25781 * (C25817 + C25824 * C25896)) /
        std::pow(C25629, 2);
    const double C12812 =
        (C25817 + C25824 * C25896 + ae * (C26113 + C25755 * C25734 * C25896) +
         C25755 * (ae * (C25711 + C25734 * C25896) +
                   C25755 * (C25824 +
                             std::pow(C25684, 6) * bs[6] * C25812 * C25896))) /
        std::pow(C25629, 2);
    const double C207 =
        (2 * (ae * C25788 + C25686 * C25792) + ae * (C25788 + C25793 * C25690) +
         C25686 *
             (C25792 + ae * C25686 * C25793 +
              C25686 * (ae * C25793 + C25686 * C25724 * C25723 * C25787))) /
        std::pow(C25629, 2);
    const double C730 =
        (C25755 * (ae * C25788 + C25686 * C25792)) / std::pow(C25629, 2);
    const double C731 =
        (C25695 * C25691 * C25787 + C25792 * C25833) / std::pow(C25629, 2);
    const double C1333 = (be * (C25686 * C25699 + C25689 * ae) +
                          C25781 * (ae * C25788 + C25686 * C25792)) /
                         std::pow(C25629, 2);
    const double C1334 = (C25695 * C25691 * C25787 + be * C25781 * C25699 +
                          C25781 * (be * C25699 + C25781 * C25792)) /
                         std::pow(C25629, 2);
    const double C2948 =
        (be * C25755 * C25699 + C25781 * C25755 * C25792) / std::pow(C25629, 2);
    const double C25801 = C25686 * C25799;
    const double C26238 = C25755 * C25799;
    const double C26260 = C25781 * C25799;
    const double C3970 =
        (2 * C25755 * C25792 + C25755 * (C25792 + C25799 * C25833)) /
        std::pow(C25629, 2);
    const double C4356 = (C25755 * C25792 + be * C25781 * C26103 +
                          C25781 * (be * C26103 + C25781 * C25755 * C25799)) /
                         std::pow(C25629, 2);
    const double C5887 = (be * (C25699 + C25712 * C25833) +
                          C25781 * (C25792 + C25799 * C25833)) /
                         std::pow(C25629, 2);
    const double C7227 =
        (2 * (be * C25699 + C25781 * C25792) + be * (C25699 + C25712 * C25896) +
         C25781 * (C25792 + be * C25781 * C25712 +
                   C25781 * (C25721 + C25781 * C25799))) /
        std::pow(C25629, 2);
    const double C12359 =
        (3 * (C25792 + C25799 * C25833) +
         C25755 * (2 * C25755 * C25799 +
                   C25755 * (C25799 +
                             std::pow(C25684, 6) * bs[6] * C25787 * C25833))) /
        std::pow(C25629, 2);
    const double C363 =
        (2 * C25686 * C25852 +
         C25686 * (C25852 + C25724 * C25723 * C25849 * C25690)) /
        std::pow(C25629, 2);
    const double C926 =
        (ae * C25686 * C25788 + C25755 * C25686 * C25852) / std::pow(C25629, 2);
    const double C927 = (C25695 * C25691 * C25849 + ae * C25755 * C25788 +
                         C25755 * (ae * C25788 + C25755 * C25852)) /
                        std::pow(C25629, 2);
    const double C1529 =
        (be * C25686 * C25813 + C25781 * C25686 * C25852) / std::pow(C25629, 2);
    const double C1530 = (C25695 * C25691 * C25849 + be * C25781 * C25813 +
                          C25781 * (be * C25813 + C25781 * C25852)) /
                         std::pow(C25629, 2);
    const double C3169 = (ae * (C25781 * C25788 + C25689 * be) +
                          C25755 * (be * C25813 + C25781 * C25852)) /
                         std::pow(C25629, 2);
    const double C26087 = C25686 * C25855;
    const double C26202 = C25755 * C25855;
    const double C26230 = C25781 * C25855;
    const double C364 =
        (3 * (C25852 + C25855 * C25690) +
         C25686 * (2 * C25686 * C25855 +
                   C25686 * (C25855 +
                             std::pow(C25684, 6) * bs[6] * C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C928 = (C25686 * C25852 + ae * C25755 * C25795 +
                         C25755 * (ae * C25795 + C25755 * C25686 * C25855)) /
                        std::pow(C25629, 2);
    const double C929 = (ae * (C25788 + C25793 * C25690) +
                         C25755 * (C25852 + C25855 * C25690)) /
                        std::pow(C25629, 2);
    const double C1531 = (C25686 * C25852 + be * C25781 * C25820 +
                          C25781 * (be * C25820 + C25781 * C25686 * C25855)) /
                         std::pow(C25629, 2);
    const double C1532 = (be * (C25813 + C25818 * C25690) +
                          C25781 * (C25852 + C25855 * C25690)) /
                         std::pow(C25629, 2);
    const double C4080 =
        (2 * (ae * C25788 + C25755 * C25852) + ae * (C25788 + C25793 * C25833) +
         C25755 * (C25852 + ae * C25755 * C25793 +
                   C25755 * (C25796 + C25755 * C25855))) /
        std::pow(C25629, 2);
    const double C7337 =
        (2 * (be * C25813 + C25781 * C25852) + be * (C25813 + C25818 * C25896) +
         C25781 * (C25852 + be * C25781 * C25818 +
                   C25781 * (C25821 + C25781 * C25855))) /
        std::pow(C25629, 2);
    const double C413 =
        (2 * (be * C25864 + C25686 * C25868) + be * (C25864 + C25869 * C25690) +
         C25686 *
             (C25868 + be * C25686 * C25869 +
              C25686 * (be * C25869 + C25686 * C25724 * C25723 * C25863))) /
        std::pow(C25629, 2);
    const double C992 =
        (C25755 * (be * C25864 + C25686 * C25868)) / std::pow(C25629, 2);
    const double C993 =
        (C25695 * C25691 * C25863 + C25868 * C25833) / std::pow(C25629, 2);
    const double C1595 = (ae * (C25686 * C25698 + C25689 * be) +
                          C25781 * (be * C25864 + C25686 * C25868)) /
                         std::pow(C25629, 2);
    const double C1596 = (C25695 * C25691 * C25863 + ae * C25781 * C25698 +
                          C25781 * (ae * C25698 + C25781 * C25868)) /
                         std::pow(C25629, 2);
    const double C3243 =
        (ae * C25755 * C25698 + C25781 * C25755 * C25868) / std::pow(C25629, 2);
    const double C25877 = C25686 * C25875;
    const double C26244 = C25755 * C25875;
    const double C26272 = C25781 * C25875;
    const double C4118 =
        (2 * C25755 * C25868 + C25755 * (C25868 + C25875 * C25833)) /
        std::pow(C25629, 2);
    const double C4568 = (C25755 * C25868 + ae * C25781 * C26113 +
                          C25781 * (ae * C26113 + C25781 * C25755 * C25875)) /
                         std::pow(C25629, 2);
    const double C6099 = (ae * (C25698 + C25711 * C25833) +
                          C25781 * (C25868 + C25875 * C25833)) /
                         std::pow(C25629, 2);
    const double C7375 =
        (2 * (ae * C25698 + C25781 * C25868) + ae * (C25698 + C25711 * C25896) +
         C25781 * (C25868 + ae * C25781 * C25711 +
                   C25781 * (C25720 + C25781 * C25875))) /
        std::pow(C25629, 2);
    const double C12511 =
        (3 * (C25868 + C25875 * C25833) +
         C25755 * (2 * C25755 * C25875 +
                   C25755 * (C25875 +
                             std::pow(C25684, 6) * bs[6] * C25863 * C25833))) /
        std::pow(C25629, 2);
    const double C452 =
        (2 * C25686 * C25889 +
         C25686 * (C25889 + C25724 * C25723 * C25886 * C25690)) /
        std::pow(C25629, 2);
    const double C1048 =
        (be * C25686 * C25864 + C25755 * C25686 * C25889) / std::pow(C25629, 2);
    const double C1049 = (C25695 * C25691 * C25886 + be * C25755 * C25864 +
                          C25755 * (be * C25864 + C25755 * C25889)) /
                         std::pow(C25629, 2);
    const double C1651 =
        (ae * C25686 * C25762 + C25781 * C25686 * C25889) / std::pow(C25629, 2);
    const double C1652 = (C25695 * C25691 * C25886 + ae * C25781 * C25762 +
                          C25781 * (ae * C25762 + C25781 * C25889)) /
                         std::pow(C25629, 2);
    const double C3312 = (ae * (C25755 * C25762 + C25689 * be) +
                          C25781 * (be * C25864 + C25755 * C25889)) /
                         std::pow(C25629, 2);
    const double C26093 = C25686 * C25892;
    const double C26208 = C25755 * C25892;
    const double C26278 = C25781 * C25892;
    const double C453 =
        (3 * (C25889 + C25892 * C25690) +
         C25686 * (2 * C25686 * C25892 +
                   C25686 * (C25892 +
                             std::pow(C25684, 6) * bs[6] * C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C1050 = (C25686 * C25889 + be * C25755 * C25871 +
                          C25755 * (be * C25871 + C25755 * C25686 * C25892)) /
                         std::pow(C25629, 2);
    const double C1051 = (be * (C25864 + C25869 * C25690) +
                          C25755 * (C25889 + C25892 * C25690)) /
                         std::pow(C25629, 2);
    const double C1653 = (C25686 * C25889 + ae * C25781 * C25769 +
                          C25781 * (ae * C25769 + C25781 * C25686 * C25892)) /
                         std::pow(C25629, 2);
    const double C1654 = (ae * (C25762 + C25767 * C25690) +
                          C25781 * (C25889 + C25892 * C25690)) /
                         std::pow(C25629, 2);
    const double C4154 =
        (2 * (be * C25864 + C25755 * C25889) + be * (C25864 + C25869 * C25833) +
         C25755 * (C25889 + be * C25755 * C25869 +
                   C25755 * (C25872 + C25755 * C25892))) /
        std::pow(C25629, 2);
    const double C7411 =
        (2 * (ae * C25762 + C25781 * C25889) + ae * (C25762 + C25767 * C25896) +
         C25781 * (C25889 + ae * C25781 * C25767 +
                   C25781 * (C25770 + C25781 * C25892))) /
        std::pow(C25629, 2);
    const double C26571 = C26570 * C26565;
    const double C26576 = C26575 * C26570;
    const double C26710 = C26570 * C26566;
    const double C26707 = C26570 / C26564;
    const double C3448 = C26715 * C26570;
    const double C26638 = C26589 * C26636;
    const double C26641 = C26575 * C26589;
    const double C26719 = C26589 * C26637;
    const double C26714 = C26589 / C26564;
    const double C576 = C26715 * C26589;
    const double C26666 = C26605 * C26664;
    const double C26669 = C26575 * C26605;
    const double C26723 = C26605 * C26665;
    const double C26716 = C26605 / C26564;
    const double C1181 = C26715 * C26605;
    const double C84 =
        -(((-4 * C25635) / C25629 -
           (C25630 * (C26752 - (C25630 * 2 * C25635) / C25629) * 2 * C25633) /
               C25629) *
          be) /
        C25629;
    const double C85 =
        (-(2 * C25635) / C25629) / (2 * C25629) - (0 * be) / C25629;
    const double C86 =
        (-((C26752 - (C25630 * 2 * C25635) / C25629) * 2 * C25633) / C25629) /
        (2 * C25629);
    const double C8983 = -(2 * C25635) / C25629;
    const double C8984 =
        -((C26752 - (C25630 * 2 * C25635) / C25629) * 2 * C25633) / C25629;
    const double C9123 =
        -(((-4 * C25664) / C25629 -
           (C25647 * (C26754 - (C25647 * 2 * C25664) / C25629) * 2 * C25633) /
               C25629) *
          be) /
        C25629;
    const double C9124 =
        (-((C26754 - (C25647 * 2 * C25664) / C25629) * 2 * C25633) / C25629) /
        (2 * C25629);
    const double C157 = C141 * C89;
    const double C156 = C141 * C95;
    const double C154 = C141 * C88;
    const double C308 = C141 * C256;
    const double C306 = C141 * C143;
    const double C456 = C141 * C406;
    const double C666 = C141 * C579;
    const double C1269 = C141 * C1182;
    const double C18232 = C141 * C1184;
    const double C18231 = C141 * C1191;
    const double C18229 = C141 * C1183;
    const double C18404 = C141 * C1396;
    const double C18402 = C141 * C1256;
    const double C18579 = C141 * C1588;
    const double C19678 = C141 * C2791;
    const double C311 = C299 * C89;
    const double C307 = C299 * C88;
    const double C863 = C299 * C579;
    const double C1466 = C299 * C1182;
    const double C18407 = C299 * C1184;
    const double C18403 = C299 * C1183;
    const double C19881 = C299 * C2791;
    const double C17647 =
        -(((-4 * C25676) / C25629 -
           (C25650 * (C26753 - (C25650 * 2 * C25676) / C25629) * 2 * C25633) /
               C25629) *
          be) /
        C25629;
    const double C17648 =
        (-((C26753 - (C25650 * 2 * C25676) / C25629) * 2 * C25633) / C25629) /
        (2 * C25629);
    const double C214 = C198 * C89;
    const double C213 = C198 * C95;
    const double C211 = C198 * C88;
    const double C367 = C198 * C256;
    const double C503 = C198 * C406;
    const double C501 = C198 * C200;
    const double C736 = C198 * C579;
    const double C1339 = C198 * C1182;
    const double C9448 = C198 * C581;
    const double C9447 = C198 * C588;
    const double C9445 = C198 * C580;
    const double C9619 = C198 * C793;
    const double C9782 = C198 * C985;
    const double C9780 = C198 * C723;
    const double C11372 = C198 * C2791;
    const double C506 = C494 * C89;
    const double C502 = C494 * C88;
    const double C1115 = C494 * C579;
    const double C1718 = C494 * C1182;
    const double C9785 = C494 * C581;
    const double C9781 = C494 * C580;
    const double C11787 = C494 * C2791;
    const double C159 = C141 * C97;
    const double C216 = C198 * C97;
    const double C668 = C141 * C586;
    const double C738 = C198 * C586;
    const double C9450 = C198 * C590;
    const double C1271 = C141 * C1189;
    const double C1341 = C198 * C1189;
    const double C18234 = C141 * C1193;
    const double C11374 = C198 * C2795;
    const double C19680 = C141 * C2795;
    const double C12364 = C198 * C3893;
    const double C14298 = C198 * C5778;
    const double C22522 = C141 * C5778;
    const double C23867 = C141 * C7150;
    const double C9511 = C26752 * C585;
    const double C9507 = C26752 * C589;
    const double C18345 = C26752 * C1188;
    const double C18341 = C26752 * C1192;
    const double C11443 = C26752 * C2794;
    const double C12401 = C26752 * C3892;
    const double C14351 = C26752 * C5777;
    const double C23940 = C26752 * C7149;
    const double C25718 = C25715 + C25709;
    const double C26084 = C26082 + C25709;
    const double C26169 = C26167 + C25709;
    const double C3170 = (ae * (C25781 * C25795 + C25707 * be) +
                          C25755 * (be * C25820 + C25781 * C25686 * C25855)) /
                         std::pow(C25629, 2);
    const double C3313 = (ae * (C25755 * C25769 + C25707 * be) +
                          C25781 * (be * C25871 + C25755 * C25686 * C25892)) /
                         std::pow(C25629, 2);
    const double C656 =
        (C25686 * C25762 + C25755 * (C25755 * C25769 + C25707 * be) +
         C25755 * C25707 * be) /
        C25629;
    const double C796 =
        (C25686 * C25813 + C25755 * (C25755 * C25820 + C25707 * ae) +
         C25755 * C25707 * ae) /
        C25629;
    const double C1329 =
        (C25686 * C25788 + C25781 * (C25781 * C25795 + C25707 * be) +
         C25781 * C25707 * be) /
        C25629;
    const double C1591 =
        (C25686 * C25864 + C25781 * (C25781 * C25871 + C25707 * ae) +
         C25781 * C25707 * ae) /
        C25629;
    const double C2870 = (C25781 * (C25755 * C25769 + C25707 * be)) / C25629;
    const double C2946 =
        (C25781 * C25755 * C25795 + C25755 * C25707 * be) / C25629;
    const double C3022 = (C25781 * (C25755 * C25820 + C25707 * ae)) / C25629;
    const double C3241 =
        (C25781 * C25755 * C25871 + C25755 * C25707 * ae) / C25629;
    const double C582 = C25686 * C25689 + C25707 * C25833;
    const double C1185 = C25686 * C25689 + C25707 * C25896;
    const double C2792 = C25781 * C25755 * C25707;
    const double C3888 =
        2 * C25755 * C25707 + C25755 * (C25707 + C25729 * C25833);
    const double C5773 = C25781 * (C25707 + C25729 * C25833);
    const double C7145 =
        2 * C25781 * C25707 + C25781 * (C25707 + C25729 * C25896);
    const double C25717 = C25714 + C25706;
    const double C26083 = C26080 + C25706;
    const double C26168 = C26165 + C25706;
    const double C4514 = (ae * (C25788 + C25781 * (C25781 * C25793 + C25706) +
                                C25781 * C25701 * be) +
                          C25755 * (C25852 + be * C25781 * C25818 +
                                    C25781 * (C25821 + C25781 * C25855))) /
                         std::pow(C25629, 2);
    const double C25716 = C25713 * C25633;
    const double C25838 = C25837 * C25633;
    const double C25901 = C25900 * C25633;
    const double C6045 =
        (be * C25813 + C25781 * C25852 + ae * (C25781 * C26122 + C26081 * be) +
         C25755 * (ae * (C25781 * C25793 + C25706) +
                   C25755 * (C25821 + C25781 * C25855))) /
        std::pow(C25629, 2);
    const double C4354 =
        (C25755 * C25788 + C25781 * (C25781 * C26122 + C26081 * be) +
         C25781 * C26081 * be) /
        C25629;
    const double C4566 =
        (C25755 * C25864 + C25781 * (C25781 * C26123 + C26081 * ae) +
         C25781 * C26081 * ae) /
        C25629;
    const double C4243 = C25755 * C25689 + C26081 * C25896;
    const double C15555 =
        2 * C25781 * C26081 + C25781 * (C26081 + C26186 * C25896);
    const double C313 = C26754 * C302;
    const double C508 = C26753 * C497;
    const double C162 = C141 * C90;
    const double C219 = C198 * C90;
    const double C315 = C299 * C90;
    const double C510 = C494 * C90;
    const double C1845 = C141 * C583;
    const double C1901 = C198 * C583;
    const double C2008 = C299 * C583;
    const double C2224 = C494 * C583;
    const double C2340 = C141 * C1186;
    const double C2396 = C198 * C1186;
    const double C2503 = C299 * C1186;
    const double C2719 = C494 * C1186;
    const double C12362 = C198 * C3889;
    const double C12586 = C494 * C3889;
    const double C14296 = C198 * C5774;
    const double C14616 = C494 * C5774;
    const double C22520 = C141 * C5774;
    const double C22674 = C299 * C5774;
    const double C23865 = C141 * C7146;
    const double C23980 = C299 * C7146;
    const double C160 = C26754 * C149;
    const double C158 = C26754 * C144;
    const double C310 = C141 * C144;
    const double C161 = C26754 * C145;
    const double C314 = C141 * C145;
    const double C667 = C26754 * C654;
    const double C862 = C141 * C654;
    const double C1844 = C26754 * C657;
    const double C2007 = C141 * C657;
    const double C1270 = C26754 * C1257;
    const double C1465 = C141 * C1257;
    const double C18233 = C26754 * C1258;
    const double C18406 = C141 * C1258;
    const double C2339 = C26754 * C1260;
    const double C2502 = C141 * C1260;
    const double C19679 = C26754 * C2869;
    const double C19880 = C141 * C2869;
    const double C23864 = C26754 * C7187;
    const double C23979 = C141 * C7187;
    const double C217 = C26753 * C206;
    const double C215 = C26753 * C201;
    const double C505 = C198 * C201;
    const double C218 = C26753 * C202;
    const double C509 = C198 * C202;
    const double C737 = C26753 * C724;
    const double C1114 = C198 * C724;
    const double C9449 = C26753 * C725;
    const double C9784 = C198 * C725;
    const double C1900 = C26753 * C727;
    const double C2223 = C198 * C727;
    const double C1340 = C26753 * C1327;
    const double C1717 = C198 * C1327;
    const double C2395 = C26753 * C1330;
    const double C2718 = C198 * C1330;
    const double C11373 = C26753 * C2945;
    const double C11786 = C198 * C2945;
    const double C12361 = C26753 * C3968;
    const double C12585 = C198 * C3968;
    const double C14295 = C26753 * C5885;
    const double C14615 = C198 * C5885;
    const double C312 = C141 * C257;
    const double C368 = C198 * C257;
    const double C316 = C141 * C258;
    const double C371 = C198 * C258;
    const double C864 = C141 * C794;
    const double C932 = C198 * C794;
    const double C9620 = C198 * C795;
    const double C2009 = C141 * C797;
    const double C2066 = C198 * C797;
    const double C1467 = C141 * C1397;
    const double C1535 = C198 * C1397;
    const double C18408 = C141 * C1398;
    const double C2504 = C141 * C1400;
    const double C2561 = C198 * C1400;
    const double C11582 = C198 * C3021;
    const double C19882 = C141 * C3021;
    const double C23981 = C141 * C7263;
    const double C457 = C141 * C407;
    const double C507 = C198 * C407;
    const double C460 = C141 * C408;
    const double C511 = C198 * C408;
    const double C1054 = C141 * C986;
    const double C1116 = C198 * C986;
    const double C9786 = C198 * C987;
    const double C2171 = C141 * C989;
    const double C2225 = C198 * C989;
    const double C1657 = C141 * C1589;
    const double C1719 = C198 * C1589;
    const double C18580 = C141 * C1590;
    const double C2666 = C141 * C1592;
    const double C2720 = C198 * C1592;
    const double C11788 = C198 * C3240;
    const double C20087 = C141 * C3240;
    const double C12587 = C198 * C4116;
    const double C14617 = C198 * C6097;
    const double C22832 = C141 * C6097;
    const double C25744 = C25741 + C25732;
    const double C26175 = C25712 + C26173;
    const double C15557 =
        (2 * C25781 * C26103 + C25781 * (C26103 + C26239 * C25896)) / C25629;
    const double C26263 = C25712 + C26261;
    const double C25743 = C25740 + C25728;
    const double C26181 = C25711 + C26179;
    const double C15556 =
        (2 * C25781 * C26113 + C25781 * (C26113 + C26245 * C25896)) / C25629;
    const double C26275 = C25711 + C26273;
    const double C25742 = C25739 * C25633;
    const double C25778 = C25767 + C25776;
    const double C26075 = C25755 * C26072;
    const double C7188 =
        (2 * C25781 * C25769 + C25781 * (C25769 + C26072 * C25896)) / C25629;
    const double C26190 = C26185 + C25728;
    const double C26281 = C25767 + C26279;
    const double C25804 = C25793 + C25802;
    const double C26119 = C25755 * C26088;
    const double C26159 = C25781 * C26088;
    const double C3969 =
        (2 * C25755 * C25795 + C25755 * (C25795 + C26088 * C25833)) / C25629;
    const double C5886 = (C25781 * (C25795 + C26088 * C25833) +
                          (C25707 + C25729 * C25833) * be) /
                         C25629;
    const double C26205 = C25793 + C26203;
    const double C26252 = C25781 * C26249;
    const double C26290 = C26285 + C25728;
    const double C25829 = C25818 + C25827;
    const double C26076 = C25755 * C26074;
    const double C7264 =
        (2 * C25781 * C25820 + C25781 * (C25820 + C26074 * C25896)) / C25629;
    const double C26193 = C26188 + C25732;
    const double C26269 = C25818 + C26268;
    const double C25843 = C25842 * C25633;
    const double C25880 = C25869 + C25878;
    const double C26120 = C25755 * C26094;
    const double C26161 = C25781 * C26094;
    const double C4117 =
        (2 * C25755 * C25871 + C25755 * (C25871 + C26094 * C25833)) / C25629;
    const double C6098 = (C25781 * (C25871 + C26094 * C25833) +
                          (C25707 + C25729 * C25833) * ae) /
                         C25629;
    const double C26211 = C25869 + C26209;
    const double C26253 = C25781 * C26251;
    const double C26293 = C26288 + C25732;
    const double C25906 = C25905 * C25633;
    const double C12761 = C198 * C4247;
    const double C21014 = C141 * C4247;
    const double C12814 = C26752 * C4246;
    const double C91 = 3 * (C25689 + C25701 * C25690) +
                       C25686 * (2 * C25707 + C25686 * C25736);
    const double C584 = C25689 + C25701 * C25690 + C25736 * C25833;
    const double C1187 = C25689 + C25701 * C25690 + C25736 * C25896;
    const double C1787 = C25755 * (2 * C25707 + C25686 * C25736);
    const double C2282 = C25781 * (2 * C25707 + C25686 * C25736);
    const double C2793 = C25781 * C25755 * C25736;
    const double C4242 = C25755 * C25707 + C26073 * C25896;
    const double C12276 = 3 * (C25689 + C25701 * C25833) +
                          C25755 * (2 * C26081 + C25755 * C26192);
    const double C12641 = C25689 + C25701 * C25833 + C26192 * C25896;
    const double C14178 = C25781 * (2 * C26081 + C25755 * C26192);
    const double C12918 =
        (C25852 + be * C25781 * C25818 + C25781 * (C25821 + C25781 * C25855) +
         ae * (C26122 + C25781 * (C25781 * C25755 * C25800 + C26191) +
               C25781 * C26186 * be) +
         C25755 *
             (ae * (C25793 + C25781 * (C25781 * C25800 + C25728) +
                    C25781 * C25722 * be) +
              C25755 * (C25855 + be * C25781 * C25825 +
                        C25781 * (be * C25825 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25849)))) /
        std::pow(C25629, 2);
    const double C23816 = 3 * (C25689 + C25701 * C25896) +
                          C25781 * (2 * C26166 + C25781 * C26292);
    const double C1273 = C26754 * C1259;
    const double C1469 = C141 * C1259;
    const double C740 = C26753 * C726;
    const double C1118 = C198 * C726;
    const double C1471 = C141 * C1399;
    const double C1538 = C198 * C1399;
    const double C1057 = C141 * C988;
    const double C1120 = C198 * C988;
    const double C163 = C26754 * C150;
    const double C669 = C26754 * C660;
    const double C1272 = C26754 * C1263;
    const double C18235 = C26754 * C1264;
    const double C19681 = C26754 * C2872;
    const double C25777 = C25770 + C25775;
    const double C26174 = C25721 + C26172;
    const double C21013 = C26754 * C4302;
    const double C22521 = C26754 * C5833;
    const double C23866 = C26754 * C7189;
    const double C9513 = C26752 * C800;
    const double C9509 = C26752 * C801;
    const double C18347 = C26752 * C1403;
    const double C18343 = C26752 * C1404;
    const double C11445 = C26752 * C3024;
    const double C25828 = C25821 + C25826;
    const double C26180 = C25720 + C26178;
    const double C15666 =
        (ae * (2 * C25781 * C25711 + C25781 * (C25711 + C25734 * C25896)) +
         C25755 * (2 * C26226 + C25781 * (C25824 + std::pow(C25684, 6) * bs[6] *
                                                       C25812 * C25896))) /
        std::pow(C25629, 2);
    const double C23938 =
        (3 * (C25817 + C25824 * C25896) +
         C25781 * (2 * C26226 + C25781 * (C25824 + std::pow(C25684, 6) * bs[6] *
                                                       C25812 * C25896))) /
        std::pow(C25629, 2);
    const double C12403 = C26752 * C4008;
    const double C12816 = C26752 * C4410;
    const double C14353 = C26752 * C5941;
    const double C23942 = C26752 * C7265;
    const double C220 = C26753 * C207;
    const double C739 = C26753 * C730;
    const double C9451 = C26753 * C731;
    const double C1342 = C26753 * C1333;
    const double C11375 = C26753 * C2948;
    const double C25803 = C25796 + C25801;
    const double C15630 =
        (2 * (be * C26103 + C25781 * C26238) + be * (C26103 + C26239 * C25896) +
         C25781 *
             (C26238 + be * C25781 * C26239 +
              C25781 * (be * C26239 + C25781 * C25755 * std::pow(C25684, 6) *
                                          bs[6] * C25787))) /
        std::pow(C25629, 2);
    const double C26262 = C25721 + C26260;
    const double C12363 = C26753 * C3970;
    const double C12760 = C26753 * C4356;
    const double C14297 = C26753 * C5887;
    const double C370 = C26753 * C363;
    const double C933 = C26753 * C926;
    const double C9621 = C26753 * C927;
    const double C1536 = C26753 * C1529;
    const double C11583 = C26753 * C3169;
    const double C4081 =
        (2 * (ae * C25795 + C25755 * C26087) + ae * (C25795 + C26088 * C25833) +
         C25755 *
             (C26087 + ae * C25755 * C26088 +
              C25755 * (ae * C26088 + C25755 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25849))) /
        std::pow(C25629, 2);
    const double C4515 =
        (ae * (C25795 + C25781 * (C25781 * C26088 + C25735) +
               C25781 * C25729 * be) +
         C25755 *
             (C26087 + be * C25781 * C26074 +
              C25781 * (be * C26074 + C25781 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25849))) /
        std::pow(C25629, 2);
    const double C7338 =
        (2 * (be * C25820 + C25781 * C26087) + be * (C25820 + C26074 * C25896) +
         C25781 *
             (C26087 + be * C25781 * C26074 +
              C25781 * (be * C26074 + C25781 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25849))) /
        std::pow(C25629, 2);
    const double C26204 = C25796 + C26202;
    const double C26231 = C25821 + C26230;
    const double C934 = C26753 * C928;
    const double C2065 = C26753 * C929;
    const double C1537 = C26753 * C1531;
    const double C2560 = C26753 * C1532;
    const double C12475 = C26753 * C4080;
    const double C9677 = C26752 * C992;
    const double C9675 = C26752 * C993;
    const double C18525 = C26752 * C1595;
    const double C18523 = C26752 * C1596;
    const double C11651 = C26752 * C3243;
    const double C25879 = C25872 + C25877;
    const double C15772 =
        (2 * (ae * C26113 + C25781 * C26244) + ae * (C26113 + C26245 * C25896) +
         C25781 *
             (C26244 + ae * C25781 * C26245 +
              C25781 * (ae * C26245 + C25781 * C25755 * std::pow(C25684, 6) *
                                          bs[6] * C25863))) /
        std::pow(C25629, 2);
    const double C26274 = C25720 + C26272;
    const double C12513 = C26752 * C4118;
    const double C12974 = C26752 * C4568;
    const double C14511 = C26752 * C6099;
    const double C24058 = C26752 * C7375;
    const double C459 = C26754 * C452;
    const double C1055 = C26754 * C1048;
    const double C1658 = C26754 * C1651;
    const double C18581 = C26754 * C1652;
    const double C20088 = C26754 * C3312;
    const double C4155 =
        (2 * (be * C25871 + C25755 * C26093) + be * (C25871 + C26094 * C25833) +
         C25755 *
             (C26093 + be * C25755 * C26094 +
              C25755 * (be * C26094 + C25755 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25886))) /
        std::pow(C25629, 2);
    const double C7412 =
        (2 * (ae * C25769 + C25781 * C26093) + ae * (C25769 + C26072 * C25896) +
         C25781 *
             (C26093 + ae * C25781 * C26072 +
              C25781 * (ae * C26072 + C25781 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25886))) /
        std::pow(C25629, 2);
    const double C26210 = C25872 + C26208;
    const double C26280 = C25770 + C26278;
    const double C1056 = C26754 * C1050;
    const double C2170 = C26754 * C1051;
    const double C1659 = C26754 * C1653;
    const double C2665 = C26754 * C1654;
    const double C24095 = C26754 * C7411;
    const double C26711 = C26571 / C26579;
    const double C26709 = C26571 / C26562;
    const double C26708 = C26571 * C26566;
    const double C3447 = (2 * C26575 * C26571) / C26562;
    const double C26712 = C26576 * C26566;
    const double C82 = C26576 / C26713;
    const double C1786 = C26576 / C26564;
    const double C26732 = C26710 / C26562;
    const double C3446 = (C26570 * std::pow(C26565, 2)) / C26574 + C26707;
    const double C26721 = C26638 / C26579;
    const double C26720 = C26638 * C26637;
    const double C26717 = C26638 / C26562;
    const double C575 = (2 * C26575 * C26638) / C26562;
    const double C26722 = C26641 * C26637;
    const double C3886 = C26641 / C26713;
    const double C4726 = C26641 / C26564;
    const double C26734 = C26719 / C26562;
    const double C574 = (C26589 * std::pow(C26636, 2)) / C26574 + C26714;
    const double C26725 = C26666 / C26579;
    const double C26724 = C26666 * C26665;
    const double C26718 = C26666 / C26562;
    const double C1180 = (2 * C26575 * C26666) / C26562;
    const double C26726 = C26669 * C26665;
    const double C7144 = C26669 / C26713;
    const double C8095 = C26669 / C26564;
    const double C26737 = C26723 / C26562;
    const double C1179 = (C26605 * std::pow(C26664, 2)) / C26574 + C26716;
    const double C9322 = C8983 * C586;
    const double C9320 = C8983 * C585;
    const double C9318 = C8983 * C590;
    const double C9316 = C8983 * C589;
    const double C9314 = C8983 * C588;
    const double C9312 = C8983 * C587;
    const double C9512 = C8983 * C794;
    const double C9510 = C8983 * C579;
    const double C9508 = C8983 * C795;
    const double C9506 = C8983 * C581;
    const double C9505 = C8983 * C793;
    const double C9503 = C8983 * C580;
    const double C9679 = C8983 * C988;
    const double C9676 = C8983 * C986;
    const double C9674 = C8983 * C987;
    const double C9673 = C8983 * C985;
    const double C10455 = C8983 * C797;
    const double C10453 = C8983 * C583;
    const double C10607 = C8983 * C989;
    const double C11226 = C8983 * C2795;
    const double C11224 = C8983 * C2794;
    const double C11444 = C8983 * C3021;
    const double C11442 = C8983 * C2791;
    const double C11650 = C8983 * C3240;
    const double C12283 = C8983 * C3893;
    const double C12281 = C8983 * C3892;
    const double C12402 = C8983 * C3889;
    const double C12514 = C8983 * C4116;
    const double C12648 = C8983 * C4247;
    const double C12646 = C8983 * C4246;
    const double C14185 = C8983 * C5778;
    const double C14183 = C8983 * C5777;
    const double C14352 = C8983 * C5774;
    const double C14512 = C8983 * C6097;
    const double C18160 = C8983 * C1189;
    const double C18158 = C8983 * C1188;
    const double C18156 = C8983 * C1193;
    const double C18154 = C8983 * C1192;
    const double C18152 = C8983 * C1191;
    const double C18150 = C8983 * C1190;
    const double C18351 = C8983 * C1399;
    const double C18346 = C8983 * C1397;
    const double C18344 = C8983 * C1182;
    const double C18342 = C8983 * C1398;
    const double C18340 = C8983 * C1184;
    const double C18339 = C8983 * C1396;
    const double C18337 = C8983 * C1183;
    const double C18524 = C8983 * C1589;
    const double C18522 = C8983 * C1590;
    const double C18521 = C8983 * C1588;
    const double C19292 = C8983 * C1400;
    const double C19290 = C8983 * C1186;
    const double C19445 = C8983 * C1592;
    const double C23823 = C8983 * C7150;
    const double C23821 = C8983 * C7149;
    const double C23943 = C8983 * C7263;
    const double C23941 = C8983 * C7146;
    const double C9321 = C8984 * C579;
    const double C9317 = C8984 * C581;
    const double C9313 = C8984 * C580;
    const double C10295 = C8984 * C583;
    const double C11225 = C8984 * C2791;
    const double C12282 = C8984 * C3889;
    const double C14184 = C8984 * C5774;
    const double C18159 = C8984 * C1182;
    const double C18155 = C8984 * C1184;
    const double C18151 = C8984 * C1183;
    const double C19133 = C8984 * C1186;
    const double C23822 = C8984 * C7146;
    const double C318 = C306 - C307;
    const double C18412 = C18402 - C18403;
    const double C513 = C501 - C502;
    const double C9788 = C9780 - C9781;
    const double C99 = (2 * (C25686 * C25699 + C25689 * ae) +
                        C25686 * (C25699 + C25686 * C25718 + C25707 * ae) +
                        (C25689 + C25701 * C25690) * ae) /
                       C25629;
    const double C592 =
        (C25686 * C25699 + C25689 * ae + C25718 * C25833) / C25629;
    const double C594 =
        (C25755 * (C25699 + C25686 * C25718 + C25707 * ae)) / C25629;
    const double C1195 =
        (C25686 * C25699 + C25689 * ae + C25718 * C25896) / C25629;
    const double C1197 =
        (C25781 * (C25699 + C25686 * C25718 + C25707 * ae)) / C25629;
    const double C2797 = (C25781 * C25755 * C25718) / C25629;
    const double C4006 = (2 * (C25755 * C25813 + C25689 * ae) +
                          C25755 * (C25813 + C25755 * C26084 + C26081 * ae) +
                          (C25689 + C25701 * C25833) * ae) /
                         C25629;
    const double C4408 =
        (C25755 * C25813 + C25689 * ae + C26084 * C25896) / C25629;
    const double C5939 =
        (C25781 * (C25813 + C25755 * C26084 + C26081 * ae)) / C25629;
    const double C7373 = (2 * (C25781 * C25864 + C25689 * ae) +
                          C25781 * (C25864 + C25781 * C26169 + C26166 * ae) +
                          (C25689 + C25701 * C25896) * ae) /
                         C25629;
    const double C3173 = C26753 * C3170;
    const double C3316 = C26754 * C3313;
    const double C670 = C26754 * C656;
    const double C866 = C141 * C656;
    const double C868 = C141 * C796;
    const double C935 = C198 * C796;
    const double C9517 = C8983 * C796;
    const double C1343 = C26753 * C1329;
    const double C1721 = C198 * C1329;
    const double C1660 = C141 * C1591;
    const double C1723 = C198 * C1591;
    const double C18527 = C8983 * C1591;
    const double C2876 = C26754 * C2870;
    const double C3097 = C141 * C2870;
    const double C2952 = C26753 * C2946;
    const double C3387 = C198 * C2946;
    const double C3099 = C141 * C3022;
    const double C3174 = C198 * C3022;
    const double C11449 = C8983 * C3022;
    const double C3317 = C141 * C3241;
    const double C3389 = C198 * C3241;
    const double C11653 = C8983 * C3241;
    const double C671 = C141 * C582;
    const double C741 = C198 * C582;
    const double C867 = C299 * C582;
    const double C1119 = C494 * C582;
    const double C9325 = C8984 * C582;
    const double C9515 = C8983 * C582;
    const double C1274 = C141 * C1185;
    const double C1344 = C198 * C1185;
    const double C1470 = C299 * C1185;
    const double C1722 = C494 * C1185;
    const double C18163 = C8984 * C1185;
    const double C18349 = C8983 * C1185;
    const double C2877 = C141 * C2792;
    const double C2953 = C198 * C2792;
    const double C3098 = C299 * C2792;
    const double C3388 = C494 * C2792;
    const double C11229 = C8984 * C2792;
    const double C11447 = C8983 * C2792;
    const double C98 = (2 * (C25686 * C25698 + C25689 * be) +
                        C25686 * (C25698 + C25686 * C25717 + C25707 * be) +
                        (C25689 + C25701 * C25690) * be) /
                       C25629;
    const double C591 =
        (C25686 * C25698 + C25689 * be + C25717 * C25833) / C25629;
    const double C593 =
        (C25755 * (C25698 + C25686 * C25717 + C25707 * be)) / C25629;
    const double C1194 =
        (C25686 * C25698 + C25689 * be + C25717 * C25896) / C25629;
    const double C1196 =
        (C25781 * (C25698 + C25686 * C25717 + C25707 * be)) / C25629;
    const double C2796 = (C25781 * C25755 * C25717) / C25629;
    const double C4620 =
        (be * C25864 + C25755 * C25889 + ae * C25781 * C26083 +
         C25781 * (ae * C26083 + C25781 * (C25872 + C25755 * C25892))) /
        std::pow(C25629, 2);
    const double C6151 = (ae * (C25762 + C25755 * C26083 + C26081 * be) +
                          C25781 * (C25889 + be * C26123 +
                                    C25755 * (C25872 + C25755 * C25892))) /
                         std::pow(C25629, 2);
    const double C3930 = (2 * (C25755 * C25762 + C25689 * be) +
                          C25755 * (C25762 + C25755 * C26083 + C26081 * be) +
                          (C25689 + C25701 * C25833) * be) /
                         C25629;
    const double C4300 =
        (C25755 * C25762 + C25689 * be + C26083 * C25896) / C25629;
    const double C5831 =
        (C25781 * (C25762 + C25755 * C26083 + C26081 * be)) / C25629;
    const double C7225 = (2 * (C25781 * C25788 + C25689 * be) +
                          C25781 * (C25788 + C25781 * C26168 + C26166 * be) +
                          (C25689 + C25701 * C25896) * be) /
                         C25629;
    const double C12920 = C26753 * C4514;
    const double C105 =
        (2 * (ae * C25698 + be * C25699 + C25686 * C25716) +
         ae * (C25698 + C25686 * C25717 + C25707 * be) +
         be * (C25699 + C25686 * C25718 + C25707 * ae) +
         C25686 * (C25716 + ae * C25717 + be * C25718 +
                   C25686 * (ae * C25711 + be * C25712 +
                             C25686 *
                                 (C25702 * C25703 +
                                  C25690 * bs[5] * std::pow(C25692, 5)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C597 = (ae * C25755 * C25698 + be * C25755 * C25699 +
                         C25686 * C25755 * C25716) /
                        std::pow(C25629, 2);
    const double C599 =
        ((C25689 + C25690 * C25691 * C25695) * C25633 + C25716 * C25833) /
        std::pow(C25629, 2);
    const double C1200 = (ae * C25781 * C25698 + be * C25781 * C25699 +
                          C25686 * C25781 * C25716) /
                         std::pow(C25629, 2);
    const double C1202 =
        ((C25689 + C25690 * C25691 * C25695) * C25633 + C25716 * C25896) /
        std::pow(C25629, 2);
    const double C2800 = (C25781 * C25755 * C25716) / std::pow(C25629, 2);
    const double C303 =
        (2 * C25686 * C25838 +
         C25686 *
             (C25838 + (C25722 + C25833 * C25723 * C25724) * C25633 * C25690)) /
        std::pow(C25629, 2);
    const double C855 = (ae * C25686 * C25762 + be * C25686 * C25813 +
                         C25755 * C25686 * C25838) /
                        std::pow(C25629, 2);
    const double C857 =
        ((C25689 + C25833 * C25691 * C25695) * C25633 +
         ae * (C25755 * C25762 + C25689 * be) +
         be * (C25755 * C25813 + C25689 * ae) +
         C25755 * (ae * C25762 + be * C25813 + C25755 * C25838)) /
        std::pow(C25629, 2);
    const double C1458 = (C25781 * C25686 * C25838) / std::pow(C25629, 2);
    const double C1460 =
        ((C25689 + C25833 * C25691 * C25695) * C25633 + C25838 * C25896) /
        std::pow(C25629, 2);
    const double C3093 = (ae * C25781 * C25762 + be * C25781 * C25813 +
                          C25755 * C25781 * C25838) /
                         std::pow(C25629, 2);
    const double C498 =
        (2 * C25686 * C25901 +
         C25686 *
             (C25901 + (C25722 + C25896 * C25723 * C25724) * C25633 * C25690)) /
        std::pow(C25629, 2);
    const double C1107 = (C25755 * C25686 * C25901) / std::pow(C25629, 2);
    const double C1109 =
        ((C25689 + C25896 * C25691 * C25695) * C25633 + C25901 * C25833) /
        std::pow(C25629, 2);
    const double C1710 = (ae * C25686 * C25788 + be * C25686 * C25864 +
                          C25781 * C25686 * C25901) /
                         std::pow(C25629, 2);
    const double C1712 =
        ((C25689 + C25896 * C25691 * C25695) * C25633 +
         ae * (C25781 * C25788 + C25689 * be) +
         be * (C25781 * C25864 + C25689 * ae) +
         C25781 * (ae * C25788 + be * C25864 + C25781 * C25901)) /
        std::pow(C25629, 2);
    const double C3383 = (ae * C25755 * C25788 + be * C25755 * C25864 +
                          C25781 * C25755 * C25901) /
                         std::pow(C25629, 2);
    const double C14457 = C26753 * C6045;
    const double C12758 = C26753 * C4354;
    const double C13078 = C198 * C4354;
    const double C12975 = C8983 * C4566;
    const double C13080 = C198 * C4566;
    const double C21324 = C141 * C4566;
    const double C12647 = C8984 * C4243;
    const double C12759 = C198 * C4243;
    const double C12815 = C8983 * C4243;
    const double C13079 = C494 * C4243;
    const double C21012 = C141 * C4243;
    const double C21166 = C299 * C4243;
    const double C319 = C310 - C311;
    const double C320 = C314 - C315;
    const double C870 = C862 - C863;
    const double C2011 = C2007 - C2008;
    const double C1473 = C1465 - C1466;
    const double C18413 = C18406 - C18407;
    const double C2506 = C2502 - C2503;
    const double C19885 = C19880 - C19881;
    const double C23983 = C23979 - C23980;
    const double C514 = C505 - C506;
    const double C515 = C509 - C510;
    const double C1122 = C1114 - C1115;
    const double C9789 = C9784 - C9785;
    const double C2227 = C2223 - C2224;
    const double C1725 = C1717 - C1718;
    const double C2722 = C2718 - C2719;
    const double C11790 = C11786 - C11787;
    const double C12589 = C12585 - C12586;
    const double C14619 = C14615 - C14616;
    const double C25747 = C25686 * C25744;
    const double C26105 = C25755 * C25744;
    const double C3891 =
        (2 * C25755 * C25718 + C25755 * (C25718 + C25744 * C25833)) / C25629;
    const double C5776 = (C25781 * (C25718 + C25744 * C25833)) / C25629;
    const double C7148 =
        (2 * C25781 * C25718 + C25781 * (C25718 + C25744 * C25896)) / C25629;
    const double C12756 =
        (C25792 + C25799 * C25833 + be * C25781 * C26175 +
         C25781 *
             (be * C26175 + C25781 * (C25799 + std::pow(C25684, 6) * bs[6] *
                                                   C25787 * C25833))) /
        std::pow(C25629, 2);
    const double C14293 =
        (be * (2 * C26103 + C25755 * C26175) +
         C25781 * (2 * C25755 * C25799 +
                   C25755 * (C25799 +
                             std::pow(C25684, 6) * bs[6] * C25787 * C25833))) /
        std::pow(C25629, 2);
    const double C12278 = (3 * (C25699 + C25712 * C25833) +
                           C25755 * (2 * C26103 + C25755 * C26175)) /
                          C25629;
    const double C12643 = (C25699 + C25712 * C25833 + C26175 * C25896) / C25629;
    const double C14180 = (C25781 * (2 * C26103 + C25755 * C26175)) / C25629;
    const double C23818 = (3 * (C25699 + C25712 * C25896) +
                           C25781 * (2 * C26259 + C25781 * C26263)) /
                          C25629;
    const double C25746 = C25686 * C25743;
    const double C26115 = C25755 * C25743;
    const double C3890 =
        (2 * C25755 * C25717 + C25755 * (C25717 + C25743 * C25833)) / C25629;
    const double C5775 = (C25781 * (C25717 + C25743 * C25833)) / C25629;
    const double C7147 =
        (2 * C25781 * C25717 + C25781 * (C25717 + C25743 * C25896)) / C25629;
    const double C12972 =
        (C25868 + C25875 * C25833 + ae * C25781 * C26181 +
         C25781 *
             (ae * C26181 + C25781 * (C25875 + std::pow(C25684, 6) * bs[6] *
                                                   C25863 * C25833))) /
        std::pow(C25629, 2);
    const double C14349 =
        (2 * (ae * C25781 * C25711 + C25755 * C26226) + ae * C25781 * C26181 +
         C25755 * (C26226 + ae * C25781 * C25755 * C25734 +
                   C25755 * (ae * C25781 * C25734 + C25755 * C25781 *
                                                        std::pow(C25684, 6) *
                                                        bs[6] * C25812))) /
        std::pow(C25629, 2);
    const double C14509 =
        (ae * (2 * C26113 + C25755 * C26181) +
         C25781 * (2 * C25755 * C25875 +
                   C25755 * (C25875 +
                             std::pow(C25684, 6) * bs[6] * C25863 * C25833))) /
        std::pow(C25629, 2);
    const double C12277 = (3 * (C25698 + C25711 * C25833) +
                           C25755 * (2 * C26113 + C25755 * C26181)) /
                          C25629;
    const double C12642 = (C25698 + C25711 * C25833 + C26181 * C25896) / C25629;
    const double C14179 = (C25781 * (2 * C26113 + C25755 * C26181)) / C25629;
    const double C23817 = (3 * (C25698 + C25711 * C25896) +
                           C25781 * (2 * C26271 + C25781 * C26275)) /
                          C25629;
    const double C25745 = C25686 * C25742;
    const double C26016 = C25755 * C25742;
    const double C26026 = C25781 * C25742;
    const double C600 =
        (ae * (C25698 + C25711 * C25833) + be * (C25699 + C25712 * C25833) +
         C25686 * (C25716 + C25742 * C25833)) /
        std::pow(C25629, 2);
    const double C601 =
        (C25755 * C25716 + ae * C25755 * C25717 + be * C25755 * C25718 +
         C25686 * (ae * C25755 * C25711 + be * C25755 * C25712 +
                   C25686 * C25755 * C25742)) /
        std::pow(C25629, 2);
    const double C602 =
        (C25716 + C25742 * C25833 + ae * (C25717 + C25743 * C25833) +
         be * (C25718 + C25744 * C25833) +
         C25686 * (ae * (C25711 + C25734 * C25833) +
                   be * (C25712 + C25737 * C25833) +
                   C25686 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C1203 =
        (ae * (C25698 + C25711 * C25896) + be * (C25699 + C25712 * C25896) +
         C25686 * (C25716 + C25742 * C25896)) /
        std::pow(C25629, 2);
    const double C1204 =
        (C25781 * C25716 + ae * C25781 * C25717 + be * C25781 * C25718 +
         C25686 * (ae * C25781 * C25711 + be * C25781 * C25712 +
                   C25686 * C25781 * C25742)) /
        std::pow(C25629, 2);
    const double C1205 =
        (C25716 + C25742 * C25896 + ae * (C25717 + C25743 * C25896) +
         be * (C25718 + C25744 * C25896) +
         C25686 * (ae * (C25711 + C25734 * C25896) +
                   be * (C25712 + C25737 * C25896) +
                   C25686 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C3895 =
        (2 * C25755 * C25716 + C25755 * (C25716 + C25742 * C25833)) /
        std::pow(C25629, 2);
    const double C5779 = (ae * C25781 * (C25711 + C25734 * C25833) +
                          be * C25781 * (C25712 + C25737 * C25833) +
                          C25686 * C25781 *
                              (C25742 + (C25723 * C25724 +
                                         C25690 * bs[6] * std::pow(C25684, 6)) *
                                            C25633 * C25833)) /
                         std::pow(C25629, 2);
    const double C5780 =
        (C25781 * (C25716 + C25742 * C25833)) / std::pow(C25629, 2);
    const double C7152 =
        (2 * C25781 * C25716 + C25781 * (C25716 + C25742 * C25896)) /
        std::pow(C25629, 2);
    const double C12644 =
        (C25716 + C25742 * C25833 +
         (C25742 + (C25723 * C25724 + C25690 * bs[6] * std::pow(C25684, 6)) *
                       C25633 * C25833) *
             C25896) /
        std::pow(C25629, 2);
    const double C1655 =
        (C25889 + C25892 * C25690 + ae * C25781 * C25778 +
         C25781 *
             (ae * C25778 + C25781 * (C25892 + std::pow(C25684, 6) * bs[6] *
                                                   C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C2663 =
        (ae * (2 * C25769 + C25686 * C25778) +
         C25781 * (2 * C25686 * C25892 +
                   C25686 * (C25892 +
                             std::pow(C25684, 6) * bs[6] * C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C146 = (3 * (C25762 + C25767 * C25690) +
                         C25686 * (2 * C25769 + C25686 * C25778)) /
                        C25629;
    const double C658 =
        (C25762 + C25767 * C25690 + C25755 * (C25755 * C25778 + C25736 * be) +
         C25755 * C25736 * be) /
        C25629;
    const double C1261 = (C25762 + C25767 * C25690 + C25778 * C25896) / C25629;
    const double C1841 = (C25755 * (2 * C25769 + C25686 * C25778) +
                          (2 * C25707 + C25686 * C25736) * be) /
                         C25629;
    const double C2336 = (C25781 * (2 * C25769 + C25686 * C25778)) / C25629;
    const double C2871 = (C25781 * (C25755 * C25778 + C25736 * be)) / C25629;
    const double C26077 = C26075 + C25735;
    const double C26195 = C25755 * C26190;
    const double C15593 =
        (2 * C25781 * C26083 + C25781 * (C26083 + C26190 * C25896)) / C25629;
    const double C23861 = (3 * (C25762 + C25767 * C25896) +
                           C25781 * (2 * C26277 + C25781 * C26281)) /
                          C25629;
    const double C930 =
        (C25852 + C25855 * C25690 + ae * C25755 * C25804 +
         C25755 *
             (ae * C25804 + C25755 * (C25855 + std::pow(C25684, 6) * bs[6] *
                                                   C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C2063 =
        (ae * (2 * C25795 + C25686 * C25804) +
         C25755 * (2 * C25686 * C25855 +
                   C25686 * (C25855 +
                             std::pow(C25684, 6) * bs[6] * C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C203 = (3 * (C25788 + C25793 * C25690) +
                         C25686 * (2 * C25795 + C25686 * C25804)) /
                        C25629;
    const double C728 = (C25788 + C25793 * C25690 + C25804 * C25833) / C25629;
    const double C1331 =
        (C25788 + C25793 * C25690 + C25781 * (C25781 * C25804 + C25736 * be) +
         C25781 * C25736 * be) /
        C25629;
    const double C1897 = (C25755 * (2 * C25795 + C25686 * C25804)) / C25629;
    const double C2392 = (C25781 * (2 * C25795 + C25686 * C25804) +
                          (2 * C25707 + C25686 * C25736) * be) /
                         C25629;
    const double C2947 =
        (C25781 * C25755 * C25804 + C25755 * C25736 * be) / C25629;
    const double C6046 =
        (be * C25820 + C25781 * C26087 + ae * (C25781 * C26119 + C26073 * be) +
         C25755 *
             (ae * (C25781 * C26088 + C25735) +
              C25755 * (be * C26074 + C25781 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25849))) /
        std::pow(C25629, 2);
    const double C4355 =
        (C25755 * C25795 + C25781 * (C25781 * C26119 + C26073 * be) +
         C25781 * C26073 * be) /
        C25629;
    const double C26162 = C26159 + C25735;
    const double C12358 = (3 * (C25788 + C25793 * C25833) +
                           C25755 * (2 * C26122 + C25755 * C26205)) /
                          C25629;
    const double C12755 =
        (C25788 + C25793 * C25833 + C25781 * (C25781 * C26205 + C26192 * be) +
         C25781 * C26192 * be) /
        C25629;
    const double C14292 = (C25781 * (2 * C26122 + C25755 * C26205) +
                           (2 * C26081 + C25755 * C26192) * be) /
                          C25629;
    const double C26254 = C26252 + C26191;
    const double C26295 = C25781 * C26290;
    const double C1533 =
        (C25852 + C25855 * C25690 + be * C25781 * C25829 +
         C25781 *
             (be * C25829 + C25781 * (C25855 + std::pow(C25684, 6) * bs[6] *
                                                   C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C2558 =
        (be * (2 * C25820 + C25686 * C25829) +
         C25781 * (2 * C25686 * C25855 +
                   C25686 * (C25855 +
                             std::pow(C25684, 6) * bs[6] * C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C3171 =
        (ae * (C25781 * C25804 + C25736 * be) +
         C25755 *
             (be * C25829 + C25781 * (C25855 + std::pow(C25684, 6) * bs[6] *
                                                   C25849 * C25690))) /
        std::pow(C25629, 2);
    const double C259 = (3 * (C25813 + C25818 * C25690) +
                         C25686 * (2 * C25820 + C25686 * C25829)) /
                        C25629;
    const double C798 =
        (C25813 + C25818 * C25690 + C25755 * (C25755 * C25829 + C25736 * ae) +
         C25755 * C25736 * ae) /
        C25629;
    const double C1401 = (C25813 + C25818 * C25690 + C25829 * C25896) / C25629;
    const double C1953 = (C25755 * (2 * C25820 + C25686 * C25829) +
                          (2 * C25707 + C25686 * C25736) * ae) /
                         C25629;
    const double C2448 = (C25781 * (2 * C25820 + C25686 * C25829)) / C25629;
    const double C3023 = (C25781 * (C25755 * C25829 + C25736 * ae)) / C25629;
    const double C26078 = C26076 + C25738;
    const double C26196 = C25755 * C26193;
    const double C15665 =
        (2 * C25781 * C26084 + C25781 * (C26084 + C26193 * C25896)) / C25629;
    const double C23937 = (3 * (C25813 + C25818 * C25896) +
                           C25781 * (2 * C26267 + C25781 * C26269)) /
                          C25629;
    const double C26071 = C25686 * C25843;
    const double C26184 = C25755 * C25843;
    const double C26228 = C25781 * C25843;
    const double C304 =
        (3 * (C25838 + C25843 * C25690) +
         C25686 * (2 * C25686 * C25843 +
                   C25686 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C858 =
        (C25686 * C25838 + ae * (C25755 * C25769 + C25707 * be) +
         be * (C25755 * C25820 + C25707 * ae) +
         C25755 * (ae * C25769 + be * C25820 + C25755 * C25686 * C25843)) /
        std::pow(C25629, 2);
    const double C859 =
        (ae * (C25762 + C25767 * C25690) + be * (C25813 + C25818 * C25690) +
         C25755 * (C25838 + C25843 * C25690)) /
        std::pow(C25629, 2);
    const double C860 =
        (C25838 + C25843 * C25690 + ae * (C25755 * C25778 + C25736 * be) +
         be * (C25755 * C25829 + C25736 * ae) +
         C25755 * (ae * C25778 + be * C25829 +
                   C25755 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C1461 =
        (C25686 * C25838 + C25686 * C25843 * C25896) / std::pow(C25629, 2);
    const double C1462 =
        (C25781 * (C25838 + C25843 * C25690)) / std::pow(C25629, 2);
    const double C1463 =
        (C25838 + C25843 * C25690 +
         (C25843 + (C25723 * C25724 + C25833 * bs[6] * std::pow(C25684, 6)) *
                       C25633 * C25690) *
             C25896) /
        std::pow(C25629, 2);
    const double C2005 =
        (ae * (2 * C25769 + C25686 * C25778) +
         be * (2 * C25820 + C25686 * C25829) +
         C25755 * (2 * C25686 * C25843 +
                   C25686 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C2500 =
        (C25781 * (2 * C25686 * C25843 +
                   C25686 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C3094 = (ae * C25781 * C25769 + be * C25781 * C25820 +
                          C25755 * C25781 * C25686 * C25843) /
                         std::pow(C25629, 2);
    const double C3095 = (ae * C25781 * C25778 + be * C25781 * C25829 +
                          C25755 * C25781 *
                              (C25843 + (C25723 * C25724 +
                                         C25833 * bs[6] * std::pow(C25684, 6)) *
                                            C25633 * C25690)) /
                         std::pow(C25629, 2);
    const double C4045 =
        (2 * (ae * C25762 + be * C25813 + C25755 * C25838) +
         ae * (C25762 + C25755 * C26083 + C26081 * be) +
         be * (C25813 + C25755 * C26084 + C26081 * ae) +
         C25755 * (C25838 + ae * C26083 + be * C26084 +
                   C25755 * (C25770 + C25821 + C25755 * C25843))) /
        std::pow(C25629, 2);
    const double C4463 =
        (ae * (C25762 + C25767 * C25896) + be * (C25813 + C25818 * C25896) +
         C25755 * (C25838 + C25843 * C25896)) /
        std::pow(C25629, 2);
    const double C5994 =
        (C25781 * C25838 + ae * C25781 * C26083 + be * C25781 * C26084 +
         C25755 * (ae * C25781 * C25767 + be * C25781 * C25818 +
                   C25755 * C25781 * C25843)) /
        std::pow(C25629, 2);
    const double C7302 =
        (2 * C25781 * C25838 + C25781 * (C25838 + C25843 * C25896)) /
        std::pow(C25629, 2);
    const double C12867 =
        (C25838 + C25843 * C25896 + ae * (C26083 + C26190 * C25896) +
         be * (C26084 + C26193 * C25896) +
         C25755 * (ae * (C25767 + C25774 * C25896) +
                   be * (C25818 + C25825 * C25896) +
                   C25755 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C1052 =
        (C25889 + C25892 * C25690 + be * C25755 * C25880 +
         C25755 *
             (be * C25880 + C25755 * (C25892 + std::pow(C25684, 6) * bs[6] *
                                                   C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C2168 =
        (be * (2 * C25871 + C25686 * C25880) +
         C25755 * (2 * C25686 * C25892 +
                   C25686 * (C25892 +
                             std::pow(C25684, 6) * bs[6] * C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C3314 =
        (ae * (C25755 * C25778 + C25736 * be) +
         C25781 *
             (be * C25880 + C25755 * (C25892 + std::pow(C25684, 6) * bs[6] *
                                                   C25886 * C25690))) /
        std::pow(C25629, 2);
    const double C409 = (3 * (C25864 + C25869 * C25690) +
                         C25686 * (2 * C25871 + C25686 * C25880)) /
                        C25629;
    const double C990 = (C25864 + C25869 * C25690 + C25880 * C25833) / C25629;
    const double C1593 =
        (C25864 + C25869 * C25690 + C25781 * (C25781 * C25880 + C25736 * ae) +
         C25781 * C25736 * ae) /
        C25629;
    const double C2116 = (C25755 * (2 * C25871 + C25686 * C25880)) / C25629;
    const double C2611 = (C25781 * (2 * C25871 + C25686 * C25880) +
                          (2 * C25707 + C25686 * C25736) * ae) /
                         C25629;
    const double C3242 =
        (C25781 * C25755 * C25880 + C25755 * C25736 * ae) / C25629;
    const double C4567 =
        (C25755 * C25871 + C25781 * (C25781 * C26120 + C26073 * ae) +
         C25781 * C26073 * ae) /
        C25629;
    const double C26163 = C26161 + C25738;
    const double C12510 = (3 * (C25864 + C25869 * C25833) +
                           C25755 * (2 * C26123 + C25755 * C26211)) /
                          C25629;
    const double C12971 =
        (C25864 + C25869 * C25833 + C25781 * (C25781 * C26211 + C26192 * ae) +
         C25781 * C26192 * ae) /
        C25629;
    const double C14508 = (C25781 * (2 * C26123 + C25755 * C26211) +
                           (2 * C26081 + C25755 * C26192) * ae) /
                          C25629;
    const double C26255 = C26253 + C26194;
    const double C26296 = C25781 * C26293;
    const double C26096 = C25686 * C25906;
    const double C26248 = C25755 * C25906;
    const double C26284 = C25781 * C25906;
    const double C499 =
        (3 * (C25901 + C25906 * C25690) +
         C25686 * (2 * C25686 * C25906 +
                   C25686 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C1110 =
        (C25686 * C25901 + C25686 * C25906 * C25833) / std::pow(C25629, 2);
    const double C1111 =
        (C25755 * (C25901 + C25906 * C25690)) / std::pow(C25629, 2);
    const double C1112 =
        (C25901 + C25906 * C25690 +
         (C25906 + (C25723 * C25724 + C25896 * bs[6] * std::pow(C25684, 6)) *
                       C25633 * C25690) *
             C25833) /
        std::pow(C25629, 2);
    const double C1713 =
        (C25686 * C25901 + ae * (C25781 * C25795 + C25707 * be) +
         be * (C25781 * C25871 + C25707 * ae) +
         C25781 * (ae * C25795 + be * C25871 + C25781 * C25686 * C25906)) /
        std::pow(C25629, 2);
    const double C1714 =
        (ae * (C25788 + C25793 * C25690) + be * (C25864 + C25869 * C25690) +
         C25781 * (C25901 + C25906 * C25690)) /
        std::pow(C25629, 2);
    const double C1715 =
        (C25901 + C25906 * C25690 + ae * (C25781 * C25804 + C25736 * be) +
         be * (C25781 * C25880 + C25736 * ae) +
         C25781 * (ae * C25804 + be * C25880 +
                   C25781 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C2221 =
        (C25755 * (2 * C25686 * C25906 +
                   C25686 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C2716 =
        (ae * (2 * C25795 + C25686 * C25804) +
         be * (2 * C25871 + C25686 * C25880) +
         C25781 * (2 * C25686 * C25906 +
                   C25686 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25690))) /
        std::pow(C25629, 2);
    const double C3384 = (ae * C25755 * C25795 + be * C25755 * C25871 +
                          C25781 * C25755 * C25686 * C25906) /
                         std::pow(C25629, 2);
    const double C3385 = (ae * C25755 * C25804 + be * C25755 * C25880 +
                          C25781 * C25755 *
                              (C25906 + (C25723 * C25724 +
                                         C25896 * bs[6] * std::pow(C25684, 6)) *
                                            C25633 * C25690)) /
                         std::pow(C25629, 2);
    const double C4191 =
        (2 * C25755 * C25901 + C25755 * (C25901 + C25906 * C25833)) /
        std::pow(C25629, 2);
    const double C4673 =
        (C25755 * C25901 + ae * (C25781 * C26122 + C26081 * be) +
         be * (C25781 * C26123 + C26081 * ae) +
         C25781 * (ae * C26122 + be * C26123 + C25781 * C25755 * C25906)) /
        std::pow(C25629, 2);
    const double C6204 =
        (ae * (C25788 + C25793 * C25833) + be * (C25864 + C25869 * C25833) +
         C25781 * (C25901 + C25906 * C25833)) /
        std::pow(C25629, 2);
    const double C7448 =
        (2 * (ae * C25788 + be * C25864 + C25781 * C25901) +
         ae * (C25788 + C25781 * C26168 + C26166 * be) +
         be * (C25864 + C25781 * C26169 + C26166 * ae) +
         C25781 * (C25901 + ae * C26168 + be * C26169 +
                   C25781 * (C25796 + C25872 + C25781 * C25906))) /
        std::pow(C25629, 2);
    const double C12583 =
        (3 * (C25901 + C25906 * C25833) +
         C25755 * (2 * C25755 * C25906 +
                   C25755 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C13076 =
        (C25901 + C25906 * C25833 + ae * (C25781 * C26205 + C26192 * be) +
         be * (C25781 * C26211 + C26192 * ae) +
         C25781 * (ae * C26205 + be * C26211 +
                   C25781 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C14613 =
        (ae * (2 * C26122 + C25755 * C26205) +
         be * (2 * C26123 + C25755 * C26211) +
         C25781 * (2 * C25755 * C25906 +
                   C25755 * (C25906 + (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C151 =
        (3 * (C25766 + ae * C25769 + C25686 * C25777) +
         ae * (2 * C25769 + C25686 * C25778) +
         C25686 *
             (2 * C25777 + ae * C25778 +
              C25686 * (C25773 + ae * C25686 * C25774 +
                        C25686 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C662 = (ae * C25762 + C25686 * C25766 + be * C25755 * C25718 +
                         C25755 * (be * C25718 + C25755 * C25777)) /
                        std::pow(C25629, 2);
    const double C663 = (be * (C25699 + C25686 * C25718 + C25707 * ae) +
                         C25755 * (C25766 + ae * C25769 + C25686 * C25777)) /
                        std::pow(C25629, 2);
    const double C1265 =
        (ae * C25762 + C25686 * C25766 + C25777 * C25896) / std::pow(C25629, 2);
    const double C1266 = (C25781 * (C25766 + ae * C25769 + C25686 * C25777)) /
                         std::pow(C25629, 2);
    const double C1267 =
        (C25766 + ae * C25769 + C25686 * C25777 +
         (C25773 + ae * C25686 * C25774 +
          C25686 *
              (ae * C25774 + C25686 * std::pow(C25684, 6) * bs[6] * C25761)) *
             C25896) /
        std::pow(C25629, 2);
    const double C2337 =
        (C25781 *
         (2 * C25777 + ae * C25778 +
          C25686 * (C25773 + ae * C25686 * C25774 +
                    C25686 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C2873 =
        (C25781 * (be * C25718 + C25755 * C25777)) / std::pow(C25629, 2);
    const double C3933 =
        (2 * (be * C25718 + C25755 * C25777) + be * (C25718 + C25744 * C25833) +
         C25755 *
             (C25777 + be * C25755 * C25744 +
              C25755 * (be * C25744 +
                        C25755 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C4303 =
        (be * C25718 + C25755 * C25777 +
         (be * C25744 + C25755 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)) *
             C25896) /
        std::pow(C25629, 2);
    const double C7190 =
        (2 * C25781 * C25777 +
         C25781 * (C25777 + (ae * C25774 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25761) *
                                C25896)) /
        std::pow(C25629, 2);
    const double C12323 =
        (3 * (C25766 + be * C26103 + C25755 * C26174) +
         be * (2 * C26103 + C25755 * C26175) +
         C25755 *
             (2 * C26174 + be * C26175 +
              C25755 * (C25773 + be * C25755 * C25737 +
                        C25755 * (be * C25737 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C12704 =
        (C25766 + be * C26103 + C25755 * C26174 +
         (C25773 + be * C25755 * C25737 +
          C25755 *
              (be * C25737 + C25755 * std::pow(C25684, 6) * bs[6] * C25761)) *
             C25896) /
        std::pow(C25629, 2);
    const double C14241 =
        (C25781 *
         (2 * C26174 + be * C26175 +
          C25755 * (C25773 + be * C25755 * C25737 +
                    C25755 * (be * C25737 + C25755 * std::pow(C25684, 6) *
                                                bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C15594 =
        (2 * C25781 * C26174 +
         C25781 * (C26174 + (be * C25737 +
                             C25755 * std::pow(C25684, 6) * bs[6] * C25761) *
                                C25896)) /
        std::pow(C25629, 2);
    const double C264 =
        (3 * (C25817 + be * C25820 + C25686 * C25828) +
         be * (2 * C25820 + C25686 * C25829) +
         C25686 *
             (2 * C25828 + be * C25829 +
              C25686 * (C25824 + be * C25686 * C25825 +
                        C25686 * (be * C25825 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C802 = (be * C25813 + C25686 * C25817 + ae * C25755 * C25717 +
                         C25755 * (ae * C25717 + C25755 * C25828)) /
                        std::pow(C25629, 2);
    const double C803 = (ae * (C25698 + C25686 * C25717 + C25707 * be) +
                         C25755 * (C25817 + be * C25820 + C25686 * C25828)) /
                        std::pow(C25629, 2);
    const double C1405 =
        (be * C25813 + C25686 * C25817 + C25828 * C25896) / std::pow(C25629, 2);
    const double C1406 = (C25781 * (C25817 + be * C25820 + C25686 * C25828)) /
                         std::pow(C25629, 2);
    const double C1407 =
        (C25817 + be * C25820 + C25686 * C25828 +
         (C25824 + be * C25686 * C25825 +
          C25686 *
              (be * C25825 + C25686 * std::pow(C25684, 6) * bs[6] * C25812)) *
             C25896) /
        std::pow(C25629, 2);
    const double C2449 =
        (C25781 *
         (2 * C25828 + be * C25829 +
          C25686 * (C25824 + be * C25686 * C25825 +
                    C25686 * (be * C25825 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C3025 =
        (ae * C25781 * C25717 + C25755 * C25781 * C25828) / std::pow(C25629, 2);
    const double C4009 =
        (2 * (ae * C25717 + C25755 * C25828) + ae * (C25717 + C25743 * C25833) +
         C25755 *
             (C25828 + ae * C25755 * C25743 +
              C25755 * (ae * C25743 +
                        C25755 * (be * C25825 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C4411 =
        (ae * (C25717 + C25743 * C25896) +
         C25755 * (C25828 + (be * C25825 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25812) *
                                C25896)) /
        std::pow(C25629, 2);
    const double C7266 =
        (2 * C25781 * C25828 +
         C25781 * (C25828 + (be * C25825 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25812) *
                                C25896)) /
        std::pow(C25629, 2);
    const double C12399 =
        (3 * (C25817 + ae * C26113 + C25755 * C26180) +
         ae * (2 * C26113 + C25755 * C26181) +
         C25755 *
             (2 * C26180 + ae * C26181 +
              C25755 * (C25824 + ae * C25755 * C25734 +
                        C25755 * (ae * C25734 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C208 =
        (3 * (C25792 + ae * C25795 + C25686 * C25803) +
         ae * (2 * C25795 + C25686 * C25804) +
         C25686 *
             (2 * C25803 + ae * C25804 +
              C25686 * (C25799 + ae * C25686 * C25800 +
                        C25686 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C732 =
        (ae * C25788 + C25686 * C25792 + C25803 * C25833) / std::pow(C25629, 2);
    const double C733 = (C25755 * (C25792 + ae * C25795 + C25686 * C25803)) /
                        std::pow(C25629, 2);
    const double C734 = (C25792 + ae * C25795 + C25686 * C25803 +
                         (C25799 + ae * C25686 * C25800 +
                          C25686 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                      bs[6] * C25787)) *
                             C25833) /
                        std::pow(C25629, 2);
    const double C1335 = (ae * C25788 + C25686 * C25792 + be * C25781 * C25718 +
                          C25781 * (be * C25718 + C25781 * C25803)) /
                         std::pow(C25629, 2);
    const double C1336 = (be * (C25699 + C25686 * C25718 + C25707 * ae) +
                          C25781 * (C25792 + ae * C25795 + C25686 * C25803)) /
                         std::pow(C25629, 2);
    const double C1898 =
        (C25755 *
         (2 * C25803 + ae * C25804 +
          C25686 * (C25799 + ae * C25686 * C25800 +
                    C25686 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C2949 =
        (be * C25755 * C25718 + C25781 * C25755 * C25803) / std::pow(C25629, 2);
    const double C3971 =
        (2 * C25755 * C25803 +
         C25755 * (C25803 + (ae * C25800 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25787) *
                                C25833)) /
        std::pow(C25629, 2);
    const double C5888 =
        (be * (C25718 + C25744 * C25833) +
         C25781 * (C25803 + (ae * C25800 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25787) *
                                C25833)) /
        std::pow(C25629, 2);
    const double C7228 =
        (2 * (be * C25718 + C25781 * C25803) + be * (C25718 + C25744 * C25896) +
         C25781 *
             (C25803 + be * C25781 * C25744 +
              C25781 * (be * C25744 +
                        C25781 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C23902 =
        (3 * (C25792 + be * C26259 + C25781 * C26262) +
         be * (2 * C26259 + C25781 * C26263) +
         C25781 *
             (2 * C26262 + be * C26263 +
              C25781 * (C25799 + be * C25781 * C25737 +
                        C25781 * (be * C25737 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C12473 =
        (3 * (C25852 + ae * C26122 + C25755 * C26204) +
         ae * (2 * C26122 + C25755 * C26205) +
         C25755 *
             (2 * C26204 + ae * C26205 +
              C25755 * (C25855 + ae * C25755 * C25800 +
                        C25755 * (ae * C25800 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25849)))) /
        std::pow(C25629, 2);
    const double C14455 =
        (2 * (ae * C26168 + C25755 * C26231) +
         ae * (C25781 * C26205 + C26192 * be) +
         C25755 *
             (C26231 + ae * (C25781 * C25755 * C25800 + C26191) +
              C25755 * (ae * (C25781 * C25800 + C25728) +
                        C25755 * (be * C25825 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25849)))) /
        std::pow(C25629, 2);
    const double C15736 =
        (ae * (2 * C26168 +
               C25781 * (C25793 + C25781 * (C25781 * C25800 + C25728) +
                         C25781 * C25722 * be) +
               (C25701 + C25722 * C25896) * be) +
         C25755 *
             (2 * C26231 + be * (C25818 + C25825 * C25896) +
              C25781 * (C25855 + be * C25781 * C25825 +
                        C25781 * (be * C25825 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25849)))) /
        std::pow(C25629, 2);
    const double C24020 =
        (3 * (C25852 + be * C26267 + C25781 * C26231) +
         be * (2 * C26267 + C25781 * C26269) +
         C25781 *
             (2 * C26231 + be * C26269 +
              C25781 * (C25855 + be * C25781 * C25825 +
                        C25781 * (be * C25825 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25849)))) /
        std::pow(C25629, 2);
    const double C414 =
        (3 * (C25868 + be * C25871 + C25686 * C25879) +
         be * (2 * C25871 + C25686 * C25880) +
         C25686 *
             (2 * C25879 + be * C25880 +
              C25686 * (C25875 + be * C25686 * C25876 +
                        C25686 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C994 =
        (be * C25864 + C25686 * C25868 + C25879 * C25833) / std::pow(C25629, 2);
    const double C995 = (C25755 * (C25868 + be * C25871 + C25686 * C25879)) /
                        std::pow(C25629, 2);
    const double C996 = (C25868 + be * C25871 + C25686 * C25879 +
                         (C25875 + be * C25686 * C25876 +
                          C25686 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                      bs[6] * C25863)) *
                             C25833) /
                        std::pow(C25629, 2);
    const double C1597 = (be * C25864 + C25686 * C25868 + ae * C25781 * C25717 +
                          C25781 * (ae * C25717 + C25781 * C25879)) /
                         std::pow(C25629, 2);
    const double C1598 = (ae * (C25698 + C25686 * C25717 + C25707 * be) +
                          C25781 * (C25868 + be * C25871 + C25686 * C25879)) /
                         std::pow(C25629, 2);
    const double C2117 =
        (C25755 *
         (2 * C25879 + be * C25880 +
          C25686 * (C25875 + be * C25686 * C25876 +
                    C25686 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C3244 =
        (ae * C25755 * C25717 + C25781 * C25755 * C25879) / std::pow(C25629, 2);
    const double C4119 =
        (2 * C25755 * C25879 +
         C25755 * (C25879 + (be * C25876 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25863) *
                                C25833)) /
        std::pow(C25629, 2);
    const double C6100 =
        (ae * (C25717 + C25743 * C25833) +
         C25781 * (C25879 + (be * C25876 +
                             C25686 * std::pow(C25684, 6) * bs[6] * C25863) *
                                C25833)) /
        std::pow(C25629, 2);
    const double C7376 =
        (2 * (ae * C25717 + C25781 * C25879) + ae * (C25717 + C25743 * C25896) +
         C25781 *
             (C25879 + ae * C25781 * C25743 +
              C25781 * (ae * C25743 +
                        C25781 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C24056 =
        (3 * (C25868 + ae * C26271 + C25781 * C26274) +
         ae * (2 * C26271 + C25781 * C26275) +
         C25781 *
             (2 * C26274 + ae * C26275 +
              C25781 * (C25875 + ae * C25781 * C25734 +
                        C25781 * (ae * C25734 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C12548 =
        (3 * (C25889 + be * C26123 + C25755 * C26210) +
         be * (2 * C26123 + C25755 * C26211) +
         C25755 *
             (2 * C26210 + be * C26211 +
              C25755 * (C25892 + be * C25755 * C25876 +
                        C25755 * (be * C25876 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25886)))) /
        std::pow(C25629, 2);
    const double C15807 =
        (2 * (ae * C26083 + C25781 * C26210) + ae * (C26083 + C26190 * C25896) +
         C25781 *
             (C26210 + ae * C25781 * C26190 +
              C25781 * (ae * C26190 +
                        C25781 * (be * C25876 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25886)))) /
        std::pow(C25629, 2);
    const double C24093 =
        (3 * (C25889 + ae * C26277 + C25781 * C26280) +
         ae * (2 * C26277 + C25781 * C26281) +
         C25781 *
             (2 * C26280 + ae * C26281 +
              C25781 * (C25892 + ae * C25781 * C25774 +
                        C25781 * (ae * C25774 + C25781 * std::pow(C25684, 6) *
                                                    bs[6] * C25886)))) /
        std::pow(C25629, 2);
    const double C26731 = C26708 / C26574;
    const double C26733 = C26712 / C26562;
    const double C577 = -C26732;
    const double C26735 = C26720 / C26574;
    const double C26736 = C26722 / C26562;
    const double C3444 = -C26734;
    const double C26738 = C26724 / C26574;
    const double C26739 = C26726 / C26562;
    const double C6255 = -C26737;
    const double C9330 = C9320 - C9321;
    const double C9329 = C9316 - C9317;
    const double C9328 = C9312 - C9313;
    const double C11232 = C11224 - C11225;
    const double C12285 = C12281 - C12282;
    const double C14187 = C14183 - C14184;
    const double C18168 = C18158 - C18159;
    const double C18167 = C18154 - C18155;
    const double C18166 = C18150 - C18151;
    const double C23825 = C23821 - C23822;
    const double C321 = C318 - C308;
    const double C18414 = C18412 - C18404;
    const double C516 = C513 - C503;
    const double C9790 = C9788 - C9782;
    const double C164 = C141 * C99;
    const double C221 = C198 * C99;
    const double C673 = C141 * C592;
    const double C743 = C198 * C592;
    const double C9326 = C8983 * C592;
    const double C1847 = C141 * C594;
    const double C1903 = C198 * C594;
    const double C10296 = C8983 * C594;
    const double C1276 = C141 * C1195;
    const double C1346 = C198 * C1195;
    const double C18164 = C8983 * C1195;
    const double C2342 = C141 * C1197;
    const double C2398 = C198 * C1197;
    const double C19134 = C8983 * C1197;
    const double C2879 = C141 * C2797;
    const double C2955 = C198 * C2797;
    const double C11230 = C8983 * C2797;
    const double C12404 = C8983 * C4006;
    const double C12476 = C198 * C4006;
    const double C12817 = C8983 * C4408;
    const double C12921 = C198 * C4408;
    const double C21167 = C141 * C4408;
    const double C14354 = C8983 * C5939;
    const double C14458 = C198 * C5939;
    const double C22675 = C141 * C5939;
    const double C24059 = C8983 * C7373;
    const double C24096 = C141 * C7373;
    const double C871 = C866 - C867;
    const double C1123 = C1118 - C1119;
    const double C1474 = C1469 - C1470;
    const double C1726 = C1721 - C1722;
    const double C3101 = C3097 - C3098;
    const double C3391 = C3387 - C3388;
    const double C9324 = C8983 * C591;
    const double C9514 = C26752 * C591;
    const double C10294 = C8983 * C593;
    const double C10452 = C26752 * C593;
    const double C18162 = C8983 * C1194;
    const double C18348 = C26752 * C1194;
    const double C19132 = C8983 * C1196;
    const double C19289 = C26752 * C1196;
    const double C11228 = C8983 * C2796;
    const double C11446 = C26752 * C2796;
    const double C21323 = C26754 * C4620;
    const double C22831 = C26754 * C6151;
    const double C21011 = C26754 * C4300;
    const double C21165 = C141 * C4300;
    const double C22519 = C26754 * C5831;
    const double C22673 = C141 * C5831;
    const double C9323 = C26752 * C597;
    const double C9319 = C26752 * C599;
    const double C18161 = C26752 * C1200;
    const double C18157 = C26752 * C1202;
    const double C11227 = C26752 * C2800;
    const double C317 = C26754 * C303;
    const double C865 = C26754 * C855;
    const double C1468 = C26754 * C1458;
    const double C18409 = C26754 * C1460;
    const double C19883 = C26754 * C3093;
    const double C512 = C26753 * C498;
    const double C1117 = C26753 * C1107;
    const double C9787 = C26753 * C1109;
    const double C1720 = C26753 * C1710;
    const double C11789 = C26753 * C3383;
    const double C12650 = C12646 - C12647;
    const double C13082 = C13078 - C13079;
    const double C322 = C319 - C312;
    const double C323 = C320 - C316;
    const double C872 = C870 - C864;
    const double C2012 = C2011 - C2009;
    const double C1475 = C1473 - C1467;
    const double C18415 = C18413 - C18408;
    const double C2507 = C2506 - C2504;
    const double C19886 = C19885 - C19882;
    const double C23984 = C23983 - C23981;
    const double C517 = C514 - C507;
    const double C518 = C515 - C511;
    const double C1124 = C1122 - C1116;
    const double C9791 = C9789 - C9786;
    const double C2228 = C2227 - C2225;
    const double C1727 = C1725 - C1719;
    const double C2723 = C2722 - C2720;
    const double C11791 = C11790 - C11788;
    const double C12590 = C12589 - C12587;
    const double C14620 = C14619 - C14617;
    const double C25750 = C25712 + C25747;
    const double C4357 =
        (C25755 * C25803 + be * C25781 * C26105 +
         C25781 *
             (be * C26105 + C25781 * C25755 *
                                (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                   bs[6] * C25787))) /
        std::pow(C25629, 2);
    const double C5834 =
        (C25781 *
         (C25777 + be * C26105 +
          C25755 * (be * C25744 +
                    C25755 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C4245 = (C25755 * C25718 + C26105 * C25896) / C25629;
    const double C25749 = C25711 + C25746;
    const double C4569 =
        (C25755 * C25879 + ae * C25781 * C26115 +
         C25781 *
             (ae * C26115 + C25781 * C25755 *
                                (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                   bs[6] * C25863))) /
        std::pow(C25629, 2);
    const double C5942 =
        (C25781 * C25828 + ae * C25781 * C26115 +
         C25755 * (ae * C25781 * C25743 +
                   C25755 * C25781 *
                       (be * C25825 +
                        C25686 * std::pow(C25684, 6) * bs[6] * C25812))) /
        std::pow(C25629, 2);
    const double C4244 = (C25755 * C25717 + C26115 * C25896) / C25629;
    const double C25748 = C25725 + C25745;
    const double C2801 =
        (ae * C25781 * C25755 * C25711 + be * C25781 * C25755 * C25712 +
         C25686 * C25781 * C26016) /
        std::pow(C25629, 2);
    const double C2802 =
        (C25781 * C26016 + ae * C25781 * C25755 * C25743 +
         be * C25781 * C25755 * C25744 +
         C25686 *
             (ae * C25781 * C25755 * C25734 + be * C25781 * C25755 * C25737 +
              C25686 * C25781 * C25755 *
                  (C25723 * C25724 + C25690 * bs[6] * std::pow(C25684, 6)) *
                  C25633)) /
        std::pow(C25629, 2);
    const double C3894 =
        (ae * (2 * C25755 * C25711 + C25755 * (C25711 + C25734 * C25833)) +
         be * (2 * C25755 * C25712 + C25755 * (C25712 + C25737 * C25833)) +
         C25686 * (2 * C26016 +
                   C25755 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C4248 =
        (ae * (C25755 * C25711 + C25755 * C25734 * C25896) +
         be * (C25755 * C25712 + C25755 * C25737 * C25896) +
         C25686 * (C26016 + C25755 *
                                (C25723 * C25724 +
                                 C25690 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25896)) /
        std::pow(C25629, 2);
    const double C4249 =
        (C25755 * C25716 + C26016 * C25896) / std::pow(C25629, 2);
    const double C12279 =
        (3 * (C25716 + C25742 * C25833) +
         C25755 * (2 * C26016 +
                   C25755 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C14181 =
        (C25781 * (2 * C26016 +
                   C25755 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25833))) /
        std::pow(C25629, 2);
    const double C15558 =
        (2 * C25781 * C26016 +
         C25781 * (C26016 + C25755 *
                                (C25723 * C25724 +
                                 C25690 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25896)) /
        std::pow(C25629, 2);
    const double C7151 =
        (ae * (2 * C25781 * C25711 + C25781 * (C25711 + C25734 * C25896)) +
         be * (2 * C25781 * C25712 + C25781 * (C25712 + C25737 * C25896)) +
         C25686 * (2 * C26026 +
                   C25781 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C23819 =
        (3 * (C25716 + C25742 * C25896) +
         C25781 * (2 * C26026 +
                   C25781 * (C25742 + (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C9327 = C26752 * C600;
    const double C10297 = C26752 * C601;
    const double C18165 = C26752 * C1203;
    const double C19135 = C26752 * C1204;
    const double C12284 = C26752 * C3895;
    const double C14186 = C26752 * C5780;
    const double C23824 = C26752 * C7152;
    const double C4621 =
        (be * C25871 + C25755 * C26093 + ae * C25781 * C26077 +
         C25781 *
             (ae * C26077 +
              C25781 * (be * C26094 + C25755 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25886))) /
        std::pow(C25629, 2);
    const double C6152 =
        (ae * (C25769 + C25755 * C26077 + C26073 * be) +
         C25781 *
             (C26093 + be * C26120 +
              C25755 * (be * C26094 + C25755 * C25686 * std::pow(C25684, 6) *
                                          bs[6] * C25886))) /
        std::pow(C25629, 2);
    const double C3931 = (2 * (C25755 * C25769 + C25707 * be) +
                          C25755 * (C25769 + C25755 * C26077 + C26073 * be) +
                          (C25707 + C25729 * C25833) * be) /
                         C25629;
    const double C4301 =
        (C25755 * C25769 + C25707 * be + C26077 * C25896) / C25629;
    const double C5832 =
        (C25781 * (C25769 + C25755 * C26077 + C26073 * be)) / C25629;
    const double C26197 = C25767 + C26195;
    const double C7226 = (2 * (C25781 * C25795 + C25707 * be) +
                          C25781 * (C25795 + C25781 * C26162 + C26160 * be) +
                          (C25707 + C25729 * C25896) * be) /
                         C25629;
    const double C15629 = (2 * (C25781 * C26122 + C26081 * be) +
                           C25781 * (C26122 + C25781 * C26254 + C26250 * be) +
                           (C26081 + C26186 * C25896) * be) /
                          C25629;
    const double C26297 = C25793 + C26295;
    const double C4007 = (2 * (C25755 * C25820 + C25707 * ae) +
                          C25755 * (C25820 + C25755 * C26078 + C26073 * ae) +
                          (C25707 + C25729 * C25833) * ae) /
                         C25629;
    const double C4409 =
        (C25755 * C25820 + C25707 * ae + C26078 * C25896) / C25629;
    const double C5940 =
        (C25781 * (C25820 + C25755 * C26078 + C26073 * ae)) / C25629;
    const double C26198 = C25818 + C26196;
    const double C4044 =
        (2 * (ae * C25769 + be * C25820 + C25755 * C26071) +
         ae * (C25769 + C25755 * C26077 + C26073 * be) +
         be * (C25820 + C25755 * C26078 + C26073 * ae) +
         C25755 * (C26071 + ae * C26077 + be * C26078 +
                   C25755 * (ae * C26072 + be * C26074 +
                             C25755 * C25686 *
                                 (C25723 * C25724 +
                                  C25833 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C4462 =
        (ae * (C25769 + C26072 * C25896) + be * (C25820 + C26074 * C25896) +
         C25755 * (C26071 + C25686 *
                                (C25723 * C25724 +
                                 C25833 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25896)) /
        std::pow(C25629, 2);
    const double C5993 =
        (C25781 * C26071 + ae * C25781 * C26077 + be * C25781 * C26078 +
         C25755 *
             (ae * C25781 * C26072 + be * C25781 * C26074 +
              C25755 * C25781 * C25686 *
                  (C25723 * C25724 + C25833 * bs[6] * std::pow(C25684, 6)) *
                  C25633)) /
        std::pow(C25629, 2);
    const double C7301 =
        (2 * C25781 * C26071 +
         C25781 * (C26071 + C25686 *
                                (C25723 * C25724 +
                                 C25833 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25896)) /
        std::pow(C25629, 2);
    const double C26189 = C26183 + C26184;
    const double C15701 =
        (ae * (2 * C25781 * C25767 + C25781 * (C25767 + C25774 * C25896)) +
         be * (2 * C25781 * C25818 + C25781 * (C25818 + C25825 * C25896)) +
         C25755 * (2 * C26228 +
                   C25781 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C23977 =
        (3 * (C25838 + C25843 * C25896) +
         C25781 * (2 * C26228 +
                   C25781 * (C25843 + (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                          C25633 * C25896))) /
        std::pow(C25629, 2);
    const double C869 = C26754 * C858;
    const double C2010 = C26754 * C859;
    const double C1472 = C26754 * C1461;
    const double C2505 = C26754 * C1462;
    const double C3100 = C26754 * C3094;
    const double C21168 = C26754 * C4463;
    const double C22676 = C26754 * C5994;
    const double C23982 = C26754 * C7302;
    const double C7374 = (2 * (C25781 * C25871 + C25707 * ae) +
                          C25781 * (C25871 + C25781 * C26163 + C26160 * ae) +
                          (C25707 + C25729 * C25896) * ae) /
                         C25629;
    const double C15771 = (2 * (C25781 * C26123 + C26081 * ae) +
                           C25781 * (C26123 + C25781 * C26255 + C26250 * ae) +
                           (C26081 + C26186 * C25896) * ae) /
                          C25629;
    const double C26298 = C25869 + C26296;
    const double C4190 =
        (2 * C25755 * C26096 +
         C25755 * (C26096 + C25686 *
                                (C25723 * C25724 +
                                 C25896 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25833)) /
        std::pow(C25629, 2);
    const double C4672 =
        (C25755 * C26096 + ae * (C25781 * C26119 + C26073 * be) +
         be * (C25781 * C26120 + C26073 * ae) +
         C25781 *
             (ae * C26119 + be * C26120 +
              C25781 * C25755 * C25686 *
                  (C25723 * C25724 + C25896 * bs[6] * std::pow(C25684, 6)) *
                  C25633)) /
        std::pow(C25629, 2);
    const double C6203 =
        (ae * (C25795 + C26088 * C25833) + be * (C25871 + C26094 * C25833) +
         C25781 * (C26096 + C25686 *
                                (C25723 * C25724 +
                                 C25896 * bs[6] * std::pow(C25684, 6)) *
                                C25633 * C25833)) /
        std::pow(C25629, 2);
    const double C7447 =
        (2 * (ae * C25795 + be * C25871 + C25781 * C26096) +
         ae * (C25795 + C25781 * C26162 + C26160 * be) +
         be * (C25871 + C25781 * C26163 + C26160 * ae) +
         C25781 * (C26096 + ae * C26162 + be * C26163 +
                   C25781 * (ae * C26088 + be * C26094 +
                             C25781 * C25686 *
                                 (C25723 * C25724 +
                                  C25896 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C15842 =
        (2 * (ae * C26122 + be * C26123 + C25781 * C26248) +
         ae * (C26122 + C25781 * C26254 + C26250 * be) +
         be * (C26123 + C25781 * C26255 + C26250 * ae) +
         C25781 * (C26248 + ae * C26254 + be * C26255 +
                   C25781 * (ae * C26249 + be * C26251 +
                             C25781 * C25755 *
                                 (C25723 * C25724 +
                                  C25896 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C26289 = C26283 + C26284;
    const double C1121 = C26753 * C1110;
    const double C2226 = C26753 * C1111;
    const double C1724 = C26753 * C1713;
    const double C2721 = C26753 * C1714;
    const double C3390 = C26753 * C3384;
    const double C12588 = C26753 * C4191;
    const double C13081 = C26753 * C4673;
    const double C14618 = C26753 * C6204;
    const double C672 = C26754 * C662;
    const double C1846 = C26754 * C663;
    const double C1275 = C26754 * C1265;
    const double C2341 = C26754 * C1266;
    const double C2878 = C26754 * C2873;
    const double C9516 = C26752 * C802;
    const double C10454 = C26752 * C803;
    const double C18350 = C26752 * C1405;
    const double C19291 = C26752 * C1406;
    const double C11448 = C26752 * C3025;
    const double C742 = C26753 * C732;
    const double C1902 = C26753 * C733;
    const double C1345 = C26753 * C1335;
    const double C2397 = C26753 * C1336;
    const double C2954 = C26753 * C2949;
    const double C9678 = C26752 * C994;
    const double C10606 = C26752 * C995;
    const double C18526 = C26752 * C1597;
    const double C19444 = C26752 * C1598;
    const double C11652 = C26752 * C3244;
    const double C26743 = C26707 - C26731;
    const double C26744 = C26711 - C26733;
    const double C26745 = C26714 - C26735;
    const double C26746 = C26721 - C26736;
    const double C26747 = C26716 - C26738;
    const double C26748 = C26725 - C26739;
    const double C9334 = C9330 - C9322;
    const double C9333 = C9329 - C9318;
    const double C9332 = C9328 - C9314;
    const double C11234 = C11232 - C11226;
    const double C12286 = C12285 - C12283;
    const double C14188 = C14187 - C14185;
    const double C18172 = C18168 - C18160;
    const double C18171 = C18167 - C18156;
    const double C18170 = C18166 - C18152;
    const double C23826 = C23825 - C23823;
    const double C324 = C321 + C309;
    const double C18416 = C18414 + C18405;
    const double C519 = C516 + C504;
    const double C9792 = C9790 + C9783;
    const double C873 = C871 - C868;
    const double C1125 = C1123 - C1120;
    const double C1476 = C1474 - C1471;
    const double C1728 = C1726 - C1723;
    const double C3102 = C3101 - C3099;
    const double C3392 = C3391 - C3389;
    const double C9331 = C9324 - C9325;
    const double C10298 = C10294 - C10295;
    const double C18169 = C18162 - C18163;
    const double C19136 = C19132 - C19133;
    const double C11233 = C11228 - C11229;
    const double C21169 = C21165 - C21166;
    const double C22677 = C22673 - C22674;
    const double C12651 = C12650 - C12648;
    const double C13083 = C13082 - C13080;
    const double C325 = C322 + C313;
    const double C326 = C323 + C317;
    const double C874 = C872 + C865;
    const double C1477 = C1475 + C1468;
    const double C18417 = C18415 + C18409;
    const double C19887 = C19886 + C19883;
    const double C520 = C517 + C508;
    const double C521 = C518 + C512;
    const double C1126 = C1124 + C1117;
    const double C9793 = C9791 + C9787;
    const double C1729 = C1727 + C1720;
    const double C11792 = C11791 + C11789;
    const double C25752 = C25750 + C25738;
    const double C25751 = C25749 + C25735;
    const double C11231 = C26752 * C2801;
    const double C12649 = C26752 * C4249;
    const double C26199 = C26197 + C26191;
    const double C26299 = C26297 + C26291;
    const double C26200 = C26198 + C26194;
    const double C2013 = C2012 + C2010;
    const double C2508 = C2507 + C2505;
    const double C23985 = C23984 + C23982;
    const double C26300 = C26298 + C26294;
    const double C2229 = C2228 + C2226;
    const double C2724 = C2723 + C2721;
    const double C12591 = C12590 + C12588;
    const double C14621 = C14620 + C14618;
    const double C79 = (C26743 * C26565) / C26562 + (C26709 - C26732) / C26564;
    const double C80 =
        (C26744 * C26565) / C26562 + (2 * C26576 + C26743) / C26564;
    const double C81 = (C26565 * C26576) / C26579 + C26744 / C26564;
    const double C3883 =
        (C26745 * C26636) / C26562 + (C26717 - C26734) / C26564;
    const double C3884 =
        (C26746 * C26636) / C26562 + (2 * C26641 + C26745) / C26564;
    const double C3885 = (C26636 * C26641) / C26579 + C26746 / C26564;
    const double C7141 =
        (C26747 * C26664) / C26562 + (C26718 - C26737) / C26564;
    const double C7142 =
        (C26748 * C26664) / C26562 + (2 * C26669 + C26747) / C26564;
    const double C7143 = (C26664 * C26669) / C26579 + C26748 / C26564;
    const double C9338 = C9334 + C9323;
    const double C9337 = C9333 + C9319;
    const double C9336 = C9332 + C9315;
    const double C11236 = C11234 + C11227;
    const double C12287 = C12286 + C12284;
    const double C14189 = C14188 + C14186;
    const double C18176 = C18172 + C18161;
    const double C18175 = C18171 + C18157;
    const double C18174 = C18170 + C18153;
    const double C23827 = C23826 + C23824;
    const double C18418 = C18416 * C26752;
    const double C522 = C519 * C26754;
    const double C875 = C873 + C869;
    const double C1127 = C1125 + C1121;
    const double C1478 = C1476 + C1472;
    const double C1730 = C1728 + C1724;
    const double C3103 = C3102 + C3100;
    const double C3393 = C3392 + C3390;
    const double C9335 = C9331 - C9326;
    const double C10299 = C10298 - C10296;
    const double C18173 = C18169 - C18164;
    const double C19137 = C19136 - C19134;
    const double C11235 = C11233 - C11230;
    const double C21170 = C21169 - C21167;
    const double C22678 = C22677 - C22675;
    const double C13084 = C13083 + C13081;
    const double C18410 = C1477 * C26752;
    const double C18419 = C18417 * C26752;
    const double C19888 = C19887 * C26752;
    const double C523 = C520 * C26754;
    const double C524 = C521 * C26754;
    const double C1128 = C1126 * C26754;
    const double C1731 = C1729 * C26754;
    const double C664 =
        (C25766 + ae * C25769 + C25686 * C25777 + be * C25755 * C25752 +
         C25755 *
             (be * C25752 +
              C25755 * (C25773 + ae * C25686 * C25774 +
                        C25686 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C1337 =
        (C25792 + ae * C25795 + C25686 * C25803 + be * C25781 * C25752 +
         C25781 *
             (be * C25752 +
              C25781 * (C25799 + ae * C25686 * C25800 +
                        C25686 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C1842 =
        (be * (2 * C25718 + C25686 * C25752 + C25736 * ae) +
         C25755 *
             (2 * C25777 + ae * C25778 +
              C25686 * (C25773 + ae * C25686 * C25774 +
                        C25686 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C2393 =
        (be * (2 * C25718 + C25686 * C25752 + C25736 * ae) +
         C25781 *
             (2 * C25803 + ae * C25804 +
              C25686 * (C25799 + ae * C25686 * C25800 +
                        C25686 * (ae * C25800 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25787)))) /
        std::pow(C25629, 2);
    const double C2874 =
        (C25781 *
         (be * C25752 +
          C25755 * (C25773 + ae * C25686 * C25774 +
                    C25686 * (ae * C25774 + C25686 * std::pow(C25684, 6) *
                                                bs[6] * C25761)))) /
        std::pow(C25629, 2);
    const double C2950 =
        (be * C25755 * C25752 +
         C25781 * C25755 *
             (C25799 + ae * C25686 * C25800 +
              C25686 * (ae * C25800 +
                        C25686 * std::pow(C25684, 6) * bs[6] * C25787))) /
        std::pow(C25629, 2);
    const double C101 = (3 * (C25699 + C25686 * C25718 + C25707 * ae) +
                         C25686 * (2 * C25718 + C25686 * C25752 + C25736 * ae) +
                         (2 * C25707 + C25686 * C25736) * ae) /
                        C25629;
    const double C596 =
        (C25699 + C25686 * C25718 + C25707 * ae + C25752 * C25833) / C25629;
    const double C1199 =
        (C25699 + C25686 * C25718 + C25707 * ae + C25752 * C25896) / C25629;
    const double C1789 =
        (C25755 * (2 * C25718 + C25686 * C25752 + C25736 * ae)) / C25629;
    const double C2284 =
        (C25781 * (2 * C25718 + C25686 * C25752 + C25736 * ae)) / C25629;
    const double C2799 = (C25781 * C25755 * C25752) / C25629;
    const double C106 =
        (3 * (C25716 + ae * C25717 + be * C25718 + C25686 * C25748) +
         ae * (2 * C25717 + C25686 * C25751 + C25736 * be) +
         be * (2 * C25718 + C25686 * C25752 + C25736 * ae) +
         C25686 *
             (2 * C25748 + ae * C25751 + be * C25752 +
              C25686 * (C25742 + ae * C25743 + be * C25744 +
                        C25686 * (ae * C25734 + be * C25737 +
                                  C25686 *
                                      (C25723 * C25724 +
                                       C25690 * bs[6] * std::pow(C25684, 6)) *
                                      C25633)))) /
        std::pow(C25629, 2);
    const double C804 =
        (C25817 + be * C25820 + C25686 * C25828 + ae * C25755 * C25751 +
         C25755 *
             (ae * C25751 +
              C25755 * (C25824 + be * C25686 * C25825 +
                        C25686 * (be * C25825 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C1599 =
        (C25868 + be * C25871 + C25686 * C25879 + ae * C25781 * C25751 +
         C25781 *
             (ae * C25751 +
              C25781 * (C25875 + be * C25686 * C25876 +
                        C25686 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C1790 =
        (2 * (ae * C25755 * C25711 + be * C25755 * C25712 + C25686 * C26016) +
         ae * C25755 * C25751 + be * C25755 * C25752 +
         C25686 * (C26016 + ae * C25755 * C25743 + be * C25755 * C25744 +
                   C25686 * (ae * C25755 * C25734 + be * C25755 * C25737 +
                             C25686 * C25755 *
                                 (C25723 * C25724 +
                                  C25690 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C1954 =
        (ae * (2 * C25717 + C25686 * C25751 + C25736 * be) +
         C25755 *
             (2 * C25828 + be * C25829 +
              C25686 * (C25824 + be * C25686 * C25825 +
                        C25686 * (be * C25825 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25812)))) /
        std::pow(C25629, 2);
    const double C2285 =
        (2 * (ae * C25781 * C25711 + be * C25781 * C25712 + C25686 * C26026) +
         ae * C25781 * C25751 + be * C25781 * C25752 +
         C25686 * (C26026 + ae * C25781 * C25743 + be * C25781 * C25744 +
                   C25686 * (ae * C25781 * C25734 + be * C25781 * C25737 +
                             C25686 * C25781 *
                                 (C25723 * C25724 +
                                  C25690 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C2612 =
        (ae * (2 * C25717 + C25686 * C25751 + C25736 * be) +
         C25781 *
             (2 * C25879 + be * C25880 +
              C25686 * (C25875 + be * C25686 * C25876 +
                        C25686 * (be * C25876 + C25686 * std::pow(C25684, 6) *
                                                    bs[6] * C25863)))) /
        std::pow(C25629, 2);
    const double C3026 =
        (ae * C25781 * C25751 +
         C25755 * C25781 *
             (C25824 + be * C25686 * C25825 +
              C25686 * (be * C25825 +
                        C25686 * std::pow(C25684, 6) * bs[6] * C25812))) /
        std::pow(C25629, 2);
    const double C3245 =
        (ae * C25755 * C25751 +
         C25781 * C25755 *
             (C25875 + be * C25686 * C25876 +
              C25686 * (be * C25876 +
                        C25686 * std::pow(C25684, 6) * bs[6] * C25863))) /
        std::pow(C25629, 2);
    const double C100 = (3 * (C25698 + C25686 * C25717 + C25707 * be) +
                         C25686 * (2 * C25717 + C25686 * C25751 + C25736 * be) +
                         (2 * C25707 + C25686 * C25736) * be) /
                        C25629;
    const double C595 =
        (C25698 + C25686 * C25717 + C25707 * be + C25751 * C25833) / C25629;
    const double C1198 =
        (C25698 + C25686 * C25717 + C25707 * be + C25751 * C25896) / C25629;
    const double C1788 =
        (C25755 * (2 * C25717 + C25686 * C25751 + C25736 * be)) / C25629;
    const double C2283 =
        (C25781 * (2 * C25717 + C25686 * C25751 + C25736 * be)) / C25629;
    const double C2798 = (C25781 * C25755 * C25751) / C25629;
    const double C12652 = C12651 + C12649;
    const double C13025 =
        (C25889 + be * C26123 + C25755 * C26210 + ae * C25781 * C26199 +
         C25781 *
             (ae * C26199 +
              C25781 * (C25892 + be * C25755 * C25876 +
                        C25755 * (be * C25876 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25886)))) /
        std::pow(C25629, 2);
    const double C14562 =
        (ae * (2 * C26083 + C25755 * C26199 + C26192 * be) +
         C25781 *
             (2 * C26210 + be * C26211 +
              C25755 * (C25892 + be * C25755 * C25876 +
                        C25755 * (be * C25876 + C25755 * std::pow(C25684, 6) *
                                                    bs[6] * C25886)))) /
        std::pow(C25629, 2);
    const double C12322 =
        (3 * (C25762 + C25755 * C26083 + C26081 * be) +
         C25755 * (2 * C26083 + C25755 * C26199 + C26192 * be) +
         (2 * C26081 + C25755 * C26192) * be) /
        C25629;
    const double C12703 =
        (C25762 + C25755 * C26083 + C26081 * be + C26199 * C25896) / C25629;
    const double C14240 =
        (C25781 * (2 * C26083 + C25755 * C26199 + C26192 * be)) / C25629;
    const double C23901 =
        (3 * (C25788 + C25781 * C26168 + C26166 * be) +
         C25781 * (2 * C26168 + C25781 * C26299 + C26292 * be) +
         (2 * C26166 + C25781 * C26292) * be) /
        C25629;
    const double C12438 =
        (3 * (C25838 + ae * C26083 + be * C26084 + C25755 * C26189) +
         ae * (2 * C26083 + C25755 * C26199 + C26192 * be) +
         be * (2 * C26084 + C25755 * C26200 + C26192 * ae) +
         C25755 *
             (2 * C26189 + ae * C26199 + be * C26200 +
              C25755 * (C25843 + ae * C26190 + be * C26193 +
                        C25755 * (ae * C25774 + be * C25825 +
                                  C25755 *
                                      (C25723 * C25724 +
                                       C25833 * bs[6] * std::pow(C25684, 6)) *
                                      C25633)))) /
        std::pow(C25629, 2);
    const double C14404 =
        (2 * (ae * C25781 * C25767 + be * C25781 * C25818 + C25755 * C26228) +
         ae * C25781 * C26199 + be * C25781 * C26200 +
         C25755 * (C26228 + ae * C25781 * C26190 + be * C25781 * C26193 +
                   C25755 * (ae * C25781 * C25774 + be * C25781 * C25825 +
                             C25755 * C25781 *
                                 (C25723 * C25724 +
                                  C25833 * bs[6] * std::pow(C25684, 6)) *
                                 C25633))) /
        std::pow(C25629, 2);
    const double C12398 =
        (3 * (C25813 + C25755 * C26084 + C26081 * ae) +
         C25755 * (2 * C26084 + C25755 * C26200 + C26192 * ae) +
         (2 * C26081 + C25755 * C26192) * ae) /
        C25629;
    const double C12811 =
        (C25813 + C25755 * C26084 + C26081 * ae + C26200 * C25896) / C25629;
    const double C14348 =
        (C25781 * (2 * C26084 + C25755 * C26200 + C26192 * ae)) / C25629;
    const double C19343 = C2508 * C26752;
    const double C23986 = C23985 * C26752;
    const double C24130 =
        (3 * (C25901 + ae * C26168 + be * C26169 + C25781 * C26289) +
         ae * (2 * C26168 + C25781 * C26299 + C26292 * be) +
         be * (2 * C26169 + C25781 * C26300 + C26292 * ae) +
         C25781 *
             (2 * C26289 + ae * C26299 + be * C26300 +
              C25781 * (C25906 + ae * C26290 + be * C26293 +
                        C25781 * (ae * C25800 + be * C25876 +
                                  C25781 *
                                      (C25723 * C25724 +
                                       C25896 * bs[6] * std::pow(C25684, 6)) *
                                      C25633)))) /
        std::pow(C25629, 2);
    const double C24055 =
        (3 * (C25864 + C25781 * C26169 + C26166 * ae) +
         C25781 * (2 * C26169 + C25781 * C26300 + C26292 * ae) +
         (2 * C26166 + C25781 * C26292) * ae) /
        C25629;
    const double C2230 = C2229 * C26754;
    const double C2725 = C2724 * C26754;
    const double C9342 = C9338 * C26753;
    const double C9341 = C9337 * C26753;
    const double C9340 = C9336 * C26753;
    const double C11238 = C11236 * C26753;
    const double C12288 = C12287 * C26753;
    const double C14190 = C14189 * C26753;
    const double C1129 = C1127 * C26754;
    const double C18411 = C1478 * C26752;
    const double C1732 = C1730 * C26754;
    const double C19884 = C3103 * C26752;
    const double C3394 = C3393 * C26754;
    const double C9339 = C9335 + C9327;
    const double C10300 = C10299 + C10297;
    const double C18177 = C18173 + C18165;
    const double C19138 = C19137 + C19135;
    const double C11237 = C11235 + C11231;
    const double C21171 = C21170 + C21168;
    const double C22679 = C22678 + C22676;
    const double C12653 = C12652 * C26753;
    const double C9343 = C9339 * C26753;
    const double C10301 = C10300 * C26753;
    const double C11239 = C11237 * C26753;
    const double C21172 = C21171 * C26752;
    const double C22680 = C22679 * C26752;
    d2eexx[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C26717 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C26641) *
                       C26743 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C26641 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C26717) *
                       C26744 +
                   ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                     C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                        C26753 * C26754 * C26605 * C26717 -
                    (C85 * C1788 - C86 * C1787 - C85 * C1789 + C74 * C1790 +
                     C83 * C593 - C84 * C583 - C83 * C594 + C73 * C601) *
                        C26753 * C26754 * C26605 * C26641) *
                       C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26605 * C26717 +
                    ((C141 * C580 - C26754 * C653) * C83 +
                     (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                     (C668 - C669) * C74) *
                        C26753 * C26605 * C26641) *
                       C26743 +
                   (((C154 - C153) * C83 + (C156 - C155) * C73 +
                     (C157 - C158) * C85 + (C159 - C160) * C74) *
                        C26753 * C26605 * C26717 +
                    ((C667 - C666) * C83 + (C669 - C668) * C73 +
                     (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                        C26753 * C26605 * C26641) *
                       C26744 +
                   (((C158 - C157) * C83 + (C160 - C159) * C73 +
                     (C161 - C162) * C85 + (C163 - C164) * C74) *
                        C26753 * C26605 * C26717 +
                    ((C1845 - C1844) * C83 + (C1847 - C1846) * C73 +
                     (C141 * C1787 - C26754 * C1841) * C85 +
                     (C141 * C1789 - C26754 * C1842) * C74) *
                        C26753 * C26605 * C26641) *
                       C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[0] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26605 * C26717 +
                    ((C198 * C580 - C26753 * C723) * C83 +
                     (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                     (C738 - C739) * C74) *
                        C26754 * C26605 * C26641) *
                       C26743 +
                   (((C211 - C210) * C83 + (C213 - C212) * C73 +
                     (C214 - C215) * C85 + (C216 - C217) * C74) *
                        C26754 * C26605 * C26717 +
                    ((C737 - C736) * C83 + (C739 - C738) * C73 +
                     (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                        C26754 * C26605 * C26641) *
                       C26744 +
                   (((C215 - C214) * C83 + (C217 - C216) * C73 +
                     (C218 - C219) * C85 + (C220 - C221) * C74) *
                        C26754 * C26605 * C26717 +
                    ((C1901 - C1900) * C83 + (C1903 - C1902) * C73 +
                     (C198 * C1787 - C26753 * C1897) * C85 +
                     (C198 * C1789 - C26753 * C1898) * C74) *
                        C26754 * C26605 * C26641) *
                       C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C26717 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C26641) *
              C26743 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C26717 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C26641) *
              C26744 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C26605 * C26717 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C141 +
            (C83 * C797 - C73 * C803 + C85 * C1953 - C74 * C1954) * C26754) *
               C26753 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C26717 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C26641) *
              C26743 +
          ((C874 * C73 + C2013 * C74) * C26753 * C26605 * C26641 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C26717) *
              C26744 +
          ((C325 * C73 + C326 * C74) * C26753 * C26605 * C26717 -
           ((C141 * C1841 - C299 * C1787 - C141 * C1953 + C26754 * C2005) *
                C74 +
            C2013 * C73) *
               C26753 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26605 * C26717 +
           (((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26605 * C26641) *
              C26743 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26605 * C26717 +
           (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
            ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
               C26605 * C26641) *
              C26744 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C26605 * C26717 +
           (((C1901 - C1900) * C141 + (C2066 - C2065) * C26754) * C73 +
            ((C198 * C1787 - C26753 * C1897) * C141 +
             (C198 * C1953 - C26753 * C2063) * C26754) *
                C74) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezx[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C26717 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C26641) *
              C26743 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C26717 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C26641) *
              C26744 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C26605 * C26717 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C198 +
            (C83 * C989 - C73 * C995 + C85 * C2116 - C74 * C2117) * C26753) *
               C26754 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezy[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26605 * C26717 +
           (((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26605 * C26641) *
              C26743 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26605 * C26717 +
           (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
            ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
               C26605 * C26641) *
              C26744 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C26605 * C26717 +
           (((C1845 - C1844) * C198 + (C2171 - C2170) * C26753) * C73 +
            ((C141 * C1787 - C26754 * C1841) * C198 +
             (C141 * C2116 - C26754 * C2168) * C26753) *
                C74) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezz[0] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C26717 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C26641) *
              C26743 +
          ((C1128 * C73 + C2230 * C74) * C26605 * C26641 -
           (C523 * C74 + C522 * C73) * C26605 * C26717) *
              C26744 +
          ((C523 * C73 + C524 * C74) * C26605 * C26717 -
           ((C198 * C1897 - C494 * C1787 - C198 * C2116 + C26753 * C2221) *
                C26754 * C74 +
            C2230 * C73) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C26718 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C26717 +
                    ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                      C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                         C26753 * C26754 * C26669 -
                     (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                      C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                         C26753 * C26754 * C26718) *
                        C26641) *
                       C577 +
                   (((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                      C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                         C26753 * C26754 * C26669 -
                     (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                      C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                         C26753 * C26754 * C26718) *
                        C26717 +
                    ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                      C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                         C26753 * C26754 * C26718 -
                     (C85 * C2798 - C86 * C2793 - C85 * C2799 + C74 * C2802 +
                      C83 * C2796 - C84 * C2792 - C83 * C2797 + C73 * C2801) *
                         C26753 * C26754 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C26718 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26669) *
                        C26717 +
                    (((C141 * C580 - C26754 * C653) * C83 +
                      (C141 * C588 - C26754 * C659) * C73 +
                      (C666 - C667) * C85 + (C668 - C669) * C74) *
                         C26753 * C26718 +
                     ((C26754 * C2869 - C141 * C2791) * C83 +
                      (C26754 * C2872 - C141 * C2795) * C73 +
                      (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                         C26753 * C26669) *
                        C26641) *
                       C577 +
                   ((((C154 - C153) * C83 + (C156 - C155) * C73 +
                      (C157 - C158) * C85 + (C159 - C160) * C74) *
                         C26753 * C26718 +
                     ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                      (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                         C26753 * C26669) *
                        C26717 +
                    (((C667 - C666) * C83 + (C669 - C668) * C73 +
                      (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                         C26753 * C26718 +
                     ((C2877 - C2876) * C83 + (C2879 - C2878) * C73 +
                      (C141 * C2793 - C26754 * C2871) * C85 +
                      (C141 * C2799 - C26754 * C2874) * C74) *
                         C26753 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[1] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C26718 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26669) *
                        C26717 +
                    (((C198 * C580 - C26753 * C723) * C83 +
                      (C198 * C588 - C26753 * C729) * C73 +
                      (C736 - C737) * C85 + (C738 - C739) * C74) *
                         C26754 * C26718 +
                     ((C26753 * C2945 - C198 * C2791) * C83 +
                      (C26753 * C2948 - C198 * C2795) * C73 +
                      (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                         C26754 * C26669) *
                        C26641) *
                       C577 +
                   ((((C211 - C210) * C83 + (C213 - C212) * C73 +
                      (C214 - C215) * C85 + (C216 - C217) * C74) *
                         C26754 * C26718 +
                     ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                      (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                         C26754 * C26669) *
                        C26717 +
                    (((C737 - C736) * C83 + (C739 - C738) * C73 +
                      (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                         C26754 * C26718 +
                     ((C2953 - C2952) * C83 + (C2955 - C2954) * C73 +
                      (C198 * C2793 - C26753 * C2947) * C85 +
                      (C198 * C2799 - C26753 * C2950) * C74) *
                         C26754 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
             (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
                C26753 * C26718 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
             (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
                C26753 * C26669) *
               C26717 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
             (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
                C26753 * C26718 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
             (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
                C26753 * C26669) *
               C26641) *
              C577 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
             (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
                C26753 * C26718 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
             (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
                C26753 * C26669) *
               C26717 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
             (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
                C26753 * C26718 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C141 +
             (C83 * C3022 - C73 * C3025 + C85 * C3023 - C74 * C3026) * C26754) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
             C324 * C74) *
                C26753 * C26718 -
            (C1477 * C74 +
             (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                 C73) *
                C26753 * C26669) *
               C26717 +
           (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                 C73 +
             C3103 * C74) *
                C26753 * C26669 -
            (C874 * C74 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
                C26753 * C26718) *
               C26641) *
              C577 +
          (((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
            (C325 * C74 + C324 * C73) * C26753 * C26718) *
               C26717 +
           ((C874 * C73 + C2013 * C74) * C26753 * C26718 -
            ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                 C74 +
             C3103 * C73) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C141 +
              (C26753 * C360 - C198 * C255) * C26754) *
                 C73 +
             ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
                C26718 +
            (((C198 * C1183 - C26753 * C1326) * C141 +
              (C198 * C1396 - C26753 * C1528) * C26754) *
                 C73 +
             ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
                C26669) *
               C26717 +
           ((((C198 * C580 - C26753 * C723) * C141 +
              (C198 * C793 - C26753 * C925) * C26754) *
                 C73 +
             ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
                C26718 +
            (((C26753 * C2945 - C198 * C2791) * C141 +
              (C26753 * C3169 - C198 * C3021) * C26754) *
                 C73 +
             ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
                C26669) *
               C26641) *
              C577 +
          (((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
             ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
                C26718 +
            (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
             ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
                C26669) *
               C26717 +
           ((((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
             ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
                C26718 +
            (((C2953 - C2952) * C141 + (C3174 - C3173) * C26754) * C73 +
             ((C198 * C2793 - C26753 * C2947) * C141 +
              (C198 * C3023 - C26753 * C3171) * C26754) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
             (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
                C26754 * C26718 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
             (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
                C26754 * C26669) *
               C26717 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
             (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
                C26754 * C26718 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
             (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
                C26754 * C26669) *
               C26641) *
              C577 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
             (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
                C26754 * C26718 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
             (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
                C26754 * C26669) *
               C26717 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
             (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
                C26754 * C26718 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C198 +
             (C83 * C3241 - C73 * C3244 + C85 * C3242 - C74 * C3245) * C26753) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C198 +
              (C26754 * C449 - C141 * C405) * C26753) *
                 C73 +
             ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
                C26718 +
            (((C141 * C1183 - C26754 * C1256) * C198 +
              (C141 * C1588 - C26754 * C1650) * C26753) *
                 C73 +
             ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
                C26669) *
               C26717 +
           ((((C141 * C580 - C26754 * C653) * C198 +
              (C141 * C985 - C26754 * C1047) * C26753) *
                 C73 +
             ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
                C26718 +
            (((C26754 * C2869 - C141 * C2791) * C198 +
              (C26754 * C3312 - C141 * C3240) * C26753) *
                 C73 +
             ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
                C26669) *
               C26641) *
              C577 +
          (((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
             ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
                C26718 +
            (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
             ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
                C26669) *
               C26717 +
           ((((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
             ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
                C26718 +
            (((C2877 - C2876) * C198 + (C3317 - C3316) * C26753) * C73 +
             ((C141 * C2793 - C26754 * C2871) * C198 +
              (C141 * C3242 - C26754 * C3314) * C26753) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[1] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                 C73 +
             C522 * C74) *
                C26718 -
            (C1731 * C74 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C26754 * C73) *
                C26669) *
               C26717 +
           (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                 C26754 * C73 +
             C3394 * C74) *
                C26669 -
            (C1128 * C74 +
             (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                 C26754 * C73) *
                C26718) *
               C26641) *
              C577 +
          (((C1731 * C73 + C2725 * C74) * C26669 -
            (C523 * C74 + C522 * C73) * C26718) *
               C26717 +
           ((C1128 * C73 + C2230 * C74) * C26718 -
            ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                 C26754 * C74 +
             C3394 * C73) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[2] += (-std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C574 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C575 +
                    (C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                     C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                        C26753 * C26754 * C26605 * C576) *
                       C577 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C575 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C574 -
                    (C85 * C595 - C86 * C584 - C85 * C596 + C74 * C602 +
                     C83 * C591 - C84 * C582 - C83 * C592 + C73 * C600) *
                        C26753 * C26754 * C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 + C85 * C94 -
                    C86 * C88 - C85 * C95 + C74 * C103) *
                       C26753 * C26754 * C26605 * C26589 * C79 -
                   (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 + C83 * C94 -
                    C84 * C88 - C83 * C95 + C73 * C103) *
                       C26753 * C26754 * C26605 * C26589 * C80 +
                   (C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 + C85 * C98 -
                    C86 * C90 - C85 * C99 + C74 * C105) *
                       C26753 * C26754 * C26605 * C26589 * C81 -
                   (C85 * C100 - C86 * C91 - C85 * C101 + C74 * C106 +
                    C83 * C98 - C84 * C90 - C83 * C99 + C73 * C105) *
                       C26753 * C26754 * C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C1179 -
                    (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                     C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                        C26753 * C26754 * C1180 +
                    (C83 * C1192 - C84 * C1184 - C83 * C1193 + C73 * C1202 +
                     C85 * C1194 - C86 * C1185 - C85 * C1195 + C74 * C1203) *
                        C26753 * C26754 * C1181) *
                       C26589 * C577 +
                   ((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                     C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                        C26753 * C26754 * C1180 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C1179 -
                    (C85 * C1198 - C86 * C1187 - C85 * C1199 + C74 * C1205 +
                     C83 * C1194 - C84 * C1185 - C83 * C1195 + C73 * C1203) *
                        C26753 * C26754 * C1181) *
                       C26589 * C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eexy[2] +=
        (-std::pow(Pi, 2.5) * ((((C26754 * C142 - C141 * C87) * C83 +
                                 (C26754 * C147 - C141 * C93) * C73 +
                                 (C153 - C154) * C85 + (C155 - C156) * C74) *
                                    C26753 * C26605 * C574 +
                                ((C141 * C580 - C26754 * C653) * C83 +
                                 (C141 * C588 - C26754 * C659) * C73 +
                                 (C666 - C667) * C85 + (C668 - C669) * C74) *
                                    C26753 * C26605 * C575 +
                                ((C26754 * C655 - C141 * C581) * C83 +
                                 (C26754 * C661 - C141 * C590) * C73 +
                                 (C670 - C671) * C85 + (C672 - C673) * C74) *
                                    C26753 * C26605 * C576) *
                                   C577 +
                               (((C154 - C153) * C83 + (C156 - C155) * C73 +
                                 (C157 - C158) * C85 + (C159 - C160) * C74) *
                                    C26753 * C26605 * C574 +
                                ((C667 - C666) * C83 + (C669 - C668) * C73 +
                                 (C26754 * C657 - C141 * C583) * C85 +
                                 (C26754 * C663 - C141 * C594) * C74) *
                                    C26753 * C26605 * C575 +
                                ((C671 - C670) * C83 + (C673 - C672) * C73 +
                                 (C141 * C584 - C26754 * C658) * C85 +
                                 (C141 * C596 - C26754 * C664) * C74) *
                                    C26753 * C26605 * C576) *
                                   C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C26754 * C142 - C141 * C87) * C83 +
                               (C26754 * C147 - C141 * C93) * C73 +
                               (C153 - C154) * C85 + (C155 - C156) * C74) *
                                  C26753 * C26605 * C26589 * C79 +
                              ((C154 - C153) * C83 + (C156 - C155) * C73 +
                               (C157 - C158) * C85 + (C159 - C160) * C74) *
                                  C26753 * C26605 * C26589 * C80 +
                              ((C158 - C157) * C83 + (C160 - C159) * C73 +
                               (C161 - C162) * C85 + (C163 - C164) * C74) *
                                  C26753 * C26605 * C26589 * C81 +
                              ((C162 - C161) * C83 + (C164 - C163) * C73 +
                               (C141 * C91 - C26754 * C146) * C85 +
                               (C141 * C101 - C26754 * C151) * C74) *
                                  C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C83 +
            (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
            (C155 - C156) * C74) *
               C26753 * C1179 +
           ((C141 * C1183 - C26754 * C1256) * C83 +
            (C141 * C1191 - C26754 * C1262) * C73 + (C1269 - C1270) * C85 +
            (C1271 - C1272) * C74) *
               C26753 * C1180 +
           ((C26754 * C1258 - C141 * C1184) * C83 +
            (C26754 * C1264 - C141 * C1193) * C73 + (C1273 - C1274) * C85 +
            (C1275 - C1276) * C74) *
               C26753 * C1181) *
              C26589 * C577 +
          (((C154 - C153) * C83 + (C156 - C155) * C73 + (C157 - C158) * C85 +
            (C159 - C160) * C74) *
               C26753 * C1179 +
           ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
            (C26754 * C1260 - C141 * C1186) * C85 +
            (C26754 * C1266 - C141 * C1197) * C74) *
               C26753 * C1180 +
           ((C1274 - C1273) * C83 + (C1276 - C1275) * C73 +
            (C141 * C1187 - C26754 * C1261) * C85 +
            (C141 * C1199 - C26754 * C1267) * C74) *
               C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexz[2] +=
        (-std::pow(Pi, 2.5) * ((((C26753 * C199 - C198 * C87) * C83 +
                                 (C26753 * C204 - C198 * C93) * C73 +
                                 (C210 - C211) * C85 + (C212 - C213) * C74) *
                                    C26754 * C26605 * C574 +
                                ((C198 * C580 - C26753 * C723) * C83 +
                                 (C198 * C588 - C26753 * C729) * C73 +
                                 (C736 - C737) * C85 + (C738 - C739) * C74) *
                                    C26754 * C26605 * C575 +
                                ((C26753 * C725 - C198 * C581) * C83 +
                                 (C26753 * C731 - C198 * C590) * C73 +
                                 (C740 - C741) * C85 + (C742 - C743) * C74) *
                                    C26754 * C26605 * C576) *
                                   C577 +
                               (((C211 - C210) * C83 + (C213 - C212) * C73 +
                                 (C214 - C215) * C85 + (C216 - C217) * C74) *
                                    C26754 * C26605 * C574 +
                                ((C737 - C736) * C83 + (C739 - C738) * C73 +
                                 (C26753 * C727 - C198 * C583) * C85 +
                                 (C26753 * C733 - C198 * C594) * C74) *
                                    C26754 * C26605 * C575 +
                                ((C741 - C740) * C83 + (C743 - C742) * C73 +
                                 (C198 * C584 - C26753 * C728) * C85 +
                                 (C198 * C596 - C26753 * C734) * C74) *
                                    C26754 * C26605 * C576) *
                                   C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C26753 * C199 - C198 * C87) * C83 +
                               (C26753 * C204 - C198 * C93) * C73 +
                               (C210 - C211) * C85 + (C212 - C213) * C74) *
                                  C26754 * C26605 * C26589 * C79 +
                              ((C211 - C210) * C83 + (C213 - C212) * C73 +
                               (C214 - C215) * C85 + (C216 - C217) * C74) *
                                  C26754 * C26605 * C26589 * C80 +
                              ((C215 - C214) * C83 + (C217 - C216) * C73 +
                               (C218 - C219) * C85 + (C220 - C221) * C74) *
                                  C26754 * C26605 * C26589 * C81 +
                              ((C219 - C218) * C83 + (C221 - C220) * C73 +
                               (C198 * C91 - C26753 * C203) * C85 +
                               (C198 * C101 - C26753 * C208) * C74) *
                                  C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C83 +
            (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
            (C212 - C213) * C74) *
               C26754 * C1179 +
           ((C198 * C1183 - C26753 * C1326) * C83 +
            (C198 * C1191 - C26753 * C1332) * C73 + (C1339 - C1340) * C85 +
            (C1341 - C1342) * C74) *
               C26754 * C1180 +
           ((C26753 * C1328 - C198 * C1184) * C83 +
            (C26753 * C1334 - C198 * C1193) * C73 + (C1343 - C1344) * C85 +
            (C1345 - C1346) * C74) *
               C26754 * C1181) *
              C26589 * C577 +
          (((C211 - C210) * C83 + (C213 - C212) * C73 + (C214 - C215) * C85 +
            (C216 - C217) * C74) *
               C26754 * C1179 +
           ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
            (C26753 * C1330 - C198 * C1186) * C85 +
            (C26753 * C1336 - C198 * C1197) * C74) *
               C26754 * C1180 +
           ((C1344 - C1343) * C83 + (C1346 - C1345) * C73 +
            (C198 * C1187 - C26753 * C1331) * C85 +
            (C198 * C1199 - C26753 * C1337) * C74) *
               C26754 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C574 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C575 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C26605 * C576) *
              C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C574 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C575 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C141 +
            (C83 * C796 - C73 * C802 + C85 * C798 - C74 * C804) * C26754) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
           (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
              C26753 * C26605 * C26589 * C79 +
          ((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
           (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
              C26753 * C26605 * C26589 * C80 +
          ((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
           (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
              C26753 * C26605 * C26589 * C81 +
          ((C83 * C90 - C73 * C98 + C85 * C91 - C74 * C100) * C141 +
           (C83 * C258 - C73 * C263 + C85 * C259 - C74 * C264) * C26754) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C1179 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C1180 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C141 +
            (C73 * C1404 - C83 * C1398 + C74 * C1405 - C85 * C1399) * C26754) *
               C26753 * C1181) *
              C26589 * C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C1179 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
            (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
               C26753 * C1180 +
           ((C83 * C1185 - C73 * C1194 + C85 * C1187 - C74 * C1198) * C141 +
            (C83 * C1399 - C73 * C1405 + C85 * C1401 - C74 * C1407) * C26754) *
               C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C574 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C575 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C26605 * C576) *
              C577 +
          ((C874 * C73 +
            (C141 * C657 - C299 * C583 - C141 * C797 + C26754 * C859) * C74) *
               C26753 * C26605 * C575 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C574 -
           ((C141 * C658 - C299 * C584 - C141 * C798 + C26754 * C860) * C74 +
            C875 * C73) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
           C324 * C74) *
              C26753 * C26605 * C26589 * C79 -
          (C325 * C74 + C324 * C73) * C26753 * C26605 * C26589 * C80 +
          (C325 * C73 + C326 * C74) * C26753 * C26605 * C26589 * C81 -
          ((C141 * C146 - C299 * C91 - C141 * C259 + C26754 * C304) * C74 +
           C326 * C73) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C1179 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C1180 +
           ((C141 * C1258 - C299 * C1184 - C141 * C1398 + C26754 * C1460) *
                C73 +
            C1478 * C74) *
               C26753 * C1181) *
              C26589 * C577 +
          ((C1477 * C73 +
            (C141 * C1260 - C299 * C1186 - C141 * C1400 + C26754 * C1462) *
                C74) *
               C26753 * C1180 -
           (C325 * C74 + C324 * C73) * C26753 * C1179 -
           ((C141 * C1261 - C299 * C1187 - C141 * C1401 + C26754 * C1463) *
                C74 +
            C1478 * C73) *
               C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[2] +=
        (-std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26605 * C574 +
           (((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26605 * C575 +
           (((C26753 * C725 - C198 * C581) * C141 +
             (C26753 * C927 - C198 * C795) * C26754) *
                C73 +
            ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
               C26605 * C576) *
              C577 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26605 * C574 +
           (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
            ((C26753 * C727 - C198 * C583) * C141 +
             (C26753 * C929 - C198 * C797) * C26754) *
                C74) *
               C26605 * C575 +
           (((C741 - C740) * C141 + (C935 - C934) * C26754) * C73 +
            ((C198 * C584 - C26753 * C728) * C141 +
             (C198 * C798 - C26753 * C930) * C26754) *
                C74) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C141 +
            (C26753 * C360 - C198 * C255) * C26754) *
               C73 +
           ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
              C26605 * C26589 * C79 +
          (((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
           ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
              C26605 * C26589 * C80 +
          (((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
           ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
              C26605 * C26589 * C81 +
          (((C219 - C218) * C141 + (C371 - C370) * C26754) * C73 +
           ((C198 * C91 - C26753 * C203) * C141 +
            (C198 * C259 - C26753 * C364) * C26754) *
               C74) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C1179 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C1180 +
           (((C26753 * C1328 - C198 * C1184) * C141 +
             (C26753 * C1530 - C198 * C1398) * C26754) *
                C73 +
            ((C1343 - C1344) * C141 + (C1537 - C1538) * C26754) * C74) *
               C1181) *
              C26589 * C577 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C1179 +
           (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
            ((C26753 * C1330 - C198 * C1186) * C141 +
             (C26753 * C1532 - C198 * C1400) * C26754) *
                C74) *
               C1180 +
           (((C1344 - C1343) * C141 + (C1538 - C1537) * C26754) * C73 +
            ((C198 * C1187 - C26753 * C1331) * C141 +
             (C198 * C1401 - C26753 * C1533) * C26754) *
                C74) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezx[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C574 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C575 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C26605 * C576) *
              C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C574 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C575 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C198 +
            (C83 * C988 - C73 * C994 + C85 * C990 - C74 * C996) * C26753) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
           (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
              C26754 * C26605 * C26589 * C79 +
          ((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
           (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
              C26754 * C26605 * C26589 * C80 +
          ((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
           (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
              C26754 * C26605 * C26589 * C81 +
          ((C83 * C90 - C73 * C98 + C85 * C91 - C74 * C100) * C198 +
           (C83 * C408 - C73 * C413 + C85 * C409 - C74 * C414) * C26753) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C1179 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C1180 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C198 +
            (C73 * C1596 - C83 * C1590 + C74 * C1597 - C85 * C1591) * C26753) *
               C26754 * C1181) *
              C26589 * C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C1179 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
            (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
               C26754 * C1180 +
           ((C83 * C1185 - C73 * C1194 + C85 * C1187 - C74 * C1198) * C198 +
            (C83 * C1591 - C73 * C1597 + C85 * C1593 - C74 * C1599) * C26753) *
               C26754 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezy[2] +=
        (-std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26605 * C574 +
           (((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26605 * C575 +
           (((C26754 * C655 - C141 * C581) * C198 +
             (C26754 * C1049 - C141 * C987) * C26753) *
                C73 +
            ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
               C26605 * C576) *
              C577 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26605 * C574 +
           (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
            ((C26754 * C657 - C141 * C583) * C198 +
             (C26754 * C1051 - C141 * C989) * C26753) *
                C74) *
               C26605 * C575 +
           (((C671 - C670) * C198 + (C1057 - C1056) * C26753) * C73 +
            ((C141 * C584 - C26754 * C658) * C198 +
             (C141 * C990 - C26754 * C1052) * C26753) *
                C74) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C198 +
            (C26754 * C449 - C141 * C405) * C26753) *
               C73 +
           ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
              C26605 * C26589 * C79 +
          (((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
           ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
              C26605 * C26589 * C80 +
          (((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
           ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
              C26605 * C26589 * C81 +
          (((C162 - C161) * C198 + (C460 - C459) * C26753) * C73 +
           ((C141 * C91 - C26754 * C146) * C198 +
            (C141 * C409 - C26754 * C453) * C26753) *
               C74) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C1179 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C1180 +
           (((C26754 * C1258 - C141 * C1184) * C198 +
             (C26754 * C1652 - C141 * C1590) * C26753) *
                C73 +
            ((C1273 - C1274) * C198 + (C1659 - C1660) * C26753) * C74) *
               C1181) *
              C26589 * C577 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C1179 +
           (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
            ((C26754 * C1260 - C141 * C1186) * C198 +
             (C26754 * C1654 - C141 * C1592) * C26753) *
                C74) *
               C1180 +
           (((C1274 - C1273) * C198 + (C1660 - C1659) * C26753) * C73 +
            ((C141 * C1187 - C26754 * C1261) * C198 +
             (C141 * C1593 - C26754 * C1655) * C26753) *
                C74) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezz[2] +=
        (-std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C574 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C575 +
           ((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C26605 * C576) *
              C577 +
          ((C1128 * C73 +
            (C198 * C727 - C494 * C583 - C198 * C989 + C26753 * C1111) *
                C26754 * C74) *
               C26605 * C575 -
           (C523 * C74 + C522 * C73) * C26605 * C574 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) *
                C26754 * C74 +
            C1129 * C73) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
               C73 +
           C522 * C74) *
              C26605 * C26589 * C79 -
          (C523 * C74 + C522 * C73) * C26605 * C26589 * C80 +
          (C523 * C73 + C524 * C74) * C26605 * C26589 * C81 -
          ((C198 * C203 - C494 * C91 - C198 * C409 + C26753 * C499) * C26754 *
               C74 +
           C524 * C73) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C1179 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C1180 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C26754 * C73 +
            C1732 * C74) *
               C1181) *
              C26589 * C577 +
          ((C1731 * C73 +
            (C198 * C1330 - C494 * C1186 - C198 * C1592 + C26753 * C1714) *
                C26754 * C74) *
               C1180 -
           (C523 * C74 + C522 * C73) * C1179 -
           ((C198 * C1331 - C494 * C1187 - C198 * C1593 + C26753 * C1715) *
                C26754 * C74 +
            C1732 * C73) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26718 -
                    (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                     C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                        C26753 * C26754 * C26669) *
                       C26589 * C26743 +
                   ((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                     C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                        C26753 * C26754 * C26669 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26718) *
                       C26589 * C26744 +
                   ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                     C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                        C26753 * C26754 * C26718 -
                    (C85 * C2283 - C86 * C2282 - C85 * C2284 + C74 * C2285 +
                     C83 * C1196 - C84 * C1186 - C83 * C1197 + C73 * C1204) *
                        C26753 * C26754 * C26669) *
                       C26589 * C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26718 +
                    ((C141 * C1183 - C26754 * C1256) * C83 +
                     (C141 * C1191 - C26754 * C1262) * C73 +
                     (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                        C26753 * C26669) *
                       C26589 * C26743 +
                   (((C154 - C153) * C83 + (C156 - C155) * C73 +
                     (C157 - C158) * C85 + (C159 - C160) * C74) *
                        C26753 * C26718 +
                    ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                     (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                        C26753 * C26669) *
                       C26589 * C26744 +
                   (((C158 - C157) * C83 + (C160 - C159) * C73 +
                     (C161 - C162) * C85 + (C163 - C164) * C74) *
                        C26753 * C26718 +
                    ((C2340 - C2339) * C83 + (C2342 - C2341) * C73 +
                     (C141 * C2282 - C26754 * C2336) * C85 +
                     (C141 * C2284 - C26754 * C2337) * C74) *
                        C26753 * C26669) *
                       C26589 * C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[3] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26718 +
                    ((C198 * C1183 - C26753 * C1326) * C83 +
                     (C198 * C1191 - C26753 * C1332) * C73 +
                     (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                        C26754 * C26669) *
                       C26589 * C26743 +
                   (((C211 - C210) * C83 + (C213 - C212) * C73 +
                     (C214 - C215) * C85 + (C216 - C217) * C74) *
                        C26754 * C26718 +
                    ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                     (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                        C26754 * C26669) *
                       C26589 * C26744 +
                   (((C215 - C214) * C83 + (C217 - C216) * C73 +
                     (C218 - C219) * C85 + (C220 - C221) * C74) *
                        C26754 * C26718 +
                    ((C2396 - C2395) * C83 + (C2398 - C2397) * C73 +
                     (C198 * C2282 - C26753 * C2392) * C85 +
                     (C198 * C2284 - C26753 * C2393) * C74) *
                        C26754 * C26669) *
                       C26589 * C1786)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26718 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C26589 * C26743 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26718 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
            (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
               C26753 * C26669) *
              C26589 * C26744 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C26718 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C141 +
            (C83 * C1400 - C73 * C1406 + C85 * C2448 - C74 * C2449) * C26754) *
               C26753 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26718 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C26589 * C26743 +
          ((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
           (C325 * C74 + C324 * C73) * C26753 * C26718) *
              C26589 * C26744 +
          ((C325 * C73 + C326 * C74) * C26753 * C26718 -
           ((C141 * C2336 - C299 * C2282 - C141 * C2448 + C26754 * C2500) *
                C74 +
            C2508 * C73) *
               C26753 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26718 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C26589 * C26743 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26718 +
           (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
            ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
               C26669) *
              C26589 * C26744 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C26718 +
           (((C2396 - C2395) * C141 + (C2561 - C2560) * C26754) * C73 +
            ((C198 * C2282 - C26753 * C2392) * C141 +
             (C198 * C2448 - C26753 * C2558) * C26754) *
                C74) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezx[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26718 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C26589 * C26743 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26718 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
            (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
               C26754 * C26669) *
              C26589 * C26744 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C26718 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C198 +
            (C83 * C1592 - C73 * C1598 + C85 * C2611 - C74 * C2612) * C26753) *
               C26754 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezy[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26718 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C26589 * C26743 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26718 +
           (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
            ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
               C26669) *
              C26589 * C26744 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C26718 +
           (((C2340 - C2339) * C198 + (C2666 - C2665) * C26753) * C73 +
            ((C141 * C2282 - C26754 * C2336) * C198 +
             (C141 * C2611 - C26754 * C2663) * C26753) *
                C74) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezz[3] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26718 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C26589 * C26743 +
          ((C1731 * C73 + C2725 * C74) * C26669 -
           (C523 * C74 + C522 * C73) * C26718) *
              C26589 * C26744 +
          ((C523 * C73 + C524 * C74) * C26718 -
           ((C198 * C2392 - C494 * C2282 - C198 * C2611 + C26753 * C2716) *
                C26754 * C74 +
            C2725 * C73) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 + C85 * C94 -
                    C86 * C88 - C85 * C95 + C74 * C103) *
                       C26753 * C26754 * C26605 * C26589 * C79 -
                   (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 + C83 * C94 -
                    C84 * C88 - C83 * C95 + C73 * C103) *
                       C26753 * C26754 * C26605 * C26589 * C80 +
                   (C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 + C85 * C98 -
                    C86 * C90 - C85 * C99 + C74 * C105) *
                       C26753 * C26754 * C26605 * C26589 * C81 -
                   (C85 * C100 - C86 * C91 - C85 * C101 + C74 * C106 +
                    C83 * C98 - C84 * C90 - C83 * C99 + C73 * C105) *
                       C26753 * C26754 * C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C574 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C575 +
                    (C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                     C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                        C26753 * C26754 * C26605 * C576) *
                       C577 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C575 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C574 -
                    (C85 * C595 - C86 * C584 - C85 * C596 + C74 * C602 +
                     C83 * C591 - C84 * C582 - C83 * C592 + C73 * C600) *
                        C26753 * C26754 * C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eexy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C26754 * C142 - C141 * C87) * C83 +
                    (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                    (C155 - C156) * C74) *
                       C26753 * C26605 * C26589 * C79 +
                   ((C154 - C153) * C83 + (C156 - C155) * C73 +
                    (C157 - C158) * C85 + (C159 - C160) * C74) *
                       C26753 * C26605 * C26589 * C80 +
                   ((C158 - C157) * C83 + (C160 - C159) * C73 +
                    (C161 - C162) * C85 + (C163 - C164) * C74) *
                       C26753 * C26605 * C26589 * C81 +
                   ((C162 - C161) * C83 + (C164 - C163) * C73 +
                    (C141 * C91 - C26754 * C146) * C85 +
                    (C141 * C101 - C26754 * C151) * C74) *
                       C26753 * C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26605 * C574 +
                    ((C141 * C580 - C26754 * C653) * C83 +
                     (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                     (C668 - C669) * C74) *
                        C26753 * C26605 * C575 +
                    ((C26754 * C655 - C141 * C581) * C83 +
                     (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
                     (C672 - C673) * C74) *
                        C26753 * C26605 * C576) *
                       C577 +
                   (((C154 - C153) * C83 + (C156 - C155) * C73 +
                     (C157 - C158) * C85 + (C159 - C160) * C74) *
                        C26753 * C26605 * C574 +
                    ((C667 - C666) * C83 + (C669 - C668) * C73 +
                     (C26754 * C657 - C141 * C583) * C85 +
                     (C26754 * C663 - C141 * C594) * C74) *
                        C26753 * C26605 * C575 +
                    ((C671 - C670) * C83 + (C673 - C672) * C73 +
                     (C141 * C584 - C26754 * C658) * C85 +
                     (C141 * C596 - C26754 * C664) * C74) *
                        C26753 * C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eexz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C26753 * C199 - C198 * C87) * C83 +
                    (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                    (C212 - C213) * C74) *
                       C26754 * C26605 * C26589 * C79 +
                   ((C211 - C210) * C83 + (C213 - C212) * C73 +
                    (C214 - C215) * C85 + (C216 - C217) * C74) *
                       C26754 * C26605 * C26589 * C80 +
                   ((C215 - C214) * C83 + (C217 - C216) * C73 +
                    (C218 - C219) * C85 + (C220 - C221) * C74) *
                       C26754 * C26605 * C26589 * C81 +
                   ((C219 - C218) * C83 + (C221 - C220) * C73 +
                    (C198 * C91 - C26753 * C203) * C85 +
                    (C198 * C101 - C26753 * C208) * C74) *
                       C26754 * C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26605 * C574 +
                    ((C198 * C580 - C26753 * C723) * C83 +
                     (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                     (C738 - C739) * C74) *
                        C26754 * C26605 * C575 +
                    ((C26753 * C725 - C198 * C581) * C83 +
                     (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
                     (C742 - C743) * C74) *
                        C26754 * C26605 * C576) *
                       C577 +
                   (((C211 - C210) * C83 + (C213 - C212) * C73 +
                     (C214 - C215) * C85 + (C216 - C217) * C74) *
                        C26754 * C26605 * C574 +
                    ((C737 - C736) * C83 + (C739 - C738) * C73 +
                     (C26753 * C727 - C198 * C583) * C85 +
                     (C26753 * C733 - C198 * C594) * C74) *
                        C26754 * C26605 * C575 +
                    ((C741 - C740) * C83 + (C743 - C742) * C73 +
                     (C198 * C584 - C26753 * C728) * C85 +
                     (C198 * C596 - C26753 * C734) * C74) *
                        C26754 * C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
           (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
              C26753 * C26605 * C26589 * C79 +
          ((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
           (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
              C26753 * C26605 * C26589 * C80 +
          ((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
           (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
              C26753 * C26605 * C26589 * C81 +
          ((C83 * C90 - C73 * C98 + C85 * C91 - C74 * C100) * C141 +
           (C83 * C258 - C73 * C263 + C85 * C259 - C74 * C264) * C26754) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C574 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C575 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C26605 * C576) *
              C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C574 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C575 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C141 +
            (C83 * C796 - C73 * C802 + C85 * C798 - C74 * C804) * C26754) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
           C324 * C74) *
              C26753 * C26605 * C26589 * C79 -
          (C325 * C74 + C324 * C73) * C26753 * C26605 * C26589 * C80 +
          (C325 * C73 + C326 * C74) * C26753 * C26605 * C26589 * C81 -
          ((C141 * C146 - C299 * C91 - C141 * C259 + C26754 * C304) * C74 +
           C326 * C73) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C574 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C575 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C26605 * C576) *
              C577 +
          ((C874 * C73 +
            (C141 * C657 - C299 * C583 - C141 * C797 + C26754 * C859) * C74) *
               C26753 * C26605 * C575 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C574 -
           ((C141 * C658 - C299 * C584 - C141 * C798 + C26754 * C860) * C74 +
            C875 * C73) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C141 +
                     (C26753 * C360 - C198 * C255) * C26754) *
                        C73 +
                    ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
                       C26605 * C26589 * C79 +
                   (((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
                    ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
                       C26605 * C26589 * C80 +
                   (((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
                    ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
                       C26605 * C26589 * C81 +
                   (((C219 - C218) * C141 + (C371 - C370) * C26754) * C73 +
                    ((C198 * C91 - C26753 * C203) * C141 +
                     (C198 * C259 - C26753 * C364) * C26754) *
                        C74) *
                       C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C26753 * C199 - C198 * C87) * C141 +
                      (C26753 * C360 - C198 * C255) * C26754) *
                         C73 +
                     ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
                        C26605 * C574 +
                    (((C198 * C580 - C26753 * C723) * C141 +
                      (C198 * C793 - C26753 * C925) * C26754) *
                         C73 +
                     ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
                        C26605 * C575 +
                    (((C26753 * C725 - C198 * C581) * C141 +
                      (C26753 * C927 - C198 * C795) * C26754) *
                         C73 +
                     ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
                        C26605 * C576) *
                       C577 +
                   ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
                     ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
                        C26605 * C574 +
                    (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
                     ((C26753 * C727 - C198 * C583) * C141 +
                      (C26753 * C929 - C198 * C797) * C26754) *
                         C74) *
                        C26605 * C575 +
                    (((C741 - C740) * C141 + (C935 - C934) * C26754) * C73 +
                     ((C198 * C584 - C26753 * C728) * C141 +
                      (C198 * C798 - C26753 * C930) * C26754) *
                         C74) *
                        C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eezx[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
           (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
              C26754 * C26605 * C26589 * C79 +
          ((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
           (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
              C26754 * C26605 * C26589 * C80 +
          ((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
           (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
              C26754 * C26605 * C26589 * C81 +
          ((C83 * C90 - C73 * C98 + C85 * C91 - C74 * C100) * C198 +
           (C83 * C408 - C73 * C413 + C85 * C409 - C74 * C414) * C26753) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C574 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C575 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C26605 * C576) *
              C577 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C574 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C575 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C198 +
            (C83 * C988 - C73 * C994 + C85 * C990 - C74 * C996) * C26753) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezy[4] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C198 +
                     (C26754 * C449 - C141 * C405) * C26753) *
                        C73 +
                    ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
                       C26605 * C26589 * C79 +
                   (((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
                    ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
                       C26605 * C26589 * C80 +
                   (((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
                    ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
                       C26605 * C26589 * C81 +
                   (((C162 - C161) * C198 + (C460 - C459) * C26753) * C73 +
                    ((C141 * C91 - C26754 * C146) * C198 +
                     (C141 * C409 - C26754 * C453) * C26753) *
                        C74) *
                       C26605 * C26589 * C82)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C26754 * C142 - C141 * C87) * C198 +
                      (C26754 * C449 - C141 * C405) * C26753) *
                         C73 +
                     ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
                        C26605 * C574 +
                    (((C141 * C580 - C26754 * C653) * C198 +
                      (C141 * C985 - C26754 * C1047) * C26753) *
                         C73 +
                     ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
                        C26605 * C575 +
                    (((C26754 * C655 - C141 * C581) * C198 +
                      (C26754 * C1049 - C141 * C987) * C26753) *
                         C73 +
                     ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
                        C26605 * C576) *
                       C577 +
                   ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
                     ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
                        C26605 * C574 +
                    (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
                     ((C26754 * C657 - C141 * C583) * C198 +
                      (C26754 * C1051 - C141 * C989) * C26753) *
                         C74) *
                        C26605 * C575 +
                    (((C671 - C670) * C198 + (C1057 - C1056) * C26753) * C73 +
                     ((C141 * C584 - C26754 * C658) * C198 +
                      (C141 * C990 - C26754 * C1052) * C26753) *
                         C74) *
                        C26605 * C576) *
                       C26576)) /
                     (p * q * std::sqrt(p + q));
    d2eezz[4] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
               C73 +
           C522 * C74) *
              C26605 * C26589 * C79 -
          (C523 * C74 + C522 * C73) * C26605 * C26589 * C80 +
          (C523 * C73 + C524 * C74) * C26605 * C26589 * C81 -
          ((C198 * C203 - C494 * C91 - C198 * C409 + C26753 * C499) * C26754 *
               C74 +
           C524 * C73) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C574 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C575 +
           ((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C26605 * C576) *
              C577 +
          ((C1128 * C73 +
            (C198 * C727 - C494 * C583 - C198 * C989 + C26753 * C1111) *
                C26754 * C74) *
               C26605 * C575 -
           (C523 * C74 + C522 * C73) * C26605 * C574 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) *
                C26754 * C74 +
            C1129 * C73) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C26745 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C26746 +
                    (C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                     C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                        C26753 * C26754 * C26605 * C4726) *
                       C26709 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C26746 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C26745 -
                    (C85 * C595 - C86 * C584 - C85 * C596 + C74 * C602 +
                     C83 * C591 - C84 * C582 - C83 * C592 + C73 * C600) *
                        C26753 * C26754 * C26605 * C4726) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26605 * C26745 +
                    ((C141 * C580 - C26754 * C653) * C83 +
                     (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                     (C668 - C669) * C74) *
                        C26753 * C26605 * C26746 +
                    ((C26754 * C655 - C141 * C581) * C83 +
                     (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
                     (C672 - C673) * C74) *
                        C26753 * C26605 * C4726) *
                       C26709 +
                   (((C154 - C153) * C83 + (C156 - C155) * C73 +
                     (C157 - C158) * C85 + (C159 - C160) * C74) *
                        C26753 * C26605 * C26745 +
                    ((C667 - C666) * C83 + (C669 - C668) * C73 +
                     (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                        C26753 * C26605 * C26746 +
                    ((C671 - C670) * C83 + (C673 - C672) * C73 +
                     (C141 * C584 - C26754 * C658) * C85 +
                     (C141 * C596 - C26754 * C664) * C74) *
                        C26753 * C26605 * C4726) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[5] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26605 * C26745 +
                    ((C198 * C580 - C26753 * C723) * C83 +
                     (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                     (C738 - C739) * C74) *
                        C26754 * C26605 * C26746 +
                    ((C26753 * C725 - C198 * C581) * C83 +
                     (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
                     (C742 - C743) * C74) *
                        C26754 * C26605 * C4726) *
                       C26709 +
                   (((C211 - C210) * C83 + (C213 - C212) * C73 +
                     (C214 - C215) * C85 + (C216 - C217) * C74) *
                        C26754 * C26605 * C26745 +
                    ((C737 - C736) * C83 + (C739 - C738) * C73 +
                     (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                        C26754 * C26605 * C26746 +
                    ((C741 - C740) * C83 + (C743 - C742) * C73 +
                     (C198 * C584 - C26753 * C728) * C85 +
                     (C198 * C596 - C26753 * C734) * C74) *
                        C26754 * C26605 * C4726) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C26745 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C26746 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C26605 * C4726) *
              C26709 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C26745 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C26746 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C141 +
            (C83 * C796 - C73 * C802 + C85 * C798 - C74 * C804) * C26754) *
               C26753 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C26745 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C26746 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C26605 * C4726) *
              C26709 +
          ((C874 * C73 + C2013 * C74) * C26753 * C26605 * C26746 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C26745 -
           ((C141 * C658 - C299 * C584 - C141 * C798 + C26754 * C860) * C74 +
            C875 * C73) *
               C26753 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26605 * C26745 +
           (((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26605 * C26746 +
           (((C26753 * C725 - C198 * C581) * C141 +
             (C26753 * C927 - C198 * C795) * C26754) *
                C73 +
            ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
               C26605 * C4726) *
              C26709 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26605 * C26745 +
           (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
            ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
               C26605 * C26746 +
           (((C741 - C740) * C141 + (C935 - C934) * C26754) * C73 +
            ((C198 * C584 - C26753 * C728) * C141 +
             (C198 * C798 - C26753 * C930) * C26754) *
                C74) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C26745 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C26746 +
           ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C26605 * C4726) *
              C26709 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C26745 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C26746 +
           ((C83 * C582 - C73 * C591 + C85 * C584 - C74 * C595) * C198 +
            (C83 * C988 - C73 * C994 + C85 * C990 - C74 * C996) * C26753) *
               C26754 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26605 * C26745 +
           (((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26605 * C26746 +
           (((C26754 * C655 - C141 * C581) * C198 +
             (C26754 * C1049 - C141 * C987) * C26753) *
                C73 +
            ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
               C26605 * C4726) *
              C26709 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26605 * C26745 +
           (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
            ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
               C26605 * C26746 +
           (((C671 - C670) * C198 + (C1057 - C1056) * C26753) * C73 +
            ((C141 * C584 - C26754 * C658) * C198 +
             (C141 * C990 - C26754 * C1052) * C26753) *
                C74) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[5] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C26745 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C26746 +
           ((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C26605 * C4726) *
              C26709 +
          ((C1128 * C73 + C2230 * C74) * C26605 * C26746 -
           (C523 * C74 + C522 * C73) * C26605 * C26745 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) *
                C26754 * C74 +
            C1129 * C73) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26718 -
                    (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                     C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                        C26753 * C26754 * C26669) *
                       C26745 +
                   ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                     C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                        C26753 * C26754 * C26669 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26718) *
                       C26746 +
                   ((C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                     C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                        C26753 * C26754 * C26718 -
                    (C85 * C5775 - C86 * C5773 - C85 * C5776 + C74 * C5779 +
                     C83 * C5777 - C84 * C5774 - C83 * C5778 + C73 * C5780) *
                        C26753 * C26754 * C26669) *
                       C4726) *
                  C26570) /
                 (p * q * std::sqrt(p + q));
    d2eexy[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26718 +
                    ((C141 * C1183 - C26754 * C1256) * C83 +
                     (C141 * C1191 - C26754 * C1262) * C73 +
                     (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                        C26753 * C26669) *
                       C26745 +
                   (((C141 * C580 - C26754 * C653) * C83 +
                     (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                     (C668 - C669) * C74) *
                        C26753 * C26718 +
                    ((C26754 * C2869 - C141 * C2791) * C83 +
                     (C26754 * C2872 - C141 * C2795) * C73 +
                     (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                        C26753 * C26669) *
                       C26746 +
                   (((C26754 * C655 - C141 * C581) * C83 +
                     (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
                     (C672 - C673) * C74) *
                        C26753 * C26718 +
                    ((C141 * C5774 - C26754 * C5831) * C83 +
                     (C141 * C5778 - C26754 * C5833) * C73 +
                     (C141 * C5773 - C26754 * C5832) * C85 +
                     (C141 * C5776 - C26754 * C5834) * C74) *
                        C26753 * C26669) *
                       C4726) *
                  C26570) /
                 (p * q * std::sqrt(p + q));
    d2eexz[6] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26718 +
                    ((C198 * C1183 - C26753 * C1326) * C83 +
                     (C198 * C1191 - C26753 * C1332) * C73 +
                     (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                        C26754 * C26669) *
                       C26745 +
                   (((C198 * C580 - C26753 * C723) * C83 +
                     (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                     (C738 - C739) * C74) *
                        C26754 * C26718 +
                    ((C26753 * C2945 - C198 * C2791) * C83 +
                     (C26753 * C2948 - C198 * C2795) * C73 +
                     (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                        C26754 * C26669) *
                       C26746 +
                   (((C26753 * C725 - C198 * C581) * C83 +
                     (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
                     (C742 - C743) * C74) *
                        C26754 * C26718 +
                    ((C198 * C5774 - C26753 * C5885) * C83 +
                     (C198 * C5778 - C26753 * C5887) * C73 +
                     (C198 * C5773 - C26753 * C5886) * C85 +
                     (C198 * C5776 - C26753 * C5888) * C74) *
                        C26754 * C26669) *
                       C4726) *
                  C26570) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26718 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C26745 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26718 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
            (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
               C26753 * C26669) *
              C26746 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C26718 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C141 +
            (C83 * C5939 - C73 * C5941 + C85 * C5940 - C74 * C5942) * C26754) *
               C26753 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26718 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C26745 +
          (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C73 +
            C3103 * C74) *
               C26753 * C26669 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26718) *
              C26746 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C26718 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C74 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C73) *
               C26753 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26718 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C26745 +
          ((((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26718 +
           (((C26753 * C2945 - C198 * C2791) * C141 +
             (C26753 * C3169 - C198 * C3021) * C26754) *
                C73 +
            ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
               C26669) *
              C26746 +
          ((((C26753 * C725 - C198 * C581) * C141 +
             (C26753 * C927 - C198 * C795) * C26754) *
                C73 +
            ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
               C26718 +
           (((C198 * C5774 - C26753 * C5885) * C141 +
             (C198 * C5939 - C26753 * C6045) * C26754) *
                C73 +
            ((C198 * C5773 - C26753 * C5886) * C141 +
             (C198 * C5940 - C26753 * C6046) * C26754) *
                C74) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezx[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26718 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C26745 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26718 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
            (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
               C26754 * C26669) *
              C26746 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C26718 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C198 +
            (C83 * C6097 - C73 * C6099 + C85 * C6098 - C74 * C6100) * C26753) *
               C26754 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezy[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26718 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C26745 +
          ((((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26718 +
           (((C26754 * C2869 - C141 * C2791) * C198 +
             (C26754 * C3312 - C141 * C3240) * C26753) *
                C73 +
            ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
               C26669) *
              C26746 +
          ((((C26754 * C655 - C141 * C581) * C198 +
             (C26754 * C1049 - C141 * C987) * C26753) *
                C73 +
            ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
               C26718 +
           (((C141 * C5774 - C26754 * C5831) * C198 +
             (C141 * C6097 - C26754 * C6151) * C26753) *
                C73 +
            ((C141 * C5773 - C26754 * C5832) * C198 +
             (C141 * C6098 - C26754 * C6152) * C26753) *
                C74) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezz[6] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26718 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C26745 +
          (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C26754 * C73 +
            C3394 * C74) *
               C26669 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26718) *
              C26746 +
          (((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C26718 -
           ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                C26754 * C74 +
            (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                C26754 * C73) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[7] += (-std::pow(Pi, 2.5) *
                  ((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 + C85 * C94 -
                    C86 * C88 - C85 * C95 + C74 * C103) *
                       C26753 * C26754 * C26605 * C3883 -
                   (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                    C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                       C26753 * C26754 * C26605 * C3884 +
                   (C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                    C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                       C26753 * C26754 * C26605 * C3885 -
                   (C85 * C3890 - C86 * C3888 - C85 * C3891 + C74 * C3894 +
                    C83 * C3892 - C84 * C3889 - C83 * C3893 + C73 * C3895) *
                       C26753 * C26754 * C26605 * C3886) *
                  C26570) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C3444 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C26641) *
                       C3446 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C26641 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C3444) *
                       C3447 +
                   ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                     C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                        C26753 * C26754 * C26605 * C3444 -
                    (C85 * C1788 - C86 * C1787 - C85 * C1789 + C74 * C1790 +
                     C83 * C593 - C84 * C583 - C83 * C594 + C73 * C601) *
                        C26753 * C26754 * C26605 * C26641) *
                       C3448)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C1179 -
                    (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                     C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                        C26753 * C26754 * C1180 +
                    (C83 * C1192 - C84 * C1184 - C83 * C1193 + C73 * C1202 +
                     C85 * C1194 - C86 * C1185 - C85 * C1195 + C74 * C1203) *
                        C26753 * C26754 * C1181) *
                       C3444 +
                   ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                     C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                        C26753 * C26754 * C1180 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C1179 -
                    (C85 * C4244 - C86 * C4242 - C85 * C4245 + C74 * C4248 +
                     C83 * C4246 - C84 * C4243 - C83 * C4247 + C73 * C4249) *
                        C26753 * C26754 * C1181) *
                       C26641) *
                  C26570) /
                     (p * q * std::sqrt(p + q));
    d2eexy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C26754 * C142 - C141 * C87) * C83 +
           (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
           (C155 - C156) * C74) *
              C26753 * C26605 * C3883 +
          ((C141 * C580 - C26754 * C653) * C83 +
           (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
           (C668 - C669) * C74) *
              C26753 * C26605 * C3884 +
          ((C26754 * C655 - C141 * C581) * C83 +
           (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
           (C672 - C673) * C74) *
              C26753 * C26605 * C3885 +
          ((C141 * C3889 - C26754 * C3930) * C83 +
           (C141 * C3893 - C26754 * C3932) * C73 +
           (C141 * C3888 - C26754 * C3931) * C85 +
           (C141 * C3891 - C26754 * C3933) * C74) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26754 * C142 - C141 * C87) * C83 +
                                (C26754 * C147 - C141 * C93) * C73 +
                                (C153 - C154) * C85 + (C155 - C156) * C74) *
                                   C26753 * C26605 * C3444 +
                               ((C141 * C580 - C26754 * C653) * C83 +
                                (C141 * C588 - C26754 * C659) * C73 +
                                (C666 - C667) * C85 + (C668 - C669) * C74) *
                                   C26753 * C26605 * C26641) *
                                  C3446 +
                              (((C154 - C153) * C83 + (C156 - C155) * C73 +
                                (C157 - C158) * C85 + (C159 - C160) * C74) *
                                   C26753 * C26605 * C3444 +
                               ((C667 - C666) * C83 + (C669 - C668) * C73 +
                                (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                                   C26753 * C26605 * C26641) *
                                  C3447 +
                              (((C158 - C157) * C83 + (C160 - C159) * C73 +
                                (C161 - C162) * C85 + (C163 - C164) * C74) *
                                   C26753 * C26605 * C3444 +
                               ((C1845 - C1844) * C83 + (C1847 - C1846) * C73 +
                                (C141 * C1787 - C26754 * C1841) * C85 +
                                (C141 * C1789 - C26754 * C1842) * C74) *
                                   C26753 * C26605 * C26641) *
                                  C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C83 +
            (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
            (C155 - C156) * C74) *
               C26753 * C1179 +
           ((C141 * C1183 - C26754 * C1256) * C83 +
            (C141 * C1191 - C26754 * C1262) * C73 + (C1269 - C1270) * C85 +
            (C1271 - C1272) * C74) *
               C26753 * C1180 +
           ((C26754 * C1258 - C141 * C1184) * C83 +
            (C26754 * C1264 - C141 * C1193) * C73 + (C1273 - C1274) * C85 +
            (C1275 - C1276) * C74) *
               C26753 * C1181) *
              C3444 +
          (((C141 * C580 - C26754 * C653) * C83 +
            (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
            (C668 - C669) * C74) *
               C26753 * C1179 +
           ((C26754 * C2869 - C141 * C2791) * C83 +
            (C26754 * C2872 - C141 * C2795) * C73 + (C2876 - C2877) * C85 +
            (C2878 - C2879) * C74) *
               C26753 * C1180 +
           ((C141 * C4243 - C26754 * C4300) * C83 +
            (C141 * C4247 - C26754 * C4302) * C73 +
            (C141 * C4242 - C26754 * C4301) * C85 +
            (C141 * C4245 - C26754 * C4303) * C74) *
               C26753 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[7] +=
        (-std::pow(Pi, 2.5) *
         (((C26753 * C199 - C198 * C87) * C83 +
           (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
           (C212 - C213) * C74) *
              C26754 * C26605 * C3883 +
          ((C198 * C580 - C26753 * C723) * C83 +
           (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
           (C738 - C739) * C74) *
              C26754 * C26605 * C3884 +
          ((C26753 * C725 - C198 * C581) * C83 +
           (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
           (C742 - C743) * C74) *
              C26754 * C26605 * C3885 +
          ((C198 * C3889 - C26753 * C3968) * C83 +
           (C198 * C3893 - C26753 * C3970) * C73 +
           (C198 * C3888 - C26753 * C3969) * C85 +
           (C198 * C3891 - C26753 * C3971) * C74) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26753 * C199 - C198 * C87) * C83 +
                                (C26753 * C204 - C198 * C93) * C73 +
                                (C210 - C211) * C85 + (C212 - C213) * C74) *
                                   C26754 * C26605 * C3444 +
                               ((C198 * C580 - C26753 * C723) * C83 +
                                (C198 * C588 - C26753 * C729) * C73 +
                                (C736 - C737) * C85 + (C738 - C739) * C74) *
                                   C26754 * C26605 * C26641) *
                                  C3446 +
                              (((C211 - C210) * C83 + (C213 - C212) * C73 +
                                (C214 - C215) * C85 + (C216 - C217) * C74) *
                                   C26754 * C26605 * C3444 +
                               ((C737 - C736) * C83 + (C739 - C738) * C73 +
                                (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                                   C26754 * C26605 * C26641) *
                                  C3447 +
                              (((C215 - C214) * C83 + (C217 - C216) * C73 +
                                (C218 - C219) * C85 + (C220 - C221) * C74) *
                                   C26754 * C26605 * C3444 +
                               ((C1901 - C1900) * C83 + (C1903 - C1902) * C73 +
                                (C198 * C1787 - C26753 * C1897) * C85 +
                                (C198 * C1789 - C26753 * C1898) * C74) *
                                   C26754 * C26605 * C26641) *
                                  C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C83 +
            (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
            (C212 - C213) * C74) *
               C26754 * C1179 +
           ((C198 * C1183 - C26753 * C1326) * C83 +
            (C198 * C1191 - C26753 * C1332) * C73 + (C1339 - C1340) * C85 +
            (C1341 - C1342) * C74) *
               C26754 * C1180 +
           ((C26753 * C1328 - C198 * C1184) * C83 +
            (C26753 * C1334 - C198 * C1193) * C73 + (C1343 - C1344) * C85 +
            (C1345 - C1346) * C74) *
               C26754 * C1181) *
              C3444 +
          (((C198 * C580 - C26753 * C723) * C83 +
            (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
            (C738 - C739) * C74) *
               C26754 * C1179 +
           ((C26753 * C2945 - C198 * C2791) * C83 +
            (C26753 * C2948 - C198 * C2795) * C73 + (C2952 - C2953) * C85 +
            (C2954 - C2955) * C74) *
               C26754 * C1180 +
           ((C198 * C4243 - C26753 * C4354) * C83 +
            (C198 * C4247 - C26753 * C4356) * C73 +
            (C198 * C4242 - C26753 * C4355) * C85 +
            (C198 * C4245 - C26753 * C4357) * C74) *
               C26754 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[7] +=
        (-std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
           (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
              C26753 * C26605 * C3883 +
          ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
           (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
              C26753 * C26605 * C3884 +
          ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
           (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
              C26753 * C26605 * C3885 +
          ((C83 * C3889 - C73 * C3892 + C85 * C3888 - C74 * C3890) * C141 +
           (C83 * C4006 - C73 * C4008 + C85 * C4007 - C74 * C4009) * C26754) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C3444 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C26641) *
              C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C3444 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C26641) *
              C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C26605 * C3444 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C141 +
            (C83 * C797 - C73 * C803 + C85 * C1953 - C74 * C1954) * C26754) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C1179 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C1180 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C141 +
            (C73 * C1404 - C83 * C1398 + C74 * C1405 - C85 * C1399) * C26754) *
               C26753 * C1181) *
              C3444 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C1179 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
            (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
               C26753 * C1180 +
           ((C83 * C4243 - C73 * C4246 + C85 * C4242 - C74 * C4244) * C141 +
            (C83 * C4408 - C73 * C4410 + C85 * C4409 - C74 * C4411) * C26754) *
               C26753 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[7] +=
        (-std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
           C324 * C74) *
              C26753 * C26605 * C3883 -
          (C874 * C74 +
           (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
              C26753 * C26605 * C3884 +
          ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
           C875 * C74) *
              C26753 * C26605 * C3885 -
          ((C141 * C3931 - C299 * C3888 - C141 * C4007 + C26754 * C4044) * C74 +
           (C141 * C3930 - C299 * C3889 - C141 * C4006 + C26754 * C4045) *
               C73) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C3444 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C26641) *
              C3446 +
          ((C874 * C73 + C2013 * C74) * C26753 * C26605 * C26641 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C3444) *
              C3447 +
          ((C325 * C73 + C326 * C74) * C26753 * C26605 * C3444 -
           ((C141 * C1841 - C299 * C1787 - C141 * C1953 + C26754 * C2005) *
                C74 +
            C2013 * C73) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C1179 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C1180 +
           ((C141 * C1258 - C299 * C1184 - C141 * C1398 + C26754 * C1460) *
                C73 +
            C1478 * C74) *
               C26753 * C1181) *
              C3444 +
          (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C73 +
            C3103 * C74) *
               C26753 * C1180 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C1179 -
           ((C141 * C4301 - C299 * C4242 - C141 * C4409 + C26754 * C4462) *
                C74 +
            (C141 * C4300 - C299 * C4243 - C141 * C4408 + C26754 * C4463) *
                C73) *
               C26753 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[7] +=
        (-std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C141 +
            (C26753 * C360 - C198 * C255) * C26754) *
               C73 +
           ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
              C26605 * C3883 +
          (((C198 * C580 - C26753 * C723) * C141 +
            (C198 * C793 - C26753 * C925) * C26754) *
               C73 +
           ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
              C26605 * C3884 +
          (((C26753 * C725 - C198 * C581) * C141 +
            (C26753 * C927 - C198 * C795) * C26754) *
               C73 +
           ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
              C26605 * C3885 +
          (((C198 * C3889 - C26753 * C3968) * C141 +
            (C198 * C4006 - C26753 * C4080) * C26754) *
               C73 +
           ((C198 * C3888 - C26753 * C3969) * C141 +
            (C198 * C4007 - C26753 * C4081) * C26754) *
               C74) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26605 * C3444 +
           (((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26605 * C26641) *
              C3446 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26605 * C3444 +
           (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
            ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
               C26605 * C26641) *
              C3447 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C26605 * C3444 +
           (((C1901 - C1900) * C141 + (C2066 - C2065) * C26754) * C73 +
            ((C198 * C1787 - C26753 * C1897) * C141 +
             (C198 * C1953 - C26753 * C2063) * C26754) *
                C74) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C1179 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C1180 +
           (((C26753 * C1328 - C198 * C1184) * C141 +
             (C26753 * C1530 - C198 * C1398) * C26754) *
                C73 +
            ((C1343 - C1344) * C141 + (C1537 - C1538) * C26754) * C74) *
               C1181) *
              C3444 +
          ((((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C1179 +
           (((C26753 * C2945 - C198 * C2791) * C141 +
             (C26753 * C3169 - C198 * C3021) * C26754) *
                C73 +
            ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
               C1180 +
           (((C198 * C4243 - C26753 * C4354) * C141 +
             (C198 * C4408 - C26753 * C4514) * C26754) *
                C73 +
            ((C198 * C4242 - C26753 * C4355) * C141 +
             (C198 * C4409 - C26753 * C4515) * C26754) *
                C74) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[7] +=
        (-std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
           (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
              C26754 * C26605 * C3883 +
          ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
           (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
              C26754 * C26605 * C3884 +
          ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
           (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
              C26754 * C26605 * C3885 +
          ((C83 * C3889 - C73 * C3892 + C85 * C3888 - C74 * C3890) * C198 +
           (C83 * C4116 - C73 * C4118 + C85 * C4117 - C74 * C4119) * C26753) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C3444 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C26641) *
              C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C3444 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C26641) *
              C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C26605 * C3444 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C198 +
            (C83 * C989 - C73 * C995 + C85 * C2116 - C74 * C2117) * C26753) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C1179 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C1180 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C198 +
            (C73 * C1596 - C83 * C1590 + C74 * C1597 - C85 * C1591) * C26753) *
               C26754 * C1181) *
              C3444 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C1179 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
            (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
               C26754 * C1180 +
           ((C83 * C4243 - C73 * C4246 + C85 * C4242 - C74 * C4244) * C198 +
            (C83 * C4566 - C73 * C4568 + C85 * C4567 - C74 * C4569) * C26753) *
               C26754 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[7] +=
        (-std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C198 +
            (C26754 * C449 - C141 * C405) * C26753) *
               C73 +
           ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
              C26605 * C3883 +
          (((C141 * C580 - C26754 * C653) * C198 +
            (C141 * C985 - C26754 * C1047) * C26753) *
               C73 +
           ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
              C26605 * C3884 +
          (((C26754 * C655 - C141 * C581) * C198 +
            (C26754 * C1049 - C141 * C987) * C26753) *
               C73 +
           ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
              C26605 * C3885 +
          (((C141 * C3889 - C26754 * C3930) * C198 +
            (C141 * C4116 - C26754 * C4154) * C26753) *
               C73 +
           ((C141 * C3888 - C26754 * C3931) * C198 +
            (C141 * C4117 - C26754 * C4155) * C26753) *
               C74) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26605 * C3444 +
           (((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26605 * C26641) *
              C3446 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26605 * C3444 +
           (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
            ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
               C26605 * C26641) *
              C3447 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C26605 * C3444 +
           (((C1845 - C1844) * C198 + (C2171 - C2170) * C26753) * C73 +
            ((C141 * C1787 - C26754 * C1841) * C198 +
             (C141 * C2116 - C26754 * C2168) * C26753) *
                C74) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C1179 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C1180 +
           (((C26754 * C1258 - C141 * C1184) * C198 +
             (C26754 * C1652 - C141 * C1590) * C26753) *
                C73 +
            ((C1273 - C1274) * C198 + (C1659 - C1660) * C26753) * C74) *
               C1181) *
              C3444 +
          ((((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C1179 +
           (((C26754 * C2869 - C141 * C2791) * C198 +
             (C26754 * C3312 - C141 * C3240) * C26753) *
                C73 +
            ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
               C1180 +
           (((C141 * C4243 - C26754 * C4300) * C198 +
             (C141 * C4566 - C26754 * C4620) * C26753) *
                C73 +
            ((C141 * C4242 - C26754 * C4301) * C198 +
             (C141 * C4567 - C26754 * C4621) * C26753) *
                C74) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[7] +=
        (-std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
               C73 +
           C522 * C74) *
              C26605 * C3883 -
          (C1128 * C74 +
           (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) * C26754 *
               C73) *
              C26605 * C3884 +
          ((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) * C26754 *
               C73 +
           C1129 * C74) *
              C26605 * C3885 -
          ((C198 * C3969 - C494 * C3888 - C198 * C4117 + C26753 * C4190) *
               C26754 * C74 +
           (C198 * C3968 - C494 * C3889 - C198 * C4116 + C26753 * C4191) *
               C26754 * C73) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C3444 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C26641) *
              C3446 +
          ((C1128 * C73 + C2230 * C74) * C26605 * C26641 -
           (C523 * C74 + C522 * C73) * C26605 * C3444) *
              C3447 +
          ((C523 * C73 + C524 * C74) * C26605 * C3444 -
           ((C198 * C1897 - C494 * C1787 - C198 * C2116 + C26753 * C2221) *
                C26754 * C74 +
            C2230 * C73) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C1179 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C1180 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C26754 * C73 +
            C1732 * C74) *
               C1181) *
              C3444 +
          (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C26754 * C73 +
            C3394 * C74) *
               C1180 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C1179 -
           ((C198 * C4355 - C494 * C4242 - C198 * C4567 + C26753 * C4672) *
                C26754 * C74 +
            (C198 * C4354 - C494 * C4243 - C198 * C4566 + C26753 * C4673) *
                C26754 * C73) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C26718 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C3444 +
                    ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                      C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                         C26753 * C26754 * C26669 -
                     (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                      C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                         C26753 * C26754 * C26718) *
                        C26641) *
                       C26709 +
                   (((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                      C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                         C26753 * C26754 * C26669 -
                     (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                      C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                         C26753 * C26754 * C26718) *
                        C3444 +
                    ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                      C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                         C26753 * C26754 * C26718 -
                     (C85 * C2798 - C86 * C2793 - C85 * C2799 + C74 * C2802 +
                      C83 * C2796 - C84 * C2792 - C83 * C2797 + C73 * C2801) *
                         C26753 * C26754 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexy[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C26718 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26669) *
                        C3444 +
                    (((C141 * C580 - C26754 * C653) * C83 +
                      (C141 * C588 - C26754 * C659) * C73 +
                      (C666 - C667) * C85 + (C668 - C669) * C74) *
                         C26753 * C26718 +
                     ((C26754 * C2869 - C141 * C2791) * C83 +
                      (C26754 * C2872 - C141 * C2795) * C73 +
                      (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                         C26753 * C26669) *
                        C26641) *
                       C26709 +
                   ((((C154 - C153) * C83 + (C156 - C155) * C73 +
                      (C157 - C158) * C85 + (C159 - C160) * C74) *
                         C26753 * C26718 +
                     ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                      (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                         C26753 * C26669) *
                        C3444 +
                    (((C667 - C666) * C83 + (C669 - C668) * C73 +
                      (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                         C26753 * C26718 +
                     ((C2877 - C2876) * C83 + (C2879 - C2878) * C73 +
                      (C141 * C2793 - C26754 * C2871) * C85 +
                      (C141 * C2799 - C26754 * C2874) * C74) *
                         C26753 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eexz[8] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C26718 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26669) *
                        C3444 +
                    (((C198 * C580 - C26753 * C723) * C83 +
                      (C198 * C588 - C26753 * C729) * C73 +
                      (C736 - C737) * C85 + (C738 - C739) * C74) *
                         C26754 * C26718 +
                     ((C26753 * C2945 - C198 * C2791) * C83 +
                      (C26753 * C2948 - C198 * C2795) * C73 +
                      (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                         C26754 * C26669) *
                        C26641) *
                       C26709 +
                   ((((C211 - C210) * C83 + (C213 - C212) * C73 +
                      (C214 - C215) * C85 + (C216 - C217) * C74) *
                         C26754 * C26718 +
                     ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                      (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                         C26754 * C26669) *
                        C3444 +
                    (((C737 - C736) * C83 + (C739 - C738) * C73 +
                      (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                         C26754 * C26718 +
                     ((C2953 - C2952) * C83 + (C2955 - C2954) * C73 +
                      (C198 * C2793 - C26753 * C2947) * C85 +
                      (C198 * C2799 - C26753 * C2950) * C74) *
                         C26754 * C26669) *
                        C26641) *
                       C26576)) /
                 (p * q * std::sqrt(p + q));
    d2eeyx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
             (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
                C26753 * C26718 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
             (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
                C26753 * C26669) *
               C3444 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
             (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
                C26753 * C26718 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
             (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
                C26753 * C26669) *
               C26641) *
              C26709 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
             (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
                C26753 * C26718 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
             (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
                C26753 * C26669) *
               C3444 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
             (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
                C26753 * C26718 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C141 +
             (C83 * C3022 - C73 * C3025 + C85 * C3023 - C74 * C3026) * C26754) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
             C324 * C74) *
                C26753 * C26718 -
            (C1477 * C74 +
             (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                 C73) *
                C26753 * C26669) *
               C3444 +
           (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                 C73 +
             C3103 * C74) *
                C26753 * C26669 -
            (C874 * C74 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
                C26753 * C26718) *
               C26641) *
              C26709 +
          (((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
            (C325 * C74 + C324 * C73) * C26753 * C26718) *
               C3444 +
           ((C874 * C73 + C2013 * C74) * C26753 * C26718 -
            ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                 C74 +
             C3103 * C73) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C141 +
              (C26753 * C360 - C198 * C255) * C26754) *
                 C73 +
             ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
                C26718 +
            (((C198 * C1183 - C26753 * C1326) * C141 +
              (C198 * C1396 - C26753 * C1528) * C26754) *
                 C73 +
             ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
                C26669) *
               C3444 +
           ((((C198 * C580 - C26753 * C723) * C141 +
              (C198 * C793 - C26753 * C925) * C26754) *
                 C73 +
             ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
                C26718 +
            (((C26753 * C2945 - C198 * C2791) * C141 +
              (C26753 * C3169 - C198 * C3021) * C26754) *
                 C73 +
             ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
                C26669) *
               C26641) *
              C26709 +
          (((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
             ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
                C26718 +
            (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
             ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
                C26669) *
               C3444 +
           ((((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
             ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
                C26718 +
            (((C2953 - C2952) * C141 + (C3174 - C3173) * C26754) * C73 +
             ((C198 * C2793 - C26753 * C2947) * C141 +
              (C198 * C3023 - C26753 * C3171) * C26754) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
             (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
                C26754 * C26718 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
             (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
                C26754 * C26669) *
               C3444 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
             (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
                C26754 * C26718 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
             (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
             (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
                C26754 * C26718 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
             (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
                C26754 * C26669) *
               C3444 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
             (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
                C26754 * C26718 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C198 +
             (C83 * C3241 - C73 * C3244 + C85 * C3242 - C74 * C3245) * C26753) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C198 +
              (C26754 * C449 - C141 * C405) * C26753) *
                 C73 +
             ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
                C26718 +
            (((C141 * C1183 - C26754 * C1256) * C198 +
              (C141 * C1588 - C26754 * C1650) * C26753) *
                 C73 +
             ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
                C26669) *
               C3444 +
           ((((C141 * C580 - C26754 * C653) * C198 +
              (C141 * C985 - C26754 * C1047) * C26753) *
                 C73 +
             ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
                C26718 +
            (((C26754 * C2869 - C141 * C2791) * C198 +
              (C26754 * C3312 - C141 * C3240) * C26753) *
                 C73 +
             ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
                C26669) *
               C26641) *
              C26709 +
          (((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
             ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
                C26718 +
            (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
             ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
                C26669) *
               C3444 +
           ((((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
             ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
                C26718 +
            (((C2877 - C2876) * C198 + (C3317 - C3316) * C26753) * C73 +
             ((C141 * C2793 - C26754 * C2871) * C198 +
              (C141 * C3242 - C26754 * C3314) * C26753) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[8] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                 C73 +
             C522 * C74) *
                C26718 -
            (C1731 * C74 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C26754 * C73) *
                C26669) *
               C3444 +
           (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                 C26754 * C73 +
             C3394 * C74) *
                C26669 -
            (C1128 * C74 +
             (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                 C26754 * C73) *
                C26718) *
               C26641) *
              C26709 +
          (((C1731 * C73 + C2725 * C74) * C26669 -
            (C523 * C74 + C522 * C73) * C26718) *
               C3444 +
           ((C1128 * C73 + C2230 * C74) * C26718 -
            ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                 C26754 * C74 +
             C3394 * C73) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C26605 * C3444 -
                    (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                     C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                        C26753 * C26754 * C26605 * C26641) *
                       C3446 +
                   ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                     C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                        C26753 * C26754 * C26605 * C26641 -
                    (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                     C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                        C26753 * C26754 * C26605 * C3444) *
                       C3447 +
                   ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                     C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                        C26753 * C26754 * C26605 * C3444 -
                    (C85 * C1788 - C86 * C1787 - C85 * C1789 + C74 * C1790 +
                     C83 * C593 - C84 * C583 - C83 * C594 + C73 * C601) *
                        C26753 * C26754 * C26605 * C26641) *
                       C3448)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 + C85 * C94 -
                    C86 * C88 - C85 * C95 + C74 * C103) *
                       C26753 * C26754 * C26605 * C3883 -
                   (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                    C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                       C26753 * C26754 * C26605 * C3884 +
                   (C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                    C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                       C26753 * C26754 * C26605 * C3885 -
                   (C85 * C3890 - C86 * C3888 - C85 * C3891 + C74 * C3894 +
                    C83 * C3892 - C84 * C3889 - C83 * C3893 + C73 * C3895) *
                       C26753 * C26754 * C26605 * C3886) *
                  C26570) /
                     (p * q * std::sqrt(p + q));
    d2eexy[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26754 * C142 - C141 * C87) * C83 +
                     (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                     (C155 - C156) * C74) *
                        C26753 * C26605 * C3444 +
                    ((C141 * C580 - C26754 * C653) * C83 +
                     (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                     (C668 - C669) * C74) *
                        C26753 * C26605 * C26641) *
                       C3446 +
                   (((C154 - C153) * C83 + (C156 - C155) * C73 +
                     (C157 - C158) * C85 + (C159 - C160) * C74) *
                        C26753 * C26605 * C3444 +
                    ((C667 - C666) * C83 + (C669 - C668) * C73 +
                     (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                        C26753 * C26605 * C26641) *
                       C3447 +
                   (((C158 - C157) * C83 + (C160 - C159) * C73 +
                     (C161 - C162) * C85 + (C163 - C164) * C74) *
                        C26753 * C26605 * C3444 +
                    ((C1845 - C1844) * C83 + (C1847 - C1846) * C73 +
                     (C141 * C1787 - C26754 * C1841) * C85 +
                     (C141 * C1789 - C26754 * C1842) * C74) *
                        C26753 * C26605 * C26641) *
                       C3448)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C26754 * C142 - C141 * C87) * C83 +
                    (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                    (C155 - C156) * C74) *
                       C26753 * C26605 * C3883 +
                   ((C141 * C580 - C26754 * C653) * C83 +
                    (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
                    (C668 - C669) * C74) *
                       C26753 * C26605 * C3884 +
                   ((C26754 * C655 - C141 * C581) * C83 +
                    (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
                    (C672 - C673) * C74) *
                       C26753 * C26605 * C3885 +
                   ((C141 * C3889 - C26754 * C3930) * C83 +
                    (C141 * C3893 - C26754 * C3932) * C73 +
                    (C141 * C3888 - C26754 * C3931) * C85 +
                    (C141 * C3891 - C26754 * C3933) * C74) *
                       C26753 * C26605 * C3886) *
                  C26570) /
                     (p * q * std::sqrt(p + q));
    d2eexz[9] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C26753 * C199 - C198 * C87) * C83 +
                     (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                     (C212 - C213) * C74) *
                        C26754 * C26605 * C3444 +
                    ((C198 * C580 - C26753 * C723) * C83 +
                     (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                     (C738 - C739) * C74) *
                        C26754 * C26605 * C26641) *
                       C3446 +
                   (((C211 - C210) * C83 + (C213 - C212) * C73 +
                     (C214 - C215) * C85 + (C216 - C217) * C74) *
                        C26754 * C26605 * C3444 +
                    ((C737 - C736) * C83 + (C739 - C738) * C73 +
                     (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                        C26754 * C26605 * C26641) *
                       C3447 +
                   (((C215 - C214) * C83 + (C217 - C216) * C73 +
                     (C218 - C219) * C85 + (C220 - C221) * C74) *
                        C26754 * C26605 * C3444 +
                    ((C1901 - C1900) * C83 + (C1903 - C1902) * C73 +
                     (C198 * C1787 - C26753 * C1897) * C85 +
                     (C198 * C1789 - C26753 * C1898) * C74) *
                        C26754 * C26605 * C26641) *
                       C3448)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C26753 * C199 - C198 * C87) * C83 +
                    (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                    (C212 - C213) * C74) *
                       C26754 * C26605 * C3883 +
                   ((C198 * C580 - C26753 * C723) * C83 +
                    (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
                    (C738 - C739) * C74) *
                       C26754 * C26605 * C3884 +
                   ((C26753 * C725 - C198 * C581) * C83 +
                    (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
                    (C742 - C743) * C74) *
                       C26754 * C26605 * C3885 +
                   ((C198 * C3889 - C26753 * C3968) * C83 +
                    (C198 * C3893 - C26753 * C3970) * C73 +
                    (C198 * C3888 - C26753 * C3969) * C85 +
                    (C198 * C3891 - C26753 * C3971) * C74) *
                       C26754 * C26605 * C3886) *
                  C26570) /
                     (p * q * std::sqrt(p + q));
    d2eeyx[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26605 * C3444 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26605 * C26641) *
              C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26605 * C3444 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
            (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
               C26753 * C26605 * C26641) *
              C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C26605 * C3444 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C141 +
            (C83 * C797 - C73 * C803 + C85 * C1953 - C74 * C1954) * C26754) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
           (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
              C26753 * C26605 * C3883 +
          ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
           (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
              C26753 * C26605 * C3884 +
          ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
           (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
              C26753 * C26605 * C3885 +
          ((C83 * C3889 - C73 * C3892 + C85 * C3888 - C74 * C3890) * C141 +
           (C83 * C4006 - C73 * C4008 + C85 * C4007 - C74 * C4009) * C26754) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26605 * C3444 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26605 * C26641) *
              C3446 +
          ((C874 * C73 + C2013 * C74) * C26753 * C26605 * C26641 -
           (C325 * C74 + C324 * C73) * C26753 * C26605 * C3444) *
              C3447 +
          ((C325 * C73 + C326 * C74) * C26753 * C26605 * C3444 -
           ((C141 * C1841 - C299 * C1787 - C141 * C1953 + C26754 * C2005) *
                C74 +
            C2013 * C73) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
           C324 * C74) *
              C26753 * C26605 * C3883 -
          (C874 * C74 +
           (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
              C26753 * C26605 * C3884 +
          ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
           C875 * C74) *
              C26753 * C26605 * C3885 -
          ((C141 * C3931 - C299 * C3888 - C141 * C4007 + C26754 * C4044) * C74 +
           (C141 * C3930 - C299 * C3889 - C141 * C4006 + C26754 * C4045) *
               C73) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26605 * C3444 +
           (((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26605 * C26641) *
              C3446 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26605 * C3444 +
           (((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
            ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
               C26605 * C26641) *
              C3447 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C26605 * C3444 +
           (((C1901 - C1900) * C141 + (C2066 - C2065) * C26754) * C73 +
            ((C198 * C1787 - C26753 * C1897) * C141 +
             (C198 * C1953 - C26753 * C2063) * C26754) *
                C74) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C141 +
            (C26753 * C360 - C198 * C255) * C26754) *
               C73 +
           ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
              C26605 * C3883 +
          (((C198 * C580 - C26753 * C723) * C141 +
            (C198 * C793 - C26753 * C925) * C26754) *
               C73 +
           ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
              C26605 * C3884 +
          (((C26753 * C725 - C198 * C581) * C141 +
            (C26753 * C927 - C198 * C795) * C26754) *
               C73 +
           ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
              C26605 * C3885 +
          (((C198 * C3889 - C26753 * C3968) * C141 +
            (C198 * C4006 - C26753 * C4080) * C26754) *
               C73 +
           ((C198 * C3888 - C26753 * C3969) * C141 +
            (C198 * C4007 - C26753 * C4081) * C26754) *
               C74) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26605 * C3444 +
           ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26605 * C26641) *
              C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26605 * C3444 +
           ((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
            (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
               C26754 * C26605 * C26641) *
              C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C26605 * C3444 +
           ((C83 * C583 - C73 * C593 + C85 * C1787 - C74 * C1788) * C198 +
            (C83 * C989 - C73 * C995 + C85 * C2116 - C74 * C2117) * C26753) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
           (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
              C26754 * C26605 * C3883 +
          ((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
           (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
              C26754 * C26605 * C3884 +
          ((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
           (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
              C26754 * C26605 * C3885 +
          ((C83 * C3889 - C73 * C3892 + C85 * C3888 - C74 * C3890) * C198 +
           (C83 * C4116 - C73 * C4118 + C85 * C4117 - C74 * C4119) * C26753) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26605 * C3444 +
           (((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26605 * C26641) *
              C3446 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26605 * C3444 +
           (((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
            ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
               C26605 * C26641) *
              C3447 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C26605 * C3444 +
           (((C1845 - C1844) * C198 + (C2171 - C2170) * C26753) * C73 +
            ((C141 * C1787 - C26754 * C1841) * C198 +
             (C141 * C2116 - C26754 * C2168) * C26753) *
                C74) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C198 +
            (C26754 * C449 - C141 * C405) * C26753) *
               C73 +
           ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
              C26605 * C3883 +
          (((C141 * C580 - C26754 * C653) * C198 +
            (C141 * C985 - C26754 * C1047) * C26753) *
               C73 +
           ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
              C26605 * C3884 +
          (((C26754 * C655 - C141 * C581) * C198 +
            (C26754 * C1049 - C141 * C987) * C26753) *
               C73 +
           ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
              C26605 * C3885 +
          (((C141 * C3889 - C26754 * C3930) * C198 +
            (C141 * C4116 - C26754 * C4154) * C26753) *
               C73 +
           ((C141 * C3888 - C26754 * C3931) * C198 +
            (C141 * C4117 - C26754 * C4155) * C26753) *
               C74) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[9] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26605 * C3444 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26605 * C26641) *
              C3446 +
          ((C1128 * C73 + C2230 * C74) * C26605 * C26641 -
           (C523 * C74 + C522 * C73) * C26605 * C3444) *
              C3447 +
          ((C523 * C73 + C524 * C74) * C26605 * C3444 -
           ((C198 * C1897 - C494 * C1787 - C198 * C2116 + C26753 * C2221) *
                C26754 * C74 +
            C2230 * C73) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
               C73 +
           C522 * C74) *
              C26605 * C3883 -
          (C1128 * C74 +
           (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) * C26754 *
               C73) *
              C26605 * C3884 +
          ((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) * C26754 *
               C73 +
           C1129 * C74) *
              C26605 * C3885 -
          ((C198 * C3969 - C494 * C3888 - C198 * C4117 + C26753 * C4190) *
               C26754 * C74 +
           (C198 * C3968 - C494 * C3889 - C198 * C4116 + C26753 * C4191) *
               C26754 * C73) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                       C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                          C26753 * C26754 * C6255 -
                      (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                       C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                          C26753 * C26754 * C26669) *
                         C26717 +
                     ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                       C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                          C26753 * C26754 * C26669 -
                      (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                       C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                          C26753 * C26754 * C6255) *
                         C26641) *
                        C26709 +
                    (((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                       C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                          C26753 * C26754 * C26669 -
                      (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                       C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                          C26753 * C26754 * C6255) *
                         C26717 +
                     ((C83 * C585 - C84 * C579 - C83 * C586 + C73 * C597 +
                       C85 * C593 - C86 * C583 - C85 * C594 + C74 * C601) *
                          C26753 * C26754 * C6255 -
                      (C85 * C2798 - C86 * C2793 - C85 * C2799 + C74 * C2802 +
                       C83 * C2796 - C84 * C2792 - C83 * C2797 + C73 * C2801) *
                          C26753 * C26754 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26754 * C142 - C141 * C87) * C83 +
                       (C26754 * C147 - C141 * C93) * C73 +
                       (C153 - C154) * C85 + (C155 - C156) * C74) *
                          C26753 * C6255 +
                      ((C141 * C1183 - C26754 * C1256) * C83 +
                       (C141 * C1191 - C26754 * C1262) * C73 +
                       (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                          C26753 * C26669) *
                         C26717 +
                     (((C141 * C580 - C26754 * C653) * C83 +
                       (C141 * C588 - C26754 * C659) * C73 +
                       (C666 - C667) * C85 + (C668 - C669) * C74) *
                          C26753 * C6255 +
                      ((C26754 * C2869 - C141 * C2791) * C83 +
                       (C26754 * C2872 - C141 * C2795) * C73 +
                       (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                          C26753 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C154 - C153) * C83 + (C156 - C155) * C73 +
                       (C157 - C158) * C85 + (C159 - C160) * C74) *
                          C26753 * C6255 +
                      ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                       (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                          C26753 * C26669) *
                         C26717 +
                     (((C667 - C666) * C83 + (C669 - C668) * C73 +
                       (C1844 - C1845) * C85 + (C1846 - C1847) * C74) *
                          C26753 * C6255 +
                      ((C2877 - C2876) * C83 + (C2879 - C2878) * C73 +
                       (C141 * C2793 - C26754 * C2871) * C85 +
                       (C141 * C2799 - C26754 * C2874) * C74) *
                          C26753 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[10] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26753 * C199 - C198 * C87) * C83 +
                       (C26753 * C204 - C198 * C93) * C73 +
                       (C210 - C211) * C85 + (C212 - C213) * C74) *
                          C26754 * C6255 +
                      ((C198 * C1183 - C26753 * C1326) * C83 +
                       (C198 * C1191 - C26753 * C1332) * C73 +
                       (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                          C26754 * C26669) *
                         C26717 +
                     (((C198 * C580 - C26753 * C723) * C83 +
                       (C198 * C588 - C26753 * C729) * C73 +
                       (C736 - C737) * C85 + (C738 - C739) * C74) *
                          C26754 * C6255 +
                      ((C26753 * C2945 - C198 * C2791) * C83 +
                       (C26753 * C2948 - C198 * C2795) * C73 +
                       (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                          C26754 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C211 - C210) * C83 + (C213 - C212) * C73 +
                       (C214 - C215) * C85 + (C216 - C217) * C74) *
                          C26754 * C6255 +
                      ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                       (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                          C26754 * C26669) *
                         C26717 +
                     (((C737 - C736) * C83 + (C739 - C738) * C73 +
                       (C1900 - C1901) * C85 + (C1902 - C1903) * C74) *
                          C26754 * C6255 +
                      ((C2953 - C2952) * C83 + (C2955 - C2954) * C73 +
                       (C198 * C2793 - C26753 * C2947) * C85 +
                       (C198 * C2799 - C26753 * C2950) * C74) *
                          C26754 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
             (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
                C26753 * C6255 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
             (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
                C26753 * C26669) *
               C26717 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
             (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
                C26753 * C6255 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
             (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
                C26753 * C26669) *
               C26641) *
              C26709 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
             (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
                C26753 * C6255 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
             (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
                C26753 * C26669) *
               C26717 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C141 +
             (C73 * C800 - C83 * C794 + C74 * C803 - C85 * C797) * C26754) *
                C26753 * C6255 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C141 +
             (C83 * C3022 - C73 * C3025 + C85 * C3023 - C74 * C3026) * C26754) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
             C324 * C74) *
                C26753 * C6255 -
            (C1477 * C74 +
             (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                 C73) *
                C26753 * C26669) *
               C26717 +
           (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                 C73 +
             C3103 * C74) *
                C26753 * C26669 -
            (C874 * C74 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
                C26753 * C6255) *
               C26641) *
              C26709 +
          (((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
            (C325 * C74 + C324 * C73) * C26753 * C6255) *
               C26717 +
           ((C874 * C73 + C2013 * C74) * C26753 * C6255 -
            ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                 C74 +
             C3103 * C73) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C141 +
              (C26753 * C360 - C198 * C255) * C26754) *
                 C73 +
             ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
                C6255 +
            (((C198 * C1183 - C26753 * C1326) * C141 +
              (C198 * C1396 - C26753 * C1528) * C26754) *
                 C73 +
             ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
                C26669) *
               C26717 +
           ((((C198 * C580 - C26753 * C723) * C141 +
              (C198 * C793 - C26753 * C925) * C26754) *
                 C73 +
             ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
                C6255 +
            (((C26753 * C2945 - C198 * C2791) * C141 +
              (C26753 * C3169 - C198 * C3021) * C26754) *
                 C73 +
             ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
                C26669) *
               C26641) *
              C26709 +
          (((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
             ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
                C6255 +
            (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
             ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
                C26669) *
               C26717 +
           ((((C737 - C736) * C141 + (C933 - C932) * C26754) * C73 +
             ((C1900 - C1901) * C141 + (C2065 - C2066) * C26754) * C74) *
                C6255 +
            (((C2953 - C2952) * C141 + (C3174 - C3173) * C26754) * C73 +
             ((C198 * C2793 - C26753 * C2947) * C141 +
              (C198 * C3023 - C26753 * C3171) * C26754) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
             (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
                C26754 * C6255 +
            ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
             (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
                C26754 * C26669) *
               C26717 +
           (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
             (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
                C26754 * C6255 +
            ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
             (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
             (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
                C26754 * C6255 +
            ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
             (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
                C26754 * C26669) *
               C26717 +
           (((C73 * C585 - C83 * C579 + C74 * C593 - C85 * C583) * C198 +
             (C73 * C992 - C83 * C986 + C74 * C995 - C85 * C989) * C26753) *
                C26754 * C6255 +
            ((C83 * C2792 - C73 * C2796 + C85 * C2793 - C74 * C2798) * C198 +
             (C83 * C3241 - C73 * C3244 + C85 * C3242 - C74 * C3245) * C26753) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C198 +
              (C26754 * C449 - C141 * C405) * C26753) *
                 C73 +
             ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
                C6255 +
            (((C141 * C1183 - C26754 * C1256) * C198 +
              (C141 * C1588 - C26754 * C1650) * C26753) *
                 C73 +
             ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
                C26669) *
               C26717 +
           ((((C141 * C580 - C26754 * C653) * C198 +
              (C141 * C985 - C26754 * C1047) * C26753) *
                 C73 +
             ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
                C6255 +
            (((C26754 * C2869 - C141 * C2791) * C198 +
              (C26754 * C3312 - C141 * C3240) * C26753) *
                 C73 +
             ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
                C26669) *
               C26641) *
              C26709 +
          (((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
             ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
                C6255 +
            (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
             ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
                C26669) *
               C26717 +
           ((((C667 - C666) * C198 + (C1055 - C1054) * C26753) * C73 +
             ((C1844 - C1845) * C198 + (C2170 - C2171) * C26753) * C74) *
                C6255 +
            (((C2877 - C2876) * C198 + (C3317 - C3316) * C26753) * C73 +
             ((C141 * C2793 - C26754 * C2871) * C198 +
              (C141 * C3242 - C26754 * C3314) * C26753) *
                 C74) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[10] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                 C73 +
             C522 * C74) *
                C6255 -
            (C1731 * C74 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C26754 * C73) *
                C26669) *
               C26717 +
           (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                 C26754 * C73 +
             C3394 * C74) *
                C26669 -
            (C1128 * C74 +
             (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                 C26754 * C73) *
                C6255) *
               C26641) *
              C26709 +
          (((C1731 * C73 + C2725 * C74) * C26669 -
            (C523 * C74 + C522 * C73) * C6255) *
               C26717 +
           ((C1128 * C73 + C2230 * C74) * C6255 -
            ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                 C26754 * C74 +
             C3394 * C73) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C26747 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26748 +
                     (C83 * C1192 - C84 * C1184 - C83 * C1193 + C73 * C1202 +
                      C85 * C1194 - C86 * C1185 - C85 * C1195 + C74 * C1203) *
                         C26753 * C26754 * C8095) *
                        C26717 +
                    ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                      C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                         C26753 * C26754 * C26748 -
                     (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                      C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                         C26753 * C26754 * C26747 -
                     (C85 * C4244 - C86 * C4242 - C85 * C4245 + C74 * C4248 +
                      C83 * C4246 - C84 * C4243 - C83 * C4247 + C73 * C4249) *
                         C26753 * C26754 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eexy[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C26747 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26748 +
                     ((C26754 * C1258 - C141 * C1184) * C83 +
                      (C26754 * C1264 - C141 * C1193) * C73 +
                      (C1273 - C1274) * C85 + (C1275 - C1276) * C74) *
                         C26753 * C8095) *
                        C26717 +
                    (((C141 * C580 - C26754 * C653) * C83 +
                      (C141 * C588 - C26754 * C659) * C73 +
                      (C666 - C667) * C85 + (C668 - C669) * C74) *
                         C26753 * C26747 +
                     ((C26754 * C2869 - C141 * C2791) * C83 +
                      (C26754 * C2872 - C141 * C2795) * C73 +
                      (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                         C26753 * C26748 +
                     ((C141 * C4243 - C26754 * C4300) * C83 +
                      (C141 * C4247 - C26754 * C4302) * C73 +
                      (C141 * C4242 - C26754 * C4301) * C85 +
                      (C141 * C4245 - C26754 * C4303) * C74) *
                         C26753 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eexz[11] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C26747 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26748 +
                     ((C26753 * C1328 - C198 * C1184) * C83 +
                      (C26753 * C1334 - C198 * C1193) * C73 +
                      (C1343 - C1344) * C85 + (C1345 - C1346) * C74) *
                         C26754 * C8095) *
                        C26717 +
                    (((C198 * C580 - C26753 * C723) * C83 +
                      (C198 * C588 - C26753 * C729) * C73 +
                      (C736 - C737) * C85 + (C738 - C739) * C74) *
                         C26754 * C26747 +
                     ((C26753 * C2945 - C198 * C2791) * C83 +
                      (C26753 * C2948 - C198 * C2795) * C73 +
                      (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                         C26754 * C26748 +
                     ((C198 * C4243 - C26753 * C4354) * C83 +
                      (C198 * C4247 - C26753 * C4356) * C73 +
                      (C198 * C4242 - C26753 * C4355) * C85 +
                      (C198 * C4245 - C26753 * C4357) * C74) *
                         C26754 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26747 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26748 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C141 +
            (C73 * C1404 - C83 * C1398 + C74 * C1405 - C85 * C1399) * C26754) *
               C26753 * C8095) *
              C26717 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C26747 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
            (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
               C26753 * C26748 +
           ((C83 * C4243 - C73 * C4246 + C85 * C4242 - C74 * C4244) * C141 +
            (C83 * C4408 - C73 * C4410 + C85 * C4409 - C74 * C4411) * C26754) *
               C26753 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26747 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26748 +
           ((C141 * C1258 - C299 * C1184 - C141 * C1398 + C26754 * C1460) *
                C73 +
            C1478 * C74) *
               C26753 * C8095) *
              C26717 +
          (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C73 +
            C3103 * C74) *
               C26753 * C26748 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C26747 -
           ((C141 * C4301 - C299 * C4242 - C141 * C4409 + C26754 * C4462) *
                C74 +
            (C141 * C4300 - C299 * C4243 - C141 * C4408 + C26754 * C4463) *
                C73) *
               C26753 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26747 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26748 +
           (((C26753 * C1328 - C198 * C1184) * C141 +
             (C26753 * C1530 - C198 * C1398) * C26754) *
                C73 +
            ((C1343 - C1344) * C141 + (C1537 - C1538) * C26754) * C74) *
               C8095) *
              C26717 +
          ((((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C26747 +
           (((C26753 * C2945 - C198 * C2791) * C141 +
             (C26753 * C3169 - C198 * C3021) * C26754) *
                C73 +
            ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
               C26748 +
           (((C198 * C4243 - C26753 * C4354) * C141 +
             (C198 * C4408 - C26753 * C4514) * C26754) *
                C73 +
            ((C198 * C4242 - C26753 * C4355) * C141 +
             (C198 * C4409 - C26753 * C4515) * C26754) *
                C74) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezx[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26747 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26748 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C198 +
            (C73 * C1596 - C83 * C1590 + C74 * C1597 - C85 * C1591) * C26753) *
               C26754 * C8095) *
              C26717 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C26747 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
            (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
               C26754 * C26748 +
           ((C83 * C4243 - C73 * C4246 + C85 * C4242 - C74 * C4244) * C198 +
            (C83 * C4566 - C73 * C4568 + C85 * C4567 - C74 * C4569) * C26753) *
               C26754 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezy[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26747 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26748 +
           (((C26754 * C1258 - C141 * C1184) * C198 +
             (C26754 * C1652 - C141 * C1590) * C26753) *
                C73 +
            ((C1273 - C1274) * C198 + (C1659 - C1660) * C26753) * C74) *
               C8095) *
              C26717 +
          ((((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C26747 +
           (((C26754 * C2869 - C141 * C2791) * C198 +
             (C26754 * C3312 - C141 * C3240) * C26753) *
                C73 +
            ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
               C26748 +
           (((C141 * C4243 - C26754 * C4300) * C198 +
             (C141 * C4566 - C26754 * C4620) * C26753) *
                C73 +
            ((C141 * C4242 - C26754 * C4301) * C198 +
             (C141 * C4567 - C26754 * C4621) * C26753) *
                C74) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezz[11] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26747 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26748 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C26754 * C73 +
            C1732 * C74) *
               C8095) *
              C26717 +
          (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C26754 * C73 +
            C3394 * C74) *
               C26748 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C26747 -
           ((C198 * C4355 - C494 * C4242 - C198 * C4567 + C26753 * C4672) *
                C26754 * C74 +
            (C198 * C4354 - C494 * C4243 - C198 * C4566 + C26753 * C4673) *
                C26754 * C73) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[12] += (-std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C6255 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C574 +
                    ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                      C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                         C26753 * C26754 * C26669 -
                     (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                      C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                         C26753 * C26754 * C6255) *
                        C575 +
                    ((C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                      C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                         C26753 * C26754 * C6255 -
                     (C85 * C5775 - C86 * C5773 - C85 * C5776 + C74 * C5779 +
                      C83 * C5777 - C84 * C5774 - C83 * C5778 + C73 * C5780) *
                         C26753 * C26754 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C6255 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C26589 * C3446 +
                    ((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                      C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                         C26753 * C26754 * C26669 -
                     (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                      C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                         C26753 * C26754 * C6255) *
                        C26589 * C3447 +
                    ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                      C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                         C26753 * C26754 * C6255 -
                     (C85 * C2283 - C86 * C2282 - C85 * C2284 + C74 * C2285 +
                      C83 * C1196 - C84 * C1186 - C83 * C1197 + C73 * C1204) *
                         C26753 * C26754 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                     C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                        C26753 * C26754 * C7141 -
                    (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                     C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                        C26753 * C26754 * C7142 +
                    (C83 * C1192 - C84 * C1184 - C83 * C1193 + C73 * C1202 +
                     C85 * C1194 - C86 * C1185 - C85 * C1195 + C74 * C1203) *
                        C26753 * C26754 * C7143 -
                    (C85 * C7147 - C86 * C7145 - C85 * C7148 + C74 * C7151 +
                     C83 * C7149 - C84 * C7146 - C83 * C7150 + C73 * C7152) *
                        C26753 * C26754 * C7144) *
                   C26589 * C26570) /
                      (p * q * std::sqrt(p + q));
    d2eexy[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C83 +
            (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
            (C155 - C156) * C74) *
               C26753 * C6255 +
           ((C141 * C1183 - C26754 * C1256) * C83 +
            (C141 * C1191 - C26754 * C1262) * C73 + (C1269 - C1270) * C85 +
            (C1271 - C1272) * C74) *
               C26753 * C26669) *
              C574 +
          (((C141 * C580 - C26754 * C653) * C83 +
            (C141 * C588 - C26754 * C659) * C73 + (C666 - C667) * C85 +
            (C668 - C669) * C74) *
               C26753 * C6255 +
           ((C26754 * C2869 - C141 * C2791) * C83 +
            (C26754 * C2872 - C141 * C2795) * C73 + (C2876 - C2877) * C85 +
            (C2878 - C2879) * C74) *
               C26753 * C26669) *
              C575 +
          (((C26754 * C655 - C141 * C581) * C83 +
            (C26754 * C661 - C141 * C590) * C73 + (C670 - C671) * C85 +
            (C672 - C673) * C74) *
               C26753 * C6255 +
           ((C141 * C5774 - C26754 * C5831) * C83 +
            (C141 * C5778 - C26754 * C5833) * C73 +
            (C141 * C5773 - C26754 * C5832) * C85 +
            (C141 * C5776 - C26754 * C5834) * C74) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26754 * C142 - C141 * C87) * C83 +
                                (C26754 * C147 - C141 * C93) * C73 +
                                (C153 - C154) * C85 + (C155 - C156) * C74) *
                                   C26753 * C6255 +
                               ((C141 * C1183 - C26754 * C1256) * C83 +
                                (C141 * C1191 - C26754 * C1262) * C73 +
                                (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                                   C26753 * C26669) *
                                  C26589 * C3446 +
                              (((C154 - C153) * C83 + (C156 - C155) * C73 +
                                (C157 - C158) * C85 + (C159 - C160) * C74) *
                                   C26753 * C6255 +
                               ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                                (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                                   C26753 * C26669) *
                                  C26589 * C3447 +
                              (((C158 - C157) * C83 + (C160 - C159) * C73 +
                                (C161 - C162) * C85 + (C163 - C164) * C74) *
                                   C26753 * C6255 +
                               ((C2340 - C2339) * C83 + (C2342 - C2341) * C73 +
                                (C141 * C2282 - C26754 * C2336) * C85 +
                                (C141 * C2284 - C26754 * C2337) * C74) *
                                   C26753 * C26669) *
                                  C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26754 * C142 - C141 * C87) * C83 +
           (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
           (C155 - C156) * C74) *
              C26753 * C7141 +
          ((C141 * C1183 - C26754 * C1256) * C83 +
           (C141 * C1191 - C26754 * C1262) * C73 + (C1269 - C1270) * C85 +
           (C1271 - C1272) * C74) *
              C26753 * C7142 +
          ((C26754 * C1258 - C141 * C1184) * C83 +
           (C26754 * C1264 - C141 * C1193) * C73 + (C1273 - C1274) * C85 +
           (C1275 - C1276) * C74) *
              C26753 * C7143 +
          ((C141 * C7146 - C26754 * C7187) * C83 +
           (C141 * C7150 - C26754 * C7189) * C73 +
           (C141 * C7145 - C26754 * C7188) * C85 +
           (C141 * C7148 - C26754 * C7190) * C74) *
              C26753 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C83 +
            (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
            (C212 - C213) * C74) *
               C26754 * C6255 +
           ((C198 * C1183 - C26753 * C1326) * C83 +
            (C198 * C1191 - C26753 * C1332) * C73 + (C1339 - C1340) * C85 +
            (C1341 - C1342) * C74) *
               C26754 * C26669) *
              C574 +
          (((C198 * C580 - C26753 * C723) * C83 +
            (C198 * C588 - C26753 * C729) * C73 + (C736 - C737) * C85 +
            (C738 - C739) * C74) *
               C26754 * C6255 +
           ((C26753 * C2945 - C198 * C2791) * C83 +
            (C26753 * C2948 - C198 * C2795) * C73 + (C2952 - C2953) * C85 +
            (C2954 - C2955) * C74) *
               C26754 * C26669) *
              C575 +
          (((C26753 * C725 - C198 * C581) * C83 +
            (C26753 * C731 - C198 * C590) * C73 + (C740 - C741) * C85 +
            (C742 - C743) * C74) *
               C26754 * C6255 +
           ((C198 * C5774 - C26753 * C5885) * C83 +
            (C198 * C5778 - C26753 * C5887) * C73 +
            (C198 * C5773 - C26753 * C5886) * C85 +
            (C198 * C5776 - C26753 * C5888) * C74) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26753 * C199 - C198 * C87) * C83 +
                                (C26753 * C204 - C198 * C93) * C73 +
                                (C210 - C211) * C85 + (C212 - C213) * C74) *
                                   C26754 * C6255 +
                               ((C198 * C1183 - C26753 * C1326) * C83 +
                                (C198 * C1191 - C26753 * C1332) * C73 +
                                (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                                   C26754 * C26669) *
                                  C26589 * C3446 +
                              (((C211 - C210) * C83 + (C213 - C212) * C73 +
                                (C214 - C215) * C85 + (C216 - C217) * C74) *
                                   C26754 * C6255 +
                               ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                                (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                                   C26754 * C26669) *
                                  C26589 * C3447 +
                              (((C215 - C214) * C83 + (C217 - C216) * C73 +
                                (C218 - C219) * C85 + (C220 - C221) * C74) *
                                   C26754 * C6255 +
                               ((C2396 - C2395) * C83 + (C2398 - C2397) * C73 +
                                (C198 * C2282 - C26753 * C2392) * C85 +
                                (C198 * C2284 - C26753 * C2393) * C74) *
                                   C26754 * C26669) *
                                  C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C26753 * C199 - C198 * C87) * C83 +
           (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
           (C212 - C213) * C74) *
              C26754 * C7141 +
          ((C198 * C1183 - C26753 * C1326) * C83 +
           (C198 * C1191 - C26753 * C1332) * C73 + (C1339 - C1340) * C85 +
           (C1341 - C1342) * C74) *
              C26754 * C7142 +
          ((C26753 * C1328 - C198 * C1184) * C83 +
           (C26753 * C1334 - C198 * C1193) * C73 + (C1343 - C1344) * C85 +
           (C1345 - C1346) * C74) *
              C26754 * C7143 +
          ((C198 * C7146 - C26753 * C7225) * C83 +
           (C198 * C7150 - C26753 * C7227) * C73 +
           (C198 * C7145 - C26753 * C7226) * C85 +
           (C198 * C7148 - C26753 * C7228) * C74) *
              C26754 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C574 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C6255 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
            (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
               C26753 * C26669) *
              C575 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C6255 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C141 +
            (C83 * C5939 - C73 * C5941 + C85 * C5940 - C74 * C5942) * C26754) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C26589 * C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C6255 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
            (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
               C26753 * C26669) *
              C26589 * C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C6255 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C141 +
            (C83 * C1400 - C73 * C1406 + C85 * C2448 - C74 * C2449) * C26754) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
           (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
              C26753 * C7141 +
          ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
           (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
              C26753 * C7142 +
          ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C141 +
           (C73 * C1404 - C83 * C1398 + C74 * C1405 - C85 * C1399) * C26754) *
              C26753 * C7143 +
          ((C83 * C7146 - C73 * C7149 + C85 * C7145 - C74 * C7147) * C141 +
           (C83 * C7263 - C73 * C7265 + C85 * C7264 - C74 * C7266) * C26754) *
              C26753 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C6255 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C574 +
          (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C73 +
            C3103 * C74) *
               C26753 * C26669 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C6255) *
              C575 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C6255 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C74 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C73) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C6255 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C26589 * C3446 +
          ((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
           (C325 * C74 + C324 * C73) * C26753 * C6255) *
              C26589 * C3447 +
          ((C325 * C73 + C326 * C74) * C26753 * C6255 -
           ((C141 * C2336 - C299 * C2282 - C141 * C2448 + C26754 * C2500) *
                C74 +
            C2508 * C73) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
           C324 * C74) *
              C26753 * C7141 -
          (C1477 * C74 +
           (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
               C73) *
              C26753 * C7142 +
          ((C141 * C1258 - C299 * C1184 - C141 * C1398 + C26754 * C1460) * C73 +
           C1478 * C74) *
              C26753 * C7143 -
          ((C141 * C7188 - C299 * C7145 - C141 * C7264 + C26754 * C7301) * C74 +
           (C141 * C7187 - C299 * C7146 - C141 * C7263 + C26754 * C7302) *
               C73) *
              C26753 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[12] +=
        (-std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C574 +
          ((((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C6255 +
           (((C26753 * C2945 - C198 * C2791) * C141 +
             (C26753 * C3169 - C198 * C3021) * C26754) *
                C73 +
            ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
               C26669) *
              C575 +
          ((((C26753 * C725 - C198 * C581) * C141 +
             (C26753 * C927 - C198 * C795) * C26754) *
                C73 +
            ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
               C6255 +
           (((C198 * C5774 - C26753 * C5885) * C141 +
             (C198 * C5939 - C26753 * C6045) * C26754) *
                C73 +
            ((C198 * C5773 - C26753 * C5886) * C141 +
             (C198 * C5940 - C26753 * C6046) * C26754) *
                C74) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C26589 * C3446 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C6255 +
           (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
            ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
               C26669) *
              C26589 * C3447 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C6255 +
           (((C2396 - C2395) * C141 + (C2561 - C2560) * C26754) * C73 +
            ((C198 * C2282 - C26753 * C2392) * C141 +
             (C198 * C2448 - C26753 * C2558) * C26754) *
                C74) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C141 +
            (C26753 * C360 - C198 * C255) * C26754) *
               C73 +
           ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
              C7141 +
          (((C198 * C1183 - C26753 * C1326) * C141 +
            (C198 * C1396 - C26753 * C1528) * C26754) *
               C73 +
           ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
              C7142 +
          (((C26753 * C1328 - C198 * C1184) * C141 +
            (C26753 * C1530 - C198 * C1398) * C26754) *
               C73 +
           ((C1343 - C1344) * C141 + (C1537 - C1538) * C26754) * C74) *
              C7143 +
          (((C198 * C7146 - C26753 * C7225) * C141 +
            (C198 * C7263 - C26753 * C7337) * C26754) *
               C73 +
           ((C198 * C7145 - C26753 * C7226) * C141 +
            (C198 * C7264 - C26753 * C7338) * C26754) *
               C74) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C574 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C6255 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
            (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
               C26754 * C26669) *
              C575 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C6255 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C198 +
            (C83 * C6097 - C73 * C6099 + C85 * C6098 - C74 * C6100) * C26753) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C26589 * C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C6255 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
            (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
               C26754 * C26669) *
              C26589 * C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C6255 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C198 +
            (C83 * C1592 - C73 * C1598 + C85 * C2611 - C74 * C2612) * C26753) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
           (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
              C26754 * C7141 +
          ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
           (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
              C26754 * C7142 +
          ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C198 +
           (C73 * C1596 - C83 * C1590 + C74 * C1597 - C85 * C1591) * C26753) *
              C26754 * C7143 +
          ((C83 * C7146 - C73 * C7149 + C85 * C7145 - C74 * C7147) * C198 +
           (C83 * C7373 - C73 * C7375 + C85 * C7374 - C74 * C7376) * C26753) *
              C26754 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[12] +=
        (-std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C6255 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C574 +
          ((((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C6255 +
           (((C26754 * C2869 - C141 * C2791) * C198 +
             (C26754 * C3312 - C141 * C3240) * C26753) *
                C73 +
            ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
               C26669) *
              C575 +
          ((((C26754 * C655 - C141 * C581) * C198 +
             (C26754 * C1049 - C141 * C987) * C26753) *
                C73 +
            ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
               C6255 +
           (((C141 * C5774 - C26754 * C5831) * C198 +
             (C141 * C6097 - C26754 * C6151) * C26753) *
                C73 +
            ((C141 * C5773 - C26754 * C5832) * C198 +
             (C141 * C6098 - C26754 * C6152) * C26753) *
                C74) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C6255 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C26589 * C3446 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C6255 +
           (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
            ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
               C26669) *
              C26589 * C3447 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C6255 +
           (((C2340 - C2339) * C198 + (C2666 - C2665) * C26753) * C73 +
            ((C141 * C2282 - C26754 * C2336) * C198 +
             (C141 * C2611 - C26754 * C2663) * C26753) *
                C74) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C198 +
            (C26754 * C449 - C141 * C405) * C26753) *
               C73 +
           ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
              C7141 +
          (((C141 * C1183 - C26754 * C1256) * C198 +
            (C141 * C1588 - C26754 * C1650) * C26753) *
               C73 +
           ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
              C7142 +
          (((C26754 * C1258 - C141 * C1184) * C198 +
            (C26754 * C1652 - C141 * C1590) * C26753) *
               C73 +
           ((C1273 - C1274) * C198 + (C1659 - C1660) * C26753) * C74) *
              C7143 +
          (((C141 * C7146 - C26754 * C7187) * C198 +
            (C141 * C7373 - C26754 * C7411) * C26753) *
               C73 +
           ((C141 * C7145 - C26754 * C7188) * C198 +
            (C141 * C7374 - C26754 * C7412) * C26753) *
               C74) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[12] +=
        (-std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C6255 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C574 +
          (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C26754 * C73 +
            C3394 * C74) *
               C26669 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C6255) *
              C575 +
          (((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C6255 -
           ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                C26754 * C74 +
            (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                C26754 * C73) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C6255 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C26589 * C3446 +
          ((C1731 * C73 + C2725 * C74) * C26669 -
           (C523 * C74 + C522 * C73) * C6255) *
              C26589 * C3447 +
          ((C523 * C73 + C524 * C74) * C6255 -
           ((C198 * C2392 - C494 * C2282 - C198 * C2611 + C26753 * C2716) *
                C26754 * C74 +
            C2725 * C73) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
               C73 +
           C522 * C74) *
              C7141 -
          (C1731 * C74 +
           (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
               C26754 * C73) *
              C7142 +
          ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
               C26754 * C73 +
           C1732 * C74) *
              C7143 -
          ((C198 * C7226 - C494 * C7145 - C198 * C7374 + C26753 * C7447) *
               C26754 * C74 +
           (C198 * C7225 - C494 * C7146 - C198 * C7373 + C26753 * C7448) *
               C26754 * C73) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C26747 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26748 +
                     (C83 * C1192 - C84 * C1184 - C83 * C1193 + C73 * C1202 +
                      C85 * C1194 - C86 * C1185 - C85 * C1195 + C74 * C1203) *
                         C26753 * C26754 * C8095) *
                        C26589 * C26709 +
                    ((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                      C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                         C26753 * C26754 * C26748 -
                     (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                      C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                         C26753 * C26754 * C26747 -
                     (C85 * C1198 - C86 * C1187 - C85 * C1199 + C74 * C1205 +
                      C83 * C1194 - C84 * C1185 - C83 * C1195 + C73 * C1203) *
                         C26753 * C26754 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eexy[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C26747 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26748 +
                     ((C26754 * C1258 - C141 * C1184) * C83 +
                      (C26754 * C1264 - C141 * C1193) * C73 +
                      (C1273 - C1274) * C85 + (C1275 - C1276) * C74) *
                         C26753 * C8095) *
                        C26589 * C26709 +
                    (((C154 - C153) * C83 + (C156 - C155) * C73 +
                      (C157 - C158) * C85 + (C159 - C160) * C74) *
                         C26753 * C26747 +
                     ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                      (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                         C26753 * C26748 +
                     ((C1274 - C1273) * C83 + (C1276 - C1275) * C73 +
                      (C141 * C1187 - C26754 * C1261) * C85 +
                      (C141 * C1199 - C26754 * C1267) * C74) *
                         C26753 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eexz[13] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C26747 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26748 +
                     ((C26753 * C1328 - C198 * C1184) * C83 +
                      (C26753 * C1334 - C198 * C1193) * C73 +
                      (C1343 - C1344) * C85 + (C1345 - C1346) * C74) *
                         C26754 * C8095) *
                        C26589 * C26709 +
                    (((C211 - C210) * C83 + (C213 - C212) * C73 +
                      (C214 - C215) * C85 + (C216 - C217) * C74) *
                         C26754 * C26747 +
                     ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                      (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                         C26754 * C26748 +
                     ((C1344 - C1343) * C83 + (C1346 - C1345) * C73 +
                      (C198 * C1187 - C26753 * C1331) * C85 +
                      (C198 * C1199 - C26753 * C1337) * C74) *
                         C26754 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C26747 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26748 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C141 +
            (C73 * C1404 - C83 * C1398 + C74 * C1405 - C85 * C1399) * C26754) *
               C26753 * C8095) *
              C26589 * C26709 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C26747 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
            (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
               C26753 * C26748 +
           ((C83 * C1185 - C73 * C1194 + C85 * C1187 - C74 * C1198) * C141 +
            (C83 * C1399 - C73 * C1405 + C85 * C1401 - C74 * C1407) * C26754) *
               C26753 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C26747 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26748 +
           ((C141 * C1258 - C299 * C1184 - C141 * C1398 + C26754 * C1460) *
                C73 +
            C1478 * C74) *
               C26753 * C8095) *
              C26589 * C26709 +
          ((C1477 * C73 + C2508 * C74) * C26753 * C26748 -
           (C325 * C74 + C324 * C73) * C26753 * C26747 -
           ((C141 * C1261 - C299 * C1187 - C141 * C1401 + C26754 * C1463) *
                C74 +
            C1478 * C73) *
               C26753 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C26747 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26748 +
           (((C26753 * C1328 - C198 * C1184) * C141 +
             (C26753 * C1530 - C198 * C1398) * C26754) *
                C73 +
            ((C1343 - C1344) * C141 + (C1537 - C1538) * C26754) * C74) *
               C8095) *
              C26589 * C26709 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C26747 +
           (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
            ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
               C26748 +
           (((C1344 - C1343) * C141 + (C1538 - C1537) * C26754) * C73 +
            ((C198 * C1187 - C26753 * C1331) * C141 +
             (C198 * C1401 - C26753 * C1533) * C26754) *
                C74) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C26747 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26748 +
           ((C73 * C1192 - C83 * C1184 + C74 * C1194 - C85 * C1185) * C198 +
            (C73 * C1596 - C83 * C1590 + C74 * C1597 - C85 * C1591) * C26753) *
               C26754 * C8095) *
              C26589 * C26709 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C26747 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
            (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
               C26754 * C26748 +
           ((C83 * C1185 - C73 * C1194 + C85 * C1187 - C74 * C1198) * C198 +
            (C83 * C1591 - C73 * C1597 + C85 * C1593 - C74 * C1599) * C26753) *
               C26754 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C26747 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26748 +
           (((C26754 * C1258 - C141 * C1184) * C198 +
             (C26754 * C1652 - C141 * C1590) * C26753) *
                C73 +
            ((C1273 - C1274) * C198 + (C1659 - C1660) * C26753) * C74) *
               C8095) *
              C26589 * C26709 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C26747 +
           (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
            ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
               C26748 +
           (((C1274 - C1273) * C198 + (C1660 - C1659) * C26753) * C73 +
            ((C141 * C1187 - C26754 * C1261) * C198 +
             (C141 * C1593 - C26754 * C1655) * C26753) *
                C74) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[13] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C26747 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26748 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C26754 * C73 +
            C1732 * C74) *
               C8095) *
              C26589 * C26709 +
          ((C1731 * C73 + C2725 * C74) * C26748 -
           (C523 * C74 + C522 * C73) * C26747 -
           ((C198 * C1331 - C494 * C1187 - C198 * C1593 + C26753 * C1715) *
                C26754 * C74 +
            C1732 * C73) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C6255 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C26589 * C3446 +
                    ((C83 * C1188 - C84 * C1182 - C83 * C1189 + C73 * C1200 +
                      C85 * C1196 - C86 * C1186 - C85 * C1197 + C74 * C1204) *
                         C26753 * C26754 * C26669 -
                     (C85 * C96 - C86 * C89 - C85 * C97 + C74 * C104 +
                      C83 * C94 - C84 * C88 - C83 * C95 + C73 * C103) *
                         C26753 * C26754 * C6255) *
                        C26589 * C3447 +
                    ((C83 * C96 - C84 * C89 - C83 * C97 + C73 * C104 +
                      C85 * C98 - C86 * C90 - C85 * C99 + C74 * C105) *
                         C26753 * C26754 * C6255 -
                     (C85 * C2283 - C86 * C2282 - C85 * C2284 + C74 * C2285 +
                      C83 * C1196 - C84 * C1186 - C83 * C1197 + C73 * C1204) *
                         C26753 * C26754 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C83 * C92 - C84 * C87 - C83 * C93 + C73 * C102 +
                      C85 * C94 - C86 * C88 - C85 * C95 + C74 * C103) *
                         C26753 * C26754 * C6255 -
                     (C85 * C1188 - C86 * C1182 - C85 * C1189 + C74 * C1200 +
                      C83 * C1190 - C84 * C1183 - C83 * C1191 + C73 * C1201) *
                         C26753 * C26754 * C26669) *
                        C574 +
                    ((C83 * C2794 - C84 * C2791 - C83 * C2795 + C73 * C2800 +
                      C85 * C2796 - C86 * C2792 - C85 * C2797 + C74 * C2801) *
                         C26753 * C26754 * C26669 -
                     (C85 * C585 - C86 * C579 - C85 * C586 + C74 * C597 +
                      C83 * C587 - C84 * C580 - C83 * C588 + C73 * C598) *
                         C26753 * C26754 * C6255) *
                        C575 +
                    ((C83 * C589 - C84 * C581 - C83 * C590 + C73 * C599 +
                      C85 * C591 - C86 * C582 - C85 * C592 + C74 * C600) *
                         C26753 * C26754 * C6255 -
                     (C85 * C5775 - C86 * C5773 - C85 * C5776 + C74 * C5779 +
                      C83 * C5777 - C84 * C5774 - C83 * C5778 + C73 * C5780) *
                         C26753 * C26754 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eexy[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C6255 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26669) *
                        C26589 * C3446 +
                    (((C154 - C153) * C83 + (C156 - C155) * C73 +
                      (C157 - C158) * C85 + (C159 - C160) * C74) *
                         C26753 * C6255 +
                     ((C1270 - C1269) * C83 + (C1272 - C1271) * C73 +
                      (C2339 - C2340) * C85 + (C2341 - C2342) * C74) *
                         C26753 * C26669) *
                        C26589 * C3447 +
                    (((C158 - C157) * C83 + (C160 - C159) * C73 +
                      (C161 - C162) * C85 + (C163 - C164) * C74) *
                         C26753 * C6255 +
                     ((C2340 - C2339) * C83 + (C2342 - C2341) * C73 +
                      (C141 * C2282 - C26754 * C2336) * C85 +
                      (C141 * C2284 - C26754 * C2337) * C74) *
                         C26753 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C83 +
                      (C26754 * C147 - C141 * C93) * C73 + (C153 - C154) * C85 +
                      (C155 - C156) * C74) *
                         C26753 * C6255 +
                     ((C141 * C1183 - C26754 * C1256) * C83 +
                      (C141 * C1191 - C26754 * C1262) * C73 +
                      (C1269 - C1270) * C85 + (C1271 - C1272) * C74) *
                         C26753 * C26669) *
                        C574 +
                    (((C141 * C580 - C26754 * C653) * C83 +
                      (C141 * C588 - C26754 * C659) * C73 +
                      (C666 - C667) * C85 + (C668 - C669) * C74) *
                         C26753 * C6255 +
                     ((C26754 * C2869 - C141 * C2791) * C83 +
                      (C26754 * C2872 - C141 * C2795) * C73 +
                      (C2876 - C2877) * C85 + (C2878 - C2879) * C74) *
                         C26753 * C26669) *
                        C575 +
                    (((C26754 * C655 - C141 * C581) * C83 +
                      (C26754 * C661 - C141 * C590) * C73 +
                      (C670 - C671) * C85 + (C672 - C673) * C74) *
                         C26753 * C6255 +
                     ((C141 * C5774 - C26754 * C5831) * C83 +
                      (C141 * C5778 - C26754 * C5833) * C73 +
                      (C141 * C5773 - C26754 * C5832) * C85 +
                      (C141 * C5776 - C26754 * C5834) * C74) *
                         C26753 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eexz[14] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26669) *
                        C26589 * C3446 +
                    (((C211 - C210) * C83 + (C213 - C212) * C73 +
                      (C214 - C215) * C85 + (C216 - C217) * C74) *
                         C26754 * C6255 +
                     ((C1340 - C1339) * C83 + (C1342 - C1341) * C73 +
                      (C2395 - C2396) * C85 + (C2397 - C2398) * C74) *
                         C26754 * C26669) *
                        C26589 * C3447 +
                    (((C215 - C214) * C83 + (C217 - C216) * C73 +
                      (C218 - C219) * C85 + (C220 - C221) * C74) *
                         C26754 * C6255 +
                     ((C2396 - C2395) * C83 + (C2398 - C2397) * C73 +
                      (C198 * C2282 - C26753 * C2392) * C85 +
                      (C198 * C2284 - C26753 * C2393) * C74) *
                         C26754 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C83 +
                      (C26753 * C204 - C198 * C93) * C73 + (C210 - C211) * C85 +
                      (C212 - C213) * C74) *
                         C26754 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C83 +
                      (C198 * C1191 - C26753 * C1332) * C73 +
                      (C1339 - C1340) * C85 + (C1341 - C1342) * C74) *
                         C26754 * C26669) *
                        C574 +
                    (((C198 * C580 - C26753 * C723) * C83 +
                      (C198 * C588 - C26753 * C729) * C73 +
                      (C736 - C737) * C85 + (C738 - C739) * C74) *
                         C26754 * C6255 +
                     ((C26753 * C2945 - C198 * C2791) * C83 +
                      (C26753 * C2948 - C198 * C2795) * C73 +
                      (C2952 - C2953) * C85 + (C2954 - C2955) * C74) *
                         C26754 * C26669) *
                        C575 +
                    (((C26753 * C725 - C198 * C581) * C83 +
                      (C26753 * C731 - C198 * C590) * C73 +
                      (C740 - C741) * C85 + (C742 - C743) * C74) *
                         C26754 * C6255 +
                     ((C198 * C5774 - C26753 * C5885) * C83 +
                      (C198 * C5778 - C26753 * C5887) * C73 +
                      (C198 * C5773 - C26753 * C5886) * C85 +
                      (C198 * C5776 - C26753 * C5888) * C74) *
                         C26754 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eeyx[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C26589 * C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C141 +
            (C83 * C256 - C73 * C261 + C85 * C257 - C74 * C262) * C26754) *
               C26753 * C6255 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C141 +
            (C73 * C1403 - C83 * C1397 + C74 * C1406 - C85 * C1400) * C26754) *
               C26753 * C26669) *
              C26589 * C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C141 +
            (C73 * C262 - C83 * C257 + C74 * C263 - C85 * C258) * C26754) *
               C26753 * C6255 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C141 +
            (C83 * C1400 - C73 * C1406 + C85 * C2448 - C74 * C2449) * C26754) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C141 +
            (C73 * C260 - C83 * C255 + C74 * C261 - C85 * C256) * C26754) *
               C26753 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C141 +
            (C83 * C1396 - C73 * C1402 + C85 * C1397 - C74 * C1403) * C26754) *
               C26753 * C26669) *
              C574 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C141 +
            (C83 * C793 - C73 * C799 + C85 * C794 - C74 * C800) * C26754) *
               C26753 * C6255 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C141 +
            (C73 * C3024 - C83 * C3021 + C74 * C3025 - C85 * C3022) * C26754) *
               C26753 * C26669) *
              C575 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C141 +
            (C73 * C801 - C83 * C795 + C74 * C802 - C85 * C796) * C26754) *
               C26753 * C6255 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C141 +
            (C83 * C5939 - C73 * C5941 + C85 * C5940 - C74 * C5942) * C26754) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C6255 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C26589 * C3446 +
          ((C1477 * C73 + C2508 * C74) * C26753 * C26669 -
           (C325 * C74 + C324 * C73) * C26753 * C6255) *
              C26589 * C3447 +
          ((C325 * C73 + C326 * C74) * C26753 * C6255 -
           ((C141 * C2336 - C299 * C2282 - C141 * C2448 + C26754 * C2500) *
                C74 +
            C2508 * C73) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C73 +
            C324 * C74) *
               C26753 * C6255 -
           (C1477 * C74 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C73) *
               C26753 * C26669) *
              C574 +
          (((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C73 +
            C3103 * C74) *
               C26753 * C26669 -
           (C874 * C74 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C73) *
               C26753 * C6255) *
              C575 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C73 +
            C875 * C74) *
               C26753 * C6255 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C74 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C73) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C26589 * C3446 +
          ((((C211 - C210) * C141 + (C367 - C366) * C26754) * C73 +
            ((C214 - C215) * C141 + (C368 - C369) * C26754) * C74) *
               C6255 +
           (((C1340 - C1339) * C141 + (C1536 - C1535) * C26754) * C73 +
            ((C2395 - C2396) * C141 + (C2560 - C2561) * C26754) * C74) *
               C26669) *
              C26589 * C3447 +
          ((((C215 - C214) * C141 + (C369 - C368) * C26754) * C73 +
            ((C218 - C219) * C141 + (C370 - C371) * C26754) * C74) *
               C6255 +
           (((C2396 - C2395) * C141 + (C2561 - C2560) * C26754) * C73 +
            ((C198 * C2282 - C26753 * C2392) * C141 +
             (C198 * C2448 - C26753 * C2558) * C26754) *
                C74) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C141 +
             (C26753 * C360 - C198 * C255) * C26754) *
                C73 +
            ((C210 - C211) * C141 + (C366 - C367) * C26754) * C74) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C141 +
             (C198 * C1396 - C26753 * C1528) * C26754) *
                C73 +
            ((C1339 - C1340) * C141 + (C1535 - C1536) * C26754) * C74) *
               C26669) *
              C574 +
          ((((C198 * C580 - C26753 * C723) * C141 +
             (C198 * C793 - C26753 * C925) * C26754) *
                C73 +
            ((C736 - C737) * C141 + (C932 - C933) * C26754) * C74) *
               C6255 +
           (((C26753 * C2945 - C198 * C2791) * C141 +
             (C26753 * C3169 - C198 * C3021) * C26754) *
                C73 +
            ((C2952 - C2953) * C141 + (C3173 - C3174) * C26754) * C74) *
               C26669) *
              C575 +
          ((((C26753 * C725 - C198 * C581) * C141 +
             (C26753 * C927 - C198 * C795) * C26754) *
                C73 +
            ((C740 - C741) * C141 + (C934 - C935) * C26754) * C74) *
               C6255 +
           (((C198 * C5774 - C26753 * C5885) * C141 +
             (C198 * C5939 - C26753 * C6045) * C26754) *
                C73 +
            ((C198 * C5773 - C26753 * C5886) * C141 +
             (C198 * C5940 - C26753 * C6046) * C26754) *
                C74) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C26589 * C3446 +
          (((C83 * C88 - C73 * C94 + C85 * C89 - C74 * C96) * C198 +
            (C83 * C406 - C73 * C411 + C85 * C407 - C74 * C412) * C26753) *
               C26754 * C6255 +
           ((C73 * C1188 - C83 * C1182 + C74 * C1196 - C85 * C1186) * C198 +
            (C73 * C1595 - C83 * C1589 + C74 * C1598 - C85 * C1592) * C26753) *
               C26754 * C26669) *
              C26589 * C3447 +
          (((C73 * C96 - C83 * C89 + C74 * C98 - C85 * C90) * C198 +
            (C73 * C412 - C83 * C407 + C74 * C413 - C85 * C408) * C26753) *
               C26754 * C6255 +
           ((C83 * C1186 - C73 * C1196 + C85 * C2282 - C74 * C2283) * C198 +
            (C83 * C1592 - C73 * C1598 + C85 * C2611 - C74 * C2612) * C26753) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C73 * C92 - C83 * C87 + C74 * C94 - C85 * C88) * C198 +
            (C73 * C410 - C83 * C405 + C74 * C411 - C85 * C406) * C26753) *
               C26754 * C6255 +
           ((C83 * C1183 - C73 * C1190 + C85 * C1182 - C74 * C1188) * C198 +
            (C83 * C1588 - C73 * C1594 + C85 * C1589 - C74 * C1595) * C26753) *
               C26754 * C26669) *
              C574 +
          (((C83 * C580 - C73 * C587 + C85 * C579 - C74 * C585) * C198 +
            (C83 * C985 - C73 * C991 + C85 * C986 - C74 * C992) * C26753) *
               C26754 * C6255 +
           ((C73 * C2794 - C83 * C2791 + C74 * C2796 - C85 * C2792) * C198 +
            (C73 * C3243 - C83 * C3240 + C74 * C3244 - C85 * C3241) * C26753) *
               C26754 * C26669) *
              C575 +
          (((C73 * C589 - C83 * C581 + C74 * C591 - C85 * C582) * C198 +
            (C73 * C993 - C83 * C987 + C74 * C994 - C85 * C988) * C26753) *
               C26754 * C6255 +
           ((C83 * C5774 - C73 * C5777 + C85 * C5773 - C74 * C5775) * C198 +
            (C83 * C6097 - C73 * C6099 + C85 * C6098 - C74 * C6100) * C26753) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C6255 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C26589 * C3446 +
          ((((C154 - C153) * C198 + (C456 - C455) * C26753) * C73 +
            ((C157 - C158) * C198 + (C457 - C458) * C26753) * C74) *
               C6255 +
           (((C1270 - C1269) * C198 + (C1658 - C1657) * C26753) * C73 +
            ((C2339 - C2340) * C198 + (C2665 - C2666) * C26753) * C74) *
               C26669) *
              C26589 * C3447 +
          ((((C158 - C157) * C198 + (C458 - C457) * C26753) * C73 +
            ((C161 - C162) * C198 + (C459 - C460) * C26753) * C74) *
               C6255 +
           (((C2340 - C2339) * C198 + (C2666 - C2665) * C26753) * C73 +
            ((C141 * C2282 - C26754 * C2336) * C198 +
             (C141 * C2611 - C26754 * C2663) * C26753) *
                C74) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C198 +
             (C26754 * C449 - C141 * C405) * C26753) *
                C73 +
            ((C153 - C154) * C198 + (C455 - C456) * C26753) * C74) *
               C6255 +
           (((C141 * C1183 - C26754 * C1256) * C198 +
             (C141 * C1588 - C26754 * C1650) * C26753) *
                C73 +
            ((C1269 - C1270) * C198 + (C1657 - C1658) * C26753) * C74) *
               C26669) *
              C574 +
          ((((C141 * C580 - C26754 * C653) * C198 +
             (C141 * C985 - C26754 * C1047) * C26753) *
                C73 +
            ((C666 - C667) * C198 + (C1054 - C1055) * C26753) * C74) *
               C6255 +
           (((C26754 * C2869 - C141 * C2791) * C198 +
             (C26754 * C3312 - C141 * C3240) * C26753) *
                C73 +
            ((C2876 - C2877) * C198 + (C3316 - C3317) * C26753) * C74) *
               C26669) *
              C575 +
          ((((C26754 * C655 - C141 * C581) * C198 +
             (C26754 * C1049 - C141 * C987) * C26753) *
                C73 +
            ((C670 - C671) * C198 + (C1056 - C1057) * C26753) * C74) *
               C6255 +
           (((C141 * C5774 - C26754 * C5831) * C198 +
             (C141 * C6097 - C26754 * C6151) * C26753) *
                C73 +
            ((C141 * C5773 - C26754 * C5832) * C198 +
             (C141 * C6098 - C26754 * C6152) * C26753) *
                C74) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[14] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C6255 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C26589 * C3446 +
          ((C1731 * C73 + C2725 * C74) * C26669 -
           (C523 * C74 + C522 * C73) * C6255) *
              C26589 * C3447 +
          ((C523 * C73 + C524 * C74) * C6255 -
           ((C198 * C2392 - C494 * C2282 - C198 * C2611 + C26753 * C2716) *
                C26754 * C74 +
            C2725 * C73) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C26754 *
                C73 +
            C522 * C74) *
               C6255 -
           (C1731 * C74 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C26754 * C73) *
               C26669) *
              C574 +
          (((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C26754 * C73 +
            C3394 * C74) *
               C26669 -
           (C1128 * C74 +
            (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) *
                C26754 * C73) *
               C6255) *
              C575 +
          (((C198 * C725 - C494 * C581 - C198 * C987 + C26753 * C1109) *
                C26754 * C73 +
            C1129 * C74) *
               C6255 -
           ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                C26754 * C74 +
            (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                C26754 * C73) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C26717 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C26641) *
              C26743 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C26641 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C26717) *
              C26744 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C26605 * C26717 -
           ((C8983 * C595 - C8984 * C584 - C8983 * C596 + C26752 * C602) *
                C26753 * C8982 +
            C10301 * C8981) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C26717 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C26641) *
              C26743 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C26717 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C26641) *
              C26744 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C26605 * C26717 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) *
                C8983 +
            (C9019 * C594 - C8981 * C663 + C9020 * C596 - C8982 * C664) *
                C26752) *
               C26753 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C26717 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C26641) *
              C26743 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C26717 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C26641) *
              C26744 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C26605 * C26717 +
           (((C1901 - C1900) * C8983 + (C1903 - C1902) * C26752) * C8981 +
            ((C198 * C584 - C26753 * C728) * C8983 +
             (C198 * C596 - C26753 * C734) * C26752) *
                C8982) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26605 * C26717 +
                     ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26605 * C26641) *
                        C26743 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26605 * C26717 +
                     ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                      (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                         C26753 * C26605 * C26641) *
                        C26744 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C26605 * C26717 +
                     ((C10453 - C10452) * C9019 + (C10455 - C10454) * C8981 +
                      (C8983 * C584 - C26752 * C595) * C9020 +
                      (C8983 * C798 - C26752 * C804) * C8982) *
                         C26753 * C26605 * C26641) *
                        C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C26717 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C26641) *
              C26743 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C26641 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C26717) *
              C26744 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C26605 * C26717 -
           (C9020 * C658 - C9124 * C584 - C9020 * C798 + C8982 * C860 +
            C9019 * C657 - C9123 * C583 - C9019 * C797 + C8981 * C859) *
               C26752 * C26753 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[15] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C26717 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C26641) *
                        C26743 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C26717 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C26641) *
                        C26744 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C26605 * C26717 +
                     ((C1901 - C1900) * C9019 + (C2066 - C2065) * C8981 +
                      (C198 * C584 - C26753 * C728) * C9020 +
                      (C198 * C798 - C26753 * C930) * C8982) *
                         C26752 * C26605 * C26641) *
                        C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C26717 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C26641) *
              C26743 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C26717 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C26641) *
              C26744 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C26605 * C26717 +
           (((C10453 - C10452) * C198 + (C10607 - C10606) * C26753) * C8981 +
            ((C8983 * C584 - C26752 * C595) * C198 +
             (C8983 * C990 - C26752 * C996) * C26753) *
                C8982) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezy[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C26717 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C26641) *
              C26743 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C26717 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C26641) *
              C26744 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C26605 * C26717 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) * C198 +
            (C9019 * C989 - C8981 * C1051 + C9020 * C990 - C8982 * C1052) *
                C26753) *
               C26752 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezz[15] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C26717 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C26641) *
              C26743 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C26641 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C26717) *
              C26744 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C26605 * C26717 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) * C8982 +
            C2229 * C8981) *
               C26752 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C26753 * C8981 +
             C9340 * C8982) *
                C26718 -
            (C11238 * C8982 +
             (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                 C26753 * C8981) *
                C26669) *
               C26717 +
           ((C11238 * C8981 +
             (C8983 * C5777 - C8984 * C5774 - C8983 * C5778 + C26752 * C5780) *
                 C26753 * C8982) *
                C26669 -
            (C9341 * C8982 + C9340 * C8981) * C26718) *
               C26641) *
              C577 +
          ((((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                 C26753 * C8981 +
             C11239 * C8982) *
                C26669 -
            (C9342 * C8982 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C26753 * C8981) *
                C26718) *
               C26717 +
           ((C9342 * C8981 + C9343 * C8982) * C26718 -
            ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                 C26753 * C8982 +
             C11239 * C8981) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) *
                 C8983 +
             (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                 C26752) *
                C26753 * C26718 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C8983 +
             (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                 C26752) *
                C26753 * C26669) *
               C26717 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C8983 +
             (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                 C26752) *
                C26753 * C26718 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C8983 +
             (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C577 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) *
                 C8983 +
             (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                 C26752) *
                C26753 * C26718 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C8983 +
             (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                 C26752) *
                C26753 * C26669) *
               C26717 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C8983 +
             (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                 C26752) *
                C26753 * C26718 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C8983 +
             (C9019 * C2797 - C8981 * C2873 + C9020 * C5776 - C8982 * C5834) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C8983 +
              (C26753 * C204 - C198 * C93) * C26752) *
                 C8981 +
             ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
                C26718 +
            (((C198 * C1183 - C26753 * C1326) * C8983 +
              (C198 * C1191 - C26753 * C1332) * C26752) *
                 C8981 +
             ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
                C26669) *
               C26717 +
           ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
             ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
                C26718 +
            (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
             ((C26753 * C5885 - C198 * C5774) * C8983 +
              (C26753 * C5887 - C198 * C5778) * C26752) *
                 C8982) *
                C26669) *
               C26641) *
              C577 +
          (((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
             ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
                C26718 +
            (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
             ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
                C26669) *
               C26717 +
           ((((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
             ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
                C26718 +
            (((C2953 - C2952) * C8983 + (C2955 - C2954) * C26752) * C8981 +
             ((C198 * C5773 - C26753 * C5886) * C8983 +
              (C198 * C5776 - C26753 * C5888) * C26752) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26752 * C92 - C8983 * C87) * C9019 +
                       (C26752 * C260 - C8983 * C255) * C8981 +
                       (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                          C26753 * C26718 +
                      ((C8983 * C1183 - C26752 * C1190) * C9019 +
                       (C8983 * C1396 - C26752 * C1402) * C8981 +
                       (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                          C26753 * C26669) *
                         C26717 +
                     (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                       (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                          C26753 * C26718 +
                      ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                       (C26752 * C5777 - C8983 * C5774) * C9020 +
                       (C26752 * C5941 - C8983 * C5939) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C577 +
                    ((((C8983 * C88 - C26752 * C94) * C9019 +
                       (C8983 * C256 - C26752 * C261) * C8981 +
                       (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                          C26753 * C26718 +
                      ((C26752 * C1188 - C8983 * C1182) * C9019 +
                       (C26752 * C1403 - C8983 * C1397) * C8981 +
                       (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                          C26753 * C26669) *
                         C26717 +
                     (((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                       (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                          C26753 * C26718 +
                      ((C11447 - C11446) * C9019 + (C11449 - C11448) * C8981 +
                       (C8983 * C5773 - C26752 * C5775) * C9020 +
                       (C8983 * C5940 - C26752 * C5942) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
             C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
                C26752 * C26753 * C26718 -
            (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
             C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
                C26752 * C26753 * C26669) *
               C26717 +
           ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
             C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
                C26752 * C26753 * C26669 -
            (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
             C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
                C26752 * C26753 * C26718) *
               C26641) *
              C577 +
          (((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
             C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
                C26752 * C26753 * C26669 -
            (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
             C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
                C26752 * C26753 * C26718) *
               C26717 +
           ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
             C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
                C26752 * C26753 * C26718 -
            (C9020 * C5832 - C9124 * C5773 - C9020 * C5940 + C8982 * C5993 +
             C9019 * C2870 - C9123 * C2792 - C9019 * C3022 + C8981 * C3094) *
                C26752 * C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[16] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26753 * C199 - C198 * C87) * C9019 +
                       (C26753 * C360 - C198 * C255) * C8981 +
                       (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                          C26752 * C26718 +
                      ((C198 * C1183 - C26753 * C1326) * C9019 +
                       (C198 * C1396 - C26753 * C1528) * C8981 +
                       (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                          C26752 * C26669) *
                         C26717 +
                     (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                       (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                          C26752 * C26718 +
                      ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                       (C26753 * C5885 - C198 * C5774) * C9020 +
                       (C26753 * C6045 - C198 * C5939) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C577 +
                    ((((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                       (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                          C26752 * C26718 +
                      ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                       (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                          C26752 * C26669) *
                         C26717 +
                     (((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                       (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                          C26752 * C26718 +
                      ((C2953 - C2952) * C9019 + (C3174 - C3173) * C8981 +
                       (C198 * C5773 - C26753 * C5886) * C9020 +
                       (C198 * C5940 - C26753 * C6046) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C198 +
              (C26752 * C410 - C8983 * C405) * C26753) *
                 C8981 +
             ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
                C26718 +
            (((C8983 * C1183 - C26752 * C1190) * C198 +
              (C8983 * C1588 - C26752 * C1594) * C26753) *
                 C8981 +
             ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
                C26669) *
               C26717 +
           ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
             ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
                C26718 +
            (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
             ((C26752 * C5777 - C8983 * C5774) * C198 +
              (C26752 * C6099 - C8983 * C6097) * C26753) *
                 C8982) *
                C26669) *
               C26641) *
              C577 +
          (((((C8983 * C88 - C26752 * C94) * C198 +
              (C8983 * C406 - C26752 * C411) * C26753) *
                 C8981 +
             ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
                C26718 +
            (((C26752 * C1188 - C8983 * C1182) * C198 +
              (C26752 * C1595 - C8983 * C1589) * C26753) *
                 C8981 +
             ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
                C26669) *
               C26717 +
           ((((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
             ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
                C26718 +
            (((C11447 - C11446) * C198 + (C11653 - C11652) * C26753) * C8981 +
             ((C8983 * C5773 - C26752 * C5775) * C198 +
              (C8983 * C6098 - C26752 * C6100) * C26753) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
             (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                 C26753) *
                C26752 * C26718 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C198 +
             (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                 C26753) *
                C26752 * C26669) *
               C26717 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C198 +
             (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                 C26753) *
                C26752 * C26718 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C198 +
             (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C577 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
             (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                 C26753) *
                C26752 * C26718 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C198 +
             (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                 C26753) *
                C26752 * C26669) *
               C26717 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C198 +
             (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                 C26753) *
                C26752 * C26718 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C198 +
             (C9019 * C3241 - C8981 * C3313 + C9020 * C6098 - C8982 * C6152) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[16] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
             C9792 * C8982) *
                C26752 * C26718 -
            (C11792 * C8982 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C8981) *
                C26752 * C26669) *
               C26717 +
           ((C11792 * C8981 +
             (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                 C8982) *
                C26752 * C26669 -
            (C9793 * C8982 + C9792 * C8981) * C26752 * C26718) *
               C26641) *
              C577 +
          (((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
            (C1126 * C8982 + C519 * C8981) * C26752 * C26718) *
               C26717 +
           ((C1126 * C8981 + C1127 * C8982) * C26752 * C26718 -
            ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                 C8982 +
             C3393 * C8981) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C574 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C575 +
           (C9341 * C8981 +
            (C8983 * C3892 - C8984 * C3889 - C8983 * C3893 + C26752 * C3895) *
                C26753 * C8982) *
               C26605 * C576) *
              C577 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C575 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C574 -
           ((C8983 * C3890 - C8984 * C3888 - C8983 * C3891 + C26752 * C3894) *
                C26753 * C8982 +
            C9343 * C8981) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
               C8981 +
           (C8983 * C587 - C8984 * C580 - C8983 * C588 + C26752 * C598) *
               C26753 * C8982) *
              C26605 * C26589 * C79 -
          ((C8983 * C585 - C8984 * C579 - C8983 * C586 + C26752 * C597) *
               C26753 * C8982 +
           (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
               C8981) *
              C26605 * C26589 * C80 +
          ((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
               C8981 +
           (C8983 * C593 - C8984 * C583 - C8983 * C594 + C26752 * C601) *
               C26753 * C8982) *
              C26605 * C26589 * C81 -
          ((C8983 * C1788 - C8984 * C1787 - C8983 * C1789 + C26752 * C1790) *
               C26753 * C8982 +
           (C8983 * C98 - C8984 * C90 - C8983 * C99 + C26752 * C105) * C26753 *
               C8981) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C1179 -
           ((C8983 * C2794 - C8984 * C2791 - C8983 * C2795 + C26752 * C2800) *
                C26753 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C1180 +
           ((C8983 * C1192 - C8984 * C1184 - C8983 * C1193 + C26752 * C1202) *
                C26753 * C8981 +
            (C8983 * C4246 - C8984 * C4243 - C8983 * C4247 + C26752 * C4249) *
                C26753 * C8982) *
               C1181) *
              C26589 * C577 +
          (((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C26753 * C8981 +
            (C8983 * C2796 - C8984 * C2792 - C8983 * C2797 + C26752 * C2801) *
                C26753 * C8982) *
               C1180 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C1179 -
           ((C8983 * C4244 - C8984 * C4242 - C8983 * C4245 + C26752 * C4248) *
                C26753 * C8982 +
            (C8983 * C1194 - C8984 * C1185 - C8983 * C1195 + C26752 * C1203) *
                C26753 * C8981) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C574 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C575 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C26605 * C576) *
              C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C574 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C575 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C8983 +
            (C9019 * C592 - C8981 * C662 + C9020 * C3891 - C8982 * C3933) *
                C26752) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
           (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
               C26752) *
              C26753 * C26605 * C26589 * C79 +
          ((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
           (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
               C26752) *
              C26753 * C26605 * C26589 * C80 +
          ((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
           (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
               C26752) *
              C26753 * C26605 * C26589 * C81 +
          ((C9019 * C90 - C8981 * C145 + C9020 * C1787 - C8982 * C1841) *
               C8983 +
           (C9019 * C99 - C8981 * C150 + C9020 * C1789 - C8982 * C1842) *
               C26752) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C1179 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C1180 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C8983 +
            (C8981 * C1264 - C9019 * C1193 + C8982 * C4302 - C9020 * C4247) *
                C26752) *
               C26753 * C1181) *
              C26589 * C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C1179 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C8983 +
            (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                C26752) *
               C26753 * C1180 +
           ((C9019 * C1185 - C8981 * C1259 + C9020 * C4242 - C8982 * C4301) *
                C8983 +
            (C9019 * C1195 - C8981 * C1265 + C9020 * C4245 - C8982 * C4303) *
                C26752) *
               C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexz[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C574 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C575 +
           (((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C26753 * C3968 - C198 * C3889) * C8983 +
             (C26753 * C3970 - C198 * C3893) * C26752) *
                C8982) *
               C26605 * C576) *
              C577 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C574 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C575 +
           (((C741 - C740) * C8983 + (C743 - C742) * C26752) * C8981 +
            ((C198 * C3888 - C26753 * C3969) * C8983 +
             (C198 * C3891 - C26753 * C3971) * C26752) *
                C8982) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C8983 +
            (C26753 * C204 - C198 * C93) * C26752) *
               C8981 +
           ((C26753 * C723 - C198 * C580) * C8983 +
            (C26753 * C729 - C198 * C588) * C26752) *
               C8982) *
              C26605 * C26589 * C79 +
          (((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
           ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
              C26605 * C26589 * C80 +
          (((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
           ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
              C26605 * C26589 * C81 +
          (((C219 - C218) * C8983 + (C221 - C220) * C26752) * C8981 +
           ((C198 * C1787 - C26753 * C1897) * C8983 +
            (C198 * C1789 - C26753 * C1898) * C26752) *
               C8982) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C1179 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C198 * C2791 - C26753 * C2945) * C8983 +
             (C198 * C2795 - C26753 * C2948) * C26752) *
                C8982) *
               C1180 +
           (((C26753 * C1328 - C198 * C1184) * C8983 +
             (C26753 * C1334 - C198 * C1193) * C26752) *
                C8981 +
            ((C26753 * C4354 - C198 * C4243) * C8983 +
             (C26753 * C4356 - C198 * C4247) * C26752) *
                C8982) *
               C1181) *
              C26589 * C577 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C1179 +
           (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
            ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
               C1180 +
           (((C1344 - C1343) * C8983 + (C1346 - C1345) * C26752) * C8981 +
            ((C198 * C4242 - C26753 * C4355) * C8983 +
             (C198 * C4245 - C26753 * C4357) * C26752) *
                C8982) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C9019 +
            (C26752 * C260 - C8983 * C255) * C8981 + (C9502 - C9503) * C9020 +
            (C9504 - C9505) * C8982) *
               C26753 * C26605 * C574 +
           ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
            (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
               C26753 * C26605 * C575 +
           ((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
            (C26752 * C3892 - C8983 * C3889) * C9020 +
            (C26752 * C4008 - C8983 * C4006) * C8982) *
               C26753 * C26605 * C576) *
              C577 +
          (((C8983 * C88 - C26752 * C94) * C9019 +
            (C8983 * C256 - C26752 * C261) * C8981 + (C9510 - C9511) * C9020 +
            (C9512 - C9513) * C8982) *
               C26753 * C26605 * C574 +
           ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
            (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
               C26753 * C26605 * C575 +
           ((C9515 - C9514) * C9019 + (C9517 - C9516) * C8981 +
            (C8983 * C3888 - C26752 * C3890) * C9020 +
            (C8983 * C4007 - C26752 * C4009) * C8982) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C26752 * C92 - C8983 * C87) * C9019 +
                               (C26752 * C260 - C8983 * C255) * C8981 +
                               (C26752 * C587 - C8983 * C580) * C9020 +
                               (C26752 * C799 - C8983 * C793) * C8982) *
                                  C26753 * C26605 * C26589 * C79 +
                              ((C8983 * C88 - C26752 * C94) * C9019 +
                               (C8983 * C256 - C26752 * C261) * C8981 +
                               (C8983 * C579 - C26752 * C585) * C9020 +
                               (C8983 * C794 - C26752 * C800) * C8982) *
                                  C26753 * C26605 * C26589 * C80 +
                              ((C26752 * C96 - C8983 * C89) * C9019 +
                               (C26752 * C262 - C8983 * C257) * C8981 +
                               (C26752 * C593 - C8983 * C583) * C9020 +
                               (C26752 * C803 - C8983 * C797) * C8982) *
                                  C26753 * C26605 * C26589 * C81 +
                              ((C8983 * C90 - C26752 * C98) * C9019 +
                               (C8983 * C258 - C26752 * C263) * C8981 +
                               (C8983 * C1787 - C26752 * C1788) * C9020 +
                               (C8983 * C1953 - C26752 * C1954) * C8982) *
                                  C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C9019 +
            (C26752 * C260 - C8983 * C255) * C8981 + (C9502 - C9503) * C9020 +
            (C9504 - C9505) * C8982) *
               C26753 * C1179 +
           ((C8983 * C1183 - C26752 * C1190) * C9019 +
            (C8983 * C1396 - C26752 * C1402) * C8981 +
            (C8983 * C2791 - C26752 * C2794) * C9020 +
            (C8983 * C3021 - C26752 * C3024) * C8982) *
               C26753 * C1180 +
           ((C26752 * C1192 - C8983 * C1184) * C9019 +
            (C26752 * C1404 - C8983 * C1398) * C8981 +
            (C26752 * C4246 - C8983 * C4243) * C9020 +
            (C26752 * C4410 - C8983 * C4408) * C8982) *
               C26753 * C1181) *
              C26589 * C577 +
          (((C8983 * C88 - C26752 * C94) * C9019 +
            (C8983 * C256 - C26752 * C261) * C8981 + (C9510 - C9511) * C9020 +
            (C9512 - C9513) * C8982) *
               C26753 * C1179 +
           ((C26752 * C1188 - C8983 * C1182) * C9019 +
            (C26752 * C1403 - C8983 * C1397) * C8981 +
            (C26752 * C2796 - C8983 * C2792) * C9020 +
            (C26752 * C3025 - C8983 * C3022) * C8982) *
               C26753 * C1180 +
           ((C8983 * C1185 - C26752 * C1194) * C9019 +
            (C8983 * C1399 - C26752 * C1405) * C8981 +
            (C8983 * C4242 - C26752 * C4244) * C9020 +
            (C8983 * C4409 - C26752 * C4411) * C8982) *
               C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[17] +=
        (-std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C574 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C575 +
           (C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C26605 * C576) *
              C577 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C575 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C574 -
           (C9020 * C3931 - C9124 * C3888 - C9020 * C4007 + C8982 * C4044 +
            C9019 * C656 - C9123 * C582 - C9019 * C796 + C8981 * C858) *
               C26752 * C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
           C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
              C26752 * C26753 * C26605 * C26589 * C79 -
          (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
           C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
              C26752 * C26753 * C26605 * C26589 * C80 +
          (C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
           C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
              C26752 * C26753 * C26605 * C26589 * C81 -
          (C9020 * C1841 - C9124 * C1787 - C9020 * C1953 + C8982 * C2005 +
           C9019 * C145 - C9123 * C90 - C9019 * C258 + C8981 * C303) *
              C26752 * C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C1179 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C1180 +
           (C9019 * C1258 - C9123 * C1184 - C9019 * C1398 + C8981 * C1460 +
            C9020 * C4300 - C9124 * C4243 - C9020 * C4408 + C8982 * C4463) *
               C26752 * C26753 * C1181) *
              C26589 * C577 +
          ((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
            C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
               C26752 * C26753 * C1180 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C1179 -
           (C9020 * C4301 - C9124 * C4242 - C9020 * C4409 + C8982 * C4462 +
            C9019 * C1259 - C9123 * C1185 - C9019 * C1399 + C8981 * C1461) *
               C26752 * C26753 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[17] += (-std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C574 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C575 +
                     ((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C26753 * C3968 - C198 * C3889) * C9020 +
                      (C26753 * C4080 - C198 * C4006) * C8982) *
                         C26752 * C26605 * C576) *
                        C577 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C574 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C575 +
                     ((C741 - C740) * C9019 + (C935 - C934) * C8981 +
                      (C198 * C3888 - C26753 * C3969) * C9020 +
                      (C198 * C4007 - C26753 * C4081) * C8982) *
                         C26752 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C26753 * C199 - C198 * C87) * C9019 +
                     (C26753 * C360 - C198 * C255) * C8981 +
                     (C26753 * C723 - C198 * C580) * C9020 +
                     (C26753 * C925 - C198 * C793) * C8982) *
                        C26752 * C26605 * C26589 * C79 +
                    ((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                     (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                        C26752 * C26605 * C26589 * C80 +
                    ((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                     (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                        C26752 * C26605 * C26589 * C81 +
                    ((C219 - C218) * C9019 + (C371 - C370) * C8981 +
                     (C198 * C1787 - C26753 * C1897) * C9020 +
                     (C198 * C1953 - C26753 * C2063) * C8982) *
                        C26752 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C1179 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C198 * C2791 - C26753 * C2945) * C9020 +
                      (C198 * C3021 - C26753 * C3169) * C8982) *
                         C26752 * C1180 +
                     ((C26753 * C1328 - C198 * C1184) * C9019 +
                      (C26753 * C1530 - C198 * C1398) * C8981 +
                      (C26753 * C4354 - C198 * C4243) * C9020 +
                      (C26753 * C4514 - C198 * C4408) * C8982) *
                         C26752 * C1181) *
                        C26589 * C577 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C1179 +
                     ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                      (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                         C26752 * C1180 +
                     ((C1344 - C1343) * C9019 + (C1538 - C1537) * C8981 +
                      (C198 * C4242 - C26753 * C4355) * C9020 +
                      (C198 * C4409 - C26753 * C4515) * C8982) *
                         C26752 * C1181) *
                        C26589 * C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[17] +=
        (-std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C574 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C575 +
           (((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C26752 * C3892 - C8983 * C3889) * C198 +
             (C26752 * C4118 - C8983 * C4116) * C26753) *
                C8982) *
               C26605 * C576) *
              C577 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C574 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C575 +
           (((C9515 - C9514) * C198 + (C9679 - C9678) * C26753) * C8981 +
            ((C8983 * C3888 - C26752 * C3890) * C198 +
             (C8983 * C4117 - C26752 * C4119) * C26753) *
                C8982) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26752 * C92 - C8983 * C87) * C198 +
                                (C26752 * C410 - C8983 * C405) * C26753) *
                                   C8981 +
                               ((C26752 * C587 - C8983 * C580) * C198 +
                                (C26752 * C991 - C8983 * C985) * C26753) *
                                   C8982) *
                                  C26605 * C26589 * C79 +
                              (((C8983 * C88 - C26752 * C94) * C198 +
                                (C8983 * C406 - C26752 * C411) * C26753) *
                                   C8981 +
                               ((C8983 * C579 - C26752 * C585) * C198 +
                                (C8983 * C986 - C26752 * C992) * C26753) *
                                   C8982) *
                                  C26605 * C26589 * C80 +
                              (((C26752 * C96 - C8983 * C89) * C198 +
                                (C26752 * C412 - C8983 * C407) * C26753) *
                                   C8981 +
                               ((C26752 * C593 - C8983 * C583) * C198 +
                                (C26752 * C995 - C8983 * C989) * C26753) *
                                   C8982) *
                                  C26605 * C26589 * C81 +
                              (((C8983 * C90 - C26752 * C98) * C198 +
                                (C8983 * C408 - C26752 * C413) * C26753) *
                                   C8981 +
                               ((C8983 * C1787 - C26752 * C1788) * C198 +
                                (C8983 * C2116 - C26752 * C2117) * C26753) *
                                   C8982) *
                                  C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C1179 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C8983 * C2791 - C26752 * C2794) * C198 +
             (C8983 * C3240 - C26752 * C3243) * C26753) *
                C8982) *
               C1180 +
           (((C26752 * C1192 - C8983 * C1184) * C198 +
             (C26752 * C1596 - C8983 * C1590) * C26753) *
                C8981 +
            ((C26752 * C4246 - C8983 * C4243) * C198 +
             (C26752 * C4568 - C8983 * C4566) * C26753) *
                C8982) *
               C1181) *
              C26589 * C577 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C1179 +
           (((C26752 * C1188 - C8983 * C1182) * C198 +
             (C26752 * C1595 - C8983 * C1589) * C26753) *
                C8981 +
            ((C26752 * C2796 - C8983 * C2792) * C198 +
             (C26752 * C3244 - C8983 * C3241) * C26753) *
                C8982) *
               C1180 +
           (((C8983 * C1185 - C26752 * C1194) * C198 +
             (C8983 * C1591 - C26752 * C1597) * C26753) *
                C8981 +
            ((C8983 * C4242 - C26752 * C4244) * C198 +
             (C8983 * C4567 - C26752 * C4569) * C26753) *
                C8982) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezy[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C574 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C575 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C26605 * C576) *
              C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C574 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C575 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C198 +
            (C9019 * C988 - C8981 * C1050 + C9020 * C4117 - C8982 * C4155) *
                C26753) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
           (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
               C26753) *
              C26752 * C26605 * C26589 * C79 +
          ((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
           (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
               C26753) *
              C26752 * C26605 * C26589 * C80 +
          ((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
           (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
               C26753) *
              C26752 * C26605 * C26589 * C81 +
          ((C9019 * C90 - C8981 * C145 + C9020 * C1787 - C8982 * C1841) * C198 +
           (C9019 * C408 - C8981 * C452 + C9020 * C2116 - C8982 * C2168) *
               C26753) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C1179 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C1180 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C198 +
            (C8981 * C1652 - C9019 * C1590 + C8982 * C4620 - C9020 * C4566) *
                C26753) *
               C26752 * C1181) *
              C26589 * C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C1179 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C198 +
            (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                C26753) *
               C26752 * C1180 +
           ((C9019 * C1185 - C8981 * C1259 + C9020 * C4242 - C8982 * C4301) *
                C198 +
            (C9019 * C1591 - C8981 * C1653 + C9020 * C4567 - C8982 * C4621) *
                C26753) *
               C26752 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezz[17] +=
        (-std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C574 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C575 +
           (C9793 * C8981 +
            (C198 * C3968 - C494 * C3889 - C198 * C4116 + C26753 * C4191) *
                C8982) *
               C26752 * C26605 * C576) *
              C577 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C575 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C574 -
           ((C198 * C3969 - C494 * C3888 - C198 * C4117 + C26753 * C4190) *
                C8982 +
            C1127 * C8981) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
           (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) * C8982) *
              C26752 * C26605 * C26589 * C79 -
          (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C26589 * C80 +
          (C520 * C8981 + C2229 * C8982) * C26752 * C26605 * C26589 * C81 -
          ((C198 * C1897 - C494 * C1787 - C198 * C2116 + C26753 * C2221) *
               C8982 +
           C521 * C8981) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C1179 -
           ((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C1180 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C8981 +
            (C198 * C4354 - C494 * C4243 - C198 * C4566 + C26753 * C4673) *
                C8982) *
               C26752 * C1181) *
              C26589 * C577 +
          ((C1729 * C8981 + C3393 * C8982) * C26752 * C1180 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C1179 -
           ((C198 * C4355 - C494 * C4242 - C198 * C4567 + C26753 * C4672) *
                C8982 +
            C1730 * C8981) *
               C26752 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26718 -
           ((C8983 * C2794 - C8984 * C2791 - C8983 * C2795 + C26752 * C2800) *
                C26753 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C26589 * C26743 +
          (((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C26753 * C8981 +
            (C8983 * C2796 - C8984 * C2792 - C8983 * C2797 + C26752 * C2801) *
                C26753 * C8982) *
               C26669 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26718) *
              C26589 * C26744 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C26718 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C26753 * C8982 +
            (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
                C26753 * C8981) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26718 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C26589 * C26743 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26718 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C8983 +
            (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                C26752) *
               C26753 * C26669) *
              C26589 * C26744 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C26718 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C8983 +
            (C9019 * C1197 - C8981 * C1266 + C9020 * C2799 - C8982 * C2874) *
                C26752) *
               C26753 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26718 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C198 * C2791 - C26753 * C2945) * C8983 +
             (C198 * C2795 - C26753 * C2948) * C26752) *
                C8982) *
               C26669) *
              C26589 * C26743 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26718 +
           (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
            ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
               C26669) *
              C26589 * C26744 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C26718 +
           (((C2396 - C2395) * C8983 + (C2398 - C2397) * C26752) * C8981 +
            ((C198 * C2793 - C26753 * C2947) * C8983 +
             (C198 * C2799 - C26753 * C2950) * C26752) *
                C8982) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26718 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C8983 * C2791 - C26752 * C2794) * C9020 +
                      (C8983 * C3021 - C26752 * C3024) * C8982) *
                         C26753 * C26669) *
                        C26589 * C26743 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26718 +
                     ((C26752 * C1188 - C8983 * C1182) * C9019 +
                      (C26752 * C1403 - C8983 * C1397) * C8981 +
                      (C26752 * C2796 - C8983 * C2792) * C9020 +
                      (C26752 * C3025 - C8983 * C3022) * C8982) *
                         C26753 * C26669) *
                        C26589 * C26744 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C26718 +
                     ((C8983 * C1186 - C26752 * C1196) * C9019 +
                      (C8983 * C1400 - C26752 * C1406) * C8981 +
                      (C8983 * C2793 - C26752 * C2798) * C9020 +
                      (C8983 * C3023 - C26752 * C3026) * C8982) *
                         C26753 * C26669) *
                        C26589 * C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26718 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C26589 * C26743 +
          ((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
            C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
               C26752 * C26753 * C26669 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26718) *
              C26589 * C26744 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C26718 -
           (C9020 * C2871 - C9124 * C2793 - C9020 * C3023 + C8982 * C3095 +
            C9019 * C1260 - C9123 * C1186 - C9019 * C1400 + C8981 * C1462) *
               C26752 * C26753 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[18] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26718 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C198 * C2791 - C26753 * C2945) * C9020 +
                      (C198 * C3021 - C26753 * C3169) * C8982) *
                         C26752 * C26669) *
                        C26589 * C26743 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26718 +
                     ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                      (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                         C26752 * C26669) *
                        C26589 * C26744 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C26718 +
                     ((C2396 - C2395) * C9019 + (C2561 - C2560) * C8981 +
                      (C198 * C2793 - C26753 * C2947) * C9020 +
                      (C198 * C3023 - C26753 * C3171) * C8982) *
                         C26752 * C26669) *
                        C26589 * C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26718 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C8983 * C2791 - C26752 * C2794) * C198 +
             (C8983 * C3240 - C26752 * C3243) * C26753) *
                C8982) *
               C26669) *
              C26589 * C26743 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26718 +
           (((C26752 * C1188 - C8983 * C1182) * C198 +
             (C26752 * C1595 - C8983 * C1589) * C26753) *
                C8981 +
            ((C26752 * C2796 - C8983 * C2792) * C198 +
             (C26752 * C3244 - C8983 * C3241) * C26753) *
                C8982) *
               C26669) *
              C26589 * C26744 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C26718 +
           (((C8983 * C1186 - C26752 * C1196) * C198 +
             (C8983 * C1592 - C26752 * C1598) * C26753) *
                C8981 +
            ((C8983 * C2793 - C26752 * C2798) * C198 +
             (C8983 * C3242 - C26752 * C3245) * C26753) *
                C8982) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezy[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26718 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C26589 * C26743 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26718 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C198 +
            (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                C26753) *
               C26752 * C26669) *
              C26589 * C26744 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C26718 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C198 +
            (C9019 * C1592 - C8981 * C1654 + C9020 * C3242 - C8982 * C3314) *
                C26753) *
               C26752 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezz[18] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26718 -
           ((C198 * C2945 - C494 * C2791 - C198 * C3240 + C26753 * C3383) *
                C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C26589 * C26743 +
          ((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26718) *
              C26589 * C26744 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C26718 -
           ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                C8982 +
            C2724 * C8981) *
               C26752 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
               C8981 +
           (C8983 * C587 - C8984 * C580 - C8983 * C588 + C26752 * C598) *
               C26753 * C8982) *
              C26605 * C26589 * C79 -
          ((C8983 * C585 - C8984 * C579 - C8983 * C586 + C26752 * C597) *
               C26753 * C8982 +
           (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
               C8981) *
              C26605 * C26589 * C80 +
          ((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
               C8981 +
           (C8983 * C593 - C8984 * C583 - C8983 * C594 + C26752 * C601) *
               C26753 * C8982) *
              C26605 * C26589 * C81 -
          ((C8983 * C1788 - C8984 * C1787 - C8983 * C1789 + C26752 * C1790) *
               C26753 * C8982 +
           (C8983 * C98 - C8984 * C90 - C8983 * C99 + C26752 * C105) * C26753 *
               C8981) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C574 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C575 +
           (C9341 * C8981 +
            (C8983 * C3892 - C8984 * C3889 - C8983 * C3893 + C26752 * C3895) *
                C26753 * C8982) *
               C26605 * C576) *
              C577 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C575 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C574 -
           ((C8983 * C3890 - C8984 * C3888 - C8983 * C3891 + C26752 * C3894) *
                C26753 * C8982 +
            C9343 * C8981) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
           (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
               C26752) *
              C26753 * C26605 * C26589 * C79 +
          ((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
           (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
               C26752) *
              C26753 * C26605 * C26589 * C80 +
          ((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
           (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
               C26752) *
              C26753 * C26605 * C26589 * C81 +
          ((C9019 * C90 - C8981 * C145 + C9020 * C1787 - C8982 * C1841) *
               C8983 +
           (C9019 * C99 - C8981 * C150 + C9020 * C1789 - C8982 * C1842) *
               C26752) *
              C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C574 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C575 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C26605 * C576) *
              C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C574 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C575 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C8983 +
            (C9019 * C592 - C8981 * C662 + C9020 * C3891 - C8982 * C3933) *
                C26752) *
               C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C8983 +
            (C26753 * C204 - C198 * C93) * C26752) *
               C8981 +
           ((C26753 * C723 - C198 * C580) * C8983 +
            (C26753 * C729 - C198 * C588) * C26752) *
               C8982) *
              C26605 * C26589 * C79 +
          (((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
           ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
              C26605 * C26589 * C80 +
          (((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
           ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
              C26605 * C26589 * C81 +
          (((C219 - C218) * C8983 + (C221 - C220) * C26752) * C8981 +
           ((C198 * C1787 - C26753 * C1897) * C8983 +
            (C198 * C1789 - C26753 * C1898) * C26752) *
               C8982) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C574 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C575 +
           (((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C26753 * C3968 - C198 * C3889) * C8983 +
             (C26753 * C3970 - C198 * C3893) * C26752) *
                C8982) *
               C26605 * C576) *
              C577 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C574 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C575 +
           (((C741 - C740) * C8983 + (C743 - C742) * C26752) * C8981 +
            ((C198 * C3888 - C26753 * C3969) * C8983 +
             (C198 * C3891 - C26753 * C3971) * C26752) *
                C8982) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[19] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C9019 +
                     (C26752 * C260 - C8983 * C255) * C8981 +
                     (C26752 * C587 - C8983 * C580) * C9020 +
                     (C26752 * C799 - C8983 * C793) * C8982) *
                        C26753 * C26605 * C26589 * C79 +
                    ((C8983 * C88 - C26752 * C94) * C9019 +
                     (C8983 * C256 - C26752 * C261) * C8981 +
                     (C8983 * C579 - C26752 * C585) * C9020 +
                     (C8983 * C794 - C26752 * C800) * C8982) *
                        C26753 * C26605 * C26589 * C80 +
                    ((C26752 * C96 - C8983 * C89) * C9019 +
                     (C26752 * C262 - C8983 * C257) * C8981 +
                     (C26752 * C593 - C8983 * C583) * C9020 +
                     (C26752 * C803 - C8983 * C797) * C8982) *
                        C26753 * C26605 * C26589 * C81 +
                    ((C8983 * C90 - C26752 * C98) * C9019 +
                     (C8983 * C258 - C26752 * C263) * C8981 +
                     (C8983 * C1787 - C26752 * C1788) * C9020 +
                     (C8983 * C1953 - C26752 * C1954) * C8982) *
                        C26753 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26605 * C574 +
                     ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26605 * C575 +
                     ((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                      (C26752 * C3892 - C8983 * C3889) * C9020 +
                      (C26752 * C4008 - C8983 * C4006) * C8982) *
                         C26753 * C26605 * C576) *
                        C577 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26605 * C574 +
                     ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                      (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                         C26753 * C26605 * C575 +
                     ((C9515 - C9514) * C9019 + (C9517 - C9516) * C8981 +
                      (C8983 * C3888 - C26752 * C3890) * C9020 +
                      (C8983 * C4007 - C26752 * C4009) * C8982) *
                         C26753 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
           C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
              C26752 * C26753 * C26605 * C26589 * C79 -
          (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
           C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
              C26752 * C26753 * C26605 * C26589 * C80 +
          (C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
           C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
              C26752 * C26753 * C26605 * C26589 * C81 -
          (C9020 * C1841 - C9124 * C1787 - C9020 * C1953 + C8982 * C2005 +
           C9019 * C145 - C9123 * C90 - C9019 * C258 + C8981 * C303) *
              C26752 * C26753 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C574 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C575 +
           (C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C26605 * C576) *
              C577 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C575 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C574 -
           (C9020 * C3931 - C9124 * C3888 - C9020 * C4007 + C8982 * C4044 +
            C9019 * C656 - C9123 * C582 - C9019 * C796 + C8981 * C858) *
               C26752 * C26753 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[19] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26753 * C199 - C198 * C87) * C9019 +
                     (C26753 * C360 - C198 * C255) * C8981 +
                     (C26753 * C723 - C198 * C580) * C9020 +
                     (C26753 * C925 - C198 * C793) * C8982) *
                        C26752 * C26605 * C26589 * C79 +
                    ((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                     (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                        C26752 * C26605 * C26589 * C80 +
                    ((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                     (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                        C26752 * C26605 * C26589 * C81 +
                    ((C219 - C218) * C9019 + (C371 - C370) * C8981 +
                     (C198 * C1787 - C26753 * C1897) * C9020 +
                     (C198 * C1953 - C26753 * C2063) * C8982) *
                        C26752 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C574 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C575 +
                     ((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C26753 * C3968 - C198 * C3889) * C9020 +
                      (C26753 * C4080 - C198 * C4006) * C8982) *
                         C26752 * C26605 * C576) *
                        C577 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C574 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C575 +
                     ((C741 - C740) * C9019 + (C935 - C934) * C8981 +
                      (C198 * C3888 - C26753 * C3969) * C9020 +
                      (C198 * C4007 - C26753 * C4081) * C8982) *
                         C26752 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eezx[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C198 +
            (C26752 * C410 - C8983 * C405) * C26753) *
               C8981 +
           ((C26752 * C587 - C8983 * C580) * C198 +
            (C26752 * C991 - C8983 * C985) * C26753) *
               C8982) *
              C26605 * C26589 * C79 +
          (((C8983 * C88 - C26752 * C94) * C198 +
            (C8983 * C406 - C26752 * C411) * C26753) *
               C8981 +
           ((C8983 * C579 - C26752 * C585) * C198 +
            (C8983 * C986 - C26752 * C992) * C26753) *
               C8982) *
              C26605 * C26589 * C80 +
          (((C26752 * C96 - C8983 * C89) * C198 +
            (C26752 * C412 - C8983 * C407) * C26753) *
               C8981 +
           ((C26752 * C593 - C8983 * C583) * C198 +
            (C26752 * C995 - C8983 * C989) * C26753) *
               C8982) *
              C26605 * C26589 * C81 +
          (((C8983 * C90 - C26752 * C98) * C198 +
            (C8983 * C408 - C26752 * C413) * C26753) *
               C8981 +
           ((C8983 * C1787 - C26752 * C1788) * C198 +
            (C8983 * C2116 - C26752 * C2117) * C26753) *
               C8982) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C574 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C575 +
           (((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C26752 * C3892 - C8983 * C3889) * C198 +
             (C26752 * C4118 - C8983 * C4116) * C26753) *
                C8982) *
               C26605 * C576) *
              C577 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C574 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C575 +
           (((C9515 - C9514) * C198 + (C9679 - C9678) * C26753) * C8981 +
            ((C8983 * C3888 - C26752 * C3890) * C198 +
             (C8983 * C4117 - C26752 * C4119) * C26753) *
                C8982) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezy[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
           (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
               C26753) *
              C26752 * C26605 * C26589 * C79 +
          ((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
           (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
               C26753) *
              C26752 * C26605 * C26589 * C80 +
          ((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
           (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
               C26753) *
              C26752 * C26605 * C26589 * C81 +
          ((C9019 * C90 - C8981 * C145 + C9020 * C1787 - C8982 * C1841) * C198 +
           (C9019 * C408 - C8981 * C452 + C9020 * C2116 - C8982 * C2168) *
               C26753) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C574 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C575 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C26605 * C576) *
              C577 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C574 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C575 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C198 +
            (C9019 * C988 - C8981 * C1050 + C9020 * C4117 - C8982 * C4155) *
                C26753) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezz[19] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
           (C198 * C723 - C494 * C580 - C198 * C985 + C26753 * C1108) * C8982) *
              C26752 * C26605 * C26589 * C79 -
          (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C26589 * C80 +
          (C520 * C8981 + C2229 * C8982) * C26752 * C26605 * C26589 * C81 -
          ((C198 * C1897 - C494 * C1787 - C198 * C2116 + C26753 * C2221) *
               C8982 +
           C521 * C8981) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C574 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C575 +
           (C9793 * C8981 +
            (C198 * C3968 - C494 * C3889 - C198 * C4116 + C26753 * C4191) *
                C8982) *
               C26752 * C26605 * C576) *
              C577 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C575 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C574 -
           ((C198 * C3969 - C494 * C3888 - C198 * C4117 + C26753 * C4190) *
                C8982 +
            C1127 * C8981) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C26745 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C26746 +
           (C9341 * C8981 + C12288 * C8982) * C26605 * C4726) *
              C26709 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C26746 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C26745 -
           ((C8983 * C3890 - C8984 * C3888 - C8983 * C3891 + C26752 * C3894) *
                C26753 * C8982 +
            C9343 * C8981) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C26745 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C26746 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C26605 * C4726) *
              C26709 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C26745 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C26746 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C8983 +
            (C9019 * C592 - C8981 * C662 + C9020 * C3891 - C8982 * C3933) *
                C26752) *
               C26753 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C26745 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C26746 +
           (((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
               C26605 * C4726) *
              C26709 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C26745 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C26746 +
           (((C741 - C740) * C8983 + (C743 - C742) * C26752) * C8981 +
            ((C198 * C3888 - C26753 * C3969) * C8983 +
             (C198 * C3891 - C26753 * C3971) * C26752) *
                C8982) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26605 * C26745 +
                     ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26605 * C26746 +
                     ((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                      (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                         C26753 * C26605 * C4726) *
                        C26709 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26605 * C26745 +
                     ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                      (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                         C26753 * C26605 * C26746 +
                     ((C9515 - C9514) * C9019 + (C9517 - C9516) * C8981 +
                      (C8983 * C3888 - C26752 * C3890) * C9020 +
                      (C8983 * C4007 - C26752 * C4009) * C8982) *
                         C26753 * C26605 * C4726) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C26745 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C26746 +
           (C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C26605 * C4726) *
              C26709 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C26746 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C26745 -
           (C9020 * C3931 - C9124 * C3888 - C9020 * C4007 + C8982 * C4044 +
            C9019 * C656 - C9123 * C582 - C9019 * C796 + C8981 * C858) *
               C26752 * C26753 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[20] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C26745 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C26746 +
                     ((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                         C26752 * C26605 * C4726) *
                        C26709 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C26745 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C26746 +
                     ((C741 - C740) * C9019 + (C935 - C934) * C8981 +
                      (C198 * C3888 - C26753 * C3969) * C9020 +
                      (C198 * C4007 - C26753 * C4081) * C8982) *
                         C26752 * C26605 * C4726) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C26745 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C26746 +
           (((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
               C26605 * C4726) *
              C26709 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C26745 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C26746 +
           (((C9515 - C9514) * C198 + (C9679 - C9678) * C26753) * C8981 +
            ((C8983 * C3888 - C26752 * C3890) * C198 +
             (C8983 * C4117 - C26752 * C4119) * C26753) *
                C8982) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C26745 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C26746 +
           ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C26605 * C4726) *
              C26709 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C26745 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C26746 +
           ((C9019 * C582 - C8981 * C656 + C9020 * C3888 - C8982 * C3931) *
                C198 +
            (C9019 * C988 - C8981 * C1050 + C9020 * C4117 - C8982 * C4155) *
                C26753) *
               C26752 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[20] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C26745 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C26746 +
           (C9793 * C8981 + C12591 * C8982) * C26752 * C26605 * C4726) *
              C26709 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C26746 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C26745 -
           ((C198 * C3969 - C494 * C3888 - C198 * C4117 + C26753 * C4190) *
                C8982 +
            C1127 * C8981) *
               C26752 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26718 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C26745 +
          ((C11238 * C8981 + C14190 * C8982) * C26669 -
           (C9341 * C8982 + C9340 * C8981) * C26718) *
              C26746 +
          ((C9341 * C8981 + C12288 * C8982) * C26718 -
           ((C8983 * C14179 - C8984 * C14178 - C8983 * C14180 +
             C26752 * C14181) *
                C26753 * C8982 +
            C14190 * C8981) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26718 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C26745 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26718 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C8983 +
            (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                C26752) *
               C26753 * C26669) *
              C26746 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C26718 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C8983 +
            (C9019 * C5778 - C8981 * C5833 + C9020 * C14180 - C8982 * C14241) *
                C26752) *
               C26753 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26718 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26669) *
              C26745 +
          ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26718 +
           (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
            ((C14295 - C14296) * C8983 + (C14297 - C14298) * C26752) * C8982) *
               C26669) *
              C26746 +
          ((((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
               C26718 +
           (((C14296 - C14295) * C8983 + (C14298 - C14297) * C26752) * C8981 +
            ((C198 * C14178 - C26753 * C14292) * C8983 +
             (C198 * C14180 - C26753 * C14293) * C26752) *
                C8982) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyx[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26718 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26669) *
                        C26745 +
                    (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26718 +
                     ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                      (C14351 - C14352) * C9020 + (C14353 - C14354) * C8982) *
                         C26753 * C26669) *
                        C26746 +
                    (((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                      (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                         C26753 * C26718 +
                     ((C14352 - C14351) * C9019 + (C14354 - C14353) * C8981 +
                      (C8983 * C14178 - C26752 * C14179) * C9020 +
                      (C8983 * C14348 - C26752 * C14349) * C8982) *
                         C26753 * C26669) *
                        C4726) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26718 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C26745 +
          ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
            C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
               C26752 * C26753 * C26669 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26718) *
              C26746 +
          ((C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C26718 -
           (C9020 * C14240 - C9124 * C14178 - C9020 * C14348 + C8982 * C14404 +
            C9019 * C5831 - C9123 * C5774 - C9019 * C5939 + C8981 * C5994) *
               C26752 * C26753 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[21] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26718 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26669) *
                        C26745 +
                    (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26718 +
                     ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                      (C14295 - C14296) * C9020 + (C14457 - C14458) * C8982) *
                         C26752 * C26669) *
                        C26746 +
                    (((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                         C26752 * C26718 +
                     ((C14296 - C14295) * C9019 + (C14458 - C14457) * C8981 +
                      (C198 * C14178 - C26753 * C14292) * C9020 +
                      (C198 * C14348 - C26753 * C14455) * C8982) *
                         C26752 * C26669) *
                        C4726) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezx[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26718 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26669) *
              C26745 +
          ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26718 +
           (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
            ((C14351 - C14352) * C198 + (C14511 - C14512) * C26753) * C8982) *
               C26669) *
              C26746 +
          ((((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
               C26718 +
           (((C14352 - C14351) * C198 + (C14512 - C14511) * C26753) * C8981 +
            ((C8983 * C14178 - C26752 * C14179) * C198 +
             (C8983 * C14508 - C26752 * C14509) * C26753) *
                C8982) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezy[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26718 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C26745 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26718 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C198 +
            (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                C26753) *
               C26752 * C26669) *
              C26746 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C26718 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C198 +
            (C9019 * C6097 - C8981 * C6151 + C9020 * C14508 - C8982 * C14562) *
                C26753) *
               C26752 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezz[21] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26718 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C26745 +
          ((C11792 * C8981 + C14621 * C8982) * C26752 * C26669 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26718) *
              C26746 +
          ((C9793 * C8981 + C12591 * C8982) * C26752 * C26718 -
           ((C198 * C14292 - C494 * C14178 - C198 * C14508 + C26753 * C14613) *
                C8982 +
            C14621 * C8981) *
               C26752 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[22] +=
        (-std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
               C8981 +
           C9340 * C8982) *
              C26605 * C3883 -
          (C9341 * C8982 + C9340 * C8981) * C26605 * C3884 +
          (C9341 * C8981 + C12288 * C8982) * C26605 * C3885 -
          ((C8983 * C12277 - C8984 * C12276 - C8983 * C12278 +
            C26752 * C12279) *
               C26753 * C8982 +
           C12288 * C8981) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C3444 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C26641) *
              C3446 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C26641 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C3444) *
              C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C26605 * C3444 -
           ((C8983 * C595 - C8984 * C584 - C8983 * C596 + C26752 * C602) *
                C26753 * C8982 +
            C10301 * C8981) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C1179 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C1180 +
           ((C8983 * C1192 - C8984 * C1184 - C8983 * C1193 + C26752 * C1202) *
                C26753 * C8981 +
            C12653 * C8982) *
               C1181) *
              C3444 +
          ((C11238 * C8981 +
            (C8983 * C5777 - C8984 * C5774 - C8983 * C5778 + C26752 * C5780) *
                C26753 * C8982) *
               C1180 -
           (C9341 * C8982 + C9340 * C8981) * C1179 -
           ((C8983 * C12642 - C8984 * C12641 - C8983 * C12643 +
             C26752 * C12644) *
                C26753 * C8982 +
            C12653 * C8981) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
           (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
               C26752) *
              C26753 * C26605 * C3883 +
          ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C8983 +
           (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
               C26752) *
              C26753 * C26605 * C3884 +
          ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
               C8983 +
           (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
               C26752) *
              C26753 * C26605 * C3885 +
          ((C9019 * C3889 - C8981 * C3930 + C9020 * C12276 - C8982 * C12322) *
               C8983 +
           (C9019 * C3893 - C8981 * C3932 + C9020 * C12278 - C8982 * C12323) *
               C26752) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) *
                C8983 +
            (C9019 * C594 - C8981 * C663 + C9020 * C596 - C8982 * C664) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C1179 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C1180 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C8983 +
            (C8981 * C1264 - C9019 * C1193 + C8982 * C4302 - C9020 * C4247) *
                C26752) *
               C26753 * C1181) *
              C3444 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C1179 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C8983 +
            (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                C26752) *
               C26753 * C1180 +
           ((C9019 * C4243 - C8981 * C4300 + C9020 * C12641 - C8982 * C12703) *
                C8983 +
            (C9019 * C4247 - C8981 * C4302 + C9020 * C12643 - C8982 * C12704) *
                C26752) *
               C26753 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C8983 +
            (C26753 * C204 - C198 * C93) * C26752) *
               C8981 +
           ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
              C26605 * C3883 +
          (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
           ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
              C26605 * C3884 +
          (((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
           ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
              C26605 * C3885 +
          (((C12362 - C12361) * C8983 + (C12364 - C12363) * C26752) * C8981 +
           ((C198 * C12276 - C26753 * C12358) * C8983 +
            (C198 * C12278 - C26753 * C12359) * C26752) *
               C8982) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C3444 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C26641) *
              C3446 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C3444 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C26641) *
              C3447 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C26605 * C3444 +
           (((C1901 - C1900) * C8983 + (C1903 - C1902) * C26752) * C8981 +
            ((C198 * C584 - C26753 * C728) * C8983 +
             (C198 * C596 - C26753 * C734) * C26752) *
                C8982) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C1179 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C1180 +
           (((C26753 * C1328 - C198 * C1184) * C8983 +
             (C26753 * C1334 - C198 * C1193) * C26752) *
                C8981 +
            ((C12758 - C12759) * C8983 + (C12760 - C12761) * C26752) * C8982) *
               C1181) *
              C3444 +
          ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C1179 +
           (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
            ((C26753 * C5885 - C198 * C5774) * C8983 +
             (C26753 * C5887 - C198 * C5778) * C26752) *
                C8982) *
               C1180 +
           (((C12759 - C12758) * C8983 + (C12761 - C12760) * C26752) * C8981 +
            ((C198 * C12641 - C26753 * C12755) * C8983 +
             (C198 * C12643 - C26753 * C12756) * C26752) *
                C8982) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[22] += (-std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C9019 +
                     (C26752 * C260 - C8983 * C255) * C8981 +
                     (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                        C26753 * C26605 * C3883 +
                    ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                     (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                        C26753 * C26605 * C3884 +
                    ((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                     (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                        C26753 * C26605 * C3885 +
                    ((C12402 - C12401) * C9019 + (C12404 - C12403) * C8981 +
                     (C8983 * C12276 - C26752 * C12277) * C9020 +
                     (C8983 * C12398 - C26752 * C12399) * C8982) *
                        C26753 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3446 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                      (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3447 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C10453 - C10452) * C9019 + (C10455 - C10454) * C8981 +
                      (C8983 * C584 - C26752 * C595) * C9020 +
                      (C8983 * C798 - C26752 * C804) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C1179 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C1180 +
                     ((C26752 * C1192 - C8983 * C1184) * C9019 +
                      (C26752 * C1404 - C8983 * C1398) * C8981 +
                      (C12814 - C12815) * C9020 + (C12816 - C12817) * C8982) *
                         C26753 * C1181) *
                        C3444 +
                    (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C1179 +
                     ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                      (C26752 * C5777 - C8983 * C5774) * C9020 +
                      (C26752 * C5941 - C8983 * C5939) * C8982) *
                         C26753 * C1180 +
                     ((C12815 - C12814) * C9019 + (C12817 - C12816) * C8981 +
                      (C8983 * C12641 - C26752 * C12642) * C9020 +
                      (C8983 * C12811 - C26752 * C12812) * C8982) *
                         C26753 * C1181) *
                        C26641) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[22] +=
        (-std::pow(Pi, 2.5) *
         ((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
           C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
              C26752 * C26753 * C26605 * C3883 -
          (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
           C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
              C26752 * C26753 * C26605 * C3884 +
          (C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
           C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
              C26752 * C26753 * C26605 * C3885 -
          (C9020 * C12322 - C9124 * C12276 - C9020 * C12398 + C8982 * C12438 +
           C9019 * C3930 - C9123 * C3889 - C9019 * C4006 + C8981 * C4045) *
              C26752 * C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C3444 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C26641) *
              C3446 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C26641 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C3444) *
              C3447 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C26605 * C3444 -
           (C9020 * C658 - C9124 * C584 - C9020 * C798 + C8982 * C860 +
            C9019 * C657 - C9123 * C583 - C9019 * C797 + C8981 * C859) *
               C26752 * C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C1179 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C1180 +
           (C9019 * C1258 - C9123 * C1184 - C9019 * C1398 + C8981 * C1460 +
            C9020 * C4300 - C9124 * C4243 - C9020 * C4408 + C8982 * C4463) *
               C26752 * C26753 * C1181) *
              C3444 +
          ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
            C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
               C26752 * C26753 * C1180 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C1179 -
           (C9020 * C12703 - C9124 * C12641 - C9020 * C12811 + C8982 * C12867 +
            C9019 * C4300 - C9123 * C4243 - C9019 * C4408 + C8981 * C4463) *
               C26752 * C26753 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[22] += (-std::pow(Pi, 2.5) *
                   (((C26753 * C199 - C198 * C87) * C9019 +
                     (C26753 * C360 - C198 * C255) * C8981 +
                     (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                        C26752 * C26605 * C3883 +
                    ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                     (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                        C26752 * C26605 * C3884 +
                    ((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                     (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                        C26752 * C26605 * C3885 +
                    ((C12362 - C12361) * C9019 + (C12476 - C12475) * C8981 +
                     (C198 * C12276 - C26753 * C12358) * C9020 +
                     (C198 * C12398 - C26753 * C12473) * C8982) *
                        C26752 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3446 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3447 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C1901 - C1900) * C9019 + (C2066 - C2065) * C8981 +
                      (C198 * C584 - C26753 * C728) * C9020 +
                      (C198 * C798 - C26753 * C930) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C1179 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C1180 +
                     ((C26753 * C1328 - C198 * C1184) * C9019 +
                      (C26753 * C1530 - C198 * C1398) * C8981 +
                      (C12758 - C12759) * C9020 + (C12920 - C12921) * C8982) *
                         C26752 * C1181) *
                        C3444 +
                    (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C1179 +
                     ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                      (C26753 * C5885 - C198 * C5774) * C9020 +
                      (C26753 * C6045 - C198 * C5939) * C8982) *
                         C26752 * C1180 +
                     ((C12759 - C12758) * C9019 + (C12921 - C12920) * C8981 +
                      (C198 * C12641 - C26753 * C12755) * C9020 +
                      (C198 * C12811 - C26753 * C12918) * C8982) *
                         C26752 * C1181) *
                        C26641) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezx[22] +=
        (-std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C198 +
            (C26752 * C410 - C8983 * C405) * C26753) *
               C8981 +
           ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
              C26605 * C3883 +
          (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
           ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
              C26605 * C3884 +
          (((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
           ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
              C26605 * C3885 +
          (((C12402 - C12401) * C198 + (C12514 - C12513) * C26753) * C8981 +
           ((C8983 * C12276 - C26752 * C12277) * C198 +
            (C8983 * C12510 - C26752 * C12511) * C26753) *
               C8982) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C3444 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C26641) *
              C3446 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C3444 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C26641) *
              C3447 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C26605 * C3444 +
           (((C10453 - C10452) * C198 + (C10607 - C10606) * C26753) * C8981 +
            ((C8983 * C584 - C26752 * C595) * C198 +
             (C8983 * C990 - C26752 * C996) * C26753) *
                C8982) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C1179 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C1180 +
           (((C26752 * C1192 - C8983 * C1184) * C198 +
             (C26752 * C1596 - C8983 * C1590) * C26753) *
                C8981 +
            ((C12814 - C12815) * C198 + (C12974 - C12975) * C26753) * C8982) *
               C1181) *
              C3444 +
          ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C1179 +
           (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
            ((C26752 * C5777 - C8983 * C5774) * C198 +
             (C26752 * C6099 - C8983 * C6097) * C26753) *
                C8982) *
               C1180 +
           (((C12815 - C12814) * C198 + (C12975 - C12974) * C26753) * C8981 +
            ((C8983 * C12641 - C26752 * C12642) * C198 +
             (C8983 * C12971 - C26752 * C12972) * C26753) *
                C8982) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[22] +=
        (-std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
           (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
               C26753) *
              C26752 * C26605 * C3883 +
          ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
           (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
               C26753) *
              C26752 * C26605 * C3884 +
          ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
               C198 +
           (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
               C26753) *
              C26752 * C26605 * C3885 +
          ((C9019 * C3889 - C8981 * C3930 + C9020 * C12276 - C8982 * C12322) *
               C198 +
           (C9019 * C4116 - C8981 * C4154 + C9020 * C12510 - C8982 * C12548) *
               C26753) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) * C198 +
            (C9019 * C989 - C8981 * C1051 + C9020 * C990 - C8982 * C1052) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C1179 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C1180 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C198 +
            (C8981 * C1652 - C9019 * C1590 + C8982 * C4620 - C9020 * C4566) *
                C26753) *
               C26752 * C1181) *
              C3444 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C1179 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C198 +
            (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                C26753) *
               C26752 * C1180 +
           ((C9019 * C4243 - C8981 * C4300 + C9020 * C12641 - C8982 * C12703) *
                C198 +
            (C9019 * C4566 - C8981 * C4620 + C9020 * C12971 - C8982 * C13025) *
                C26753) *
               C26752 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[22] +=
        (-std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
           C9792 * C8982) *
              C26752 * C26605 * C3883 -
          (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C3884 +
          (C9793 * C8981 + C12591 * C8982) * C26752 * C26605 * C3885 -
          ((C198 * C12358 - C494 * C12276 - C198 * C12510 + C26753 * C12583) *
               C8982 +
           C12591 * C8981) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C3444 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C26641) *
              C3446 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C26641 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C3444) *
              C3447 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C26605 * C3444 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) * C8982 +
            C2229 * C8981) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C1179 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C1180 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C8981 +
            C13084 * C8982) *
               C26752 * C1181) *
              C3444 +
          ((C11792 * C8981 +
            (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                C8982) *
               C26752 * C1180 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C1179 -
           ((C198 * C12755 - C494 * C12641 - C198 * C12971 + C26753 * C13076) *
                C8982 +
            C13084 * C8981) *
               C26752 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C26753 * C8981 +
             C9340 * C8982) *
                C26718 -
            (C11238 * C8982 +
             (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                 C26753 * C8981) *
                C26669) *
               C3444 +
           ((C11238 * C8981 +
             (C8983 * C5777 - C8984 * C5774 - C8983 * C5778 + C26752 * C5780) *
                 C26753 * C8982) *
                C26669 -
            (C9341 * C8982 + C9340 * C8981) * C26718) *
               C26641) *
              C26709 +
          ((((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                 C26753 * C8981 +
             C11239 * C8982) *
                C26669 -
            (C9342 * C8982 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C26753 * C8981) *
                C26718) *
               C3444 +
           ((C9342 * C8981 + C9343 * C8982) * C26718 -
            ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                 C26753 * C8982 +
             C11239 * C8981) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) *
                 C8983 +
             (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                 C26752) *
                C26753 * C26718 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C8983 +
             (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                 C26752) *
                C26753 * C26669) *
               C3444 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C8983 +
             (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                 C26752) *
                C26753 * C26718 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C8983 +
             (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C26709 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) *
                 C8983 +
             (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                 C26752) *
                C26753 * C26718 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C8983 +
             (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                 C26752) *
                C26753 * C26669) *
               C3444 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C8983 +
             (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                 C26752) *
                C26753 * C26718 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C8983 +
             (C9019 * C2797 - C8981 * C2873 + C9020 * C5776 - C8982 * C5834) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C8983 +
              (C26753 * C204 - C198 * C93) * C26752) *
                 C8981 +
             ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
                C26718 +
            (((C198 * C1183 - C26753 * C1326) * C8983 +
              (C198 * C1191 - C26753 * C1332) * C26752) *
                 C8981 +
             ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
                C26669) *
               C3444 +
           ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
             ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
                C26718 +
            (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
             ((C26753 * C5885 - C198 * C5774) * C8983 +
              (C26753 * C5887 - C198 * C5778) * C26752) *
                 C8982) *
                C26669) *
               C26641) *
              C26709 +
          (((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
             ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
                C26718 +
            (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
             ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
                C26669) *
               C3444 +
           ((((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
             ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
                C26718 +
            (((C2953 - C2952) * C8983 + (C2955 - C2954) * C26752) * C8981 +
             ((C198 * C5773 - C26753 * C5886) * C8983 +
              (C198 * C5776 - C26753 * C5888) * C26752) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26752 * C92 - C8983 * C87) * C9019 +
                       (C26752 * C260 - C8983 * C255) * C8981 +
                       (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                          C26753 * C26718 +
                      ((C8983 * C1183 - C26752 * C1190) * C9019 +
                       (C8983 * C1396 - C26752 * C1402) * C8981 +
                       (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                          C26753 * C26669) *
                         C3444 +
                     (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                       (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                          C26753 * C26718 +
                      ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                       (C26752 * C5777 - C8983 * C5774) * C9020 +
                       (C26752 * C5941 - C8983 * C5939) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C8983 * C88 - C26752 * C94) * C9019 +
                       (C8983 * C256 - C26752 * C261) * C8981 +
                       (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                          C26753 * C26718 +
                      ((C26752 * C1188 - C8983 * C1182) * C9019 +
                       (C26752 * C1403 - C8983 * C1397) * C8981 +
                       (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                          C26753 * C26669) *
                         C3444 +
                     (((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                       (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                          C26753 * C26718 +
                      ((C11447 - C11446) * C9019 + (C11449 - C11448) * C8981 +
                       (C8983 * C5773 - C26752 * C5775) * C9020 +
                       (C8983 * C5940 - C26752 * C5942) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
             C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
                C26752 * C26753 * C26718 -
            (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
             C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
                C26752 * C26753 * C26669) *
               C3444 +
           ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
             C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
                C26752 * C26753 * C26669 -
            (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
             C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
                C26752 * C26753 * C26718) *
               C26641) *
              C26709 +
          (((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
             C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
                C26752 * C26753 * C26669 -
            (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
             C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
                C26752 * C26753 * C26718) *
               C3444 +
           ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
             C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
                C26752 * C26753 * C26718 -
            (C9020 * C5832 - C9124 * C5773 - C9020 * C5940 + C8982 * C5993 +
             C9019 * C2870 - C9123 * C2792 - C9019 * C3022 + C8981 * C3094) *
                C26752 * C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[23] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26753 * C199 - C198 * C87) * C9019 +
                       (C26753 * C360 - C198 * C255) * C8981 +
                       (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                          C26752 * C26718 +
                      ((C198 * C1183 - C26753 * C1326) * C9019 +
                       (C198 * C1396 - C26753 * C1528) * C8981 +
                       (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                          C26752 * C26669) *
                         C3444 +
                     (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                       (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                          C26752 * C26718 +
                      ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                       (C26753 * C5885 - C198 * C5774) * C9020 +
                       (C26753 * C6045 - C198 * C5939) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                       (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                          C26752 * C26718 +
                      ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                       (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                          C26752 * C26669) *
                         C3444 +
                     (((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                       (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                          C26752 * C26718 +
                      ((C2953 - C2952) * C9019 + (C3174 - C3173) * C8981 +
                       (C198 * C5773 - C26753 * C5886) * C9020 +
                       (C198 * C5940 - C26753 * C6046) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C198 +
              (C26752 * C410 - C8983 * C405) * C26753) *
                 C8981 +
             ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
                C26718 +
            (((C8983 * C1183 - C26752 * C1190) * C198 +
              (C8983 * C1588 - C26752 * C1594) * C26753) *
                 C8981 +
             ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
                C26669) *
               C3444 +
           ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
             ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
                C26718 +
            (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
             ((C26752 * C5777 - C8983 * C5774) * C198 +
              (C26752 * C6099 - C8983 * C6097) * C26753) *
                 C8982) *
                C26669) *
               C26641) *
              C26709 +
          (((((C8983 * C88 - C26752 * C94) * C198 +
              (C8983 * C406 - C26752 * C411) * C26753) *
                 C8981 +
             ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
                C26718 +
            (((C26752 * C1188 - C8983 * C1182) * C198 +
              (C26752 * C1595 - C8983 * C1589) * C26753) *
                 C8981 +
             ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
                C26669) *
               C3444 +
           ((((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
             ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
                C26718 +
            (((C11447 - C11446) * C198 + (C11653 - C11652) * C26753) * C8981 +
             ((C8983 * C5773 - C26752 * C5775) * C198 +
              (C8983 * C6098 - C26752 * C6100) * C26753) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
             (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                 C26753) *
                C26752 * C26718 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C198 +
             (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                 C26753) *
                C26752 * C26669) *
               C3444 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C198 +
             (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                 C26753) *
                C26752 * C26718 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C198 +
             (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
             (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                 C26753) *
                C26752 * C26718 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C198 +
             (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                 C26753) *
                C26752 * C26669) *
               C3444 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C198 +
             (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                 C26753) *
                C26752 * C26718 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C198 +
             (C9019 * C3241 - C8981 * C3313 + C9020 * C6098 - C8982 * C6152) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[23] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
             C9792 * C8982) *
                C26752 * C26718 -
            (C11792 * C8982 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C8981) *
                C26752 * C26669) *
               C3444 +
           ((C11792 * C8981 +
             (C198 * C5885 - C494 * C5774 - C198 * C6097 + C26753 * C6204) *
                 C8982) *
                C26752 * C26669 -
            (C9793 * C8982 + C9792 * C8981) * C26752 * C26718) *
               C26641) *
              C26709 +
          (((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
            (C1126 * C8982 + C519 * C8981) * C26752 * C26718) *
               C3444 +
           ((C1126 * C8981 + C1127 * C8982) * C26752 * C26718 -
            ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                 C8982 +
             C3393 * C8981) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26605 * C3444 -
           (C9341 * C8982 + C9340 * C8981) * C26605 * C26641) *
              C3446 +
          ((C9342 * C8981 + C9343 * C8982) * C26605 * C26641 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26605 * C3444) *
              C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C26605 * C3444 -
           ((C8983 * C595 - C8984 * C584 - C8983 * C596 + C26752 * C602) *
                C26753 * C8982 +
            C10301 * C8981) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
               C8981 +
           C9340 * C8982) *
              C26605 * C3883 -
          (C9341 * C8982 + C9340 * C8981) * C26605 * C3884 +
          (C9341 * C8981 + C12288 * C8982) * C26605 * C3885 -
          ((C8983 * C12277 - C8984 * C12276 - C8983 * C12278 +
            C26752 * C12279) *
               C26753 * C8982 +
           C12288 * C8981) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                C8983 +
            (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C26605 * C3444 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) *
                C8983 +
            (C9019 * C594 - C8981 * C663 + C9020 * C596 - C8982 * C664) *
                C26752) *
               C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
           (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
               C26752) *
              C26753 * C26605 * C3883 +
          ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C8983 +
           (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
               C26752) *
              C26753 * C26605 * C3884 +
          ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
               C8983 +
           (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
               C26752) *
              C26753 * C26605 * C3885 +
          ((C9019 * C3889 - C8981 * C3930 + C9020 * C12276 - C8982 * C12322) *
               C8983 +
           (C9019 * C3893 - C8981 * C3932 + C9020 * C12278 - C8982 * C12323) *
               C26752) *
              C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26605 * C3444 +
           (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26605 * C26641) *
              C3446 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26605 * C3444 +
           (((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
            ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
               C26605 * C26641) *
              C3447 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C26605 * C3444 +
           (((C1901 - C1900) * C8983 + (C1903 - C1902) * C26752) * C8981 +
            ((C198 * C584 - C26753 * C728) * C8983 +
             (C198 * C596 - C26753 * C734) * C26752) *
                C8982) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C8983 +
            (C26753 * C204 - C198 * C93) * C26752) *
               C8981 +
           ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
              C26605 * C3883 +
          (((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
           ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
              C26605 * C3884 +
          (((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
           ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
              C26605 * C3885 +
          (((C12362 - C12361) * C8983 + (C12364 - C12363) * C26752) * C8981 +
           ((C198 * C12276 - C26753 * C12358) * C8983 +
            (C198 * C12278 - C26753 * C12359) * C26752) *
               C8982) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[24] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3446 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                      (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3447 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C26605 * C3444 +
                     ((C10453 - C10452) * C9019 + (C10455 - C10454) * C8981 +
                      (C8983 * C584 - C26752 * C595) * C9020 +
                      (C8983 * C798 - C26752 * C804) * C8982) *
                         C26753 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C9019 +
                     (C26752 * C260 - C8983 * C255) * C8981 +
                     (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                        C26753 * C26605 * C3883 +
                    ((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                     (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                        C26753 * C26605 * C3884 +
                    ((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                     (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                        C26753 * C26605 * C3885 +
                    ((C12402 - C12401) * C9019 + (C12404 - C12403) * C8981 +
                     (C8983 * C12276 - C26752 * C12277) * C9020 +
                     (C8983 * C12398 - C26752 * C12399) * C8982) *
                        C26753 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26605 * C3444 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26605 * C26641) *
              C3446 +
          ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
            C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
               C26752 * C26753 * C26605 * C26641 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26605 * C3444) *
              C3447 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C26605 * C3444 -
           (C9020 * C658 - C9124 * C584 - C9020 * C798 + C8982 * C860 +
            C9019 * C657 - C9123 * C583 - C9019 * C797 + C8981 * C859) *
               C26752 * C26753 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
           C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
              C26752 * C26753 * C26605 * C3883 -
          (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
           C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
              C26752 * C26753 * C26605 * C3884 +
          (C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
           C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
              C26752 * C26753 * C26605 * C3885 -
          (C9020 * C12322 - C9124 * C12276 - C9020 * C12398 + C8982 * C12438 +
           C9019 * C3930 - C9123 * C3889 - C9019 * C4006 + C8981 * C4045) *
              C26752 * C26753 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[24] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3446 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                      (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3447 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C26605 * C3444 +
                     ((C1901 - C1900) * C9019 + (C2066 - C2065) * C8981 +
                      (C198 * C584 - C26753 * C728) * C9020 +
                      (C198 * C798 - C26753 * C930) * C8982) *
                         C26752 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26753 * C199 - C198 * C87) * C9019 +
                     (C26753 * C360 - C198 * C255) * C8981 +
                     (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                        C26752 * C26605 * C3883 +
                    ((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                     (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                        C26752 * C26605 * C3884 +
                    ((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                     (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                        C26752 * C26605 * C3885 +
                    ((C12362 - C12361) * C9019 + (C12476 - C12475) * C8981 +
                     (C198 * C12276 - C26753 * C12358) * C9020 +
                     (C198 * C12398 - C26753 * C12473) * C8982) *
                        C26752 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezx[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26605 * C3444 +
           (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26605 * C26641) *
              C3446 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26605 * C3444 +
           (((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
            ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
               C26605 * C26641) *
              C3447 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C26605 * C3444 +
           (((C10453 - C10452) * C198 + (C10607 - C10606) * C26753) * C8981 +
            ((C8983 * C584 - C26752 * C595) * C198 +
             (C8983 * C990 - C26752 * C996) * C26753) *
                C8982) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C198 +
            (C26752 * C410 - C8983 * C405) * C26753) *
               C8981 +
           ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
              C26605 * C3883 +
          (((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
           ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
              C26605 * C3884 +
          (((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
           ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
              C26605 * C3885 +
          (((C12402 - C12401) * C198 + (C12514 - C12513) * C26753) * C8981 +
           ((C8983 * C12276 - C26752 * C12277) * C198 +
            (C8983 * C12510 - C26752 * C12511) * C26753) *
               C8982) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) * C198 +
            (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C26605 * C3444 +
           ((C9019 * C583 - C8981 * C657 + C9020 * C584 - C8982 * C658) * C198 +
            (C9019 * C989 - C8981 * C1051 + C9020 * C990 - C8982 * C1052) *
                C26753) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
           (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
               C26753) *
              C26752 * C26605 * C3883 +
          ((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
           (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
               C26753) *
              C26752 * C26605 * C3884 +
          ((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
               C198 +
           (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
               C26753) *
              C26752 * C26605 * C3885 +
          ((C9019 * C3889 - C8981 * C3930 + C9020 * C12276 - C8982 * C12322) *
               C198 +
           (C9019 * C4116 - C8981 * C4154 + C9020 * C12510 - C8982 * C12548) *
               C26753) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[24] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26605 * C3444 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C26641) *
              C3446 +
          ((C1126 * C8981 + C1127 * C8982) * C26752 * C26605 * C26641 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26605 * C3444) *
              C3447 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C26605 * C3444 -
           ((C198 * C728 - C494 * C584 - C198 * C990 + C26753 * C1112) * C8982 +
            C2229 * C8981) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
           C9792 * C8982) *
              C26752 * C26605 * C3883 -
          (C9793 * C8982 + C9792 * C8981) * C26752 * C26605 * C3884 +
          (C9793 * C8981 + C12591 * C8982) * C26752 * C26605 * C3885 -
          ((C198 * C12358 - C494 * C12276 - C198 * C12510 + C26753 * C12583) *
               C8982 +
           C12591 * C8981) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C26753 * C8981 +
             C9340 * C8982) *
                C6255 -
            (C11238 * C8982 +
             (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                 C26753 * C8981) *
                C26669) *
               C26717 +
           ((C11238 * C8981 + C14190 * C8982) * C26669 -
            (C9341 * C8982 + C9340 * C8981) * C6255) *
               C26641) *
              C26709 +
          ((((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                 C26753 * C8981 +
             C11239 * C8982) *
                C26669 -
            (C9342 * C8982 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C26753 * C8981) *
                C6255) *
               C26717 +
           ((C9342 * C8981 + C9343 * C8982) * C6255 -
            ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                 C26753 * C8982 +
             C11239 * C8981) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) *
                 C8983 +
             (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                 C26752) *
                C26753 * C6255 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C8983 +
             (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                 C26752) *
                C26753 * C26669) *
               C26717 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C8983 +
             (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                 C26752) *
                C26753 * C6255 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C8983 +
             (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C26709 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) *
                 C8983 +
             (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                 C26752) *
                C26753 * C6255 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C8983 +
             (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                 C26752) *
                C26753 * C26669) *
               C26717 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C8983 +
             (C8981 * C660 - C9019 * C586 + C8982 * C662 - C9020 * C592) *
                 C26752) *
                C26753 * C6255 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C8983 +
             (C9019 * C2797 - C8981 * C2873 + C9020 * C5776 - C8982 * C5834) *
                 C26752) *
                C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26753 * C199 - C198 * C87) * C8983 +
              (C26753 * C204 - C198 * C93) * C26752) *
                 C8981 +
             ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
                C6255 +
            (((C198 * C1183 - C26753 * C1326) * C8983 +
              (C198 * C1191 - C26753 * C1332) * C26752) *
                 C8981 +
             ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
                C26669) *
               C26717 +
           ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
             ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
                C6255 +
            (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
             ((C14295 - C14296) * C8983 + (C14297 - C14298) * C26752) * C8982) *
                C26669) *
               C26641) *
              C26709 +
          (((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
             ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
                C6255 +
            (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
             ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
                C26669) *
               C26717 +
           ((((C737 - C736) * C8983 + (C739 - C738) * C26752) * C8981 +
             ((C740 - C741) * C8983 + (C742 - C743) * C26752) * C8982) *
                C6255 +
            (((C2953 - C2952) * C8983 + (C2955 - C2954) * C26752) * C8981 +
             ((C198 * C5773 - C26753 * C5886) * C8983 +
              (C198 * C5776 - C26753 * C5888) * C26752) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26752 * C92 - C8983 * C87) * C9019 +
                       (C26752 * C260 - C8983 * C255) * C8981 +
                       (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                          C26753 * C6255 +
                      ((C8983 * C1183 - C26752 * C1190) * C9019 +
                       (C8983 * C1396 - C26752 * C1402) * C8981 +
                       (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                          C26753 * C26669) *
                         C26717 +
                     (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                       (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                          C26753 * C6255 +
                      ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                       (C14351 - C14352) * C9020 + (C14353 - C14354) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C8983 * C88 - C26752 * C94) * C9019 +
                       (C8983 * C256 - C26752 * C261) * C8981 +
                       (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                          C26753 * C6255 +
                      ((C26752 * C1188 - C8983 * C1182) * C9019 +
                       (C26752 * C1403 - C8983 * C1397) * C8981 +
                       (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                          C26753 * C26669) *
                         C26717 +
                     (((C9511 - C9510) * C9019 + (C9513 - C9512) * C8981 +
                       (C9514 - C9515) * C9020 + (C9516 - C9517) * C8982) *
                          C26753 * C6255 +
                      ((C11447 - C11446) * C9019 + (C11449 - C11448) * C8981 +
                       (C8983 * C5773 - C26752 * C5775) * C9020 +
                       (C8983 * C5940 - C26752 * C5942) * C8982) *
                          C26753 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
             C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
                C26752 * C26753 * C6255 -
            (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
             C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
                C26752 * C26753 * C26669) *
               C26717 +
           ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
             C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
                C26752 * C26753 * C26669 -
            (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
             C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
                C26752 * C26753 * C6255) *
               C26641) *
              C26709 +
          (((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
             C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
                C26752 * C26753 * C26669 -
            (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
             C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
                C26752 * C26753 * C6255) *
               C26717 +
           ((C9019 * C654 - C9123 * C579 - C9019 * C794 + C8981 * C855 +
             C9020 * C656 - C9124 * C582 - C9020 * C796 + C8982 * C858) *
                C26752 * C26753 * C6255 -
            (C9020 * C5832 - C9124 * C5773 - C9020 * C5940 + C8982 * C5993 +
             C9019 * C2870 - C9123 * C2792 - C9019 * C3022 + C8981 * C3094) *
                C26752 * C26753 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[25] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   (((((C26753 * C199 - C198 * C87) * C9019 +
                       (C26753 * C360 - C198 * C255) * C8981 +
                       (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                          C26752 * C6255 +
                      ((C198 * C1183 - C26753 * C1326) * C9019 +
                       (C198 * C1396 - C26753 * C1528) * C8981 +
                       (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                          C26752 * C26669) *
                         C26717 +
                     (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                       (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                          C26752 * C6255 +
                      ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                       (C14295 - C14296) * C9020 + (C14457 - C14458) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C26709 +
                    ((((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                       (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                          C26752 * C6255 +
                      ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                       (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                          C26752 * C26669) *
                         C26717 +
                     (((C737 - C736) * C9019 + (C933 - C932) * C8981 +
                       (C740 - C741) * C9020 + (C934 - C935) * C8982) *
                          C26752 * C6255 +
                      ((C2953 - C2952) * C9019 + (C3174 - C3173) * C8981 +
                       (C198 * C5773 - C26753 * C5886) * C9020 +
                       (C198 * C5940 - C26753 * C6046) * C8982) *
                          C26752 * C26669) *
                         C26641) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C198 +
              (C26752 * C410 - C8983 * C405) * C26753) *
                 C8981 +
             ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
                C6255 +
            (((C8983 * C1183 - C26752 * C1190) * C198 +
              (C8983 * C1588 - C26752 * C1594) * C26753) *
                 C8981 +
             ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
                C26669) *
               C26717 +
           ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
             ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
                C6255 +
            (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
             ((C14351 - C14352) * C198 + (C14511 - C14512) * C26753) * C8982) *
                C26669) *
               C26641) *
              C26709 +
          (((((C8983 * C88 - C26752 * C94) * C198 +
              (C8983 * C406 - C26752 * C411) * C26753) *
                 C8981 +
             ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
                C6255 +
            (((C26752 * C1188 - C8983 * C1182) * C198 +
              (C26752 * C1595 - C8983 * C1589) * C26753) *
                 C8981 +
             ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
                C26669) *
               C26717 +
           ((((C9511 - C9510) * C198 + (C9677 - C9676) * C26753) * C8981 +
             ((C9514 - C9515) * C198 + (C9678 - C9679) * C26753) * C8982) *
                C6255 +
            (((C11447 - C11446) * C198 + (C11653 - C11652) * C26753) * C8981 +
             ((C8983 * C5773 - C26752 * C5775) * C198 +
              (C8983 * C6098 - C26752 * C6100) * C26753) *
                 C8982) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
             (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                 C26753) *
                C26752 * C6255 +
            ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                 C198 +
             (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                 C26753) *
                C26752 * C26669) *
               C26717 +
           (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                 C198 +
             (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                 C26753) *
                C26752 * C6255 +
            ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                 C198 +
             (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
             (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                 C26753) *
                C26752 * C6255 +
            ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                 C198 +
             (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                 C26753) *
                C26752 * C26669) *
               C26717 +
           (((C8981 * C654 - C9019 * C579 + C8982 * C656 - C9020 * C582) *
                 C198 +
             (C8981 * C1048 - C9019 * C986 + C8982 * C1050 - C9020 * C988) *
                 C26753) *
                C26752 * C6255 +
            ((C9019 * C2792 - C8981 * C2870 + C9020 * C5773 - C8982 * C5832) *
                 C198 +
             (C9019 * C3241 - C8981 * C3313 + C9020 * C6098 - C8982 * C6152) *
                 C26753) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[25] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
             C9792 * C8982) *
                C26752 * C6255 -
            (C11792 * C8982 +
             (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                 C8981) *
                C26752 * C26669) *
               C26717 +
           ((C11792 * C8981 + C14621 * C8982) * C26752 * C26669 -
            (C9793 * C8982 + C9792 * C8981) * C26752 * C6255) *
               C26641) *
              C26709 +
          (((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
            (C1126 * C8982 + C519 * C8981) * C26752 * C6255) *
               C26717 +
           ((C1126 * C8981 + C1127 * C8982) * C26752 * C6255 -
            ((C198 * C5886 - C494 * C5773 - C198 * C6098 + C26753 * C6203) *
                 C8982 +
             C3393 * C8981) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26747 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26748 +
           ((C8983 * C1192 - C8984 * C1184 - C8983 * C1193 + C26752 * C1202) *
                C26753 * C8981 +
            C12653 * C8982) *
               C8095) *
              C26717 +
          ((C11238 * C8981 + C14190 * C8982) * C26748 -
           (C9341 * C8982 + C9340 * C8981) * C26747 -
           ((C8983 * C12642 - C8984 * C12641 - C8983 * C12643 +
             C26752 * C12644) *
                C26753 * C8982 +
            C12653 * C8981) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26747 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26748 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C8983 +
            (C8981 * C1264 - C9019 * C1193 + C8982 * C4302 - C9020 * C4247) *
                C26752) *
               C26753 * C8095) *
              C26717 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C26747 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C8983 +
            (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                C26752) *
               C26753 * C26748 +
           ((C9019 * C4243 - C8981 * C4300 + C9020 * C12641 - C8982 * C12703) *
                C8983 +
            (C9019 * C4247 - C8981 * C4302 + C9020 * C12643 - C8982 * C12704) *
                C26752) *
               C26753 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26747 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26748 +
           (((C26753 * C1328 - C198 * C1184) * C8983 +
             (C26753 * C1334 - C198 * C1193) * C26752) *
                C8981 +
            ((C12758 - C12759) * C8983 + (C12760 - C12761) * C26752) * C8982) *
               C8095) *
              C26717 +
          ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C26747 +
           (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
            ((C14295 - C14296) * C8983 + (C14297 - C14298) * C26752) * C8982) *
               C26748 +
           (((C12759 - C12758) * C8983 + (C12761 - C12760) * C26752) * C8981 +
            ((C198 * C12641 - C26753 * C12755) * C8983 +
             (C198 * C12643 - C26753 * C12756) * C26752) *
                C8982) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyx[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26747 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26748 +
                     ((C26752 * C1192 - C8983 * C1184) * C9019 +
                      (C26752 * C1404 - C8983 * C1398) * C8981 +
                      (C12814 - C12815) * C9020 + (C12816 - C12817) * C8982) *
                         C26753 * C8095) *
                        C26717 +
                    (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C26747 +
                     ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                      (C14351 - C14352) * C9020 + (C14353 - C14354) * C8982) *
                         C26753 * C26748 +
                     ((C12815 - C12814) * C9019 + (C12817 - C12816) * C8981 +
                      (C8983 * C12641 - C26752 * C12642) * C9020 +
                      (C8983 * C12811 - C26752 * C12812) * C8982) *
                         C26753 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26747 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26748 +
           (C9019 * C1258 - C9123 * C1184 - C9019 * C1398 + C8981 * C1460 +
            C9020 * C4300 - C9124 * C4243 - C9020 * C4408 + C8982 * C4463) *
               C26752 * C26753 * C8095) *
              C26717 +
          ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
            C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
               C26752 * C26753 * C26748 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C26747 -
           (C9020 * C12703 - C9124 * C12641 - C9020 * C12811 + C8982 * C12867 +
            C9019 * C4300 - C9123 * C4243 - C9019 * C4408 + C8981 * C4463) *
               C26752 * C26753 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[26] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26747 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26748 +
                     ((C26753 * C1328 - C198 * C1184) * C9019 +
                      (C26753 * C1530 - C198 * C1398) * C8981 +
                      (C12758 - C12759) * C9020 + (C12920 - C12921) * C8982) *
                         C26752 * C8095) *
                        C26717 +
                    (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C26747 +
                     ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                      (C14295 - C14296) * C9020 + (C14457 - C14458) * C8982) *
                         C26752 * C26748 +
                     ((C12759 - C12758) * C9019 + (C12921 - C12920) * C8981 +
                      (C198 * C12641 - C26753 * C12755) * C9020 +
                      (C198 * C12811 - C26753 * C12918) * C8982) *
                         C26752 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezx[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26747 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26748 +
           (((C26752 * C1192 - C8983 * C1184) * C198 +
             (C26752 * C1596 - C8983 * C1590) * C26753) *
                C8981 +
            ((C12814 - C12815) * C198 + (C12974 - C12975) * C26753) * C8982) *
               C8095) *
              C26717 +
          ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C26747 +
           (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
            ((C14351 - C14352) * C198 + (C14511 - C14512) * C26753) * C8982) *
               C26748 +
           (((C12815 - C12814) * C198 + (C12975 - C12974) * C26753) * C8981 +
            ((C8983 * C12641 - C26752 * C12642) * C198 +
             (C8983 * C12971 - C26752 * C12972) * C26753) *
                C8982) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezy[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26747 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26748 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C198 +
            (C8981 * C1652 - C9019 * C1590 + C8982 * C4620 - C9020 * C4566) *
                C26753) *
               C26752 * C8095) *
              C26717 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C26747 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C198 +
            (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                C26753) *
               C26752 * C26748 +
           ((C9019 * C4243 - C8981 * C4300 + C9020 * C12641 - C8982 * C12703) *
                C198 +
            (C9019 * C4566 - C8981 * C4620 + C9020 * C12971 - C8982 * C13025) *
                C26753) *
               C26752 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezz[26] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26747 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26748 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C8981 +
            C13084 * C8982) *
               C26752 * C8095) *
              C26717 +
          ((C11792 * C8981 + C14621 * C8982) * C26752 * C26748 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C26747 -
           ((C198 * C12755 - C494 * C12641 - C198 * C12971 + C26753 * C13076) *
                C8982 +
            C13084 * C8981) *
               C26752 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C6255 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C574 +
          ((C11238 * C8981 + C14190 * C8982) * C26669 -
           (C9341 * C8982 + C9340 * C8981) * C6255) *
              C575 +
          ((C9341 * C8981 + C12288 * C8982) * C6255 -
           ((C8983 * C14179 - C8984 * C14178 - C8983 * C14180 +
             C26752 * C14181) *
                C26753 * C8982 +
            C14190 * C8981) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C6255 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C26589 * C3446 +
          (((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C26753 * C8981 +
            C11239 * C8982) *
               C26669 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C6255) *
              C26589 * C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C6255 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C26753 * C8982 +
            (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
                C26753 * C8981) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
               C8981 +
           C9340 * C8982) *
              C7141 -
          (C11238 * C8982 +
           (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
               C26753 * C8981) *
              C7142 +
          ((C8983 * C1192 - C8984 * C1184 - C8983 * C1193 + C26752 * C1202) *
               C26753 * C8981 +
           C12653 * C8982) *
              C7143 -
          ((C8983 * C15556 - C8984 * C15555 - C8983 * C15557 +
            C26752 * C15558) *
               C26753 * C8982 +
           (C8983 * C7149 - C8984 * C7146 - C8983 * C7150 + C26752 * C7152) *
               C26753 * C8981) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C574 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C6255 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C8983 +
            (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                C26752) *
               C26753 * C26669) *
              C575 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C8983 +
            (C9019 * C5778 - C8981 * C5833 + C9020 * C14180 - C8982 * C14241) *
                C26752) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C6255 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C8983 +
            (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C8983 +
            (C9019 * C1197 - C8981 * C1266 + C9020 * C2799 - C8982 * C2874) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
           (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
               C26752) *
              C26753 * C7141 +
          ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
               C8983 +
           (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
               C26752) *
              C26753 * C7142 +
          ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
               C8983 +
           (C8981 * C1264 - C9019 * C1193 + C8982 * C4302 - C9020 * C4247) *
               C26752) *
              C26753 * C7143 +
          ((C9019 * C7146 - C8981 * C7187 + C9020 * C15555 - C8982 * C15593) *
               C8983 +
           (C9019 * C7150 - C8981 * C7189 + C9020 * C15557 - C8982 * C15594) *
               C26752) *
              C26753 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26669) *
              C574 +
          ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C6255 +
           (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
            ((C14295 - C14296) * C8983 + (C14297 - C14298) * C26752) * C8982) *
               C26669) *
              C575 +
          ((((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
               C6255 +
           (((C14296 - C14295) * C8983 + (C14298 - C14297) * C26752) * C8981 +
            ((C198 * C14178 - C26753 * C14292) * C8983 +
             (C198 * C14180 - C26753 * C14293) * C26752) *
                C8982) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26669) *
              C26589 * C3446 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C6255 +
           (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
            ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
               C26669) *
              C26589 * C3447 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C6255 +
           (((C2396 - C2395) * C8983 + (C2398 - C2397) * C26752) * C8981 +
            ((C198 * C2793 - C26753 * C2947) * C8983 +
             (C198 * C2799 - C26753 * C2950) * C26752) *
                C8982) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26753 * C199 - C198 * C87) * C8983 +
            (C26753 * C204 - C198 * C93) * C26752) *
               C8981 +
           ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
              C7141 +
          (((C198 * C1183 - C26753 * C1326) * C8983 +
            (C198 * C1191 - C26753 * C1332) * C26752) *
               C8981 +
           ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
              C7142 +
          (((C26753 * C1328 - C198 * C1184) * C8983 +
            (C26753 * C1334 - C198 * C1193) * C26752) *
               C8981 +
           ((C12758 - C12759) * C8983 + (C12760 - C12761) * C26752) * C8982) *
              C7143 +
          (((C198 * C7146 - C26753 * C7225) * C8983 +
            (C198 * C7150 - C26753 * C7227) * C26752) *
               C8981 +
           ((C198 * C15555 - C26753 * C15629) * C8983 +
            (C198 * C15557 - C26753 * C15630) * C26752) *
               C8982) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[27] += (-std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26669) *
                        C574 +
                    (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C6255 +
                     ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                      (C14351 - C14352) * C9020 + (C14353 - C14354) * C8982) *
                         C26753 * C26669) *
                        C575 +
                    (((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                      (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                         C26753 * C6255 +
                     ((C14352 - C14351) * C9019 + (C14354 - C14353) * C8981 +
                      (C8983 * C14178 - C26752 * C14179) * C9020 +
                      (C8983 * C14348 - C26752 * C14349) * C8982) *
                         C26753 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3446 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C6255 +
                     ((C26752 * C1188 - C8983 * C1182) * C9019 +
                      (C26752 * C1403 - C8983 * C1397) * C8981 +
                      (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3447 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1186 - C26752 * C1196) * C9019 +
                      (C8983 * C1400 - C26752 * C1406) * C8981 +
                      (C8983 * C2793 - C26752 * C2798) * C9020 +
                      (C8983 * C3023 - C26752 * C3026) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C9019 +
                     (C26752 * C260 - C8983 * C255) * C8981 +
                     (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                        C26753 * C7141 +
                    ((C8983 * C1183 - C26752 * C1190) * C9019 +
                     (C8983 * C1396 - C26752 * C1402) * C8981 +
                     (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                        C26753 * C7142 +
                    ((C26752 * C1192 - C8983 * C1184) * C9019 +
                     (C26752 * C1404 - C8983 * C1398) * C8981 +
                     (C12814 - C12815) * C9020 + (C12816 - C12817) * C8982) *
                        C26753 * C7143 +
                    ((C8983 * C7146 - C26752 * C7149) * C9019 +
                     (C8983 * C7263 - C26752 * C7265) * C8981 +
                     (C8983 * C15555 - C26752 * C15556) * C9020 +
                     (C8983 * C15665 - C26752 * C15666) * C8982) *
                        C26753 * C7144) *
                   C26589 * C26570) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[27] +=
        (-std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C6255 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C574 +
          ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
            C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
               C26752 * C26753 * C26669 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C6255) *
              C575 +
          ((C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C6255 -
           (C9020 * C14240 - C9124 * C14178 - C9020 * C14348 + C8982 * C14404 +
            C9019 * C5831 - C9123 * C5774 - C9019 * C5939 + C8981 * C5994) *
               C26752 * C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C6255 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C26589 * C3446 +
          ((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
            C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
               C26752 * C26753 * C26669 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C6255) *
              C26589 * C3447 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C6255 -
           (C9020 * C2871 - C9124 * C2793 - C9020 * C3023 + C8982 * C3095 +
            C9019 * C1260 - C9123 * C1186 - C9019 * C1400 + C8981 * C1462) *
               C26752 * C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
           C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
              C26752 * C26753 * C7141 -
          (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
           C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
              C26752 * C26753 * C7142 +
          (C9019 * C1258 - C9123 * C1184 - C9019 * C1398 + C8981 * C1460 +
           C9020 * C4300 - C9124 * C4243 - C9020 * C4408 + C8982 * C4463) *
              C26752 * C26753 * C7143 -
          (C9020 * C15593 - C9124 * C15555 - C9020 * C15665 + C8982 * C15701 +
           C9019 * C7187 - C9123 * C7146 - C9019 * C7263 + C8981 * C7302) *
              C26752 * C26753 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[27] += (-std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26669) *
                        C574 +
                    (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C6255 +
                     ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                      (C14295 - C14296) * C9020 + (C14457 - C14458) * C8982) *
                         C26752 * C26669) *
                        C575 +
                    (((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                         C26752 * C6255 +
                     ((C14296 - C14295) * C9019 + (C14458 - C14457) * C8981 +
                      (C198 * C14178 - C26753 * C14292) * C9020 +
                      (C198 * C14348 - C26753 * C14455) * C8982) *
                         C26752 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3446 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C6255 +
                     ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                      (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3447 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C6255 +
                     ((C2396 - C2395) * C9019 + (C2561 - C2560) * C8981 +
                      (C198 * C2793 - C26753 * C2947) * C9020 +
                      (C198 * C3023 - C26753 * C3171) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C26753 * C199 - C198 * C87) * C9019 +
                     (C26753 * C360 - C198 * C255) * C8981 +
                     (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                        C26752 * C7141 +
                    ((C198 * C1183 - C26753 * C1326) * C9019 +
                     (C198 * C1396 - C26753 * C1528) * C8981 +
                     (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                        C26752 * C7142 +
                    ((C26753 * C1328 - C198 * C1184) * C9019 +
                     (C26753 * C1530 - C198 * C1398) * C8981 +
                     (C12758 - C12759) * C9020 + (C12920 - C12921) * C8982) *
                        C26752 * C7143 +
                    ((C198 * C7146 - C26753 * C7225) * C9019 +
                     (C198 * C7263 - C26753 * C7337) * C8981 +
                     (C198 * C15555 - C26753 * C15629) * C9020 +
                     (C198 * C15665 - C26753 * C15736) * C8982) *
                        C26752 * C7144) *
                   C26589 * C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezx[27] +=
        (-std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26669) *
              C574 +
          ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C6255 +
           (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
            ((C14351 - C14352) * C198 + (C14511 - C14512) * C26753) * C8982) *
               C26669) *
              C575 +
          ((((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
               C6255 +
           (((C14352 - C14351) * C198 + (C14512 - C14511) * C26753) * C8981 +
            ((C8983 * C14178 - C26752 * C14179) * C198 +
             (C8983 * C14508 - C26752 * C14509) * C26753) *
                C8982) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26669) *
              C26589 * C3446 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C6255 +
           (((C26752 * C1188 - C8983 * C1182) * C198 +
             (C26752 * C1595 - C8983 * C1589) * C26753) *
                C8981 +
            ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
               C26669) *
              C26589 * C3447 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1186 - C26752 * C1196) * C198 +
             (C8983 * C1592 - C26752 * C1598) * C26753) *
                C8981 +
            ((C8983 * C2793 - C26752 * C2798) * C198 +
             (C8983 * C3242 - C26752 * C3245) * C26753) *
                C8982) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C198 +
            (C26752 * C410 - C8983 * C405) * C26753) *
               C8981 +
           ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
              C7141 +
          (((C8983 * C1183 - C26752 * C1190) * C198 +
            (C8983 * C1588 - C26752 * C1594) * C26753) *
               C8981 +
           ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
              C7142 +
          (((C26752 * C1192 - C8983 * C1184) * C198 +
            (C26752 * C1596 - C8983 * C1590) * C26753) *
               C8981 +
           ((C12814 - C12815) * C198 + (C12974 - C12975) * C26753) * C8982) *
              C7143 +
          (((C8983 * C7146 - C26752 * C7149) * C198 +
            (C8983 * C7373 - C26752 * C7375) * C26753) *
               C8981 +
           ((C8983 * C15555 - C26752 * C15556) * C198 +
            (C8983 * C15771 - C26752 * C15772) * C26753) *
               C8982) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C574 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C6255 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C198 +
            (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                C26753) *
               C26752 * C26669) *
              C575 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C198 +
            (C9019 * C6097 - C8981 * C6151 + C9020 * C14508 - C8982 * C14562) *
                C26753) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C6255 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C198 +
            (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C198 +
            (C9019 * C1592 - C8981 * C1654 + C9020 * C3242 - C8982 * C3314) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
           (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
               C26753) *
              C26752 * C7141 +
          ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
               C198 +
           (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
               C26753) *
              C26752 * C7142 +
          ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
               C198 +
           (C8981 * C1652 - C9019 * C1590 + C8982 * C4620 - C9020 * C4566) *
               C26753) *
              C26752 * C7143 +
          ((C9019 * C7146 - C8981 * C7187 + C9020 * C15555 - C8982 * C15593) *
               C198 +
           (C9019 * C7373 - C8981 * C7411 + C9020 * C15771 - C8982 * C15807) *
               C26753) *
              C26752 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[27] +=
        (-std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C6255 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C574 +
          ((C11792 * C8981 + C14621 * C8982) * C26752 * C26669 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C6255) *
              C575 +
          ((C9793 * C8981 + C12591 * C8982) * C26752 * C6255 -
           ((C198 * C14292 - C494 * C14178 - C198 * C14508 + C26753 * C14613) *
                C8982 +
            C14621 * C8981) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C6255 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C26589 * C3446 +
          ((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C6255) *
              C26589 * C3447 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C6255 -
           ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                C8982 +
            C2724 * C8981) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
           C9792 * C8982) *
              C26752 * C7141 -
          (C11792 * C8982 +
           (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
               C8981) *
              C26752 * C7142 +
          ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
               C8981 +
           C13084 * C8982) *
              C26752 * C7143 -
          ((C198 * C15629 - C494 * C15555 - C198 * C15771 + C26753 * C15842) *
               C8982 +
           (C198 * C7225 - C494 * C7146 - C198 * C7373 + C26753 * C7448) *
               C8981) *
              C26752 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C26747 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26748 +
           ((C8983 * C1192 - C8984 * C1184 - C8983 * C1193 + C26752 * C1202) *
                C26753 * C8981 +
            C12653 * C8982) *
               C8095) *
              C26589 * C26709 +
          (((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C26753 * C8981 +
            C11239 * C8982) *
               C26748 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C26747 -
           ((C8983 * C4244 - C8984 * C4242 - C8983 * C4245 + C26752 * C4248) *
                C26753 * C8982 +
            (C8983 * C1194 - C8984 * C1185 - C8983 * C1195 + C26752 * C1203) *
                C26753 * C8981) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C26747 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26748 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C8983 +
            (C8981 * C1264 - C9019 * C1193 + C8982 * C4302 - C9020 * C4247) *
                C26752) *
               C26753 * C8095) *
              C26589 * C26709 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C26747 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C8983 +
            (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                C26752) *
               C26753 * C26748 +
           ((C9019 * C1185 - C8981 * C1259 + C9020 * C4242 - C8982 * C4301) *
                C8983 +
            (C9019 * C1195 - C8981 * C1265 + C9020 * C4245 - C8982 * C4303) *
                C26752) *
               C26753 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C26747 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26748 +
           (((C26753 * C1328 - C198 * C1184) * C8983 +
             (C26753 * C1334 - C198 * C1193) * C26752) *
                C8981 +
            ((C12758 - C12759) * C8983 + (C12760 - C12761) * C26752) * C8982) *
               C8095) *
              C26589 * C26709 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C26747 +
           (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
            ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
               C26748 +
           (((C1344 - C1343) * C8983 + (C1346 - C1345) * C26752) * C8981 +
            ((C198 * C4242 - C26753 * C4355) * C8983 +
             (C198 * C4245 - C26753 * C4357) * C26752) *
                C8982) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C26747 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26748 +
                     ((C26752 * C1192 - C8983 * C1184) * C9019 +
                      (C26752 * C1404 - C8983 * C1398) * C8981 +
                      (C12814 - C12815) * C9020 + (C12816 - C12817) * C8982) *
                         C26753 * C8095) *
                        C26589 * C26709 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C26747 +
                     ((C26752 * C1188 - C8983 * C1182) * C9019 +
                      (C26752 * C1403 - C8983 * C1397) * C8981 +
                      (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                         C26753 * C26748 +
                     ((C8983 * C1185 - C26752 * C1194) * C9019 +
                      (C8983 * C1399 - C26752 * C1405) * C8981 +
                      (C8983 * C4242 - C26752 * C4244) * C9020 +
                      (C8983 * C4409 - C26752 * C4411) * C8982) *
                         C26753 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eeyy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C26747 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26748 +
           (C9019 * C1258 - C9123 * C1184 - C9019 * C1398 + C8981 * C1460 +
            C9020 * C4300 - C9124 * C4243 - C9020 * C4408 + C8982 * C4463) *
               C26752 * C26753 * C8095) *
              C26589 * C26709 +
          ((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
            C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
               C26752 * C26753 * C26748 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C26747 -
           (C9020 * C4301 - C9124 * C4242 - C9020 * C4409 + C8982 * C4462 +
            C9019 * C1259 - C9123 * C1185 - C9019 * C1399 + C8981 * C1461) *
               C26752 * C26753 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[28] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C26747 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26748 +
                     ((C26753 * C1328 - C198 * C1184) * C9019 +
                      (C26753 * C1530 - C198 * C1398) * C8981 +
                      (C12758 - C12759) * C9020 + (C12920 - C12921) * C8982) *
                         C26752 * C8095) *
                        C26589 * C26709 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C26747 +
                     ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                      (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                         C26752 * C26748 +
                     ((C1344 - C1343) * C9019 + (C1538 - C1537) * C8981 +
                      (C198 * C4242 - C26753 * C4355) * C9020 +
                      (C198 * C4409 - C26753 * C4515) * C8982) *
                         C26752 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezx[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C26747 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26748 +
           (((C26752 * C1192 - C8983 * C1184) * C198 +
             (C26752 * C1596 - C8983 * C1590) * C26753) *
                C8981 +
            ((C12814 - C12815) * C198 + (C12974 - C12975) * C26753) * C8982) *
               C8095) *
              C26589 * C26709 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C26747 +
           (((C26752 * C1188 - C8983 * C1182) * C198 +
             (C26752 * C1595 - C8983 * C1589) * C26753) *
                C8981 +
            ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
               C26748 +
           (((C8983 * C1185 - C26752 * C1194) * C198 +
             (C8983 * C1591 - C26752 * C1597) * C26753) *
                C8981 +
            ((C8983 * C4242 - C26752 * C4244) * C198 +
             (C8983 * C4567 - C26752 * C4569) * C26753) *
                C8982) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C26747 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26748 +
           ((C8981 * C1258 - C9019 * C1184 + C8982 * C4300 - C9020 * C4243) *
                C198 +
            (C8981 * C1652 - C9019 * C1590 + C8982 * C4620 - C9020 * C4566) *
                C26753) *
               C26752 * C8095) *
              C26589 * C26709 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C26747 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C198 +
            (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                C26753) *
               C26752 * C26748 +
           ((C9019 * C1185 - C8981 * C1259 + C9020 * C4242 - C8982 * C4301) *
                C198 +
            (C9019 * C1591 - C8981 * C1653 + C9020 * C4567 - C8982 * C4621) *
                C26753) *
               C26752 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[28] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C26747 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26748 +
           ((C198 * C1328 - C494 * C1184 - C198 * C1590 + C26753 * C1712) *
                C8981 +
            C13084 * C8982) *
               C26752 * C8095) *
              C26589 * C26709 +
          ((C1729 * C8981 + C3393 * C8982) * C26752 * C26748 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C26747 -
           ((C198 * C4355 - C494 * C4242 - C198 * C4567 + C26753 * C4672) *
                C8982 +
            C1730 * C8981) *
               C26752 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C6255 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C26589 * C3446 +
          (((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C26753 * C8981 +
            C11239 * C8982) *
               C26669 -
           (C9342 * C8982 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C26753 *
                C8981) *
               C6255) *
              C26589 * C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C26753 *
                C8981 +
            C10301 * C8982) *
               C6255 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C26753 * C8982 +
            (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
                C26753 * C8981) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C26753 *
                C8981 +
            C9340 * C8982) *
               C6255 -
           (C11238 * C8982 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C26753 * C8981) *
               C26669) *
              C574 +
          ((C11238 * C8981 + C14190 * C8982) * C26669 -
           (C9341 * C8982 + C9340 * C8981) * C6255) *
              C575 +
          ((C9341 * C8981 + C12288 * C8982) * C6255 -
           ((C8983 * C14179 - C8984 * C14178 - C8983 * C14180 +
             C26752 * C14181) *
                C26753 * C8982 +
            C14190 * C8981) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C8983 +
            (C9019 * C95 - C8981 * C148 + C9020 * C586 - C8982 * C660) *
                C26752) *
               C26753 * C6255 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C8983 +
            (C8981 * C1263 - C9019 * C1189 + C8982 * C2873 - C9020 * C2797) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C8983 +
            (C8981 * C149 - C9019 * C97 + C8982 * C663 - C9020 * C594) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C8983 +
            (C9019 * C1197 - C8981 * C1266 + C9020 * C2799 - C8982 * C2874) *
                C26752) *
               C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C8983 +
            (C8981 * C147 - C9019 * C93 + C8982 * C659 - C9020 * C588) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C8983 +
            (C9019 * C1191 - C8981 * C1262 + C9020 * C2795 - C8982 * C2872) *
                C26752) *
               C26753 * C26669) *
              C574 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) *
                C8983 +
            (C9019 * C588 - C8981 * C659 + C9020 * C590 - C8982 * C661) *
                C26752) *
               C26753 * C6255 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C8983 +
            (C8981 * C2872 - C9019 * C2795 + C8982 * C5833 - C9020 * C5778) *
                C26752) *
               C26753 * C26669) *
              C575 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C8983 +
            (C8981 * C661 - C9019 * C590 + C8982 * C3932 - C9020 * C3893) *
                C26752) *
               C26753 * C6255 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C8983 +
            (C9019 * C5778 - C8981 * C5833 + C9020 * C14180 - C8982 * C14241) *
                C26752) *
               C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26669) *
              C26589 * C3446 +
          ((((C211 - C210) * C8983 + (C213 - C212) * C26752) * C8981 +
            ((C736 - C737) * C8983 + (C738 - C739) * C26752) * C8982) *
               C6255 +
           (((C1340 - C1339) * C8983 + (C1342 - C1341) * C26752) * C8981 +
            ((C2952 - C2953) * C8983 + (C2954 - C2955) * C26752) * C8982) *
               C26669) *
              C26589 * C3447 +
          ((((C215 - C214) * C8983 + (C217 - C216) * C26752) * C8981 +
            ((C1900 - C1901) * C8983 + (C1902 - C1903) * C26752) * C8982) *
               C6255 +
           (((C2396 - C2395) * C8983 + (C2398 - C2397) * C26752) * C8981 +
            ((C198 * C2793 - C26753 * C2947) * C8983 +
             (C198 * C2799 - C26753 * C2950) * C26752) *
                C8982) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26753 * C199 - C198 * C87) * C8983 +
             (C26753 * C204 - C198 * C93) * C26752) *
                C8981 +
            ((C9444 - C9445) * C8983 + (C9446 - C9447) * C26752) * C8982) *
               C6255 +
           (((C198 * C1183 - C26753 * C1326) * C8983 +
             (C198 * C1191 - C26753 * C1332) * C26752) *
                C8981 +
            ((C11372 - C11373) * C8983 + (C11374 - C11375) * C26752) * C8982) *
               C26669) *
              C574 +
          ((((C9445 - C9444) * C8983 + (C9447 - C9446) * C26752) * C8981 +
            ((C9448 - C9449) * C8983 + (C9450 - C9451) * C26752) * C8982) *
               C6255 +
           (((C11373 - C11372) * C8983 + (C11375 - C11374) * C26752) * C8981 +
            ((C14295 - C14296) * C8983 + (C14297 - C14298) * C26752) * C8982) *
               C26669) *
              C575 +
          ((((C9449 - C9448) * C8983 + (C9451 - C9450) * C26752) * C8981 +
            ((C12361 - C12362) * C8983 + (C12363 - C12364) * C26752) * C8982) *
               C6255 +
           (((C14296 - C14295) * C8983 + (C14298 - C14297) * C26752) * C8981 +
            ((C198 * C14178 - C26753 * C14292) * C8983 +
             (C198 * C14180 - C26753 * C14293) * C26752) *
                C8982) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[29] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3446 +
                    (((C8983 * C88 - C26752 * C94) * C9019 +
                      (C8983 * C256 - C26752 * C261) * C8981 +
                      (C9510 - C9511) * C9020 + (C9512 - C9513) * C8982) *
                         C26753 * C6255 +
                     ((C26752 * C1188 - C8983 * C1182) * C9019 +
                      (C26752 * C1403 - C8983 * C1397) * C8981 +
                      (C11446 - C11447) * C9020 + (C11448 - C11449) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3447 +
                    (((C26752 * C96 - C8983 * C89) * C9019 +
                      (C26752 * C262 - C8983 * C257) * C8981 +
                      (C10452 - C10453) * C9020 + (C10454 - C10455) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1186 - C26752 * C1196) * C9019 +
                      (C8983 * C1400 - C26752 * C1406) * C8981 +
                      (C8983 * C2793 - C26752 * C2798) * C9020 +
                      (C8983 * C3023 - C26752 * C3026) * C8982) *
                         C26753 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C9019 +
                      (C26752 * C260 - C8983 * C255) * C8981 +
                      (C9502 - C9503) * C9020 + (C9504 - C9505) * C8982) *
                         C26753 * C6255 +
                     ((C8983 * C1183 - C26752 * C1190) * C9019 +
                      (C8983 * C1396 - C26752 * C1402) * C8981 +
                      (C11442 - C11443) * C9020 + (C11444 - C11445) * C8982) *
                         C26753 * C26669) *
                        C574 +
                    (((C9503 - C9502) * C9019 + (C9505 - C9504) * C8981 +
                      (C9506 - C9507) * C9020 + (C9508 - C9509) * C8982) *
                         C26753 * C6255 +
                     ((C11443 - C11442) * C9019 + (C11445 - C11444) * C8981 +
                      (C14351 - C14352) * C9020 + (C14353 - C14354) * C8982) *
                         C26753 * C26669) *
                        C575 +
                    (((C9507 - C9506) * C9019 + (C9509 - C9508) * C8981 +
                      (C12401 - C12402) * C9020 + (C12403 - C12404) * C8982) *
                         C26753 * C6255 +
                     ((C14352 - C14351) * C9019 + (C14354 - C14353) * C8981 +
                      (C8983 * C14178 - C26752 * C14179) * C9020 +
                      (C8983 * C14348 - C26752 * C14349) * C8982) *
                         C26753 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eeyy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C6255 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C26589 * C3446 +
          ((C9019 * C1257 - C9123 * C1182 - C9019 * C1397 + C8981 * C1458 +
            C9020 * C2870 - C9124 * C2792 - C9020 * C3022 + C8982 * C3094) *
               C26752 * C26753 * C26669 -
           (C9020 * C654 - C9124 * C579 - C9020 * C794 + C8982 * C855 +
            C9019 * C143 - C9123 * C88 - C9019 * C256 + C8981 * C301) *
               C26752 * C26753 * C6255) *
              C26589 * C3447 +
          ((C9019 * C144 - C9123 * C89 - C9019 * C257 + C8981 * C302 +
            C9020 * C657 - C9124 * C583 - C9020 * C797 + C8982 * C859) *
               C26752 * C26753 * C6255 -
           (C9020 * C2871 - C9124 * C2793 - C9020 * C3023 + C8982 * C3095 +
            C9019 * C1260 - C9123 * C1186 - C9019 * C1400 + C8981 * C1462) *
               C26752 * C26753 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C9019 * C142 - C9123 * C87 - C9019 * C255 + C8981 * C300 +
            C9020 * C653 - C9124 * C580 - C9020 * C793 + C8982 * C856) *
               C26752 * C26753 * C6255 -
           (C9020 * C2869 - C9124 * C2791 - C9020 * C3021 + C8982 * C3093 +
            C9019 * C1256 - C9123 * C1183 - C9019 * C1396 + C8981 * C1459) *
               C26752 * C26753 * C26669) *
              C574 +
          ((C9019 * C2869 - C9123 * C2791 - C9019 * C3021 + C8981 * C3093 +
            C9020 * C5831 - C9124 * C5774 - C9020 * C5939 + C8982 * C5994) *
               C26752 * C26753 * C26669 -
           (C9020 * C655 - C9124 * C581 - C9020 * C795 + C8982 * C857 +
            C9019 * C653 - C9123 * C580 - C9019 * C793 + C8981 * C856) *
               C26752 * C26753 * C6255) *
              C575 +
          ((C9019 * C655 - C9123 * C581 - C9019 * C795 + C8981 * C857 +
            C9020 * C3930 - C9124 * C3889 - C9020 * C4006 + C8982 * C4045) *
               C26752 * C26753 * C6255 -
           (C9020 * C14240 - C9124 * C14178 - C9020 * C14348 + C8982 * C14404 +
            C9019 * C5831 - C9123 * C5774 - C9019 * C5939 + C8981 * C5994) *
               C26752 * C26753 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[29] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3446 +
                    (((C211 - C210) * C9019 + (C367 - C366) * C8981 +
                      (C736 - C737) * C9020 + (C932 - C933) * C8982) *
                         C26752 * C6255 +
                     ((C1340 - C1339) * C9019 + (C1536 - C1535) * C8981 +
                      (C2952 - C2953) * C9020 + (C3173 - C3174) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3447 +
                    (((C215 - C214) * C9019 + (C369 - C368) * C8981 +
                      (C1900 - C1901) * C9020 + (C2065 - C2066) * C8982) *
                         C26752 * C6255 +
                     ((C2396 - C2395) * C9019 + (C2561 - C2560) * C8981 +
                      (C198 * C2793 - C26753 * C2947) * C9020 +
                      (C198 * C3023 - C26753 * C3171) * C8982) *
                         C26752 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26753 * C199 - C198 * C87) * C9019 +
                      (C26753 * C360 - C198 * C255) * C8981 +
                      (C9444 - C9445) * C9020 + (C9618 - C9619) * C8982) *
                         C26752 * C6255 +
                     ((C198 * C1183 - C26753 * C1326) * C9019 +
                      (C198 * C1396 - C26753 * C1528) * C8981 +
                      (C11372 - C11373) * C9020 + (C11582 - C11583) * C8982) *
                         C26752 * C26669) *
                        C574 +
                    (((C9445 - C9444) * C9019 + (C9619 - C9618) * C8981 +
                      (C9448 - C9449) * C9020 + (C9620 - C9621) * C8982) *
                         C26752 * C6255 +
                     ((C11373 - C11372) * C9019 + (C11583 - C11582) * C8981 +
                      (C14295 - C14296) * C9020 + (C14457 - C14458) * C8982) *
                         C26752 * C26669) *
                        C575 +
                    (((C9449 - C9448) * C9019 + (C9621 - C9620) * C8981 +
                      (C12361 - C12362) * C9020 + (C12475 - C12476) * C8982) *
                         C26752 * C6255 +
                     ((C14296 - C14295) * C9019 + (C14458 - C14457) * C8981 +
                      (C198 * C14178 - C26753 * C14292) * C9020 +
                      (C198 * C14348 - C26753 * C14455) * C8982) *
                         C26752 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezx[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26669) *
              C26589 * C3446 +
          ((((C8983 * C88 - C26752 * C94) * C198 +
             (C8983 * C406 - C26752 * C411) * C26753) *
                C8981 +
            ((C9510 - C9511) * C198 + (C9676 - C9677) * C26753) * C8982) *
               C6255 +
           (((C26752 * C1188 - C8983 * C1182) * C198 +
             (C26752 * C1595 - C8983 * C1589) * C26753) *
                C8981 +
            ((C11446 - C11447) * C198 + (C11652 - C11653) * C26753) * C8982) *
               C26669) *
              C26589 * C3447 +
          ((((C26752 * C96 - C8983 * C89) * C198 +
             (C26752 * C412 - C8983 * C407) * C26753) *
                C8981 +
            ((C10452 - C10453) * C198 + (C10606 - C10607) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1186 - C26752 * C1196) * C198 +
             (C8983 * C1592 - C26752 * C1598) * C26753) *
                C8981 +
            ((C8983 * C2793 - C26752 * C2798) * C198 +
             (C8983 * C3242 - C26752 * C3245) * C26753) *
                C8982) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C198 +
             (C26752 * C410 - C8983 * C405) * C26753) *
                C8981 +
            ((C9502 - C9503) * C198 + (C9672 - C9673) * C26753) * C8982) *
               C6255 +
           (((C8983 * C1183 - C26752 * C1190) * C198 +
             (C8983 * C1588 - C26752 * C1594) * C26753) *
                C8981 +
            ((C11442 - C11443) * C198 + (C11650 - C11651) * C26753) * C8982) *
               C26669) *
              C574 +
          ((((C9503 - C9502) * C198 + (C9673 - C9672) * C26753) * C8981 +
            ((C9506 - C9507) * C198 + (C9674 - C9675) * C26753) * C8982) *
               C6255 +
           (((C11443 - C11442) * C198 + (C11651 - C11650) * C26753) * C8981 +
            ((C14351 - C14352) * C198 + (C14511 - C14512) * C26753) * C8982) *
               C26669) *
              C575 +
          ((((C9507 - C9506) * C198 + (C9675 - C9674) * C26753) * C8981 +
            ((C12401 - C12402) * C198 + (C12513 - C12514) * C26753) * C8982) *
               C6255 +
           (((C14352 - C14351) * C198 + (C14512 - C14511) * C26753) * C8981 +
            ((C8983 * C14178 - C26752 * C14179) * C198 +
             (C8983 * C14508 - C26752 * C14509) * C26753) *
                C8982) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezy[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3446 +
          (((C9019 * C88 - C8981 * C143 + C9020 * C579 - C8982 * C654) * C198 +
            (C9019 * C406 - C8981 * C450 + C9020 * C986 - C8982 * C1048) *
                C26753) *
               C26752 * C6255 +
           ((C8981 * C1257 - C9019 * C1182 + C8982 * C2870 - C9020 * C2792) *
                C198 +
            (C8981 * C1651 - C9019 * C1589 + C8982 * C3313 - C9020 * C3241) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3447 +
          (((C8981 * C144 - C9019 * C89 + C8982 * C657 - C9020 * C583) * C198 +
            (C8981 * C451 - C9019 * C407 + C8982 * C1051 - C9020 * C989) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1186 - C8981 * C1260 + C9020 * C2793 - C8982 * C2871) *
                C198 +
            (C9019 * C1592 - C8981 * C1654 + C9020 * C3242 - C8982 * C3314) *
                C26753) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8981 * C142 - C9019 * C87 + C8982 * C653 - C9020 * C580) * C198 +
            (C8981 * C449 - C9019 * C405 + C8982 * C1047 - C9020 * C985) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C1183 - C8981 * C1256 + C9020 * C2791 - C8982 * C2869) *
                C198 +
            (C9019 * C1588 - C8981 * C1650 + C9020 * C3240 - C8982 * C3312) *
                C26753) *
               C26752 * C26669) *
              C574 +
          (((C9019 * C580 - C8981 * C653 + C9020 * C581 - C8982 * C655) * C198 +
            (C9019 * C985 - C8981 * C1047 + C9020 * C987 - C8982 * C1049) *
                C26753) *
               C26752 * C6255 +
           ((C8981 * C2869 - C9019 * C2791 + C8982 * C5831 - C9020 * C5774) *
                C198 +
            (C8981 * C3312 - C9019 * C3240 + C8982 * C6151 - C9020 * C6097) *
                C26753) *
               C26752 * C26669) *
              C575 +
          (((C8981 * C655 - C9019 * C581 + C8982 * C3930 - C9020 * C3889) *
                C198 +
            (C8981 * C1049 - C9019 * C987 + C8982 * C4154 - C9020 * C4116) *
                C26753) *
               C26752 * C6255 +
           ((C9019 * C5774 - C8981 * C5831 + C9020 * C14178 - C8982 * C14240) *
                C198 +
            (C9019 * C6097 - C8981 * C6151 + C9020 * C14508 - C8982 * C14562) *
                C26753) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezz[29] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C6255 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C26589 * C3446 +
          ((C1729 * C8981 + C3393 * C8982) * C26752 * C26669 -
           (C1126 * C8982 + C519 * C8981) * C26752 * C6255) *
              C26589 * C3447 +
          ((C520 * C8981 + C2229 * C8982) * C26752 * C6255 -
           ((C198 * C2947 - C494 * C2793 - C198 * C3242 + C26753 * C3385) *
                C8982 +
            C2724 * C8981) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C198 * C199 - C494 * C87 - C198 * C405 + C26753 * C495) * C8981 +
            C9792 * C8982) *
               C26752 * C6255 -
           (C11792 * C8982 +
            (C198 * C1326 - C494 * C1183 - C198 * C1588 + C26753 * C1711) *
                C8981) *
               C26752 * C26669) *
              C574 +
          ((C11792 * C8981 + C14621 * C8982) * C26752 * C26669 -
           (C9793 * C8982 + C9792 * C8981) * C26752 * C6255) *
              C575 +
          ((C9793 * C8981 + C12591 * C8982) * C26752 * C6255 -
           ((C198 * C14292 - C494 * C14178 - C198 * C14508 + C26753 * C14613) *
                C8982 +
            C14621 * C8981) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26605 * C26717 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C26641) *
              C26743 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C26641 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C26717) *
              C26744 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
                C17372) *
               C26754 * C26605 * C26717 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C17372 +
            C10300 * C17371) *
               C26754 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26605 * C26717 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C141 * C2791 - C26754 * C2869) * C8983 +
             (C141 * C2795 - C26754 * C2872) * C26752) *
                C17372) *
               C26605 * C26641) *
              C26743 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C26717 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C26641) *
              C26744 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C26605 * C26717 +
           (((C1845 - C1844) * C8983 + (C1847 - C1846) * C26752) * C17371 +
            ((C141 * C2793 - C26754 * C2871) * C8983 +
             (C141 * C2799 - C26754 * C2874) * C26752) *
                C17372) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C26717 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C26641) *
              C26743 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C26717 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C26641) *
              C26744 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C26605 * C26717 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C8983 +
            (C17441 * C594 - C17371 * C733 + C17442 * C2799 - C17372 * C2950) *
                C26752) *
               C26754 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26605 * C26717 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C26641) *
              C26743 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26605 * C26717 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C26641) *
              C26744 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C26752 * C1196 - C8983 * C1186) * C141 +
             (C26752 * C1406 - C8983 * C1400) * C26754) *
                C17372) *
               C26605 * C26717 +
           (((C10453 - C10452) * C141 + (C10455 - C10454) * C26754) * C17371 +
            ((C8983 * C2793 - C26752 * C2798) * C141 +
             (C8983 * C3023 - C26752 * C3026) * C26754) *
                C17372) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26605 * C26717 -
           ((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C26752 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C26641) *
              C26743 +
          ((C874 * C26752 * C17371 + C3103 * C26752 * C17372) * C26605 *
               C26641 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26605 * C26717) *
              C26744 +
          ((C325 * C26752 * C17371 + C2508 * C26752 * C17372) * C26605 *
               C26717 -
           ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                C26752 * C17372 +
            C2013 * C26752 * C17371) *
               C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C26717 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C26641) *
              C26743 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C26717 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C26641) *
              C26744 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C26605 * C26717 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C141 +
            (C17441 * C797 - C17371 * C929 + C17442 * C3023 - C17372 * C3171) *
                C26754) *
               C26752 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezx[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26605 * C26717 +
                     ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26605 * C26641) *
                        C26743 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26605 * C26717 +
                     ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
                      (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                         C26754 * C26605 * C26641) *
                        C26744 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C26752 * C1196 - C8983 * C1186) * C17442 +
                      (C26752 * C1598 - C8983 * C1592) * C17372) *
                         C26754 * C26605 * C26717 +
                     ((C10453 - C10452) * C17441 + (C10607 - C10606) * C17371 +
                      (C8983 * C2793 - C26752 * C2798) * C17442 +
                      (C8983 * C3242 - C26752 * C3245) * C17372) *
                         C26754 * C26605 * C26641) *
                        C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[30] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26605 * C26717 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C141 * C2791 - C26754 * C2869) * C17442 +
                      (C141 * C3240 - C26754 * C3312) * C17372) *
                         C26752 * C26605 * C26641) *
                        C26743 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C26717 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C26641) *
                        C26744 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C26605 * C26717 +
                     ((C1845 - C1844) * C17441 + (C2171 - C2170) * C17371 +
                      (C141 * C2793 - C26754 * C2871) * C17442 +
                      (C141 * C3242 - C26754 * C3314) * C17372) *
                         C26752 * C26605 * C26641) *
                        C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[30] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C26717 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C26641) *
              C26743 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C26641 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C26717) *
              C26744 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C26605 * C26717 -
           (C17442 * C2947 - C17648 * C2793 - C17442 * C3242 + C17372 * C3385 +
            C17441 * C727 - C17647 * C583 - C17441 * C989 + C17371 * C1111) *
               C26754 * C26752 * C26605 * C26641) *
              C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C17371 +
             C18174 * C17372) *
                C26754 * C26718 -
            (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
               C26717 +
           ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
            (C11236 * C17372 + C9336 * C17371) * C26754 * C26718) *
               C26641) *
              C577 +
          (((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
            (C18176 * C17372 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C17371) *
                C26754 * C26718) *
               C26717 +
           ((C9338 * C17371 + C11237 * C17372) * C26754 * C26718 -
            ((C8983 * C4244 - C8984 * C4242 - C8983 * C4245 + C26752 * C4248) *
                 C17372 +
             C11237 * C17371) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C8983 +
              (C26754 * C147 - C141 * C93) * C26752) *
                 C17371 +
             ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) *
                 C17372) *
                C26718 +
            (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
             ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) *
                 C17372) *
                C26669) *
               C26717 +
           ((((C141 * C580 - C26754 * C653) * C8983 +
              (C141 * C588 - C26754 * C659) * C26752) *
                 C17371 +
             ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) *
                 C17372) *
                C26718 +
            (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
             ((C26754 * C4300 - C141 * C4243) * C8983 +
              (C26754 * C4302 - C141 * C4247) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C577 +
          (((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
             ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
                C26718 +
            (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
             ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
                C26669) *
               C26717 +
           ((((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
             ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
                C26718 +
            (((C2877 - C2876) * C8983 + (C2879 - C2878) * C26752) * C17371 +
             ((C141 * C4242 - C26754 * C4301) * C8983 +
              (C141 * C4245 - C26754 * C4303) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C8983 +
             (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                 C26752) *
                C26754 * C26718 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C8983 +
             (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
              C17372 * C1334) *
                 C26752) *
                C26754 * C26669) *
               C26717 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C8983 +
             (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                 C26752) *
                C26754 * C26718 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C8983 +
             (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
              C17442 * C4247) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C577 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C8983 +
             (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                 C26752) *
                C26754 * C26718 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C8983 +
             (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
              C17442 * C1195) *
                 C26752) *
                C26754 * C26669) *
               C26717 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C8983 +
             (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                 C26752) *
                C26754 * C26718 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C8983 +
             (C17441 * C2797 - C17371 * C2949 + C17442 * C4245 -
              C17372 * C4357) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C141 +
              (C26752 * C260 - C8983 * C255) * C26754) *
                 C17371 +
             ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
                C26718 +
            (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
             ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
                C26669) *
               C26717 +
           ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
             ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
                C26718 +
            (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
             ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
                C26669) *
               C26641) *
              C577 +
          (((((C8983 * C88 - C26752 * C94) * C141 +
              (C8983 * C256 - C26752 * C261) * C26754) *
                 C17371 +
             ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
                C26718 +
            (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
             ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
                C26669) *
               C26717 +
           ((((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
             ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
                C26718 +
            (((C11447 - C11446) * C141 + (C11449 - C11448) * C26754) * C17371 +
             ((C8983 * C4242 - C26752 * C4244) * C141 +
              (C8983 * C4409 - C26752 * C4411) * C26754) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                 C17371 +
             C18418 * C17372) *
                C26718 -
            (C18419 * C17372 + C18418 * C17371) * C26669) *
               C26717 +
           ((C19888 * C17371 +
             (C141 * C4300 - C299 * C4243 - C141 * C4408 + C26754 * C4463) *
                 C26752 * C17372) *
                C26669 -
            (C19888 * C17372 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) *
                 C26752 * C17371) *
                C26718) *
               C26641) *
              C577 +
          (((C18410 * C17371 + C18411 * C17372) * C26669 -
            (C18410 * C17372 + C324 * C26752 * C17371) * C26718) *
               C26717 +
           ((C874 * C26752 * C17371 + C19884 * C17372) * C26718 -
            ((C141 * C4301 - C299 * C4242 - C141 * C4409 + C26754 * C4462) *
                 C26752 * C17372 +
             C19884 * C17371) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C141 +
             (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                 C26754) *
                C26752 * C26718 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C141 +
             (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
              C17372 * C1530) *
                 C26754) *
                C26752 * C26669) *
               C26717 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C141 +
             (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                 C26754) *
                C26752 * C26718 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C141 +
             (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
              C17442 * C4408) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C577 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C141 +
             (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                 C26754) *
                C26752 * C26718 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C141 +
             (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
              C17442 * C1399) *
                 C26754) *
                C26752 * C26669) *
               C26717 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C141 +
             (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                 C26754) *
                C26752 * C26718 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C141 +
             (C17441 * C3022 - C17371 * C3170 + C17442 * C4409 -
              C17372 * C4515) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C17441 +
             (C26752 * C410 - C8983 * C405) * C17371 +
             (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                C26754 * C26718 +
            ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
             (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                C26754 * C26669) *
               C26717 +
           (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
             (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                C26754 * C26718 +
            ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
             (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                C26754 * C26669) *
               C26641) *
              C577 +
          ((((C8983 * C88 - C26752 * C94) * C17441 +
             (C8983 * C406 - C26752 * C411) * C17371 +
             (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                C26754 * C26718 +
            ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
             (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                C26754 * C26669) *
               C26717 +
           (((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
             (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                C26754 * C26718 +
            ((C11447 - C11446) * C17441 + (C11653 - C11652) * C17371 +
             (C8983 * C4242 - C26752 * C4244) * C17442 +
             (C8983 * C4567 - C26752 * C4569) * C17372) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C17441 +
             (C26754 * C449 - C141 * C405) * C17371 +
             (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                C26752 * C26718 +
            ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
             (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                C26752 * C26669) *
               C26717 +
           (((C141 * C580 - C26754 * C653) * C17441 +
             (C141 * C985 - C26754 * C1047) * C17371 +
             (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                C26752 * C26718 +
            ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
             (C26754 * C4300 - C141 * C4243) * C17442 +
             (C26754 * C4620 - C141 * C4566) * C17372) *
                C26752 * C26669) *
               C26641) *
              C577 +
          ((((C154 - C153) * C17441 + (C456 - C455) * C17371 +
             (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                C26752 * C26718 +
            ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
             (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                C26752 * C26669) *
               C26717 +
           (((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
             (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                C26752 * C26718 +
            ((C2877 - C2876) * C17441 + (C3317 - C3316) * C17371 +
             (C141 * C4242 - C26754 * C4301) * C17442 +
             (C141 * C4567 - C26754 * C4621) * C17372) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[31] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
             C17442 * C1326 - C17648 * C1183 - C17442 * C1588 +
             C17372 * C1711) *
                C26754 * C26752 * C26718 -
            (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
             C17441 * C1326 - C17647 * C1183 - C17441 * C1588 +
             C17371 * C1711) *
                C26754 * C26752 * C26669) *
               C26717 +
           ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
             C17442 * C4354 - C17648 * C4243 - C17442 * C4566 +
             C17372 * C4673) *
                C26754 * C26752 * C26669 -
            (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
             C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
                C26754 * C26752 * C26718) *
               C26641) *
              C577 +
          (((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
             C17442 * C1329 - C17648 * C1185 - C17442 * C1591 +
             C17372 * C1713) *
                C26754 * C26752 * C26669 -
            (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
             C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
                C26754 * C26752 * C26718) *
               C26717 +
           ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
             C17442 * C2946 - C17648 * C2792 - C17442 * C3241 +
             C17372 * C3384) *
                C26754 * C26752 * C26718 -
            (C17442 * C4355 - C17648 * C4242 - C17442 * C4567 + C17372 * C4672 +
             C17441 * C2946 - C17647 * C2792 - C17441 * C3241 +
             C17371 * C3384) *
                C26754 * C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C17372) *
               C26754 * C26605 * C574 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C575 +
           (C9337 * C17371 + C14189 * C17372) * C26754 * C26605 * C576) *
              C577 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C575 -
           ((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C574 -
           ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                C17372 +
            C9339 * C17371) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
           (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
               C17372) *
              C26754 * C26605 * C26589 * C79 -
          ((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
               C17372 +
           (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C17371) *
              C26754 * C26605 * C26589 * C80 +
          ((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
           (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
               C17372) *
              C26754 * C26605 * C26589 * C81 -
          ((C8983 * C2283 - C8984 * C2282 - C8983 * C2284 + C26752 * C2285) *
               C17372 +
           (C8983 * C98 - C8984 * C90 - C8983 * C99 + C26752 * C105) * C17371) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C1179 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C1180 +
           (C18175 * C17371 +
            (C8983 * C7149 - C8984 * C7146 - C8983 * C7150 + C26752 * C7152) *
                C17372) *
               C26754 * C1181) *
              C26589 * C577 +
          ((C18176 * C17371 + C18177 * C17372) * C26754 * C1180 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C1179 -
           ((C8983 * C7147 - C8984 * C7145 - C8983 * C7148 + C26752 * C7151) *
                C17372 +
            C18177 * C17371) *
               C26754 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexy[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C26754 * C1256 - C141 * C1183) * C8983 +
             (C26754 * C1262 - C141 * C1191) * C26752) *
                C17372) *
               C26605 * C574 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C141 * C2791 - C26754 * C2869) * C8983 +
             (C141 * C2795 - C26754 * C2872) * C26752) *
                C17372) *
               C26605 * C575 +
           (((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C26754 * C5831 - C141 * C5774) * C8983 +
             (C26754 * C5833 - C141 * C5778) * C26752) *
                C17372) *
               C26605 * C576) *
              C577 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C574 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C575 +
           (((C671 - C670) * C8983 + (C673 - C672) * C26752) * C17371 +
            ((C141 * C5773 - C26754 * C5832) * C8983 +
             (C141 * C5776 - C26754 * C5834) * C26752) *
                C17372) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C8983 +
            (C26754 * C147 - C141 * C93) * C26752) *
               C17371 +
           ((C26754 * C1256 - C141 * C1183) * C8983 +
            (C26754 * C1262 - C141 * C1191) * C26752) *
               C17372) *
              C26605 * C26589 * C79 +
          (((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
           ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
              C26605 * C26589 * C80 +
          (((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
           ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
              C26605 * C26589 * C81 +
          (((C162 - C161) * C8983 + (C164 - C163) * C26752) * C17371 +
           ((C141 * C2282 - C26754 * C2336) * C8983 +
            (C141 * C2284 - C26754 * C2337) * C26752) *
               C17372) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C1179 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C1180 +
           (((C18233 - C18232) * C8983 + (C18235 - C18234) * C26752) * C17371 +
            ((C26754 * C7187 - C141 * C7146) * C8983 +
             (C26754 * C7189 - C141 * C7150) * C26752) *
                C17372) *
               C1181) *
              C26589 * C577 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C1179 +
           (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
            ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
               C1180 +
           (((C1274 - C1273) * C8983 + (C1276 - C1275) * C26752) * C17371 +
            ((C141 * C7145 - C26754 * C7188) * C8983 +
             (C141 * C7148 - C26754 * C7190) * C26752) *
                C17372) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexz[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C574 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C575 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C26605 * C576) *
              C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C574 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C575 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C8983 +
            (C17441 * C592 - C17371 * C732 + C17442 * C5776 - C17372 * C5888) *
                C26752) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C8983 +
           (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
               C26752) *
              C26754 * C26605 * C26589 * C79 +
          ((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
               C8983 +
           (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
               C26752) *
              C26754 * C26605 * C26589 * C80 +
          ((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
               C8983 +
           (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
               C26752) *
              C26754 * C26605 * C26589 * C81 +
          ((C17441 * C90 - C17371 * C202 + C17442 * C2282 - C17372 * C2392) *
               C8983 +
           (C17441 * C99 - C17371 * C207 + C17442 * C2284 - C17372 * C2393) *
               C26752) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C1179 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C1180 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C8983 +
            (C17371 * C1334 - C17441 * C1193 + C17372 * C7227 -
             C17442 * C7150) *
                C26752) *
               C26754 * C1181) *
              C26589 * C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C1179 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C8983 +
            (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
             C17442 * C1195) *
                C26752) *
               C26754 * C1180 +
           ((C17441 * C1185 - C17371 * C1329 + C17442 * C7145 -
             C17372 * C7226) *
                C8983 +
            (C17441 * C1195 - C17371 * C1335 + C17442 * C7148 -
             C17372 * C7228) *
                C26752) *
               C26754 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[32] +=
        (-std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C26752 * C1190 - C8983 * C1183) * C141 +
             (C26752 * C1402 - C8983 * C1396) * C26754) *
                C17372) *
               C26605 * C574 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C575 +
           (((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C26605 * C576) *
              C577 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C8983 * C1182 - C26752 * C1188) * C141 +
             (C8983 * C1397 - C26752 * C1403) * C26754) *
                C17372) *
               C26605 * C574 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C575 +
           (((C9515 - C9514) * C141 + (C9517 - C9516) * C26754) * C17371 +
            ((C8983 * C5773 - C26752 * C5775) * C141 +
             (C8983 * C5940 - C26752 * C5942) * C26754) *
                C17372) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * ((((C26752 * C92 - C8983 * C87) * C141 +
                                (C26752 * C260 - C8983 * C255) * C26754) *
                                   C17371 +
                               ((C26752 * C1190 - C8983 * C1183) * C141 +
                                (C26752 * C1402 - C8983 * C1396) * C26754) *
                                   C17372) *
                                  C26605 * C26589 * C79 +
                              (((C8983 * C88 - C26752 * C94) * C141 +
                                (C8983 * C256 - C26752 * C261) * C26754) *
                                   C17371 +
                               ((C8983 * C1182 - C26752 * C1188) * C141 +
                                (C8983 * C1397 - C26752 * C1403) * C26754) *
                                   C17372) *
                                  C26605 * C26589 * C80 +
                              (((C26752 * C96 - C8983 * C89) * C141 +
                                (C26752 * C262 - C8983 * C257) * C26754) *
                                   C17371 +
                               ((C26752 * C1196 - C8983 * C1186) * C141 +
                                (C26752 * C1406 - C8983 * C1400) * C26754) *
                                   C17372) *
                                  C26605 * C26589 * C81 +
                              (((C8983 * C90 - C26752 * C98) * C141 +
                                (C8983 * C258 - C26752 * C263) * C26754) *
                                   C17371 +
                               ((C8983 * C2282 - C26752 * C2283) * C141 +
                                (C8983 * C2448 - C26752 * C2449) * C26754) *
                                   C17372) *
                                  C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C1179 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C1180 +
           (((C18341 - C18340) * C141 + (C18343 - C18342) * C26754) * C17371 +
            ((C26752 * C7149 - C8983 * C7146) * C141 +
             (C26752 * C7265 - C8983 * C7263) * C26754) *
                C17372) *
               C1181) *
              C26589 * C577 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C1179 +
           (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
            ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
               C1180 +
           (((C18349 - C18348) * C141 + (C18351 - C18350) * C26754) * C17371 +
            ((C8983 * C7145 - C26752 * C7147) * C141 +
             (C8983 * C7264 - C26752 * C7266) * C26754) *
                C17372) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C26752 * C17372) *
               C26605 * C574 -
           ((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C26752 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C575 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C26752 * C17372) *
               C26605 * C576) *
              C577 +
          ((C874 * C26752 * C17371 + C3103 * C26752 * C17372) * C26605 * C575 -
           (C1477 * C26752 * C17372 + C324 * C26752 * C17371) * C26605 * C574 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C26752 * C17372 +
            C875 * C26752 * C17371) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
               C17371 +
           (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
               C26752 * C17372) *
              C26605 * C26589 * C79 -
          (C1477 * C26752 * C17372 + C324 * C26752 * C17371) * C26605 * C26589 *
              C80 +
          (C325 * C26752 * C17371 + C2508 * C26752 * C17372) * C26605 * C26589 *
              C81 -
          ((C141 * C2336 - C299 * C2282 - C141 * C2448 + C26754 * C2500) *
               C26752 * C17372 +
           C326 * C26752 * C17371) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C1179 -
           (C18419 * C17372 + C18418 * C17371) * C1180 +
           (C18419 * C17371 +
            (C141 * C7187 - C299 * C7146 - C141 * C7263 + C26754 * C7302) *
                C26752 * C17372) *
               C1181) *
              C26589 * C577 +
          ((C18410 * C17371 + C18411 * C17372) * C1180 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C1179 -
           ((C141 * C7188 - C299 * C7145 - C141 * C7264 + C26754 * C7301) *
                C26752 * C17372 +
            C18411 * C17371) *
               C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C574 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C575 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C26605 * C576) *
              C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C574 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C575 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C141 +
            (C17441 * C796 - C17371 * C928 + C17442 * C5940 - C17372 * C6046) *
                C26754) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C141 +
           (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
               C26754) *
              C26752 * C26605 * C26589 * C79 +
          ((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
               C141 +
           (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
               C26754) *
              C26752 * C26605 * C26589 * C80 +
          ((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
               C141 +
           (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
               C26754) *
              C26752 * C26605 * C26589 * C81 +
          ((C17441 * C90 - C17371 * C202 + C17442 * C2282 - C17372 * C2392) *
               C141 +
           (C17441 * C258 - C17371 * C363 + C17442 * C2448 - C17372 * C2558) *
               C26754) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C1179 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C1180 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C141 +
            (C17371 * C1530 - C17441 * C1398 + C17372 * C7337 -
             C17442 * C7263) *
                C26754) *
               C26752 * C1181) *
              C26589 * C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C1179 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C141 +
            (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
             C17442 * C1399) *
                C26754) *
               C26752 * C1180 +
           ((C17441 * C1185 - C17371 * C1329 + C17442 * C7145 -
             C17372 * C7226) *
                C141 +
            (C17441 * C1399 - C17371 * C1531 + C17442 * C7264 -
             C17372 * C7338) *
                C26754) *
               C26752 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezx[32] +=
        (-std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C17441 +
            (C26752 * C410 - C8983 * C405) * C17371 +
            (C26752 * C1190 - C8983 * C1183) * C17442 +
            (C26752 * C1594 - C8983 * C1588) * C17372) *
               C26754 * C26605 * C574 +
           ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
            (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
               C26754 * C26605 * C575 +
           ((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
            (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
               C26754 * C26605 * C576) *
              C577 +
          (((C8983 * C88 - C26752 * C94) * C17441 +
            (C8983 * C406 - C26752 * C411) * C17371 +
            (C8983 * C1182 - C26752 * C1188) * C17442 +
            (C8983 * C1589 - C26752 * C1595) * C17372) *
               C26754 * C26605 * C574 +
           ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
            (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
               C26754 * C26605 * C575 +
           ((C9515 - C9514) * C17441 + (C9679 - C9678) * C17371 +
            (C8983 * C5773 - C26752 * C5775) * C17442 +
            (C8983 * C6098 - C26752 * C6100) * C17372) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((C26752 * C92 - C8983 * C87) * C17441 +
                               (C26752 * C410 - C8983 * C405) * C17371 +
                               (C26752 * C1190 - C8983 * C1183) * C17442 +
                               (C26752 * C1594 - C8983 * C1588) * C17372) *
                                  C26754 * C26605 * C26589 * C79 +
                              ((C8983 * C88 - C26752 * C94) * C17441 +
                               (C8983 * C406 - C26752 * C411) * C17371 +
                               (C8983 * C1182 - C26752 * C1188) * C17442 +
                               (C8983 * C1589 - C26752 * C1595) * C17372) *
                                  C26754 * C26605 * C26589 * C80 +
                              ((C26752 * C96 - C8983 * C89) * C17441 +
                               (C26752 * C412 - C8983 * C407) * C17371 +
                               (C26752 * C1196 - C8983 * C1186) * C17442 +
                               (C26752 * C1598 - C8983 * C1592) * C17372) *
                                  C26754 * C26605 * C26589 * C81 +
                              ((C8983 * C90 - C26752 * C98) * C17441 +
                               (C8983 * C408 - C26752 * C413) * C17371 +
                               (C8983 * C2282 - C26752 * C2283) * C17442 +
                               (C8983 * C2611 - C26752 * C2612) * C17372) *
                                  C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C17441 +
            (C26752 * C410 - C8983 * C405) * C17371 +
            (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
               C26754 * C1179 +
           ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
            (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
               C26754 * C1180 +
           ((C18341 - C18340) * C17441 + (C18523 - C18522) * C17371 +
            (C26752 * C7149 - C8983 * C7146) * C17442 +
            (C26752 * C7375 - C8983 * C7373) * C17372) *
               C26754 * C1181) *
              C26589 * C577 +
          (((C8983 * C88 - C26752 * C94) * C17441 +
            (C8983 * C406 - C26752 * C411) * C17371 +
            (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
               C26754 * C1179 +
           ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
            (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
               C26754 * C1180 +
           ((C18349 - C18348) * C17441 + (C18527 - C18526) * C17371 +
            (C8983 * C7145 - C26752 * C7147) * C17442 +
            (C8983 * C7374 - C26752 * C7376) * C17372) *
               C26754 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezy[32] += (-std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C26754 * C1256 - C141 * C1183) * C17442 +
                      (C26754 * C1650 - C141 * C1588) * C17372) *
                         C26752 * C26605 * C574 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C141 * C2791 - C26754 * C2869) * C17442 +
                      (C141 * C3240 - C26754 * C3312) * C17372) *
                         C26752 * C26605 * C575 +
                     ((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C26754 * C5831 - C141 * C5774) * C17442 +
                      (C26754 * C6151 - C141 * C6097) * C17372) *
                         C26752 * C26605 * C576) *
                        C577 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C574 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C575 +
                     ((C671 - C670) * C17441 + (C1057 - C1056) * C17371 +
                      (C141 * C5773 - C26754 * C5832) * C17442 +
                      (C141 * C6098 - C26754 * C6152) * C17372) *
                         C26752 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   (((C26754 * C142 - C141 * C87) * C17441 +
                     (C26754 * C449 - C141 * C405) * C17371 +
                     (C26754 * C1256 - C141 * C1183) * C17442 +
                     (C26754 * C1650 - C141 * C1588) * C17372) *
                        C26752 * C26605 * C26589 * C79 +
                    ((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                     (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                        C26752 * C26605 * C26589 * C80 +
                    ((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                     (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                        C26752 * C26605 * C26589 * C81 +
                    ((C162 - C161) * C17441 + (C460 - C459) * C17371 +
                     (C141 * C2282 - C26754 * C2336) * C17442 +
                     (C141 * C2611 - C26754 * C2663) * C17372) *
                        C26752 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C1179 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C1180 +
                     ((C18233 - C18232) * C17441 + (C18581 - C18580) * C17371 +
                      (C26754 * C7187 - C141 * C7146) * C17442 +
                      (C26754 * C7411 - C141 * C7373) * C17372) *
                         C26752 * C1181) *
                        C26589 * C577 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C1179 +
                     ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
                      (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                         C26752 * C1180 +
                     ((C1274 - C1273) * C17441 + (C1660 - C1659) * C17371 +
                      (C141 * C7145 - C26754 * C7188) * C17442 +
                      (C141 * C7374 - C26754 * C7412) * C17372) *
                         C26752 * C1181) *
                        C26589 * C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[32] +=
        (-std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C574 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C575 +
           (C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C26605 * C576) *
              C577 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C575 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C574 -
           (C17442 * C5886 - C17648 * C5773 - C17442 * C6098 + C17372 * C6203 +
            C17441 * C726 - C17647 * C582 - C17441 * C988 + C17371 * C1110) *
               C26754 * C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
           C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
              C26754 * C26752 * C26605 * C26589 * C79 -
          (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
           C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
              C26754 * C26752 * C26605 * C26589 * C80 +
          (C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
           C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
              C26754 * C26752 * C26605 * C26589 * C81 -
          (C17442 * C2392 - C17648 * C2282 - C17442 * C2611 + C17372 * C2716 +
           C17441 * C202 - C17647 * C90 - C17441 * C408 + C17371 * C498) *
              C26754 * C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C1179 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C1180 +
           (C17441 * C1328 - C17647 * C1184 - C17441 * C1590 + C17371 * C1712 +
            C17442 * C7225 - C17648 * C7146 - C17442 * C7373 + C17372 * C7448) *
               C26754 * C26752 * C1181) *
              C26589 * C577 +
          ((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
            C17442 * C1329 - C17648 * C1185 - C17442 * C1591 + C17372 * C1713) *
               C26754 * C26752 * C1180 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C1179 -
           (C17442 * C7226 - C17648 * C7145 - C17442 * C7374 + C17372 * C7447 +
            C17441 * C1329 - C17647 * C1185 - C17441 * C1591 + C17371 * C1713) *
               C26754 * C26752 * C1181) *
              C26589 * C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26718 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C26589 * C26743 +
          ((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26718) *
              C26589 * C26744 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            C19138 * C17372) *
               C26754 * C26718 -
           ((C8983 * C1198 - C8984 * C1187 - C8983 * C1199 + C26752 * C1205) *
                C17372 +
            C19138 * C17371) *
               C26754 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26718 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C26589 * C26743 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26718 +
           (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
            ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
               C26669) *
              C26589 * C26744 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C26718 +
           (((C2340 - C2339) * C8983 + (C2342 - C2341) * C26752) * C17371 +
            ((C141 * C1187 - C26754 * C1261) * C8983 +
             (C141 * C1199 - C26754 * C1267) * C26752) *
                C17372) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26718 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C26589 * C26743 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26718 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C8983 +
            (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
             C17442 * C1195) *
                C26752) *
               C26754 * C26669) *
              C26589 * C26744 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C26718 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C8983 +
            (C17441 * C1197 - C17371 * C1336 + C17442 * C1199 -
             C17372 * C1337) *
                C26752) *
               C26754 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26718 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C26589 * C26743 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26718 +
           (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
            ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
               C26669) *
              C26589 * C26744 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C19289 - C19290) * C141 + (C19291 - C19292) * C26754) * C17372) *
               C26718 +
           (((C19290 - C19289) * C141 + (C19292 - C19291) * C26754) * C17371 +
            ((C8983 * C1187 - C26752 * C1198) * C141 +
             (C8983 * C1401 - C26752 * C1407) * C26754) *
                C17372) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26718 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C26589 * C26743 +
          ((C18410 * C17371 + C18411 * C17372) * C26669 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26718) *
              C26589 * C26744 +
          ((C325 * C26752 * C17371 + C19343 * C17372) * C26718 -
           ((C141 * C1261 - C299 * C1187 - C141 * C1401 + C26754 * C1463) *
                C26752 * C17372 +
            C19343 * C17371) *
               C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26718 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C26589 * C26743 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26718 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C141 +
            (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
             C17442 * C1399) *
                C26754) *
               C26752 * C26669) *
              C26589 * C26744 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C26718 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C141 +
            (C17441 * C1400 - C17371 * C1532 + C17442 * C1401 -
             C17372 * C1533) *
                C26754) *
               C26752 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eezx[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26718 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C26589 * C26743 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26718 +
                     ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
                      (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                         C26754 * C26669) *
                        C26589 * C26744 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C19289 - C19290) * C17442 + (C19444 - C19445) * C17372) *
                         C26754 * C26718 +
                     ((C19290 - C19289) * C17441 + (C19445 - C19444) * C17371 +
                      (C8983 * C1187 - C26752 * C1198) * C17442 +
                      (C8983 * C1593 - C26752 * C1599) * C17372) *
                         C26754 * C26669) *
                        C26589 * C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[33] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26718 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C26589 * C26743 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26718 +
                     ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
                      (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                         C26752 * C26669) *
                        C26589 * C26744 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C26718 +
                     ((C2340 - C2339) * C17441 + (C2666 - C2665) * C17371 +
                      (C141 * C1187 - C26754 * C1261) * C17442 +
                      (C141 * C1593 - C26754 * C1655) * C17372) *
                         C26752 * C26669) *
                        C26589 * C1786)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[33] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26718 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C26589 * C26743 +
          ((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
            C17442 * C1329 - C17648 * C1185 - C17442 * C1591 + C17372 * C1713) *
               C26754 * C26752 * C26669 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26718) *
              C26589 * C26744 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C26718 -
           (C17442 * C1331 - C17648 * C1187 - C17442 * C1593 + C17372 * C1715 +
            C17441 * C1330 - C17647 * C1186 - C17441 * C1592 + C17371 * C1714) *
               C26754 * C26752 * C26669) *
              C26589 * C1786)) /
        (p * q * std::sqrt(p + q));
    d2eexx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
           (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
               C17372) *
              C26754 * C26605 * C26589 * C79 -
          ((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
               C17372 +
           (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) * C17371) *
              C26754 * C26605 * C26589 * C80 +
          ((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
           (C8983 * C1196 - C8984 * C1186 - C8983 * C1197 + C26752 * C1204) *
               C17372) *
              C26754 * C26605 * C26589 * C81 -
          ((C8983 * C2283 - C8984 * C2282 - C8983 * C2284 + C26752 * C2285) *
               C17372 +
           (C8983 * C98 - C8984 * C90 - C8983 * C99 + C26752 * C105) * C17371) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            (C8983 * C1190 - C8984 * C1183 - C8983 * C1191 + C26752 * C1201) *
                C17372) *
               C26754 * C26605 * C574 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C575 +
           (C9337 * C17371 + C14189 * C17372) * C26754 * C26605 * C576) *
              C577 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C575 -
           ((C8983 * C1188 - C8984 * C1182 - C8983 * C1189 + C26752 * C1200) *
                C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C574 -
           ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                C17372 +
            C9339 * C17371) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C8983 +
            (C26754 * C147 - C141 * C93) * C26752) *
               C17371 +
           ((C26754 * C1256 - C141 * C1183) * C8983 +
            (C26754 * C1262 - C141 * C1191) * C26752) *
               C17372) *
              C26605 * C26589 * C79 +
          (((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
           ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
              C26605 * C26589 * C80 +
          (((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
           ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
              C26605 * C26589 * C81 +
          (((C162 - C161) * C8983 + (C164 - C163) * C26752) * C17371 +
           ((C141 * C2282 - C26754 * C2336) * C8983 +
            (C141 * C2284 - C26754 * C2337) * C26752) *
               C17372) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C26754 * C1256 - C141 * C1183) * C8983 +
             (C26754 * C1262 - C141 * C1191) * C26752) *
                C17372) *
               C26605 * C574 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C141 * C2791 - C26754 * C2869) * C8983 +
             (C141 * C2795 - C26754 * C2872) * C26752) *
                C17372) *
               C26605 * C575 +
           (((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C26754 * C5831 - C141 * C5774) * C8983 +
             (C26754 * C5833 - C141 * C5778) * C26752) *
                C17372) *
               C26605 * C576) *
              C577 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C574 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C575 +
           (((C671 - C670) * C8983 + (C673 - C672) * C26752) * C17371 +
            ((C141 * C5773 - C26754 * C5832) * C8983 +
             (C141 * C5776 - C26754 * C5834) * C26752) *
                C17372) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C8983 +
           (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
               C26752) *
              C26754 * C26605 * C26589 * C79 +
          ((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
               C8983 +
           (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
               C26752) *
              C26754 * C26605 * C26589 * C80 +
          ((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
               C8983 +
           (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
               C26752) *
              C26754 * C26605 * C26589 * C81 +
          ((C17441 * C90 - C17371 * C202 + C17442 * C2282 - C17372 * C2392) *
               C8983 +
           (C17441 * C99 - C17371 * C207 + C17442 * C2284 - C17372 * C2393) *
               C26752) *
              C26754 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C574 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C575 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C26605 * C576) *
              C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C574 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C575 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C8983 +
            (C17441 * C592 - C17371 * C732 + C17442 * C5776 - C17372 * C5888) *
                C26752) *
               C26754 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyx[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C141 +
            (C26752 * C260 - C8983 * C255) * C26754) *
               C17371 +
           ((C26752 * C1190 - C8983 * C1183) * C141 +
            (C26752 * C1402 - C8983 * C1396) * C26754) *
               C17372) *
              C26605 * C26589 * C79 +
          (((C8983 * C88 - C26752 * C94) * C141 +
            (C8983 * C256 - C26752 * C261) * C26754) *
               C17371 +
           ((C8983 * C1182 - C26752 * C1188) * C141 +
            (C8983 * C1397 - C26752 * C1403) * C26754) *
               C17372) *
              C26605 * C26589 * C80 +
          (((C26752 * C96 - C8983 * C89) * C141 +
            (C26752 * C262 - C8983 * C257) * C26754) *
               C17371 +
           ((C26752 * C1196 - C8983 * C1186) * C141 +
            (C26752 * C1406 - C8983 * C1400) * C26754) *
               C17372) *
              C26605 * C26589 * C81 +
          (((C8983 * C90 - C26752 * C98) * C141 +
            (C8983 * C258 - C26752 * C263) * C26754) *
               C17371 +
           ((C8983 * C2282 - C26752 * C2283) * C141 +
            (C8983 * C2448 - C26752 * C2449) * C26754) *
               C17372) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C26752 * C1190 - C8983 * C1183) * C141 +
             (C26752 * C1402 - C8983 * C1396) * C26754) *
                C17372) *
               C26605 * C574 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C575 +
           (((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C26605 * C576) *
              C577 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C8983 * C1182 - C26752 * C1188) * C141 +
             (C8983 * C1397 - C26752 * C1403) * C26754) *
                C17372) *
               C26605 * C574 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C575 +
           (((C9515 - C9514) * C141 + (C9517 - C9516) * C26754) * C17371 +
            ((C8983 * C5773 - C26752 * C5775) * C141 +
             (C8983 * C5940 - C26752 * C5942) * C26754) *
                C17372) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyy[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
               C17371 +
           (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
               C26752 * C17372) *
              C26605 * C26589 * C79 -
          (C1477 * C26752 * C17372 + C324 * C26752 * C17371) * C26605 * C26589 *
              C80 +
          (C325 * C26752 * C17371 + C2508 * C26752 * C17372) * C26605 * C26589 *
              C81 -
          ((C141 * C2336 - C299 * C2282 - C141 * C2448 + C26754 * C2500) *
               C26752 * C17372 +
           C326 * C26752 * C17371) *
              C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            (C141 * C1256 - C299 * C1183 - C141 * C1396 + C26754 * C1459) *
                C26752 * C17372) *
               C26605 * C574 -
           ((C141 * C2869 - C299 * C2791 - C141 * C3021 + C26754 * C3093) *
                C26752 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C575 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C26752 * C17372) *
               C26605 * C576) *
              C577 +
          ((C874 * C26752 * C17371 + C3103 * C26752 * C17372) * C26605 * C575 -
           (C1477 * C26752 * C17372 + C324 * C26752 * C17371) * C26605 * C574 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C26752 * C17372 +
            C875 * C26752 * C17371) *
               C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eeyz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C141 +
           (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
               C26754) *
              C26752 * C26605 * C26589 * C79 +
          ((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
               C141 +
           (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
               C26754) *
              C26752 * C26605 * C26589 * C80 +
          ((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
               C141 +
           (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
               C26754) *
              C26752 * C26605 * C26589 * C81 +
          ((C17441 * C90 - C17371 * C202 + C17442 * C2282 - C17372 * C2392) *
               C141 +
           (C17441 * C258 - C17371 * C363 + C17442 * C2448 - C17372 * C2558) *
               C26754) *
              C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C574 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C575 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C26605 * C576) *
              C577 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C574 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C575 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C141 +
            (C17441 * C796 - C17371 * C928 + C17442 * C5940 - C17372 * C6046) *
                C26754) *
               C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eezx[34] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C17441 +
                     (C26752 * C410 - C8983 * C405) * C17371 +
                     (C26752 * C1190 - C8983 * C1183) * C17442 +
                     (C26752 * C1594 - C8983 * C1588) * C17372) *
                        C26754 * C26605 * C26589 * C79 +
                    ((C8983 * C88 - C26752 * C94) * C17441 +
                     (C8983 * C406 - C26752 * C411) * C17371 +
                     (C8983 * C1182 - C26752 * C1188) * C17442 +
                     (C8983 * C1589 - C26752 * C1595) * C17372) *
                        C26754 * C26605 * C26589 * C80 +
                    ((C26752 * C96 - C8983 * C89) * C17441 +
                     (C26752 * C412 - C8983 * C407) * C17371 +
                     (C26752 * C1196 - C8983 * C1186) * C17442 +
                     (C26752 * C1598 - C8983 * C1592) * C17372) *
                        C26754 * C26605 * C26589 * C81 +
                    ((C8983 * C90 - C26752 * C98) * C17441 +
                     (C8983 * C408 - C26752 * C413) * C17371 +
                     (C8983 * C2282 - C26752 * C2283) * C17442 +
                     (C8983 * C2611 - C26752 * C2612) * C17372) *
                        C26754 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C26752 * C1190 - C8983 * C1183) * C17442 +
                      (C26752 * C1594 - C8983 * C1588) * C17372) *
                         C26754 * C26605 * C574 +
                     ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26605 * C575 +
                     ((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                      (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                         C26754 * C26605 * C576) *
                        C577 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C8983 * C1182 - C26752 * C1188) * C17442 +
                      (C8983 * C1589 - C26752 * C1595) * C17372) *
                         C26754 * C26605 * C574 +
                     ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
                      (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                         C26754 * C26605 * C575 +
                     ((C9515 - C9514) * C17441 + (C9679 - C9678) * C17371 +
                      (C8983 * C5773 - C26752 * C5775) * C17442 +
                      (C8983 * C6098 - C26752 * C6100) * C17372) *
                         C26754 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eezy[34] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26754 * C142 - C141 * C87) * C17441 +
                     (C26754 * C449 - C141 * C405) * C17371 +
                     (C26754 * C1256 - C141 * C1183) * C17442 +
                     (C26754 * C1650 - C141 * C1588) * C17372) *
                        C26752 * C26605 * C26589 * C79 +
                    ((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                     (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                        C26752 * C26605 * C26589 * C80 +
                    ((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                     (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                        C26752 * C26605 * C26589 * C81 +
                    ((C162 - C161) * C17441 + (C460 - C459) * C17371 +
                     (C141 * C2282 - C26754 * C2336) * C17442 +
                     (C141 * C2611 - C26754 * C2663) * C17372) *
                        C26752 * C26605 * C26589 * C82)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C26754 * C1256 - C141 * C1183) * C17442 +
                      (C26754 * C1650 - C141 * C1588) * C17372) *
                         C26752 * C26605 * C574 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C141 * C2791 - C26754 * C2869) * C17442 +
                      (C141 * C3240 - C26754 * C3312) * C17372) *
                         C26752 * C26605 * C575 +
                     ((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C26754 * C5831 - C141 * C5774) * C17442 +
                      (C26754 * C6151 - C141 * C6097) * C17372) *
                         C26752 * C26605 * C576) *
                        C577 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C574 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C575 +
                     ((C671 - C670) * C17441 + (C1057 - C1056) * C17371 +
                      (C141 * C5773 - C26754 * C5832) * C17442 +
                      (C141 * C6098 - C26754 * C6152) * C17372) *
                         C26752 * C26605 * C576) *
                        C26576)) /
                      (p * q * std::sqrt(p + q));
    d2eezz[34] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
           C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
              C26754 * C26752 * C26605 * C26589 * C79 -
          (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
           C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
              C26754 * C26752 * C26605 * C26589 * C80 +
          (C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
           C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
              C26754 * C26752 * C26605 * C26589 * C81 -
          (C17442 * C2392 - C17648 * C2282 - C17442 * C2611 + C17372 * C2716 +
           C17441 * C202 - C17647 * C90 - C17441 * C408 + C17371 * C498) *
              C26754 * C26752 * C26605 * C26589 * C82)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C574 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C575 +
           (C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C26605 * C576) *
              C577 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C575 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C574 -
           (C17442 * C5886 - C17648 * C5773 - C17442 * C6098 + C17372 * C6203 +
            C17441 * C726 - C17647 * C582 - C17441 * C988 + C17371 * C1110) *
               C26754 * C26752 * C26605 * C576) *
              C26576)) /
            (p * q * std::sqrt(p + q));
    d2eexx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26605 * C26745 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C26746 +
           (C9337 * C17371 + C14189 * C17372) * C26754 * C26605 * C4726) *
              C26709 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C26746 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C26745 -
           ((C8983 * C5775 - C8984 * C5773 - C8983 * C5776 + C26752 * C5779) *
                C17372 +
            C9339 * C17371) *
               C26754 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26605 * C26745 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C26605 * C26746 +
           (((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C26754 * C5831 - C141 * C5774) * C8983 +
             (C26754 * C5833 - C141 * C5778) * C26752) *
                C17372) *
               C26605 * C4726) *
              C26709 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C26745 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C26746 +
           (((C671 - C670) * C8983 + (C673 - C672) * C26752) * C17371 +
            ((C141 * C5773 - C26754 * C5832) * C8983 +
             (C141 * C5776 - C26754 * C5834) * C26752) *
                C17372) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C26745 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C26746 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C26605 * C4726) *
              C26709 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C26745 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C26746 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C8983 +
            (C17441 * C592 - C17371 * C732 + C17442 * C5776 - C17372 * C5888) *
                C26752) *
               C26754 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26605 * C26745 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C26746 +
           (((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C26605 * C4726) *
              C26709 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26605 * C26745 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C26746 +
           (((C9515 - C9514) * C141 + (C9517 - C9516) * C26754) * C17371 +
            ((C8983 * C5773 - C26752 * C5775) * C141 +
             (C8983 * C5940 - C26752 * C5942) * C26754) *
                C17372) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26605 * C26745 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C26746 +
           ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
                C26752 * C17372) *
               C26605 * C4726) *
              C26709 +
          ((C874 * C26752 * C17371 + C19884 * C17372) * C26605 * C26746 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26605 * C26745 -
           ((C141 * C5832 - C299 * C5773 - C141 * C5940 + C26754 * C5993) *
                C26752 * C17372 +
            C875 * C26752 * C17371) *
               C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C26745 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C26746 +
           ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C26605 * C4726) *
              C26709 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C26745 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C26746 +
           ((C17441 * C582 - C17371 * C726 + C17442 * C5773 - C17372 * C5886) *
                C141 +
            (C17441 * C796 - C17371 * C928 + C17442 * C5940 - C17372 * C6046) *
                C26754) *
               C26752 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26605 * C26745 +
                     ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26605 * C26746 +
                     ((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                      (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                         C26754 * C26605 * C4726) *
                        C26709 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26605 * C26745 +
                     ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
                      (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                         C26754 * C26605 * C26746 +
                     ((C9515 - C9514) * C17441 + (C9679 - C9678) * C17371 +
                      (C8983 * C5773 - C26752 * C5775) * C17442 +
                      (C8983 * C6098 - C26752 * C6100) * C17372) *
                         C26754 * C26605 * C4726) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[35] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26605 * C26745 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C26605 * C26746 +
                     ((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C26754 * C5831 - C141 * C5774) * C17442 +
                      (C26754 * C6151 - C141 * C6097) * C17372) *
                         C26752 * C26605 * C4726) *
                        C26709 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C26745 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C26746 +
                     ((C671 - C670) * C17441 + (C1057 - C1056) * C17371 +
                      (C141 * C5773 - C26754 * C5832) * C17442 +
                      (C141 * C6098 - C26754 * C6152) * C17372) *
                         C26752 * C26605 * C4726) *
                        C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[35] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C26745 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C26746 +
           (C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C26605 * C4726) *
              C26709 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C26746 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C26745 -
           (C17442 * C5886 - C17648 * C5773 - C17442 * C6098 + C17372 * C6203 +
            C17441 * C726 - C17647 * C582 - C17441 * C988 + C17371 * C1110) *
               C26754 * C26752 * C26605 * C4726) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26718 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C26745 +
          ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26718) *
              C26746 +
          ((C9337 * C17371 + C14189 * C17372) * C26754 * C26718 -
           ((C8983 * C12642 - C8984 * C12641 - C8983 * C12643 +
             C26752 * C12644) *
                C17372 +
            C14189 * C17371) *
               C26754 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26718 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C26745 +
          ((((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C26718 +
           (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
            ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) * C17372) *
               C26669) *
              C26746 +
          ((((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C22519 - C22520) * C8983 + (C22521 - C22522) * C26752) * C17372) *
               C26718 +
           (((C22520 - C22519) * C8983 + (C22522 - C22521) * C26752) * C17371 +
            ((C141 * C12641 - C26754 * C12703) * C8983 +
             (C141 * C12643 - C26754 * C12704) * C26752) *
                C17372) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26718 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C26745 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26718 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C8983 +
            (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
             C17442 * C4247) *
                C26752) *
               C26754 * C26669) *
              C26746 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C26718 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C8983 +
            (C17441 * C5778 - C17371 * C5887 + C17442 * C12643 -
             C17372 * C12756) *
                C26752) *
               C26754 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyx[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26718 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C26745 +
          ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26718 +
           (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
            ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
               C26669) *
              C26746 +
          ((((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C26718 +
           (((C14352 - C14351) * C141 + (C14354 - C14353) * C26754) * C17371 +
            ((C8983 * C12641 - C26752 * C12642) * C141 +
             (C8983 * C12811 - C26752 * C12812) * C26754) *
                C17372) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyy[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26718 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C26745 +
          ((C19888 * C17371 + C21172 * C17372) * C26669 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26718) *
              C26746 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            C22680 * C17372) *
               C26718 -
           ((C141 * C12703 - C299 * C12641 - C141 * C12811 + C26754 * C12867) *
                C26752 * C17372 +
            C22680 * C17371) *
               C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26718 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C26745 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26718 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C141 +
            (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
             C17442 * C4408) *
                C26754) *
               C26752 * C26669) *
              C26746 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C26718 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C141 +
            (C17441 * C5939 - C17371 * C6045 + C17442 * C12811 -
             C17372 * C12918) *
                C26754) *
               C26752 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezx[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26718 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C26745 +
                    (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26718 +
                     ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
                      (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                         C26754 * C26669) *
                        C26746 +
                    (((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                      (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                         C26754 * C26718 +
                     ((C14352 - C14351) * C17441 + (C14512 - C14511) * C17371 +
                      (C8983 * C12641 - C26752 * C12642) * C17442 +
                      (C8983 * C12971 - C26752 * C12972) * C17372) *
                         C26754 * C26669) *
                        C4726) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezy[36] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26718 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C26745 +
                    (((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C26718 +
                     ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
                      (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                         C26752 * C26669) *
                        C26746 +
                    (((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C22519 - C22520) * C17442 + (C22831 - C22832) * C17372) *
                         C26752 * C26718 +
                     ((C22520 - C22519) * C17441 + (C22832 - C22831) * C17371 +
                      (C141 * C12641 - C26754 * C12703) * C17442 +
                      (C141 * C12971 - C26754 * C13025) * C17372) *
                         C26752 * C26669) *
                        C4726) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezz[36] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26718 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C26745 +
          ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
            C17442 * C4354 - C17648 * C4243 - C17442 * C4566 + C17372 * C4673) *
               C26754 * C26752 * C26669 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26718) *
              C26746 +
          ((C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C26718 -
           (C17442 * C12755 - C17648 * C12641 - C17442 * C12971 +
            C17372 * C13076 + C17441 * C5885 - C17647 * C5774 - C17441 * C6097 +
            C17371 * C6204) *
               C26754 * C26752 * C26669) *
              C4726) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[37] +=
        (-std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
           C18174 * C17372) *
              C26754 * C26605 * C3883 -
          (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C3884 +
          (C9337 * C17371 + C14189 * C17372) * C26754 * C26605 * C3885 -
          ((C8983 * C14179 - C8984 * C14178 - C8983 * C14180 +
            C26752 * C14181) *
               C17372 +
           C12287 * C17371) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26605 * C3444 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C26641) *
              C3446 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C26641 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C3444) *
              C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            C19138 * C17372) *
               C26754 * C26605 * C3444 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C17372 +
            C10300 * C17371) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C1179 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C1180 +
           (C18175 * C17371 +
            (C8983 * C7149 - C8984 * C7146 - C8983 * C7150 + C26752 * C7152) *
                C17372) *
               C26754 * C1181) *
              C3444 +
          ((C11236 * C17371 + C12652 * C17372) * C26754 * C1180 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C1179 -
           ((C8983 * C15556 - C8984 * C15555 - C8983 * C15557 +
             C26752 * C15558) *
                C17372 +
            C12652 * C17371) *
               C26754 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C8983 +
            (C26754 * C147 - C141 * C93) * C26752) *
               C17371 +
           ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
              C26605 * C3883 +
          (((C141 * C580 - C26754 * C653) * C8983 +
            (C141 * C588 - C26754 * C659) * C26752) *
               C17371 +
           ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
              C26605 * C3884 +
          (((C26754 * C655 - C141 * C581) * C8983 +
            (C26754 * C661 - C141 * C590) * C26752) *
               C17371 +
           ((C26754 * C5831 - C141 * C5774) * C8983 +
            (C26754 * C5833 - C141 * C5778) * C26752) *
               C17372) *
              C26605 * C3885 +
          (((C141 * C3889 - C26754 * C3930) * C8983 +
            (C141 * C3893 - C26754 * C3932) * C26752) *
               C17371 +
           ((C141 * C14178 - C26754 * C14240) * C8983 +
            (C141 * C14180 - C26754 * C14241) * C26752) *
               C17372) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26605 * C3444 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C26605 * C26641) *
              C3446 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C3444 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C26641) *
              C3447 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C26605 * C3444 +
           (((C1845 - C1844) * C8983 + (C1847 - C1846) * C26752) * C17371 +
            ((C141 * C2793 - C26754 * C2871) * C8983 +
             (C141 * C2799 - C26754 * C2874) * C26752) *
                C17372) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C1179 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C1180 +
           (((C18233 - C18232) * C8983 + (C18235 - C18234) * C26752) * C17371 +
            ((C26754 * C7187 - C141 * C7146) * C8983 +
             (C26754 * C7189 - C141 * C7150) * C26752) *
                C17372) *
               C1181) *
              C3444 +
          ((((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C1179 +
           (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
            ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) * C17372) *
               C1180 +
           (((C21012 - C21011) * C8983 + (C21014 - C21013) * C26752) * C17371 +
            ((C141 * C15555 - C26754 * C15593) * C8983 +
             (C141 * C15557 - C26754 * C15594) * C26752) *
                C17372) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[37] +=
        (-std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C8983 +
           (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
               C26752) *
              C26754 * C26605 * C3883 +
          ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
               C8983 +
           (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
               C26752) *
              C26754 * C26605 * C3884 +
          ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
               C8983 +
           (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
               C26752) *
              C26754 * C26605 * C3885 +
          ((C17441 * C3889 - C17371 * C3968 + C17442 * C14178 -
            C17372 * C14292) *
               C8983 +
           (C17441 * C3893 - C17371 * C3970 + C17442 * C14180 -
            C17372 * C14293) *
               C26752) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C8983 +
            (C17441 * C594 - C17371 * C733 + C17442 * C2799 - C17372 * C2950) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C1179 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C1180 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C8983 +
            (C17371 * C1334 - C17441 * C1193 + C17372 * C7227 -
             C17442 * C7150) *
                C26752) *
               C26754 * C1181) *
              C3444 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C1179 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C8983 +
            (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
             C17442 * C4247) *
                C26752) *
               C26754 * C1180 +
           ((C17441 * C4243 - C17371 * C4354 + C17442 * C15555 -
             C17372 * C15629) *
                C8983 +
            (C17441 * C4247 - C17371 * C4356 + C17442 * C15557 -
             C17372 * C15630) *
                C26752) *
               C26754 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[37] +=
        (-std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C141 +
            (C26752 * C260 - C8983 * C255) * C26754) *
               C17371 +
           ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
              C26605 * C3883 +
          (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
           ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
              C26605 * C3884 +
          (((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
           ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
              C26605 * C3885 +
          (((C12402 - C12401) * C141 + (C12404 - C12403) * C26754) * C17371 +
           ((C8983 * C14178 - C26752 * C14179) * C141 +
            (C8983 * C14348 - C26752 * C14349) * C26754) *
               C17372) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26605 * C3444 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C26641) *
              C3446 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26605 * C3444 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C26641) *
              C3447 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C19289 - C19290) * C141 + (C19291 - C19292) * C26754) * C17372) *
               C26605 * C3444 +
           (((C10453 - C10452) * C141 + (C10455 - C10454) * C26754) * C17371 +
            ((C8983 * C2793 - C26752 * C2798) * C141 +
             (C8983 * C3023 - C26752 * C3026) * C26754) *
                C17372) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C1179 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C1180 +
           (((C18341 - C18340) * C141 + (C18343 - C18342) * C26754) * C17371 +
            ((C26752 * C7149 - C8983 * C7146) * C141 +
             (C26752 * C7265 - C8983 * C7263) * C26754) *
                C17372) *
               C1181) *
              C3444 +
          ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C1179 +
           (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
            ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
               C1180 +
           (((C12815 - C12814) * C141 + (C12817 - C12816) * C26754) * C17371 +
            ((C8983 * C15555 - C26752 * C15556) * C141 +
             (C8983 * C15665 - C26752 * C15666) * C26754) *
                C17372) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[37] +=
        (-std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
               C17371 +
           C18418 * C17372) *
              C26605 * C3883 -
          (C19888 * C17372 +
           (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
               C17371) *
              C26605 * C3884 +
          ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
               C17371 +
           (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
               C26752 * C17372) *
              C26605 * C3885 -
          ((C141 * C14240 - C299 * C14178 - C141 * C14348 + C26754 * C14404) *
               C26752 * C17372 +
           (C141 * C3930 - C299 * C3889 - C141 * C4006 + C26754 * C4045) *
               C26752 * C17371) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26605 * C3444 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C26641) *
              C3446 +
          ((C874 * C26752 * C17371 + C19884 * C17372) * C26605 * C26641 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26605 * C3444) *
              C3447 +
          ((C325 * C26752 * C17371 + C19343 * C17372) * C26605 * C3444 -
           ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                C26752 * C17372 +
            C2013 * C26752 * C17371) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C1179 -
           (C18419 * C17372 + C18418 * C17371) * C1180 +
           (C18419 * C17371 +
            (C141 * C7187 - C299 * C7146 - C141 * C7263 + C26754 * C7302) *
                C26752 * C17372) *
               C1181) *
              C3444 +
          ((C19888 * C17371 + C21172 * C17372) * C1180 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C1179 -
           ((C141 * C15593 - C299 * C15555 - C141 * C15665 + C26754 * C15701) *
                C26752 * C17372 +
            C21172 * C17371) *
               C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[37] +=
        (-std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C141 +
           (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
               C26754) *
              C26752 * C26605 * C3883 +
          ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
               C141 +
           (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
               C26754) *
              C26752 * C26605 * C3884 +
          ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
               C141 +
           (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
               C26754) *
              C26752 * C26605 * C3885 +
          ((C17441 * C3889 - C17371 * C3968 + C17442 * C14178 -
            C17372 * C14292) *
               C141 +
           (C17441 * C4006 - C17371 * C4080 + C17442 * C14348 -
            C17372 * C14455) *
               C26754) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C141 +
            (C17441 * C797 - C17371 * C929 + C17442 * C3023 - C17372 * C3171) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C1179 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C1180 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C141 +
            (C17371 * C1530 - C17441 * C1398 + C17372 * C7337 -
             C17442 * C7263) *
                C26754) *
               C26752 * C1181) *
              C3444 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C1179 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C141 +
            (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
             C17442 * C4408) *
                C26754) *
               C26752 * C1180 +
           ((C17441 * C4243 - C17371 * C4354 + C17442 * C15555 -
             C17372 * C15629) *
                C141 +
            (C17441 * C4408 - C17371 * C4514 + C17442 * C15665 -
             C17372 * C15736) *
                C26754) *
               C26752 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[37] += (-std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C17441 +
                     (C26752 * C410 - C8983 * C405) * C17371 +
                     (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                        C26754 * C26605 * C3883 +
                    ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                     (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                        C26754 * C26605 * C3884 +
                    ((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                     (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                        C26754 * C26605 * C3885 +
                    ((C12402 - C12401) * C17441 + (C12514 - C12513) * C17371 +
                     (C8983 * C14178 - C26752 * C14179) * C17442 +
                     (C8983 * C14508 - C26752 * C14509) * C17372) *
                        C26754 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3446 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
                      (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3447 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C19289 - C19290) * C17442 + (C19444 - C19445) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C10453 - C10452) * C17441 + (C10607 - C10606) * C17371 +
                      (C8983 * C2793 - C26752 * C2798) * C17442 +
                      (C8983 * C3242 - C26752 * C3245) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C1179 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C1180 +
                     ((C18341 - C18340) * C17441 + (C18523 - C18522) * C17371 +
                      (C26752 * C7149 - C8983 * C7146) * C17442 +
                      (C26752 * C7375 - C8983 * C7373) * C17372) *
                         C26754 * C1181) *
                        C3444 +
                    (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C1179 +
                     ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
                      (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                         C26754 * C1180 +
                     ((C12815 - C12814) * C17441 + (C12975 - C12974) * C17371 +
                      (C8983 * C15555 - C26752 * C15556) * C17442 +
                      (C8983 * C15771 - C26752 * C15772) * C17372) *
                         C26754 * C1181) *
                        C26641) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezy[37] += (-std::pow(Pi, 2.5) *
                   (((C26754 * C142 - C141 * C87) * C17441 +
                     (C26754 * C449 - C141 * C405) * C17371 +
                     (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                        C26752 * C26605 * C3883 +
                    ((C141 * C580 - C26754 * C653) * C17441 +
                     (C141 * C985 - C26754 * C1047) * C17371 +
                     (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                        C26752 * C26605 * C3884 +
                    ((C26754 * C655 - C141 * C581) * C17441 +
                     (C26754 * C1049 - C141 * C987) * C17371 +
                     (C26754 * C5831 - C141 * C5774) * C17442 +
                     (C26754 * C6151 - C141 * C6097) * C17372) *
                        C26752 * C26605 * C3885 +
                    ((C141 * C3889 - C26754 * C3930) * C17441 +
                     (C141 * C4116 - C26754 * C4154) * C17371 +
                     (C141 * C14178 - C26754 * C14240) * C17442 +
                     (C141 * C14508 - C26754 * C14562) * C17372) *
                        C26752 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3446 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3447 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C1845 - C1844) * C17441 + (C2171 - C2170) * C17371 +
                      (C141 * C2793 - C26754 * C2871) * C17442 +
                      (C141 * C3242 - C26754 * C3314) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C1179 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C1180 +
                     ((C18233 - C18232) * C17441 + (C18581 - C18580) * C17371 +
                      (C26754 * C7187 - C141 * C7146) * C17442 +
                      (C26754 * C7411 - C141 * C7373) * C17372) *
                         C26752 * C1181) *
                        C3444 +
                    (((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C1179 +
                     ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
                      (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                         C26752 * C1180 +
                     ((C21012 - C21011) * C17441 + (C21324 - C21323) * C17371 +
                      (C141 * C15555 - C26754 * C15593) * C17442 +
                      (C141 * C15771 - C26754 * C15807) * C17372) *
                         C26752 * C1181) *
                        C26641) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezz[37] +=
        (-std::pow(Pi, 2.5) *
         ((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
           C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
              C26754 * C26752 * C26605 * C3883 -
          (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
           C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
              C26754 * C26752 * C26605 * C3884 +
          (C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
           C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
              C26754 * C26752 * C26605 * C3885 -
          (C17442 * C14292 - C17648 * C14178 - C17442 * C14508 +
           C17372 * C14613 + C17441 * C3968 - C17647 * C3889 - C17441 * C4116 +
           C17371 * C4191) *
              C26754 * C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C3444 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C26641) *
              C3446 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C26641 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C3444) *
              C3447 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C26605 * C3444 -
           (C17442 * C2947 - C17648 * C2793 - C17442 * C3242 + C17372 * C3385 +
            C17441 * C727 - C17647 * C583 - C17441 * C989 + C17371 * C1111) *
               C26754 * C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C1179 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C1180 +
           (C17441 * C1328 - C17647 * C1184 - C17441 * C1590 + C17371 * C1712 +
            C17442 * C7225 - C17648 * C7146 - C17442 * C7373 + C17372 * C7448) *
               C26754 * C26752 * C1181) *
              C3444 +
          ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
            C17442 * C4354 - C17648 * C4243 - C17442 * C4566 + C17372 * C4673) *
               C26754 * C26752 * C1180 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C1179 -
           (C17442 * C15629 - C17648 * C15555 - C17442 * C15771 +
            C17372 * C15842 + C17441 * C4354 - C17647 * C4243 - C17441 * C4566 +
            C17371 * C4673) *
               C26754 * C26752 * C1181) *
              C26641) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C17371 +
             C18174 * C17372) *
                C26754 * C26718 -
            (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
               C3444 +
           ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
            (C11236 * C17372 + C9336 * C17371) * C26754 * C26718) *
               C26641) *
              C26709 +
          (((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
            (C18176 * C17372 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C17371) *
                C26754 * C26718) *
               C3444 +
           ((C9338 * C17371 + C11237 * C17372) * C26754 * C26718 -
            ((C8983 * C4244 - C8984 * C4242 - C8983 * C4245 + C26752 * C4248) *
                 C17372 +
             C11237 * C17371) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C8983 +
              (C26754 * C147 - C141 * C93) * C26752) *
                 C17371 +
             ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) *
                 C17372) *
                C26718 +
            (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
             ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) *
                 C17372) *
                C26669) *
               C3444 +
           ((((C141 * C580 - C26754 * C653) * C8983 +
              (C141 * C588 - C26754 * C659) * C26752) *
                 C17371 +
             ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) *
                 C17372) *
                C26718 +
            (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
             ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C26709 +
          (((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
             ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
                C26718 +
            (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
             ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
                C26669) *
               C3444 +
           ((((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
             ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
                C26718 +
            (((C2877 - C2876) * C8983 + (C2879 - C2878) * C26752) * C17371 +
             ((C141 * C4242 - C26754 * C4301) * C8983 +
              (C141 * C4245 - C26754 * C4303) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C8983 +
             (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                 C26752) *
                C26754 * C26718 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C8983 +
             (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
              C17372 * C1334) *
                 C26752) *
                C26754 * C26669) *
               C3444 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C8983 +
             (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                 C26752) *
                C26754 * C26718 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C8983 +
             (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
              C17442 * C4247) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C8983 +
             (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                 C26752) *
                C26754 * C26718 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C8983 +
             (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
              C17442 * C1195) *
                 C26752) *
                C26754 * C26669) *
               C3444 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C8983 +
             (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                 C26752) *
                C26754 * C26718 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C8983 +
             (C17441 * C2797 - C17371 * C2949 + C17442 * C4245 -
              C17372 * C4357) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C141 +
              (C26752 * C260 - C8983 * C255) * C26754) *
                 C17371 +
             ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
                C26718 +
            (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
             ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
                C26669) *
               C3444 +
           ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
             ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
                C26718 +
            (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
             ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
                C26669) *
               C26641) *
              C26709 +
          (((((C8983 * C88 - C26752 * C94) * C141 +
              (C8983 * C256 - C26752 * C261) * C26754) *
                 C17371 +
             ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
                C26718 +
            (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
             ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
                C26669) *
               C3444 +
           ((((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
             ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
                C26718 +
            (((C11447 - C11446) * C141 + (C11449 - C11448) * C26754) * C17371 +
             ((C8983 * C4242 - C26752 * C4244) * C141 +
              (C8983 * C4409 - C26752 * C4411) * C26754) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                 C17371 +
             C18418 * C17372) *
                C26718 -
            (C18419 * C17372 + C18418 * C17371) * C26669) *
               C3444 +
           ((C19888 * C17371 + C21172 * C17372) * C26669 -
            (C19888 * C17372 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) *
                 C26752 * C17371) *
                C26718) *
               C26641) *
              C26709 +
          (((C18410 * C17371 + C18411 * C17372) * C26669 -
            (C18410 * C17372 + C324 * C26752 * C17371) * C26718) *
               C3444 +
           ((C874 * C26752 * C17371 + C19884 * C17372) * C26718 -
            ((C141 * C4301 - C299 * C4242 - C141 * C4409 + C26754 * C4462) *
                 C26752 * C17372 +
             C19884 * C17371) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C141 +
             (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                 C26754) *
                C26752 * C26718 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C141 +
             (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
              C17372 * C1530) *
                 C26754) *
                C26752 * C26669) *
               C3444 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C141 +
             (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                 C26754) *
                C26752 * C26718 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C141 +
             (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
              C17442 * C4408) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C141 +
             (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                 C26754) *
                C26752 * C26718 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C141 +
             (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
              C17442 * C1399) *
                 C26754) *
                C26752 * C26669) *
               C3444 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C141 +
             (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                 C26754) *
                C26752 * C26718 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C141 +
             (C17441 * C3022 - C17371 * C3170 + C17442 * C4409 -
              C17372 * C4515) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C17441 +
             (C26752 * C410 - C8983 * C405) * C17371 +
             (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                C26754 * C26718 +
            ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
             (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                C26754 * C26669) *
               C3444 +
           (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
             (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                C26754 * C26718 +
            ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
             (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C8983 * C88 - C26752 * C94) * C17441 +
             (C8983 * C406 - C26752 * C411) * C17371 +
             (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                C26754 * C26718 +
            ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
             (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                C26754 * C26669) *
               C3444 +
           (((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
             (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                C26754 * C26718 +
            ((C11447 - C11446) * C17441 + (C11653 - C11652) * C17371 +
             (C8983 * C4242 - C26752 * C4244) * C17442 +
             (C8983 * C4567 - C26752 * C4569) * C17372) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C17441 +
             (C26754 * C449 - C141 * C405) * C17371 +
             (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                C26752 * C26718 +
            ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
             (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                C26752 * C26669) *
               C3444 +
           (((C141 * C580 - C26754 * C653) * C17441 +
             (C141 * C985 - C26754 * C1047) * C17371 +
             (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                C26752 * C26718 +
            ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
             (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C154 - C153) * C17441 + (C456 - C455) * C17371 +
             (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                C26752 * C26718 +
            ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
             (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                C26752 * C26669) *
               C3444 +
           (((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
             (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                C26752 * C26718 +
            ((C2877 - C2876) * C17441 + (C3317 - C3316) * C17371 +
             (C141 * C4242 - C26754 * C4301) * C17442 +
             (C141 * C4567 - C26754 * C4621) * C17372) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[38] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
             C17442 * C1326 - C17648 * C1183 - C17442 * C1588 +
             C17372 * C1711) *
                C26754 * C26752 * C26718 -
            (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
             C17441 * C1326 - C17647 * C1183 - C17441 * C1588 +
             C17371 * C1711) *
                C26754 * C26752 * C26669) *
               C3444 +
           ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
             C17442 * C4354 - C17648 * C4243 - C17442 * C4566 +
             C17372 * C4673) *
                C26754 * C26752 * C26669 -
            (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
             C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
                C26754 * C26752 * C26718) *
               C26641) *
              C26709 +
          (((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
             C17442 * C1329 - C17648 * C1185 - C17442 * C1591 +
             C17372 * C1713) *
                C26754 * C26752 * C26669 -
            (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
             C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
                C26754 * C26752 * C26718) *
               C3444 +
           ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
             C17442 * C2946 - C17648 * C2792 - C17442 * C3241 +
             C17372 * C3384) *
                C26754 * C26752 * C26718 -
            (C17442 * C4355 - C17648 * C4242 - C17442 * C4567 + C17372 * C4672 +
             C17441 * C2946 - C17647 * C2792 - C17441 * C3241 +
             C17371 * C3384) *
                C26754 * C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26605 * C3444 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C26641) *
              C3446 +
          ((C9338 * C17371 + C11237 * C17372) * C26754 * C26605 * C26641 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26605 * C3444) *
              C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            C19138 * C17372) *
               C26754 * C26605 * C3444 -
           ((C8983 * C2798 - C8984 * C2793 - C8983 * C2799 + C26752 * C2802) *
                C17372 +
            C10300 * C17371) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
           C18174 * C17372) *
              C26754 * C26605 * C3883 -
          (C11236 * C17372 + C9336 * C17371) * C26754 * C26605 * C3884 +
          (C9337 * C17371 + C14189 * C17372) * C26754 * C26605 * C3885 -
          ((C8983 * C14179 - C8984 * C14178 - C8983 * C14180 +
            C26752 * C14181) *
               C17372 +
           C12287 * C17371) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26605 * C3444 +
           (((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C26605 * C26641) *
              C3446 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26605 * C3444 +
           (((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
            ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
               C26605 * C26641) *
              C3447 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C26605 * C3444 +
           (((C1845 - C1844) * C8983 + (C1847 - C1846) * C26752) * C17371 +
            ((C141 * C2793 - C26754 * C2871) * C8983 +
             (C141 * C2799 - C26754 * C2874) * C26752) *
                C17372) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C8983 +
            (C26754 * C147 - C141 * C93) * C26752) *
               C17371 +
           ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
              C26605 * C3883 +
          (((C141 * C580 - C26754 * C653) * C8983 +
            (C141 * C588 - C26754 * C659) * C26752) *
               C17371 +
           ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
              C26605 * C3884 +
          (((C26754 * C655 - C141 * C581) * C8983 +
            (C26754 * C661 - C141 * C590) * C26752) *
               C17371 +
           ((C26754 * C5831 - C141 * C5774) * C8983 +
            (C26754 * C5833 - C141 * C5778) * C26752) *
               C17372) *
              C26605 * C3885 +
          (((C141 * C3889 - C26754 * C3930) * C8983 +
            (C141 * C3893 - C26754 * C3932) * C26752) *
               C17371 +
           ((C141 * C14178 - C26754 * C14240) * C8983 +
            (C141 * C14180 - C26754 * C14241) * C26752) *
               C17372) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C8983 +
            (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C26605 * C3444 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C8983 +
            (C17441 * C594 - C17371 * C733 + C17442 * C2799 - C17372 * C2950) *
                C26752) *
               C26754 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C8983 +
           (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
               C26752) *
              C26754 * C26605 * C3883 +
          ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
               C8983 +
           (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
               C26752) *
              C26754 * C26605 * C3884 +
          ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
               C8983 +
           (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
               C26752) *
              C26754 * C26605 * C3885 +
          ((C17441 * C3889 - C17371 * C3968 + C17442 * C14178 -
            C17372 * C14292) *
               C8983 +
           (C17441 * C3893 - C17371 * C3970 + C17442 * C14180 -
            C17372 * C14293) *
               C26752) *
              C26754 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26605 * C3444 +
           (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26605 * C26641) *
              C3446 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26605 * C3444 +
           (((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
            ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
               C26605 * C26641) *
              C3447 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C19289 - C19290) * C141 + (C19291 - C19292) * C26754) * C17372) *
               C26605 * C3444 +
           (((C10453 - C10452) * C141 + (C10455 - C10454) * C26754) * C17371 +
            ((C8983 * C2793 - C26752 * C2798) * C141 +
             (C8983 * C3023 - C26752 * C3026) * C26754) *
                C17372) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C141 +
            (C26752 * C260 - C8983 * C255) * C26754) *
               C17371 +
           ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
              C26605 * C3883 +
          (((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
           ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
              C26605 * C3884 +
          (((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
           ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
              C26605 * C3885 +
          (((C12402 - C12401) * C141 + (C12404 - C12403) * C26754) * C17371 +
           ((C8983 * C14178 - C26752 * C14179) * C141 +
            (C8983 * C14348 - C26752 * C14349) * C26754) *
               C17372) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26605 * C3444 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26605 * C26641) *
              C3446 +
          ((C874 * C26752 * C17371 + C19884 * C17372) * C26605 * C26641 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26605 * C3444) *
              C3447 +
          ((C325 * C26752 * C17371 + C19343 * C17372) * C26605 * C3444 -
           ((C141 * C2871 - C299 * C2793 - C141 * C3023 + C26754 * C3095) *
                C26752 * C17372 +
            C2013 * C26752 * C17371) *
               C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
               C17371 +
           C18418 * C17372) *
              C26605 * C3883 -
          (C19888 * C17372 +
           (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
               C17371) *
              C26605 * C3884 +
          ((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
               C17371 +
           (C141 * C5831 - C299 * C5774 - C141 * C5939 + C26754 * C5994) *
               C26752 * C17372) *
              C26605 * C3885 -
          ((C141 * C14240 - C299 * C14178 - C141 * C14348 + C26754 * C14404) *
               C26752 * C17372 +
           (C141 * C3930 - C299 * C3889 - C141 * C4006 + C26754 * C4045) *
               C26752 * C17371) *
              C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                C141 +
            (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C26605 * C3444 +
           ((C17441 * C583 - C17371 * C727 + C17442 * C2793 - C17372 * C2947) *
                C141 +
            (C17441 * C797 - C17371 * C929 + C17442 * C3023 - C17372 * C3171) *
                C26754) *
               C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C141 +
           (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
               C26754) *
              C26752 * C26605 * C3883 +
          ((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
               C141 +
           (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
               C26754) *
              C26752 * C26605 * C3884 +
          ((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
               C141 +
           (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
               C26754) *
              C26752 * C26605 * C3885 +
          ((C17441 * C3889 - C17371 * C3968 + C17442 * C14178 -
            C17372 * C14292) *
               C141 +
           (C17441 * C4006 - C17371 * C4080 + C17442 * C14348 -
            C17372 * C14455) *
               C26754) *
              C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3446 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
                      (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3447 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C19289 - C19290) * C17442 + (C19444 - C19445) * C17372) *
                         C26754 * C26605 * C3444 +
                     ((C10453 - C10452) * C17441 + (C10607 - C10606) * C17371 +
                      (C8983 * C2793 - C26752 * C2798) * C17442 +
                      (C8983 * C3242 - C26752 * C3245) * C17372) *
                         C26754 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C17441 +
                     (C26752 * C410 - C8983 * C405) * C17371 +
                     (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                        C26754 * C26605 * C3883 +
                    ((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                     (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                        C26754 * C26605 * C3884 +
                    ((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                     (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                        C26754 * C26605 * C3885 +
                    ((C12402 - C12401) * C17441 + (C12514 - C12513) * C17371 +
                     (C8983 * C14178 - C26752 * C14179) * C17442 +
                     (C8983 * C14508 - C26752 * C14509) * C17372) *
                        C26754 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezy[39] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3446 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
                      (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3447 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C26605 * C3444 +
                     ((C1845 - C1844) * C17441 + (C2171 - C2170) * C17371 +
                      (C141 * C2793 - C26754 * C2871) * C17442 +
                      (C141 * C3242 - C26754 * C3314) * C17372) *
                         C26752 * C26605 * C26641) *
                        C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   (((C26754 * C142 - C141 * C87) * C17441 +
                     (C26754 * C449 - C141 * C405) * C17371 +
                     (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                        C26752 * C26605 * C3883 +
                    ((C141 * C580 - C26754 * C653) * C17441 +
                     (C141 * C985 - C26754 * C1047) * C17371 +
                     (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                        C26752 * C26605 * C3884 +
                    ((C26754 * C655 - C141 * C581) * C17441 +
                     (C26754 * C1049 - C141 * C987) * C17371 +
                     (C26754 * C5831 - C141 * C5774) * C17442 +
                     (C26754 * C6151 - C141 * C6097) * C17372) *
                        C26752 * C26605 * C3885 +
                    ((C141 * C3889 - C26754 * C3930) * C17441 +
                     (C141 * C4116 - C26754 * C4154) * C17371 +
                     (C141 * C14178 - C26754 * C14240) * C17442 +
                     (C141 * C14508 - C26754 * C14562) * C17372) *
                        C26752 * C26605 * C3886) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezz[39] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26605 * C3444 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26605 * C26641) *
              C3446 +
          ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
            C17442 * C2946 - C17648 * C2792 - C17442 * C3241 + C17372 * C3384) *
               C26754 * C26752 * C26605 * C26641 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26605 * C3444) *
              C3447 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C26605 * C3444 -
           (C17442 * C2947 - C17648 * C2793 - C17442 * C3242 + C17372 * C3385 +
            C17441 * C727 - C17647 * C583 - C17441 * C989 + C17371 * C1111) *
               C26754 * C26752 * C26605 * C26641) *
              C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
           C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
              C26754 * C26752 * C26605 * C3883 -
          (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
           C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
              C26754 * C26752 * C26605 * C3884 +
          (C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
           C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
              C26754 * C26752 * C26605 * C3885 -
          (C17442 * C14292 - C17648 * C14178 - C17442 * C14508 +
           C17372 * C14613 + C17441 * C3968 - C17647 * C3889 - C17441 * C4116 +
           C17371 * C4191) *
              C26754 * C26752 * C26605 * C3886) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) *
                 C17371 +
             C18174 * C17372) *
                C26754 * C6255 -
            (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
               C26717 +
           ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
            (C11236 * C17372 + C9336 * C17371) * C26754 * C6255) *
               C26641) *
              C26709 +
          (((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
            (C18176 * C17372 +
             (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                 C17371) *
                C26754 * C6255) *
               C26717 +
           ((C9338 * C17371 + C11237 * C17372) * C26754 * C6255 -
            ((C8983 * C4244 - C8984 * C4242 - C8983 * C4245 + C26752 * C4248) *
                 C17372 +
             C11237 * C17371) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26754 * C142 - C141 * C87) * C8983 +
              (C26754 * C147 - C141 * C93) * C26752) *
                 C17371 +
             ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) *
                 C17372) *
                C6255 +
            (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
             ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) *
                 C17372) *
                C26669) *
               C26717 +
           ((((C141 * C580 - C26754 * C653) * C8983 +
              (C141 * C588 - C26754 * C659) * C26752) *
                 C17371 +
             ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) *
                 C17372) *
                C6255 +
            (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
             ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C26709 +
          (((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
             ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
                C6255 +
            (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
             ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
                C26669) *
               C26717 +
           ((((C667 - C666) * C8983 + (C669 - C668) * C26752) * C17371 +
             ((C2876 - C2877) * C8983 + (C2878 - C2879) * C26752) * C17372) *
                C6255 +
            (((C2877 - C2876) * C8983 + (C2879 - C2878) * C26752) * C17371 +
             ((C141 * C4242 - C26754 * C4301) * C8983 +
              (C141 * C4245 - C26754 * C4303) * C26752) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C8983 +
             (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                 C26752) *
                C26754 * C6255 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C8983 +
             (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
              C17372 * C1334) *
                 C26752) *
                C26754 * C26669) *
               C26717 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C8983 +
             (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                 C26752) *
                C26754 * C6255 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C8983 +
             (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
              C17442 * C4247) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C8983 +
             (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                 C26752) *
                C26754 * C6255 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C8983 +
             (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
              C17442 * C1195) *
                 C26752) *
                C26754 * C26669) *
               C26717 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C8983 +
             (C17371 * C730 - C17441 * C586 + C17372 * C2949 - C17442 * C2797) *
                 C26752) *
                C26754 * C6255 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C8983 +
             (C17441 * C2797 - C17371 * C2949 + C17442 * C4245 -
              C17372 * C4357) *
                 C26752) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C26752 * C92 - C8983 * C87) * C141 +
              (C26752 * C260 - C8983 * C255) * C26754) *
                 C17371 +
             ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
                C6255 +
            (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
             ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
                C26669) *
               C26717 +
           ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
             ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
                C6255 +
            (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
             ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
                C26669) *
               C26641) *
              C26709 +
          (((((C8983 * C88 - C26752 * C94) * C141 +
              (C8983 * C256 - C26752 * C261) * C26754) *
                 C17371 +
             ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
                C6255 +
            (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
             ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
                C26669) *
               C26717 +
           ((((C9511 - C9510) * C141 + (C9513 - C9512) * C26754) * C17371 +
             ((C11446 - C11447) * C141 + (C11448 - C11449) * C26754) * C17372) *
                C6255 +
            (((C11447 - C11446) * C141 + (C11449 - C11448) * C26754) * C17371 +
             ((C8983 * C4242 - C26752 * C4244) * C141 +
              (C8983 * C4409 - C26752 * C4411) * C26754) *
                 C17372) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                 C17371 +
             C18418 * C17372) *
                C6255 -
            (C18419 * C17372 + C18418 * C17371) * C26669) *
               C26717 +
           ((C19888 * C17371 + C21172 * C17372) * C26669 -
            (C19888 * C17372 +
             (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) *
                 C26752 * C17371) *
                C6255) *
               C26641) *
              C26709 +
          (((C18410 * C17371 + C18411 * C17372) * C26669 -
            (C18410 * C17372 + C324 * C26752 * C17371) * C6255) *
               C26717 +
           ((C874 * C26752 * C17371 + C19884 * C17372) * C6255 -
            ((C141 * C4301 - C299 * C4242 - C141 * C4409 + C26754 * C4462) *
                 C26752 * C17372 +
             C19884 * C17371) *
                C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                 C141 +
             (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                 C26754) *
                C26752 * C6255 +
            ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
              C17372 * C1328) *
                 C141 +
             (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
              C17372 * C1530) *
                 C26754) *
                C26752 * C26669) *
               C26717 +
           (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                 C141 +
             (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                 C26754) *
                C26752 * C6255 +
            ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
              C17442 * C4243) *
                 C141 +
             (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
              C17442 * C4408) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                 C141 +
             (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                 C26754) *
                C26752 * C6255 +
            ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
              C17442 * C1185) *
                 C141 +
             (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
              C17442 * C1399) *
                 C26754) *
                C26752 * C26669) *
               C26717 +
           (((C17371 * C724 - C17441 * C579 + C17372 * C2946 - C17442 * C2792) *
                 C141 +
             (C17371 * C926 - C17441 * C794 + C17372 * C3170 - C17442 * C3022) *
                 C26754) *
                C26752 * C6255 +
            ((C17441 * C2792 - C17371 * C2946 + C17442 * C4242 -
              C17372 * C4355) *
                 C141 +
             (C17441 * C3022 - C17371 * C3170 + C17442 * C4409 -
              C17372 * C4515) *
                 C26754) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C17441 +
             (C26752 * C410 - C8983 * C405) * C17371 +
             (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                C26754 * C6255 +
            ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
             (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                C26754 * C26669) *
               C26717 +
           (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
             (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                C26754 * C6255 +
            ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
             (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                C26754 * C26669) *
               C26641) *
              C26709 +
          ((((C8983 * C88 - C26752 * C94) * C17441 +
             (C8983 * C406 - C26752 * C411) * C17371 +
             (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                C26754 * C6255 +
            ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
             (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                C26754 * C26669) *
               C26717 +
           (((C9511 - C9510) * C17441 + (C9677 - C9676) * C17371 +
             (C11446 - C11447) * C17442 + (C11652 - C11653) * C17372) *
                C26754 * C6255 +
            ((C11447 - C11446) * C17441 + (C11653 - C11652) * C17371 +
             (C8983 * C4242 - C26752 * C4244) * C17442 +
             (C8983 * C4567 - C26752 * C4569) * C17372) *
                C26754 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezy[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C17441 +
             (C26754 * C449 - C141 * C405) * C17371 +
             (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                C26752 * C6255 +
            ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
             (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                C26752 * C26669) *
               C26717 +
           (((C141 * C580 - C26754 * C653) * C17441 +
             (C141 * C985 - C26754 * C1047) * C17371 +
             (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                C26752 * C6255 +
            ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
             (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                C26752 * C26669) *
               C26641) *
              C26709 +
          ((((C154 - C153) * C17441 + (C456 - C455) * C17371 +
             (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                C26752 * C6255 +
            ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
             (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                C26752 * C26669) *
               C26717 +
           (((C667 - C666) * C17441 + (C1055 - C1054) * C17371 +
             (C2876 - C2877) * C17442 + (C3316 - C3317) * C17372) *
                C26752 * C6255 +
            ((C2877 - C2876) * C17441 + (C3317 - C3316) * C17371 +
             (C141 * C4242 - C26754 * C4301) * C17442 +
             (C141 * C4567 - C26754 * C4621) * C17372) *
                C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezz[40] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
             C17442 * C1326 - C17648 * C1183 - C17442 * C1588 +
             C17372 * C1711) *
                C26754 * C26752 * C6255 -
            (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
             C17441 * C1326 - C17647 * C1183 - C17441 * C1588 +
             C17371 * C1711) *
                C26754 * C26752 * C26669) *
               C26717 +
           ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
             C17442 * C4354 - C17648 * C4243 - C17442 * C4566 +
             C17372 * C4673) *
                C26754 * C26752 * C26669 -
            (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
             C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
                C26754 * C26752 * C6255) *
               C26641) *
              C26709 +
          (((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
             C17442 * C1329 - C17648 * C1185 - C17442 * C1591 +
             C17372 * C1713) *
                C26754 * C26752 * C26669 -
            (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
             C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
                C26754 * C26752 * C6255) *
               C26717 +
           ((C17441 * C724 - C17647 * C579 - C17441 * C986 + C17371 * C1107 +
             C17442 * C2946 - C17648 * C2792 - C17442 * C3241 +
             C17372 * C3384) *
                C26754 * C26752 * C6255 -
            (C17442 * C4355 - C17648 * C4242 - C17442 * C4567 + C17372 * C4672 +
             C17441 * C2946 - C17647 * C2792 - C17441 * C3241 +
             C17371 * C3384) *
                C26754 * C26752 * C26669) *
               C26641) *
              C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26747 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26748 +
           (C18175 * C17371 + C23827 * C17372) * C26754 * C8095) *
              C26717 +
          ((C11236 * C17371 + C12652 * C17372) * C26754 * C26748 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C26747 -
           ((C8983 * C15556 - C8984 * C15555 - C8983 * C15557 +
             C26752 * C15558) *
                C17372 +
            C12652 * C17371) *
               C26754 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26747 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26748 +
           (((C18233 - C18232) * C8983 + (C18235 - C18234) * C26752) * C17371 +
            ((C23864 - C23865) * C8983 + (C23866 - C23867) * C26752) * C17372) *
               C8095) *
              C26717 +
          ((((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C26747 +
           (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
            ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) * C17372) *
               C26748 +
           (((C21012 - C21011) * C8983 + (C21014 - C21013) * C26752) * C17371 +
            ((C141 * C15555 - C26754 * C15593) * C8983 +
             (C141 * C15557 - C26754 * C15594) * C26752) *
                C17372) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26747 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26748 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C8983 +
            (C17371 * C1334 - C17441 * C1193 + C17372 * C7227 -
             C17442 * C7150) *
                C26752) *
               C26754 * C8095) *
              C26717 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C26747 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C8983 +
            (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
             C17442 * C4247) *
                C26752) *
               C26754 * C26748 +
           ((C17441 * C4243 - C17371 * C4354 + C17442 * C15555 -
             C17372 * C15629) *
                C8983 +
            (C17441 * C4247 - C17371 * C4356 + C17442 * C15557 -
             C17372 * C15630) *
                C26752) *
               C26754 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyx[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26747 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26748 +
           (((C18341 - C18340) * C141 + (C18343 - C18342) * C26754) * C17371 +
            ((C23940 - C23941) * C141 + (C23942 - C23943) * C26754) * C17372) *
               C8095) *
              C26717 +
          ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C26747 +
           (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
            ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
               C26748 +
           (((C12815 - C12814) * C141 + (C12817 - C12816) * C26754) * C17371 +
            ((C8983 * C15555 - C26752 * C15556) * C141 +
             (C8983 * C15665 - C26752 * C15666) * C26754) *
                C17372) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyy[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26747 -
           (C18419 * C17372 + C18418 * C17371) * C26748 +
           (C18419 * C17371 + C23986 * C17372) * C8095) *
              C26717 +
          ((C19888 * C17371 + C21172 * C17372) * C26748 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C26747 -
           ((C141 * C15593 - C299 * C15555 - C141 * C15665 + C26754 * C15701) *
                C26752 * C17372 +
            C21172 * C17371) *
               C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eeyz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26747 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26748 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C141 +
            (C17371 * C1530 - C17441 * C1398 + C17372 * C7337 -
             C17442 * C7263) *
                C26754) *
               C26752 * C8095) *
              C26717 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C26747 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C141 +
            (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
             C17442 * C4408) *
                C26754) *
               C26752 * C26748 +
           ((C17441 * C4243 - C17371 * C4354 + C17442 * C15555 -
             C17372 * C15629) *
                C141 +
            (C17441 * C4408 - C17371 * C4514 + C17442 * C15665 -
             C17372 * C15736) *
                C26754) *
               C26752 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eezx[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26747 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26748 +
                     ((C18341 - C18340) * C17441 + (C18523 - C18522) * C17371 +
                      (C23940 - C23941) * C17442 + (C24058 - C24059) * C17372) *
                         C26754 * C8095) *
                        C26717 +
                    (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C26747 +
                     ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
                      (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                         C26754 * C26748 +
                     ((C12815 - C12814) * C17441 + (C12975 - C12974) * C17371 +
                      (C8983 * C15555 - C26752 * C15556) * C17442 +
                      (C8983 * C15771 - C26752 * C15772) * C17372) *
                         C26754 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezy[41] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26747 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26748 +
                     ((C18233 - C18232) * C17441 + (C18581 - C18580) * C17371 +
                      (C23864 - C23865) * C17442 + (C24095 - C24096) * C17372) *
                         C26752 * C8095) *
                        C26717 +
                    (((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C26747 +
                     ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
                      (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                         C26752 * C26748 +
                     ((C21012 - C21011) * C17441 + (C21324 - C21323) * C17371 +
                      (C141 * C15555 - C26754 * C15593) * C17442 +
                      (C141 * C15771 - C26754 * C15807) * C17372) *
                         C26752 * C8095) *
                        C26641) *
                   C26570) /
                  (p * q * std::sqrt(p + q));
    d2eezz[41] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26747 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26748 +
           (C17441 * C1328 - C17647 * C1184 - C17441 * C1590 + C17371 * C1712 +
            C17442 * C7225 - C17648 * C7146 - C17442 * C7373 + C17372 * C7448) *
               C26754 * C26752 * C8095) *
              C26717 +
          ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
            C17442 * C4354 - C17648 * C4243 - C17442 * C4566 + C17372 * C4673) *
               C26754 * C26752 * C26748 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C26747 -
           (C17442 * C15629 - C17648 * C15555 - C17442 * C15771 +
            C17372 * C15842 + C17441 * C4354 - C17647 * C4243 - C17441 * C4566 +
            C17371 * C4673) *
               C26754 * C26752 * C8095) *
              C26641) *
         C26570) /
        (p * q * std::sqrt(p + q));
    d2eexx[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C6255 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C574 +
          ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C6255) *
              C575 +
          ((C9337 * C17371 + C14189 * C17372) * C26754 * C6255 -
           ((C8983 * C12642 - C8984 * C12641 - C8983 * C12643 +
             C26752 * C12644) *
                C17372 +
            C14189 * C17371) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C6255 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C26589 * C3446 +
          ((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C6255) *
              C26589 * C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            C19138 * C17372) *
               C26754 * C6255 -
           ((C8983 * C1198 - C8984 * C1187 - C8983 * C1199 + C26752 * C1205) *
                C17372 +
            C19138 * C17371) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
           C18174 * C17372) *
              C26754 * C7141 -
          (C18175 * C17372 + C18174 * C17371) * C26754 * C7142 +
          (C18175 * C17371 + C23827 * C17372) * C26754 * C7143 -
          ((C8983 * C23817 - C8984 * C23816 - C8983 * C23818 +
            C26752 * C23819) *
               C17372 +
           C23827 * C17371) *
              C26754 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C6255 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C574 +
          ((((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C6255 +
           (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
            ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) * C17372) *
               C26669) *
              C575 +
          ((((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C22519 - C22520) * C8983 + (C22521 - C22522) * C26752) * C17372) *
               C6255 +
           (((C22520 - C22519) * C8983 + (C22522 - C22521) * C26752) * C17371 +
            ((C141 * C12641 - C26754 * C12703) * C8983 +
             (C141 * C12643 - C26754 * C12704) * C26752) *
                C17372) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C6255 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C26589 * C3446 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C6255 +
           (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
            ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
               C26669) *
              C26589 * C3447 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C6255 +
           (((C2340 - C2339) * C8983 + (C2342 - C2341) * C26752) * C17371 +
            ((C141 * C1187 - C26754 * C1261) * C8983 +
             (C141 * C1199 - C26754 * C1267) * C26752) *
                C17372) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26754 * C142 - C141 * C87) * C8983 +
            (C26754 * C147 - C141 * C93) * C26752) *
               C17371 +
           ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
              C7141 +
          (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
           ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
              C7142 +
          (((C18233 - C18232) * C8983 + (C18235 - C18234) * C26752) * C17371 +
           ((C23864 - C23865) * C8983 + (C23866 - C23867) * C26752) * C17372) *
              C7143 +
          (((C23865 - C23864) * C8983 + (C23867 - C23866) * C26752) * C17371 +
           ((C141 * C23816 - C26754 * C23861) * C8983 +
            (C141 * C23818 - C26754 * C23862) * C26752) *
               C17372) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C574 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C6255 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C8983 +
            (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
             C17442 * C4247) *
                C26752) *
               C26754 * C26669) *
              C575 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C8983 +
            (C17441 * C5778 - C17371 * C5887 + C17442 * C12643 -
             C17372 * C12756) *
                C26752) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C6255 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C8983 +
            (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
             C17442 * C1195) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C8983 +
            (C17441 * C1197 - C17371 * C1336 + C17442 * C1199 -
             C17372 * C1337) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C8983 +
           (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
               C26752) *
              C26754 * C7141 +
          ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 - C17372 * C1328) *
               C8983 +
           (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 - C17372 * C1334) *
               C26752) *
              C26754 * C7142 +
          ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 - C17442 * C7146) *
               C8983 +
           (C17371 * C1334 - C17441 * C1193 + C17372 * C7227 - C17442 * C7150) *
               C26752) *
              C26754 * C7143 +
          ((C17441 * C7146 - C17371 * C7225 + C17442 * C23816 -
            C17372 * C23901) *
               C8983 +
           (C17441 * C7150 - C17371 * C7227 + C17442 * C23818 -
            C17372 * C23902) *
               C26752) *
              C26754 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[42] +=
        (-std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C6255 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C574 +
          ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C6255 +
           (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
            ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
               C26669) *
              C575 +
          ((((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C6255 +
           (((C14352 - C14351) * C141 + (C14354 - C14353) * C26754) * C17371 +
            ((C8983 * C12641 - C26752 * C12642) * C141 +
             (C8983 * C12811 - C26752 * C12812) * C26754) *
                C17372) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C6255 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C26589 * C3446 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C6255 +
           (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
            ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
               C26669) *
              C26589 * C3447 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C19289 - C19290) * C141 + (C19291 - C19292) * C26754) * C17372) *
               C6255 +
           (((C19290 - C19289) * C141 + (C19292 - C19291) * C26754) * C17371 +
            ((C8983 * C1187 - C26752 * C1198) * C141 +
             (C8983 * C1401 - C26752 * C1407) * C26754) *
                C17372) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C26752 * C92 - C8983 * C87) * C141 +
            (C26752 * C260 - C8983 * C255) * C26754) *
               C17371 +
           ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
              C7141 +
          (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
           ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
              C7142 +
          (((C18341 - C18340) * C141 + (C18343 - C18342) * C26754) * C17371 +
           ((C23940 - C23941) * C141 + (C23942 - C23943) * C26754) * C17372) *
              C7143 +
          (((C23941 - C23940) * C141 + (C23943 - C23942) * C26754) * C17371 +
           ((C8983 * C23816 - C26752 * C23817) * C141 +
            (C8983 * C23937 - C26752 * C23938) * C26754) *
               C17372) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C6255 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C574 +
          ((C19888 * C17371 + C21172 * C17372) * C26669 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C6255) *
              C575 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            C22680 * C17372) *
               C6255 -
           ((C141 * C12703 - C299 * C12641 - C141 * C12811 + C26754 * C12867) *
                C26752 * C17372 +
            C22680 * C17371) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C6255 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C26589 * C3446 +
          ((C18410 * C17371 + C18411 * C17372) * C26669 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C6255) *
              C26589 * C3447 +
          ((C325 * C26752 * C17371 + C19343 * C17372) * C6255 -
           ((C141 * C1261 - C299 * C1187 - C141 * C1401 + C26754 * C1463) *
                C26752 * C17372 +
            C19343 * C17371) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
               C17371 +
           C18418 * C17372) *
              C7141 -
          (C18419 * C17372 + C18418 * C17371) * C7142 +
          (C18419 * C17371 + C23986 * C17372) * C7143 -
          ((C141 * C23861 - C299 * C23816 - C141 * C23937 + C26754 * C23977) *
               C26752 * C17372 +
           C23986 * C17371) *
              C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[42] +=
        (-std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C574 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C6255 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C141 +
            (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
             C17442 * C4408) *
                C26754) *
               C26752 * C26669) *
              C575 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C141 +
            (C17441 * C5939 - C17371 * C6045 + C17442 * C12811 -
             C17372 * C12918) *
                C26754) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C6255 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C141 +
            (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
             C17442 * C1399) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C141 +
            (C17441 * C1400 - C17371 * C1532 + C17442 * C1401 -
             C17372 * C1533) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
               C141 +
           (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
               C26754) *
              C26752 * C7141 +
          ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 - C17372 * C1328) *
               C141 +
           (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 - C17372 * C1530) *
               C26754) *
              C26752 * C7142 +
          ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 - C17442 * C7146) *
               C141 +
           (C17371 * C1530 - C17441 * C1398 + C17372 * C7337 - C17442 * C7263) *
               C26754) *
              C26752 * C7143 +
          ((C17441 * C7146 - C17371 * C7225 + C17442 * C23816 -
            C17372 * C23901) *
               C141 +
           (C17441 * C7263 - C17371 * C7337 + C17442 * C23937 -
            C17372 * C24020) *
               C26754) *
              C26752 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[42] += (-std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C6255 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C574 +
                    (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C6255 +
                     ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
                      (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                         C26754 * C26669) *
                        C575 +
                    (((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                      (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                         C26754 * C6255 +
                     ((C14352 - C14351) * C17441 + (C14512 - C14511) * C17371 +
                      (C8983 * C12641 - C26752 * C12642) * C17442 +
                      (C8983 * C12971 - C26752 * C12972) * C17372) *
                         C26754 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C6255 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3446 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C6255 +
                     ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
                      (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3447 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C19289 - C19290) * C17442 + (C19444 - C19445) * C17372) *
                         C26754 * C6255 +
                     ((C19290 - C19289) * C17441 + (C19445 - C19444) * C17371 +
                      (C8983 * C1187 - C26752 * C1198) * C17442 +
                      (C8983 * C1593 - C26752 * C1599) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C26752 * C92 - C8983 * C87) * C17441 +
                     (C26752 * C410 - C8983 * C405) * C17371 +
                     (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                        C26754 * C7141 +
                    ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                     (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                        C26754 * C7142 +
                    ((C18341 - C18340) * C17441 + (C18523 - C18522) * C17371 +
                     (C23940 - C23941) * C17442 + (C24058 - C24059) * C17372) *
                        C26754 * C7143 +
                    ((C23941 - C23940) * C17441 + (C24059 - C24058) * C17371 +
                     (C8983 * C23816 - C26752 * C23817) * C17442 +
                     (C8983 * C24055 - C26752 * C24056) * C17372) *
                        C26754 * C7144) *
                   C26589 * C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezy[42] += (-std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C6255 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C574 +
                    (((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C6255 +
                     ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
                      (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                         C26752 * C26669) *
                        C575 +
                    (((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C22519 - C22520) * C17442 + (C22831 - C22832) * C17372) *
                         C26752 * C6255 +
                     ((C22520 - C22519) * C17441 + (C22832 - C22831) * C17371 +
                      (C141 * C12641 - C26754 * C12703) * C17442 +
                      (C141 * C12971 - C26754 * C13025) * C17372) *
                         C26752 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q)) -
                  (std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C6255 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3446 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C6255 +
                     ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
                      (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3447 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C6255 +
                     ((C2340 - C2339) * C17441 + (C2666 - C2665) * C17371 +
                      (C141 * C1187 - C26754 * C1261) * C17442 +
                      (C141 * C1593 - C26754 * C1655) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) +
                  (2 * std::pow(Pi, 2.5) *
                   (((C26754 * C142 - C141 * C87) * C17441 +
                     (C26754 * C449 - C141 * C405) * C17371 +
                     (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                        C26752 * C7141 +
                    ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                     (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                        C26752 * C7142 +
                    ((C18233 - C18232) * C17441 + (C18581 - C18580) * C17371 +
                     (C23864 - C23865) * C17442 + (C24095 - C24096) * C17372) *
                        C26752 * C7143 +
                    ((C23865 - C23864) * C17441 + (C24096 - C24095) * C17371 +
                     (C141 * C23816 - C26754 * C23861) * C17442 +
                     (C141 * C24055 - C26754 * C24093) * C17372) *
                        C26752 * C7144) *
                   C26589 * C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezz[42] +=
        (-std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C6255 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C574 +
          ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
            C17442 * C4354 - C17648 * C4243 - C17442 * C4566 + C17372 * C4673) *
               C26754 * C26752 * C26669 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C6255) *
              C575 +
          ((C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C6255 -
           (C17442 * C12755 - C17648 * C12641 - C17442 * C12971 +
            C17372 * C13076 + C17441 * C5885 - C17647 * C5774 - C17441 * C6097 +
            C17371 * C6204) *
               C26754 * C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C6255 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C26589 * C3446 +
          ((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
            C17442 * C1329 - C17648 * C1185 - C17442 * C1591 + C17372 * C1713) *
               C26754 * C26752 * C26669 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C6255) *
              C26589 * C3447 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C6255 -
           (C17442 * C1331 - C17648 * C1187 - C17442 * C1593 + C17372 * C1715 +
            C17441 * C1330 - C17647 * C1186 - C17441 * C1592 + C17371 * C1714) *
               C26754 * C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
           C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
              C26754 * C26752 * C7141 -
          (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
           C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
              C26754 * C26752 * C7142 +
          (C17441 * C1328 - C17647 * C1184 - C17441 * C1590 + C17371 * C1712 +
           C17442 * C7225 - C17648 * C7146 - C17442 * C7373 + C17372 * C7448) *
              C26754 * C26752 * C7143 -
          (C17442 * C23901 - C17648 * C23816 - C17442 * C24055 +
           C17372 * C24130 + C17441 * C7225 - C17647 * C7146 - C17441 * C7373 +
           C17371 * C7448) *
              C26754 * C26752 * C7144) *
         C26589 * C26570) /
            (p * q * std::sqrt(p + q));
    d2eexx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C26747 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26748 +
           (C18175 * C17371 + C23827 * C17372) * C26754 * C8095) *
              C26589 * C26709 +
          ((C18176 * C17371 + C18177 * C17372) * C26754 * C26748 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C26747 -
           ((C8983 * C7147 - C8984 * C7145 - C8983 * C7148 + C26752 * C7151) *
                C17372 +
            C18177 * C17371) *
               C26754 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C26747 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26748 +
           (((C18233 - C18232) * C8983 + (C18235 - C18234) * C26752) * C17371 +
            ((C23864 - C23865) * C8983 + (C23866 - C23867) * C26752) * C17372) *
               C8095) *
              C26589 * C26709 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C26747 +
           (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
            ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
               C26748 +
           (((C1274 - C1273) * C8983 + (C1276 - C1275) * C26752) * C17371 +
            ((C141 * C7145 - C26754 * C7188) * C8983 +
             (C141 * C7148 - C26754 * C7190) * C26752) *
                C17372) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C26747 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26748 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C8983 +
            (C17371 * C1334 - C17441 * C1193 + C17372 * C7227 -
             C17442 * C7150) *
                C26752) *
               C26754 * C8095) *
              C26589 * C26709 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C26747 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C8983 +
            (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
             C17442 * C1195) *
                C26752) *
               C26754 * C26748 +
           ((C17441 * C1185 - C17371 * C1329 + C17442 * C7145 -
             C17372 * C7226) *
                C8983 +
            (C17441 * C1195 - C17371 * C1335 + C17442 * C7148 -
             C17372 * C7228) *
                C26752) *
               C26754 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyx[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C26747 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26748 +
           (((C18341 - C18340) * C141 + (C18343 - C18342) * C26754) * C17371 +
            ((C23940 - C23941) * C141 + (C23942 - C23943) * C26754) * C17372) *
               C8095) *
              C26589 * C26709 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C26747 +
           (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
            ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
               C26748 +
           (((C18349 - C18348) * C141 + (C18351 - C18350) * C26754) * C17371 +
            ((C8983 * C7145 - C26752 * C7147) * C141 +
             (C8983 * C7264 - C26752 * C7266) * C26754) *
                C17372) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyy[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C26747 -
           (C18419 * C17372 + C18418 * C17371) * C26748 +
           (C18419 * C17371 + C23986 * C17372) * C8095) *
              C26589 * C26709 +
          ((C18410 * C17371 + C18411 * C17372) * C26748 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C26747 -
           ((C141 * C7188 - C299 * C7145 - C141 * C7264 + C26754 * C7301) *
                C26752 * C17372 +
            C18411 * C17371) *
               C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eeyz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C26747 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26748 +
           ((C17371 * C1328 - C17441 * C1184 + C17372 * C7225 -
             C17442 * C7146) *
                C141 +
            (C17371 * C1530 - C17441 * C1398 + C17372 * C7337 -
             C17442 * C7263) *
                C26754) *
               C26752 * C8095) *
              C26589 * C26709 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C26747 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C141 +
            (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
             C17442 * C1399) *
                C26754) *
               C26752 * C26748 +
           ((C17441 * C1185 - C17371 * C1329 + C17442 * C7145 -
             C17372 * C7226) *
                C141 +
            (C17441 * C1399 - C17371 * C1531 + C17442 * C7264 -
             C17372 * C7338) *
                C26754) *
               C26752 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eezx[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C26747 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26748 +
                     ((C18341 - C18340) * C17441 + (C18523 - C18522) * C17371 +
                      (C23940 - C23941) * C17442 + (C24058 - C24059) * C17372) *
                         C26754 * C8095) *
                        C26589 * C26709 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C26747 +
                     ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
                      (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                         C26754 * C26748 +
                     ((C18349 - C18348) * C17441 + (C18527 - C18526) * C17371 +
                      (C8983 * C7145 - C26752 * C7147) * C17442 +
                      (C8983 * C7374 - C26752 * C7376) * C17372) *
                         C26754 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezy[43] += (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C26747 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26748 +
                     ((C18233 - C18232) * C17441 + (C18581 - C18580) * C17371 +
                      (C23864 - C23865) * C17442 + (C24095 - C24096) * C17372) *
                         C26752 * C8095) *
                        C26589 * C26709 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C26747 +
                     ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
                      (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                         C26752 * C26748 +
                     ((C1274 - C1273) * C17441 + (C1660 - C1659) * C17371 +
                      (C141 * C7145 - C26754 * C7188) * C17442 +
                      (C141 * C7374 - C26754 * C7412) * C17372) *
                         C26752 * C8095) *
                        C26589 * C26576)) /
                  (p * q * std::sqrt(p + q));
    d2eezz[43] +=
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C26747 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26748 +
           (C17441 * C1328 - C17647 * C1184 - C17441 * C1590 + C17371 * C1712 +
            C17442 * C7225 - C17648 * C7146 - C17442 * C7373 + C17372 * C7448) *
               C26754 * C26752 * C8095) *
              C26589 * C26709 +
          ((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
            C17442 * C1329 - C17648 * C1185 - C17442 * C1591 + C17372 * C1713) *
               C26754 * C26752 * C26748 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C26747 -
           (C17442 * C7226 - C17648 * C7145 - C17442 * C7374 + C17372 * C7447 +
            C17441 * C1329 - C17647 * C1185 - C17441 * C1591 + C17371 * C1713) *
               C26754 * C26752 * C8095) *
              C26589 * C26576)) /
        (p * q * std::sqrt(p + q));
    d2eexx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C6255 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C26589 * C3446 +
          ((C18176 * C17371 + C18177 * C17372) * C26754 * C26669 -
           (C18176 * C17372 +
            (C8983 * C94 - C8984 * C88 - C8983 * C95 + C26752 * C103) *
                C17371) *
               C26754 * C6255) *
              C26589 * C3447 +
          (((C8983 * C96 - C8984 * C89 - C8983 * C97 + C26752 * C104) * C17371 +
            C19138 * C17372) *
               C26754 * C6255 -
           ((C8983 * C1198 - C8984 * C1187 - C8983 * C1199 + C26752 * C1205) *
                C17372 +
            C19138 * C17371) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C8983 * C92 - C8984 * C87 - C8983 * C93 + C26752 * C102) * C17371 +
            C18174 * C17372) *
               C26754 * C6255 -
           (C18175 * C17372 + C18174 * C17371) * C26754 * C26669) *
              C574 +
          ((C11236 * C17371 + C12652 * C17372) * C26754 * C26669 -
           (C11236 * C17372 + C9336 * C17371) * C26754 * C6255) *
              C575 +
          ((C9337 * C17371 + C14189 * C17372) * C26754 * C6255 -
           ((C8983 * C12642 - C8984 * C12641 - C8983 * C12643 +
             C26752 * C12644) *
                C17372 +
            C14189 * C17371) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C6255 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C26589 * C3446 +
          ((((C154 - C153) * C8983 + (C156 - C155) * C26752) * C17371 +
            ((C1269 - C1270) * C8983 + (C1271 - C1272) * C26752) * C17372) *
               C6255 +
           (((C1270 - C1269) * C8983 + (C1272 - C1271) * C26752) * C17371 +
            ((C1273 - C1274) * C8983 + (C1275 - C1276) * C26752) * C17372) *
               C26669) *
              C26589 * C3447 +
          ((((C158 - C157) * C8983 + (C160 - C159) * C26752) * C17371 +
            ((C2339 - C2340) * C8983 + (C2341 - C2342) * C26752) * C17372) *
               C6255 +
           (((C2340 - C2339) * C8983 + (C2342 - C2341) * C26752) * C17371 +
            ((C141 * C1187 - C26754 * C1261) * C8983 +
             (C141 * C1199 - C26754 * C1267) * C26752) *
                C17372) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26754 * C142 - C141 * C87) * C8983 +
             (C26754 * C147 - C141 * C93) * C26752) *
                C17371 +
            ((C18228 - C18229) * C8983 + (C18230 - C18231) * C26752) * C17372) *
               C6255 +
           (((C18229 - C18228) * C8983 + (C18231 - C18230) * C26752) * C17371 +
            ((C18232 - C18233) * C8983 + (C18234 - C18235) * C26752) * C17372) *
               C26669) *
              C574 +
          ((((C141 * C580 - C26754 * C653) * C8983 +
             (C141 * C588 - C26754 * C659) * C26752) *
                C17371 +
            ((C19678 - C19679) * C8983 + (C19680 - C19681) * C26752) * C17372) *
               C6255 +
           (((C19679 - C19678) * C8983 + (C19681 - C19680) * C26752) * C17371 +
            ((C21011 - C21012) * C8983 + (C21013 - C21014) * C26752) * C17372) *
               C26669) *
              C575 +
          ((((C26754 * C655 - C141 * C581) * C8983 +
             (C26754 * C661 - C141 * C590) * C26752) *
                C17371 +
            ((C22519 - C22520) * C8983 + (C22521 - C22522) * C26752) * C17372) *
               C6255 +
           (((C22520 - C22519) * C8983 + (C22522 - C22521) * C26752) * C17371 +
            ((C141 * C12641 - C26754 * C12703) * C8983 +
             (C141 * C12643 - C26754 * C12704) * C26752) *
                C17372) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eexz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C8983 +
            (C17441 * C95 - C17371 * C205 + C17442 * C1189 - C17372 * C1333) *
                C26752) *
               C26754 * C6255 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C8983 +
            (C17371 * C1333 - C17441 * C1189 + C17372 * C1335 -
             C17442 * C1195) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C8983 +
            (C17371 * C206 - C17441 * C97 + C17372 * C1336 - C17442 * C1197) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C8983 +
            (C17441 * C1197 - C17371 * C1336 + C17442 * C1199 -
             C17372 * C1337) *
                C26752) *
               C26754 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C8983 +
            (C17371 * C204 - C17441 * C93 + C17372 * C1332 - C17442 * C1191) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C8983 +
            (C17441 * C1191 - C17371 * C1332 + C17442 * C1193 -
             C17372 * C1334) *
                C26752) *
               C26754 * C26669) *
              C574 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C8983 +
            (C17441 * C588 - C17371 * C729 + C17442 * C2795 - C17372 * C2948) *
                C26752) *
               C26754 * C6255 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C8983 +
            (C17371 * C2948 - C17441 * C2795 + C17372 * C4356 -
             C17442 * C4247) *
                C26752) *
               C26754 * C26669) *
              C575 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C8983 +
            (C17371 * C731 - C17441 * C590 + C17372 * C5887 - C17442 * C5778) *
                C26752) *
               C26754 * C6255 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C8983 +
            (C17441 * C5778 - C17371 * C5887 + C17442 * C12643 -
             C17372 * C12756) *
                C26752) *
               C26754 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyx[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C6255 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C26589 * C3446 +
          ((((C8983 * C88 - C26752 * C94) * C141 +
             (C8983 * C256 - C26752 * C261) * C26754) *
                C17371 +
            ((C18344 - C18345) * C141 + (C18346 - C18347) * C26754) * C17372) *
               C6255 +
           (((C18345 - C18344) * C141 + (C18347 - C18346) * C26754) * C17371 +
            ((C18348 - C18349) * C141 + (C18350 - C18351) * C26754) * C17372) *
               C26669) *
              C26589 * C3447 +
          ((((C26752 * C96 - C8983 * C89) * C141 +
             (C26752 * C262 - C8983 * C257) * C26754) *
                C17371 +
            ((C19289 - C19290) * C141 + (C19291 - C19292) * C26754) * C17372) *
               C6255 +
           (((C19290 - C19289) * C141 + (C19292 - C19291) * C26754) * C17371 +
            ((C8983 * C1187 - C26752 * C1198) * C141 +
             (C8983 * C1401 - C26752 * C1407) * C26754) *
                C17372) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C26752 * C92 - C8983 * C87) * C141 +
             (C26752 * C260 - C8983 * C255) * C26754) *
                C17371 +
            ((C18336 - C18337) * C141 + (C18338 - C18339) * C26754) * C17372) *
               C6255 +
           (((C18337 - C18336) * C141 + (C18339 - C18338) * C26754) * C17371 +
            ((C18340 - C18341) * C141 + (C18342 - C18343) * C26754) * C17372) *
               C26669) *
              C574 +
          ((((C9503 - C9502) * C141 + (C9505 - C9504) * C26754) * C17371 +
            ((C11442 - C11443) * C141 + (C11444 - C11445) * C26754) * C17372) *
               C6255 +
           (((C11443 - C11442) * C141 + (C11445 - C11444) * C26754) * C17371 +
            ((C12814 - C12815) * C141 + (C12816 - C12817) * C26754) * C17372) *
               C26669) *
              C575 +
          ((((C9507 - C9506) * C141 + (C9509 - C9508) * C26754) * C17371 +
            ((C14351 - C14352) * C141 + (C14353 - C14354) * C26754) * C17372) *
               C6255 +
           (((C14352 - C14351) * C141 + (C14354 - C14353) * C26754) * C17371 +
            ((C8983 * C12641 - C26752 * C12642) * C141 +
             (C8983 * C12811 - C26752 * C12812) * C26754) *
                C17372) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyy[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C6255 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C26589 * C3446 +
          ((C18410 * C17371 + C18411 * C17372) * C26669 -
           (C18410 * C17372 + C324 * C26752 * C17371) * C6255) *
              C26589 * C3447 +
          ((C325 * C26752 * C17371 + C19343 * C17372) * C6255 -
           ((C141 * C1261 - C299 * C1187 - C141 * C1401 + C26754 * C1463) *
                C26752 * C17372 +
            C19343 * C17371) *
               C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C141 * C142 - C299 * C87 - C141 * C255 + C26754 * C300) * C26752 *
                C17371 +
            C18418 * C17372) *
               C6255 -
           (C18419 * C17372 + C18418 * C17371) * C26669) *
              C574 +
          ((C19888 * C17371 + C21172 * C17372) * C26669 -
           (C19888 * C17372 +
            (C141 * C653 - C299 * C580 - C141 * C793 + C26754 * C856) * C26752 *
                C17371) *
               C6255) *
              C575 +
          (((C141 * C655 - C299 * C581 - C141 * C795 + C26754 * C857) * C26752 *
                C17371 +
            C22680 * C17372) *
               C6255 -
           ((C141 * C12703 - C299 * C12641 - C141 * C12811 + C26754 * C12867) *
                C26752 * C17372 +
            C22680 * C17371) *
               C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eeyz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3446 +
          (((C17441 * C88 - C17371 * C200 + C17442 * C1182 - C17372 * C1327) *
                C141 +
            (C17441 * C256 - C17371 * C361 + C17442 * C1397 - C17372 * C1529) *
                C26754) *
               C26752 * C6255 +
           ((C17371 * C1327 - C17441 * C1182 + C17372 * C1329 -
             C17442 * C1185) *
                C141 +
            (C17371 * C1529 - C17441 * C1397 + C17372 * C1531 -
             C17442 * C1399) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3447 +
          (((C17371 * C201 - C17441 * C89 + C17372 * C1330 - C17442 * C1186) *
                C141 +
            (C17371 * C362 - C17441 * C257 + C17372 * C1532 - C17442 * C1400) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1186 - C17371 * C1330 + C17442 * C1187 -
             C17372 * C1331) *
                C141 +
            (C17441 * C1400 - C17371 * C1532 + C17442 * C1401 -
             C17372 * C1533) *
                C26754) *
               C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C17371 * C199 - C17441 * C87 + C17372 * C1326 - C17442 * C1183) *
                C141 +
            (C17371 * C360 - C17441 * C255 + C17372 * C1528 - C17442 * C1396) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C1183 - C17371 * C1326 + C17442 * C1184 -
             C17372 * C1328) *
                C141 +
            (C17441 * C1396 - C17371 * C1528 + C17442 * C1398 -
             C17372 * C1530) *
                C26754) *
               C26752 * C26669) *
              C574 +
          (((C17441 * C580 - C17371 * C723 + C17442 * C2791 - C17372 * C2945) *
                C141 +
            (C17441 * C793 - C17371 * C925 + C17442 * C3021 - C17372 * C3169) *
                C26754) *
               C26752 * C6255 +
           ((C17371 * C2945 - C17441 * C2791 + C17372 * C4354 -
             C17442 * C4243) *
                C141 +
            (C17371 * C3169 - C17441 * C3021 + C17372 * C4514 -
             C17442 * C4408) *
                C26754) *
               C26752 * C26669) *
              C575 +
          (((C17371 * C725 - C17441 * C581 + C17372 * C5885 - C17442 * C5774) *
                C141 +
            (C17371 * C927 - C17441 * C795 + C17372 * C6045 - C17442 * C5939) *
                C26754) *
               C26752 * C6255 +
           ((C17441 * C5774 - C17371 * C5885 + C17442 * C12641 -
             C17372 * C12755) *
                C141 +
            (C17441 * C5939 - C17371 * C6045 + C17442 * C12811 -
             C17372 * C12918) *
                C26754) *
               C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
    d2eezx[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C6255 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3446 +
                    (((C8983 * C88 - C26752 * C94) * C17441 +
                      (C8983 * C406 - C26752 * C411) * C17371 +
                      (C18344 - C18345) * C17442 + (C18524 - C18525) * C17372) *
                         C26754 * C6255 +
                     ((C18345 - C18344) * C17441 + (C18525 - C18524) * C17371 +
                      (C18348 - C18349) * C17442 + (C18526 - C18527) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3447 +
                    (((C26752 * C96 - C8983 * C89) * C17441 +
                      (C26752 * C412 - C8983 * C407) * C17371 +
                      (C19289 - C19290) * C17442 + (C19444 - C19445) * C17372) *
                         C26754 * C6255 +
                     ((C19290 - C19289) * C17441 + (C19445 - C19444) * C17371 +
                      (C8983 * C1187 - C26752 * C1198) * C17442 +
                      (C8983 * C1593 - C26752 * C1599) * C17372) *
                         C26754 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26752 * C92 - C8983 * C87) * C17441 +
                      (C26752 * C410 - C8983 * C405) * C17371 +
                      (C18336 - C18337) * C17442 + (C18520 - C18521) * C17372) *
                         C26754 * C6255 +
                     ((C18337 - C18336) * C17441 + (C18521 - C18520) * C17371 +
                      (C18340 - C18341) * C17442 + (C18522 - C18523) * C17372) *
                         C26754 * C26669) *
                        C574 +
                    (((C9503 - C9502) * C17441 + (C9673 - C9672) * C17371 +
                      (C11442 - C11443) * C17442 + (C11650 - C11651) * C17372) *
                         C26754 * C6255 +
                     ((C11443 - C11442) * C17441 + (C11651 - C11650) * C17371 +
                      (C12814 - C12815) * C17442 + (C12974 - C12975) * C17372) *
                         C26754 * C26669) *
                        C575 +
                    (((C9507 - C9506) * C17441 + (C9675 - C9674) * C17371 +
                      (C14351 - C14352) * C17442 + (C14511 - C14512) * C17372) *
                         C26754 * C6255 +
                     ((C14352 - C14351) * C17441 + (C14512 - C14511) * C17371 +
                      (C8983 * C12641 - C26752 * C12642) * C17442 +
                      (C8983 * C12971 - C26752 * C12972) * C17372) *
                         C26754 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezy[44] += (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C6255 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3446 +
                    (((C154 - C153) * C17441 + (C456 - C455) * C17371 +
                      (C1269 - C1270) * C17442 + (C1657 - C1658) * C17372) *
                         C26752 * C6255 +
                     ((C1270 - C1269) * C17441 + (C1658 - C1657) * C17371 +
                      (C1273 - C1274) * C17442 + (C1659 - C1660) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3447 +
                    (((C158 - C157) * C17441 + (C458 - C457) * C17371 +
                      (C2339 - C2340) * C17442 + (C2665 - C2666) * C17372) *
                         C26752 * C6255 +
                     ((C2340 - C2339) * C17441 + (C2666 - C2665) * C17371 +
                      (C141 * C1187 - C26754 * C1261) * C17442 +
                      (C141 * C1593 - C26754 * C1655) * C17372) *
                         C26752 * C26669) *
                        C26589 * C3448)) /
                      (p * q * std::sqrt(p + q)) -
                  (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                   ((((C26754 * C142 - C141 * C87) * C17441 +
                      (C26754 * C449 - C141 * C405) * C17371 +
                      (C18228 - C18229) * C17442 + (C18578 - C18579) * C17372) *
                         C26752 * C6255 +
                     ((C18229 - C18228) * C17441 + (C18579 - C18578) * C17371 +
                      (C18232 - C18233) * C17442 + (C18580 - C18581) * C17372) *
                         C26752 * C26669) *
                        C574 +
                    (((C141 * C580 - C26754 * C653) * C17441 +
                      (C141 * C985 - C26754 * C1047) * C17371 +
                      (C19678 - C19679) * C17442 + (C20087 - C20088) * C17372) *
                         C26752 * C6255 +
                     ((C19679 - C19678) * C17441 + (C20088 - C20087) * C17371 +
                      (C21011 - C21012) * C17442 + (C21323 - C21324) * C17372) *
                         C26752 * C26669) *
                        C575 +
                    (((C26754 * C655 - C141 * C581) * C17441 +
                      (C26754 * C1049 - C141 * C987) * C17371 +
                      (C22519 - C22520) * C17442 + (C22831 - C22832) * C17372) *
                         C26752 * C6255 +
                     ((C22520 - C22519) * C17441 + (C22832 - C22831) * C17371 +
                      (C141 * C12641 - C26754 * C12703) * C17442 +
                      (C141 * C12971 - C26754 * C13025) * C17372) *
                         C26752 * C26669) *
                        C576) *
                   C26570) /
                      (p * q * std::sqrt(p + q));
    d2eezz[44] +=
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C6255 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C26589 * C3446 +
          ((C17441 * C1327 - C17647 * C1182 - C17441 * C1589 + C17371 * C1710 +
            C17442 * C1329 - C17648 * C1185 - C17442 * C1591 + C17372 * C1713) *
               C26754 * C26752 * C26669 -
           (C17442 * C1327 - C17648 * C1182 - C17442 * C1589 + C17372 * C1710 +
            C17441 * C200 - C17647 * C88 - C17441 * C406 + C17371 * C496) *
               C26754 * C26752 * C6255) *
              C26589 * C3447 +
          ((C17441 * C201 - C17647 * C89 - C17441 * C407 + C17371 * C497 +
            C17442 * C1330 - C17648 * C1186 - C17442 * C1592 + C17372 * C1714) *
               C26754 * C26752 * C6255 -
           (C17442 * C1331 - C17648 * C1187 - C17442 * C1593 + C17372 * C1715 +
            C17441 * C1330 - C17647 * C1186 - C17441 * C1592 + C17371 * C1714) *
               C26754 * C26752 * C26669) *
              C26589 * C3448)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C17441 * C199 - C17647 * C87 - C17441 * C405 + C17371 * C495 +
            C17442 * C1326 - C17648 * C1183 - C17442 * C1588 + C17372 * C1711) *
               C26754 * C26752 * C6255 -
           (C17442 * C1328 - C17648 * C1184 - C17442 * C1590 + C17372 * C1712 +
            C17441 * C1326 - C17647 * C1183 - C17441 * C1588 + C17371 * C1711) *
               C26754 * C26752 * C26669) *
              C574 +
          ((C17441 * C2945 - C17647 * C2791 - C17441 * C3240 + C17371 * C3383 +
            C17442 * C4354 - C17648 * C4243 - C17442 * C4566 + C17372 * C4673) *
               C26754 * C26752 * C26669 -
           (C17442 * C2945 - C17648 * C2791 - C17442 * C3240 + C17372 * C3383 +
            C17441 * C723 - C17647 * C580 - C17441 * C985 + C17371 * C1108) *
               C26754 * C26752 * C6255) *
              C575 +
          ((C17441 * C725 - C17647 * C581 - C17441 * C987 + C17371 * C1109 +
            C17442 * C5885 - C17648 * C5774 - C17442 * C6097 + C17372 * C6204) *
               C26754 * C26752 * C6255 -
           (C17442 * C12755 - C17648 * C12641 - C17442 * C12971 +
            C17372 * C13076 + C17441 * C5885 - C17647 * C5774 - C17441 * C6097 +
            C17371 * C6204) *
               C26754 * C26752 * C26669) *
              C576) *
         C26570) /
            (p * q * std::sqrt(p + q));
}
