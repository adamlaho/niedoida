/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AA_xy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_11_12(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29952 = ae * be;
    const double C29951 = ae + be;
    const double C29950 = 0 * be;
    const double C29949 = xA - xB;
    const double C29969 = 0 * be;
    const double C29968 = yA - yB;
    const double C29992 = xP - xQ;
    const double C29991 = yP - yQ;
    const double C29990 = p + q;
    const double C29989 = p * q;
    const double C29999 = std::pow(ae, 2);
    const double C29997 = bs[3];
    const double C30007 = bs[4];
    const double C30016 = bs[5];
    const double C30030 = bs[6];
    const double C30052 = bs[7];
    const double C30205 = zP - zQ;
    const double C30302 = bs[2];
    const double C117 = bs[0];
    const double C30677 = ce + de;
    const double C30676 = ce * de;
    const double C30675 = xC - xD;
    const double C30709 = yC - yD;
    const double C30727 = zC - zD;
    const double C30906 = zA - zB;
    const double C29953 = std::pow(C29951, 2);
    const double C30950 = 2 * C29951;
    const double C29954 = C29952 * C29949;
    const double C30658 = std::pow(C29949, 2);
    const double C30949 = C29949 * ae;
    const double C29970 = C29952 * C29968;
    const double C30893 = std::pow(C29968, 2);
    const double C30981 = C29968 * ae;
    const double C30017 = std::pow(C29992, 2);
    const double C30075 = C29992 * ae;
    const double C30000 = C29991 * ae;
    const double C29998 = C29992 * C29991;
    const double C30172 = std::pow(C29991, 2);
    const double C29993 = 2 * C29989;
    const double C30209 = std::pow(C30205, 2);
    const double C30681 = 2 * C30677;
    const double C30680 = std::pow(C30677, 2);
    const double C30682 = C30675 * de;
    const double C30679 = C30675 * ce;
    const double C30678 = std::pow(C30675, 2);
    const double C30710 = std::pow(C30709, 2);
    const double C30769 = C30709 * de;
    const double C30767 = C30709 * ce;
    const double C30728 = std::pow(C30727, 2);
    const double C30811 = C30727 * de;
    const double C30809 = C30727 * ce;
    const double C30907 = std::pow(C30906, 2);
    const double C30982 = C30906 * ae;
    const double C29955 = 2 * C29953;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (xP - xQ) * (yP - yQ) * std::pow(ae, 2)) /
                        C29953;
    const double C30985 = std::pow(C30950, -2);
    const double C30983 = std::pow(C30950, -1);
    const double C30659 = C30658 * C29952;
    const double C30894 = C30893 * C29952;
    const double C30080 = C29997 * C30075;
    const double C30083 = C30007 * C30075;
    const double C30089 = C30016 * C30075;
    const double C30103 = C30030 * C30075;
    const double C30124 = C30052 * C30075;
    const double C30003 = C29997 * C30000;
    const double C30009 = C30007 * C30000;
    const double C30019 = C30016 * C30000;
    const double C30034 = C30030 * C30000;
    const double C30058 = C30052 * C30000;
    const double C30002 = C29998 * C29999;
    const double C29994 = C29993 / C29990;
    const double C124 = (-(bs[1] * C30000 * C29993) / C29990) / C29951;
    const double C125 = (-(bs[1] * C30075 * C29993) / C29990) / C29951;
    const double C118 = -(C29992 * bs[1] * C29993) / C29990;
    const double C293 = -(C29991 * bs[1] * C29993) / C29990;
    const double C482 = -(C30205 * bs[1] * C29993) / C29990;
    const double C30694 = std::pow(C30681, -1);
    const double C30958 = std::pow(C30681, -2);
    const double C30695 = 2 * C30680;
    const double C30962 = C30680 * C30681;
    const double C30961 = 4 * C30680;
    const double C30951 = std::pow(C30679, 2);
    const double C30683 = C30678 * C30676;
    const double C30711 = C30710 * C30676;
    const double C30963 = std::pow(C30767, 2);
    const double C30729 = C30728 * C30676;
    const double C30965 = std::pow(C30809, 2);
    const double C30908 = C30907 * C29952;
    const double C30660 = C30659 / C29951;
    const double C30895 = C30894 / C29951;
    const double C30008 = C30007 * C30002;
    const double C30018 = C30016 * C30002;
    const double C30032 = C30030 * C30002;
    const double C30056 = C30052 * C30002;
    const double C29996 = -C29994;
    const double C30006 = std::pow(C29994, 4);
    const double C30029 = std::pow(C29994, 6);
    const double C139 = (ae * std::pow(C29994, 2) * bs[2] * C29991 * ae +
                         C29992 * std::pow(-C29994, 3) * bs[3] * C29992 *
                             C29991 * std::pow(ae, 2)) /
                        C29953;
    const double C30301 = std::pow(C29994, 2);
    const double C126 =
        (C29992 * std::pow(C29994, 2) * bs[2] * C30000) / C29951;
    const double C127 =
        (C29992 * std::pow(C29994, 2) * bs[2] * C30075) / C29951 -
        (ae * bs[1] * C29993) / (C29990 * C29951);
    const double C30995 = 4 * C30962;
    const double C30994 = C30677 * C30961;
    const double C30684 = C30683 / C30677;
    const double C30712 = C30711 / C30677;
    const double C30730 = C30729 / C30677;
    const double C30909 = C30908 / C29951;
    const double C30661 = -C30660;
    const double C30896 = -C30895;
    const double C30001 = std::pow(C29996, 3);
    const double C30015 = std::pow(C29996, 5);
    const double C30051 = std::pow(C29996, 7);
    const double C30011 = C30006 * C30009;
    const double C30010 = C30006 * C30008;
    const double C30085 = C30006 * C30083;
    const double C30090 = C30007 * C30006;
    const double C30037 = C30029 * C30034;
    const double C30036 = C30029 * C30032;
    const double C30105 = C30029 * C30103;
    const double C30125 = C30030 * C30029;
    const double C30303 = C30302 * C30301;
    const double C305 = (C29991 * C30301 * C30302 * C30075) / C29951;
    const double C306 = (C29991 * C30301 * C30302 * C30000) / C29951 -
                        (ae * bs[1] * C29993) / (C29990 * C29951);
    const double C494 = (C30205 * C30301 * C30302 * C30075) / C29951;
    const double C495 = (C30205 * C30301 * C30302 * C30000) / C29951;
    const double C30685 = -C30684;
    const double C30713 = -C30712;
    const double C30731 = -C30730;
    const double C30910 = -C30909;
    const double C30662 = std::exp(C30661);
    const double C30897 = std::exp(C30896);
    const double C30004 = C30001 * C30003;
    const double C30076 = C29997 * C30001;
    const double C30081 = C30001 * C30080;
    const double C323 = (ae * std::pow(C29994, 2) * bs[2] * C30075 +
                         C29991 * C30001 * C29997 * C30002) /
                        C29953;
    const double C512 = ((zP - zQ) * C30001 * C29997 * C30002) / C29953;
    const double C30021 = C30015 * C30019;
    const double C30020 = C30015 * C30018;
    const double C30091 = C30015 * C30089;
    const double C30104 = C30016 * C30015;
    const double C30061 = C30051 * C30058;
    const double C30060 = C30051 * C30056;
    const double C30127 = C30051 * C30124;
    const double C30014 = ae * C30011;
    const double C30013 = C29992 * C30011;
    const double C30382 = C29991 * C30011;
    const double C513 =
        (C30001 * C29997 * C30002 + C30010 * std::pow(zP - zQ, 2)) / C29953;
    const double C30086 = C29992 * C30085;
    const double C30170 = ae * C30085;
    const double C30169 = C29991 * C30085;
    const double C30093 = C29992 * C30090;
    const double C30092 = C30090 * ae;
    const double C30309 = C30090 * C30017;
    const double C30384 = C30090 * C30172;
    const double C30455 = C29991 * C30090;
    const double C30638 = C30090 * C30209;
    const double C30641 = C30205 * C30090;
    const double C30039 = C30037 * C30017;
    const double C30050 = ae * C30037;
    const double C30049 = C29992 * C30037;
    const double C30468 = C29991 * C30037;
    const double C30532 = C30037 * C30209;
    const double C30038 = C29992 * C30036;
    const double C30220 = C29991 * C30036;
    const double C30279 = C30036 * C30209;
    const double C30282 = C30205 * C30036;
    const double C30109 = C29992 * C30105;
    const double C30221 = C30105 * C30172;
    const double C30235 = ae * C30105;
    const double C30234 = C29991 * C30105;
    const double C30539 = C30105 * C30209;
    const double C30130 = C30125 * C30017;
    const double C30129 = C29992 * C30125;
    const double C30128 = C30125 * ae;
    const double C30471 = C30125 * C30172;
    const double C119 = C30303 * C30017 - (bs[1] * C29993) / C29990;
    const double C292 = C29991 * C29992 * C30303;
    const double C294 = C30303 * C30172 - (bs[1] * C29993) / C29990;
    const double C481 = C30205 * C29992 * C30303;
    const double C483 = C30303 * C30209 - (bs[1] * C29993) / C29990;
    const double C926 = C30205 * C29991 * C30303;
    const double C30686 = std::exp(C30685);
    const double C30714 = std::exp(C30713);
    const double C30732 = std::exp(C30731);
    const double C30911 = std::exp(C30910);
    const double C29956 = C29954 * C30662;
    const double C30984 = C30662 * C30949;
    const double C102 =
        (C30662 * std::pow(C30949, 2)) / C29953 + C30662 / C30950;
    const double C104 = C30985 * C30662;
    const double C13225 = C30983 * C30662;
    const double C149 = C30897 * C139;
    const double C147 = C30897 * C126;
    const double C9128 = C30897 * C495;
    const double C29971 = C29970 * C30897;
    const double C113 = -(2 * ae * be * (yA - yB) * C30897) / (ae + be);
    const double C31015 = C30897 * C30981;
    const double C4735 =
        (C30897 * std::pow(C30981, 2)) / C29953 + C30897 / C30950;
    const double C4737 = C30985 * C30897;
    const double C13223 = C30983 * C30897;
    const double C140 = (C30001 * C29997 * C30002 + ae * C29992 * C30004 +
                         C29992 * (ae * C30004 + C29992 * std::pow(C29994, 4) *
                                                     bs[4] * C30002)) /
                        C29953;
    const double C141 =
        (2 * (ae * C30004 + C29992 * C30010) +
         ae * (C30004 + C30011 * std::pow(C29992, 2)) +
         C29992 * (C30010 + ae * C29992 * C30011 +
                   C29992 * (ae * C30011 +
                             C29992 * std::pow(C29996, 5) * bs[5] * C30002))) /
        C29953;
    const double C322 = (ae * (C29992 * C30001 * C29997 * C30075 +
                               bs[2] * std::pow(C29994, 2) * ae) +
                         C29991 * (ae * C30004 + C29992 * C30010)) /
                        C29953;
    const double C511 = ((zP - zQ) * (ae * C30004 + C29992 * C30010)) / C29953;
    const double C128 =
        (std::pow(C29994, 2) * bs[2] * C30000 + C30004 * C30017) / C29951;
    const double C131 =
        (2 * C29992 * C30004 + C29992 * (C30004 + C30011 * C30017)) / C29951;
    const double C304 =
        (C29991 * C29992 * C30004 + C29992 * C30303 * ae) / C29951;
    const double C307 =
        (C30301 * C30302 * C30000 + C29991 * (C29991 * C30004 + C30303 * ae) +
         C29991 * C30303 * ae) /
        C29951;
    const double C491 = (C30205 * (C30004 + C30011 * C30017)) / C29951;
    const double C493 = (C30205 * C29992 * C30004) / C29951;
    const double C496 = (C30301 * C30302 * C30000 + C30004 * C30209) / C29951;
    const double C931 = (C30205 * (C29991 * C30004 + C30303 * ae)) / C29951;
    const double C2011 =
        (2 * C30205 * C30004 + C30205 * (C30004 + C30011 * C30209)) / C29951;
    const double C30084 = C30076 * ae;
    const double C30308 = C29992 * C30076;
    const double C30383 = C29991 * C30076;
    const double C302 = (C29991 * (C30004 + C30011 * C30017) +
                         (C30303 + C30076 * C30017) * ae) /
                        C29951;
    const double C120 =
        2 * C29992 * C30303 + C29992 * (C30303 + C30076 * C30017);
    const double C291 = C29991 * (C30303 + C30076 * C30017);
    const double C480 = C30205 * (C30303 + C30076 * C30017);
    const double C1150 =
        2 * C29991 * C30303 + C29991 * (C30303 + C30076 * C30172);
    const double C1287 = C30205 * (C30303 + C30076 * C30172);
    const double C2002 =
        2 * C30205 * C30303 + C30205 * (C30303 + C30076 * C30209);
    const double C2003 =
        3 * (C30303 + C30076 * C30209) +
        C30205 * (2 * C30205 * C30076 + C30205 * (C30076 + C30090 * C30209));
    const double C324 = (C30001 * C29997 * C30002 + ae * C29991 * C30081 +
                         C29991 * (ae * C30081 + C29991 * C30010)) /
                        C29953;
    const double C941 = ((zP - zQ) * (ae * C30081 + C29991 * C30010)) / C29953;
    const double C129 =
        (C30301 * C30302 * C30075 + C29992 * (C29992 * C30081 + C30303 * ae) +
         C29992 * C30303 * ae) /
        C29951;
    const double C303 = (C29991 * (C29992 * C30081 + C30303 * ae)) / C29951;
    const double C308 = (C30301 * C30302 * C30075 + C30081 * C30172) / C29951;
    const double C492 = (C30205 * (C29992 * C30081 + C30303 * ae)) / C29951;
    const double C497 = (C30301 * C30302 * C30075 + C30081 * C30209) / C29951;
    const double C932 = (C30205 * C29991 * C30081) / C29951;
    const double C1158 =
        (2 * C29991 * C30081 + C29991 * (C30081 + C30085 * C30172)) / C29951;
    const double C1301 = (C30205 * (C30081 + C30085 * C30172)) / C29951;
    const double C2010 =
        (2 * C30205 * C30081 + C30205 * (C30081 + C30085 * C30209)) / C29951;
    const double C9130 = C30897 * C512;
    const double C30023 = C30021 * C30017;
    const double C30028 = ae * C30021;
    const double C30027 = C29992 * C30021;
    const double C30454 = C29991 * C30021;
    const double C30528 = C30021 * C30209;
    const double C30531 = C30205 * C30021;
    const double C2012 =
        (3 * (C30004 + C30011 * C30209) +
         C30205 * (2 * C30205 * C30011 + C30205 * (C30011 + C30021 * C30209))) /
        C29951;
    const double C30022 = C29992 * C30020;
    const double C30171 = C29991 * C30020;
    const double C1168 = (2 * (ae * C30081 + C29991 * C30010) +
                          ae * (C30081 + C30085 * std::pow(C29991, 2)) +
                          C29991 * (C30010 + ae * C29991 * C30085 +
                                    C29991 * (ae * C30085 + C29991 * C30020))) /
                         C29953;
    const double C2020 = (2 * C30205 * C30010 +
                          C30205 * (C30010 + C30020 * std::pow(C30205, 2))) /
                         C29953;
    const double C2021 =
        (3 * (C30010 + C30020 * C30209) +
         C30205 * (2 * C30205 * C30020 + C30205 * (C30020 + C30036 * C30209))) /
        C29953;
    const double C30094 = C29992 * C30091;
    const double C30174 = C30091 * C30172;
    const double C30219 = ae * C30091;
    const double C30218 = C29991 * C30091;
    const double C30525 = C30091 * C30209;
    const double C30538 = C30205 * C30091;
    const double C2013 =
        (3 * (C30081 + C30085 * C30209) +
         C30205 * (2 * C30205 * C30085 + C30205 * (C30085 + C30091 * C30209))) /
        C29951;
    const double C30108 = C30104 * C30017;
    const double C30107 = C29992 * C30104;
    const double C30106 = C30104 * ae;
    const double C30456 = C30104 * C30172;
    const double C30469 = C29991 * C30104;
    const double C30642 = C30104 * C30209;
    const double C30063 = C30061 * C30017;
    const double C30062 = C29992 * C30060;
    const double C30236 = C29991 * C30060;
    const double C30283 = C30060 * C30209;
    const double C30131 = C29992 * C30127;
    const double C30238 = C30127 * C30172;
    const double C498 = (C29992 * C30004 + C30013 * C30209) / C29951;
    const double C9134 = C30897 * C513;
    const double C1295 = (C29991 * C30081 + C30169 * C30209) / C29951;
    const double C30095 = C30093 * ae;
    const double C30312 = 2 * C30093;
    const double C30390 = C29991 * C30093;
    const double C30310 = C30076 + C30309;
    const double C30386 = C30076 + C30384;
    const double C30460 = 2 * C30455;
    const double C30458 = C30455 * ae;
    const double C30639 = C30076 + C30638;
    const double C30643 = 2 * C30641;
    const double C30041 = C30021 + C30039;
    const double C30057 = 2 * C30049;
    const double C30055 = ae * C30049;
    const double C30495 = C29991 * C30049;
    const double C30547 = C30049 * C30209;
    const double C30534 = C30021 + C30532;
    const double C30280 = C30020 + C30279;
    const double C30284 = 2 * C30282;
    const double C30225 = C30091 + C30221;
    const double C30242 = 2 * C30234;
    const double C30240 = ae * C30234;
    const double C30556 = C30234 * C30209;
    const double C30541 = C30091 + C30539;
    const double C30133 = C30104 + C30130;
    const double C30132 = C30129 * ae;
    const double C30497 = C30129 * C30172;
    const double C30475 = C30104 + C30471;
    const double C30688 = C30686 * C30679;
    const double C30687 = C30686 / C30681;
    const double C30697 = C30694 * C30686;
    const double C30954 = C30686 * C30682;
    const double C30992 = C30958 * C30686;
    const double C30986 = C30686 * C30951;
    const double C30768 = C30714 / C30681;
    const double C30770 = C30714 * C30767;
    const double C30777 = C30694 * C30714;
    const double C30969 = C30714 * C30769;
    const double C30998 = C30958 * C30714;
    const double C30996 = C30714 * C30963;
    const double C30810 = C30732 / C30681;
    const double C30812 = C30732 * C30809;
    const double C30819 = C30694 * C30732;
    const double C30975 = C30732 * C30811;
    const double C31001 = C30958 * C30732;
    const double C30999 = C30732 * C30965;
    const double C31016 = C30911 * C30982;
    const double C8903 =
        (C30911 * std::pow(C30982, 2)) / C29953 + C30911 / C30950;
    const double C8905 = C30985 * C30911;
    const double C18919 = C30983 * C30911;
    const double C116 = ((0 * ae) / C29951 - C29956 / C29953) / (2 * C29951) +
                        (0 * ae) / C29951;
    const double C4742 = -(2 * C29956) / C29951;
    const double C13228 =
        ((C30662 - (C29949 * 2 * C29956) / C29951) * ae) / C29951 -
        C29950 / C29955;
    const double C13229 = (0 * ae) / C29951 - C29956 / C29953;
    const double C103 = (2 * C30983 * C30984) / C29951;
    const double C13224 = C30984 / C29951;
    const double C115 =
        (((C30662 - (C29949 * 2 * C29956) / C29951) * ae) / C29951 -
         C29950 / C29955) /
            (2 * C29951) +
        ((C29949 * ((0 * ae) / C29951 - C29956 / C29953) + C13225) * ae) /
            C29951;
    const double C4741 = ((0 * ae) / C29951 - C29971 / C29953) / (2 * C29951) +
                         (0 * ae) / C29951;
    const double C13226 =
        ((C30897 - (C29968 * 2 * C29971) / C29951) * ae) / C29951 -
        C29969 / C29955;
    const double C13227 = (0 * ae) / C29951 - C29971 / C29953;
    const double C150 = C113 * C119;
    const double C148 = C113 * C127;
    const double C146 = C113 * C118;
    const double C338 = C113 * C292;
    const double C527 = C113 * C481;
    const double C9131 = C113 * C483;
    const double C9129 = C113 * C494;
    const double C9127 = C113 * C482;
    const double C9512 = C113 * C926;
    const double C4736 = (2 * C30983 * C31015) / C29951;
    const double C13222 = C31015 / C29951;
    const double C4740 =
        (((C30897 - (C29968 * 2 * C29971) / C29951) * ae) / C29951 -
         C29969 / C29955) /
            (2 * C29951) +
        ((C29968 * ((0 * ae) / C29951 - C29971 / C29953) + C13223) * ae) /
            C29951;
    const double C153 = C30897 * C140;
    const double C155 = C30897 * C141;
    const double C337 = C30897 * C322;
    const double C13238 = C13223 * C322;
    const double C526 = C30897 * C511;
    const double C151 = C30897 * C128;
    const double C157 = C30897 * C131;
    const double C339 = C30897 * C304;
    const double C13234 = C13223 * C304;
    const double C524 = C30897 * C491;
    const double C528 = C30897 * C493;
    const double C9132 = C30897 * C496;
    const double C9513 = C30897 * C931;
    const double C24750 = C13223 * C931;
    const double C9138 = C30897 * C2011;
    const double C30087 = C30086 + C30084;
    const double C30385 = C30382 + C30084;
    const double C1159 =
        (2 * (C29991 * C30004 + C30303 * ae) +
         C29991 * (C30004 + C29991 * (C29991 * C30011 + C30084) +
                   C29991 * C30076 * ae) +
         (C30303 + C30076 * C30172) * ae) /
        C29951;
    const double C309 =
        (C29992 * C30004 + C29991 * (C29991 * C30013 + C30308 * ae) +
         C29991 * C30308 * ae) /
        C29951;
    const double C933 = (C30205 * (C29991 * C30013 + C30308 * ae)) / C29951;
    const double C295 = C29992 * C30303 + C30308 * C30172;
    const double C484 = C29992 * C30303 + C30308 * C30209;
    const double C927 = C30205 * C29991 * C30308;
    const double C1149 =
        2 * C29991 * C30308 + C29991 * (C30308 + C30093 * C30172);
    const double C1286 = C30205 * (C30308 + C30093 * C30172);
    const double C2001 =
        2 * C30205 * C30308 + C30205 * (C30308 + C30093 * C30209);
    const double C1284 = C29991 * C30303 + C30383 * C30209;
    const double C2402 =
        2 * C30205 * C30383 + C30205 * (C30383 + C30455 * C30209);
    const double C335 = C30897 * C302;
    const double C13244 = C13223 * C302;
    const double C156 = C113 * C120;
    const double C334 = C113 * C291;
    const double C523 = C113 * C480;
    const double C9823 = C113 * C1287;
    const double C9137 = C113 * C2002;
    const double C10511 = C113 * C2003;
    const double C9515 = C30897 * C941;
    const double C24754 = C13223 * C941;
    const double C152 = C113 * C129;
    const double C336 = C113 * C303;
    const double C525 = C113 * C492;
    const double C9133 = C113 * C497;
    const double C9514 = C113 * C932;
    const double C9825 = C113 * C1301;
    const double C9135 = C113 * C2010;
    const double C30025 = C30011 + C30023;
    const double C30040 = C30028 + C30038;
    const double C30033 = 2 * C30027;
    const double C30031 = ae * C30027;
    const double C30389 = C29991 * C30027;
    const double C2009 =
        (2 * C30205 * C30013 + C30205 * (C30013 + C30027 * C30209)) / C29951;
    const double C2014 =
        (3 * (C30013 + C30027 * C30209) +
         C30205 * (2 * C30205 * C30027 + C30205 * (C30027 + C30049 * C30209))) /
        C29951;
    const double C30457 = C30454 + C30092;
    const double C30529 = C30011 + C30528;
    const double C30533 = 2 * C30531;
    const double C10512 = C30897 * C2012;
    const double C30024 = C30014 + C30022;
    const double C30173 = C30170 + C30171;
    const double C9136 = C30897 * C2020;
    const double C10514 = C30897 * C2021;
    const double C30096 = C30094 + C30092;
    const double C30175 = C30085 + C30174;
    const double C30223 = C30219 + C30220;
    const double C30224 = 2 * C30218;
    const double C30222 = ae * C30218;
    const double C2406 =
        (2 * C30205 * C30169 + C30205 * (C30169 + C30218 * C30209)) / C29951;
    const double C6250 =
        (3 * (C30169 + C30218 * C30209) +
         C30205 * (2 * C30205 * C30218 + C30205 * (C30218 + C30234 * C30209))) /
        C29951;
    const double C30526 = C30085 + C30525;
    const double C30540 = 2 * C30538;
    const double C10513 = C113 * C2013;
    const double C30111 = C30090 + C30108;
    const double C30110 = C30107 * ae;
    const double C30126 = 2 * C30107;
    const double C30391 = C30107 * C30172;
    const double C30496 = C29991 * C30107;
    const double C30649 = C30107 * C30209;
    const double C2004 =
        3 * (C30308 + C30093 * C30209) +
        C30205 * (2 * C30205 * C30093 + C30205 * (C30093 + C30107 * C30209));
    const double C30112 = C30109 + C30106;
    const double C30473 = C30468 + C30106;
    const double C30459 = C30090 + C30456;
    const double C30476 = 2 * C30469;
    const double C30474 = C30469 * ae;
    const double C30652 = C30469 * C30209;
    const double C6244 =
        3 * (C30383 + C30455 * C30209) +
        C30205 * (2 * C30205 * C30455 + C30205 * (C30455 + C30469 * C30209));
    const double C30644 = C30090 + C30642;
    const double C30065 = C30037 + C30063;
    const double C30064 = C30050 + C30062;
    const double C30241 = C30235 + C30236;
    const double C30285 = C30036 + C30283;
    const double C30134 = C30131 + C30128;
    const double C30243 = C30105 + C30238;
    const double C530 = C30897 * C498;
    const double C9518 = C113 * C1295;
    const double C1157 =
        (2 * (C29991 * C30013 + C30308 * ae) +
         C29991 * (C30013 + C29991 * (C29991 * C30027 + C30095) +
                   C29991 * C30093 * ae) +
         (C30308 + C30093 * C30172) * ae) /
        C29951;
    const double C1283 = C29991 * C30308 + C30390 * C30209;
    const double C121 = 3 * (C30303 + C30076 * C30017) +
                        C29992 * (2 * C30308 + C29992 * C30310);
    const double C296 = C30303 + C30076 * C30017 + C30310 * C30172;
    const double C297 = C29991 * (2 * C30308 + C29992 * C30310);
    const double C485 = C30303 + C30076 * C30017 + C30310 * C30209;
    const double C486 = C30205 * (2 * C30308 + C29992 * C30310);
    const double C928 = C30205 * C29991 * C30310;
    const double C1151 = 3 * (C30303 + C30076 * C30172) +
                         C29991 * (2 * C30383 + C29991 * C30386);
    const double C1288 = C30303 + C30076 * C30172 + C30386 * C30209;
    const double C1698 = C30205 * (2 * C30383 + C29991 * C30386);
    const double C10501 =
        4 * (2 * C30205 * C30076 + C30205 * C30639) +
        C30205 * (3 * C30639 + C30205 * (2 * C30205 * C30090 +
                                         C30205 * (C30090 + C30104 * C30209)));
    const double C30043 = C29992 * C30041;
    const double C30053 = 3 * C30041;
    const double C30048 = ae * C30041;
    const double C30396 = C29991 * C30041;
    const double C30059 = C30036 + C30055;
    const double C30548 = C30027 + C30547;
    const double C30535 = C30205 * C30534;
    const double C10507 =
        (4 * (2 * C30205 * C30020 + C30205 * C30280) +
         C30205 *
             (3 * C30280 + C30205 * (2 * C30205 * C30036 +
                                     C30205 * (C30036 + C30060 * C30209)))) /
        C29953;
    const double C30228 = C29991 * C30225;
    const double C30237 = 3 * C30225;
    const double C30233 = ae * C30225;
    const double C30244 = C30036 + C30240;
    const double C30557 = C30218 + C30556;
    const double C30542 = C30205 * C30541;
    const double C30136 = C29992 * C30133;
    const double C30135 = C30133 * ae;
    const double C30398 = C30133 * C30172;
    const double C30500 = C30107 + C30497;
    const double C30478 = C29991 * C30475;
    const double C30689 = C30688 * C30682;
    const double C30696 = C30688 / C30695;
    const double C30955 = C30694 * C30688;
    const double C30953 = C30688 / C30677;
    const double C288 = (C30686 * std::pow(C30682, 2)) / C30680 + C30687;
    const double C30698 = C30697 * C30682;
    const double C30959 = C30679 * C30697;
    const double C30957 = 2 * C30697;
    const double C31002 = C30697 / C30961;
    const double C112 = C30697 / C30995;
    const double C2883 = C30697 / C30681;
    const double C30988 = C30954 / C30677;
    const double C289 = (-2 * C30694 * C30954) / C30677;
    const double C31017 = C30986 / C30680;
    const double C1074 = (C30714 * std::pow(C30769, 2)) / C30680 + C30768;
    const double C30771 = C30770 * C30769;
    const double C30776 = C30770 / C30695;
    const double C30967 = C30770 / C30677;
    const double C30964 = C30694 * C30770;
    const double C30778 = C30777 * C30769;
    const double C30973 = C30767 * C30777;
    const double C30972 = 2 * C30777;
    const double C31008 = C30777 / C30961;
    const double C1146 = C30777 / C30995;
    const double C2880 = C30777 / C30681;
    const double C31004 = C30969 / C30677;
    const double C1075 = (-2 * C30694 * C30969) / C30677;
    const double C31022 = C30996 / C30680;
    const double C1820 = (C30732 * std::pow(C30811, 2)) / C30680 + C30810;
    const double C30813 = C30812 * C30811;
    const double C30818 = C30812 / C30695;
    const double C30968 = C30812 / C30677;
    const double C30966 = C30694 * C30812;
    const double C30820 = C30819 * C30811;
    const double C30979 = C30809 * C30819;
    const double C30978 = 2 * C30819;
    const double C31014 = C30819 / C30961;
    const double C1999 = C30819 / C30995;
    const double C3782 = C30819 / C30681;
    const double C31010 = C30975 / C30677;
    const double C1821 = (-2 * C30694 * C30975) / C30677;
    const double C31024 = C30999 / C30680;
    const double C8904 = (2 * C30983 * C31016) / C29951;
    const double C18918 = C31016 / C29951;
    const double C114 =
        (((0 - (C29949 * C29950) / C29951) * ae) / C29951 - (0 * be) / C29955) /
            (2 * C29951) +
        ((C29949 * (((C30662 - (C29949 * 2 * C29956) / C29951) * ae) / C29951 -
                    C29950 / C29955) +
          C13224) *
         ae) /
            C29951 +
        (0 * ae) / C29951 - C29956 / C29953;
    const double C13247 = C13226 * C120;
    const double C13245 = C13226 * C119;
    const double C13241 = C13226 * C129;
    const double C13235 = C13226 * C127;
    const double C13231 = C13226 * C118;
    const double C13441 = C13226 * C291;
    const double C13431 = C13226 * C292;
    const double C13427 = C13226 * C303;
    const double C13635 = C13226 * C480;
    const double C13625 = C13226 * C481;
    const double C13621 = C13226 * C492;
    const double C24761 = C13226 * C483;
    const double C24757 = C13226 * C497;
    const double C24751 = C13226 * C494;
    const double C24747 = C13226 * C482;
    const double C25229 = C13226 * C932;
    const double C25225 = C13226 * C926;
    const double C25623 = C13226 * C1301;
    const double C25619 = C13226 * C1287;
    const double C25615 = C13226 * C1295;
    const double C26501 = C13226 * C2003;
    const double C26497 = C13226 * C2013;
    const double C26491 = C13226 * C2010;
    const double C26487 = C13226 * C2002;
    const double C13243 = C13227 * C291;
    const double C13237 = C13227 * C303;
    const double C13233 = C13227 * C292;
    const double C24755 = C13227 * C1295;
    const double C24753 = C13227 * C932;
    const double C24749 = C13227 * C926;
    const double C25231 = C13227 * C1301;
    const double C25227 = C13227 * C1287;
    const double C167 = C148 + C149;
    const double C166 = C146 + C147;
    const double C9152 = C9129 + C9130;
    const double C9151 = C9127 + C9128;
    const double C13252 = C13222 * C141;
    const double C13248 = C13222 * C131;
    const double C13246 = C13222 * C128;
    const double C13242 = C13222 * C140;
    const double C13236 = C13222 * C139;
    const double C13232 = C13222 * C126;
    const double C13442 = C13222 * C302;
    const double C13432 = C13222 * C304;
    const double C13428 = C13222 * C322;
    const double C13636 = C13222 * C491;
    const double C13628 = C13222 * C498;
    const double C13626 = C13222 * C493;
    const double C13622 = C13222 * C511;
    const double C24762 = C13222 * C496;
    const double C24758 = C13222 * C513;
    const double C24752 = C13222 * C512;
    const double C24748 = C13222 * C495;
    const double C25230 = C13222 * C941;
    const double C25226 = C13222 * C931;
    const double C26502 = C13222 * C2012;
    const double C26498 = C13222 * C2021;
    const double C26492 = C13222 * C2020;
    const double C26488 = C13222 * C2011;
    const double C4739 =
        (((0 - (C29968 * C29969) / C29951) * ae) / C29951 - (0 * be) / C29955) /
            (2 * C29951) +
        ((C29968 * (((C30897 - (C29968 * 2 * C29971) / C29951) * ae) / C29951 -
                    C29969 / C29955) +
          C13222) *
         ae) /
            C29951 +
        (0 * ae) / C29951 - C29971 / C29953;
    const double C168 = C150 + C151;
    const double C359 = C338 + C339;
    const double C548 = C527 + C528;
    const double C9153 = C9131 + C9132;
    const double C9528 = C9512 + C9513;
    const double C130 =
        (2 * (C29992 * C30081 + C30303 * ae) +
         C29992 * (C30081 + C29992 * C30087 + C29992 * C30076 * ae) +
         (C30303 + C30076 * C30017) * ae) /
        C29951;
    const double C301 =
        (C29991 * (C30081 + C29992 * C30087 + C30308 * ae)) / C29951;
    const double C310 =
        (C29992 * C30081 + C30303 * ae + C30087 * C30172) / C29951;
    const double C490 =
        (C30205 * (C30081 + C29992 * C30087 + C30308 * ae)) / C29951;
    const double C499 =
        (C29992 * C30081 + C30303 * ae + C30087 * C30209) / C29951;
    const double C934 = (C30205 * C29991 * C30087) / C29951;
    const double C1160 =
        (3 * (C30004 + C29991 * C30385 + C30383 * ae) +
         C29991 * (2 * C30385 +
                   C29991 * (C30011 + C29991 * (C29991 * C30021 + C30092) +
                             C29991 * C30090 * ae) +
                   C30386 * ae) +
         (2 * C30383 + C29991 * C30386) * ae) /
        C29951;
    const double C1296 =
        (C29991 * C30004 + C30303 * ae + C30385 * C30209) / C29951;
    const double C1302 =
        (C30205 * (C30004 + C29991 * C30385 + C30383 * ae)) / C29951;
    const double C1303 =
        (C30004 + C29991 * C30385 + C30383 * ae +
         (C30011 + C29991 * (C29991 * C30021 + C30092) + C29991 * C30090 * ae) *
             C30209) /
        C29951;
    const double C1701 =
        (C30205 * (2 * C30385 +
                   C29991 * (C30011 + C29991 * (C29991 * C30021 + C30092) +
                             C29991 * C30090 * ae) +
                   C30386 * ae)) /
        C29951;
    const double C2405 =
        (2 * C30205 * C30385 +
         C30205 * (C30385 + (C29991 * C30021 + C30092) * C30209)) /
        C29951;
    const double C341 = C30897 * C309;
    const double C13434 = C13222 * C309;
    const double C13430 = C13223 * C309;
    const double C948 = C30897 * C933;
    const double C13624 = C13223 * C933;
    const double C14146 = C13222 * C933;
    const double C340 = C113 * C295;
    const double C13433 = C13226 * C295;
    const double C13429 = C13227 * C295;
    const double C529 = C113 * C484;
    const double C13627 = C13226 * C484;
    const double C947 = C113 * C927;
    const double C13623 = C13227 * C927;
    const double C14145 = C13226 * C927;
    const double C1433 = C113 * C1149;
    const double C13435 = C13227 * C1149;
    const double C14679 = C13226 * C1149;
    const double C1595 = C113 * C1286;
    const double C14147 = C13227 * C1286;
    const double C14885 = C13226 * C1286;
    const double C2299 = C113 * C2001;
    const double C15737 = C13226 * C2001;
    const double C9516 = C113 * C1284;
    const double C24759 = C13227 * C1284;
    const double C25611 = C13226 * C1284;
    const double C9818 = C113 * C2402;
    const double C26489 = C13227 * C2402;
    const double C26971 = C13226 * C2402;
    const double C171 = C156 + C157;
    const double C357 = C334 + C335;
    const double C546 = C523 + C524;
    const double C9156 = C9137 + C9138;
    const double C169 = C152 + C153;
    const double C358 = C336 + C337;
    const double C547 = C525 + C526;
    const double C9154 = C9133 + C9134;
    const double C9529 = C9514 + C9515;
    const double C132 = (3 * (C30004 + C30011 * C30017) +
                         C29992 * (2 * C30013 + C29992 * C30025)) /
                        C29951;
    const double C311 =
        (C30004 + C30011 * C30017 + C29991 * (C29991 * C30025 + C30310 * ae) +
         C29991 * C30310 * ae) /
        C29951;
    const double C313 = (C29991 * (2 * C30013 + C29992 * C30025) +
                         (2 * C30308 + C29992 * C30310) * ae) /
                        C29951;
    const double C500 = (C30004 + C30011 * C30017 + C30025 * C30209) / C29951;
    const double C502 = (C30205 * (2 * C30013 + C29992 * C30025)) / C29951;
    const double C935 = (C30205 * (C29991 * C30025 + C30310 * ae)) / C29951;
    const double C2007 =
        (2 * C30205 * C30025 + C30205 * (C30025 + C30041 * C30209)) / C29951;
    const double C30042 = C29992 * C30040;
    const double C30047 = 2 * C30040;
    const double C30179 = C29991 * C30040;
    const double C30035 = C30020 + C30031;
    const double C30392 = C30389 + C30095;
    const double C2300 = C30897 * C2009;
    const double C15738 = C13222 * C2009;
    const double C10793 = C30897 * C2014;
    const double C30461 = C29991 * C30457;
    const double C30467 = 2 * C30457;
    const double C10504 =
        (4 * (2 * C30205 * C30011 + C30205 * C30529) +
         C30205 *
             (3 * C30529 + C30205 * (2 * C30205 * C30021 +
                                     C30205 * (C30021 + C30037 * C30209)))) /
        C29951;
    const double C10519 = C10511 + C10512;
    const double C142 =
        (3 * (C30010 + ae * C30013 + C29992 * C30024) +
         ae * (2 * C30013 + C29992 * C30025) +
         C29992 *
             (2 * C30024 + ae * C30025 +
              C29992 * (C30020 + ae * C29992 * C30021 +
                        C29992 * (ae * C30021 + C29992 * std::pow(C29994, 6) *
                                                    bs[6] * C30002)))) /
        C29953;
    const double C321 =
        (ae * (C30001 * C29997 * C30075 +
               C29992 * (C29992 * C30006 * C30007 * C30075 + C30076 * ae) +
               C29992 * C30076 * ae) +
         C29991 * (C30010 + ae * C30013 + C29992 * C30024)) /
        C29953;
    const double C325 = (ae * C30004 + C29992 * C30010 + ae * C29991 * C30087 +
                         C29991 * (ae * C30087 + C29991 * C30024)) /
                        C29953;
    const double C510 =
        ((zP - zQ) * (C30010 + ae * C30013 + C29992 * C30024)) / C29953;
    const double C514 =
        (ae * C30004 + C29992 * C30010 + C30024 * std::pow(zP - zQ, 2)) /
        C29953;
    const double C942 = ((zP - zQ) * (ae * C30087 + C29991 * C30024)) / C29953;
    const double C2019 = (2 * C30205 * C30024 +
                          C30205 * (C30024 + C30040 * std::pow(C30205, 2))) /
                         C29953;
    const double C1311 =
        (ae * C30081 + C29991 * C30010 + C30173 * std::pow(zP - zQ, 2)) /
        C29953;
    const double C1314 =
        ((zP - zQ) * (C30010 + ae * C30169 + C29991 * C30173)) / C29953;
    const double C1315 = (C30010 + ae * C30169 + C29991 * C30173 +
                          (C30020 + ae * C29991 * C30091 +
                           C29991 * (ae * C30091 + C29991 * C30036)) *
                              std::pow(zP - zQ, 2)) /
                         C29953;
    const double C2411 =
        (2 * C30205 * C30173 +
         C30205 * (C30173 + (ae * C30091 + C29991 * C30036) * C30209)) /
        C29953;
    const double C9155 = C9135 + C9136;
    const double C30097 = C29992 * C30096;
    const double C30102 = 2 * C30096;
    const double C30178 = ae * C30096;
    const double C30177 = C29991 * C30096;
    const double C1167 = (2 * (ae * C30087 + C29991 * C30024) +
                          ae * (C30087 + C30096 * std::pow(C29991, 2)) +
                          C29991 * (C30024 + ae * C29991 * C30096 +
                                    C29991 * (ae * C30096 + C29991 * C30040))) /
                         C29953;
    const double C1156 =
        (2 * C29991 * C30087 + C29991 * (C30087 + C30096 * C30172)) / C29951;
    const double C1299 = (C30205 * (C30087 + C30096 * C30172)) / C29951;
    const double C2008 =
        (2 * C30205 * C30087 + C30205 * (C30087 + C30096 * C30209)) / C29951;
    const double C1169 =
        (3 * (C30010 + ae * C30169 + C29991 * C30173) +
         ae * (2 * C30169 + C29991 * C30175) +
         C29991 * (2 * C30173 + ae * C30175 +
                   C29991 * (C30020 + ae * C29991 * C30091 +
                             C29991 * (ae * C30091 + C29991 * C30036)))) /
        C29953;
    const double C1707 =
        ((zP - zQ) * (2 * C30173 + ae * C30175 +
                      C29991 * (C30020 + ae * C29991 * C30091 +
                                C29991 * (ae * C30091 + C29991 * C30036)))) /
        C29953;
    const double C1161 = (3 * (C30081 + C30085 * C30172) +
                          C29991 * (2 * C30169 + C29991 * C30175)) /
                         C29951;
    const double C1304 = (C30081 + C30085 * C30172 + C30175 * C30209) / C29951;
    const double C1702 = (C30205 * (2 * C30169 + C29991 * C30175)) / C29951;
    const double C6246 =
        (2 * C30205 * C30175 + C30205 * (C30175 + C30225 * C30209)) / C29951;
    const double C30227 = C29991 * C30223;
    const double C30232 = 2 * C30223;
    const double C30226 = C30020 + C30222;
    const double C9820 = C113 * C2406;
    const double C26493 = C13227 * C2406;
    const double C26967 = C13226 * C2406;
    const double C10901 = C113 * C6250;
    const double C26495 = C13227 * C6250;
    const double C10503 =
        (4 * (2 * C30205 * C30085 + C30205 * C30526) +
         C30205 *
             (3 * C30526 + C30205 * (2 * C30205 * C30091 +
                                     C30205 * (C30091 + C30105 * C30209)))) /
        C29951;
    const double C10520 = C10513 + C10514;
    const double C30113 = C30111 * ae;
    const double C30313 = C29992 * C30111;
    const double C30318 = 3 * C30111;
    const double C30397 = C29991 * C30111;
    const double C1148 =
        2 * C29991 * C30310 + C29991 * (C30310 + C30111 * C30172);
    const double C1285 = C30205 * (C30310 + C30111 * C30172);
    const double C2000 =
        2 * C30205 * C30310 + C30205 * (C30310 + C30111 * C30209);
    const double C2005 =
        3 * (C30310 + C30111 * C30209) +
        C30205 * (2 * C30205 * C30111 + C30205 * (C30111 + C30133 * C30209));
    const double C30498 = C30495 + C30110;
    const double C30393 = C30093 + C30391;
    const double C30501 = 2 * C30496;
    const double C30499 = C30496 * ae;
    const double C2403 =
        2 * C30205 * C30390 + C30205 * (C30390 + C30496 * C30209);
    const double C10673 =
        3 * (C30390 + C30496 * C30209) +
        C30205 * (2 * C30205 * C30496 +
                  C30205 * (C30496 + C29991 * C30129 * C30209));
    const double C30650 = C30093 + C30649;
    const double C10792 = C113 * C2004;
    const double C30114 = C29992 * C30112;
    const double C30123 = 2 * C30112;
    const double C30180 = C30112 * C30172;
    const double C30258 = ae * C30112;
    const double C30257 = C29991 * C30112;
    const double C30550 = C30112 * C30209;
    const double C2015 =
        (3 * (C30087 + C30096 * C30209) +
         C30205 * (2 * C30205 * C30096 + C30205 * (C30096 + C30112 * C30209))) /
        C29951;
    const double C30477 = C29991 * C30473;
    const double C30553 = C30473 * C30209;
    const double C6248 =
        (3 * (C30385 + C30457 * C30209) +
         C30205 * (2 * C30205 * C30457 + C30205 * (C30457 + C30473 * C30209))) /
        C29951;
    const double C30462 = C29991 * C30459;
    const double C30472 = 3 * C30459;
    const double C30470 = C30459 * ae;
    const double C6243 =
        2 * C30205 * C30386 + C30205 * (C30386 + C30459 * C30209);
    const double C6245 =
        3 * (C30386 + C30459 * C30209) +
        C30205 * (2 * C30205 * C30459 + C30205 * (C30459 + C30475 * C30209));
    const double C30653 = C30455 + C30652;
    const double C10903 = C113 * C6244;
    const double C26499 = C13227 * C6244;
    const double C30645 = C30205 * C30644;
    const double C30067 = C29992 * C30065;
    const double C2016 =
        (3 * (C30025 + C30041 * C30209) +
         C30205 * (2 * C30205 * C30041 + C30205 * (C30041 + C30065 * C30209))) /
        C29951;
    const double C30066 = C29992 * C30064;
    const double C30259 = C29991 * C30064;
    const double C30290 = C30064 * C30209;
    const double C2022 =
        (3 * (C30024 + C30040 * C30209) +
         C30205 * (2 * C30205 * C30040 + C30205 * (C30040 + C30064 * C30209))) /
        C29953;
    const double C30245 = C29991 * C30241;
    const double C30293 = C30241 * C30209;
    const double C6253 =
        (3 * (C30173 + C30223 * C30209) +
         C30205 * (2 * C30205 * C30223 + C30205 * (C30223 + C30241 * C30209))) /
        C29953;
    const double C30286 = C30205 * C30285;
    const double C30137 = C29992 * C30134;
    const double C30260 = C30134 * C30172;
    const double C30246 = C29991 * C30243;
    const double C6251 =
        (3 * (C30175 + C30225 * C30209) +
         C30205 * (2 * C30205 * C30225 + C30205 * (C30225 + C30243 * C30209))) /
        C29951;
    const double C1434 = C30897 * C1157;
    const double C13436 = C13223 * C1157;
    const double C14680 = C13222 * C1157;
    const double C2181 = C113 * C1283;
    const double C13629 = C13227 * C1283;
    const double C15595 = C13226 * C1283;
    const double C158 = C113 * C121;
    const double C13261 = C13226 * C121;
    const double C344 = C113 * C296;
    const double C13455 = C13226 * C296;
    const double C13443 = C13227 * C296;
    const double C348 = C113 * C297;
    const double C13249 = C13227 * C297;
    const double C13803 = C13226 * C297;
    const double C533 = C113 * C485;
    const double C13649 = C13226 * C485;
    const double C537 = C113 * C486;
    const double C13945 = C13226 * C486;
    const double C951 = C113 * C928;
    const double C13637 = C13227 * C928;
    const double C14159 = C13226 * C928;
    const double C9827 = C113 * C1288;
    const double C25633 = C13226 * C1288;
    const double C25613 = C13227 * C1288;
    const double C10204 = C113 * C1698;
    const double C25621 = C13227 * C1698;
    const double C26101 = C13226 * C1698;
    const double C10517 = C113 * C10501;
    const double C30045 = C30033 + C30043;
    const double C10785 =
        (4 * (2 * C30205 * C30027 + C30205 * C30548) +
         C30205 * (3 * C30548 +
                   C30205 * (2 * C30205 * C30049 +
                             C30205 * (C30049 + C29992 * C30061 * C30209)))) /
        C29951;
    const double C30536 = C30533 + C30535;
    const double C10516 = C30897 * C10507;
    const double C30230 = C30224 + C30228;
    const double C10897 =
        (4 * (2 * C30205 * C30218 + C30205 * C30557) +
         C30205 * (3 * C30557 +
                   C30205 * (2 * C30205 * C30234 +
                             C30205 * (C30234 + C29991 * C30127 * C30209)))) /
        C29951;
    const double C30543 = C30540 + C30542;
    const double C30138 = C30126 + C30136;
    const double C30400 = C30111 + C30398;
    const double C30503 = C29991 * C30500;
    const double C30480 = C30476 + C30478;
    const double C30690 = C30689 / C30680;
    const double C30989 = 2 * C30955;
    const double C30699 = C30698 / C30677;
    const double C30993 = C30959 / C30695;
    const double C31018 = C30953 - C30988;
    const double C2620 = -C30988;
    const double C31032 = C31017 + C30687;
    const double C30772 = C30771 / C30680;
    const double C30997 = 2 * C30964;
    const double C30779 = C30778 / C30677;
    const double C31007 = C30973 / C30695;
    const double C31026 = C30967 - C31004;
    const double C2512 = -C31004;
    const double C31035 = C31022 + C30768;
    const double C30814 = C30813 / C30680;
    const double C31000 = 2 * C30966;
    const double C30821 = C30820 / C30677;
    const double C31013 = C30979 / C30695;
    const double C31029 = C30968 - C31010;
    const double C3274 = -C31010;
    const double C31036 = C31024 + C30810;
    const double C13269 = C13243 + C13244;
    const double C13266 = C13237 + C13238;
    const double C13264 = C13233 + C13234;
    const double C24766 = C24753 + C24754;
    const double C24764 = C24749 + C24750;
    const double C9160 = C9152 * C30662;
    const double C19214 = C9152 * C13224;
    const double C9159 = C9151 * C4742;
    const double C19213 = C9151 * C13228;
    const double C13271 = C13247 + C13248;
    const double C13270 = C13245 + C13246;
    const double C13268 = C13241 + C13242;
    const double C13265 = C13235 + C13236;
    const double C13263 = C13231 + C13232;
    const double C13465 = C13441 + C13442;
    const double C13460 = C13431 + C13432;
    const double C13458 = C13427 + C13428;
    const double C13659 = C13635 + C13636;
    const double C13654 = C13625 + C13626;
    const double C13652 = C13621 + C13622;
    const double C24770 = C24761 + C24762;
    const double C24768 = C24757 + C24758;
    const double C24765 = C24751 + C24752;
    const double C24763 = C24747 + C24748;
    const double C25235 = C25229 + C25230;
    const double C25233 = C25225 + C25226;
    const double C26510 = C26501 + C26502;
    const double C26508 = C26497 + C26498;
    const double C26505 = C26491 + C26492;
    const double C26503 = C26487 + C26488;
    const double C9139 = C548 * C4742;
    const double C19221 = C548 * C13228;
    const double C19215 = C548 * C13229;
    const double C9161 = C9153 * C4742;
    const double C19220 = C9153 * C13228;
    const double C9532 = C9528 * C4742;
    const double C19695 = C9528 * C13228;
    const double C154 = C113 * C130;
    const double C13251 = C13226 * C130;
    const double C332 = C113 * C301;
    const double C13239 = C13227 * C301;
    const double C13445 = C13226 * C301;
    const double C342 = C113 * C310;
    const double C13437 = C13226 * C310;
    const double C13425 = C13227 * C310;
    const double C521 = C113 * C490;
    const double C13639 = C13226 * C490;
    const double C531 = C113 * C499;
    const double C13631 = C13226 * C499;
    const double C949 = C113 * C934;
    const double C13619 = C13227 * C934;
    const double C14149 = C13226 * C934;
    const double C9517 = C30897 * C1296;
    const double C24760 = C13223 * C1296;
    const double C25612 = C13222 * C1296;
    const double C9824 = C30897 * C1302;
    const double C25228 = C13223 * C1302;
    const double C25620 = C13222 * C1302;
    const double C9828 = C30897 * C1303;
    const double C25634 = C13222 * C1303;
    const double C25614 = C13223 * C1303;
    const double C10205 = C30897 * C1701;
    const double C25622 = C13223 * C1701;
    const double C26102 = C13222 * C1701;
    const double C9819 = C30897 * C2405;
    const double C26490 = C13223 * C2405;
    const double C26972 = C13222 * C2405;
    const double C360 = C340 + C341;
    const double C13461 = C13433 + C13434;
    const double C13459 = C13429 + C13430;
    const double C549 = C529 + C530;
    const double C13655 = C13627 + C13628;
    const double C959 = C947 + C948;
    const double C13653 = C13623 + C13624;
    const double C14161 = C14145 + C14146;
    const double C9145 = C546 * C4742;
    const double C19229 = C546 * C13228;
    const double C19223 = C546 * C13229;
    const double C9164 = C9156 * C4742;
    const double C20935 = C9156 * C13228;
    const double C9140 = C547 * C30662;
    const double C19222 = C547 * C13224;
    const double C19216 = C547 * C13225;
    const double C9162 = C9154 * C30662;
    const double C19219 = C9154 * C13224;
    const double C9533 = C9529 * C30662;
    const double C19696 = C9529 * C13224;
    const double C159 = C30897 * C132;
    const double C13262 = C13222 * C132;
    const double C345 = C30897 * C311;
    const double C13456 = C13222 * C311;
    const double C13444 = C13223 * C311;
    const double C349 = C30897 * C313;
    const double C13250 = C13223 * C313;
    const double C13804 = C13222 * C313;
    const double C534 = C30897 * C500;
    const double C13650 = C13222 * C500;
    const double C538 = C30897 * C502;
    const double C13946 = C13222 * C502;
    const double C952 = C30897 * C935;
    const double C13638 = C13223 * C935;
    const double C14160 = C13222 * C935;
    const double C2296 = C30897 * C2007;
    const double C30054 = C30047 + C30048;
    const double C30044 = C30035 + C30042;
    const double C1294 =
        (C29991 * C30013 + C30308 * ae + C30392 * C30209) / C29951;
    const double C1300 =
        (C30205 * (C30013 + C29991 * C30392 + C30390 * ae)) / C29951;
    const double C1305 =
        (C30013 + C29991 * C30392 + C30390 * ae +
         (C30027 + C29991 * (C29991 * C30049 + C30110) + C29991 * C30107 * ae) *
             C30209) /
        C29951;
    const double C2407 =
        (2 * C30205 * C30392 +
         C30205 * (C30392 + (C29991 * C30049 + C30110) * C30209)) /
        C29951;
    const double C2304 = C2299 + C2300;
    const double C15742 = C15737 + C15738;
    const double C30463 = C30011 + C30461;
    const double C10518 = C30897 * C10504;
    const double C10523 = C10519 * C4742;
    const double C20942 = C10519 * C13228;
    const double C161 = C30897 * C142;
    const double C13258 = C13222 * C142;
    const double C333 = C30897 * C321;
    const double C13240 = C13223 * C321;
    const double C13446 = C13222 * C321;
    const double C343 = C30897 * C325;
    const double C13438 = C13222 * C325;
    const double C13426 = C13223 * C325;
    const double C522 = C30897 * C510;
    const double C13640 = C13222 * C510;
    const double C532 = C30897 * C514;
    const double C13632 = C13222 * C514;
    const double C950 = C30897 * C942;
    const double C13620 = C13223 * C942;
    const double C14150 = C13222 * C942;
    const double C2298 = C30897 * C2019;
    const double C15734 = C13222 * C2019;
    const double C9519 = C30897 * C1311;
    const double C24756 = C13223 * C1311;
    const double C25616 = C13222 * C1311;
    const double C9826 = C30897 * C1314;
    const double C25232 = C13223 * C1314;
    const double C25624 = C13222 * C1314;
    const double C9830 = C30897 * C1315;
    const double C25630 = C13222 * C1315;
    const double C25618 = C13223 * C1315;
    const double C9821 = C30897 * C2411;
    const double C26494 = C13223 * C2411;
    const double C26968 = C13222 * C2411;
    const double C9163 = C9155 * C30662;
    const double C20936 = C9155 * C13224;
    const double C30098 = C30085 + C30097;
    const double C30181 = C30178 + C30179;
    const double C1293 = (C29991 * C30087 + C30177 * C30209) / C29951;
    const double C1432 = C30897 * C1167;
    const double C13440 = C13223 * C1167;
    const double C14676 = C13222 * C1167;
    const double C1431 = C113 * C1156;
    const double C13439 = C13227 * C1156;
    const double C14675 = C13226 * C1156;
    const double C1593 = C113 * C1299;
    const double C14151 = C13227 * C1299;
    const double C14881 = C13226 * C1299;
    const double C2297 = C113 * C2008;
    const double C15733 = C13226 * C2008;
    const double C10207 = C30897 * C1707;
    const double C25626 = C13223 * C1707;
    const double C26106 = C13222 * C1707;
    const double C9829 = C113 * C1304;
    const double C25629 = C13226 * C1304;
    const double C25617 = C13227 * C1304;
    const double C10206 = C113 * C1702;
    const double C25625 = C13227 * C1702;
    const double C26105 = C13226 * C1702;
    const double C9831 = C113 * C6246;
    const double C26965 = C13227 * C6246;
    const double C30239 = C30232 + C30233;
    const double C30229 = C30226 + C30227;
    const double C10515 = C113 * C10503;
    const double C10524 = C10520 * C30662;
    const double C20941 = C10520 * C13224;
    const double C30399 = C30396 + C30113;
    const double C1155 =
        (2 * (C29991 * C30025 + C30310 * ae) +
         C29991 * (C30025 + C29991 * (C29991 * C30041 + C30113) +
                   C29991 * C30111 * ae) +
         (C30310 + C30111 * C30172) * ae) /
        C29951;
    const double C30314 = C30312 + C30313;
    const double C1282 = C29991 * C30310 + C30397 * C30209;
    const double C2404 =
        2 * C30205 * C30397 + C30205 * (C30397 + C29991 * C30133 * C30209);
    const double C1429 = C113 * C1148;
    const double C13453 = C13227 * C1148;
    const double C1591 = C113 * C1285;
    const double C14157 = C13227 * C1285;
    const double C2295 = C113 * C2000;
    const double C30502 = C29991 * C30498;
    const double C10674 =
        (3 * (C30392 + C30498 * C30209) +
         C30205 * (2 * C30205 * C30498 +
                   C30205 * (C30498 +
                             (C29991 * C29992 * C30061 + C30132) * C30209))) /
        C29951;
    const double C1162 =
        (3 * (C30013 + C29991 * C30392 + C30390 * ae) +
         C29991 * (2 * C30392 +
                   C29991 * (C30027 + C29991 * (C29991 * C30049 + C30110) +
                             C29991 * C30107 * ae) +
                   C30393 * ae) +
         (2 * C30390 + C29991 * C30393) * ae) /
        C29951;
    const double C1703 =
        (C30205 * (2 * C30392 +
                   C29991 * (C30027 + C29991 * (C29991 * C30049 + C30110) +
                             C29991 * C30107 * ae) +
                   C30393 * ae)) /
        C29951;
    const double C1152 = 3 * (C30308 + C30093 * C30172) +
                         C29991 * (2 * C30390 + C29991 * C30393);
    const double C1289 = C30308 + C30093 * C30172 + C30393 * C30209;
    const double C1699 = C30205 * (2 * C30390 + C29991 * C30393);
    const double C6503 =
        2 * C30205 * C30393 + C30205 * (C30393 + C30500 * C30209);
    const double C10681 = C113 * C2403;
    const double C15735 = C13227 * C2403;
    const double C10784 =
        4 * (2 * C30205 * C30093 + C30205 * C30650) +
        C30205 * (3 * C30650 + C30205 * (2 * C30205 * C30107 +
                                         C30205 * (C30107 + C30129 * C30209)));
    const double C10795 = C10792 + C10793;
    const double C30115 = C30091 + C30114;
    const double C30182 = C30096 + C30180;
    const double C30263 = 2 * C30257;
    const double C30261 = ae * C30257;
    const double C2408 =
        (2 * C30205 * C30177 + C30205 * (C30177 + C30257 * C30209)) / C29951;
    const double C10675 =
        (3 * (C30177 + C30257 * C30209) +
         C30205 * (2 * C30205 * C30257 +
                   C30205 * (C30257 + C29991 * C30134 * C30209))) /
        C29951;
    const double C30551 = C30096 + C30550;
    const double C10790 = C113 * C2015;
    const double C30479 = C30021 + C30477;
    const double C30554 = C30457 + C30553;
    const double C10904 = C30897 * C6248;
    const double C26500 = C13223 * C6248;
    const double C30464 = C30460 + C30462;
    const double C9833 = C113 * C6243;
    const double C26969 = C13227 * C6243;
    const double C10895 =
        4 * (2 * C30205 * C30455 + C30205 * C30653) +
        C30205 * (3 * C30653 +
                  C30205 * (2 * C30205 * C30469 +
                            C30205 * (C30469 + C29991 * C30125 * C30209)));
    const double C30646 = C30643 + C30645;
    const double C30069 = C30057 + C30067;
    const double C30068 = C30059 + C30066;
    const double C30262 = C30258 + C30259;
    const double C30291 = C30040 + C30290;
    const double C10791 = C30897 * C2022;
    const double C30247 = C30244 + C30245;
    const double C30294 = C30223 + C30293;
    const double C10902 = C30897 * C6253;
    const double C26496 = C13223 * C6253;
    const double C30287 = C30284 + C30286;
    const double C30139 = C30105 + C30137;
    const double C30264 = C30112 + C30260;
    const double C30248 = C30242 + C30246;
    const double C1438 = C1433 + C1434;
    const double C13462 = C13435 + C13436;
    const double C14684 = C14679 + C14680;
    const double C135 = (4 * (2 * C30013 + C29992 * C30025) +
                         C29992 * (3 * C30025 + C29992 * C30045)) /
                        C29951;
    const double C505 =
        (2 * C30013 + C29992 * C30025 + C30045 * C30209) / C29951;
    const double C507 = (C30205 * (3 * C30025 + C29992 * C30045)) / C29951;
    const double C10505 =
        (5 * (3 * C30529 + C30205 * C30536) +
         C30205 * (4 * C30536 +
                   C30205 * (3 * C30534 +
                             C30205 * (2 * C30205 * C30037 +
                                       C30205 * (C30037 + C30061 * C30209))))) /
        C29951;
    const double C5479 = (4 * (2 * C30169 + C29991 * C30175) +
                          C29991 * (3 * C30175 + C29991 * C30230)) /
                         C29951;
    const double C5598 =
        (2 * C30169 + C29991 * C30175 + C30230 * C30209) / C29951;
    const double C5600 = (C30205 * (3 * C30175 + C29991 * C30230)) / C29951;
    const double C10506 =
        (5 * (3 * C30526 + C30205 * C30543) +
         C30205 * (4 * C30543 +
                   C30205 * (3 * C30541 +
                             C30205 * (2 * C30205 * C30105 +
                                       C30205 * (C30105 + C30127 * C30209))))) /
        C29951;
    const double C30140 = C30138 * ae;
    const double C30319 = C29992 * C30138;
    const double C1153 = 3 * (C30310 + C30111 * C30172) +
                         C29991 * (2 * C30397 + C29991 * C30400);
    const double C1290 = C30310 + C30111 * C30172 + C30400 * C30209;
    const double C1700 = C30205 * (2 * C30397 + C29991 * C30400);
    const double C30505 = C30501 + C30503;
    const double C30482 = C29991 * C30480;
    const double C30691 = C30687 - C30690;
    const double C31019 = C30989 / C30677;
    const double C30700 = C30696 - C30699;
    const double C31033 = C31018 / C30681;
    const double C30773 = C30768 - C30772;
    const double C31023 = C30997 / C30677;
    const double C30780 = C30776 - C30779;
    const double C31037 = C31026 / C30681;
    const double C30815 = C30810 - C30814;
    const double C31025 = C31000 / C30677;
    const double C30822 = C30818 - C30821;
    const double C31039 = C31029 / C30681;
    const double C170 = C154 + C155;
    const double C13273 = C13251 + C13252;
    const double C9530 = C9516 + C9517;
    const double C24769 = C24759 + C24760;
    const double C25635 = C25611 + C25612;
    const double C9837 = C9823 + C9824;
    const double C25234 = C25227 + C25228;
    const double C25639 = C25619 + C25620;
    const double C9839 = C9827 + C9828;
    const double C25646 = C25633 + C25634;
    const double C25636 = C25613 + C25614;
    const double C10212 = C10204 + C10205;
    const double C25640 = C25621 + C25622;
    const double C26109 = C26101 + C26102;
    const double C9835 = C9818 + C9819;
    const double C26504 = C26489 + C26490;
    const double C26976 = C26971 + C26972;
    const double C9141 = C549 * C4742;
    const double C19225 = C549 * C13228;
    const double C19218 = C549 * C13229;
    const double C9520 = C959 * C4742;
    const double C19699 = C959 * C13228;
    const double C19697 = C959 * C13229;
    const double C9165 = C9161 + C9162;
    const double C172 = C158 + C159;
    const double C13278 = C13261 + C13262;
    const double C362 = C344 + C345;
    const double C13472 = C13455 + C13456;
    const double C13466 = C13443 + C13444;
    const double C364 = C348 + C349;
    const double C13272 = C13249 + C13250;
    const double C13808 = C13803 + C13804;
    const double C551 = C533 + C534;
    const double C13666 = C13649 + C13650;
    const double C553 = C537 + C538;
    const double C13950 = C13945 + C13946;
    const double C961 = C951 + C952;
    const double C13660 = C13637 + C13638;
    const double C14168 = C14159 + C14160;
    const double C143 =
        (4 * (2 * C30024 + ae * C30025 + C29992 * C30044) +
         ae * (3 * C30025 + C29992 * C30045) +
         C29992 * (3 * C30044 + ae * C30045 +
                   C29992 * (2 * C30040 + ae * C30041 +
                             C29992 * (C30036 + ae * C29992 * C30037 +
                                       C29992 * (ae * C30037 +
                                                 C29992 * std::pow(C29996, 7) *
                                                     bs[7] * C30002))))) /
        C29953;
    const double C515 = (C30010 + ae * C30013 + C29992 * C30024 +
                         C30044 * std::pow(zP - zQ, 2)) /
                        C29953;
    const double C516 =
        ((zP - zQ) * (2 * C30024 + ae * C30025 + C29992 * C30044)) / C29953;
    const double C2182 = C30897 * C1294;
    const double C13630 = C13223 * C1294;
    const double C15596 = C13222 * C1294;
    const double C1596 = C30897 * C1300;
    const double C14148 = C13223 * C1300;
    const double C14886 = C13222 * C1300;
    const double C10099 = C30897 * C1305;
    const double C15594 = C13223 * C1305;
    const double C10682 = C30897 * C2407;
    const double C15736 = C13223 * C2407;
    const double C9143 = C2304 * C4742;
    const double C20937 = C2304 * C13229;
    const double C21274 = C2304 * C13228;
    const double C30465 = C30463 + C30458;
    const double C10522 = C10517 + C10518;
    const double C356 = C332 + C333;
    const double C13267 = C13239 + C13240;
    const double C13467 = C13445 + C13446;
    const double C361 = C342 + C343;
    const double C13463 = C13437 + C13438;
    const double C13457 = C13425 + C13426;
    const double C545 = C521 + C522;
    const double C13661 = C13639 + C13640;
    const double C550 = C531 + C532;
    const double C13657 = C13631 + C13632;
    const double C960 = C949 + C950;
    const double C13651 = C13619 + C13620;
    const double C14163 = C14149 + C14150;
    const double C9531 = C9518 + C9519;
    const double C24767 = C24755 + C24756;
    const double C25637 = C25615 + C25616;
    const double C9838 = C9825 + C9826;
    const double C25236 = C25231 + C25232;
    const double C25641 = C25623 + C25624;
    const double C9836 = C9820 + C9821;
    const double C26506 = C26493 + C26494;
    const double C26974 = C26967 + C26968;
    const double C10510 = C9163 + C9164;
    const double C30099 = C30098 + C30095;
    const double C1310 =
        (ae * C30087 + C29991 * C30024 + C30181 * std::pow(zP - zQ, 2)) /
        C29953;
    const double C1313 =
        ((zP - zQ) * (C30024 + ae * C30177 + C29991 * C30181)) / C29953;
    const double C1316 = (C30024 + ae * C30177 + C29991 * C30181 +
                          (C30040 + ae * C29991 * C30112 +
                           C29991 * (ae * C30112 + C29991 * C30064)) *
                              std::pow(zP - zQ, 2)) /
                         C29953;
    const double C2412 =
        (2 * C30205 * C30181 +
         C30205 * (C30181 + (ae * C30112 + C29991 * C30064) * C30209)) /
        C29953;
    const double C2179 = C113 * C1293;
    const double C13633 = C13227 * C1293;
    const double C15591 = C13226 * C1293;
    const double C1437 = C1431 + C1432;
    const double C13464 = C13439 + C13440;
    const double C14682 = C14675 + C14676;
    const double C2303 = C2297 + C2298;
    const double C15740 = C15733 + C15734;
    const double C9840 = C9829 + C9830;
    const double C25644 = C25629 + C25630;
    const double C25638 = C25617 + C25618;
    const double C10213 = C10206 + C10207;
    const double C25642 = C25625 + C25626;
    const double C26111 = C26105 + C26106;
    const double C5483 =
        (4 * (2 * C30173 + ae * C30175 + C29991 * C30229) +
         ae * (3 * C30175 + C29991 * C30230) +
         C29991 *
             (3 * C30229 + ae * C30230 +
              C29991 * (2 * C30223 + ae * C30225 +
                        C29991 * (C30036 + ae * C29991 * C30105 +
                                  C29991 * (ae * C30105 + C29991 * C30060))))) /
        C29953;
    const double C10521 = C10515 + C10516;
    const double C10527 = C10523 + C10524;
    const double C1164 =
        (3 * (C30025 + C29991 * C30399 + C30397 * ae) +
         C29991 * (2 * C30399 +
                   C29991 * (C30041 + C29991 * (C29991 * C30065 + C30135) +
                             C29991 * C30133 * ae) +
                   C30400 * ae) +
         (2 * C30397 + C29991 * C30400) * ae) /
        C29951;
    const double C1292 =
        (C29991 * C30025 + C30310 * ae + C30399 * C30209) / C29951;
    const double C1298 =
        (C30205 * (C30025 + C29991 * C30399 + C30397 * ae)) / C29951;
    const double C1307 =
        (C30025 + C29991 * C30399 + C30397 * ae +
         (C30041 + C29991 * (C29991 * C30065 + C30135) + C29991 * C30133 * ae) *
             C30209) /
        C29951;
    const double C1705 =
        (C30205 * (2 * C30399 +
                   C29991 * (C30041 + C29991 * (C29991 * C30065 + C30135) +
                             C29991 * C30133 * ae) +
                   C30400 * ae)) /
        C29951;
    const double C2409 =
        (2 * C30205 * C30399 +
         C30205 * (C30399 + (C29991 * C30065 + C30135) * C30209)) /
        C29951;
    const double C1430 = C30897 * C1155;
    const double C13454 = C13223 * C1155;
    const double C316 =
        (2 * C30013 + C29992 * C30025 +
         C29991 * (C29991 * C30045 + C30314 * ae) + C29991 * C30314 * ae) /
        C29951;
    const double C318 = (C29991 * (3 * C30025 + C29992 * C30045) +
                         (3 * C30310 + C29992 * C30314) * ae) /
                        C29951;
    const double C938 = (C30205 * (C29991 * C30045 + C30314 * ae)) / C29951;
    const double C122 = 4 * (2 * C30308 + C29992 * C30310) +
                        C29992 * (3 * C30310 + C29992 * C30314);
    const double C298 = 2 * C30308 + C29992 * C30310 + C30314 * C30172;
    const double C299 = C29991 * (3 * C30310 + C29992 * C30314);
    const double C487 = 2 * C30308 + C29992 * C30310 + C30314 * C30209;
    const double C488 = C30205 * (3 * C30310 + C29992 * C30314);
    const double C929 = C30205 * C29991 * C30314;
    const double C1422 =
        2 * C29991 * C30314 + C29991 * (C30314 + C30138 * C30172);
    const double C1584 = C30205 * (C30314 + C30138 * C30172);
    const double C2170 = C29991 * C30314 + C29991 * C30138 * C30209;
    const double C2288 =
        2 * C30205 * C30314 + C30205 * (C30314 + C30138 * C30209);
    const double C2177 = C113 * C1282;
    const double C13647 = C13227 * C1282;
    const double C2302 = C2295 + C2296;
    const double C30504 = C30027 + C30502;
    const double C14678 = C13223 * C1162;
    const double C14884 = C13223 * C1703;
    const double C20226 = C30897 * C1703;
    const double C14677 = C13227 * C1152;
    const double C10098 = C113 * C1289;
    const double C15593 = C13227 * C1289;
    const double C14883 = C13227 * C1699;
    const double C20225 = C113 * C1699;
    const double C10797 = C10795 * C4742;
    const double C20940 = C10795 * C13229;
    const double C30116 = C30115 + C30110;
    const double C1170 =
        (3 * (C30024 + ae * C30177 + C29991 * C30181) +
         ae * (2 * C30177 + C29991 * C30182) +
         C29991 * (2 * C30181 + ae * C30182 +
                   C29991 * (C30040 + ae * C29991 * C30112 +
                             C29991 * (ae * C30112 + C29991 * C30064)))) /
        C29953;
    const double C1708 =
        ((zP - zQ) * (2 * C30181 + ae * C30182 +
                      C29991 * (C30040 + ae * C29991 * C30112 +
                                C29991 * (ae * C30112 + C29991 * C30064)))) /
        C29953;
    const double C1163 = (3 * (C30087 + C30096 * C30172) +
                          C29991 * (2 * C30177 + C29991 * C30182)) /
                         C29951;
    const double C1306 = (C30087 + C30096 * C30172 + C30182 * C30209) / C29951;
    const double C1704 = (C30205 * (2 * C30177 + C29991 * C30182)) / C29951;
    const double C30265 = C30040 + C30261;
    const double C10679 = C113 * C2408;
    const double C15731 = C13227 * C2408;
    const double C10786 =
        (4 * (2 * C30205 * C30096 + C30205 * C30551) +
         C30205 *
             (3 * C30551 + C30205 * (2 * C30205 * C30112 +
                                     C30205 * (C30112 + C30134 * C30209)))) /
        C29951;
    const double C30481 = C30479 + C30474;
    const double C10896 =
        (4 * (2 * C30205 * C30457 + C30205 * C30554) +
         C30205 * (3 * C30554 +
                   C30205 * (2 * C30205 * C30473 +
                             C30205 * (C30473 +
                                       (C29991 * C30061 + C30128) * C30209)))) /
        C29951;
    const double C10906 = C10903 + C10904;
    const double C26509 = C26499 + C26500;
    const double C5477 = 4 * (2 * C30383 + C29991 * C30386) +
                         C29991 * (3 * C30386 + C29991 * C30464);
    const double C5595 = 2 * C30383 + C29991 * C30386 + C30464 * C30209;
    const double C5596 = C30205 * (3 * C30386 + C29991 * C30464);
    const double C6605 =
        2 * C30205 * C30464 + C30205 * (C30464 + C30480 * C30209);
    const double C10502 =
        5 * (3 * C30639 + C30205 * C30646) +
        C30205 * (4 * C30646 +
                  C30205 * (3 * C30644 +
                            C30205 * (2 * C30205 * C30104 +
                                      C30205 * (C30104 + C30125 * C30209))));
    const double C30071 = C29992 * C30069;
    const double C2289 =
        (2 * C30205 * C30045 + C30205 * (C30045 + C30069 * C30209)) / C29951;
    const double C30070 = C29992 * C30068;
    const double C30186 = C29991 * C30068;
    const double C2018 = (2 * C30205 * C30044 +
                          C30205 * (C30044 + C30068 * std::pow(C30205, 2))) /
                         C29953;
    const double C2023 =
        (3 * (C30044 + C30068 * C30209) +
         C30205 * (2 * C30205 * C30068 +
                   C30205 * (C30068 + (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30209))) /
        C29953;
    const double C30266 = C29991 * C30262;
    const double C10676 =
        (3 * (C30181 + C30262 * C30209) +
         C30205 * (2 * C30205 * C30262 +
                   C30205 * (C30262 + (ae * C30134 +
                                       C29991 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30209))) /
        C29953;
    const double C10787 =
        (4 * (2 * C30205 * C30040 + C30205 * C30291) +
         C30205 * (3 * C30291 +
                   C30205 * (2 * C30205 * C30064 +
                             C30205 * (C30064 + (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30209)))) /
        C29953;
    const double C10794 = C10790 + C10791;
    const double C30249 = C29991 * C30247;
    const double C6252 =
        (2 * C30205 * C30229 + C30205 * (C30229 + C30247 * C30209)) / C29953;
    const double C6254 =
        (3 * (C30229 + C30247 * C30209) +
         C30205 * (2 * C30205 * C30247 +
                   C30205 * (C30247 + (C30060 + ae * C29991 * C30127 +
                                       C29991 * (ae * C30127 +
                                                 C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30209))) /
        C29953;
    const double C10898 =
        (4 * (2 * C30205 * C30223 + C30205 * C30294) +
         C30205 * (3 * C30294 +
                   C30205 * (2 * C30205 * C30241 +
                             C30205 * (C30241 + (ae * C30127 +
                                                 C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30209)))) /
        C29953;
    const double C10905 = C10901 + C10902;
    const double C26507 = C26495 + C26496;
    const double C10508 =
        (5 * (3 * C30280 + C30205 * C30287) +
         C30205 * (4 * C30287 +
                   C30205 * (3 * C30285 +
                             C30205 * (2 * C30205 * C30060 +
                                       C30205 * (C30060 + std::pow(C29994, 8) *
                                                              bs[8] * C30002 *
                                                              C30209))))) /
        C29953;
    const double C30141 = C30139 + C30132;
    const double C30267 = C29991 * C30264;
    const double C6505 =
        (2 * C30205 * C30182 + C30205 * (C30182 + C30264 * C30209)) / C29951;
    const double C30250 = C29991 * C30248;
    const double C6607 =
        (2 * C30205 * C30230 + C30205 * (C30230 + C30248 * C30209)) / C29951;
    const double C165 = C30897 * C135;
    const double C544 = C30897 * C505;
    const double C778 = C30897 * C507;
    const double C10210 = C113 * C5598;
    const double C25627 = C13227 * C5598;
    const double C26107 = C13227 * C5600;
    const double C1423 =
        (2 * (C29991 * C30045 + C30314 * ae) +
         C29991 * (C30045 + C29991 * (C29991 * C30069 + C30140) +
                   C29991 * C30138 * ae) +
         (C30314 + C30138 * C30172) * ae) /
        C29951;
    const double C1585 =
        (C30205 * (C30045 + C29991 * (C29991 * C30069 + C30140) +
                   C29991 * C30138 * ae)) /
        C29951;
    const double C2171 =
        (C29991 * C30045 + C30314 * ae + (C29991 * C30069 + C30140) * C30209) /
        C29951;
    const double C30320 = C30318 + C30319;
    const double C5705 = 4 * (2 * C30390 + C29991 * C30393) +
                         C29991 * (3 * C30393 + C29991 * C30505);
    const double C5855 = C30205 * (3 * C30393 + C29991 * C30505);
    const double C6401 = 2 * C30390 + C29991 * C30393 + C30505 * C30209;
    const double C30484 = C30472 + C30482;
    const double C30952 = C30691 * C30679;
    const double C30991 = C30957 + C30691;
    const double C30960 = C30700 / C30681;
    const double C30956 = C30700 * C30679;
    const double C656 = C31033 - (C30691 * C30682) / C30677;
    const double C30970 = C30773 * C30767;
    const double C31006 = C30972 + C30773;
    const double C30974 = C30780 / C30681;
    const double C30971 = C30780 * C30767;
    const double C1416 = C31037 - (C30773 * C30769) / C30677;
    const double C30976 = C30815 * C30809;
    const double C31012 = C30978 + C30815;
    const double C30980 = C30822 / C30681;
    const double C30977 = C30822 * C30809;
    const double C2284 = C31039 - (C30815 * C30811) / C30677;
    const double C9534 = C9530 * C4742;
    const double C20081 = C9530 * C13228;
    const double C9845 = C9837 * C4742;
    const double C20085 = C9837 * C13228;
    const double C9847 = C9839 * C4742;
    const double C20092 = C9839 * C13228;
    const double C10216 = C10212 * C4742;
    const double C20557 = C10212 * C13228;
    const double C9843 = C9835 * C4742;
    const double C21408 = C9835 * C13228;
    const double C9147 = C551 * C4742;
    const double C19236 = C551 * C13228;
    const double C19227 = C551 * C13229;
    const double C9362 = C553 * C4742;
    const double C19231 = C553 * C13229;
    const double C19497 = C553 * C13228;
    const double C9524 = C961 * C4742;
    const double C19703 = C961 * C13228;
    const double C19701 = C961 * C13229;
    const double C163 = C30897 * C143;
    const double C536 = C30897 * C515;
    const double C13646 = C13222 * C515;
    const double C540 = C30897 * C516;
    const double C13942 = C13222 * C516;
    const double C2186 = C2181 + C2182;
    const double C13656 = C13629 + C13630;
    const double C15600 = C15595 + C15596;
    const double C1600 = C1595 + C1596;
    const double C14162 = C14147 + C14148;
    const double C14890 = C14885 + C14886;
    const double C10684 = C10681 + C10682;
    const double C15741 = C15735 + C15736;
    const double C5480 =
        (4 * (2 * C30385 + C29991 * C30465 + C30386 * ae) +
         C29991 *
             (3 * C30465 +
              C29991 * (2 * C30457 +
                        C29991 * (C30021 + C29991 * (C29991 * C30037 + C30106) +
                                  C29991 * C30104 * ae) +
                        C30459 * ae) +
              C30464 * ae) +
         (3 * C30386 + C29991 * C30464) * ae) /
        C29951;
    const double C10526 = C10522 * C4742;
    const double C9146 = C545 * C30662;
    const double C19230 = C545 * C13224;
    const double C19224 = C545 * C13225;
    const double C9142 = C550 * C30662;
    const double C19226 = C550 * C13224;
    const double C19217 = C550 * C13225;
    const double C9521 = C960 * C30662;
    const double C19700 = C960 * C13224;
    const double C19698 = C960 * C13225;
    const double C9535 = C9531 * C30662;
    const double C20082 = C9531 * C13224;
    const double C9846 = C9838 * C30662;
    const double C20086 = C9838 * C13224;
    const double C9844 = C9836 * C30662;
    const double C21407 = C9836 * C13224;
    const double C326 =
        (C30010 + ae * C30013 + C29992 * C30024 + ae * C29991 * C30099 +
         C29991 * (ae * C30099 + C29991 * C30044)) /
        C29953;
    const double C327 =
        (ae * (2 * C30087 + C29992 * C30099 + (C30076 + C30090 * C30017) * ae) +
         C29991 * (2 * C30024 + ae * C30025 + C29992 * C30044)) /
        C29953;
    const double C943 = ((zP - zQ) * (ae * C30099 + C29991 * C30044)) / C29953;
    const double C133 = (3 * (C30081 + C29992 * C30087 + C30308 * ae) +
                         C29992 * (2 * C30087 + C29992 * C30099 + C30310 * ae) +
                         (2 * C30308 + C29992 * C30310) * ae) /
                        C29951;
    const double C312 =
        (C30081 + C29992 * C30087 + C30308 * ae + C30099 * C30172) / C29951;
    const double C314 =
        (C29991 * (2 * C30087 + C29992 * C30099 + C30310 * ae)) / C29951;
    const double C501 =
        (C30081 + C29992 * C30087 + C30308 * ae + C30099 * C30209) / C29951;
    const double C503 =
        (C30205 * (2 * C30087 + C29992 * C30099 + C30310 * ae)) / C29951;
    const double C936 = (C30205 * C29991 * C30099) / C29951;
    const double C2180 = C30897 * C1310;
    const double C13634 = C13223 * C1310;
    const double C15592 = C13222 * C1310;
    const double C1594 = C30897 * C1313;
    const double C14152 = C13223 * C1313;
    const double C14882 = C13222 * C1313;
    const double C10101 = C30897 * C1316;
    const double C15590 = C13223 * C1316;
    const double C10680 = C30897 * C2412;
    const double C15732 = C13223 * C2412;
    const double C9144 = C2303 * C30662;
    const double C20938 = C2303 * C13225;
    const double C21273 = C2303 * C13224;
    const double C9848 = C9840 * C30662;
    const double C20091 = C9840 * C13224;
    const double C10217 = C10213 * C30662;
    const double C20558 = C10213 * C13224;
    const double C10525 = C10521 * C30662;
    const double C2178 = C30897 * C1292;
    const double C13648 = C13223 * C1292;
    const double C1592 = C30897 * C1298;
    const double C14158 = C13223 * C1298;
    const double C1436 = C1429 + C1430;
    const double C13471 = C13453 + C13454;
    const double C355 = C30897 * C316;
    const double C13802 = C13223 * C316;
    const double C668 = C30897 * C318;
    const double C13260 = C13223 * C318;
    const double C958 = C30897 * C938;
    const double C13944 = C13223 * C938;
    const double C164 = C113 * C122;
    const double C354 = C113 * C298;
    const double C13801 = C13227 * C298;
    const double C667 = C113 * C299;
    const double C13259 = C13227 * C299;
    const double C543 = C113 * C487;
    const double C777 = C113 * C488;
    const double C957 = C113 * C929;
    const double C13943 = C13227 * C929;
    const double C9150 = C2302 * C4742;
    const double C21272 = C2302 * C13229;
    const double C30506 = C30504 + C30499;
    const double C14683 = C14677 + C14678;
    const double C10102 = C10098 + C10099;
    const double C15599 = C15593 + C15594;
    const double C14889 = C14883 + C14884;
    const double C20228 = C20225 + C20226;
    const double C30117 = C29992 * C30116;
    const double C30122 = 3 * C30116;
    const double C30185 = ae * C30116;
    const double C30184 = C29991 * C30116;
    const double C1166 = (2 * (ae * C30099 + C29991 * C30044) +
                          ae * (C30099 + C30116 * std::pow(C29991, 2)) +
                          C29991 * (C30044 + ae * C29991 * C30116 +
                                    C29991 * (ae * C30116 + C29991 * C30068))) /
                         C29953;
    const double C1154 =
        (2 * C29991 * C30099 + C29991 * (C30099 + C30116 * C30172)) / C29951;
    const double C1297 = (C30205 * (C30099 + C30116 * C30172)) / C29951;
    const double C2006 =
        (2 * C30205 * C30099 + C30205 * (C30099 + C30116 * C30209)) / C29951;
    const double C14674 = C13223 * C1170;
    const double C14880 = C13223 * C1708;
    const double C20224 = C30897 * C1708;
    const double C14673 = C13227 * C1163;
    const double C10100 = C113 * C1306;
    const double C15589 = C13227 * C1306;
    const double C14879 = C13227 * C1704;
    const double C20223 = C113 * C1704;
    const double C30483 = C29991 * C30481;
    const double C6247 =
        (2 * C30205 * C30465 + C30205 * (C30465 + C30481 * C30209)) / C29951;
    const double C6249 =
        (3 * (C30465 + C30481 * C30209) +
         C30205 *
             (2 * C30205 * C30481 +
              C30205 * (C30481 + (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) *
                                     C30209))) /
        C29951;
    const double C10908 = C10906 * C4742;
    const double C10208 = C113 * C5595;
    const double C25631 = C13227 * C5595;
    const double C26103 = C13227 * C5596;
    const double C30073 = C30053 + C30071;
    const double C30072 = C30054 + C30070;
    const double C2294 = C30897 * C2018;
    const double C30268 = C30265 + C30266;
    const double C10796 = C10794 * C30662;
    const double C20939 = C10794 * C13225;
    const double C30251 = C30239 + C30249;
    const double C9832 = C30897 * C6252;
    const double C26966 = C13223 * C6252;
    const double C10907 = C10905 * C30662;
    const double C30142 = C29992 * C30141;
    const double C30187 = C30141 * C30172;
    const double C2017 =
        (3 * (C30099 + C30116 * C30209) +
         C30205 * (2 * C30205 * C30116 + C30205 * (C30116 + C30141 * C30209))) /
        C29951;
    const double C30269 = C30263 + C30267;
    const double C30252 = C30237 + C30250;
    const double C123 = 5 * (3 * C30310 + C29992 * C30314) +
                        C29992 * (4 * C30314 + C29992 * C30320);
    const double C300 = 3 * C30310 + C29992 * C30314 + C30320 * C30172;
    const double C489 = 3 * C30310 + C29992 * C30314 + C30320 * C30209;
    const double C660 = C29991 * (4 * C30314 + C29992 * C30320);
    const double C770 = C30205 * (4 * C30314 + C29992 * C30320);
    const double C930 = C30205 * C29991 * C30320;
    const double C5478 = 5 * (3 * C30386 + C29991 * C30464) +
                         C29991 * (4 * C30464 + C29991 * C30484);
    const double C5597 = 3 * C30386 + C29991 * C30464 + C30484 * C30209;
    const double C5957 = C30205 * (4 * C30464 + C29991 * C30484);
    const double C30987 = C30952 / C30677;
    const double C31020 = C30991 / C30681;
    const double C31021 = C30993 + C30960;
    const double C658 = C30960 - C30698 / C30695;
    const double C30990 = C30956 / C30677;
    const double C31003 = C30970 / C30677;
    const double C31027 = C31006 / C30681;
    const double C31028 = C31007 + C30974;
    const double C1418 = C30974 - C30778 / C30695;
    const double C31005 = C30971 / C30677;
    const double C31009 = C30976 / C30677;
    const double C31030 = C31012 / C30681;
    const double C31031 = C31013 + C30980;
    const double C2286 = C30980 - C30820 / C30695;
    const double C31011 = C30977 / C30677;
    const double C9522 = C2186 * C4742;
    const double C20083 = C2186 * C13229;
    const double C21140 = C2186 * C13228;
    const double C10096 = C1600 * C4742;
    const double C20087 = C1600 * C13229;
    const double C20423 = C1600 * C13228;
    const double C10686 = C10684 * C4742;
    const double C21406 = C10684 * C13229;
    const double C9157 = C9142 + C9141;
    const double C9822 = C9535 + C9534;
    const double C10900 = C9843 + C9844;
    const double C347 = C30897 * C326;
    const double C13452 = C13222 * C326;
    const double C13448 = C13223 * C326;
    const double C351 = C30897 * C327;
    const double C13254 = C13223 * C327;
    const double C13800 = C13222 * C327;
    const double C954 = C30897 * C943;
    const double C13642 = C13223 * C943;
    const double C14156 = C13222 * C943;
    const double C160 = C113 * C133;
    const double C13257 = C13226 * C133;
    const double C346 = C113 * C312;
    const double C13451 = C13226 * C312;
    const double C13447 = C13227 * C312;
    const double C350 = C113 * C314;
    const double C13253 = C13227 * C314;
    const double C13799 = C13226 * C314;
    const double C535 = C113 * C501;
    const double C13645 = C13226 * C501;
    const double C539 = C113 * C503;
    const double C13941 = C13226 * C503;
    const double C953 = C113 * C936;
    const double C13641 = C13227 * C936;
    const double C14155 = C13226 * C936;
    const double C2185 = C2179 + C2180;
    const double C13658 = C13633 + C13634;
    const double C15598 = C15591 + C15592;
    const double C1599 = C1593 + C1594;
    const double C14164 = C14151 + C14152;
    const double C14888 = C14881 + C14882;
    const double C10683 = C10679 + C10680;
    const double C15739 = C15731 + C15732;
    const double C10789 = C9143 + C9144;
    const double C9851 = C9847 + C9848;
    const double C2184 = C2177 + C2178;
    const double C13665 = C13647 + C13648;
    const double C1598 = C1591 + C1592;
    const double C14167 = C14157 + C14158;
    const double C175 = C164 + C165;
    const double C367 = C354 + C355;
    const double C13807 = C13801 + C13802;
    const double C670 = C667 + C668;
    const double C13277 = C13259 + C13260;
    const double C556 = C543 + C544;
    const double C780 = C777 + C778;
    const double C964 = C957 + C958;
    const double C13949 = C13943 + C13944;
    const double C5706 =
        (4 * (2 * C30392 + C29991 * C30506 + C30393 * ae) +
         C29991 *
             (3 * C30506 +
              C29991 * (2 * C30498 +
                        C29991 * (C30049 +
                                  C29991 * (C29991 * C29992 * C30061 + C30132) +
                                  C29991 * C30129 * ae) +
                        C30500 * ae) +
              C30505 * ae) +
         (3 * C30393 + C29991 * C30505) * ae) /
        C29951;
    const double C5856 =
        (C30205 *
         (3 * C30506 +
          C29991 *
              (2 * C30498 +
               C29991 * (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                         C29991 * C30129 * ae) +
               C30500 * ae) +
          C30505 * ae)) /
        C29951;
    const double C6402 =
        (2 * C30392 + C29991 * C30506 + C30393 * ae +
         (2 * C30498 +
          C29991 * (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                    C29991 * C30129 * ae) +
          C30500 * ae) *
             C30209) /
        C29951;
    const double C6504 =
        (2 * C30205 * C30506 +
         C30205 *
             (C30506 + (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                        C29991 * C30129 * ae) *
                           C30209)) /
        C29951;
    const double C10104 = C10102 * C4742;
    const double C20090 = C10102 * C13229;
    const double C20559 = C20228 * C13229;
    const double C30118 = C30102 + C30117;
    const double C30188 = C30185 + C30186;
    const double C1291 = (C29991 * C30099 + C30184 * C30209) / C29951;
    const double C2410 =
        (2 * C30205 * C30184 + C30205 * (C30184 + C29991 * C30141 * C30209)) /
        C29951;
    const double C1428 = C30897 * C1166;
    const double C13450 = C13223 * C1166;
    const double C1427 = C113 * C1154;
    const double C13449 = C13227 * C1154;
    const double C1589 = C113 * C1297;
    const double C14153 = C13227 * C1297;
    const double C2293 = C113 * C2006;
    const double C14681 = C14673 + C14674;
    const double C10103 = C10100 + C10101;
    const double C15597 = C15589 + C15590;
    const double C14887 = C14879 + C14880;
    const double C20227 = C20223 + C20224;
    const double C30485 = C30467 + C30483;
    const double C9834 = C30897 * C6247;
    const double C26970 = C13223 * C6247;
    const double C136 = (5 * (3 * C30025 + C29992 * C30045) +
                         C29992 * (4 * C30045 + C29992 * C30073)) /
                        C29951;
    const double C319 =
        (3 * C30025 + C29992 * C30045 +
         C29991 * (C29991 * C30073 + C30320 * ae) + C29991 * C30320 * ae) /
        C29951;
    const double C508 =
        (3 * C30025 + C29992 * C30045 + C30073 * C30209) / C29951;
    const double C661 = (C29991 * (4 * C30045 + C29992 * C30073) +
                         (4 * C30314 + C29992 * C30320) * ae) /
                        C29951;
    const double C771 = (C30205 * (4 * C30045 + C29992 * C30073)) / C29951;
    const double C939 = (C30205 * (C29991 * C30073 + C30320 * ae)) / C29951;
    const double C144 =
        (5 * (3 * C30044 + ae * C30045 + C29992 * C30072) +
         ae * (4 * C30045 + C29992 * C30073) +
         C29992 *
             (4 * C30072 + ae * C30073 +
              C29992 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C517 = (2 * C30024 + ae * C30025 + C29992 * C30044 +
                         C30072 * std::pow(zP - zQ, 2)) /
                        C29953;
    const double C518 =
        ((zP - zQ) * (3 * C30044 + ae * C30045 + C29992 * C30072)) / C29953;
    const double C519 =
        (3 * C30044 + ae * C30045 + C29992 * C30072 +
         (3 * C30068 + ae * C30069 +
          C29992 *
              (2 * C30064 + ae * C30065 +
               C29992 * (C30060 + ae * C29992 * C30061 +
                         C29992 * (ae * C30061 + C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             std::pow(zP - zQ, 2)) /
        C29953;
    const double C773 =
        ((zP - zQ) *
         (4 * C30072 + ae * C30073 +
          C29992 * (3 * C30068 + ae * C30069 +
                    C29992 * (2 * C30064 + ae * C30065 +
                              C29992 * (C30060 + ae * C29992 * C30061 +
                                        C29992 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C2291 =
        (2 * C30205 * C30072 +
         C30205 * (C30072 + (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30209)) /
        C29953;
    const double C6404 =
        (2 * C30181 + ae * C30182 + C29991 * C30268 +
         (2 * C30262 + ae * C30264 +
          C29991 *
              (C30064 + ae * C29991 * C30134 +
               C29991 * (ae * C30134 +
                         C29991 * (ae * C30061 + C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             C30209) /
        C29953;
    const double C6506 =
        (2 * C30205 * C30268 +
         C30205 * (C30268 + (C30064 + ae * C29991 * C30134 +
                             C29991 * (ae * C30134 +
                                       C29991 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30209)) /
        C29953;
    const double C5604 =
        (2 * C30173 + ae * C30175 + C29991 * C30229 + C30251 * C30209) / C29953;
    const double C5605 =
        (C30205 * (3 * C30229 + ae * C30230 + C29991 * C30251)) / C29953;
    const double C5606 =
        (3 * C30229 + ae * C30230 + C29991 * C30251 +
         (3 * C30247 + ae * C30248 +
          C29991 *
              (2 * C30241 + ae * C30243 +
               C29991 * (C30060 + ae * C29991 * C30127 +
                         C29991 * (ae * C30127 + C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             C30209) /
        C29953;
    const double C6608 =
        (2 * C30205 * C30251 +
         C30205 * (C30251 + (2 * C30241 + ae * C30243 +
                             C29991 * (C30060 + ae * C29991 * C30127 +
                                       C29991 * (ae * C30127 +
                                                 C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30209)) /
        C29953;
    const double C9841 = C9831 + C9832;
    const double C26973 = C26965 + C26966;
    const double C30143 = C30123 + C30142;
    const double C30189 = C30116 + C30187;
    const double C5708 =
        (4 * (2 * C30181 + ae * C30182 + C29991 * C30268) +
         ae * (3 * C30182 + C29991 * C30269) +
         C29991 *
             (3 * C30268 + ae * C30269 +
              C29991 *
                  (2 * C30262 + ae * C30264 +
                   C29991 * (C30064 + ae * C29991 * C30134 +
                             C29991 * (ae * C30134 +
                                       C29991 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C5858 =
        (C30205 *
         (3 * C30268 + ae * C30269 +
          C29991 * (2 * C30262 + ae * C30264 +
                    C29991 * (C30064 + ae * C29991 * C30134 +
                              C29991 * (ae * C30134 +
                                        C29991 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C5707 = (4 * (2 * C30177 + C29991 * C30182) +
                          C29991 * (3 * C30182 + C29991 * C30269)) /
                         C29951;
    const double C5857 = (C30205 * (3 * C30182 + C29991 * C30269)) / C29951;
    const double C6403 =
        (2 * C30177 + C29991 * C30182 + C30269 * C30209) / C29951;
    const double C5484 =
        (5 * (3 * C30229 + ae * C30230 + C29991 * C30251) +
         ae * (4 * C30230 + C29991 * C30252) +
         C29991 *
             (4 * C30251 + ae * C30252 +
              C29991 *
                  (3 * C30247 + ae * C30248 +
                   C29991 * (2 * C30241 + ae * C30243 +
                             C29991 * (C30060 + ae * C29991 * C30127 +
                                       C29991 * (ae * C30127 +
                                                 C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C5960 =
        (C30205 *
         (4 * C30251 + ae * C30252 +
          C29991 * (3 * C30247 + ae * C30248 +
                    C29991 * (2 * C30241 + ae * C30243 +
                              C29991 * (C30060 + ae * C29991 * C30127 +
                                        C29991 * (ae * C30127 +
                                                  C29991 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C5482 = (5 * (3 * C30175 + C29991 * C30230) +
                          C29991 * (4 * C30230 + C29991 * C30252)) /
                         C29951;
    const double C5603 =
        (3 * C30175 + C29991 * C30230 + C30252 * C30209) / C29951;
    const double C5959 = (C30205 * (4 * C30230 + C29991 * C30252)) / C29951;
    const double C31041 = C30987 + C31033;
    const double C657 = C31020 - (C30700 * C30682) / C30677;
    const double C111 = C31021 / C30681 - C30698 / C30994;
    const double C31034 = C30990 + C31020;
    const double C31042 = C31003 + C31037;
    const double C1417 = C31027 - (C30780 * C30769) / C30677;
    const double C1145 = C31028 / C30681 - C30778 / C30994;
    const double C31038 = C31005 + C31027;
    const double C31043 = C31009 + C31039;
    const double C2285 = C31030 - (C30822 * C30811) / C30677;
    const double C1998 = C31031 / C30681 - C30820 / C30994;
    const double C31040 = C31011 + C31030;
    const double C173 = C160 + C161;
    const double C13276 = C13257 + C13258;
    const double C363 = C346 + C347;
    const double C13470 = C13451 + C13452;
    const double C13468 = C13447 + C13448;
    const double C365 = C350 + C351;
    const double C13274 = C13253 + C13254;
    const double C13806 = C13799 + C13800;
    const double C552 = C535 + C536;
    const double C13664 = C13645 + C13646;
    const double C554 = C539 + C540;
    const double C13948 = C13941 + C13942;
    const double C962 = C953 + C954;
    const double C13662 = C13641 + C13642;
    const double C14166 = C14155 + C14156;
    const double C9523 = C2185 * C30662;
    const double C20084 = C2185 * C13225;
    const double C21139 = C2185 * C13224;
    const double C10097 = C1599 * C30662;
    const double C20088 = C1599 * C13225;
    const double C20424 = C1599 * C13224;
    const double C10685 = C10683 * C30662;
    const double C21405 = C10683 * C13225;
    const double C9526 = C2184 * C4742;
    const double C21138 = C2184 * C13229;
    const double C20425 = C1598 * C13229;
    const double C9364 = C556 * C4742;
    const double C19234 = C556 * C13229;
    const double C19499 = C780 * C13229;
    const double C19705 = C964 * C13229;
    const double C30119 = C30118 + C30113;
    const double C1309 =
        (ae * C30099 + C29991 * C30044 + C30188 * std::pow(zP - zQ, 2)) /
        C29953;
    const double C1312 =
        ((zP - zQ) * (C30044 + ae * C30184 + C29991 * C30188)) / C29953;
    const double C1317 =
        (C30044 + ae * C30184 + C29991 * C30188 +
         (C30068 + ae * C29991 * C30141 +
          C29991 *
              (ae * C30141 +
               C29991 * (C30060 + ae * C29992 * C30061 +
                         C29992 * (ae * C30061 + C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             std::pow(zP - zQ, 2)) /
        C29953;
    const double C2413 =
        (2 * C30205 * C30188 +
         C30205 * (C30188 + (ae * C30141 +
                             C29991 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30209)) /
        C29953;
    const double C2175 = C113 * C1291;
    const double C13643 = C13227 * C1291;
    const double C1435 = C1427 + C1428;
    const double C13469 = C13449 + C13450;
    const double C2301 = C2293 + C2294;
    const double C10105 = C10103 * C30662;
    const double C20089 = C10103 * C13225;
    const double C20560 = C20227 * C13225;
    const double C30486 = C30485 + C30470;
    const double C9842 = C9833 + C9834;
    const double C26975 = C26969 + C26970;
    const double C542 = C30897 * C517;
    const double C776 = C30897 * C518;
    const double C10211 = C30897 * C5604;
    const double C25628 = C13223 * C5604;
    const double C26108 = C13223 * C5605;
    const double C9849 = C9841 * C30662;
    const double C30144 = C30143 + C30135;
    const double C1171 =
        (3 * (C30044 + ae * C30184 + C29991 * C30188) +
         ae * (2 * C30184 + C29991 * C30189) +
         C29991 *
             (2 * C30188 + ae * C30189 +
              C29991 *
                  (C30068 + ae * C29991 * C30141 +
                   C29991 * (ae * C30141 +
                             C29991 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C1709 =
        ((zP - zQ) *
         (2 * C30188 + ae * C30189 +
          C29991 * (C30068 + ae * C29991 * C30141 +
                    C29991 * (ae * C30141 +
                              C29991 * (C30060 + ae * C29992 * C30061 +
                                        C29992 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C1165 = (3 * (C30099 + C30116 * C30172) +
                          C29991 * (2 * C30184 + C29991 * C30189)) /
                         C29951;
    const double C1308 = (C30099 + C30116 * C30172 + C30189 * C30209) / C29951;
    const double C1706 = (C30205 * (2 * C30184 + C29991 * C30189)) / C29951;
    const double C108 =
        (C31032 + 2 * C30691) / C30681 - (C31041 * C30682) / C30677;
    const double C109 =
        (C31019 + 2 * C30700 + C31041) / C30681 - (C31034 * C30682) / C30677;
    const double C110 = (C30992 + C30697 / C30677 + C31034) / C30681 -
                        (C31021 * C30682) / C30677;
    const double C1142 =
        (C31035 + 2 * C30773) / C30681 - (C31042 * C30769) / C30677;
    const double C1143 =
        (C31023 + 2 * C30780 + C31042) / C30681 - (C31038 * C30769) / C30677;
    const double C1144 = (C30998 + C30777 / C30677 + C31038) / C30681 -
                         (C31028 * C30769) / C30677;
    const double C1995 =
        (C31036 + 2 * C30815) / C30681 - (C31043 * C30811) / C30677;
    const double C1996 =
        (C31025 + 2 * C30822 + C31043) / C30681 - (C31040 * C30811) / C30677;
    const double C1997 = (C31001 + C30819 / C30677 + C31040) / C30681 -
                         (C31031 * C30811) / C30677;
    const double C9148 = C552 * C30662;
    const double C19235 = C552 * C13224;
    const double C19228 = C552 * C13225;
    const double C9363 = C554 * C30662;
    const double C19232 = C554 * C13225;
    const double C19498 = C554 * C13224;
    const double C9525 = C962 * C30662;
    const double C19704 = C962 * C13224;
    const double C19702 = C962 * C13225;
    const double C10678 = C9522 + C9523;
    const double C328 =
        (2 * C30024 + ae * C30025 + C29992 * C30044 + ae * C29991 * C30119 +
         C29991 * (ae * C30119 + C29991 * C30072)) /
        C29953;
    const double C329 =
        (ae * (3 * C30099 + C29992 * C30119 +
               (2 * C30093 + C29992 * C30111) * ae) +
         C29991 * (3 * C30044 + ae * C30045 + C29992 * C30072)) /
        C29953;
    const double C944 = ((zP - zQ) * (ae * C30119 + C29991 * C30072)) / C29953;
    const double C134 = (4 * (2 * C30087 + C29992 * C30099 + C30310 * ae) +
                         C29992 * (3 * C30099 + C29992 * C30119 + C30314 * ae) +
                         (3 * C30310 + C29992 * C30314) * ae) /
                        C29951;
    const double C315 =
        (2 * C30087 + C29992 * C30099 + C30310 * ae + C30119 * C30172) / C29951;
    const double C317 =
        (C29991 * (3 * C30099 + C29992 * C30119 + C30314 * ae)) / C29951;
    const double C504 =
        (2 * C30087 + C29992 * C30099 + C30310 * ae + C30119 * C30209) / C29951;
    const double C506 =
        (C30205 * (3 * C30099 + C29992 * C30119 + C30314 * ae)) / C29951;
    const double C937 = (C30205 * C29991 * C30119) / C29951;
    const double C2176 = C30897 * C1309;
    const double C13644 = C13223 * C1309;
    const double C1590 = C30897 * C1312;
    const double C14154 = C13223 * C1312;
    const double C9149 = C2301 * C30662;
    const double C21271 = C2301 * C13225;
    const double C5481 =
        (5 * (3 * C30465 + C29991 * C30486 + C30464 * ae) +
         C29991 *
             (4 * C30486 +
              C29991 *
                  (3 * C30481 +
                   C29991 *
                       (2 * C30473 +
                        C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) +
                        C30475 * ae) +
                   C30480 * ae) +
              C30484 * ae) +
         (4 * C30464 + C29991 * C30484) * ae) /
        C29951;
    const double C5599 =
        (2 * C30385 + C29991 * C30465 + C30386 * ae + C30486 * C30209) / C29951;
    const double C5601 =
        (C30205 * (3 * C30465 + C29991 * C30486 + C30464 * ae)) / C29951;
    const double C5602 =
        (3 * C30465 + C29991 * C30486 + C30464 * ae +
         (3 * C30481 +
          C29991 * (2 * C30473 +
                    C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                              C29991 * C30125 * ae) +
                    C30475 * ae) +
          C30480 * ae) *
             C30209) /
        C29951;
    const double C5958 =
        (C30205 *
         (4 * C30486 +
          C29991 * (3 * C30481 +
                    C29991 * (2 * C30473 +
                              C29991 * (C30037 +
                                        C29991 * (C29991 * C30061 + C30128) +
                                        C29991 * C30125 * ae) +
                              C30475 * ae) +
                    C30480 * ae) +
          C30484 * ae)) /
        C29951;
    const double C6606 =
        (2 * C30205 * C30486 +
         C30205 *
             (C30486 + (2 * C30473 +
                        C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) +
                        C30475 * ae) *
                           C30209)) /
        C29951;
    const double C9850 = C9842 * C4742;
    const double C10215 = C10210 + C10211;
    const double C25643 = C25627 + C25628;
    const double C26112 = C26107 + C26108;
    const double C30145 = C29992 * C30144;
    const double C1425 =
        (2 * (ae * C30119 + C29991 * C30072) + ae * (C30119 + C30144 * C30172) +
         C29991 *
             (C30072 + ae * C29991 * C30144 +
              C29991 *
                  (ae * C30144 +
                   C29991 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C1587 =
        ((zP - zQ) *
         (C30072 + ae * C29991 * C30144 +
          C29991 * (ae * C30144 +
                    C29991 * (2 * C30064 + ae * C30065 +
                              C29992 * (C30060 + ae * C29992 * C30061 +
                                        C29992 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C2173 =
        (ae * C30119 + C29991 * C30072 +
         (ae * C30144 +
          C29991 *
              (2 * C30064 + ae * C30065 +
               C29992 * (C30060 + ae * C29992 * C30061 +
                         C29992 * (ae * C30061 + C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             C30209) /
        C29953;
    const double C1424 =
        (2 * C29991 * C30119 + C29991 * (C30119 + C30144 * C30172)) / C29951;
    const double C1586 = (C30205 * (C30119 + C30144 * C30172)) / C29951;
    const double C2172 = (C29991 * C30119 + C29991 * C30144 * C30209) / C29951;
    const double C2290 =
        (2 * C30205 * C30119 + C30205 * (C30119 + C30144 * C30209)) / C29951;
    const double C9158 = C9147 + C9148;
    const double C353 = C30897 * C328;
    const double C13798 = C13223 * C328;
    const double C666 = C30897 * C329;
    const double C13256 = C13223 * C329;
    const double C956 = C30897 * C944;
    const double C13940 = C13223 * C944;
    const double C162 = C113 * C134;
    const double C352 = C113 * C315;
    const double C13797 = C13227 * C315;
    const double C665 = C113 * C317;
    const double C13255 = C13227 * C317;
    const double C541 = C113 * C504;
    const double C775 = C113 * C506;
    const double C955 = C113 * C937;
    const double C13939 = C13227 * C937;
    const double C2183 = C2175 + C2176;
    const double C13663 = C13643 + C13644;
    const double C1597 = C1589 + C1590;
    const double C14165 = C14153 + C14154;
    const double C10209 = C30897 * C5599;
    const double C25632 = C13223 * C5599;
    const double C26104 = C13223 * C5601;
    const double C10219 = C10215 * C30662;
    const double C30146 = C30122 + C30145;
    const double C174 = C162 + C163;
    const double C366 = C352 + C353;
    const double C13805 = C13797 + C13798;
    const double C669 = C665 + C666;
    const double C13275 = C13255 + C13256;
    const double C555 = C541 + C542;
    const double C779 = C775 + C776;
    const double C963 = C955 + C956;
    const double C13947 = C13939 + C13940;
    const double C9527 = C2183 * C30662;
    const double C21137 = C2183 * C13225;
    const double C20426 = C1597 * C13225;
    const double C10214 = C10208 + C10209;
    const double C25645 = C25631 + C25632;
    const double C26110 = C26103 + C26104;
    const double C30147 = C30146 + C30140;
    const double C9365 = C555 * C30662;
    const double C19233 = C555 * C13225;
    const double C19500 = C779 * C13225;
    const double C19706 = C963 * C13225;
    const double C10218 = C10214 * C4742;
    const double C330 =
        (3 * C30044 + ae * C30045 + C29992 * C30072 + ae * C29991 * C30147 +
         C29991 *
             (ae * C30147 +
              C29991 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C663 =
        (ae * (4 * C30119 + C29992 * C30147 +
               (3 * C30111 + C29992 * C30138) * ae) +
         C29991 *
             (4 * C30072 + ae * C30073 +
              C29992 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29953;
    const double C945 =
        ((zP - zQ) *
         (ae * C30147 +
          C29991 * (3 * C30068 + ae * C30069 +
                    C29992 * (2 * C30064 + ae * C30065 +
                              C29992 * (C30060 + ae * C29992 * C30061 +
                                        C29992 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29953;
    const double C137 = (5 * (3 * C30099 + C29992 * C30119 + C30314 * ae) +
                         C29992 * (4 * C30119 + C29992 * C30147 + C30320 * ae) +
                         (4 * C30314 + C29992 * C30320) * ae) /
                        C29951;
    const double C320 =
        (3 * C30099 + C29992 * C30119 + C30314 * ae + C30147 * C30172) / C29951;
    const double C509 =
        (3 * C30099 + C29992 * C30119 + C30314 * ae + C30147 * C30209) / C29951;
    const double C662 =
        (C29991 * (4 * C30119 + C29992 * C30147 + C30320 * ae)) / C29951;
    const double C772 =
        (C30205 * (4 * C30119 + C29992 * C30147 + C30320 * ae)) / C29951;
    const double C940 = (C30205 * C29991 * C30147) / C29951;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C30773 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C30780 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C2880) *
              C30691 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C30780 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C30773 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C2880) *
              C30700 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C30773 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C30780 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C30773 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C30780 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C30968 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C2880) *
              C2620 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C30773 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30780 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C30968) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C31042 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C31038 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C31028 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30732 * C31008) *
              C2620 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C31038 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C31042 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C31028 +
           ((C14684 + C14683) * C13228 + (C14682 + C14681) * C13224 +
            (C13226 * C1148 + C13222 * C1155 + C13227 * C1153 +
             C13223 * C1164) *
                C13229 +
            (C13226 * C1154 + C13222 * C1166 + C13227 * C1165 +
             C13223 * C1171) *
                C13225) *
               C30911 * C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C2512 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C30777) *
              C31041 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C30777 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C2512) *
              C31034 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C2512 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C30777) *
              C31021 +
          (((C13808 + C13807) * C13228 + (C13806 + C13805) * C13224 +
            (C13226 * C299 + C13222 * C318 + C13227 * C300 + C13223 * C319) *
                C13229 +
            (C13226 * C317 + C13222 * C329 + C13227 * C320 + C13223 * C330) *
                C13225) *
               C30911 * C30732 * C30777 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C31036 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C31025 +
            ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                 C13228 +
             (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                 C13224 +
             (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
                C30911 * C31001) *
               C2512 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C31025 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C31036 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
              C13222 * C1311) *
                 C13224 +
             (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
              C13222 * C1296) *
                 C13228) *
                C30911 * C31001) *
               C30777) *
              C2620 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C31025 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C31036 -
            ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
             (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
                C30911 * C31001) *
               C2512 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C31036 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C31025 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
              C13223 * C1307) *
                 C13229 +
             (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
              C13223 * C1317) *
                 C13225) *
                C30911 * C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C2512 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C30777) *
              C30691 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C2512 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C30700 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C30968 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C2512 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C30968) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C2512 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C30777) *
              C31041 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C30777 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C2512) *
              C31034 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C2512 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C30777) *
              C31021 +
          (((C13808 + C13807) * C13228 + (C13806 + C13805) * C13224 +
            (C13226 * C299 + C13222 * C318 + C13227 * C300 + C13223 * C319) *
                C13229 +
            (C13226 * C317 + C13222 * C329 + C13227 * C320 + C13223 * C330) *
                C13225) *
               C30911 * C30732 * C30777 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C31042 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C31038 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C31028 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30732 * C31008) *
              C2620 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C31038 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C31042 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C31028 +
           ((C14684 + C14683) * C13228 + (C14682 + C14681) * C13224 +
            (C13226 * C1148 + C13222 * C1155 + C13227 * C1153 +
             C13223 * C1164) *
                C13229 +
            (C13226 * C1154 + C13222 * C1166 + C13227 * C1165 +
             C13223 * C1171) *
                C13225) *
               C30911 * C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C30773 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C30780 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C3274 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C2880) *
              C30953 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C30773 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30780 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C3274) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30815 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30822 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C3782) *
              C30773 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C30822 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30815 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C3782) *
              C30780 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30815 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C30822 +
           ((C13226 * C1288 + C13222 * C1303 + C13227 * C5595 +
             C13223 * C5599) *
                C13228 +
            (C13226 * C1304 + C13222 * C1315 + C13227 * C5598 +
             C13223 * C5604) *
                C13224 +
            (C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
             C13223 * C6402) *
                C13229 +
            (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
             C13223 * C6404) *
                C13225) *
               C30911 * C3782) *
              C2880) *
         C30686) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C3274 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C31042 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C30819 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C3274) *
              C31038 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C3274 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C30819) *
              C31028 +
          (((C13226 * C1698 + C13222 * C1701 + C13227 * C5596 +
             C13223 * C5601) *
                C13228 +
            (C13226 * C1702 + C13222 * C1707 + C13227 * C5600 +
             C13223 * C5605) *
                C13224 +
            (C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
             C13223 * C5856) *
                C13229 +
            (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
             C13223 * C5858) *
                C13225) *
               C30911 * C30819 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C2512 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C30777) *
              C31032 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C2512 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C31019 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C3274 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C2512 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31043 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31040 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31031 -
           ((C15739 + C15740) * C13225 + (C15741 + C15742) * C13229 +
            (C13227 * C2406 + C13223 * C2411 + C13226 * C2010 +
             C13222 * C2020) *
                C13224 +
            (C13227 * C2402 + C13223 * C2405 + C13226 * C2002 +
             C13222 * C2011) *
                C13228) *
               C30911 * C31014) *
              C2512 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C31040 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C31043 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C31031 +
           ((C13226 * C2402 + C13222 * C2405 + C13227 * C6243 +
             C13223 * C6247) *
                C13228 +
            (C13226 * C2406 + C13222 * C2411 + C13227 * C6246 +
             C13223 * C6252) *
                C13224 +
            (C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
             C13223 * C6504) *
                C13229 +
            (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
             C13223 * C6506) *
                C13225) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30815 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30822 +
            ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                 C13228 +
             (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                 C13224 +
             (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
                C30911 * C3782) *
               C2512 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30822 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30815 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
              C13222 * C1311) *
                 C13224 +
             (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
              C13222 * C1296) *
                 C13228) *
                C30911 * C3782) *
               C30777) *
              C30953 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30822 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30815 -
            ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
             (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
                C30911 * C3782) *
               C2512 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30815 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30822 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
              C13223 * C1307) *
                 C13229 +
             (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
              C13223 * C1317) *
                 C13225) *
                C30911 * C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C2512 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C30777) *
              C31032 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C2512 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C31019 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C3274 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C2512 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C3274 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C31042 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C30819 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C3274) *
              C31038 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C3274 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C30819) *
              C31028 +
          (((C13226 * C1698 + C13222 * C1701 + C13227 * C5596 +
             C13223 * C5601) *
                C13228 +
            (C13226 * C1702 + C13222 * C1707 + C13227 * C5600 +
             C13223 * C5605) *
                C13224 +
            (C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
             C13223 * C5856) *
                C13229 +
            (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
             C13223 * C5858) *
                C13225) *
               C30911 * C30819 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1416 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1417 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C1418 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30732 * C31008) *
              C30953 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1417 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1416 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C1418 +
           ((C14684 + C14683) * C13228 + (C14682 + C14681) * C13224 +
            (C13226 * C1148 + C13222 * C1155 + C13227 * C1153 +
             C13223 * C1164) *
                C13229 +
            (C13226 * C1154 + C13222 * C1166 + C13227 * C1165 +
             C13223 * C1171) *
                C13225) *
               C30911 * C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C30967 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C30777) *
              C656 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C30777 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C30967) *
              C657 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C30967 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C30777) *
              C658 +
          (((C13808 + C13807) * C13228 + (C13806 + C13805) * C13224 +
            (C13226 * C299 + C13222 * C318 + C13227 * C300 + C13223 * C319) *
                C13229 +
            (C13226 * C317 + C13222 * C329 + C13227 * C320 + C13223 * C330) *
                C13225) *
               C30911 * C30732 * C30777 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C1820 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C1821 +
            ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                 C13228 +
             (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                 C13224 +
             (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
                C30911 * C31001) *
               C30967 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C1821 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C1820 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
              C13222 * C1311) *
                 C13224 +
             (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
              C13222 * C1296) *
                 C13228) *
                C30911 * C31001) *
               C30777) *
              C30953 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C1821 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C1820 -
            ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
             (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
                C30911 * C31001) *
               C30967 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C1820 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C1821 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
              C13223 * C1307) *
                 C13229 +
             (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
              C13223 * C1317) *
                 C13225) *
                C30911 * C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30968 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C1416 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C30819 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30968) *
              C1417 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30968 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C30819) *
              C1418 +
          (((C13226 * C1698 + C13222 * C1701 + C13227 * C5596 +
             C13223 * C5601) *
                C13228 +
            (C13226 * C1702 + C13222 * C1707 + C13227 * C5600 +
             C13223 * C5605) *
                C13224 +
            (C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
             C13223 * C5856) *
                C13229 +
            (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
             C13223 * C5858) *
                C13225) *
               C30911 * C30819 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C30967 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C30777) *
              C288 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C30967 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C289 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C30968 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C30967 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C2284 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C2285 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C2286 -
           ((C15739 + C15740) * C13225 + (C15741 + C15742) * C13229 +
            (C13227 * C2406 + C13223 * C2411 + C13226 * C2010 +
             C13222 * C2020) *
                C13224 +
            (C13227 * C2402 + C13223 * C2405 + C13226 * C2002 +
             C13222 * C2011) *
                C13228) *
               C30911 * C31014) *
              C30967 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C2285 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C2284 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C2286 +
           ((C13226 * C2402 + C13222 * C2405 + C13227 * C6243 +
             C13223 * C6247) *
                C13228 +
            (C13226 * C2406 + C13222 * C2411 + C13227 * C6246 +
             C13223 * C6252) *
                C13224 +
            (C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
             C13223 * C6504) *
                C13229 +
            (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
             C13223 * C6506) *
                C13225) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                   C13228 +
               (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                   C13224 +
               (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                  C30911 * C30732 * C30714 * C108 -
              ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
               (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                  C30911 * C30732 * C30714 * C109 +
              ((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
               (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                  C30911 * C30732 * C30714 * C110 -
              ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
               (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
                  C30911 * C30732 * C30714 * C111 +
              ((C13278 + C13277) * C13228 + (C13276 + C13275) * C13224 +
               (C13226 * C122 + C13222 * C135 + C13227 * C660 + C13223 * C661) *
                   C13229 +
               (C13226 * C134 + C13222 * C143 + C13227 * C662 + C13223 * C663) *
                   C13225) *
                  C30911 * C30732 * C30714 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13226 * C117 + C13222 * C124 + C13227 * C293 +
                 C13223 * C306) *
                    C13228 +
                (C13226 * C125 + C13222 * C138 + C13227 * C305 +
                 C13223 * C323) *
                    C13224 +
                (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                   C30911 * C30732 * C31035 -
               ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
                (C13227 * C308 + C13223 * C324 + C13226 * C305 +
                 C13222 * C323) *
                    C13224 +
                (C13227 * C294 + C13223 * C307 + C13226 * C293 +
                 C13222 * C306) *
                    C13228) *
                   C30911 * C30732 * C31023 +
               ((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
                 C13223 * C1159) *
                    C13228 +
                (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
                 C13223 * C1168) *
                    C13224 +
                (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                   C30911 * C30732 * C30998) *
                  C288 +
              (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
                (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                   C30911 * C30732 * C31023 -
               ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
                (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                   C30911 * C30732 * C31035 -
               ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
                (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                   C30911 * C30732 * C30998) *
                  C289 +
              (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
                (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                   C30911 * C30732 * C31035 -
               ((C13227 * C315 + C13223 * C328 + C13226 * C314 +
                 C13222 * C327) *
                    C13225 +
                (C13227 * C298 + C13223 * C316 + C13226 * C297 +
                 C13222 * C313) *
                    C13229 +
                (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                   C30911 * C30732 * C31023 +
               ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
                (C13226 * C298 + C13222 * C316 + C13227 * C1422 +
                 C13223 * C1423) *
                    C13229 +
                (C13226 * C315 + C13222 * C328 + C13227 * C1424 +
                 C13223 * C1425) *
                    C13225) *
                   C30911 * C30732 * C30998) *
                  C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31036 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C30714 * C288 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C31025 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C31036 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C31001) *
              C30714 * C289 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C31036 -
           ((C13227 * C937 + C13223 * C944 + C13226 * C503 + C13222 * C516) *
                C13225 +
            (C13227 * C929 + C13223 * C938 + C13226 * C486 + C13222 * C502) *
                C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C31025 +
           ((C13666 + C13665) * C13228 + (C13664 + C13663) * C13224 +
            (C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                C13229 +
            (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                C13225) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1075 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C31032 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1075 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1074 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C1075 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C1142 -
          ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
           (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
               C13224 +
           (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
               C13228) *
              C30911 * C30732 * C1143 +
          ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
               C13228 +
           (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
               C13224 +
           (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
              C30911 * C30732 * C1144 -
          ((C13227 * C1163 + C13223 * C1170 + C13226 * C1156 + C13222 * C1167) *
               C13225 +
           (C13227 * C1152 + C13223 * C1162 + C13226 * C1149 + C13222 * C1157) *
               C13229 +
           (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 + C13222 * C1168) *
               C13224 +
           (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 + C13222 * C1159) *
               C13228) *
              C30911 * C30732 * C1145 +
          ((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 + C13223 * C5480) *
               C13228 +
           (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 + C13223 * C5483) *
               C13224 +
           (C13226 * C1152 + C13222 * C1162 + C13227 * C5705 + C13223 * C5706) *
               C13229 +
           (C13226 * C1163 + C13222 * C1170 + C13227 * C5707 + C13223 * C5708) *
               C13225) *
              C30911 * C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31036 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C1074 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C31025 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C31036 -
           ((C13227 * C1306 + C13223 * C1316 + C13226 * C1293 +
             C13222 * C1310) *
                C13225 +
            (C13227 * C1289 + C13223 * C1305 + C13226 * C1283 +
             C13222 * C1294) *
                C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C31001) *
              C1075 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C31036 -
           ((C13227 * C1704 + C13223 * C1708 + C13226 * C1299 +
             C13222 * C1313) *
                C13225 +
            (C13227 * C1699 + C13223 * C1703 + C13226 * C1286 +
             C13222 * C1300) *
                C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C1288 + C13222 * C1303 + C13227 * C5595 +
             C13223 * C5599) *
                C13228 +
            (C13226 * C1304 + C13222 * C1315 + C13227 * C5598 +
             C13223 * C5604) *
                C13224 +
            (C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
             C13223 * C6402) *
                C13229 +
            (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
             C13223 * C6404) *
                C13225) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C1820 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C30714 * C31032 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C1821 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C1820 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C31001) *
              C30714 * C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C1820 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C1821 +
           ((C13666 + C13665) * C13228 + (C13664 + C13663) * C13224 +
            (C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                C13229 +
            (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                C13225) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C1820 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C31035 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C1821 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C1820 -
           ((C13227 * C1306 + C13223 * C1316 + C13226 * C1293 +
             C13222 * C1310) *
                C13225 +
            (C13227 * C1289 + C13223 * C1305 + C13226 * C1283 +
             C13222 * C1294) *
                C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C31001) *
              C31023 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C1820 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C1288 + C13222 * C1303 + C13227 * C5595 +
             C13223 * C5599) *
                C13228 +
            (C13226 * C1304 + C13222 * C1315 + C13227 * C5598 +
             C13223 * C5604) *
                C13224 +
            (C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
             C13223 * C6402) *
                C13229 +
            (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
             C13223 * C6404) *
                C13225) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C1995 -
          ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
           (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
               C13224 +
           (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
               C13228) *
              C30911 * C1996 +
          ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
               C13228 +
           (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
               C13224 +
           (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
              C30911 * C1997 -
          ((C13227 * C2408 + C13223 * C2412 + C13226 * C2008 + C13222 * C2019) *
               C13225 +
           (C13227 * C2403 + C13223 * C2407 + C13226 * C2001 + C13222 * C2009) *
               C13229 +
           (C13227 * C2406 + C13223 * C2411 + C13226 * C2010 + C13222 * C2020) *
               C13224 +
           (C13227 * C2402 + C13223 * C2405 + C13226 * C2002 + C13222 * C2011) *
               C13228) *
              C30911 * C1998 +
          ((C13226 * C2003 + C13222 * C2012 + C13227 * C6244 + C13223 * C6248) *
               C13228 +
           (C13226 * C2013 + C13222 * C2021 + C13227 * C6250 + C13223 * C6253) *
               C13224 +
           (C13226 * C2004 + C13222 * C2014 + C13227 * C10673 +
            C13223 * C10674) *
               C13229 +
           (C13226 * C2015 + C13222 * C2022 + C13227 * C10675 +
            C13223 * C10676) *
               C13225) *
              C30911 * C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C1074 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C30968 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C30998) *
              C30953 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C1074 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C1075 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30968 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C30714 * C656 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C30819 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30968) *
              C30714 * C657 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30968 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C30819) *
              C30714 * C658 +
          (((C13950 + C13949) * C13228 + (C13948 + C13947) * C13224 +
            (C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C13229 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C13225) *
               C30911 * C30819 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C2284 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C2285 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C2286 -
           ((C15739 + C15740) * C13225 + (C15741 + C15742) * C13229 +
            (C13227 * C2406 + C13223 * C2411 + C13226 * C2010 +
             C13222 * C2020) *
                C13224 +
            (C13227 * C2402 + C13223 * C2405 + C13226 * C2002 +
             C13222 * C2011) *
                C13228) *
               C30911 * C31014) *
              C30714 * C30953 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C2285 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C2284 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C2286 +
           ((C15742 + C15741) * C13228 + (C15740 + C15739) * C13224 +
            (C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
             C13223 * C2409) *
                C13229 +
            (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
             C13223 * C2413) *
                C13225) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C31023 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C288 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C31023 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C31035 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C289 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13227 * C315 + C13223 * C328 + C13226 * C314 + C13222 * C327) *
                C13225 +
            (C13227 * C298 + C13223 * C316 + C13226 * C297 + C13222 * C313) *
                C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C31023 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C30714 * C108 -
          ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
           (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
              C30911 * C30732 * C30714 * C109 +
          ((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
           (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
              C30911 * C30732 * C30714 * C110 -
          ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
           (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
              C30911 * C30732 * C30714 * C111 +
          ((C13278 + C13277) * C13228 + (C13276 + C13275) * C13224 +
           (C13226 * C122 + C13222 * C135 + C13227 * C660 + C13223 * C661) *
               C13229 +
           (C13226 * C134 + C13222 * C143 + C13227 * C662 + C13223 * C663) *
               C13225) *
              C30911 * C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1075 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C31032 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1075 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1074 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C1075 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C1142 -
          ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
           (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
               C13224 +
           (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
               C13228) *
              C30911 * C30732 * C1143 +
          ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
               C13228 +
           (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
               C13224 +
           (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
              C30911 * C30732 * C1144 -
          ((C13227 * C1163 + C13223 * C1170 + C13226 * C1156 + C13222 * C1167) *
               C13225 +
           (C13227 * C1152 + C13223 * C1162 + C13226 * C1149 + C13222 * C1157) *
               C13229 +
           (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 + C13222 * C1168) *
               C13224 +
           (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 + C13222 * C1159) *
               C13228) *
              C30911 * C30732 * C1145 +
          ((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 + C13223 * C5480) *
               C13228 +
           (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 + C13223 * C5483) *
               C13224 +
           (C13226 * C1152 + C13222 * C1162 + C13227 * C5705 + C13223 * C5706) *
               C13229 +
           (C13226 * C1163 + C13222 * C1170 + C13227 * C5707 + C13223 * C5708) *
               C13225) *
              C30911 * C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C1820 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C30714 * C31032 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C1821 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C1820 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C31001) *
              C30714 * C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C1820 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C1821 +
           ((C13666 + C13665) * C13228 + (C13664 + C13663) * C13224 +
            (C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                C13229 +
            (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                C13225) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C1820 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C31035 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C1821 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C1820 -
           ((C13227 * C1306 + C13223 * C1316 + C13226 * C1293 +
             C13222 * C1310) *
                C13225 +
            (C13227 * C1289 + C13223 * C1305 + C13226 * C1283 +
             C13222 * C1294) *
                C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C31001) *
              C31023 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C1820 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C1821 +
           ((C13226 * C1288 + C13222 * C1303 + C13227 * C5595 +
             C13223 * C5599) *
                C13228 +
            (C13226 * C1304 + C13222 * C1315 + C13227 * C5598 +
             C13223 * C5604) *
                C13224 +
            (C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
             C13223 * C6402) *
                C13229 +
            (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
             C13223 * C6404) *
                C13225) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C30967 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C30777) *
              C30691 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C30967 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C30700 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C3274 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C30967 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C3274) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30815 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30822 +
            ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                 C13228 +
             (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                 C13224 +
             (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
                C30911 * C3782) *
               C30967 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30822 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30815 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
              C13222 * C1311) *
                 C13224 +
             (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
              C13222 * C1296) *
                 C13228) *
                C30911 * C3782) *
               C30777) *
              C2620 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30822 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30815 -
            ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
             (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
                C30911 * C3782) *
               C30967 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30815 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30822 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
              C13223 * C1307) *
                 C13229 +
             (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
              C13223 * C1317) *
                 C13225) *
                C30911 * C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C31035 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C31023 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C3274 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C30998) *
              C2620 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C31035 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C31023 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C3274 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C30714 * C31041 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C30819 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C3274) *
              C30714 * C31034 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C3274 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C30819) *
              C30714 * C31021 +
          (((C13950 + C13949) * C13228 + (C13948 + C13947) * C13224 +
            (C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C13229 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C13225) *
               C30911 * C30819 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31043 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31040 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31031 -
           ((C15739 + C15740) * C13225 + (C15741 + C15742) * C13229 +
            (C13227 * C2406 + C13223 * C2411 + C13226 * C2010 +
             C13222 * C2020) *
                C13224 +
            (C13227 * C2402 + C13223 * C2405 + C13226 * C2002 +
             C13222 * C2011) *
                C13228) *
               C30911 * C31014) *
              C30714 * C2620 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C31040 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C31043 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C31031 +
           ((C15742 + C15741) * C13228 + (C15740 + C15739) * C13224 +
            (C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
             C13223 * C2409) *
                C13229 +
            (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
             C13223 * C2413) *
                C13225) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30815 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30822 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C3782) *
              C30714 * C30691 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C30822 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30815 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C3782) *
              C30714 * C30700 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30815 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C30822 +
           ((C13666 + C13665) * C13228 + (C13664 + C13663) * C13224 +
            (C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                C13229 +
            (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                C13225) *
               C30911 * C3782) *
              C30714 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C3274 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C30714 * C31041 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C30819 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C3274) *
              C30714 * C31034 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C3274 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C30819) *
              C30714 * C31021 +
          (((C13950 + C13949) * C13228 + (C13948 + C13947) * C13224 +
            (C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C13229 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C13225) *
               C30911 * C30819 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C3274 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C31035 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C3274) *
               C31023 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C3274 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C30998) *
              C2620 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C3274) *
               C31035 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C3274 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C31023 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C30967 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C30777) *
              C656 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C30777 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C30967) *
              C657 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C30967 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C30777) *
              C658 +
          (((C13808 + C13807) * C13228 + (C13806 + C13805) * C13224 +
            (C13226 * C299 + C13222 * C318 + C13227 * C300 + C13223 * C319) *
                C13229 +
            (C13226 * C317 + C13222 * C329 + C13227 * C320 + C13223 * C330) *
                C13225) *
               C30911 * C30732 * C30777 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1416 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1417 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C1418 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30732 * C31008) *
              C30953 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1417 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1416 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C1418 +
           ((C14684 + C14683) * C13228 + (C14682 + C14681) * C13224 +
            (C13226 * C1148 + C13222 * C1155 + C13227 * C1153 +
             C13223 * C1164) *
                C13229 +
            (C13226 * C1154 + C13222 * C1166 + C13227 * C1165 +
             C13223 * C1171) *
                C13225) *
               C30911 * C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C30967 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C30777) *
              C288 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C30967 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C30777) *
              C289 +
          ((((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
             (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
                C30911 * C30968 -
            ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
             (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
                C30911 * C30819) *
               C30967 +
           (((C14168 + C14167) * C13228 + (C14166 + C14165) * C13224 +
             (C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C13229 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C13225) *
                C30911 * C30819 -
            ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
             (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
                C30911 * C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30968 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C1416 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C30819 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30968) *
              C1417 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30968 -
           ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C30819) *
              C1418 +
          (((C13226 * C1698 + C13222 * C1701 + C13227 * C5596 +
             C13223 * C5601) *
                C13228 +
            (C13226 * C1702 + C13222 * C1707 + C13227 * C5600 +
             C13223 * C5605) *
                C13224 +
            (C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
             C13223 * C5856) *
                C13229 +
            (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
             C13223 * C5858) *
                C13225) *
               C30911 * C30819 -
           ((C14681 + C14682) * C13225 + (C14683 + C14684) * C13229 +
            (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C13224 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C13228) *
               C30911 * C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C31023 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C288 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C31023 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C31035 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C289 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13227 * C315 + C13223 * C328 + C13226 * C314 + C13222 * C327) *
                C13225 +
            (C13227 * C298 + C13223 * C316 + C13226 * C297 + C13222 * C313) *
                C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C31023 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C30714 * C108 -
          ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
           (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
              C30911 * C30732 * C30714 * C109 +
          ((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
           (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
              C30911 * C30732 * C30714 * C110 -
          ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
           (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
              C30911 * C30732 * C30714 * C111 +
          ((C13278 + C13277) * C13228 + (C13276 + C13275) * C13224 +
           (C13226 * C122 + C13222 * C135 + C13227 * C660 + C13223 * C661) *
               C13229 +
           (C13226 * C134 + C13222 * C143 + C13227 * C662 + C13223 * C663) *
               C13225) *
              C30911 * C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31036 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C30714 * C288 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C31025 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C31036 -
           ((C13663 + C13664) * C13225 + (C13665 + C13666) * C13229 +
            (C13658 + C13657) * C13224 + (C13656 + C13655) * C13228) *
               C30911 * C31001) *
              C30714 * C289 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C31036 -
           ((C13227 * C937 + C13223 * C944 + C13226 * C503 + C13222 * C516) *
                C13225 +
            (C13227 * C929 + C13223 * C938 + C13226 * C486 + C13222 * C502) *
                C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C31025 +
           ((C13666 + C13665) * C13228 + (C13664 + C13663) * C13224 +
            (C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                C13229 +
            (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                C13225) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1075 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C31032 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1075 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1074 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C1075 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C1142 -
          ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
           (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
               C13224 +
           (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
               C13228) *
              C30911 * C30732 * C1143 +
          ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
               C13228 +
           (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
               C13224 +
           (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
              C30911 * C30732 * C1144 -
          ((C13227 * C1163 + C13223 * C1170 + C13226 * C1156 + C13222 * C1167) *
               C13225 +
           (C13227 * C1152 + C13223 * C1162 + C13226 * C1149 + C13222 * C1157) *
               C13229 +
           (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 + C13222 * C1168) *
               C13224 +
           (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 + C13222 * C1159) *
               C13228) *
              C30911 * C30732 * C1145 +
          ((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 + C13223 * C5480) *
               C13228 +
           (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 + C13223 * C5483) *
               C13224 +
           (C13226 * C1152 + C13222 * C1162 + C13227 * C5705 + C13223 * C5706) *
               C13229 +
           (C13226 * C1163 + C13222 * C1170 + C13227 * C5707 + C13223 * C5708) *
               C13225) *
              C30911 * C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C31036 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C483 + C13222 * C496 + C13227 * C1284 + C13223 * C1296) *
                C13228 +
            (C13226 * C497 + C13222 * C513 + C13227 * C1295 + C13223 * C1311) *
                C13224 +
            (C13655 + C13656) * C13229 + (C13657 + C13658) * C13225) *
               C30911 * C31001) *
              C1074 +
          (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                C13228 +
            (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                C13224 +
            (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
               C30911 * C31025 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C31036 -
           ((C13227 * C1306 + C13223 * C1316 + C13226 * C1293 +
             C13222 * C1310) *
                C13225 +
            (C13227 * C1289 + C13223 * C1305 + C13226 * C1283 +
             C13222 * C1294) *
                C13229 +
            (C13227 * C1304 + C13223 * C1315 + C13226 * C1295 +
             C13222 * C1311) *
                C13224 +
            (C13227 * C1288 + C13223 * C1303 + C13226 * C1284 +
             C13222 * C1296) *
                C13228) *
               C30911 * C31001) *
              C1075 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C31036 -
           ((C13227 * C1704 + C13223 * C1708 + C13226 * C1299 +
             C13222 * C1313) *
                C13225 +
            (C13227 * C1699 + C13223 * C1703 + C13226 * C1286 +
             C13222 * C1300) *
                C13229 +
            (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
             C13222 * C1314) *
                C13224 +
            (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
             C13222 * C1302) *
                C13228) *
               C30911 * C31025 +
           ((C13226 * C1288 + C13222 * C1303 + C13227 * C5595 +
             C13223 * C5599) *
                C13228 +
            (C13226 * C1304 + C13222 * C1315 + C13227 * C5598 +
             C13223 * C5604) *
                C13224 +
            (C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
             C13223 * C6402) *
                C13229 +
            (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
             C13223 * C6404) *
                C13225) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30968 -
           ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
            (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                C13224 +
            (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                C13228) *
               C30911 * C30819) *
              C30714 * C656 +
          (((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
            (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
               C30911 * C30819 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30968) *
              C30714 * C657 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30968 -
           ((C13947 + C13948) * C13225 + (C13949 + C13950) * C13229 +
            (C13662 + C13661) * C13224 + (C13660 + C13659) * C13228) *
               C30911 * C30819) *
              C30714 * C658 +
          (((C13950 + C13949) * C13228 + (C13948 + C13947) * C13224 +
            (C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C13229 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C13225) *
               C30911 * C30819 -
           ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
            (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
               C30911 * C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C13228 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C13224 +
             (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
                C30911 * C30968 -
            ((C13651 + C13652) * C13225 + (C13653 + C13654) * C13229 +
             (C13227 * C932 + C13223 * C941 + C13226 * C494 + C13222 * C512) *
                 C13224 +
             (C13227 * C926 + C13223 * C931 + C13226 * C482 + C13222 * C495) *
                 C13228) *
                C30911 * C30819) *
               C1074 +
           (((C13226 * C926 + C13222 * C931 + C13227 * C1287 + C13223 * C1302) *
                 C13228 +
             (C13226 * C932 + C13222 * C941 + C13227 * C1301 + C13223 * C1314) *
                 C13224 +
             (C14161 + C14162) * C13229 + (C14163 + C14164) * C13225) *
                C30911 * C30819 -
            ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
             (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C13224 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C13228) *
                C30911 * C30968) *
               C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C13228 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C13224 +
             (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
                C30911 * C30968 -
            ((C14887 + C14888) * C13225 + (C14889 + C14890) * C13229 +
             (C13227 * C1702 + C13223 * C1707 + C13226 * C1301 +
              C13222 * C1314) *
                 C13224 +
             (C13227 * C1698 + C13223 * C1701 + C13226 * C1287 +
              C13222 * C1302) *
                 C13228) *
                C30911 * C30819) *
               C30998) *
              C30953 +
          ((((C13654 + C13653) * C13228 + (C13652 + C13651) * C13224 +
             (C13659 + C13660) * C13229 + (C13661 + C13662) * C13225) *
                C30911 * C30819 -
            ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
             (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
                C30911 * C30968) *
               C1074 +
           (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
             (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
                C30911 * C30968 -
            ((C14165 + C14166) * C13225 + (C14167 + C14168) * C13229 +
             (C14164 + C14163) * C13224 + (C14162 + C14161) * C13228) *
                C30911 * C30819) *
               C1075 +
           (((C14890 + C14889) * C13228 + (C14888 + C14887) * C13224 +
             (C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C13229 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C13225) *
                C30911 * C30819 -
            ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
             (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
                C30911 * C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C30714 * C108 -
          ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
           (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
              C30911 * C30732 * C30714 * C109 +
          ((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
           (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
              C30911 * C30732 * C30714 * C110 -
          ((C13275 + C13276) * C13225 + (C13277 + C13278) * C13229 +
           (C13274 + C13273) * C13224 + (C13272 + C13271) * C13228) *
              C30911 * C30732 * C30714 * C111 +
          ((C13278 + C13277) * C13228 + (C13276 + C13275) * C13224 +
           (C13226 * C122 + C13222 * C135 + C13227 * C660 + C13223 * C661) *
               C13229 +
           (C13226 * C134 + C13222 * C143 + C13227 * C662 + C13223 * C663) *
               C13225) *
              C30911 * C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C31023 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C288 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C31023 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C31035 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C289 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C31035 -
           ((C13227 * C315 + C13223 * C328 + C13226 * C314 + C13222 * C327) *
                C13225 +
            (C13227 * C298 + C13223 * C316 + C13226 * C297 + C13222 * C313) *
                C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C31023 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C13228 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C13224 +
            (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
            (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C13224 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C13228) *
               C30911 * C30732 * C1075 +
           ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C13228 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C13224 +
            (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
               C30911 * C30732 * C30998) *
              C31032 +
          (((C13460 + C13459) * C13228 + (C13458 + C13457) * C13224 +
            (C13465 + C13466) * C13229 + (C13467 + C13468) * C13225) *
               C30911 * C30732 * C1075 -
           ((C13267 + C13268) * C13225 + (C13269 + C13270) * C13229 +
            (C13266 + C13265) * C13224 + (C13264 + C13263) * C13228) *
               C30911 * C30732 * C1074 -
           ((C13469 + C13470) * C13225 + (C13471 + C13472) * C13229 +
            (C13464 + C13463) * C13224 + (C13462 + C13461) * C13228) *
               C30911 * C30732 * C30998) *
              C31019 +
          (((C13270 + C13269) * C13228 + (C13268 + C13267) * C13224 +
            (C13271 + C13272) * C13229 + (C13273 + C13274) * C13225) *
               C30911 * C30732 * C1074 -
           ((C13805 + C13806) * C13225 + (C13807 + C13808) * C13229 +
            (C13468 + C13467) * C13224 + (C13466 + C13465) * C13228) *
               C30911 * C30732 * C1075 +
           ((C13472 + C13471) * C13228 + (C13470 + C13469) * C13224 +
            (C13226 * C298 + C13222 * C316 + C13227 * C1422 + C13223 * C1423) *
                C13229 +
            (C13226 * C315 + C13222 * C328 + C13227 * C1424 + C13223 * C1425) *
                C13225) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
               C13228 +
           (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
               C13224 +
           (C13263 + C13264) * C13229 + (C13265 + C13266) * C13225) *
              C30911 * C30732 * C1142 -
          ((C13457 + C13458) * C13225 + (C13459 + C13460) * C13229 +
           (C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
               C13224 +
           (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
               C13228) *
              C30911 * C30732 * C1143 +
          ((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
               C13228 +
           (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
               C13224 +
           (C13461 + C13462) * C13229 + (C13463 + C13464) * C13225) *
              C30911 * C30732 * C1144 -
          ((C13227 * C1163 + C13223 * C1170 + C13226 * C1156 + C13222 * C1167) *
               C13225 +
           (C13227 * C1152 + C13223 * C1162 + C13226 * C1149 + C13222 * C1157) *
               C13229 +
           (C13227 * C1161 + C13223 * C1169 + C13226 * C1158 + C13222 * C1168) *
               C13224 +
           (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 + C13222 * C1159) *
               C13228) *
              C30911 * C30732 * C1145 +
          ((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 + C13223 * C5480) *
               C13228 +
           (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 + C13223 * C5483) *
               C13224 +
           (C13226 * C1152 + C13222 * C1162 + C13227 * C5705 + C13223 * C5706) *
               C13229 +
           (C13226 * C1163 + C13222 * C1170 + C13227 * C5707 + C13223 * C5708) *
               C13225) *
              C30911 * C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C30773 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C30780 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30732 * C2880) *
              C30691 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C30780 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C30773 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C2880) *
              C30700 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C30773 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C30780 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C30773 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C30780 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C30968 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C2880) *
              C2620 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C30773 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30780 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C30968) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C31042 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C31038 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30732 * C31028 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30732 * C31008) *
              C2620 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C31038 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C31042 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C31028 +
           (((C14684 + C14683) * C4742 + (C14682 + C14681) * C30662) * C18918 +
            ((C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
              C13223 * C5856) *
                 C4742 +
             (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
              C13223 * C5858) *
                 C30662) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C2512 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C30777) *
              C31041 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C30777 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C2512) *
              C31034 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C2512 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C30777) *
              C31021 +
          ((((C13808 + C13807) * C4742 + (C13806 + C13805) * C30662) * C18918 +
            ((C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C4742 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C30662) *
                C18919) *
               C30732 * C30777 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C31036 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C31025 +
            (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
             ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) *
                 C18919) *
                C31001) *
               C2512 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C31025 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C31036 -
            (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
             ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) *
                 C18918) *
                C31001) *
               C30777) *
              C2620 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C31025 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C31036 -
            (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
             ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) *
                 C18918) *
                C31001) *
               C2512 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C31036 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C31025 +
            (((C15600 + C15599) * C4742 + (C15598 + C15597) * C30662) * C18918 +
             ((C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
               C13223 * C6504) *
                  C4742 +
              (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
               C13223 * C6506) *
                  C30662) *
                 C18919) *
                C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C30691 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C2512 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C30700 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C30968 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C2512 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C30777) *
              C31041 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C30777 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C2512) *
              C31034 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C2512 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C30777) *
              C31021 +
          ((((C13808 + C13807) * C4742 + (C13806 + C13805) * C30662) * C18918 +
            ((C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C4742 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C30662) *
                C18919) *
               C30732 * C30777 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C31042 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C31038 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30732 * C31028 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30732 * C31008) *
              C2620 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C31038 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C31042 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C31028 +
           (((C14684 + C14683) * C4742 + (C14682 + C14681) * C30662) * C18918 +
            ((C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
              C13223 * C5856) *
                 C4742 +
             (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
              C13223 * C5858) *
                 C30662) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C30773 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C30780 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C3274 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C2880) *
              C30953 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C30773 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30780 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C3274) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30815 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30822 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C3782) *
              C30773 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C30822 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30815 -
           (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C3782) *
              C30780 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30815 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C30822 +
           (((C25646 + C25645) * C4742 + (C25644 + C25643) * C30662) * C18918 +
            ((C13226 * C6243 + C13222 * C6247 + C13227 * C6605 +
              C13223 * C6606) *
                 C4742 +
             (C13226 * C6246 + C13222 * C6252 + C13227 * C6607 +
              C13223 * C6608) *
                 C30662) *
                C18919) *
               C3782) *
              C2880) *
         C30686) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C3274 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C31042 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C30819 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C3274) *
              C31038 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C3274 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C30819) *
              C31028 +
          ((((C26109 + C26110) * C4742 + (C26111 + C26112) * C30662) * C18918 +
            ((C13226 * C5595 + C13222 * C5599 + C13227 * C5597 +
              C13223 * C5602) *
                 C4742 +
             (C13226 * C5598 + C13222 * C5604 + C13227 * C5603 +
              C13223 * C5606) *
                 C30662) *
                C18919) *
               C30819 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C31032 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C2512 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C31019 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C3274 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31043 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31040 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C31031 -
           (((C26507 + C26508) * C30662 + (C26509 + C26510) * C4742) * C18919 +
            ((C26506 + C26505) * C30662 + (C26504 + C26503) * C4742) * C18918) *
               C31014) *
              C2512 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C31040 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C31043 -
           (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C31031 +
           (((C26976 + C26975) * C4742 + (C26974 + C26973) * C30662) * C18918 +
            ((C13226 * C6244 + C13222 * C6248 + C13227 * C6245 +
              C13223 * C6249) *
                 C4742 +
             (C13226 * C6250 + C13222 * C6253 + C13227 * C6251 +
              C13223 * C6254) *
                 C30662) *
                C18919) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30815 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30822 +
            (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
             ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) *
                 C18919) *
                C3782) *
               C2512 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30822 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30815 -
            (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
             ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) *
                 C18918) *
                C3782) *
               C30777) *
              C30953 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30822 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30815 -
            (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
             ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) *
                 C18918) *
                C3782) *
               C2512 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30815 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30822 +
            (((C15600 + C15599) * C4742 + (C15598 + C15597) * C30662) * C18918 +
             ((C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
               C13223 * C6504) *
                  C4742 +
              (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
               C13223 * C6506) *
                  C30662) *
                 C18919) *
                C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C31032 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C2512 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C31019 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C3274 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C2512 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C3274 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C31042 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C30819 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C3274) *
              C31038 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C3274 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C30819) *
              C31028 +
          ((((C26109 + C26110) * C4742 + (C26111 + C26112) * C30662) * C18918 +
            ((C13226 * C5595 + C13222 * C5599 + C13227 * C5597 +
              C13223 * C5602) *
                 C4742 +
             (C13226 * C5598 + C13222 * C5604 + C13227 * C5603 +
              C13223 * C5606) *
                 C30662) *
                C18919) *
               C30819 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1416 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1417 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30732 * C1418 -
           (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
              C13222 * C1707) *
                 C30662 +
             (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
              C13222 * C1701) *
                 C4742) *
                C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30732 * C31008) *
              C30953 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1417 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1416 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C1418 +
           (((C14684 + C14683) * C4742 + (C14682 + C14681) * C30662) * C18918 +
            ((C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
              C13223 * C5856) *
                 C4742 +
             (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
              C13223 * C5858) *
                 C30662) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C30967 -
           (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 + C13222 * C941) *
                 C30662 +
             (C13227 * C1287 + C13223 * C1302 + C13226 * C926 + C13222 * C931) *
                 C4742) *
                C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C30777) *
              C656 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C30777 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C30967) *
              C657 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C30967 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C30777) *
              C658 +
          ((((C13808 + C13807) * C4742 + (C13806 + C13805) * C30662) * C18918 +
            ((C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C4742 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C30662) *
                C18919) *
               C30732 * C30777 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C1820 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C1821 +
            (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
             ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) *
                 C18919) *
                C31001) *
               C30967 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C1821 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C1820 -
            (((C13227 * C6246 + C13223 * C6252 + C13226 * C2406 +
               C13222 * C2411) *
                  C30662 +
              (C13227 * C6243 + C13223 * C6247 + C13226 * C2402 +
               C13222 * C2405) *
                  C4742) *
                 C18919 +
             ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) *
                 C18918) *
                C31001) *
               C30777) *
              C30953 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C1821 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C1820 -
            (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
             ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) *
                 C18918) *
                C31001) *
               C30967 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C1820 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C1821 +
            (((C15600 + C15599) * C4742 + (C15598 + C15597) * C30662) * C18918 +
             ((C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
               C13223 * C6504) *
                  C4742 +
              (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
               C13223 * C6506) *
                  C30662) *
                 C18919) *
                C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30968 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C1416 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C30819 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30968) *
              C1417 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30968 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C30819) *
              C1418 +
          ((((C26109 + C26110) * C4742 + (C26111 + C26112) * C30662) * C18918 +
            ((C13226 * C5595 + C13222 * C5599 + C13227 * C5597 +
              C13223 * C5602) *
                 C4742 +
             (C13226 * C5598 + C13222 * C5604 + C13227 * C5603 +
              C13223 * C5606) *
                 C30662) *
                C18919) *
               C30819 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C13226 * C1284 + C13222 * C1296 + C13227 * C1288 +
               C13223 * C1303) *
                  C4742 +
              (C13226 * C1295 + C13222 * C1311 + C13227 * C1304 +
               C13223 * C1315) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C288 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C30967 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C289 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C30968 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C2284 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C2285 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C2286 -
           (((C26507 + C26508) * C30662 + (C26509 + C26510) * C4742) * C18919 +
            ((C26506 + C26505) * C30662 + (C26504 + C26503) * C4742) * C18918) *
               C31014) *
              C30967 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C2285 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C2284 -
           (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C2286 +
           (((C26976 + C26975) * C4742 + (C26974 + C26973) * C30662) * C18918 +
            ((C13226 * C6244 + C13222 * C6248 + C13227 * C6245 +
              C13223 * C6249) *
                 C4742 +
             (C13226 * C6250 + C13222 * C6253 + C13227 * C6251 +
              C13223 * C6254) *
                 C30662) *
                C18919) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13226 * C117 + C13222 * C124 + C13227 * C293 +
                 C13223 * C306) *
                    C4742 +
                (C13226 * C125 + C13222 * C138 + C13227 * C305 +
                 C13223 * C323) *
                    C30662) *
                   C18918 +
               ((C13226 * C482 + C13222 * C495 + C13227 * C926 +
                 C13223 * C931) *
                    C4742 +
                (C13226 * C494 + C13222 * C512 + C13227 * C932 +
                 C13223 * C941) *
                    C30662) *
                   C18919) *
                  C30732 * C30714 * C108 -
              (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) *
                   C18919 +
               ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                   C18918) *
                  C30732 * C30714 * C109 +
              (((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) *
                   C18918 +
               ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                   C18919) *
                  C30732 * C30714 * C110 -
              (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) *
                   C18919 +
               ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) *
                   C18918) *
                  C30732 * C30714 * C111 +
              (((C13278 + C13277) * C4742 + (C13276 + C13275) * C30662) *
                   C18918 +
               ((C13226 * C488 + C13222 * C507 + C13227 * C930 +
                 C13223 * C939) *
                    C4742 +
                (C13226 * C506 + C13222 * C518 + C13227 * C940 +
                 C13223 * C945) *
                    C30662) *
                   C18919) *
                  C30732 * C30714 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13226 * C117 + C13222 * C124 + C13227 * C293 +
                  C13223 * C306) *
                     C4742 +
                 (C13226 * C125 + C13222 * C138 + C13227 * C305 +
                  C13223 * C323) *
                     C30662) *
                    C18918 +
                ((C13226 * C482 + C13222 * C495 + C13227 * C926 +
                  C13223 * C931) *
                     C4742 +
                 (C13226 * C494 + C13222 * C512 + C13227 * C932 +
                  C13223 * C941) *
                     C30662) *
                    C18919) *
                   C30732 * C31035 -
               (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 +
                  C13222 * C941) *
                     C30662 +
                 (C13227 * C1287 + C13223 * C1302 + C13226 * C926 +
                  C13222 * C931) *
                     C4742) *
                    C18919 +
                ((C13227 * C308 + C13223 * C324 + C13226 * C305 +
                  C13222 * C323) *
                     C30662 +
                 (C13227 * C294 + C13223 * C307 + C13226 * C293 +
                  C13222 * C306) *
                     C4742) *
                    C18918) *
                   C30732 * C31023 +
               (((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
                  C13223 * C1159) *
                     C4742 +
                 (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
                  C13223 * C1168) *
                     C30662) *
                    C18918 +
                ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
                  C13223 * C1701) *
                     C4742 +
                 (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
                  C13223 * C1707) *
                     C30662) *
                    C18919) *
                   C30732 * C30998) *
                  C288 +
              ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) *
                    C18918 +
                ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                    C18919) *
                   C30732 * C31023 -
               (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) *
                    C18919 +
                ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                    C18918) *
                   C30732 * C31035 -
               (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) *
                    C18919 +
                ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                    C18918) *
                   C30732 * C30998) *
                  C289 +
              ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) *
                    C18918 +
                ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                    C18919) *
                   C30732 * C31035 -
               (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) *
                    C18919 +
                ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                    C18918) *
                   C30732 * C31023 +
               (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) *
                    C18918 +
                ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
                  C13223 * C1705) *
                     C4742 +
                 (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
                  C13223 * C1709) *
                     C30662) *
                    C18919) *
                   C30732 * C30998) *
                  C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31036 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31025 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C288 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C31025 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C31036 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C31001) *
              C30714 * C289 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C31036 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C31025 +
           (((C13666 + C13665) * C4742 + (C13664 + C13663) * C30662) * C18918 +
            ((C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
              C13223 * C2409) *
                 C4742 +
             (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
              C13223 * C2413) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1074 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1075 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1074 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C1074 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C1075 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
              C30732 * C1142 -
          (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
           ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C30662 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C4742) *
               C18918) *
              C30732 * C1143 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C4742 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C30662) *
               C18918 +
           ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
             C13223 * C1701) *
                C4742 +
            (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
             C13223 * C1707) *
                C30662) *
               C18919) *
              C30732 * C1144 -
          (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
             C13222 * C1707) *
                C30662 +
            (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
             C13222 * C1701) *
                C4742) *
               C18919 +
           ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C30662 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C4742) *
               C18918) *
              C30732 * C1145 +
          (((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 +
             C13223 * C5480) *
                C4742 +
            (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 +
             C13223 * C5483) *
                C30662) *
               C18918 +
           ((C13226 * C5596 + C13222 * C5601 + C13227 * C5957 +
             C13223 * C5958) *
                C4742 +
            (C13226 * C5600 + C13222 * C5605 + C13227 * C5959 +
             C13223 * C5960) *
                C30662) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31036 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31025 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C1074 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C31025 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C31036 -
           (((C13227 * C6246 + C13223 * C6252 + C13226 * C2406 +
              C13222 * C2411) *
                 C30662 +
             (C13227 * C6243 + C13223 * C6247 + C13226 * C2402 +
              C13222 * C2405) *
                 C4742) *
                C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C31001) *
              C1075 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C31036 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C31025 +
           (((C25646 + C25645) * C4742 + (C25644 + C25643) * C30662) * C18918 +
            ((C13226 * C6243 + C13222 * C6247 + C13227 * C6605 +
              C13223 * C6606) *
                 C4742 +
             (C13226 * C6246 + C13222 * C6252 + C13227 * C6607 +
              C13223 * C6608) *
                 C30662) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C1820 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C1821 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C31032 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C1821 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C1820 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C31001) *
              C30714 * C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C1820 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C1821 +
           (((C13666 + C13665) * C4742 + (C13664 + C13663) * C30662) * C18918 +
            ((C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
              C13223 * C2409) *
                 C4742 +
             (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
              C13223 * C2413) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C1820 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C1821 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C31035 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C1821 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C1820 -
           (((C13227 * C6246 + C13223 * C6252 + C13226 * C2406 +
              C13222 * C2411) *
                 C30662 +
             (C13227 * C6243 + C13223 * C6247 + C13226 * C2402 +
              C13222 * C2405) *
                 C4742) *
                C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C31001) *
              C31023 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C1820 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C1821 +
           (((C25646 + C25645) * C4742 + (C25644 + C25643) * C30662) * C18918 +
            ((C13226 * C6243 + C13222 * C6247 + C13227 * C6605 +
              C13223 * C6606) *
                 C4742 +
             (C13226 * C6246 + C13222 * C6252 + C13227 * C6607 +
              C13223 * C6608) *
                 C30662) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
              C1995 -
          (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
           ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
              C1996 +
          (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
           ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
              C1997 -
          (((C26507 + C26508) * C30662 + (C26509 + C26510) * C4742) * C18919 +
           ((C26506 + C26505) * C30662 + (C26504 + C26503) * C4742) * C18918) *
              C1998 +
          (((C26510 + C26509) * C4742 + (C26508 + C26507) * C30662) * C18918 +
           ((C13226 * C10501 + C13222 * C10504 + C13227 * C10895 +
             C13223 * C10896) *
                C4742 +
            (C13226 * C10503 + C13222 * C10507 + C13227 * C10897 +
             C13223 * C10898) *
                C30662) *
               C18919) *
              C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C1074 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C1075 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C30968 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C30998) *
              C30953 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C1074 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C1075 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30968 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C30714 * C656 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C30819 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30968) *
              C30714 * C657 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30968 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C30819) *
              C30714 * C658 +
          ((((C13950 + C13949) * C4742 + (C13948 + C13947) * C30662) * C18918 +
            ((C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                 C4742 +
             (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                 C30662) *
                C18919) *
               C30819 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C2284 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C2285 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C2286 -
           (((C26507 + C26508) * C30662 + (C26509 + C26510) * C4742) * C18919 +
            ((C26506 + C26505) * C30662 + (C26504 + C26503) * C4742) * C18918) *
               C31014) *
              C30714 * C30953 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C2285 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C2284 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C2286 +
           (((C15742 + C15741) * C4742 + (C15740 + C15739) * C30662) * C18918 +
            ((C13226 * C2004 + C13222 * C2014 + C13227 * C10673 +
              C13223 * C10674) *
                 C4742 +
             (C13226 * C2015 + C13222 * C2022 + C13227 * C10675 +
              C13223 * C10676) *
                 C30662) *
                C18919) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                 C4742 +
             (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                 C30662) *
                C18919) *
               C30732 * C31035 -
           (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 + C13222 * C941) *
                 C30662 +
             (C13227 * C1287 + C13223 * C1302 + C13226 * C926 + C13222 * C931) *
                 C4742) *
                C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C31023 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C288 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C31023 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C31035 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C289 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C31035 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C31023 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                C4742 +
            (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                C30662) *
               C18919) *
              C30732 * C30714 * C108 -
          (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
           ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
              C30732 * C30714 * C109 +
          (((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
           ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
              C30732 * C30714 * C110 -
          (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
           ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
              C30732 * C30714 * C111 +
          (((C13278 + C13277) * C4742 + (C13276 + C13275) * C30662) * C18918 +
           ((C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C4742 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C30662) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1074 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1075 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1074 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C1074 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C1075 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
              C30732 * C1142 -
          (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
           ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C30662 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C4742) *
               C18918) *
              C30732 * C1143 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C4742 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C30662) *
               C18918 +
           ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
             C13223 * C1701) *
                C4742 +
            (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
             C13223 * C1707) *
                C30662) *
               C18919) *
              C30732 * C1144 -
          (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
             C13222 * C1707) *
                C30662 +
            (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
             C13222 * C1701) *
                C4742) *
               C18919 +
           ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C30662 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C4742) *
               C18918) *
              C30732 * C1145 +
          (((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 +
             C13223 * C5480) *
                C4742 +
            (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 +
             C13223 * C5483) *
                C30662) *
               C18918 +
           ((C13226 * C5596 + C13222 * C5601 + C13227 * C5957 +
             C13223 * C5958) *
                C4742 +
            (C13226 * C5600 + C13222 * C5605 + C13227 * C5959 +
             C13223 * C5960) *
                C30662) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C1820 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C1821 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C31032 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C1821 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C1820 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C31001) *
              C30714 * C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C1820 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C1821 +
           (((C13666 + C13665) * C4742 + (C13664 + C13663) * C30662) * C18918 +
            ((C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
              C13223 * C2409) *
                 C4742 +
             (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
              C13223 * C2413) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C1820 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C1821 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C31035 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C1821 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C1820 -
           (((C13227 * C6246 + C13223 * C6252 + C13226 * C2406 +
              C13222 * C2411) *
                 C30662 +
             (C13227 * C6243 + C13223 * C6247 + C13226 * C2402 +
              C13222 * C2405) *
                 C4742) *
                C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C31001) *
              C31023 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C1820 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C1821 +
           (((C25646 + C25645) * C4742 + (C25644 + C25643) * C30662) * C18918 +
            ((C13226 * C6243 + C13222 * C6247 + C13227 * C6605 +
              C13223 * C6606) *
                 C4742 +
             (C13226 * C6246 + C13222 * C6252 + C13227 * C6607 +
              C13223 * C6608) *
                 C30662) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C30691 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C30967 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C30700 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C3274 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C3274) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30815 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30822 +
            (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
             ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) *
                 C18919) *
                C3782) *
               C30967 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30822 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30815 -
            (((C26973 + C26974) * C30662 + (C26975 + C26976) * C4742) * C18919 +
             ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) *
                 C18918) *
                C3782) *
               C30777) *
              C2620 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30822 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30815 -
            (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
             ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) *
                 C18918) *
                C3782) *
               C30967 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30815 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30822 +
            (((C15600 + C15599) * C4742 + (C15598 + C15597) * C30662) * C18918 +
             ((C13226 * C2403 + C13222 * C2407 + C13227 * C6503 +
               C13223 * C6504) *
                  C4742 +
              (C13226 * C2408 + C13222 * C2412 + C13227 * C6505 +
               C13223 * C6506) *
                  C30662) *
                 C18919) *
                C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C31035 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C31023 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C3274 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C30998) *
              C2620 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C31035 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C31023 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C3274 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C30714 * C31041 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C30819 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C3274) *
              C30714 * C31034 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C3274 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C30819) *
              C30714 * C31021 +
          ((((C13950 + C13949) * C4742 + (C13948 + C13947) * C30662) * C18918 +
            ((C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                 C4742 +
             (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                 C30662) *
                C18919) *
               C30819 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31043 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31040 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C31031 -
           (((C26507 + C26508) * C30662 + (C26509 + C26510) * C4742) * C18919 +
            ((C26506 + C26505) * C30662 + (C26504 + C26503) * C4742) * C18918) *
               C31014) *
              C30714 * C2620 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C31040 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C31043 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C31031 +
           (((C15742 + C15741) * C4742 + (C15740 + C15739) * C30662) * C18918 +
            ((C13226 * C2004 + C13222 * C2014 + C13227 * C10673 +
              C13223 * C10674) *
                 C4742 +
             (C13226 * C2015 + C13222 * C2022 + C13227 * C10675 +
              C13223 * C10676) *
                 C30662) *
                C18919) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30815 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30822 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C26503 + C26504) * C4742 + (C26505 + C26506) * C30662) * C18919) *
               C3782) *
              C30714 * C30691 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C30822 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30815 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C3782) *
              C30714 * C30700 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30815 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C30822 +
           (((C13666 + C13665) * C4742 + (C13664 + C13663) * C30662) * C18918 +
            ((C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
              C13223 * C2409) *
                 C4742 +
             (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
              C13223 * C2413) *
                 C30662) *
                C18919) *
               C3782) *
              C30714 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C3274 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C30714 * C31041 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C30819 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C3274) *
              C30714 * C31034 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C3274 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C30819) *
              C30714 * C31021 +
          ((((C13950 + C13949) * C4742 + (C13948 + C13947) * C30662) * C18918 +
            ((C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                 C4742 +
             (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                 C30662) *
                C18919) *
               C30819 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C3274 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C31035 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C3274) *
               C31023 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C3274 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C30998) *
              C2620 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C3274) *
               C31035 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C3274 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C31023 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C30967 -
           (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 + C13222 * C941) *
                 C30662 +
             (C13227 * C1287 + C13223 * C1302 + C13226 * C926 + C13222 * C931) *
                 C4742) *
                C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C30777) *
              C656 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C30777 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C30967) *
              C657 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C30967 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C30777) *
              C658 +
          ((((C13808 + C13807) * C4742 + (C13806 + C13805) * C30662) * C18918 +
            ((C13226 * C929 + C13222 * C938 + C13227 * C1584 + C13223 * C1585) *
                 C4742 +
             (C13226 * C937 + C13222 * C944 + C13227 * C1586 + C13223 * C1587) *
                 C30662) *
                C18919) *
               C30732 * C30777 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1416 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1417 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30732 * C1418 -
           (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
              C13222 * C1707) *
                 C30662 +
             (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
              C13222 * C1701) *
                 C4742) *
                C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30732 * C31008) *
              C30953 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1417 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1416 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C1418 +
           (((C14684 + C14683) * C4742 + (C14682 + C14681) * C30662) * C18918 +
            ((C13226 * C1699 + C13222 * C1703 + C13227 * C5855 +
              C13223 * C5856) *
                 C4742 +
             (C13226 * C1704 + C13222 * C1708 + C13227 * C5857 +
              C13223 * C5858) *
                 C30662) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C13226 * C1284 + C13222 * C1296 + C13227 * C1288 +
               C13223 * C1303) *
                  C4742 +
              (C13226 * C1295 + C13222 * C1311 + C13227 * C1304 +
               C13223 * C1315) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C288 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C30967 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C30777) *
              C289 +
          (((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
             ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) *
                 C18919) *
                C30968 -
            (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
             ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) *
                 C18918) *
                C30819) *
               C30967 +
           ((((C14168 + C14167) * C4742 + (C14166 + C14165) * C30662) * C18918 +
             ((C13226 * C1282 + C13222 * C1292 + C13227 * C1290 +
               C13223 * C1307) *
                  C4742 +
              (C13226 * C1291 + C13222 * C1309 + C13227 * C1308 +
               C13223 * C1317) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
             ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) *
                 C18918) *
                C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30968 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C1416 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C30819 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30968) *
              C1417 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C30968 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C30819) *
              C1418 +
          ((((C26109 + C26110) * C4742 + (C26111 + C26112) * C30662) * C18918 +
            ((C13226 * C5595 + C13222 * C5599 + C13227 * C5597 +
              C13223 * C5602) *
                 C4742 +
             (C13226 * C5598 + C13222 * C5604 + C13227 * C5603 +
              C13223 * C5606) *
                 C30662) *
                C18919) *
               C30819 -
           (((C26112 + C26111) * C30662 + (C26110 + C26109) * C4742) * C18919 +
            ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
              C13222 * C1168) *
                 C30662 +
             (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
              C13222 * C1159) *
                 C4742) *
                C18918) *
               C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                 C4742 +
             (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                 C30662) *
                C18919) *
               C30732 * C31035 -
           (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 + C13222 * C941) *
                 C30662 +
             (C13227 * C1287 + C13223 * C1302 + C13226 * C926 + C13222 * C931) *
                 C4742) *
                C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C31023 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C288 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C31023 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C31035 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C289 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C31035 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C31023 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                C4742 +
            (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                C30662) *
               C18919) *
              C30732 * C30714 * C108 -
          (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
           ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
              C30732 * C30714 * C109 +
          (((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
           ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
              C30732 * C30714 * C110 -
          (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
           ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
              C30732 * C30714 * C111 +
          (((C13278 + C13277) * C4742 + (C13276 + C13275) * C30662) * C18918 +
           ((C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C4742 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C30662) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31036 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31025 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C288 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C31025 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C31036 -
           (((C15739 + C15740) * C30662 + (C15741 + C15742) * C4742) * C18919 +
            ((C13658 + C13657) * C30662 + (C13656 + C13655) * C4742) * C18918) *
               C31001) *
              C30714 * C289 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C31036 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C31025 +
           (((C13666 + C13665) * C4742 + (C13664 + C13663) * C30662) * C18918 +
            ((C13226 * C2000 + C13222 * C2007 + C13227 * C2404 +
              C13223 * C2409) *
                 C4742 +
             (C13226 * C2006 + C13222 * C2018 + C13227 * C2410 +
              C13223 * C2413) *
                 C30662) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1074 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1075 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1074 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C1074 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C1075 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
              C30732 * C1142 -
          (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
           ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C30662 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C4742) *
               C18918) *
              C30732 * C1143 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C4742 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C30662) *
               C18918 +
           ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
             C13223 * C1701) *
                C4742 +
            (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
             C13223 * C1707) *
                C30662) *
               C18919) *
              C30732 * C1144 -
          (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
             C13222 * C1707) *
                C30662 +
            (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
             C13222 * C1701) *
                C4742) *
               C18919 +
           ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C30662 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C4742) *
               C18918) *
              C30732 * C1145 +
          (((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 +
             C13223 * C5480) *
                C4742 +
            (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 +
             C13223 * C5483) *
                C30662) *
               C18918 +
           ((C13226 * C5596 + C13222 * C5601 + C13227 * C5957 +
             C13223 * C5958) *
                C4742 +
            (C13226 * C5600 + C13222 * C5605 + C13227 * C5959 +
             C13223 * C5960) *
                C30662) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C31036 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C31025 +
           (((C24770 + C24769) * C4742 + (C24768 + C24767) * C30662) * C18918 +
            ((C13226 * C2002 + C13222 * C2011 + C13227 * C2402 +
              C13223 * C2405) *
                 C4742 +
             (C13226 * C2010 + C13222 * C2020 + C13227 * C2406 +
              C13223 * C2411) *
                 C30662) *
                C18919) *
               C31001) *
              C1074 +
          ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
            ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) * C18919) *
               C31025 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C31036 -
           (((C13227 * C6246 + C13223 * C6252 + C13226 * C2406 +
              C13222 * C2411) *
                 C30662 +
             (C13227 * C6243 + C13223 * C6247 + C13226 * C2402 +
              C13222 * C2405) *
                 C4742) *
                C18919 +
            ((C25638 + C25637) * C30662 + (C25636 + C25635) * C4742) * C18918) *
               C31001) *
              C1075 +
          ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) * C18919) *
               C31036 -
           (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
            ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) * C18918) *
               C31025 +
           (((C25646 + C25645) * C4742 + (C25644 + C25643) * C30662) * C18918 +
            ((C13226 * C6243 + C13222 * C6247 + C13227 * C6605 +
              C13223 * C6606) *
                 C4742 +
             (C13226 * C6246 + C13222 * C6252 + C13227 * C6607 +
              C13223 * C6608) *
                 C30662) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30968 -
           (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
            ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) * C18918) *
               C30819) *
              C30714 * C656 +
          ((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
            ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) * C18919) *
               C30819 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30968) *
              C30714 * C657 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30968 -
           (((C13663 + C13664) * C30662 + (C13665 + C13666) * C4742) * C18919 +
            ((C13662 + C13661) * C30662 + (C13660 + C13659) * C4742) * C18918) *
               C30819) *
              C30714 * C658 +
          ((((C13950 + C13949) * C4742 + (C13948 + C13947) * C30662) * C18918 +
            ((C13226 * C487 + C13222 * C505 + C13227 * C2170 + C13223 * C2171) *
                 C4742 +
             (C13226 * C504 + C13222 * C517 + C13227 * C2172 + C13223 * C2173) *
                 C30662) *
                C18919) *
               C30819 -
           (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
            ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
               C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                  C4742 +
              (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                  C30662) *
                 C18918 +
             ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) *
                 C18919) *
                C30968 -
            (((C24767 + C24768) * C30662 + (C24769 + C24770) * C4742) * C18919 +
             ((C24766 + C24765) * C30662 + (C24764 + C24763) * C4742) *
                 C18918) *
                C30819) *
               C1074 +
           ((((C25233 + C25234) * C4742 + (C25235 + C25236) * C30662) * C18918 +
             ((C25635 + C25636) * C4742 + (C25637 + C25638) * C30662) *
                 C18919) *
                C30819 -
            (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
             ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                  C30662 +
              (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                  C4742) *
                 C18918) *
                C30968) *
               C1075 +
           ((((C13226 * C294 + C13222 * C307 + C13227 * C1150 +
               C13223 * C1159) *
                  C4742 +
              (C13226 * C308 + C13222 * C324 + C13227 * C1158 +
               C13223 * C1168) *
                  C30662) *
                 C18918 +
             ((C25639 + C25640) * C4742 + (C25641 + C25642) * C30662) *
                 C18919) *
                C30968 -
            (((C25643 + C25644) * C30662 + (C25645 + C25646) * C4742) * C18919 +
             ((C25642 + C25641) * C30662 + (C25640 + C25639) * C4742) *
                 C18918) *
                C30819) *
               C30998) *
              C30953 +
          (((((C13654 + C13653) * C4742 + (C13652 + C13651) * C30662) * C18918 +
             ((C13655 + C13656) * C4742 + (C13657 + C13658) * C30662) *
                 C18919) *
                C30819 -
            (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
             ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) *
                 C18918) *
                C30968) *
               C1074 +
           ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
             ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) *
                 C18919) *
                C30968 -
            (((C15597 + C15598) * C30662 + (C15599 + C15600) * C4742) * C18919 +
             ((C14164 + C14163) * C30662 + (C14162 + C14161) * C4742) *
                 C18918) *
                C30819) *
               C1075 +
           ((((C14890 + C14889) * C4742 + (C14888 + C14887) * C30662) * C18918 +
             ((C13226 * C1289 + C13222 * C1305 + C13227 * C6401 +
               C13223 * C6402) *
                  C4742 +
              (C13226 * C1306 + C13222 * C1316 + C13227 * C6403 +
               C13223 * C6404) *
                  C30662) *
                 C18919) *
                C30819 -
            (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
             ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) *
                 C18918) *
                C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                C4742 +
            (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                C30662) *
               C18919) *
              C30732 * C30714 * C108 -
          (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
           ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
              C30732 * C30714 * C109 +
          (((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
           ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
              C30732 * C30714 * C110 -
          (((C13947 + C13948) * C30662 + (C13949 + C13950) * C4742) * C18919 +
           ((C13274 + C13273) * C30662 + (C13272 + C13271) * C4742) * C18918) *
              C30732 * C30714 * C111 +
          (((C13278 + C13277) * C4742 + (C13276 + C13275) * C30662) * C18918 +
           ((C13226 * C488 + C13222 * C507 + C13227 * C930 + C13223 * C939) *
                C4742 +
            (C13226 * C506 + C13222 * C518 + C13227 * C940 + C13223 * C945) *
                C30662) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C13226 * C482 + C13222 * C495 + C13227 * C926 + C13223 * C931) *
                 C4742 +
             (C13226 * C494 + C13222 * C512 + C13227 * C932 + C13223 * C941) *
                 C30662) *
                C18919) *
               C30732 * C31035 -
           (((C13227 * C1301 + C13223 * C1314 + C13226 * C932 + C13222 * C941) *
                 C30662 +
             (C13227 * C1287 + C13223 * C1302 + C13226 * C926 + C13222 * C931) *
                 C4742) *
                C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C31023 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C288 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C31023 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C31035 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C289 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C31035 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C31023 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                 C4742 +
             (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                 C30662) *
                C18918 +
            ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
               C30732 * C1074 -
           (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
            ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                 C30662 +
             (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                 C4742) *
                C18918) *
               C30732 * C1075 +
           (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                 C4742 +
             (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                 C30662) *
                C18918 +
            ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
              C13223 * C1701) *
                 C4742 +
             (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
              C13223 * C1707) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          ((((C13460 + C13459) * C4742 + (C13458 + C13457) * C30662) * C18918 +
            ((C14161 + C14162) * C4742 + (C14163 + C14164) * C30662) * C18919) *
               C30732 * C1075 -
           (((C13651 + C13652) * C30662 + (C13653 + C13654) * C4742) * C18919 +
            ((C13266 + C13265) * C30662 + (C13264 + C13263) * C4742) * C18918) *
               C30732 * C1074 -
           (((C14887 + C14888) * C30662 + (C14889 + C14890) * C4742) * C18919 +
            ((C13464 + C13463) * C30662 + (C13462 + C13461) * C4742) * C18918) *
               C30732 * C30998) *
              C31019 +
          ((((C13270 + C13269) * C4742 + (C13268 + C13267) * C30662) * C18918 +
            ((C13659 + C13660) * C4742 + (C13661 + C13662) * C30662) * C18919) *
               C30732 * C1074 -
           (((C14165 + C14166) * C30662 + (C14167 + C14168) * C4742) * C18919 +
            ((C13468 + C13467) * C30662 + (C13466 + C13465) * C4742) * C18918) *
               C30732 * C1075 +
           (((C13472 + C13471) * C4742 + (C13470 + C13469) * C30662) * C18918 +
            ((C13226 * C1285 + C13222 * C1298 + C13227 * C1700 +
              C13223 * C1705) *
                 C4742 +
             (C13226 * C1297 + C13222 * C1312 + C13227 * C1706 +
              C13223 * C1709) *
                 C30662) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C293 + C13223 * C306) *
                C4742 +
            (C13226 * C125 + C13222 * C138 + C13227 * C305 + C13223 * C323) *
                C30662) *
               C18918 +
           ((C24763 + C24764) * C4742 + (C24765 + C24766) * C30662) * C18919) *
              C30732 * C1142 -
          (((C25236 + C25235) * C30662 + (C25234 + C25233) * C4742) * C18919 +
           ((C13227 * C308 + C13223 * C324 + C13226 * C305 + C13222 * C323) *
                C30662 +
            (C13227 * C294 + C13223 * C307 + C13226 * C293 + C13222 * C306) *
                C4742) *
               C18918) *
              C30732 * C1143 +
          (((C13226 * C294 + C13222 * C307 + C13227 * C1150 + C13223 * C1159) *
                C4742 +
            (C13226 * C308 + C13222 * C324 + C13227 * C1158 + C13223 * C1168) *
                C30662) *
               C18918 +
           ((C13226 * C1287 + C13222 * C1302 + C13227 * C1698 +
             C13223 * C1701) *
                C4742 +
            (C13226 * C1301 + C13222 * C1314 + C13227 * C1702 +
             C13223 * C1707) *
                C30662) *
               C18919) *
              C30732 * C1144 -
          (((C13227 * C5600 + C13223 * C5605 + C13226 * C1702 +
             C13222 * C1707) *
                C30662 +
            (C13227 * C5596 + C13223 * C5601 + C13226 * C1698 +
             C13222 * C1701) *
                C4742) *
               C18919 +
           ((C13227 * C1161 + C13223 * C1169 + C13226 * C1158 +
             C13222 * C1168) *
                C30662 +
            (C13227 * C1151 + C13223 * C1160 + C13226 * C1150 +
             C13222 * C1159) *
                C4742) *
               C18918) *
              C30732 * C1145 +
          (((C13226 * C1151 + C13222 * C1160 + C13227 * C5477 +
             C13223 * C5480) *
                C4742 +
            (C13226 * C1161 + C13222 * C1169 + C13227 * C5479 +
             C13223 * C5483) *
                C30662) *
               C18918 +
           ((C13226 * C5596 + C13222 * C5601 + C13227 * C5957 +
             C13223 * C5958) *
                C4742 +
            (C13226 * C5600 + C13222 * C5605 + C13227 * C5959 +
             C13223 * C5960) *
                C30662) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30773 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C30780 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C2880) *
                      C30691 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C30780 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30773 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C2880) *
                      C30700 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30773 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C30780 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C2880) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C30773 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C30780 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C2880) *
                      C30691 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C30780 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C30773 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C2880) *
                      C30700 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C30773 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C30780 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C2880) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C30773 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C30780 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30732 * C2880) *
                      C30691 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + C10678 * C8905) *
                       C30732 * C30780 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C30773 -
                   ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C2880) *
                      C30700 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C30773 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C30780 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C2880) *
                      C2883)) /
                    (p * q * std::sqrt(p + q));
    d2ee[51] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30773 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C30780 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C2880) *
                      C2620 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C30773 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30780 +
                   (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                      C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                         C4742 +
                     (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                      C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30968) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30773 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C30780 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30968 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C2880) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C30773 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30968 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30780 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C30897 * C1585) * C116 +
                     (C113 * C1586 + C30897 * C1587) * C104) *
                        C30911 * C30819 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30968) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30968 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C30773 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30968) *
                       C30780 +
                   ((((C113 * C294 + C30897 * C307) * C4742 +
                      (C113 * C308 + C30897 * C324) * C30662) *
                         C8903 +
                     (C9845 + C9846) * C8904 + C9851 * C8905) *
                        C30968 -
                    ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                     (C9846 + C9845) * C8903) *
                        C30819) *
                       C2880) *
                      C2620 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30968) *
                       C30773 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C30968 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C30780 +
                   (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
                     ((C113 * C6503 + C30897 * C6504) * C4742 +
                      (C113 * C6505 + C30897 * C6506) * C30662) *
                         C8905) *
                        C30819 -
                    ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                     (C361 * C30662 + C360 * C4742) * C8903) *
                        C30968) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[52] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C2512 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C30897 * C323) * C102 +
                        (C113 * C293 + C30897 * C306) * C114) *
                           C30911 * C30732 * C30777) *
                          C31041 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C30911 * C30732 * C30777 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C2512) *
                          C31034 +
                      ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C30911 * C30732 * C2512 -
                       (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                        C356 * C102 + C357 * C114) *
                           C30911 * C30732 * C30777) *
                          C31021 +
                      ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                        (C113 * C660 + C30897 * C661) * C116 +
                        (C113 * C662 + C30897 * C663) * C104) *
                           C30911 * C30732 * C30777 -
                       (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                        C170 * C102 + C171 * C114) *
                           C30911 * C30732 * C2512) *
                          C31002) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C31042 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C30897 * C323) * C102 +
                        (C113 * C293 + C30897 * C306) * C114) *
                           C30911 * C30732 * C31038 +
                       ((C113 * C294 + C30897 * C307) * C114 +
                        (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                        C361 * C103 + C362 * C116 + C363 * C104) *
                           C30911 * C30732 * C31028 -
                       (C1435 * C104 + C1436 * C116 + C1437 * C103 +
                        C1438 * C115 + (C113 * C1158 + C30897 * C1168) * C102 +
                        (C113 * C1150 + C30897 * C1159) * C114) *
                           C30911 * C30732 * C31008) *
                          C2620 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C30911 * C30732 * C31038 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C31042 -
                       (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                        C361 * C102 + C360 * C114) *
                           C30911 * C30732 * C31028 +
                       (C1438 * C114 + C1437 * C102 + C1436 * C115 +
                        C1435 * C103 + (C113 * C1422 + C30897 * C1423) * C116 +
                        (C113 * C1424 + C30897 * C1425) * C104) *
                           C30911 * C30732 * C31008) *
                          C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31036 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31025 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C2512 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C31025 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C31036 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C30777) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C31025 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C31036 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C2512 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C31036 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C31025 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C30897 * C2171) * C116 +
                     (C113 * C2172 + C30897 * C2173) * C104) *
                        C30911 * C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C2512 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C31041 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C2512) *
                      C31034 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C2512 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C31021 +
                  (((C4739 * C297 + C4735 * C313 + C4740 * C298 + C4736 * C316 +
                     C4741 * C1422 + C4737 * C1423) *
                        C4742 +
                    (C4739 * C314 + C4735 * C327 + C4740 * C315 + C4736 * C328 +
                     C4741 * C1424 + C4737 * C1425) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C2512) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C31042 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C31038 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C31028 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C31008) *
                      C2620 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C31038 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C31042 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C31028 +
                   ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                     C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                        C4742 +
                    (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                     C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                        C30662) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C2512 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C30777) *
                      C2620 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C2512 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                      C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                         C4742 +
                     (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                      C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                         C30662) *
                        C30911 * C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C2512 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C30777) *
                      C31041 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + C10678 * C8905) *
                       C30732 * C30777 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C2512) *
                      C31034 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C2512 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C30777) *
                      C31021 +
                  (((C364 * C4742 + C365 * C30662) * C8903 +
                    (C964 * C4742 + C963 * C30662) * C8904 +
                    ((C113 * C2170 + C30897 * C2171) * C4742 +
                     (C113 * C2172 + C30897 * C2173) * C30662) *
                        C8905) *
                       C30732 * C30777 -
                   ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C30732 * C2512) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C31042 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C31038 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30732 * C31028 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C30732 * C31008) *
                      C2620 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + C10678 * C8905) *
                       C30732 * C31038 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C31042 -
                   ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C31028 +
                   ((C1438 * C4742 + C1437 * C30662) * C8903 +
                    ((C113 * C1699 + C30897 * C1703) * C4742 +
                     (C113 * C1704 + C30897 * C1708) * C30662) *
                        C8904 +
                    ((C113 * C6401 + C30897 * C6402) * C4742 +
                     (C113 * C6403 + C30897 * C6404) * C30662) *
                        C8905) *
                       C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C31036 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C31025 +
                    (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) *
                        C31001) *
                       C2512 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C31025 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C31036 -
                    ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
                     C9822 * C8903) *
                        C31001) *
                       C30777) *
                      C2620 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C31025 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C31036 -
                    ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
                     C9157 * C8903) *
                        C31001) *
                       C2512 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C31036 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C31025 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C113 * C10673 + C30897 * C10674) * C4742 +
                      (C113 * C10675 + C30897 * C10676) * C30662) *
                         C8905) *
                        C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C2512 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C30777) *
                      C30691 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C2512 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30777) *
                      C30700 +
                  ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C2512 +
                   (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                      C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                         C4742 +
                     (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                      C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30968) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C2512 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C30777) *
                      C30691 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C2512 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30968 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30777) *
                      C30700 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30968 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C2512 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C30897 * C939) * C116 +
                     (C113 * C940 + C30897 * C945) * C104) *
                        C30911 * C30819 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30968) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30968 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C2512 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30968) *
                       C30777) *
                      C30691 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30968) *
                       C2512 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C30968 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C30777) *
                      C30700 +
                  ((((C168 * C4742 + C169 * C30662) * C8903 +
                     (C9145 + C9146) * C8904 + C9158 * C8905) *
                        C30968 -
                    ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                     (C9146 + C9145) * C8903) *
                        C30819) *
                       C2512 +
                   (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
                     ((C113 * C2404 + C30897 * C2409) * C4742 +
                      (C113 * C2410 + C30897 * C2413) * C30662) *
                         C8905) *
                        C30819 -
                    ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                     (C356 * C30662 + C357 * C4742) * C8903) *
                        C30968) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C31042 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C31038 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C31028 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C31008) *
                      C2620 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C31038 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C31042 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C31028 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C30897 * C1423) * C116 +
                    (C113 * C1424 + C30897 * C1425) * C104) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C2512 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C30777) *
                      C31041 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C30777 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C2512) *
                      C31034 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C2512 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C30777) *
                      C31021 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C30897 * C661) * C116 +
                    (C113 * C662 + C30897 * C663) * C104) *
                       C30911 * C30732 * C30777 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30732 * C2512) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C2512 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C31041 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C2512) *
                      C31034 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C2512 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C31021 +
                  (((C4739 * C297 + C4735 * C313 + C4740 * C298 + C4736 * C316 +
                     C4741 * C1422 + C4737 * C1423) *
                        C4742 +
                    (C4739 * C314 + C4735 * C327 + C4740 * C315 + C4736 * C328 +
                     C4741 * C1424 + C4737 * C1425) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C2512) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C31042 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C31038 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C31028 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C31008) *
                      C2620 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C31038 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C31042 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C31028 +
                   ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                     C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                        C4742 +
                    (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                     C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                        C30662) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C2512 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C30777) *
                      C31041 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + C10678 * C8905) *
                       C30732 * C30777 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C2512) *
                      C31034 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C2512 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C30777) *
                      C31021 +
                  (((C364 * C4742 + C365 * C30662) * C8903 +
                    (C964 * C4742 + C963 * C30662) * C8904 +
                    ((C113 * C2170 + C30897 * C2171) * C4742 +
                     (C113 * C2172 + C30897 * C2173) * C30662) *
                        C8905) *
                       C30732 * C30777 -
                   ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C30732 * C2512) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C31042 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C31038 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30732 * C31028 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C30732 * C31008) *
                      C2620 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + C10678 * C8905) *
                       C30732 * C31038 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C31042 -
                   ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C31028 +
                   ((C1438 * C4742 + C1437 * C30662) * C8903 +
                    ((C113 * C1699 + C30897 * C1703) * C4742 +
                     (C113 * C1704 + C30897 * C1708) * C30662) *
                        C8904 +
                    ((C113 * C6401 + C30897 * C6402) * C4742 +
                     (C113 * C6403 + C30897 * C6404) * C30662) *
                        C8905) *
                       C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30773 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C30780 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C2880) *
                      C30953 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C30773 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30780 +
                   (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                      C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                         C4742 +
                     (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                      C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C3274) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30773 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C30780 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C2880) *
                      C30953 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C30773 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30780 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C30897 * C1585) * C116 +
                     (C113 * C1586 + C30897 * C1587) * C104) *
                        C30911 * C30819 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C3274) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C3274 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C30773 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C3274) *
                       C30780 +
                   ((((C113 * C294 + C30897 * C307) * C4742 +
                      (C113 * C308 + C30897 * C324) * C30662) *
                         C8903 +
                     (C9845 + C9846) * C8904 + C9851 * C8905) *
                        C3274 -
                    ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                     (C9846 + C9845) * C8903) *
                        C30819) *
                       C2880) *
                      C30953 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C3274) *
                       C30773 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C3274 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C30780 +
                   (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
                     ((C113 * C6503 + C30897 * C6504) * C4742 +
                      (C113 * C6505 + C30897 * C6506) * C30662) *
                         C8905) *
                        C30819 -
                    ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                     (C361 * C30662 + C360 * C4742) * C8903) *
                        C3274) *
                       C2880) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30815 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30822 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C3782) *
              C30773 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C30822 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C30815 -
           ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 + C4736 * C1315 +
             C4739 * C1295 + C4735 * C1311) *
                C30662 +
            (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 + C4736 * C1303 +
             C4739 * C1284 + C4735 * C1296) *
                C4742) *
               C30911 * C3782) *
              C30780 +
          (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C30815 -
           ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
             C4739 * C1301 + C4735 * C1314) *
                C30662 +
            (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
             C4739 * C1287 + C4735 * C1302) *
                C4742) *
               C30911 * C30822 +
           ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 + C4736 * C5599 +
             C4741 * C5597 + C4737 * C5602) *
                C4742 +
            (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 + C4736 * C5604 +
             C4741 * C5603 + C4737 * C5606) *
                C30662) *
               C30911 * C3782) *
              C2880) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C30815 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C30822 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C3782) *
              C30773 +
          (((C113 * C926 + C30897 * C931) * C114 +
            (C113 * C932 + C30897 * C941) * C102 + C959 * C115 + C960 * C103 +
            C961 * C116 + C962 * C104) *
               C30911 * C30822 -
           (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
            (C113 * C305 + C30897 * C323) * C102 +
            (C113 * C293 + C30897 * C306) * C114) *
               C30911 * C30815 -
           (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
            (C113 * C1295 + C30897 * C1311) * C102 +
            (C113 * C1284 + C30897 * C1296) * C114) *
               C30911 * C3782) *
              C30780 +
          (((C113 * C294 + C30897 * C307) * C114 +
            (C113 * C308 + C30897 * C324) * C102 + C360 * C115 + C361 * C103 +
            C362 * C116 + C363 * C104) *
               C30911 * C30815 -
           (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
            (C113 * C1301 + C30897 * C1314) * C102 +
            (C113 * C1287 + C30897 * C1302) * C114) *
               C30911 * C30822 +
           ((C113 * C1288 + C30897 * C1303) * C114 +
            (C113 * C1304 + C30897 * C1315) * C102 +
            (C113 * C1289 + C30897 * C1305) * C115 +
            (C113 * C1306 + C30897 * C1316) * C103 +
            (C113 * C1290 + C30897 * C1307) * C116 +
            (C113 * C1308 + C30897 * C1317) * C104) *
               C30911 * C3782) *
              C2880) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C30815 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30822 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C3782) *
              C30773 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            C10900 * C8905) *
               C30822 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C30815 -
           ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
            C9822 * C8903) *
               C3782) *
              C30780 +
          ((((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            (C9845 + C9846) * C8904 + C9851 * C8905) *
               C30815 -
           ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
            (C9846 + C9845) * C8903) *
               C30822 +
           (C9851 * C8903 + (C9850 + C9849) * C8904 +
            ((C113 * C6245 + C30897 * C6249) * C4742 +
             (C113 * C6251 + C30897 * C6254) * C30662) *
                C8905) *
               C3782) *
              C2880) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C30897 * C124) * C114 +
                 (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                 C167 * C103 + C168 * C116 + C169 * C104) *
                    C30911 * C3274 -
                (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                 (C113 * C494 + C30897 * C512) * C102 +
                 (C113 * C482 + C30897 * C495) * C114) *
                    C30911 * C30819) *
                   C2512 +
               (((C113 * C926 + C30897 * C931) * C114 +
                 (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                 C960 * C103 + C961 * C116 + C962 * C104) *
                    C30911 * C30819 -
                (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                 (C113 * C305 + C30897 * C323) * C102 +
                 (C113 * C293 + C30897 * C306) * C114) *
                    C30911 * C3274) *
                   C30777) *
                  C31032 +
              (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                 C553 * C116 + C554 * C104) *
                    C30911 * C30819 -
                (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                 C167 * C102 + C166 * C114) *
                    C30911 * C3274) *
                   C2512 +
               ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                 C364 * C116 + C365 * C104) *
                    C30911 * C3274 -
                (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                 C960 * C102 + C959 * C114) *
                    C30911 * C30819) *
                   C30777) *
                  C31019 +
              (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                 C172 * C116 + C173 * C104) *
                    C30911 * C3274 -
                (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                 C545 * C102 + C546 * C114) *
                    C30911 * C30819) *
                   C2512 +
               ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                 (C113 * C930 + C30897 * C939) * C116 +
                 (C113 * C940 + C30897 * C945) * C104) *
                    C30911 * C30819 -
                (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                 C356 * C102 + C357 * C114) *
                    C30911 * C3274) *
                   C30777) *
                  C30992) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C3274 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C30819) *
                  C31042 +
              (((C113 * C926 + C30897 * C931) * C114 +
                (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                C960 * C103 + C961 * C116 + C962 * C104) *
                   C30911 * C30819 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C3274) *
                  C31038 +
              (((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C3274 -
               (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                (C113 * C1301 + C30897 * C1314) * C102 +
                (C113 * C1287 + C30897 * C1302) * C114) *
                   C30911 * C30819) *
                  C31028 +
              (((C113 * C1698 + C30897 * C1701) * C114 +
                (C113 * C1702 + C30897 * C1707) * C102 +
                (C113 * C1699 + C30897 * C1703) * C115 +
                (C113 * C1704 + C30897 * C1708) * C103 +
                (C113 * C1700 + C30897 * C1705) * C116 +
                (C113 * C1706 + C30897 * C1709) * C104) *
                   C30911 * C30819 -
               (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                (C113 * C1158 + C30897 * C1168) * C102 +
                (C113 * C1150 + C30897 * C1159) * C114) *
                   C30911 * C3274) *
                  C31008) *
             C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C31043 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C31040 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C31031 -
           (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
            (C113 * C2010 + C30897 * C2020) * C102 +
            (C113 * C2002 + C30897 * C2011) * C114) *
               C30911 * C31014) *
              C2512 +
          (((C113 * C926 + C30897 * C931) * C114 +
            (C113 * C932 + C30897 * C941) * C102 + C959 * C115 + C960 * C103 +
            C961 * C116 + C962 * C104) *
               C30911 * C31040 -
           (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
            (C113 * C305 + C30897 * C323) * C102 +
            (C113 * C293 + C30897 * C306) * C114) *
               C30911 * C31043 -
           (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
            (C113 * C1295 + C30897 * C1311) * C102 +
            (C113 * C1284 + C30897 * C1296) * C114) *
               C30911 * C31031 +
           ((C113 * C2402 + C30897 * C2405) * C114 +
            (C113 * C2406 + C30897 * C2411) * C102 +
            (C113 * C2403 + C30897 * C2407) * C115 +
            (C113 * C2408 + C30897 * C2412) * C103 +
            (C113 * C2404 + C30897 * C2409) * C116 +
            (C113 * C2410 + C30897 * C2413) * C104) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
              C4741 * C294 + C4737 * C307) *
                 C4742 +
             (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
              C4741 * C308 + C4737 * C324) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
              C4739 * C494 + C4735 * C512) *
                 C30662 +
             (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
              C4739 * C482 + C4735 * C495) *
                 C4742) *
                C30911 * C30819) *
               C2512 +
           (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
              C4741 * C1698 + C4737 * C1701) *
                 C4742 +
             (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
              C4741 * C1702 + C4737 * C1707) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
              C4739 * C305 + C4735 * C323) *
                 C30662 +
             (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
              C4739 * C293 + C4735 * C306) *
                 C4742) *
                C30911 * C3274) *
               C30777) *
              C31032 +
          ((((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
              C4741 * C1286 + C4737 * C1300) *
                 C4742 +
             (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
              C4741 * C1299 + C4737 * C1313) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
              C4739 * C127 + C4735 * C139) *
                 C30662 +
             (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
              C4739 * C118 + C4735 * C126) *
                 C4742) *
                C30911 * C3274) *
               C2512 +
           (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
              C4741 * C1149 + C4737 * C1157) *
                 C4742 +
             (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
              C4741 * C1156 + C4737 * C1167) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 + C4736 * C1313 +
              C4739 * C934 + C4735 * C942) *
                 C30662 +
             (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 + C4736 * C1300 +
              C4739 * C927 + C4735 * C933) *
                 C4742) *
                C30911 * C30819) *
               C30777) *
              C31019 +
          ((((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
              C4741 * C296 + C4737 * C311) *
                 C4742 +
             (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
              C4741 * C312 + C4737 * C326) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
              C4739 * C490 + C4735 * C510) *
                 C30662 +
             (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
              C4739 * C480 + C4735 * C491) *
                 C4742) *
                C30911 * C30819) *
               C2512 +
           (((C4739 * C928 + C4735 * C935 + C4740 * C1285 + C4736 * C1298 +
              C4741 * C1700 + C4737 * C1705) *
                 C4742 +
             (C4739 * C936 + C4735 * C943 + C4740 * C1297 + C4736 * C1312 +
              C4741 * C1706 + C4737 * C1709) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 + C4736 * C326 +
              C4739 * C301 + C4735 * C321) *
                 C30662 +
             (C4741 * C1148 + C4737 * C1155 + C4740 * C296 + C4736 * C311 +
              C4739 * C291 + C4735 * C302) *
                 C4742) *
                C30911 * C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C3274 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30819) *
              C31042 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C3274) *
              C31038 +
          (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C3274 -
           ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
             C4739 * C1301 + C4735 * C1314) *
                C30662 +
            (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
             C4739 * C1287 + C4735 * C1302) *
                C4742) *
               C30911 * C30819) *
              C31028 +
          (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 + C4736 * C5601 +
             C4741 * C5957 + C4737 * C5958) *
                C4742 +
            (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 + C4736 * C5605 +
             C4741 * C5959 + C4737 * C5960) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 + C4736 * C1169 +
             C4739 * C1158 + C4735 * C1168) *
                C30662 +
            (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 + C4736 * C1160 +
             C4739 * C1150 + C4735 * C1159) *
                C4742) *
               C30911 * C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C31043 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C31040 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31031 -
           ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 + C4736 * C2411 +
             C4739 * C2010 + C4735 * C2020) *
                C30662 +
            (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 + C4736 * C2405 +
             C4739 * C2002 + C4735 * C2011) *
                C4742) *
               C30911 * C31014) *
              C2512 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C31040 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C31043 -
           ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 + C4736 * C1315 +
             C4739 * C1295 + C4735 * C1311) *
                C30662 +
            (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 + C4736 * C1303 +
             C4739 * C1284 + C4735 * C1296) *
                C4742) *
               C30911 * C31031 +
           ((C4739 * C2402 + C4735 * C2405 + C4740 * C6243 + C4736 * C6247 +
             C4741 * C6605 + C4737 * C6606) *
                C4742 +
            (C4739 * C2406 + C4735 * C2411 + C4740 * C6246 + C4736 * C6252 +
             C4741 * C6607 + C4737 * C6608) *
                C30662) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C4742 +
              (C113 * C125 + C30897 * C138) * C30662) *
                 C8903 +
             (C9159 + C9160) * C8904 + C9165 * C8905) *
                C3274 -
            (C10510 * C8905 + (C9162 + C9161) * C8904 +
             (C9160 + C9159) * C8903) *
                C30819) *
               C2512 +
           (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
             C10900 * C8905) *
                C30819 -
            (C9822 * C8905 + (C9533 + C9532) * C8904 +
             ((C113 * C305 + C30897 * C323) * C30662 +
              (C113 * C293 + C30897 * C306) * C4742) *
                 C8903) *
                C3274) *
               C30777) *
              C31032 +
          ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
             C10789 * C8905) *
                C30819 -
            (C9157 * C8905 + (C9140 + C9139) * C8904 +
             (C167 * C30662 + C166 * C4742) * C8903) *
                C3274) *
               C2512 +
           (((C359 * C4742 + C358 * C30662) * C8903 + (C9520 + C9521) * C8904 +
             C10678 * C8905) *
                C3274 -
            ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
             (C9521 + C9520) * C8903) *
                C30819) *
               C30777) *
              C31019 +
          ((((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
             C9158 * C8905) *
                C3274 -
            ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
             (C9146 + C9145) * C8903) *
                C30819) *
               C2512 +
           (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
             ((C113 * C2404 + C30897 * C2409) * C4742 +
              (C113 * C2410 + C30897 * C2413) * C30662) *
                 C8905) *
                C30819 -
            ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
             (C356 * C30662 + C357 * C4742) * C8903) *
                C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C3274 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30819) *
              C31042 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            C10900 * C8905) *
               C30819 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C3274) *
              C31038 +
          ((((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            (C9845 + C9846) * C8904 + C9851 * C8905) *
               C3274 -
           ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
            (C9846 + C9845) * C8903) *
               C30819) *
              C31028 +
          (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
            ((C113 * C6605 + C30897 * C6606) * C4742 +
             (C113 * C6607 + C30897 * C6608) * C30662) *
                C8905) *
               C30819 -
           ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
            ((C113 * C1158 + C30897 * C1168) * C30662 +
             (C113 * C1150 + C30897 * C1159) * C4742) *
                C8903) *
               C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C31043 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C31040 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C31031 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31014) *
              C2512 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            C10900 * C8905) *
               C31040 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C31043 -
           ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
            C9822 * C8903) *
               C31031 +
           (C10900 * C8903 + (C10908 + C10907) * C8904 +
            ((C113 * C10895 + C30897 * C10896) * C4742 +
             (C113 * C10897 + C30897 * C10898) * C30662) *
                C8905) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[58] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C3782) *
                       C2512 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C3782) *
                       C30777) *
                      C30953 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C3782) *
                       C2512 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                      C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                         C4742 +
                     (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                      C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                         C30662) *
                        C30911 * C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30815 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30822 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C3782) *
                       C2512 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30822 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30815 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C3782) *
                       C30777) *
                      C30953 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30822 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30815 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C3782) *
                       C2512 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30815 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30822 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C30897 * C2171) * C116 +
                     (C113 * C2172 + C30897 * C2173) * C104) *
                        C30911 * C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30815 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30822 +
                    (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) *
                        C3782) *
                       C2512 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30822 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30815 -
                    ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
                     C9822 * C8903) *
                        C3782) *
                       C30777) *
                      C30953 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30822 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30815 -
                    ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
                     C9157 * C8903) *
                        C3782) *
                       C2512 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C30815 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30822 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C113 * C10673 + C30897 * C10674) * C4742 +
                      (C113 * C10675 + C30897 * C10676) * C30662) *
                         C8905) *
                        C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C30819) *
                      C31042 +
                  (((C113 * C926 + C30897 * C931) * C114 +
                    (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C30911 * C30819 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C3274) *
                      C31038 +
                  (((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C3274 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C30897 * C1314) * C102 +
                    (C113 * C1287 + C30897 * C1302) * C114) *
                       C30911 * C30819) *
                      C31028 +
                  (((C113 * C1698 + C30897 * C1701) * C114 +
                    (C113 * C1702 + C30897 * C1707) * C102 +
                    (C113 * C1699 + C30897 * C1703) * C115 +
                    (C113 * C1704 + C30897 * C1708) * C103 +
                    (C113 * C1700 + C30897 * C1705) * C116 +
                    (C113 * C1706 + C30897 * C1709) * C104) *
                       C30911 * C30819 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C3274) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C2512 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C30777) *
                      C31032 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C2512 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30777) *
                      C31019 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C2512 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C30897 * C939) * C116 +
                     (C113 * C940 + C30897 * C945) * C104) *
                        C30911 * C30819 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C3274) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C2512 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C30777) *
                      C31032 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C2512 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30777) *
                      C31019 +
                  ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C2512 +
                   (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                      C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                         C4742 +
                     (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                      C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C3274) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C3274 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C30819) *
                      C31042 +
                  (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                     C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                        C4742 +
                    (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                     C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C3274) *
                      C31038 +
                  (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C3274 -
                   ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                     C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                        C30662 +
                    (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                     C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                        C4742) *
                       C30911 * C30819) *
                      C31028 +
                  (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                     C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                        C4742 +
                    (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                     C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C3274) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C3274 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C2512 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C3274) *
                       C30777) *
                      C31032 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C3274) *
                       C2512 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C3274 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C30777) *
                      C31019 +
                  ((((C168 * C4742 + C169 * C30662) * C8903 +
                     (C9145 + C9146) * C8904 + C9158 * C8905) *
                        C3274 -
                    ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                     (C9146 + C9145) * C8903) *
                        C30819) *
                       C2512 +
                   (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
                     ((C113 * C2404 + C30897 * C2409) * C4742 +
                      (C113 * C2410 + C30897 * C2413) * C30662) *
                         C8905) *
                        C30819 -
                    ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                     (C356 * C30662 + C357 * C4742) * C8903) *
                        C3274) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C3274 -
                   (C10510 * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C30819) *
                      C31042 +
                  (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                    C10900 * C8905) *
                       C30819 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C3274) *
                      C31038 +
                  ((((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C3274 -
                   ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                    (C9846 + C9845) * C8903) *
                       C30819) *
                      C31028 +
                  (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
                    ((C113 * C6605 + C30897 * C6606) * C4742 +
                     (C113 * C6607 + C30897 * C6608) * C30662) *
                        C8905) *
                       C30819 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C3274) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C30967 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C30897 * C323) * C102 +
                        (C113 * C293 + C30897 * C306) * C114) *
                           C30911 * C30732 * C30777) *
                          C656 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C30911 * C30732 * C30777 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C30967) *
                          C657 +
                      ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C30911 * C30732 * C30967 -
                       (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                        C356 * C102 + C357 * C114) *
                           C30911 * C30732 * C30777) *
                          C658 +
                      ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                        (C113 * C660 + C30897 * C661) * C116 +
                        (C113 * C662 + C30897 * C663) * C104) *
                           C30911 * C30732 * C30777 -
                       (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                        C170 * C102 + C171 * C114) *
                           C30911 * C30732 * C30967) *
                          C31002) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C1416 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C30897 * C323) * C102 +
                        (C113 * C293 + C30897 * C306) * C114) *
                           C30911 * C30732 * C1417 +
                       ((C113 * C294 + C30897 * C307) * C114 +
                        (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                        C361 * C103 + C362 * C116 + C363 * C104) *
                           C30911 * C30732 * C1418 -
                       (C1435 * C104 + C1436 * C116 + C1437 * C103 +
                        C1438 * C115 + (C113 * C1158 + C30897 * C1168) * C102 +
                        (C113 * C1150 + C30897 * C1159) * C114) *
                           C30911 * C30732 * C31008) *
                          C30953 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C30911 * C30732 * C1417 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C1416 -
                       (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                        C361 * C102 + C360 * C114) *
                           C30911 * C30732 * C1418 +
                       (C1438 * C114 + C1437 * C102 + C1436 * C115 +
                        C1435 * C103 + (C113 * C1422 + C30897 * C1423) * C116 +
                        (C113 * C1424 + C30897 * C1425) * C104) *
                           C30911 * C30732 * C31008) *
                          C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C1821 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C30967 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C1821 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C1820 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C30777) *
                      C30953 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C1821 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C1820 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C30967 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C1820 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C1821 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C30897 * C2171) * C116 +
                     (C113 * C2172 + C30897 * C2173) * C104) *
                        C30911 * C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30967 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C656 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30967) *
                      C657 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30967 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C658 +
                  (((C4739 * C297 + C4735 * C313 + C4740 * C298 + C4736 * C316 +
                     C4741 * C1422 + C4737 * C1423) *
                        C4742 +
                    (C4739 * C314 + C4735 * C327 + C4740 * C315 + C4736 * C328 +
                     C4741 * C1424 + C4737 * C1425) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30967) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1416 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1417 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1418 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C31008) *
                      C30953 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C1417 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C1416 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C1418 +
                   ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                     C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                        C4742 +
                    (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                     C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                        C30662) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C30967 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C30777) *
                      C30953 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C30967 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                      C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                         C4742 +
                     (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                      C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                         C30662) *
                        C30911 * C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C30967 -
                   (((C113 * C1295 + C30897 * C1311) * C30662 +
                     (C113 * C1284 + C30897 * C1296) * C4742) *
                        C8905 +
                    ((C113 * C932 + C30897 * C941) * C30662 +
                     (C113 * C926 + C30897 * C931) * C4742) *
                        C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C30777) *
                      C656 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C959 * C4742 + C960 * C30662) * C8904 +
                    (C2186 * C4742 + C2185 * C30662) * C8905) *
                       C30732 * C30777 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C30967) *
                      C657 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C30967 -
                   ((C2183 * C30662 + C2184 * C4742) * C8905 +
                    (C962 * C30662 + C961 * C4742) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C30777) *
                      C658 +
                  (((C364 * C4742 + C365 * C30662) * C8903 +
                    (C964 * C4742 + C963 * C30662) * C8904 +
                    ((C113 * C2170 + C30897 * C2171) * C4742 +
                     (C113 * C2172 + C30897 * C2173) * C30662) *
                        C8905) *
                       C30732 * C30777 -
                   ((C555 * C30662 + C556 * C4742) * C8905 +
                    (C554 * C30662 + C553 * C4742) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C30732 * C30967) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C1416 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C1417 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30732 * C1418 -
                   (((C113 * C5598 + C30897 * C5604) * C30662 +
                     (C113 * C5595 + C30897 * C5599) * C4742) *
                        C8905 +
                    ((C113 * C1702 + C30897 * C1707) * C30662 +
                     (C113 * C1698 + C30897 * C1701) * C4742) *
                        C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C30732 * C31008) *
                      C30953 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                       C30732 * C1417 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C1416 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C1418 +
                   ((C1438 * C4742 + C1437 * C30662) * C8903 +
                    ((C113 * C1699 + C30897 * C1703) * C4742 +
                     (C113 * C1704 + C30897 * C1708) * C30662) *
                        C8904 +
                    ((C113 * C6401 + C30897 * C6402) * C4742 +
                     (C113 * C6403 + C30897 * C6404) * C30662) *
                        C8905) *
                       C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C1820 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C1821 +
                    (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) *
                        C31001) *
                       C30967 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     (C9843 + C9844) * C8905) *
                        C1821 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C1820 -
                    (((C113 * C6250 + C30897 * C6253) * C30662 +
                      (C113 * C6244 + C30897 * C6248) * C4742) *
                         C8905 +
                     (C9844 + C9843) * C8904 + C9822 * C8903) *
                        C31001) *
                       C30777) *
                      C30953 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     (C9143 + C9144) * C8905) *
                        C1821 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C1820 -
                    (((C113 * C2015 + C30897 * C2022) * C30662 +
                      (C113 * C2004 + C30897 * C2014) * C4742) *
                         C8905 +
                     (C9144 + C9143) * C8904 + C9157 * C8903) *
                        C31001) *
                       C30967 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C1820 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C1821 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C113 * C10673 + C30897 * C10674) * C4742 +
                      (C113 * C10675 + C30897 * C10676) * C30662) *
                         C8905) *
                        C31001) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C30897 * C124) * C114 +
                 (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                 C167 * C103 + C168 * C116 + C169 * C104) *
                    C30911 * C30968 -
                (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                 (C113 * C494 + C30897 * C512) * C102 +
                 (C113 * C482 + C30897 * C495) * C114) *
                    C30911 * C30819) *
                   C30967 +
               (((C113 * C926 + C30897 * C931) * C114 +
                 (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                 C960 * C103 + C961 * C116 + C962 * C104) *
                    C30911 * C30819 -
                (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                 (C113 * C305 + C30897 * C323) * C102 +
                 (C113 * C293 + C30897 * C306) * C114) *
                    C30911 * C30968) *
                   C30777) *
                  C288 +
              (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                 C553 * C116 + C554 * C104) *
                    C30911 * C30819 -
                (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                 C167 * C102 + C166 * C114) *
                    C30911 * C30968) *
                   C30967 +
               ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                 C364 * C116 + C365 * C104) *
                    C30911 * C30968 -
                (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                 C960 * C102 + C959 * C114) *
                    C30911 * C30819) *
                   C30777) *
                  C289 +
              (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                 C172 * C116 + C173 * C104) *
                    C30911 * C30968 -
                (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                 C545 * C102 + C546 * C114) *
                    C30911 * C30819) *
                   C30967 +
               ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                 (C113 * C930 + C30897 * C939) * C116 +
                 (C113 * C940 + C30897 * C945) * C104) *
                    C30911 * C30819 -
                (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                 C356 * C102 + C357 * C114) *
                    C30911 * C30968) *
                   C30777) *
                  C30992) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C30968 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C30819) *
                  C1416 +
              (((C113 * C926 + C30897 * C931) * C114 +
                (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                C960 * C103 + C961 * C116 + C962 * C104) *
                   C30911 * C30819 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C30968) *
                  C1417 +
              (((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C30968 -
               (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                (C113 * C1301 + C30897 * C1314) * C102 +
                (C113 * C1287 + C30897 * C1302) * C114) *
                   C30911 * C30819) *
                  C1418 +
              (((C113 * C1698 + C30897 * C1701) * C114 +
                (C113 * C1702 + C30897 * C1707) * C102 +
                (C113 * C1699 + C30897 * C1703) * C115 +
                (C113 * C1704 + C30897 * C1708) * C103 +
                (C113 * C1700 + C30897 * C1705) * C116 +
                (C113 * C1706 + C30897 * C1709) * C104) *
                   C30911 * C30819 -
               (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                (C113 * C1158 + C30897 * C1168) * C102 +
                (C113 * C1150 + C30897 * C1159) * C114) *
                   C30911 * C30968) *
                  C31008) *
             C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C2284 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C2285 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C2286 -
           (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
            (C113 * C2010 + C30897 * C2020) * C102 +
            (C113 * C2002 + C30897 * C2011) * C114) *
               C30911 * C31014) *
              C30967 +
          (((C113 * C926 + C30897 * C931) * C114 +
            (C113 * C932 + C30897 * C941) * C102 + C959 * C115 + C960 * C103 +
            C961 * C116 + C962 * C104) *
               C30911 * C2285 -
           (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
            (C113 * C305 + C30897 * C323) * C102 +
            (C113 * C293 + C30897 * C306) * C114) *
               C30911 * C2284 -
           (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
            (C113 * C1295 + C30897 * C1311) * C102 +
            (C113 * C1284 + C30897 * C1296) * C114) *
               C30911 * C2286 +
           ((C113 * C2402 + C30897 * C2405) * C114 +
            (C113 * C2406 + C30897 * C2411) * C102 +
            (C113 * C2403 + C30897 * C2407) * C115 +
            (C113 * C2408 + C30897 * C2412) * C103 +
            (C113 * C2404 + C30897 * C2409) * C116 +
            (C113 * C2410 + C30897 * C2413) * C104) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
              C4741 * C294 + C4737 * C307) *
                 C4742 +
             (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
              C4741 * C308 + C4737 * C324) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
              C4739 * C494 + C4735 * C512) *
                 C30662 +
             (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
              C4739 * C482 + C4735 * C495) *
                 C4742) *
                C30911 * C30819) *
               C30967 +
           (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
              C4741 * C1698 + C4737 * C1701) *
                 C4742 +
             (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
              C4741 * C1702 + C4737 * C1707) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
              C4739 * C305 + C4735 * C323) *
                 C30662 +
             (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
              C4739 * C293 + C4735 * C306) *
                 C4742) *
                C30911 * C30968) *
               C30777) *
              C288 +
          ((((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
              C4741 * C1286 + C4737 * C1300) *
                 C4742 +
             (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
              C4741 * C1299 + C4737 * C1313) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
              C4739 * C127 + C4735 * C139) *
                 C30662 +
             (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
              C4739 * C118 + C4735 * C126) *
                 C4742) *
                C30911 * C30968) *
               C30967 +
           (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
              C4741 * C1149 + C4737 * C1157) *
                 C4742 +
             (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
              C4741 * C1156 + C4737 * C1167) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 + C4736 * C1313 +
              C4739 * C934 + C4735 * C942) *
                 C30662 +
             (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 + C4736 * C1300 +
              C4739 * C927 + C4735 * C933) *
                 C4742) *
                C30911 * C30819) *
               C30777) *
              C289 +
          ((((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
              C4741 * C296 + C4737 * C311) *
                 C4742 +
             (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
              C4741 * C312 + C4737 * C326) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
              C4739 * C490 + C4735 * C510) *
                 C30662 +
             (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
              C4739 * C480 + C4735 * C491) *
                 C4742) *
                C30911 * C30819) *
               C30967 +
           (((C4739 * C928 + C4735 * C935 + C4740 * C1285 + C4736 * C1298 +
              C4741 * C1700 + C4737 * C1705) *
                 C4742 +
             (C4739 * C936 + C4735 * C943 + C4740 * C1297 + C4736 * C1312 +
              C4741 * C1706 + C4737 * C1709) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 + C4736 * C326 +
              C4739 * C301 + C4735 * C321) *
                 C30662 +
             (C4741 * C1148 + C4737 * C1155 + C4740 * C296 + C4736 * C311 +
              C4739 * C291 + C4735 * C302) *
                 C4742) *
                C30911 * C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30968 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30819) *
              C1416 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C30968) *
              C1417 +
          (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C30968 -
           ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
             C4739 * C1301 + C4735 * C1314) *
                C30662 +
            (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
             C4739 * C1287 + C4735 * C1302) *
                C4742) *
               C30911 * C30819) *
              C1418 +
          (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 + C4736 * C5601 +
             C4741 * C5957 + C4737 * C5958) *
                C4742 +
            (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 + C4736 * C5605 +
             C4741 * C5959 + C4737 * C5960) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 + C4736 * C1169 +
             C4739 * C1158 + C4735 * C1168) *
                C30662 +
            (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 + C4736 * C1160 +
             C4739 * C1150 + C4735 * C1159) *
                C4742) *
               C30911 * C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C2284 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C2285 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C2286 -
           ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 + C4736 * C2411 +
             C4739 * C2010 + C4735 * C2020) *
                C30662 +
            (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 + C4736 * C2405 +
             C4739 * C2002 + C4735 * C2011) *
                C4742) *
               C30911 * C31014) *
              C30967 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C2285 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C2284 -
           ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 + C4736 * C1315 +
             C4739 * C1295 + C4735 * C1311) *
                C30662 +
            (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 + C4736 * C1303 +
             C4739 * C1284 + C4735 * C1296) *
                C4742) *
               C30911 * C2286 +
           ((C4739 * C2402 + C4735 * C2405 + C4740 * C6243 + C4736 * C6247 +
             C4741 * C6605 + C4737 * C6606) *
                C4742 +
            (C4739 * C2406 + C4735 * C2411 + C4740 * C6246 + C4736 * C6252 +
             C4741 * C6607 + C4737 * C6608) *
                C30662) *
               C30911 * C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C4742 +
              (C113 * C125 + C30897 * C138) * C30662) *
                 C8903 +
             (C9159 + C9160) * C8904 + C9165 * C8905) *
                C30968 -
            ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
             (C9160 + C9159) * C8903) *
                C30819) *
               C30967 +
           (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
             ((C113 * C2402 + C30897 * C2405) * C4742 +
              (C113 * C2406 + C30897 * C2411) * C30662) *
                 C8905) *
                C30819 -
            ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
             ((C113 * C305 + C30897 * C323) * C30662 +
              (C113 * C293 + C30897 * C306) * C4742) *
                 C8903) *
                C30968) *
               C30777) *
              C288 +
          ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
             (C9143 + C9144) * C8905) *
                C30819 -
            (C9157 * C8905 + (C9140 + C9139) * C8904 +
             (C167 * C30662 + C166 * C4742) * C8903) *
                C30968) *
               C30967 +
           (((C359 * C4742 + C358 * C30662) * C8903 + (C9520 + C9521) * C8904 +
             (C9522 + C9523) * C8905) *
                C30968 -
            (((C113 * C2408 + C30897 * C2412) * C30662 +
              (C113 * C2403 + C30897 * C2407) * C4742) *
                 C8905 +
             (C9523 + C9522) * C8904 + (C9521 + C9520) * C8903) *
                C30819) *
               C30777) *
              C289 +
          ((((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
             C9158 * C8905) *
                C30968 -
            ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
             (C9146 + C9145) * C8903) *
                C30819) *
               C30967 +
           (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
             ((C113 * C2404 + C30897 * C2409) * C4742 +
              (C113 * C2410 + C30897 * C2413) * C30662) *
                 C8905) *
                C30819 -
            ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
             (C356 * C30662 + C357 * C4742) * C8903) *
                C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C30968 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30819) *
              C1416 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            (C9843 + C9844) * C8905) *
               C30819 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C30968) *
              C1417 +
          ((((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            (C9845 + C9846) * C8904 + C9851 * C8905) *
               C30968 -
           ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
            (C9846 + C9845) * C8903) *
               C30819) *
              C1418 +
          (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
            ((C113 * C6605 + C30897 * C6606) * C4742 +
             (C113 * C6607 + C30897 * C6608) * C30662) *
                C8905) *
               C30819 -
           ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
            ((C113 * C1158 + C30897 * C1168) * C30662 +
             (C113 * C1150 + C30897 * C1159) * C4742) *
                C8903) *
               C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C2284 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C2285 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C2286 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31014) *
              C30967 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            C10900 * C8905) *
               C2285 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C2284 -
           ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
            C9822 * C8903) *
               C2286 +
           (C10900 * C8903 + (C10908 + C10907) * C8904 +
            ((C113 * C10895 + C30897 * C10896) * C4742 +
             (C113 * C10897 + C30897 * C10898) * C30662) *
                C8905) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C30897 * C124) * C114 +
               (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
               C167 * C103 + C168 * C116 + C169 * C104) *
                  C30911 * C30732 * C30714 * C108 -
              (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
               C167 * C102 + C166 * C114) *
                  C30911 * C30732 * C30714 * C109 +
              (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
               C172 * C116 + C173 * C104) *
                  C30911 * C30732 * C30714 * C110 -
              (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
               C170 * C102 + C171 * C114) *
                  C30911 * C30732 * C30714 * C111 +
              (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
               (C113 * C123 + C30897 * C136) * C116 +
               (C113 * C137 + C30897 * C144) * C104) *
                  C30911 * C30732 * C30714 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C30732 * C31035 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C30732 * C31023 +
               ((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C30732 * C30998) *
                  C288 +
              ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                C364 * C116 + C365 * C104) *
                   C30911 * C30732 * C31023 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C30732 * C31035 -
               (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                C361 * C102 + C360 * C114) *
                   C30911 * C30732 * C30998) *
                  C289 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C30732 * C31035 -
               ((C113 * C317 + C30897 * C329) * C104 +
                (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                C364 * C115 + C356 * C102 + C357 * C114) *
                   C30911 * C30732 * C31023 +
               (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                (C113 * C300 + C30897 * C319) * C116 +
                (C113 * C320 + C30897 * C330) * C104) *
                   C30911 * C30732 * C30998) *
                  C30992) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C31036 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C31025 +
               ((C113 * C483 + C30897 * C496) * C114 +
                (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                C550 * C103 + C551 * C116 + C552 * C104) *
                   C30911 * C31001) *
                  C30714 * C288 +
              ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                C553 * C116 + C554 * C104) *
                   C30911 * C31025 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C31036 -
               (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                C550 * C102 + C549 * C114) *
                   C30911 * C31001) *
                  C30714 * C289 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C31036 -
               ((C113 * C506 + C30897 * C518) * C104 +
                (C113 * C488 + C30897 * C507) * C116 + C554 * C103 +
                C553 * C115 + C545 * C102 + C546 * C114) *
                   C30911 * C31025 +
               (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                (C113 * C489 + C30897 * C508) * C116 +
                (C113 * C509 + C30897 * C519) * C104) *
                   C30911 * C31001) *
                  C30714 * C30992) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C30732 * C1074 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C30732 * C1075 +
               ((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C30732 * C30998) *
                  C31032 +
              ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                C364 * C116 + C365 * C104) *
                   C30911 * C30732 * C1075 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C30732 * C1074 -
               (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                C361 * C102 + C360 * C114) *
                   C30911 * C30732 * C30998) *
                  C31019 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C30732 * C1074 -
               (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                C356 * C102 + C357 * C114) *
                   C30911 * C30732 * C1075 +
               (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                (C113 * C300 + C30897 * C319) * C116 +
                (C113 * C320 + C30897 * C330) * C104) *
                   C30911 * C30732 * C30998) *
                  C30992) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C30897 * C124) * C114 +
               (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
               C167 * C103 + C168 * C116 + C169 * C104) *
                  C30911 * C30732 * C1142 -
              (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
               (C113 * C305 + C30897 * C323) * C102 +
               (C113 * C293 + C30897 * C306) * C114) *
                  C30911 * C30732 * C1143 +
              ((C113 * C294 + C30897 * C307) * C114 +
               (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
               C361 * C103 + C362 * C116 + C363 * C104) *
                  C30911 * C30732 * C1144 -
              ((C113 * C1154 + C30897 * C1166) * C104 +
               (C113 * C1148 + C30897 * C1155) * C116 +
               (C113 * C1156 + C30897 * C1167) * C103 +
               (C113 * C1149 + C30897 * C1157) * C115 +
               (C113 * C1158 + C30897 * C1168) * C102 +
               (C113 * C1150 + C30897 * C1159) * C114) *
                  C30911 * C30732 * C1145 +
              ((C113 * C1151 + C30897 * C1160) * C114 +
               (C113 * C1161 + C30897 * C1169) * C102 +
               (C113 * C1152 + C30897 * C1162) * C115 +
               (C113 * C1163 + C30897 * C1170) * C103 +
               (C113 * C1153 + C30897 * C1164) * C116 +
               (C113 * C1165 + C30897 * C1171) * C104) *
                  C30911 * C30732 * C1146) *
             C30686 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C31036 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C31025 +
               ((C113 * C483 + C30897 * C496) * C114 +
                (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                C550 * C103 + C551 * C116 + C552 * C104) *
                   C30911 * C31001) *
                  C1074 +
              (((C113 * C926 + C30897 * C931) * C114 +
                (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                C960 * C103 + C961 * C116 + C962 * C104) *
                   C30911 * C31025 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C31036 -
               ((C113 * C1291 + C30897 * C1309) * C104 +
                (C113 * C1282 + C30897 * C1292) * C116 +
                (C113 * C1293 + C30897 * C1310) * C103 +
                (C113 * C1283 + C30897 * C1294) * C115 +
                (C113 * C1295 + C30897 * C1311) * C102 +
                (C113 * C1284 + C30897 * C1296) * C114) *
                   C30911 * C31001) *
                  C1075 +
              (((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C31036 -
               ((C113 * C1297 + C30897 * C1312) * C104 +
                (C113 * C1285 + C30897 * C1298) * C116 +
                (C113 * C1299 + C30897 * C1313) * C103 +
                (C113 * C1286 + C30897 * C1300) * C115 +
                (C113 * C1301 + C30897 * C1314) * C102 +
                (C113 * C1287 + C30897 * C1302) * C114) *
                   C30911 * C31025 +
               ((C113 * C1288 + C30897 * C1303) * C114 +
                (C113 * C1304 + C30897 * C1315) * C102 +
                (C113 * C1289 + C30897 * C1305) * C115 +
                (C113 * C1306 + C30897 * C1316) * C103 +
                (C113 * C1290 + C30897 * C1307) * C116 +
                (C113 * C1308 + C30897 * C1317) * C104) *
                   C30911 * C31001) *
                  C30998) *
             C30686 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C1820 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C1821 +
               ((C113 * C483 + C30897 * C496) * C114 +
                (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                C550 * C103 + C551 * C116 + C552 * C104) *
                   C30911 * C31001) *
                  C30714 * C31032 +
              ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                C553 * C116 + C554 * C104) *
                   C30911 * C1821 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C1820 -
               (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                C550 * C102 + C549 * C114) *
                   C30911 * C31001) *
                  C30714 * C31019 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C1820 -
               (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                C545 * C102 + C546 * C114) *
                   C30911 * C1821 +
               (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                (C113 * C489 + C30897 * C508) * C116 +
                (C113 * C509 + C30897 * C519) * C104) *
                   C30911 * C31001) *
                  C30714 * C30992) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C1820 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C1821 +
               ((C113 * C483 + C30897 * C496) * C114 +
                (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                C550 * C103 + C551 * C116 + C552 * C104) *
                   C30911 * C31001) *
                  C31035 +
              (((C113 * C926 + C30897 * C931) * C114 +
                (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                C960 * C103 + C961 * C116 + C962 * C104) *
                   C30911 * C1821 -
               (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                (C113 * C305 + C30897 * C323) * C102 +
                (C113 * C293 + C30897 * C306) * C114) *
                   C30911 * C1820 -
               ((C113 * C1291 + C30897 * C1309) * C104 +
                (C113 * C1282 + C30897 * C1292) * C116 +
                (C113 * C1293 + C30897 * C1310) * C103 +
                (C113 * C1283 + C30897 * C1294) * C115 +
                (C113 * C1295 + C30897 * C1311) * C102 +
                (C113 * C1284 + C30897 * C1296) * C114) *
                   C30911 * C31001) *
                  C31023 +
              (((C113 * C294 + C30897 * C307) * C114 +
                (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                C361 * C103 + C362 * C116 + C363 * C104) *
                   C30911 * C1820 -
               (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                (C113 * C1301 + C30897 * C1314) * C102 +
                (C113 * C1287 + C30897 * C1302) * C114) *
                   C30911 * C1821 +
               ((C113 * C1288 + C30897 * C1303) * C114 +
                (C113 * C1304 + C30897 * C1315) * C102 +
                (C113 * C1289 + C30897 * C1305) * C115 +
                (C113 * C1306 + C30897 * C1316) * C103 +
                (C113 * C1290 + C30897 * C1307) * C116 +
                (C113 * C1308 + C30897 * C1317) * C104) *
                   C30911 * C31001) *
                  C30998) *
             C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C117 + C30897 * C124) * C114 +
           (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
           C168 * C116 + C169 * C104) *
              C30911 * C1995 -
          (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
           (C113 * C494 + C30897 * C512) * C102 +
           (C113 * C482 + C30897 * C495) * C114) *
              C30911 * C1996 +
          ((C113 * C483 + C30897 * C496) * C114 +
           (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
           C551 * C116 + C552 * C104) *
              C30911 * C1997 -
          ((C113 * C2006 + C30897 * C2018) * C104 +
           (C113 * C2000 + C30897 * C2007) * C116 +
           (C113 * C2008 + C30897 * C2019) * C103 +
           (C113 * C2001 + C30897 * C2009) * C115 +
           (C113 * C2010 + C30897 * C2020) * C102 +
           (C113 * C2002 + C30897 * C2011) * C114) *
              C30911 * C1998 +
          ((C113 * C2003 + C30897 * C2012) * C114 +
           (C113 * C2013 + C30897 * C2021) * C102 +
           (C113 * C2004 + C30897 * C2014) * C115 +
           (C113 * C2015 + C30897 * C2022) * C103 +
           (C113 * C2005 + C30897 * C2016) * C116 +
           (C113 * C2017 + C30897 * C2023) * C104) *
              C30911 * C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
            C4741 * C294 + C4737 * C307) *
               C4742 +
           (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
            C4741 * C308 + C4737 * C324) *
               C30662) *
              C30911 * C30732 * C30714 * C108 -
          ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
            C4739 * C127 + C4735 * C139) *
               C30662 +
           (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
            C4739 * C118 + C4735 * C126) *
               C4742) *
              C30911 * C30732 * C30714 * C109 +
          ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
            C4741 * C296 + C4737 * C311) *
               C4742 +
           (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
            C4741 * C312 + C4737 * C326) *
               C30662) *
              C30911 * C30732 * C30714 * C110 -
          ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
            C4739 * C130 + C4735 * C141) *
               C30662 +
           (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
            C4739 * C120 + C4735 * C131) *
               C4742) *
              C30911 * C30732 * C30714 * C111 +
          ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
            C4741 * C300 + C4737 * C319) *
               C4742 +
           (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
            C4741 * C320 + C4737 * C330) *
               C30662) *
              C30911 * C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30732 * C31035 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C30732 * C31023 +
           ((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C30732 * C30998) *
              C288 +
          (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
             C4741 * C1149 + C4737 * C1157) *
                C4742 +
            (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
             C4741 * C1156 + C4737 * C1167) *
                C30662) *
               C30911 * C30732 * C31023 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C30732 * C31035 -
           ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 + C4736 * C1167 +
             C4739 * C310 + C4735 * C325) *
                C30662 +
            (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 + C4736 * C1157 +
             C4739 * C295 + C4735 * C309) *
                C4742) *
               C30911 * C30732 * C30998) *
              C289 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C30732 * C31035 -
           ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 + C4736 * C326 +
             C4739 * C301 + C4735 * C321) *
                C30662 +
            (C4741 * C1148 + C4737 * C1155 + C4740 * C296 + C4736 * C311 +
             C4739 * C291 + C4735 * C302) *
                C4742) *
               C30911 * C30732 * C31023 +
           ((C4739 * C296 + C4735 * C311 + C4740 * C1148 + C4736 * C1155 +
             C4741 * C1153 + C4737 * C1164) *
                C4742 +
            (C4739 * C312 + C4735 * C326 + C4740 * C1154 + C4736 * C1166 +
             C4741 * C1165 + C4737 * C1171) *
                C30662) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C31036 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C31025 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31001) *
              C30714 * C288 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C31025 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C31036 -
           ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 + C4736 * C1310 +
             C4739 * C499 + C4735 * C514) *
                C30662 +
            (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 + C4736 * C1294 +
             C4739 * C484 + C4735 * C498) *
                C4742) *
               C30911 * C31001) *
              C30714 * C289 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C31036 -
           ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
             C4739 * C490 + C4735 * C510) *
                C30662 +
            (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
             C4739 * C480 + C4735 * C491) *
                C4742) *
               C30911 * C31025 +
           ((C4739 * C485 + C4735 * C500 + C4740 * C1282 + C4736 * C1292 +
             C4741 * C1290 + C4737 * C1307) *
                C4742 +
            (C4739 * C501 + C4735 * C515 + C4740 * C1291 + C4736 * C1309 +
             C4741 * C1308 + C4737 * C1317) *
                C30662) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30732 * C1074 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C30732 * C1075 +
           ((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C30732 * C30998) *
              C31032 +
          (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
             C4741 * C1149 + C4737 * C1157) *
                C4742 +
            (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
             C4741 * C1156 + C4737 * C1167) *
                C30662) *
               C30911 * C30732 * C1075 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C30732 * C1074 -
           ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 + C4736 * C1167 +
             C4739 * C310 + C4735 * C325) *
                C30662 +
            (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 + C4736 * C1157 +
             C4739 * C295 + C4735 * C309) *
                C4742) *
               C30911 * C30732 * C30998) *
              C31019 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C30732 * C1074 -
           ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 + C4736 * C326 +
             C4739 * C301 + C4735 * C321) *
                C30662 +
            (C4741 * C1148 + C4737 * C1155 + C4740 * C296 + C4736 * C311 +
             C4739 * C291 + C4735 * C302) *
                C4742) *
               C30911 * C30732 * C1075 +
           ((C4739 * C296 + C4735 * C311 + C4740 * C1148 + C4736 * C1155 +
             C4741 * C1153 + C4737 * C1164) *
                C4742 +
            (C4739 * C312 + C4735 * C326 + C4740 * C1154 + C4736 * C1166 +
             C4741 * C1165 + C4737 * C1171) *
                C30662) *
               C30911 * C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
            C4741 * C294 + C4737 * C307) *
               C4742 +
           (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
            C4741 * C308 + C4737 * C324) *
               C30662) *
              C30911 * C30732 * C1142 -
          ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
            C4739 * C305 + C4735 * C323) *
               C30662 +
           (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
            C4739 * C293 + C4735 * C306) *
               C4742) *
              C30911 * C30732 * C1143 +
          ((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
            C4741 * C1151 + C4737 * C1160) *
               C4742 +
           (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
            C4741 * C1161 + C4737 * C1169) *
               C30662) *
              C30911 * C30732 * C1144 -
          ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 + C4736 * C1169 +
            C4739 * C1158 + C4735 * C1168) *
               C30662 +
           (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 + C4736 * C1160 +
            C4739 * C1150 + C4735 * C1159) *
               C4742) *
              C30911 * C30732 * C1145 +
          ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 + C4736 * C5480 +
            C4741 * C5478 + C4737 * C5481) *
               C4742 +
           (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 + C4736 * C5483 +
            C4741 * C5482 + C4737 * C5484) *
               C30662) *
              C30911 * C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C31036 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C31025 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31001) *
              C1074 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C31025 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C31036 -
           ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 + C4736 * C1315 +
             C4739 * C1295 + C4735 * C1311) *
                C30662 +
            (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 + C4736 * C1303 +
             C4739 * C1284 + C4735 * C1296) *
                C4742) *
               C30911 * C31001) *
              C1075 +
          (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C31036 -
           ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
             C4739 * C1301 + C4735 * C1314) *
                C30662 +
            (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
             C4739 * C1287 + C4735 * C1302) *
                C4742) *
               C30911 * C31025 +
           ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 + C4736 * C5599 +
             C4741 * C5597 + C4737 * C5602) *
                C4742 +
            (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 + C4736 * C5604 +
             C4741 * C5603 + C4737 * C5606) *
                C30662) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C1820 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C1821 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31001) *
              C30714 * C31032 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C1821 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C1820 -
           ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 + C4736 * C1310 +
             C4739 * C499 + C4735 * C514) *
                C30662 +
            (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 + C4736 * C1294 +
             C4739 * C484 + C4735 * C498) *
                C4742) *
               C30911 * C31001) *
              C30714 * C31019 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C1820 -
           ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
             C4739 * C490 + C4735 * C510) *
                C30662 +
            (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
             C4739 * C480 + C4735 * C491) *
                C4742) *
               C30911 * C1821 +
           ((C4739 * C485 + C4735 * C500 + C4740 * C1282 + C4736 * C1292 +
             C4741 * C1290 + C4737 * C1307) *
                C4742 +
            (C4739 * C501 + C4735 * C515 + C4740 * C1291 + C4736 * C1309 +
             C4741 * C1308 + C4737 * C1317) *
                C30662) *
               C30911 * C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C1820 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C1821 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31001) *
              C31035 +
          (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
             C4741 * C1698 + C4737 * C1701) *
                C4742 +
            (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
             C4741 * C1702 + C4737 * C1707) *
                C30662) *
               C30911 * C1821 -
           ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
             C4739 * C305 + C4735 * C323) *
                C30662 +
            (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
             C4739 * C293 + C4735 * C306) *
                C4742) *
               C30911 * C1820 -
           ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 + C4736 * C1315 +
             C4739 * C1295 + C4735 * C1311) *
                C30662 +
            (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 + C4736 * C1303 +
             C4739 * C1284 + C4735 * C1296) *
                C4742) *
               C30911 * C31001) *
              C31023 +
          (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
             C4741 * C1151 + C4737 * C1160) *
                C4742 +
            (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
             C4741 * C1161 + C4737 * C1169) *
                C30662) *
               C30911 * C1820 -
           ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
             C4739 * C1301 + C4735 * C1314) *
                C30662 +
            (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
             C4739 * C1287 + C4735 * C1302) *
                C4742) *
               C30911 * C1821 +
           ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 + C4736 * C5599 +
             C4741 * C5597 + C4737 * C5602) *
                C4742 +
            (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 + C4736 * C5604 +
             C4741 * C5603 + C4737 * C5606) *
                C30662) *
               C30911 * C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
            C4741 * C294 + C4737 * C307) *
               C4742 +
           (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
            C4741 * C308 + C4737 * C324) *
               C30662) *
              C30911 * C1995 -
          ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
            C4739 * C494 + C4735 * C512) *
               C30662 +
           (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
            C4739 * C482 + C4735 * C495) *
               C4742) *
              C30911 * C1996 +
          ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
            C4741 * C1288 + C4737 * C1303) *
               C4742 +
           (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
            C4741 * C1304 + C4737 * C1315) *
               C30662) *
              C30911 * C1997 -
          ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 + C4736 * C2411 +
            C4739 * C2010 + C4735 * C2020) *
               C30662 +
           (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 + C4736 * C2405 +
            C4739 * C2002 + C4735 * C2011) *
               C4742) *
              C30911 * C1998 +
          ((C4739 * C2003 + C4735 * C2012 + C4740 * C6244 + C4736 * C6248 +
            C4741 * C6245 + C4737 * C6249) *
               C4742 +
           (C4739 * C2013 + C4735 * C2021 + C4740 * C6250 + C4736 * C6253 +
            C4741 * C6251 + C4737 * C6254) *
               C30662) *
              C30911 * C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C4742 +
            (C113 * C125 + C30897 * C138) * C30662) *
               C8903 +
           ((C113 * C482 + C30897 * C495) * C4742 +
            (C113 * C494 + C30897 * C512) * C30662) *
               C8904 +
           ((C113 * C483 + C30897 * C496) * C4742 +
            (C113 * C497 + C30897 * C513) * C30662) *
               C8905) *
              C30732 * C30714 * C108 -
          ((C550 * C30662 + C549 * C4742) * C8905 +
           (C547 * C30662 + C548 * C4742) * C8904 +
           (C167 * C30662 + C166 * C4742) * C8903) *
              C30732 * C30714 * C109 +
          ((C168 * C4742 + C169 * C30662) * C8903 +
           (C546 * C4742 + C545 * C30662) * C8904 +
           (C551 * C4742 + C552 * C30662) * C8905) *
              C30732 * C30714 * C110 -
          ((C555 * C30662 + C556 * C4742) * C8905 +
           (C554 * C30662 + C553 * C4742) * C8904 +
           (C170 * C30662 + C171 * C4742) * C8903) *
              C30732 * C30714 * C111 +
          ((C172 * C4742 + C173 * C30662) * C8903 +
           (C780 * C4742 + C779 * C30662) * C8904 +
           ((C113 * C489 + C30897 * C508) * C4742 +
            (C113 * C509 + C30897 * C519) * C30662) *
               C8905) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            ((C113 * C482 + C30897 * C495) * C4742 +
             (C113 * C494 + C30897 * C512) * C30662) *
                C8904 +
            ((C113 * C483 + C30897 * C496) * C4742 +
             (C113 * C497 + C30897 * C513) * C30662) *
                C8905) *
               C30732 * C31035 -
           (((C113 * C1295 + C30897 * C1311) * C30662 +
             (C113 * C1284 + C30897 * C1296) * C4742) *
                C8905 +
            ((C113 * C932 + C30897 * C941) * C30662 +
             (C113 * C926 + C30897 * C931) * C4742) *
                C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C30732 * C31023 +
           (((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            ((C113 * C1287 + C30897 * C1302) * C4742 +
             (C113 * C1301 + C30897 * C1314) * C30662) *
                C8904 +
            ((C113 * C1288 + C30897 * C1303) * C4742 +
             (C113 * C1304 + C30897 * C1315) * C30662) *
                C8905) *
               C30732 * C30998) *
              C288 +
          (((C359 * C4742 + C358 * C30662) * C8903 +
            (C959 * C4742 + C960 * C30662) * C8904 +
            (C2186 * C4742 + C2185 * C30662) * C8905) *
               C30732 * C31023 -
           ((C550 * C30662 + C549 * C4742) * C8905 +
            (C547 * C30662 + C548 * C4742) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C30732 * C31035 -
           (((C113 * C1306 + C30897 * C1316) * C30662 +
             (C113 * C1289 + C30897 * C1305) * C4742) *
                C8905 +
            (C1599 * C30662 + C1600 * C4742) * C8904 +
            (C361 * C30662 + C360 * C4742) * C8903) *
               C30732 * C30998) *
              C289 +
          (((C168 * C4742 + C169 * C30662) * C8903 +
            (C546 * C4742 + C545 * C30662) * C8904 +
            (C551 * C4742 + C552 * C30662) * C8905) *
               C30732 * C31035 -
           ((C2183 * C30662 + C2184 * C4742) * C8905 +
            (C962 * C30662 + C961 * C4742) * C8904 +
            (C356 * C30662 + C357 * C4742) * C8903) *
               C30732 * C31023 +
           ((C362 * C4742 + C363 * C30662) * C8903 +
            (C1598 * C4742 + C1597 * C30662) * C8904 +
            ((C113 * C1290 + C30897 * C1307) * C4742 +
             (C113 * C1308 + C30897 * C1317) * C30662) *
                C8905) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C31036 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C31025 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 +
            ((C113 * C2003 + C30897 * C2012) * C4742 +
             (C113 * C2013 + C30897 * C2021) * C30662) *
                C8905) *
               C31001) *
              C30714 * C288 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            (C9143 + C9144) * C8905) *
               C31025 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C31036 -
           (((C113 * C2015 + C30897 * C2022) * C30662 +
             (C113 * C2004 + C30897 * C2014) * C4742) *
                C8905 +
            (C9144 + C9143) * C8904 + C9157 * C8903) *
               C31001) *
              C30714 * C289 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C31036 -
           ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
            (C9146 + C9145) * C8903) *
               C31025 +
           (C9158 * C8903 + (C9150 + C9149) * C8904 +
            ((C113 * C2005 + C30897 * C2016) * C4742 +
             (C113 * C2017 + C30897 * C2023) * C30662) *
                C8905) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C30732 * C1074 -
           ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C30732 * C1075 +
           (((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            ((C113 * C1287 + C30897 * C1302) * C4742 +
             (C113 * C1301 + C30897 * C1314) * C30662) *
                C8904 +
            ((C113 * C1288 + C30897 * C1303) * C4742 +
             (C113 * C1304 + C30897 * C1315) * C30662) *
                C8905) *
               C30732 * C30998) *
              C31032 +
          (((C359 * C4742 + C358 * C30662) * C8903 + (C9520 + C9521) * C8904 +
            (C9522 + C9523) * C8905) *
               C30732 * C1075 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C30732 * C1074 -
           (((C113 * C1306 + C30897 * C1316) * C30662 +
             (C113 * C1289 + C30897 * C1305) * C4742) *
                C8905 +
            (C1599 * C30662 + C1600 * C4742) * C8904 +
            (C361 * C30662 + C360 * C4742) * C8903) *
               C30732 * C30998) *
              C31019 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C30732 * C1074 -
           ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
            (C356 * C30662 + C357 * C4742) * C8903) *
               C30732 * C1075 +
           ((C362 * C4742 + C363 * C30662) * C8903 +
            (C1598 * C4742 + C1597 * C30662) * C8904 +
            ((C113 * C1290 + C30897 * C1307) * C4742 +
             (C113 * C1308 + C30897 * C1317) * C30662) *
                C8905) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C4742 +
            (C113 * C125 + C30897 * C138) * C30662) *
               C8903 +
           (C9159 + C9160) * C8904 + C9165 * C8905) *
              C30732 * C1142 -
          ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
           ((C113 * C305 + C30897 * C323) * C30662 +
            (C113 * C293 + C30897 * C306) * C4742) *
               C8903) *
              C30732 * C1143 +
          (((C113 * C294 + C30897 * C307) * C4742 +
            (C113 * C308 + C30897 * C324) * C30662) *
               C8903 +
           ((C113 * C1287 + C30897 * C1302) * C4742 +
            (C113 * C1301 + C30897 * C1314) * C30662) *
               C8904 +
           ((C113 * C1288 + C30897 * C1303) * C4742 +
            (C113 * C1304 + C30897 * C1315) * C30662) *
               C8905) *
              C30732 * C1144 -
          (((C113 * C5598 + C30897 * C5604) * C30662 +
            (C113 * C5595 + C30897 * C5599) * C4742) *
               C8905 +
           ((C113 * C1702 + C30897 * C1707) * C30662 +
            (C113 * C1698 + C30897 * C1701) * C4742) *
               C8904 +
           ((C113 * C1158 + C30897 * C1168) * C30662 +
            (C113 * C1150 + C30897 * C1159) * C4742) *
               C8903) *
              C30732 * C1145 +
          (((C113 * C1151 + C30897 * C1160) * C4742 +
            (C113 * C1161 + C30897 * C1169) * C30662) *
               C8903 +
           ((C113 * C5596 + C30897 * C5601) * C4742 +
            (C113 * C5600 + C30897 * C5605) * C30662) *
               C8904 +
           ((C113 * C5597 + C30897 * C5602) * C4742 +
            (C113 * C5603 + C30897 * C5606) * C30662) *
               C8905) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C31036 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C31025 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 +
            ((C113 * C2003 + C30897 * C2012) * C4742 +
             (C113 * C2013 + C30897 * C2021) * C30662) *
                C8905) *
               C31001) *
              C1074 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            (C9843 + C9844) * C8905) *
               C31025 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C31036 -
           (((C113 * C6250 + C30897 * C6253) * C30662 +
             (C113 * C6244 + C30897 * C6248) * C4742) *
                C8905 +
            (C9844 + C9843) * C8904 + C9822 * C8903) *
               C31001) *
              C1075 +
          ((((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            (C9845 + C9846) * C8904 + C9851 * C8905) *
               C31036 -
           ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
            (C9846 + C9845) * C8903) *
               C31025 +
           (C9851 * C8903 + (C9850 + C9849) * C8904 +
            ((C113 * C6245 + C30897 * C6249) * C4742 +
             (C113 * C6251 + C30897 * C6254) * C30662) *
                C8905) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C1820 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C1821 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 +
            ((C113 * C2003 + C30897 * C2012) * C4742 +
             (C113 * C2013 + C30897 * C2021) * C30662) *
                C8905) *
               C31001) *
              C30714 * C31032 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            (C9143 + C9144) * C8905) *
               C1821 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C1820 -
           (((C113 * C2015 + C30897 * C2022) * C30662 +
             (C113 * C2004 + C30897 * C2014) * C4742) *
                C8905 +
            (C9144 + C9143) * C8904 + C9157 * C8903) *
               C31001) *
              C30714 * C31019 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C1820 -
           ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
            (C9146 + C9145) * C8903) *
               C1821 +
           (C9158 * C8903 + (C9150 + C9149) * C8904 +
            ((C113 * C2005 + C30897 * C2016) * C4742 +
             (C113 * C2017 + C30897 * C2023) * C30662) *
                C8905) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C1820 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C1821 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 +
            ((C113 * C2003 + C30897 * C2012) * C4742 +
             (C113 * C2013 + C30897 * C2021) * C30662) *
                C8905) *
               C31001) *
              C31035 +
          (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
            (C9843 + C9844) * C8905) *
               C1821 -
           (C9822 * C8905 + (C9533 + C9532) * C8904 +
            ((C113 * C305 + C30897 * C323) * C30662 +
             (C113 * C293 + C30897 * C306) * C4742) *
                C8903) *
               C1820 -
           (((C113 * C6250 + C30897 * C6253) * C30662 +
             (C113 * C6244 + C30897 * C6248) * C4742) *
                C8905 +
            (C9844 + C9843) * C8904 + C9822 * C8903) *
               C31001) *
              C31023 +
          ((((C113 * C294 + C30897 * C307) * C4742 +
             (C113 * C308 + C30897 * C324) * C30662) *
                C8903 +
            (C9845 + C9846) * C8904 + C9851 * C8905) *
               C1820 -
           ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
            (C9846 + C9845) * C8903) *
               C1821 +
           (C9851 * C8903 + (C9850 + C9849) * C8904 +
            ((C113 * C6245 + C30897 * C6249) * C4742 +
             (C113 * C6251 + C30897 * C6254) * C30662) *
                C8905) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C4742 +
            (C113 * C125 + C30897 * C138) * C30662) *
               C8903 +
           (C9159 + C9160) * C8904 + C9165 * C8905) *
              C1995 -
          (C10510 * C8905 + (C9162 + C9161) * C8904 + (C9160 + C9159) * C8903) *
              C1996 +
          (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C1997 -
          ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
           C10510 * C8903) *
              C1998 +
          (C10527 * C8903 + (C10526 + C10525) * C8904 +
           ((C113 * C10502 + C30897 * C10505) * C4742 +
            (C113 * C10506 + C30897 * C10508) * C30662) *
               C8905) *
              C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C30968 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C30819) *
                  C30714 * C656 +
              ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                C553 * C116 + C554 * C104) *
                   C30911 * C30819 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C30968) *
                  C30714 * C657 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C30968 -
               (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                C545 * C102 + C546 * C114) *
                   C30911 * C30819) *
                  C30714 * C658 +
              ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                (C113 * C770 + C30897 * C771) * C116 +
                (C113 * C772 + C30897 * C773) * C104) *
                   C30911 * C30819 -
               (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                C170 * C102 + C171 * C114) *
                   C30911 * C30968) *
                  C30714 * C31002) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C30897 * C124) * C114 +
                 (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                 C167 * C103 + C168 * C116 + C169 * C104) *
                    C30911 * C30968 -
                (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                 (C113 * C494 + C30897 * C512) * C102 +
                 (C113 * C482 + C30897 * C495) * C114) *
                    C30911 * C30819) *
                   C1074 +
               (((C113 * C926 + C30897 * C931) * C114 +
                 (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                 C960 * C103 + C961 * C116 + C962 * C104) *
                    C30911 * C30819 -
                (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                 (C113 * C305 + C30897 * C323) * C102 +
                 (C113 * C293 + C30897 * C306) * C114) *
                    C30911 * C30968) *
                   C1075 +
               (((C113 * C294 + C30897 * C307) * C114 +
                 (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                 C361 * C103 + C362 * C116 + C363 * C104) *
                    C30911 * C30968 -
                (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                 (C113 * C1301 + C30897 * C1314) * C102 +
                 (C113 * C1287 + C30897 * C1302) * C114) *
                    C30911 * C30819) *
                   C30998) *
                  C30953 +
              (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                 C553 * C116 + C554 * C104) *
                    C30911 * C30819 -
                (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                 C167 * C102 + C166 * C114) *
                    C30911 * C30968) *
                   C1074 +
               ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                 C364 * C116 + C365 * C104) *
                    C30911 * C30968 -
                (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                 C960 * C102 + C959 * C114) *
                    C30911 * C30819) *
                   C1075 +
               ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                 (C113 * C1584 + C30897 * C1585) * C116 +
                 (C113 * C1586 + C30897 * C1587) * C104) *
                    C30911 * C30819 -
                (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                 C361 * C102 + C360 * C114) *
                    C30911 * C30968) *
                   C30998) *
                  C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C2284 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C2285 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C2286 -
           (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
            (C113 * C2010 + C30897 * C2020) * C102 +
            (C113 * C2002 + C30897 * C2011) * C114) *
               C30911 * C31014) *
              C30714 * C30953 +
          ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
            C553 * C116 + C554 * C104) *
               C30911 * C2285 -
           (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
            C167 * C102 + C166 * C114) *
               C30911 * C2284 -
           (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
            C550 * C102 + C549 * C114) *
               C30911 * C2286 +
           (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
            (C113 * C2288 + C30897 * C2289) * C116 +
            (C113 * C2290 + C30897 * C2291) * C104) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30968 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30819) *
              C30714 * C656 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C30968) *
              C30714 * C657 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C30968 -
           ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
             C4739 * C490 + C4735 * C510) *
                C30662 +
            (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
             C4739 * C480 + C4735 * C491) *
                C4742) *
               C30911 * C30819) *
              C30714 * C658 +
          (((C4739 * C486 + C4735 * C502 + C4740 * C929 + C4736 * C938 +
             C4741 * C1584 + C4737 * C1585) *
                C4742 +
            (C4739 * C503 + C4735 * C516 + C4740 * C937 + C4736 * C944 +
             C4741 * C1586 + C4737 * C1587) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
             C4739 * C130 + C4735 * C141) *
                C30662 +
            (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
             C4739 * C120 + C4735 * C131) *
                C4742) *
               C30911 * C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
              C4741 * C294 + C4737 * C307) *
                 C4742 +
             (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
              C4741 * C308 + C4737 * C324) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
              C4739 * C494 + C4735 * C512) *
                 C30662 +
             (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
              C4739 * C482 + C4735 * C495) *
                 C4742) *
                C30911 * C30819) *
               C1074 +
           (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
              C4741 * C1698 + C4737 * C1701) *
                 C4742 +
             (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
              C4741 * C1702 + C4737 * C1707) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
              C4739 * C305 + C4735 * C323) *
                 C30662 +
             (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
              C4739 * C293 + C4735 * C306) *
                 C4742) *
                C30911 * C30968) *
               C1075 +
           (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
              C4741 * C1151 + C4737 * C1160) *
                 C4742 +
             (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
              C4741 * C1161 + C4737 * C1169) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
              C4739 * C1301 + C4735 * C1314) *
                 C30662 +
             (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
              C4739 * C1287 + C4735 * C1302) *
                 C4742) *
                C30911 * C30819) *
               C30998) *
              C30953 +
          ((((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
              C4741 * C1286 + C4737 * C1300) *
                 C4742 +
             (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
              C4741 * C1299 + C4737 * C1313) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
              C4739 * C127 + C4735 * C139) *
                 C30662 +
             (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
              C4739 * C118 + C4735 * C126) *
                 C4742) *
                C30911 * C30968) *
               C1074 +
           (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
              C4741 * C1149 + C4737 * C1157) *
                 C4742 +
             (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
              C4741 * C1156 + C4737 * C1167) *
                 C30662) *
                C30911 * C30968 -
            ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 + C4736 * C1313 +
              C4739 * C934 + C4735 * C942) *
                 C30662 +
             (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 + C4736 * C1300 +
              C4739 * C927 + C4735 * C933) *
                 C4742) *
                C30911 * C30819) *
               C1075 +
           (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 + C4736 * C1703 +
              C4741 * C5855 + C4737 * C5856) *
                 C4742 +
             (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 + C4736 * C1708 +
              C4741 * C5857 + C4737 * C5858) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 + C4736 * C1167 +
              C4739 * C310 + C4735 * C325) *
                 C30662 +
             (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 + C4736 * C1157 +
              C4739 * C295 + C4735 * C309) *
                 C4742) *
                C30911 * C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C2284 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C2285 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C2286 -
           ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 + C4736 * C2411 +
             C4739 * C2010 + C4735 * C2020) *
                C30662 +
            (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 + C4736 * C2405 +
             C4739 * C2002 + C4735 * C2011) *
                C4742) *
               C30911 * C31014) *
              C30714 * C30953 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C2285 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C2284 -
           ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 + C4736 * C1310 +
             C4739 * C499 + C4735 * C514) *
                C30662 +
            (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 + C4736 * C1294 +
             C4739 * C484 + C4735 * C498) *
                C4742) *
               C30911 * C2286 +
           ((C4739 * C2001 + C4735 * C2009 + C4740 * C2403 + C4736 * C2407 +
             C4741 * C6503 + C4737 * C6504) *
                C4742 +
            (C4739 * C2008 + C4735 * C2019 + C4740 * C2408 + C4736 * C2412 +
             C4741 * C6505 + C4737 * C6506) *
                C30662) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C30968 -
           ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30819) *
              C30714 * C656 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            (C9143 + C9144) * C8905) *
               C30819 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C30968) *
              C30714 * C657 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C30968 -
           ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
            (C9146 + C9145) * C8903) *
               C30819) *
              C30714 * C658 +
          (((C9362 + C9363) * C8903 + (C9364 + C9365) * C8904 +
            ((C113 * C2288 + C30897 * C2289) * C4742 +
             (C113 * C2290 + C30897 * C2291) * C30662) *
                C8905) *
               C30819 -
           ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
            (C170 * C30662 + C171 * C4742) * C8903) *
               C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C4742 +
              (C113 * C125 + C30897 * C138) * C30662) *
                 C8903 +
             (C9159 + C9160) * C8904 + C9165 * C8905) *
                C30968 -
            ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
             (C9160 + C9159) * C8903) *
                C30819) *
               C1074 +
           (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
             (C9843 + C9844) * C8905) *
                C30819 -
            (C9822 * C8905 + (C9533 + C9532) * C8904 +
             ((C113 * C305 + C30897 * C323) * C30662 +
              (C113 * C293 + C30897 * C306) * C4742) *
                 C8903) *
                C30968) *
               C1075 +
           ((((C113 * C294 + C30897 * C307) * C4742 +
              (C113 * C308 + C30897 * C324) * C30662) *
                 C8903 +
             (C9845 + C9846) * C8904 + C9851 * C8905) *
                C30968 -
            ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
             (C9846 + C9845) * C8903) *
                C30819) *
               C30998) *
              C30953 +
          ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
             (C9143 + C9144) * C8905) *
                C30819 -
            (C9157 * C8905 + (C9140 + C9139) * C8904 +
             (C167 * C30662 + C166 * C4742) * C8903) *
                C30968) *
               C1074 +
           (((C359 * C4742 + C358 * C30662) * C8903 + (C9520 + C9521) * C8904 +
             (C9522 + C9523) * C8905) *
                C30968 -
            (((C113 * C2408 + C30897 * C2412) * C30662 +
              (C113 * C2403 + C30897 * C2407) * C4742) *
                 C8905 +
             (C9523 + C9522) * C8904 + (C9521 + C9520) * C8903) *
                C30819) *
               C1075 +
           (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
             ((C113 * C6503 + C30897 * C6504) * C4742 +
              (C113 * C6505 + C30897 * C6506) * C30662) *
                 C8905) *
                C30819 -
            ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
             (C361 * C30662 + C360 * C4742) * C8903) *
                C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C2284 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C2285 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C2286 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31014) *
              C30714 * C30953 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            C10789 * C8905) *
               C2285 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C2284 -
           ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
            C9157 * C8903) *
               C2286 +
           (C10789 * C8903 + (C10797 + C10796) * C8904 +
            ((C113 * C10784 + C30897 * C10785) * C4742 +
             (C113 * C10786 + C30897 * C10787) * C30662) *
                C8905) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C30897 * C124) * C114 +
                   (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C30911 * C30732 * C30714 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C30911 * C30732 * C30714 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C30911 * C30732 * C30714 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C30911 * C30732 * C30714 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C30897 * C136) * C116 +
                   (C113 * C137 + C30897 * C144) * C104) *
                      C30911 * C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C31035 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C31023 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C30998) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C31023 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C31035 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C30998) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C31035 -
                   ((C113 * C317 + C30897 * C329) * C104 +
                    (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C31023 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1075 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C30897 * C124) * C114 +
                   (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C30911 * C30732 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C30897 * C323) * C102 +
                   (C113 * C293 + C30897 * C306) * C114) *
                      C30911 * C30732 * C1143 +
                  ((C113 * C294 + C30897 * C307) * C114 +
                   (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C30911 * C30732 * C1144 -
                  ((C113 * C1154 + C30897 * C1166) * C104 +
                   (C113 * C1148 + C30897 * C1155) * C116 +
                   (C113 * C1156 + C30897 * C1167) * C103 +
                   (C113 * C1149 + C30897 * C1157) * C115 +
                   (C113 * C1158 + C30897 * C1168) * C102 +
                   (C113 * C1150 + C30897 * C1159) * C114) *
                      C30911 * C30732 * C1145 +
                  ((C113 * C1151 + C30897 * C1160) * C114 +
                   (C113 * C1161 + C30897 * C1169) * C102 +
                   (C113 * C1152 + C30897 * C1162) * C115 +
                   (C113 * C1163 + C30897 * C1170) * C103 +
                   (C113 * C1153 + C30897 * C1164) * C116 +
                   (C113 * C1165 + C30897 * C1171) * C104) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C1821 +
                   ((C113 * C483 + C30897 * C496) * C114 +
                    (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C30911 * C31001) *
                      C30714 * C31032 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C30911 * C1821 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C1820 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C30911 * C31001) *
                      C30714 * C31019 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C1820 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C30911 * C1821 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C30897 * C508) * C116 +
                    (C113 * C509 + C30897 * C519) * C104) *
                       C30911 * C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C1820 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C1821 +
                   ((C113 * C483 + C30897 * C496) * C114 +
                    (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C30911 * C31001) *
                      C31035 +
                  (((C113 * C926 + C30897 * C931) * C114 +
                    (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C30911 * C1821 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C1820 -
                   ((C113 * C1291 + C30897 * C1309) * C104 +
                    (C113 * C1282 + C30897 * C1292) * C116 +
                    (C113 * C1293 + C30897 * C1310) * C103 +
                    (C113 * C1283 + C30897 * C1294) * C115 +
                    (C113 * C1295 + C30897 * C1311) * C102 +
                    (C113 * C1284 + C30897 * C1296) * C114) *
                       C30911 * C31001) *
                      C31023 +
                  (((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C1820 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C30897 * C1314) * C102 +
                    (C113 * C1287 + C30897 * C1302) * C114) *
                       C30911 * C1821 +
                   ((C113 * C1288 + C30897 * C1303) * C114 +
                    (C113 * C1304 + C30897 * C1315) * C102 +
                    (C113 * C1289 + C30897 * C1305) * C115 +
                    (C113 * C1306 + C30897 * C1316) * C103 +
                    (C113 * C1290 + C30897 * C1307) * C116 +
                    (C113 * C1308 + C30897 * C1317) * C104) *
                       C30911 * C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C30714 * C108 -
                  ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                    C4739 * C127 + C4735 * C139) *
                       C30662 +
                   (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                    C4739 * C118 + C4735 * C126) *
                       C4742) *
                      C30911 * C30732 * C30714 * C109 +
                  ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                    C4741 * C296 + C4737 * C311) *
                       C4742 +
                   (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                    C4741 * C312 + C4737 * C326) *
                       C30662) *
                      C30911 * C30732 * C30714 * C110 -
                  ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                    C4739 * C130 + C4735 * C141) *
                       C30662 +
                   (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                    C4739 * C120 + C4735 * C131) *
                       C4742) *
                      C30911 * C30732 * C30714 * C111 +
                  ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                    C4741 * C300 + C4737 * C319) *
                       C4742 +
                   (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                    C4741 * C320 + C4737 * C330) *
                       C30662) *
                      C30911 * C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C288 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C31023 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C289 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C1075 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C1142 -
                  ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                    C4736 * C324 + C4739 * C305 + C4735 * C323) *
                       C30662 +
                   (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                    C4736 * C307 + C4739 * C293 + C4735 * C306) *
                       C4742) *
                      C30911 * C30732 * C1143 +
                  ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                    C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                       C4742 +
                   (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                    C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                       C30662) *
                      C30911 * C30732 * C1144 -
                  ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                    C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                       C30662 +
                   (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                    C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                       C4742) *
                      C30911 * C30732 * C1145 +
                  ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                    C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                       C4742 +
                   (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                    C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                       C30662) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C1820 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C1821 +
                   ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                     C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                        C4742 +
                    (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                     C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                        C30662) *
                       C30911 * C31001) *
                      C30714 * C31032 +
                  (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
                     C4741 * C1286 + C4737 * C1300) *
                        C4742 +
                    (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
                     C4741 * C1299 + C4737 * C1313) *
                        C30662) *
                       C30911 * C1821 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C1820 -
                   ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                     C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                        C30662 +
                    (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                     C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                        C4742) *
                       C30911 * C31001) *
                      C30714 * C31019 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C1820 -
                   ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                     C4736 * C943 + C4739 * C490 + C4735 * C510) *
                        C30662 +
                    (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                     C4736 * C935 + C4739 * C480 + C4735 * C491) *
                        C4742) *
                       C30911 * C1821 +
                   ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                     C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                        C4742 +
                    (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                     C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                        C30662) *
                       C30911 * C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C1820 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C1821 +
                   ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                     C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                        C4742 +
                    (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                     C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                        C30662) *
                       C30911 * C31001) *
                      C31035 +
                  (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                     C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                        C4742 +
                    (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                     C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                        C30662) *
                       C30911 * C1821 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C1820 -
                   ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                     C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                        C30662 +
                    (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                     C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                        C4742) *
                       C30911 * C31001) *
                      C31023 +
                  (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C1820 -
                   ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                     C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                        C30662 +
                    (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                     C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                        C4742) *
                       C30911 * C1821 +
                   ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                     C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                        C4742 +
                    (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                     C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                        C30662) *
                       C30911 * C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   ((C113 * C482 + C30897 * C495) * C4742 +
                    (C113 * C494 + C30897 * C512) * C30662) *
                       C8904 +
                   ((C113 * C483 + C30897 * C496) * C4742 +
                    (C113 * C497 + C30897 * C513) * C30662) *
                       C8905) *
                      C30732 * C30714 * C108 -
                  ((C550 * C30662 + C549 * C4742) * C8905 +
                   (C547 * C30662 + C548 * C4742) * C8904 +
                   (C167 * C30662 + C166 * C4742) * C8903) *
                      C30732 * C30714 * C109 +
                  ((C168 * C4742 + C169 * C30662) * C8903 +
                   (C546 * C4742 + C545 * C30662) * C8904 +
                   (C551 * C4742 + C552 * C30662) * C8905) *
                      C30732 * C30714 * C110 -
                  ((C555 * C30662 + C556 * C4742) * C8905 +
                   (C554 * C30662 + C553 * C4742) * C8904 +
                   (C170 * C30662 + C171 * C4742) * C8903) *
                      C30732 * C30714 * C111 +
                  ((C172 * C4742 + C173 * C30662) * C8903 +
                   (C780 * C4742 + C779 * C30662) * C8904 +
                   ((C113 * C489 + C30897 * C508) * C4742 +
                    (C113 * C509 + C30897 * C519) * C30662) *
                       C8905) *
                      C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    ((C113 * C482 + C30897 * C495) * C4742 +
                     (C113 * C494 + C30897 * C512) * C30662) *
                        C8904 +
                    ((C113 * C483 + C30897 * C496) * C4742 +
                     (C113 * C497 + C30897 * C513) * C30662) *
                        C8905) *
                       C30732 * C31035 -
                   (((C113 * C1295 + C30897 * C1311) * C30662 +
                     (C113 * C1284 + C30897 * C1296) * C4742) *
                        C8905 +
                    ((C113 * C932 + C30897 * C941) * C30662 +
                     (C113 * C926 + C30897 * C931) * C4742) *
                        C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C31023 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C288 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C959 * C4742 + C960 * C30662) * C8904 +
                    (C2186 * C4742 + C2185 * C30662) * C8905) *
                       C30732 * C31023 -
                   ((C550 * C30662 + C549 * C4742) * C8905 +
                    (C547 * C30662 + C548 * C4742) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C31035 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C289 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C546 * C4742 + C545 * C30662) * C8904 +
                    (C551 * C4742 + C552 * C30662) * C8905) *
                       C30732 * C31035 -
                   ((C2183 * C30662 + C2184 * C4742) * C8905 +
                    (C962 * C30662 + C961 * C4742) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C31023 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C1074 -
                   ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C1075 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C31032 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                       C30732 * C1075 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C1074 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C31019 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C1074 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C1075 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   (C9159 + C9160) * C8904 + C9165 * C8905) *
                      C30732 * C1142 -
                  ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                   ((C113 * C305 + C30897 * C323) * C30662 +
                    (C113 * C293 + C30897 * C306) * C4742) *
                       C8903) *
                      C30732 * C1143 +
                  (((C113 * C294 + C30897 * C307) * C4742 +
                    (C113 * C308 + C30897 * C324) * C30662) *
                       C8903 +
                   ((C113 * C1287 + C30897 * C1302) * C4742 +
                    (C113 * C1301 + C30897 * C1314) * C30662) *
                       C8904 +
                   ((C113 * C1288 + C30897 * C1303) * C4742 +
                    (C113 * C1304 + C30897 * C1315) * C30662) *
                       C8905) *
                      C30732 * C1144 -
                  (((C113 * C5598 + C30897 * C5604) * C30662 +
                    (C113 * C5595 + C30897 * C5599) * C4742) *
                       C8905 +
                   ((C113 * C1702 + C30897 * C1707) * C30662 +
                    (C113 * C1698 + C30897 * C1701) * C4742) *
                       C8904 +
                   ((C113 * C1158 + C30897 * C1168) * C30662 +
                    (C113 * C1150 + C30897 * C1159) * C4742) *
                       C8903) *
                      C30732 * C1145 +
                  (((C113 * C1151 + C30897 * C1160) * C4742 +
                    (C113 * C1161 + C30897 * C1169) * C30662) *
                       C8903 +
                   ((C113 * C5596 + C30897 * C5601) * C4742 +
                    (C113 * C5600 + C30897 * C5605) * C30662) *
                       C8904 +
                   ((C113 * C5597 + C30897 * C5602) * C4742 +
                    (C113 * C5603 + C30897 * C5606) * C30662) *
                       C8905) *
                      C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C1820 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C1821 +
                   (C9165 * C8903 + (C9164 + C9163) * C8904 +
                    ((C113 * C2003 + C30897 * C2012) * C4742 +
                     (C113 * C2013 + C30897 * C2021) * C30662) *
                        C8905) *
                       C31001) *
                      C30714 * C31032 +
                  (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                    (C9143 + C9144) * C8905) *
                       C1821 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C1820 -
                   (((C113 * C2015 + C30897 * C2022) * C30662 +
                     (C113 * C2004 + C30897 * C2014) * C4742) *
                        C8905 +
                    (C9144 + C9143) * C8904 + C9157 * C8903) *
                       C31001) *
                      C30714 * C31019 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C1820 -
                   ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                    (C9146 + C9145) * C8903) *
                       C1821 +
                   (C9158 * C8903 + (C9150 + C9149) * C8904 +
                    ((C113 * C2005 + C30897 * C2016) * C4742 +
                     (C113 * C2017 + C30897 * C2023) * C30662) *
                        C8905) *
                       C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C1820 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C1821 +
                   (C9165 * C8903 + (C9164 + C9163) * C8904 +
                    ((C113 * C2003 + C30897 * C2012) * C4742 +
                     (C113 * C2013 + C30897 * C2021) * C30662) *
                        C8905) *
                       C31001) *
                      C31035 +
                  (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                    (C9843 + C9844) * C8905) *
                       C1821 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C1820 -
                   (((C113 * C6250 + C30897 * C6253) * C30662 +
                     (C113 * C6244 + C30897 * C6248) * C4742) *
                        C8905 +
                    (C9844 + C9843) * C8904 + C9822 * C8903) *
                       C31001) *
                      C31023 +
                  ((((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C1820 -
                   ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                    (C9846 + C9845) * C8903) *
                       C1821 +
                   (C9851 * C8903 + (C9850 + C9849) * C8904 +
                    ((C113 * C6245 + C30897 * C6249) * C4742 +
                     (C113 * C6251 + C30897 * C6254) * C30662) *
                        C8905) *
                       C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30967 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C30777) *
                      C30691 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C30967 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30777) *
                      C30700 +
                  ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30967 +
                   (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                      C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                         C4742 +
                     (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                      C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C3274) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30967 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C30777) *
                      C30691 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C30967 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30777) *
                      C30700 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30967 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C30897 * C939) * C116 +
                     (C113 * C940 + C30897 * C945) * C104) *
                        C30911 * C30819 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C3274) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C3274 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C30967 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C3274) *
                       C30777) *
                      C30691 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C3274) *
                       C30967 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C3274 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C30777) *
                      C30700 +
                  ((((C168 * C4742 + C169 * C30662) * C8903 +
                     (C9145 + C9146) * C8904 + C9158 * C8905) *
                        C3274 -
                    ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                     (C9146 + C9145) * C8903) *
                        C30819) *
                       C30967 +
                   (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
                     ((C113 * C2404 + C30897 * C2409) * C4742 +
                      (C113 * C2410 + C30897 * C2413) * C30662) *
                         C8905) *
                        C30819 -
                    ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                     (C356 * C30662 + C357 * C4742) * C8903) *
                        C3274) *
                       C30777) *
                      C2883)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C3782) *
                       C30967 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C3782) *
                       C30777) *
                      C2620 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C3782) *
                       C30967 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                      C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                         C4742 +
                     (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                      C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                         C30662) *
                        C30911 * C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30815 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30822 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C3782) *
                       C30967 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30822 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30815 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C3782) *
                       C30777) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30822 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30815 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C3782) *
                       C30967 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30815 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30822 +
                    (C2186 * C114 + C2185 * C102 + C2184 * C115 + C2183 * C103 +
                     (C113 * C2170 + C30897 * C2171) * C116 +
                     (C113 * C2172 + C30897 * C2173) * C104) *
                        C30911 * C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30815 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30822 +
                    (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) *
                        C3782) *
                       C30967 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30822 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30815 -
                    ((C10907 + C10908) * C8905 + (C9844 + C9843) * C8904 +
                     C9822 * C8903) *
                        C3782) *
                       C30777) *
                      C2620 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30822 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30815 -
                    ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
                     C9157 * C8903) *
                        C3782) *
                       C30967 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C30815 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30822 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C113 * C10673 + C30897 * C10674) * C4742 +
                      (C113 * C10675 + C30897 * C10676) * C30662) *
                         C8905) *
                        C3782) *
                       C30777) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C114 +
                (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                C167 * C103 + C168 * C116 + C169 * C104) *
                   C30911 * C3274 -
               (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                (C113 * C494 + C30897 * C512) * C102 +
                (C113 * C482 + C30897 * C495) * C114) *
                   C30911 * C30819) *
                  C30714 * C31041 +
              ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                C553 * C116 + C554 * C104) *
                   C30911 * C30819 -
               (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                C167 * C102 + C166 * C114) *
                   C30911 * C3274) *
                  C30714 * C31034 +
              ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                C172 * C116 + C173 * C104) *
                   C30911 * C3274 -
               (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                C545 * C102 + C546 * C114) *
                   C30911 * C30819) *
                  C30714 * C31021 +
              ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                (C113 * C770 + C30897 * C771) * C116 +
                (C113 * C772 + C30897 * C773) * C104) *
                   C30911 * C30819 -
               (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                C170 * C102 + C171 * C114) *
                   C30911 * C3274) *
                  C30714 * C31002) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C30897 * C124) * C114 +
                 (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                 C167 * C103 + C168 * C116 + C169 * C104) *
                    C30911 * C3274 -
                (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                 (C113 * C494 + C30897 * C512) * C102 +
                 (C113 * C482 + C30897 * C495) * C114) *
                    C30911 * C30819) *
                   C31035 +
               (((C113 * C926 + C30897 * C931) * C114 +
                 (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                 C960 * C103 + C961 * C116 + C962 * C104) *
                    C30911 * C30819 -
                (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                 (C113 * C305 + C30897 * C323) * C102 +
                 (C113 * C293 + C30897 * C306) * C114) *
                    C30911 * C3274) *
                   C31023 +
               (((C113 * C294 + C30897 * C307) * C114 +
                 (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                 C361 * C103 + C362 * C116 + C363 * C104) *
                    C30911 * C3274 -
                (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                 (C113 * C1301 + C30897 * C1314) * C102 +
                 (C113 * C1287 + C30897 * C1302) * C114) *
                    C30911 * C30819) *
                   C30998) *
                  C2620 +
              (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                 C553 * C116 + C554 * C104) *
                    C30911 * C30819 -
                (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                 C167 * C102 + C166 * C114) *
                    C30911 * C3274) *
                   C31035 +
               ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                 C364 * C116 + C365 * C104) *
                    C30911 * C3274 -
                (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                 C960 * C102 + C959 * C114) *
                    C30911 * C30819) *
                   C31023 +
               ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                 (C113 * C1584 + C30897 * C1585) * C116 +
                 (C113 * C1586 + C30897 * C1587) * C104) *
                    C30911 * C30819 -
                (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                 C361 * C102 + C360 * C114) *
                    C30911 * C3274) *
                   C30998) *
                  C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C31043 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C31040 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C31031 -
           (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
            (C113 * C2010 + C30897 * C2020) * C102 +
            (C113 * C2002 + C30897 * C2011) * C114) *
               C30911 * C31014) *
              C30714 * C2620 +
          ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
            C553 * C116 + C554 * C104) *
               C30911 * C31040 -
           (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
            C167 * C102 + C166 * C114) *
               C30911 * C31043 -
           (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
            C550 * C102 + C549 * C114) *
               C30911 * C31031 +
           (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
            (C113 * C2288 + C30897 * C2289) * C116 +
            (C113 * C2290 + C30897 * C2291) * C104) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C3274 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30819) *
              C30714 * C31041 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C3274) *
              C30714 * C31034 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C3274 -
           ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
             C4739 * C490 + C4735 * C510) *
                C30662 +
            (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
             C4739 * C480 + C4735 * C491) *
                C4742) *
               C30911 * C30819) *
              C30714 * C31021 +
          (((C4739 * C486 + C4735 * C502 + C4740 * C929 + C4736 * C938 +
             C4741 * C1584 + C4737 * C1585) *
                C4742 +
            (C4739 * C503 + C4735 * C516 + C4740 * C937 + C4736 * C944 +
             C4741 * C1586 + C4737 * C1587) *
                C30662) *
               C30911 * C30819 -
           ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
             C4739 * C130 + C4735 * C141) *
                C30662 +
            (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
             C4739 * C120 + C4735 * C131) *
                C4742) *
               C30911 * C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
              C4741 * C294 + C4737 * C307) *
                 C4742 +
             (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
              C4741 * C308 + C4737 * C324) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
              C4739 * C494 + C4735 * C512) *
                 C30662 +
             (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
              C4739 * C482 + C4735 * C495) *
                 C4742) *
                C30911 * C30819) *
               C31035 +
           (((C4739 * C926 + C4735 * C931 + C4740 * C1287 + C4736 * C1302 +
              C4741 * C1698 + C4737 * C1701) *
                 C4742 +
             (C4739 * C932 + C4735 * C941 + C4740 * C1301 + C4736 * C1314 +
              C4741 * C1702 + C4737 * C1707) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 + C4736 * C324 +
              C4739 * C305 + C4735 * C323) *
                 C30662 +
             (C4741 * C1150 + C4737 * C1159 + C4740 * C294 + C4736 * C307 +
              C4739 * C293 + C4735 * C306) *
                 C4742) *
                C30911 * C3274) *
               C31023 +
           (((C4739 * C294 + C4735 * C307 + C4740 * C1150 + C4736 * C1159 +
              C4741 * C1151 + C4737 * C1160) *
                 C4742 +
             (C4739 * C308 + C4735 * C324 + C4740 * C1158 + C4736 * C1168 +
              C4741 * C1161 + C4737 * C1169) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 + C4736 * C1707 +
              C4739 * C1301 + C4735 * C1314) *
                 C30662 +
             (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 + C4736 * C1701 +
              C4739 * C1287 + C4735 * C1302) *
                 C4742) *
                C30911 * C30819) *
               C30998) *
              C2620 +
          ((((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
              C4741 * C1286 + C4737 * C1300) *
                 C4742 +
             (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
              C4741 * C1299 + C4737 * C1313) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
              C4739 * C127 + C4735 * C139) *
                 C30662 +
             (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
              C4739 * C118 + C4735 * C126) *
                 C4742) *
                C30911 * C3274) *
               C31035 +
           (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
              C4741 * C1149 + C4737 * C1157) *
                 C4742 +
             (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
              C4741 * C1156 + C4737 * C1167) *
                 C30662) *
                C30911 * C3274 -
            ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 + C4736 * C1313 +
              C4739 * C934 + C4735 * C942) *
                 C30662 +
             (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 + C4736 * C1300 +
              C4739 * C927 + C4735 * C933) *
                 C4742) *
                C30911 * C30819) *
               C31023 +
           (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 + C4736 * C1703 +
              C4741 * C5855 + C4737 * C5856) *
                 C4742 +
             (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 + C4736 * C1708 +
              C4741 * C5857 + C4737 * C5858) *
                 C30662) *
                C30911 * C30819 -
            ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 + C4736 * C1167 +
              C4739 * C310 + C4735 * C325) *
                 C30662 +
             (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 + C4736 * C1157 +
              C4739 * C295 + C4735 * C309) *
                 C4742) *
                C30911 * C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C31043 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C31040 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C31031 -
           ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 + C4736 * C2411 +
             C4739 * C2010 + C4735 * C2020) *
                C30662 +
            (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 + C4736 * C2405 +
             C4739 * C2002 + C4735 * C2011) *
                C4742) *
               C30911 * C31014) *
              C30714 * C2620 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C31040 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C31043 -
           ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 + C4736 * C1310 +
             C4739 * C499 + C4735 * C514) *
                C30662 +
            (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 + C4736 * C1294 +
             C4739 * C484 + C4735 * C498) *
                C4742) *
               C30911 * C31031 +
           ((C4739 * C2001 + C4735 * C2009 + C4740 * C2403 + C4736 * C2407 +
             C4741 * C6503 + C4737 * C6504) *
                C4742 +
            (C4739 * C2008 + C4735 * C2019 + C4740 * C2408 + C4736 * C2412 +
             C4741 * C6505 + C4737 * C6506) *
                C30662) *
               C30911 * C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C3274 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30819) *
              C30714 * C31041 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            C10789 * C8905) *
               C30819 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C3274) *
              C30714 * C31034 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C3274 -
           ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
            (C9146 + C9145) * C8903) *
               C30819) *
              C30714 * C31021 +
          (((C9362 + C9363) * C8903 + (C9364 + C9365) * C8904 +
            ((C113 * C2288 + C30897 * C2289) * C4742 +
             (C113 * C2290 + C30897 * C2291) * C30662) *
                C8905) *
               C30819 -
           ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
            (C170 * C30662 + C171 * C4742) * C8903) *
               C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C4742 +
              (C113 * C125 + C30897 * C138) * C30662) *
                 C8903 +
             (C9159 + C9160) * C8904 + C9165 * C8905) *
                C3274 -
            (C10510 * C8905 + (C9162 + C9161) * C8904 +
             (C9160 + C9159) * C8903) *
                C30819) *
               C31035 +
           (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
             C10900 * C8905) *
                C30819 -
            (C9822 * C8905 + (C9533 + C9532) * C8904 +
             ((C113 * C305 + C30897 * C323) * C30662 +
              (C113 * C293 + C30897 * C306) * C4742) *
                 C8903) *
                C3274) *
               C31023 +
           ((((C113 * C294 + C30897 * C307) * C4742 +
              (C113 * C308 + C30897 * C324) * C30662) *
                 C8903 +
             (C9845 + C9846) * C8904 + C9851 * C8905) *
                C3274 -
            ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
             (C9846 + C9845) * C8903) *
                C30819) *
               C30998) *
              C2620 +
          ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
             C10789 * C8905) *
                C30819 -
            (C9157 * C8905 + (C9140 + C9139) * C8904 +
             (C167 * C30662 + C166 * C4742) * C8903) *
                C3274) *
               C31035 +
           (((C359 * C4742 + C358 * C30662) * C8903 + (C9520 + C9521) * C8904 +
             C10678 * C8905) *
                C3274 -
            ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
             (C9521 + C9520) * C8903) *
                C30819) *
               C31023 +
           (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
             ((C113 * C6503 + C30897 * C6504) * C4742 +
              (C113 * C6505 + C30897 * C6506) * C30662) *
                 C8905) *
                C30819 -
            ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
             (C361 * C30662 + C360 * C4742) * C8903) *
                C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C31043 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C31040 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C31031 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31014) *
              C30714 * C2620 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            C10789 * C8905) *
               C31040 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C31043 -
           ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
            C9157 * C8903) *
               C31031 +
           (C10789 * C8903 + (C10797 + C10796) * C8904 +
            ((C113 * C10784 + C30897 * C10785) * C4742 +
             (C113 * C10786 + C30897 * C10787) * C30662) *
                C8905) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
             C4741 * C294 + C4737 * C307) *
                C4742 +
            (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
             C4741 * C308 + C4737 * C324) *
                C30662) *
               C30911 * C30815 -
           ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 + C4736 * C941 +
             C4739 * C494 + C4735 * C512) *
                C30662 +
            (C4741 * C1287 + C4737 * C1302 + C4740 * C926 + C4736 * C931 +
             C4739 * C482 + C4735 * C495) *
                C4742) *
               C30911 * C30822 +
           ((C4739 * C483 + C4735 * C496 + C4740 * C1284 + C4736 * C1296 +
             C4741 * C1288 + C4737 * C1303) *
                C4742 +
            (C4739 * C497 + C4735 * C513 + C4740 * C1295 + C4736 * C1311 +
             C4741 * C1304 + C4737 * C1315) *
                C30662) *
               C30911 * C3782) *
              C30714 * C30691 +
          (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
             C4741 * C1286 + C4737 * C1300) *
                C4742 +
            (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
             C4741 * C1299 + C4737 * C1313) *
                C30662) *
               C30911 * C30822 -
           ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
             C4739 * C127 + C4735 * C139) *
                C30662 +
            (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
             C4739 * C118 + C4735 * C126) *
                C4742) *
               C30911 * C30815 -
           ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 + C4736 * C1310 +
             C4739 * C499 + C4735 * C514) *
                C30662 +
            (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 + C4736 * C1294 +
             C4739 * C484 + C4735 * C498) *
                C4742) *
               C30911 * C3782) *
              C30714 * C30700 +
          (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
             C4741 * C296 + C4737 * C311) *
                C4742 +
            (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
             C4741 * C312 + C4737 * C326) *
                C30662) *
               C30911 * C30815 -
           ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 + C4736 * C943 +
             C4739 * C490 + C4735 * C510) *
                C30662 +
            (C4741 * C1285 + C4737 * C1298 + C4740 * C928 + C4736 * C935 +
             C4739 * C480 + C4735 * C491) *
                C4742) *
               C30911 * C30822 +
           ((C4739 * C485 + C4735 * C500 + C4740 * C1282 + C4736 * C1292 +
             C4741 * C1290 + C4737 * C1307) *
                C4742 +
            (C4739 * C501 + C4735 * C515 + C4740 * C1291 + C4736 * C1309 +
             C4741 * C1308 + C4737 * C1317) *
                C30662) *
               C30911 * C3782) *
              C30714 * C2883)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C114 +
            (C113 * C125 + C30897 * C138) * C102 + C166 * C115 + C167 * C103 +
            C168 * C116 + C169 * C104) *
               C30911 * C30815 -
           (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
            (C113 * C494 + C30897 * C512) * C102 +
            (C113 * C482 + C30897 * C495) * C114) *
               C30911 * C30822 +
           ((C113 * C483 + C30897 * C496) * C114 +
            (C113 * C497 + C30897 * C513) * C102 + C549 * C115 + C550 * C103 +
            C551 * C116 + C552 * C104) *
               C30911 * C3782) *
              C30714 * C30691 +
          ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
            C553 * C116 + C554 * C104) *
               C30911 * C30822 -
           (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
            C167 * C102 + C166 * C114) *
               C30911 * C30815 -
           (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
            C550 * C102 + C549 * C114) *
               C30911 * C3782) *
              C30714 * C30700 +
          ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
            C172 * C116 + C173 * C104) *
               C30911 * C30815 -
           (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
            C545 * C102 + C546 * C114) *
               C30911 * C30822 +
           (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
            (C113 * C489 + C30897 * C508) * C116 +
            (C113 * C509 + C30897 * C519) * C104) *
               C30911 * C3782) *
              C30714 * C2883)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C4742 +
             (C113 * C125 + C30897 * C138) * C30662) *
                C8903 +
            (C9159 + C9160) * C8904 + C9165 * C8905) *
               C30815 -
           (C10510 * C8905 + (C9162 + C9161) * C8904 +
            (C9160 + C9159) * C8903) *
               C30822 +
           (C9165 * C8903 + (C9164 + C9163) * C8904 + C10527 * C8905) * C3782) *
              C30714 * C30691 +
          (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
            C10789 * C8905) *
               C30822 -
           (C9157 * C8905 + (C9140 + C9139) * C8904 +
            (C167 * C30662 + C166 * C4742) * C8903) *
               C30815 -
           ((C10796 + C10797) * C8905 + (C9144 + C9143) * C8904 +
            C9157 * C8903) *
               C3782) *
              C30714 * C30700 +
          (((C168 * C4742 + C169 * C30662) * C8903 + (C9145 + C9146) * C8904 +
            C9158 * C8905) *
               C30815 -
           ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
            (C9146 + C9145) * C8903) *
               C30822 +
           (C9158 * C8903 + (C9150 + C9149) * C8904 +
            ((C113 * C2005 + C30897 * C2016) * C4742 +
             (C113 * C2017 + C30897 * C2023) * C30662) *
                C8905) *
               C3782) *
              C30714 * C2883)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C31035 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C31023 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C30998) *
                      C2620 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C31035 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C3274 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C31023 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C30897 * C1585) * C116 +
                     (C113 * C1586 + C30897 * C1587) * C104) *
                        C30911 * C30819 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C3274) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C3274 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C30819) *
                      C30714 * C31041 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C30911 * C30819 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C3274) *
                      C30714 * C31034 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C3274 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C30911 * C30819) *
                      C30714 * C31021 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C30897 * C771) * C116 +
                    (C113 * C772 + C30897 * C773) * C104) *
                       C30911 * C30819 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C3274) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C3274 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C30819) *
                      C30714 * C31041 +
                  (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
                     C4741 * C1286 + C4737 * C1300) *
                        C4742 +
                    (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
                     C4741 * C1299 + C4737 * C1313) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C3274) *
                      C30714 * C31034 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C3274 -
                   ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                     C4736 * C943 + C4739 * C490 + C4735 * C510) *
                        C30662 +
                    (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                     C4736 * C935 + C4739 * C480 + C4735 * C491) *
                        C4742) *
                       C30911 * C30819) *
                      C30714 * C31021 +
                  (((C4739 * C486 + C4735 * C502 + C4740 * C929 + C4736 * C938 +
                     C4741 * C1584 + C4737 * C1585) *
                        C4742 +
                    (C4739 * C503 + C4735 * C516 + C4740 * C937 + C4736 * C944 +
                     C4741 * C1586 + C4737 * C1587) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C3274) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C31035 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C31023 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C30998) *
                      C2620 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C31035 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C31023 +
                   (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                      C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                         C4742 +
                     (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                      C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C3274) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C3274 -
                   (C10510 * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C30819) *
                      C30714 * C31041 +
                  (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                    C10789 * C8905) *
                       C30819 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C3274) *
                      C30714 * C31034 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C3274 -
                   ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                    (C9146 + C9145) * C8903) *
                       C30819) *
                      C30714 * C31021 +
                  (((C9362 + C9363) * C8903 + (C9364 + C9365) * C8904 +
                    ((C113 * C2288 + C30897 * C2289) * C4742 +
                     (C113 * C2290 + C30897 * C2291) * C30662) *
                        C8905) *
                       C30819 -
                   ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C3274) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C3274 -
                    (C10510 * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C31035 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     C10900 * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C3274) *
                       C31023 +
                   ((((C113 * C294 + C30897 * C307) * C4742 +
                      (C113 * C308 + C30897 * C324) * C30662) *
                         C8903 +
                     (C9845 + C9846) * C8904 + C9851 * C8905) *
                        C3274 -
                    ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                     (C9846 + C9845) * C8903) *
                        C30819) *
                       C30998) *
                      C2620 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     C10789 * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C3274) *
                       C31035 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + C10678 * C8905) *
                        C3274 -
                    ((C10685 + C10686) * C8905 + (C9523 + C9522) * C8904 +
                     (C9521 + C9520) * C8903) *
                        C30819) *
                       C31023 +
                   (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
                     ((C113 * C6503 + C30897 * C6504) * C4742 +
                      (C113 * C6505 + C30897 * C6506) * C30662) *
                         C8905) *
                        C30819 -
                    ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                     (C361 * C30662 + C360 * C4742) * C8903) *
                        C3274) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1416 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1417 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C1418 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C31008) *
                      C30953 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C1417 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C1416 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C1418 +
                   (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                    (C113 * C1422 + C30897 * C1423) * C116 +
                    (C113 * C1424 + C30897 * C1425) * C104) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C30967 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C30777) *
                      C656 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C30777 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C30967) *
                      C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C30967 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C30777) *
                      C658 +
                  ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                    (C113 * C660 + C30897 * C661) * C116 +
                    (C113 * C662 + C30897 * C663) * C104) *
                       C30911 * C30732 * C30777 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30732 * C30967) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30967 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C656 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30967) *
                      C657 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30967 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C30777) *
                      C658 +
                  (((C4739 * C297 + C4735 * C313 + C4740 * C298 + C4736 * C316 +
                     C4741 * C1422 + C4737 * C1423) *
                        C4742 +
                    (C4739 * C314 + C4735 * C327 + C4740 * C315 + C4736 * C328 +
                     C4741 * C1424 + C4737 * C1425) *
                        C30662) *
                       C30911 * C30732 * C30777 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30967) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1416 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1417 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1418 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C31008) *
                      C30953 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C1417 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C1416 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C1418 +
                   ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                     C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                        C4742 +
                    (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                     C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                        C30662) *
                       C30911 * C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C30967 -
                   (((C113 * C1295 + C30897 * C1311) * C30662 +
                     (C113 * C1284 + C30897 * C1296) * C4742) *
                        C8905 +
                    ((C113 * C932 + C30897 * C941) * C30662 +
                     (C113 * C926 + C30897 * C931) * C4742) *
                        C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C30777) *
                      C656 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C959 * C4742 + C960 * C30662) * C8904 +
                    (C2186 * C4742 + C2185 * C30662) * C8905) *
                       C30732 * C30777 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C30967) *
                      C657 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C30967 -
                   ((C2183 * C30662 + C2184 * C4742) * C8905 +
                    (C962 * C30662 + C961 * C4742) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C30777) *
                      C658 +
                  (((C364 * C4742 + C365 * C30662) * C8903 +
                    (C964 * C4742 + C963 * C30662) * C8904 +
                    ((C113 * C2170 + C30897 * C2171) * C4742 +
                     (C113 * C2172 + C30897 * C2173) * C30662) *
                        C8905) *
                       C30732 * C30777 -
                   ((C555 * C30662 + C556 * C4742) * C8905 +
                    (C554 * C30662 + C553 * C4742) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C30732 * C30967) *
                      C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C1416 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C1417 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30732 * C1418 -
                   (((C113 * C5598 + C30897 * C5604) * C30662 +
                     (C113 * C5595 + C30897 * C5599) * C4742) *
                        C8905 +
                    ((C113 * C1702 + C30897 * C1707) * C30662 +
                     (C113 * C1698 + C30897 * C1701) * C4742) *
                        C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C30732 * C31008) *
                      C30953 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                       C30732 * C1417 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C1416 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C1418 +
                   ((C1438 * C4742 + C1437 * C30662) * C8903 +
                    ((C113 * C1699 + C30897 * C1703) * C4742 +
                     (C113 * C1704 + C30897 * C1708) * C30662) *
                        C8904 +
                    ((C113 * C6401 + C30897 * C6402) * C4742 +
                     (C113 * C6403 + C30897 * C6404) * C30662) *
                        C8905) *
                       C30732 * C31008) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30968 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C30819) *
                      C1416 +
                  (((C113 * C926 + C30897 * C931) * C114 +
                    (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C30911 * C30819 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30968) *
                      C1417 +
                  (((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30968 -
                   (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                    (C113 * C1301 + C30897 * C1314) * C102 +
                    (C113 * C1287 + C30897 * C1302) * C114) *
                       C30911 * C30819) *
                      C1418 +
                  (((C113 * C1698 + C30897 * C1701) * C114 +
                    (C113 * C1702 + C30897 * C1707) * C102 +
                    (C113 * C1699 + C30897 * C1703) * C115 +
                    (C113 * C1704 + C30897 * C1708) * C103 +
                    (C113 * C1700 + C30897 * C1705) * C116 +
                    (C113 * C1706 + C30897 * C1709) * C104) *
                       C30911 * C30819 -
                   (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30968) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30967 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C30777) *
                      C288 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C30967 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30968 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C30777) *
                      C289 +
                  (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30968 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30967 +
                   ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                     (C113 * C930 + C30897 * C939) * C116 +
                     (C113 * C940 + C30897 * C945) * C104) *
                        C30911 * C30819 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30968) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30967 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C30777) *
                      C288 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C30967 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C30777) *
                      C289 +
                  ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30967 +
                   (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                      C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                         C4742 +
                     (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                      C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30968) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30968 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C30819) *
                      C1416 +
                  (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                     C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                        C4742 +
                    (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                     C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30968) *
                      C1417 +
                  (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30968 -
                   ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                     C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                        C30662 +
                    (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                     C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                        C4742) *
                       C30911 * C30819) *
                      C1418 +
                  (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                     C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                        C4742 +
                    (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                     C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30968) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30968 -
                    ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C30967 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     ((C113 * C2402 + C30897 * C2405) * C4742 +
                      (C113 * C2406 + C30897 * C2411) * C30662) *
                         C8905) *
                        C30819 -
                    ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30968) *
                       C30777) *
                      C288 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     (C9143 + C9144) * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30968) *
                       C30967 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                        C30968 -
                    (((C113 * C2408 + C30897 * C2412) * C30662 +
                      (C113 * C2403 + C30897 * C2407) * C4742) *
                         C8905 +
                     (C9523 + C9522) * C8904 + (C9521 + C9520) * C8903) *
                        C30819) *
                       C30777) *
                      C289 +
                  ((((C168 * C4742 + C169 * C30662) * C8903 +
                     (C9145 + C9146) * C8904 + C9158 * C8905) *
                        C30968 -
                    ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                     (C9146 + C9145) * C8903) *
                        C30819) *
                       C30967 +
                   (((C9524 + C9525) * C8903 + (C9526 + C9527) * C8904 +
                     ((C113 * C2404 + C30897 * C2409) * C4742 +
                      (C113 * C2410 + C30897 * C2413) * C30662) *
                         C8905) *
                        C30819 -
                    ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                     (C356 * C30662 + C357 * C4742) * C8903) *
                        C30968) *
                       C30777) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30968 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C30819) *
                      C1416 +
                  (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                    (C9843 + C9844) * C8905) *
                       C30819 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30968) *
                      C1417 +
                  ((((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C30968 -
                   ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                    (C9846 + C9845) * C8903) *
                       C30819) *
                      C1418 +
                  (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
                    ((C113 * C6605 + C30897 * C6606) * C4742 +
                     (C113 * C6607 + C30897 * C6608) * C30662) *
                        C8905) *
                       C30819 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    ((C113 * C1158 + C30897 * C1168) * C30662 +
                     (C113 * C1150 + C30897 * C1159) * C4742) *
                        C8903) *
                       C30968) *
                      C31008) *
                 C30686) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     (((C113 * C117 + C30897 * C124) * C114 +
                       (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                       C167 * C103 + C168 * C116 + C169 * C104) *
                          C30911 * C30732 * C30714 * C108 -
                      (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                       C167 * C102 + C166 * C114) *
                          C30911 * C30732 * C30714 * C109 +
                      (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                       C172 * C116 + C173 * C104) *
                          C30911 * C30732 * C30714 * C110 -
                      (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                       C170 * C102 + C171 * C114) *
                          C30911 * C30732 * C30714 * C111 +
                      (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                       (C113 * C123 + C30897 * C136) * C116 +
                       (C113 * C137 + C30897 * C144) * C104) *
                          C30911 * C30732 * C30714 * C112) +
                 std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C31035 -
                       (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                        (C113 * C305 + C30897 * C323) * C102 +
                        (C113 * C293 + C30897 * C306) * C114) *
                           C30911 * C30732 * C31023 +
                       ((C113 * C294 + C30897 * C307) * C114 +
                        (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                        C361 * C103 + C362 * C116 + C363 * C104) *
                           C30911 * C30732 * C30998) *
                          C288 +
                      ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                        C364 * C116 + C365 * C104) *
                           C30911 * C30732 * C31023 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C31035 -
                       (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                        C361 * C102 + C360 * C114) *
                           C30911 * C30732 * C30998) *
                          C289 +
                      ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C30911 * C30732 * C31035 -
                       ((C113 * C317 + C30897 * C329) * C104 +
                        (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                        C364 * C115 + C356 * C102 + C357 * C114) *
                           C30911 * C30732 * C31023 +
                       (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                        (C113 * C300 + C30897 * C319) * C116 +
                        (C113 * C320 + C30897 * C330) * C104) *
                           C30911 * C30732 * C30998) *
                          C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C31036 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C31025 +
                   ((C113 * C483 + C30897 * C496) * C114 +
                    (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C30911 * C31001) *
                      C30714 * C288 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C30911 * C31025 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C31036 -
                   (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                    C550 * C102 + C549 * C114) *
                       C30911 * C31001) *
                      C30714 * C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C31036 -
                   ((C113 * C506 + C30897 * C518) * C104 +
                    (C113 * C488 + C30897 * C507) * C116 + C554 * C103 +
                    C553 * C115 + C545 * C102 + C546 * C114) *
                       C30911 * C31025 +
                   (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                    (C113 * C489 + C30897 * C508) * C116 +
                    (C113 * C509 + C30897 * C519) * C104) *
                       C30911 * C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1075 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C30897 * C124) * C114 +
                   (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C30911 * C30732 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C30897 * C323) * C102 +
                   (C113 * C293 + C30897 * C306) * C114) *
                      C30911 * C30732 * C1143 +
                  ((C113 * C294 + C30897 * C307) * C114 +
                   (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C30911 * C30732 * C1144 -
                  ((C113 * C1154 + C30897 * C1166) * C104 +
                   (C113 * C1148 + C30897 * C1155) * C116 +
                   (C113 * C1156 + C30897 * C1167) * C103 +
                   (C113 * C1149 + C30897 * C1157) * C115 +
                   (C113 * C1158 + C30897 * C1168) * C102 +
                   (C113 * C1150 + C30897 * C1159) * C114) *
                      C30911 * C30732 * C1145 +
                  ((C113 * C1151 + C30897 * C1160) * C114 +
                   (C113 * C1161 + C30897 * C1169) * C102 +
                   (C113 * C1152 + C30897 * C1162) * C115 +
                   (C113 * C1163 + C30897 * C1170) * C103 +
                   (C113 * C1153 + C30897 * C1164) * C116 +
                   (C113 * C1165 + C30897 * C1171) * C104) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C31036 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C31025 +
                   ((C113 * C483 + C30897 * C496) * C114 +
                    (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C30911 * C31001) *
                      C1074 +
                  (((C113 * C926 + C30897 * C931) * C114 +
                    (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                    C960 * C103 + C961 * C116 + C962 * C104) *
                       C30911 * C31025 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C31036 -
                   ((C113 * C1291 + C30897 * C1309) * C104 +
                    (C113 * C1282 + C30897 * C1292) * C116 +
                    (C113 * C1293 + C30897 * C1310) * C103 +
                    (C113 * C1283 + C30897 * C1294) * C115 +
                    (C113 * C1295 + C30897 * C1311) * C102 +
                    (C113 * C1284 + C30897 * C1296) * C114) *
                       C30911 * C31001) *
                      C1075 +
                  (((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C31036 -
                   ((C113 * C1297 + C30897 * C1312) * C104 +
                    (C113 * C1285 + C30897 * C1298) * C116 +
                    (C113 * C1299 + C30897 * C1313) * C103 +
                    (C113 * C1286 + C30897 * C1300) * C115 +
                    (C113 * C1301 + C30897 * C1314) * C102 +
                    (C113 * C1287 + C30897 * C1302) * C114) *
                       C30911 * C31025 +
                   ((C113 * C1288 + C30897 * C1303) * C114 +
                    (C113 * C1304 + C30897 * C1315) * C102 +
                    (C113 * C1289 + C30897 * C1305) * C115 +
                    (C113 * C1306 + C30897 * C1316) * C103 +
                    (C113 * C1290 + C30897 * C1307) * C116 +
                    (C113 * C1308 + C30897 * C1317) * C104) *
                       C30911 * C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C30714 * C108 -
                  ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                    C4739 * C127 + C4735 * C139) *
                       C30662 +
                   (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                    C4739 * C118 + C4735 * C126) *
                       C4742) *
                      C30911 * C30732 * C30714 * C109 +
                  ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                    C4741 * C296 + C4737 * C311) *
                       C4742 +
                   (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                    C4741 * C312 + C4737 * C326) *
                       C30662) *
                      C30911 * C30732 * C30714 * C110 -
                  ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                    C4739 * C130 + C4735 * C141) *
                       C30662 +
                   (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                    C4739 * C120 + C4735 * C131) *
                       C4742) *
                      C30911 * C30732 * C30714 * C111 +
                  ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                    C4741 * C300 + C4737 * C319) *
                       C4742 +
                   (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                    C4741 * C320 + C4737 * C330) *
                       C30662) *
                      C30911 * C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C288 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C31023 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C289 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C31036 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C31025 +
                   ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                     C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                        C4742 +
                    (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                     C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                        C30662) *
                       C30911 * C31001) *
                      C30714 * C288 +
                  (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
                     C4741 * C1286 + C4737 * C1300) *
                        C4742 +
                    (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
                     C4741 * C1299 + C4737 * C1313) *
                        C30662) *
                       C30911 * C31025 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C31036 -
                   ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                     C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                        C30662 +
                    (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                     C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                        C4742) *
                       C30911 * C31001) *
                      C30714 * C289 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C31036 -
                   ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                     C4736 * C943 + C4739 * C490 + C4735 * C510) *
                        C30662 +
                    (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                     C4736 * C935 + C4739 * C480 + C4735 * C491) *
                        C4742) *
                       C30911 * C31025 +
                   ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                     C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                        C4742 +
                    (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                     C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                        C30662) *
                       C30911 * C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C1075 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C1142 -
                  ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                    C4736 * C324 + C4739 * C305 + C4735 * C323) *
                       C30662 +
                   (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                    C4736 * C307 + C4739 * C293 + C4735 * C306) *
                       C4742) *
                      C30911 * C30732 * C1143 +
                  ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                    C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                       C4742 +
                   (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                    C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                       C30662) *
                      C30911 * C30732 * C1144 -
                  ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                    C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                       C30662 +
                   (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                    C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                       C4742) *
                      C30911 * C30732 * C1145 +
                  ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                    C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                       C4742 +
                   (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                    C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                       C30662) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C31036 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C31025 +
                   ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                     C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                        C4742 +
                    (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                     C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                        C30662) *
                       C30911 * C31001) *
                      C1074 +
                  (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                     C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                        C4742 +
                    (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                     C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                        C30662) *
                       C30911 * C31025 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C31036 -
                   ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                     C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                        C30662 +
                    (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                     C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                        C4742) *
                       C30911 * C31001) *
                      C1075 +
                  (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C31036 -
                   ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                     C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                        C30662 +
                    (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                     C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                        C4742) *
                       C30911 * C31025 +
                   ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                     C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                        C4742 +
                    (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                     C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                        C30662) *
                       C30911 * C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   ((C113 * C482 + C30897 * C495) * C4742 +
                    (C113 * C494 + C30897 * C512) * C30662) *
                       C8904 +
                   ((C113 * C483 + C30897 * C496) * C4742 +
                    (C113 * C497 + C30897 * C513) * C30662) *
                       C8905) *
                      C30732 * C30714 * C108 -
                  ((C550 * C30662 + C549 * C4742) * C8905 +
                   (C547 * C30662 + C548 * C4742) * C8904 +
                   (C167 * C30662 + C166 * C4742) * C8903) *
                      C30732 * C30714 * C109 +
                  ((C168 * C4742 + C169 * C30662) * C8903 +
                   (C546 * C4742 + C545 * C30662) * C8904 +
                   (C551 * C4742 + C552 * C30662) * C8905) *
                      C30732 * C30714 * C110 -
                  ((C555 * C30662 + C556 * C4742) * C8905 +
                   (C554 * C30662 + C553 * C4742) * C8904 +
                   (C170 * C30662 + C171 * C4742) * C8903) *
                      C30732 * C30714 * C111 +
                  ((C172 * C4742 + C173 * C30662) * C8903 +
                   (C780 * C4742 + C779 * C30662) * C8904 +
                   ((C113 * C489 + C30897 * C508) * C4742 +
                    (C113 * C509 + C30897 * C519) * C30662) *
                       C8905) *
                      C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    ((C113 * C482 + C30897 * C495) * C4742 +
                     (C113 * C494 + C30897 * C512) * C30662) *
                        C8904 +
                    ((C113 * C483 + C30897 * C496) * C4742 +
                     (C113 * C497 + C30897 * C513) * C30662) *
                        C8905) *
                       C30732 * C31035 -
                   (((C113 * C1295 + C30897 * C1311) * C30662 +
                     (C113 * C1284 + C30897 * C1296) * C4742) *
                        C8905 +
                    ((C113 * C932 + C30897 * C941) * C30662 +
                     (C113 * C926 + C30897 * C931) * C4742) *
                        C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C31023 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C288 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C959 * C4742 + C960 * C30662) * C8904 +
                    (C2186 * C4742 + C2185 * C30662) * C8905) *
                       C30732 * C31023 -
                   ((C550 * C30662 + C549 * C4742) * C8905 +
                    (C547 * C30662 + C548 * C4742) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C31035 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C289 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C546 * C4742 + C545 * C30662) * C8904 +
                    (C551 * C4742 + C552 * C30662) * C8905) *
                       C30732 * C31035 -
                   ((C2183 * C30662 + C2184 * C4742) * C8905 +
                    (C962 * C30662 + C961 * C4742) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C31023 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C31036 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C31025 +
                   (C9165 * C8903 + (C9164 + C9163) * C8904 +
                    ((C113 * C2003 + C30897 * C2012) * C4742 +
                     (C113 * C2013 + C30897 * C2021) * C30662) *
                        C8905) *
                       C31001) *
                      C30714 * C288 +
                  (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                    (C9143 + C9144) * C8905) *
                       C31025 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C31036 -
                   (((C113 * C2015 + C30897 * C2022) * C30662 +
                     (C113 * C2004 + C30897 * C2014) * C4742) *
                        C8905 +
                    (C9144 + C9143) * C8904 + C9157 * C8903) *
                       C31001) *
                      C30714 * C289 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C31036 -
                   ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                    (C9146 + C9145) * C8903) *
                       C31025 +
                   (C9158 * C8903 + (C9150 + C9149) * C8904 +
                    ((C113 * C2005 + C30897 * C2016) * C4742 +
                     (C113 * C2017 + C30897 * C2023) * C30662) *
                        C8905) *
                       C31001) *
                      C30714 * C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C1074 -
                   ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C1075 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C31032 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                       C30732 * C1075 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C1074 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C31019 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C1074 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C1075 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   (C9159 + C9160) * C8904 + C9165 * C8905) *
                      C30732 * C1142 -
                  ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                   ((C113 * C305 + C30897 * C323) * C30662 +
                    (C113 * C293 + C30897 * C306) * C4742) *
                       C8903) *
                      C30732 * C1143 +
                  (((C113 * C294 + C30897 * C307) * C4742 +
                    (C113 * C308 + C30897 * C324) * C30662) *
                       C8903 +
                   ((C113 * C1287 + C30897 * C1302) * C4742 +
                    (C113 * C1301 + C30897 * C1314) * C30662) *
                       C8904 +
                   ((C113 * C1288 + C30897 * C1303) * C4742 +
                    (C113 * C1304 + C30897 * C1315) * C30662) *
                       C8905) *
                      C30732 * C1144 -
                  (((C113 * C5598 + C30897 * C5604) * C30662 +
                    (C113 * C5595 + C30897 * C5599) * C4742) *
                       C8905 +
                   ((C113 * C1702 + C30897 * C1707) * C30662 +
                    (C113 * C1698 + C30897 * C1701) * C4742) *
                       C8904 +
                   ((C113 * C1158 + C30897 * C1168) * C30662 +
                    (C113 * C1150 + C30897 * C1159) * C4742) *
                       C8903) *
                      C30732 * C1145 +
                  (((C113 * C1151 + C30897 * C1160) * C4742 +
                    (C113 * C1161 + C30897 * C1169) * C30662) *
                       C8903 +
                   ((C113 * C5596 + C30897 * C5601) * C4742 +
                    (C113 * C5600 + C30897 * C5605) * C30662) *
                       C8904 +
                   ((C113 * C5597 + C30897 * C5602) * C4742 +
                    (C113 * C5603 + C30897 * C5606) * C30662) *
                       C8905) *
                      C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C31036 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C31025 +
                   (C9165 * C8903 + (C9164 + C9163) * C8904 +
                    ((C113 * C2003 + C30897 * C2012) * C4742 +
                     (C113 * C2013 + C30897 * C2021) * C30662) *
                        C8905) *
                       C31001) *
                      C1074 +
                  (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                    (C9843 + C9844) * C8905) *
                       C31025 -
                   (C9822 * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C31036 -
                   (((C113 * C6250 + C30897 * C6253) * C30662 +
                     (C113 * C6244 + C30897 * C6248) * C4742) *
                        C8905 +
                    (C9844 + C9843) * C8904 + C9822 * C8903) *
                       C31001) *
                      C1075 +
                  ((((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    (C9845 + C9846) * C8904 + C9851 * C8905) *
                       C31036 -
                   ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                    (C9846 + C9845) * C8903) *
                       C31025 +
                   (C9851 * C8903 + (C9850 + C9849) * C8904 +
                    ((C113 * C6245 + C30897 * C6249) * C4742 +
                     (C113 * C6251 + C30897 * C6254) * C30662) *
                        C8905) *
                       C31001) *
                      C30998) *
                 C30686) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C1074 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C1075 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30968 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C30998) *
                      C30953 +
                  (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C1074 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30968 -
                    (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                     C960 * C102 + C959 * C114) *
                        C30911 * C30819) *
                       C1075 +
                   ((C1600 * C114 + C1599 * C102 + C1598 * C115 + C1597 * C103 +
                     (C113 * C1584 + C30897 * C1585) * C116 +
                     (C113 * C1586 + C30897 * C1587) * C104) *
                        C30911 * C30819 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30968) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30968 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C30819) *
                      C30714 * C656 +
                  ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                    C553 * C116 + C554 * C104) *
                       C30911 * C30819 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30968) *
                      C30714 * C657 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30968 -
                   (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                    C545 * C102 + C546 * C114) *
                       C30911 * C30819) *
                      C30714 * C658 +
                  ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                    (C113 * C770 + C30897 * C771) * C116 +
                    (C113 * C772 + C30897 * C773) * C104) *
                       C30911 * C30819 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30968) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30968 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C30819) *
                      C30714 * C656 +
                  (((C4739 * C481 + C4735 * C493 + C4740 * C927 + C4736 * C933 +
                     C4741 * C1286 + C4737 * C1300) *
                        C4742 +
                    (C4739 * C492 + C4735 * C511 + C4740 * C934 + C4736 * C942 +
                     C4741 * C1299 + C4737 * C1313) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30968) *
                      C30714 * C657 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30968 -
                   ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                     C4736 * C943 + C4739 * C490 + C4735 * C510) *
                        C30662 +
                    (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                     C4736 * C935 + C4739 * C480 + C4735 * C491) *
                        C4742) *
                       C30911 * C30819) *
                      C30714 * C658 +
                  (((C4739 * C486 + C4735 * C502 + C4740 * C929 + C4736 * C938 +
                     C4741 * C1584 + C4737 * C1585) *
                        C4742 +
                    (C4739 * C503 + C4735 * C516 + C4740 * C937 + C4736 * C944 +
                     C4741 * C1586 + C4737 * C1587) *
                        C30662) *
                       C30911 * C30819 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30968) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C1074 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C1075 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C30998) *
                      C30953 +
                  ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C1074 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                      C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                         C30662 +
                     (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                      C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                         C4742) *
                        C30911 * C30819) *
                       C1075 +
                   (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                      C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                         C4742 +
                     (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                      C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30968) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30968 -
                   ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                    (C9160 + C9159) * C8903) *
                       C30819) *
                      C30714 * C656 +
                  (((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                    (C9143 + C9144) * C8905) *
                       C30819 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30968) *
                      C30714 * C657 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30968 -
                   ((C9149 + C9150) * C8905 + (C9148 + C9147) * C8904 +
                    (C9146 + C9145) * C8903) *
                       C30819) *
                      C30714 * C658 +
                  (((C9362 + C9363) * C8903 + (C9364 + C9365) * C8904 +
                    ((C113 * C2288 + C30897 * C2289) * C4742 +
                     (C113 * C2290 + C30897 * C2291) * C30662) *
                        C8905) *
                       C30819 -
                   ((C9365 + C9364) * C8905 + (C9363 + C9362) * C8904 +
                    (C170 * C30662 + C171 * C4742) * C8903) *
                       C30968) *
                      C30714 * C31002)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C117 + C30897 * C124) * C4742 +
                      (C113 * C125 + C30897 * C138) * C30662) *
                         C8903 +
                     (C9159 + C9160) * C8904 + C9165 * C8905) *
                        C30968 -
                    ((C9163 + C9164) * C8905 + (C9162 + C9161) * C8904 +
                     (C9160 + C9159) * C8903) *
                        C30819) *
                       C1074 +
                   (((C9532 + C9533) * C8903 + (C9534 + C9535) * C8904 +
                     (C9843 + C9844) * C8905) *
                        C30819 -
                    (C9822 * C8905 + (C9533 + C9532) * C8904 +
                     ((C113 * C305 + C30897 * C323) * C30662 +
                      (C113 * C293 + C30897 * C306) * C4742) *
                         C8903) *
                        C30968) *
                       C1075 +
                   ((((C113 * C294 + C30897 * C307) * C4742 +
                      (C113 * C308 + C30897 * C324) * C30662) *
                         C8903 +
                     (C9845 + C9846) * C8904 + C9851 * C8905) *
                        C30968 -
                    ((C9849 + C9850) * C8905 + (C9848 + C9847) * C8904 +
                     (C9846 + C9845) * C8903) *
                        C30819) *
                       C30998) *
                      C30953 +
                  ((((C9139 + C9140) * C8903 + (C9141 + C9142) * C8904 +
                     (C9143 + C9144) * C8905) *
                        C30819 -
                    (C9157 * C8905 + (C9140 + C9139) * C8904 +
                     (C167 * C30662 + C166 * C4742) * C8903) *
                        C30968) *
                       C1074 +
                   (((C359 * C4742 + C358 * C30662) * C8903 +
                     (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                        C30968 -
                    (((C113 * C2408 + C30897 * C2412) * C30662 +
                      (C113 * C2403 + C30897 * C2407) * C4742) *
                         C8905 +
                     (C9523 + C9522) * C8904 + (C9521 + C9520) * C8903) *
                        C30819) *
                       C1075 +
                   (((C10096 + C10097) * C8903 + (C10104 + C10105) * C8904 +
                     ((C113 * C6503 + C30897 * C6504) * C4742 +
                      (C113 * C6505 + C30897 * C6506) * C30662) *
                         C8905) *
                        C30819 -
                    ((C10105 + C10104) * C8905 + (C10097 + C10096) * C8904 +
                     (C361 * C30662 + C360 * C4742) * C8903) *
                        C30968) *
                       C30998) *
                      C30697)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C31035 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C31023 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C30998) *
                      C288 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C31023 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C31035 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C30998) *
                      C289 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C31035 -
                   ((C113 * C317 + C30897 * C329) * C104 +
                    (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                    C364 * C115 + C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C31023 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C30897 * C124) * C114 +
                   (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C30911 * C30732 * C30714 * C108 -
                  (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                   C167 * C102 + C166 * C114) *
                      C30911 * C30732 * C30714 * C109 +
                  (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                   C172 * C116 + C173 * C104) *
                      C30911 * C30732 * C30714 * C110 -
                  (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                   C170 * C102 + C171 * C114) *
                      C30911 * C30732 * C30714 * C111 +
                  (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                   (C113 * C123 + C30897 * C136) * C116 +
                   (C113 * C137 + C30897 * C144) * C104) *
                      C30911 * C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1074 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1075 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                    C364 * C116 + C365 * C104) *
                       C30911 * C30732 * C1075 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C1074 -
                   (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                    C361 * C102 + C360 * C114) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C1074 -
                   (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                    C356 * C102 + C357 * C114) *
                       C30911 * C30732 * C1075 +
                   (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                    (C113 * C300 + C30897 * C319) * C116 +
                    (C113 * C320 + C30897 * C330) * C104) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C30897 * C124) * C114 +
                   (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                   C167 * C103 + C168 * C116 + C169 * C104) *
                      C30911 * C30732 * C1142 -
                  (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                   (C113 * C305 + C30897 * C323) * C102 +
                   (C113 * C293 + C30897 * C306) * C114) *
                      C30911 * C30732 * C1143 +
                  ((C113 * C294 + C30897 * C307) * C114 +
                   (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                   C361 * C103 + C362 * C116 + C363 * C104) *
                      C30911 * C30732 * C1144 -
                  ((C113 * C1154 + C30897 * C1166) * C104 +
                   (C113 * C1148 + C30897 * C1155) * C116 +
                   (C113 * C1156 + C30897 * C1167) * C103 +
                   (C113 * C1149 + C30897 * C1157) * C115 +
                   (C113 * C1158 + C30897 * C1168) * C102 +
                   (C113 * C1150 + C30897 * C1159) * C114) *
                      C30911 * C30732 * C1145 +
                  ((C113 * C1151 + C30897 * C1160) * C114 +
                   (C113 * C1161 + C30897 * C1169) * C102 +
                   (C113 * C1152 + C30897 * C1162) * C115 +
                   (C113 * C1163 + C30897 * C1170) * C103 +
                   (C113 * C1153 + C30897 * C1164) * C116 +
                   (C113 * C1165 + C30897 * C1171) * C104) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C30714 * C108 -
                  ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                    C4739 * C127 + C4735 * C139) *
                       C30662 +
                   (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                    C4739 * C118 + C4735 * C126) *
                       C4742) *
                      C30911 * C30732 * C30714 * C109 +
                  ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                    C4741 * C296 + C4737 * C311) *
                       C4742 +
                   (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                    C4741 * C312 + C4737 * C326) *
                       C30662) *
                      C30911 * C30732 * C30714 * C110 -
                  ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                    C4739 * C130 + C4735 * C141) *
                       C30662 +
                   (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                    C4739 * C120 + C4735 * C131) *
                       C4742) *
                      C30911 * C30732 * C30714 * C111 +
                  ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                    C4741 * C300 + C4737 * C319) *
                       C4742 +
                   (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                    C4741 * C320 + C4737 * C330) *
                       C30662) *
                      C30911 * C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C288 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C31023 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C289 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C31035 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C31023 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C31032 +
                  (((C4739 * C292 + C4735 * C304 + C4740 * C295 + C4736 * C309 +
                     C4741 * C1149 + C4737 * C1157) *
                        C4742 +
                    (C4739 * C303 + C4735 * C322 + C4740 * C310 + C4736 * C325 +
                     C4741 * C1156 + C4737 * C1167) *
                        C30662) *
                       C30911 * C30732 * C1075 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                     C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                        C30662 +
                    (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                     C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                        C4742) *
                       C30911 * C30732 * C30998) *
                      C31019 +
                  (((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C1074 -
                   ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                     C4736 * C326 + C4739 * C301 + C4735 * C321) *
                        C30662 +
                    (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                     C4736 * C311 + C4739 * C291 + C4735 * C302) *
                        C4742) *
                       C30911 * C30732 * C1075 +
                   ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                     C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                        C4742 +
                    (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                     C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                        C30662) *
                       C30911 * C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                    C4741 * C294 + C4737 * C307) *
                       C4742 +
                   (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                    C4741 * C308 + C4737 * C324) *
                       C30662) *
                      C30911 * C30732 * C1142 -
                  ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                    C4736 * C324 + C4739 * C305 + C4735 * C323) *
                       C30662 +
                   (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                    C4736 * C307 + C4739 * C293 + C4735 * C306) *
                       C4742) *
                      C30911 * C30732 * C1143 +
                  ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                    C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                       C4742 +
                   (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                    C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                       C30662) *
                      C30911 * C30732 * C1144 -
                  ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                    C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                       C30662 +
                   (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                    C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                       C4742) *
                      C30911 * C30732 * C1145 +
                  ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                    C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                       C4742 +
                   (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                    C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                       C30662) *
                      C30911 * C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   ((C113 * C482 + C30897 * C495) * C4742 +
                    (C113 * C494 + C30897 * C512) * C30662) *
                       C8904 +
                   ((C113 * C483 + C30897 * C496) * C4742 +
                    (C113 * C497 + C30897 * C513) * C30662) *
                       C8905) *
                      C30732 * C30714 * C108 -
                  ((C550 * C30662 + C549 * C4742) * C8905 +
                   (C547 * C30662 + C548 * C4742) * C8904 +
                   (C167 * C30662 + C166 * C4742) * C8903) *
                      C30732 * C30714 * C109 +
                  ((C168 * C4742 + C169 * C30662) * C8903 +
                   (C546 * C4742 + C545 * C30662) * C8904 +
                   (C551 * C4742 + C552 * C30662) * C8905) *
                      C30732 * C30714 * C110 -
                  ((C555 * C30662 + C556 * C4742) * C8905 +
                   (C554 * C30662 + C553 * C4742) * C8904 +
                   (C170 * C30662 + C171 * C4742) * C8903) *
                      C30732 * C30714 * C111 +
                  ((C172 * C4742 + C173 * C30662) * C8903 +
                   (C780 * C4742 + C779 * C30662) * C8904 +
                   ((C113 * C489 + C30897 * C508) * C4742 +
                    (C113 * C509 + C30897 * C519) * C30662) *
                       C8905) *
                      C30732 * C30714 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    ((C113 * C482 + C30897 * C495) * C4742 +
                     (C113 * C494 + C30897 * C512) * C30662) *
                        C8904 +
                    ((C113 * C483 + C30897 * C496) * C4742 +
                     (C113 * C497 + C30897 * C513) * C30662) *
                        C8905) *
                       C30732 * C31035 -
                   (((C113 * C1295 + C30897 * C1311) * C30662 +
                     (C113 * C1284 + C30897 * C1296) * C4742) *
                        C8905 +
                    ((C113 * C932 + C30897 * C941) * C30662 +
                     (C113 * C926 + C30897 * C931) * C4742) *
                        C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C31023 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C288 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C959 * C4742 + C960 * C30662) * C8904 +
                    (C2186 * C4742 + C2185 * C30662) * C8905) *
                       C30732 * C31023 -
                   ((C550 * C30662 + C549 * C4742) * C8905 +
                    (C547 * C30662 + C548 * C4742) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C31035 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C289 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C546 * C4742 + C545 * C30662) * C8904 +
                    (C551 * C4742 + C552 * C30662) * C8905) *
                       C30732 * C31035 -
                   ((C2183 * C30662 + C2184 * C4742) * C8905 +
                    (C962 * C30662 + C961 * C4742) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C31023 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C4742 +
                     (C113 * C125 + C30897 * C138) * C30662) *
                        C8903 +
                    (C9159 + C9160) * C8904 + C9165 * C8905) *
                       C30732 * C1074 -
                   ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                    ((C113 * C305 + C30897 * C323) * C30662 +
                     (C113 * C293 + C30897 * C306) * C4742) *
                        C8903) *
                       C30732 * C1075 +
                   (((C113 * C294 + C30897 * C307) * C4742 +
                     (C113 * C308 + C30897 * C324) * C30662) *
                        C8903 +
                    ((C113 * C1287 + C30897 * C1302) * C4742 +
                     (C113 * C1301 + C30897 * C1314) * C30662) *
                        C8904 +
                    ((C113 * C1288 + C30897 * C1303) * C4742 +
                     (C113 * C1304 + C30897 * C1315) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C31032 +
                  (((C359 * C4742 + C358 * C30662) * C8903 +
                    (C9520 + C9521) * C8904 + (C9522 + C9523) * C8905) *
                       C30732 * C1075 -
                   (C9157 * C8905 + (C9140 + C9139) * C8904 +
                    (C167 * C30662 + C166 * C4742) * C8903) *
                       C30732 * C1074 -
                   (((C113 * C1306 + C30897 * C1316) * C30662 +
                     (C113 * C1289 + C30897 * C1305) * C4742) *
                        C8905 +
                    (C1599 * C30662 + C1600 * C4742) * C8904 +
                    (C361 * C30662 + C360 * C4742) * C8903) *
                       C30732 * C30998) *
                      C31019 +
                  (((C168 * C4742 + C169 * C30662) * C8903 +
                    (C9145 + C9146) * C8904 + C9158 * C8905) *
                       C30732 * C1074 -
                   ((C9527 + C9526) * C8905 + (C9525 + C9524) * C8904 +
                    (C356 * C30662 + C357 * C4742) * C8903) *
                       C30732 * C1075 +
                   ((C362 * C4742 + C363 * C30662) * C8903 +
                    (C1598 * C4742 + C1597 * C30662) * C8904 +
                    ((C113 * C1290 + C30897 * C1307) * C4742 +
                     (C113 * C1308 + C30897 * C1317) * C30662) *
                        C8905) *
                       C30732 * C30998) *
                      C30992)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C30897 * C124) * C4742 +
                    (C113 * C125 + C30897 * C138) * C30662) *
                       C8903 +
                   (C9159 + C9160) * C8904 + C9165 * C8905) *
                      C30732 * C1142 -
                  ((C9535 + C9534) * C8905 + (C9533 + C9532) * C8904 +
                   ((C113 * C305 + C30897 * C323) * C30662 +
                    (C113 * C293 + C30897 * C306) * C4742) *
                       C8903) *
                      C30732 * C1143 +
                  (((C113 * C294 + C30897 * C307) * C4742 +
                    (C113 * C308 + C30897 * C324) * C30662) *
                       C8903 +
                   ((C113 * C1287 + C30897 * C1302) * C4742 +
                    (C113 * C1301 + C30897 * C1314) * C30662) *
                       C8904 +
                   ((C113 * C1288 + C30897 * C1303) * C4742 +
                    (C113 * C1304 + C30897 * C1315) * C30662) *
                       C8905) *
                      C30732 * C1144 -
                  (((C113 * C5598 + C30897 * C5604) * C30662 +
                    (C113 * C5595 + C30897 * C5599) * C4742) *
                       C8905 +
                   ((C113 * C1702 + C30897 * C1707) * C30662 +
                    (C113 * C1698 + C30897 * C1701) * C4742) *
                       C8904 +
                   ((C113 * C1158 + C30897 * C1168) * C30662 +
                    (C113 * C1150 + C30897 * C1159) * C4742) *
                       C8903) *
                      C30732 * C1145 +
                  (((C113 * C1151 + C30897 * C1160) * C4742 +
                    (C113 * C1161 + C30897 * C1169) * C30662) *
                       C8903 +
                   ((C113 * C5596 + C30897 * C5601) * C4742 +
                    (C113 * C5600 + C30897 * C5605) * C30662) *
                       C8904 +
                   ((C113 * C5597 + C30897 * C5602) * C4742 +
                    (C113 * C5603 + C30897 * C5606) * C30662) *
                       C8905) *
                      C30732 * C1146) *
                 C30686) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C30773 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C30780 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30732 * C2880) *
              C30691 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C30780 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C30773 -
           ((C20426 + C20425 + C20424 + C20423) * C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C2880) *
              C30700 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C30773 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C30780 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C2880) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C30773 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C30780 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C30968 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C2880) *
              C2620 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C30773 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30780 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C30968) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C31042 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C31038 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30732 * C31028 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30732 * C31008) *
              C2620 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C31038 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C31042 -
           ((C20426 + C20425 + C20424 + C20423) * C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C31028 +
           ((C1438 * C13228 + C1437 * C13224 + C1436 * C13229 +
             C1435 * C13225) *
                C18918 +
            (C20228 * C13228 + C20227 * C13224 +
             (C113 * C1700 + C30897 * C1705) * C13229 +
             (C113 * C1706 + C30897 * C1709) * C13225) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C2512 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C30777) *
              C31041 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C30777 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C2512) *
              C31034 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C2512 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C30777) *
              C31021 +
          (((C364 * C13228 + C365 * C13224 + C670 * C13229 + C669 * C13225) *
                C18918 +
            (C964 * C13228 + C963 * C13224 +
             (C113 * C930 + C30897 * C939) * C13229 +
             (C113 * C940 + C30897 * C945) * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C31036 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C31025 +
            ((C19220 + C19219 + C19218 + C19217) * C18918 +
             (C20935 + C20936 + C20937 + C20938) * C18919) *
                C31001) *
               C2512 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C31025 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C31036 -
            ((C21405 + C21406 + C21407 + C21408) * C18919 +
             (C20084 + C20083 + C20082 + C20081) * C18918) *
                C31001) *
               C30777) *
              C2620 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C31025 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C31036 -
            ((C21271 + C21272 + C21273 + C21274) * C18919 +
             (C19228 + C19227 + C19226 + C19225) * C18918) *
                C31001) *
               C2512 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C31036 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C31025 +
            ((C21140 + C21139 + C21138 + C21137) * C18918 +
             (C10684 * C13228 + C10683 * C13224 +
              (C113 * C2404 + C30897 * C2409) * C13229 +
              (C113 * C2410 + C30897 * C2413) * C13225) *
                 C18919) *
                C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C2512 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C30691 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C2512 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C30700 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C30968 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C2512 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C2512 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C30777) *
              C31041 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C30777 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C2512) *
              C31034 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C2512 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C30777) *
              C31021 +
          (((C364 * C13228 + C365 * C13224 + C670 * C13229 + C669 * C13225) *
                C18918 +
            (C964 * C13228 + C963 * C13224 +
             (C113 * C930 + C30897 * C939) * C13229 +
             (C113 * C940 + C30897 * C945) * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30732 * C2512) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C31042 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C31038 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30732 * C31028 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30732 * C31008) *
              C2620 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C31038 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C31042 -
           ((C20426 + C20425 + C20424 + C20423) * C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C31028 +
           ((C1438 * C13228 + C1437 * C13224 + C1436 * C13229 +
             C1435 * C13225) *
                C18918 +
            (C20228 * C13228 + C20227 * C13224 +
             (C113 * C1700 + C30897 * C1705) * C13229 +
             (C113 * C1706 + C30897 * C1709) * C13225) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C30773 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C30780 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C3274 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C2880) *
              C30953 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C30773 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30780 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C3274) *
               C2880) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C30897 * C124) * C13228 +
                     (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
                     C167 * C13225) *
                        C18918 +
                    (C19213 + C19214 + C19215 + C19216) * C18919) *
                       C30815 -
                   ((C19217 + C19218 + C19219 + C19220) * C18919 +
                    (C19216 + C19215 + C19214 + C19213) * C18918) *
                       C30822 +
                   ((C19220 + C19219 + C19218 + C19217) * C18918 +
                    (C20935 + C20936 + C20937 + C20938) * C18919) *
                       C3782) *
                      C30773 +
                  (((C19695 + C19696 + C19697 + C19698) * C18918 +
                    (C20081 + C20082 + C20083 + C20084) * C18919) *
                       C30822 -
                   ((C19698 + C19697 + C19696 + C19695) * C18919 +
                    (C358 * C13225 + C359 * C13229 +
                     (C113 * C305 + C30897 * C323) * C13224 +
                     (C113 * C293 + C30897 * C306) * C13228) *
                        C18918) *
                       C30815 -
                   ((C21405 + C21406 + C21407 + C21408) * C18919 +
                    (C20084 + C20083 + C20082 + C20081) * C18918) *
                       C3782) *
                      C30780 +
                  ((((C113 * C294 + C30897 * C307) * C13228 +
                     (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
                     C361 * C13225) *
                        C18918 +
                    (C20085 + C20086 + C20087 + C20088) * C18919) *
                       C30815 -
                   ((C20089 + C20090 + C20091 + C20092) * C18919 +
                    (C20088 + C20087 + C20086 + C20085) * C18918) *
                       C30822 +
                   ((C20092 + C20091 + C20090 + C20089) * C18918 +
                    (C9842 * C13228 + C9841 * C13224 +
                     (C113 * C6503 + C30897 * C6504) * C13229 +
                     (C113 * C6505 + C30897 * C6506) * C13225) *
                        C18919) *
                       C3782) *
                      C2880) *
                 C30686) /
                (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C3274 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C31042 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C30819 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C3274) *
              C31038 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C3274 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C30819) *
              C31028 +
          (((C20557 + C20558 + C20559 + C20560) * C18918 +
            (C10214 * C13228 + C10215 * C13224 +
             (C113 * C6401 + C30897 * C6402) * C13229 +
             (C113 * C6403 + C30897 * C6404) * C13225) *
                C18919) *
               C30819 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C2512 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C31032 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C2512 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C31019 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C3274 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C2512 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31043 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31040 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C20935 + C20936 + C20937 + C20938) * C18919) *
               C31031 -
           ((C20939 + C20940 + C20941 + C20942) * C18919 +
            (C20938 + C20937 + C20936 + C20935) * C18918) *
               C31014) *
              C2512 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C31040 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C31043 -
           ((C21405 + C21406 + C21407 + C21408) * C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C31031 +
           ((C21408 + C21407 + C21406 + C21405) * C18918 +
            (C10906 * C13228 + C10905 * C13224 +
             (C113 * C10673 + C30897 * C10674) * C13229 +
             (C113 * C10675 + C30897 * C10676) * C13225) *
                C18919) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30815 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30822 +
            ((C19220 + C19219 + C19218 + C19217) * C18918 +
             (C20935 + C20936 + C20937 + C20938) * C18919) *
                C3782) *
               C2512 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30822 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30815 -
            ((C21405 + C21406 + C21407 + C21408) * C18919 +
             (C20084 + C20083 + C20082 + C20081) * C18918) *
                C3782) *
               C30777) *
              C30953 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30822 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30815 -
            ((C21271 + C21272 + C21273 + C21274) * C18919 +
             (C19228 + C19227 + C19226 + C19225) * C18918) *
                C3782) *
               C2512 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30815 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30822 +
            ((C21140 + C21139 + C21138 + C21137) * C18918 +
             (C10684 * C13228 + C10683 * C13224 +
              (C113 * C2404 + C30897 * C2409) * C13229 +
              (C113 * C2410 + C30897 * C2413) * C13225) *
                 C18919) *
                C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C2512 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C31032 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C2512 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C31019 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C3274 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C2512 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C3274 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C31042 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C30819 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C3274) *
              C31038 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C3274 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C30819) *
              C31028 +
          (((C20557 + C20558 + C20559 + C20560) * C18918 +
            (C10214 * C13228 + C10215 * C13224 +
             (C113 * C6401 + C30897 * C6402) * C13229 +
             (C113 * C6403 + C30897 * C6404) * C13225) *
                C18919) *
               C30819 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C3274) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1416 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1417 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30732 * C1418 -
           ((C20227 * C13225 + C20228 * C13229 + C10213 * C13224 +
             C10212 * C13228) *
                C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30732 * C31008) *
              C30953 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1417 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1416 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C1418 +
           ((C1438 * C13228 + C1437 * C13224 + C1436 * C13229 +
             C1435 * C13225) *
                C18918 +
            (C20228 * C13228 + C20227 * C13224 +
             (C113 * C1700 + C30897 * C1705) * C13229 +
             (C113 * C1706 + C30897 * C1709) * C13225) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C30967 -
           ((C960 * C13225 + C959 * C13229 + C9529 * C13224 + C9528 * C13228) *
                C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C30777) *
              C656 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C959 * C13228 + C960 * C13224 + C961 * C13229 + C962 * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C30967) *
              C657 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C30967 -
           ((C963 * C13225 + C964 * C13229 + C962 * C13224 + C961 * C13228) *
                C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C30777) *
              C658 +
          (((C364 * C13228 + C365 * C13224 + C670 * C13229 + C669 * C13225) *
                C18918 +
            (C964 * C13228 + C963 * C13224 +
             (C113 * C930 + C30897 * C939) * C13229 +
             (C113 * C940 + C30897 * C945) * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
                C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C1820 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C1821 +
            ((C19220 + C19219 + C19218 + C19217) * C18918 +
             (C20935 + C20936 + C20937 + C20938) * C18919) *
                C31001) *
               C30967 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C1821 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C1820 -
            ((C10683 * C13225 + C10684 * C13229 + C9836 * C13224 +
              C9835 * C13228) *
                 C18919 +
             (C20084 + C20083 + C20082 + C20081) * C18918) *
                C31001) *
               C30777) *
              C30953 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C1821 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C1820 -
            ((C2301 * C13225 + C2302 * C13229 + C2303 * C13224 +
              C2304 * C13228) *
                 C18919 +
             (C19228 + C19227 + C19226 + C19225) * C18918) *
                C31001) *
               C30967 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C1820 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C1821 +
            ((C21140 + C21139 + C21138 + C21137) * C18918 +
             (C10684 * C13228 + C10683 * C13224 +
              (C113 * C2404 + C30897 * C2409) * C13229 +
              (C113 * C2410 + C30897 * C2413) * C13225) *
                 C18919) *
                C31001) *
               C30777) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30968 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C1416 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C30819 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30968) *
              C1417 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30968 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C30819) *
              C1418 +
          (((C20557 + C20558 + C20559 + C20560) * C18918 +
            (C10214 * C13228 + C10215 * C13224 +
             (C113 * C6401 + C30897 * C6402) * C13229 +
             (C113 * C6403 + C30897 * C6404) * C13225) *
                C18919) *
               C30819 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C30967 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C9530 * C13228 + C9531 * C13224 + C2186 * C13229 +
              C2185 * C13225) *
                 C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C288 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C30967 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C2183 * C13225 + C2184 * C13229 + C2185 * C13224 +
              C2186 * C13228) *
                 C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C289 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C30968 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C30967 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C2284 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C2285 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C20935 + C20936 + C20937 + C20938) * C18919) *
               C2286 -
           ((C20939 + C20940 + C20941 + C20942) * C18919 +
            (C20938 + C20937 + C20936 + C20935) * C18918) *
               C31014) *
              C30967 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C2285 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C2284 -
           ((C21405 + C21406 + C21407 + C21408) * C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C2286 +
           ((C21408 + C21407 + C21406 + C21405) * C18918 +
            (C10906 * C13228 + C10905 * C13224 +
             (C113 * C10673 + C30897 * C10674) * C13229 +
             (C113 * C10675 + C30897 * C10676) * C13225) *
                C18919) *
               C31014) *
              C30777) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C30897 * C124) * C13228 +
                (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
                C167 * C13225) *
                   C18918 +
               (C9151 * C13228 + C9152 * C13224 + C548 * C13229 +
                C547 * C13225) *
                   C18919) *
                  C30732 * C30714 * C108 -
              ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
                   C18919 +
               (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                   C18918) *
                  C30732 * C30714 * C109 +
              ((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                   C18918 +
               (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
                   C18919) *
                  C30732 * C30714 * C110 -
              ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
                   C18919 +
               (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                   C18918) *
                  C30732 * C30714 * C111 +
              ((C172 * C13228 + C173 * C13224 + C175 * C13229 + C174 * C13225) *
                   C18918 +
               (C780 * C13228 + C779 * C13224 +
                (C113 * C770 + C30897 * C771) * C13229 +
                (C113 * C772 + C30897 * C773) * C13225) *
                   C18919) *
                  C30732 * C30714 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C30897 * C124) * C13228 +
                 (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
                 C167 * C13225) *
                    C18918 +
                (C9151 * C13228 + C9152 * C13224 + C548 * C13229 +
                 C547 * C13225) *
                    C18919) *
                   C30732 * C31035 -
               ((C960 * C13225 + C959 * C13229 + C9529 * C13224 +
                 C9528 * C13228) *
                    C18919 +
                (C358 * C13225 + C359 * C13229 +
                 (C113 * C305 + C30897 * C323) * C13224 +
                 (C113 * C293 + C30897 * C306) * C13228) *
                    C18918) *
                   C30732 * C31023 +
               (((C113 * C294 + C30897 * C307) * C13228 +
                 (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
                 C361 * C13225) *
                    C18918 +
                (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
                 C1599 * C13225) *
                    C18919) *
                   C30732 * C30998) *
                  C288 +
              (((C359 * C13228 + C358 * C13224 + C357 * C13229 +
                 C356 * C13225) *
                    C18918 +
                (C959 * C13228 + C960 * C13224 + C961 * C13229 +
                 C962 * C13225) *
                    C18919) *
                   C30732 * C31023 -
               ((C545 * C13225 + C546 * C13229 + C547 * C13224 +
                 C548 * C13228) *
                    C18919 +
                (C169 * C13225 + C168 * C13229 + C167 * C13224 +
                 C166 * C13228) *
                    C18918) *
                   C30732 * C31035 -
               ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
                 C1600 * C13228) *
                    C18919 +
                (C363 * C13225 + C362 * C13229 + C361 * C13224 +
                 C360 * C13228) *
                    C18918) *
                   C30732 * C30998) *
                  C289 +
              (((C168 * C13228 + C169 * C13224 + C171 * C13229 +
                 C170 * C13225) *
                    C18918 +
                (C546 * C13228 + C545 * C13224 + C553 * C13229 +
                 C554 * C13225) *
                    C18919) *
                   C30732 * C31035 -
               ((C963 * C13225 + C964 * C13229 + C962 * C13224 +
                 C961 * C13228) *
                    C18919 +
                (C365 * C13225 + C364 * C13229 + C356 * C13224 +
                 C357 * C13228) *
                    C18918) *
                   C30732 * C31023 +
               ((C362 * C13228 + C363 * C13224 + C367 * C13229 +
                 C366 * C13225) *
                    C18918 +
                (C1598 * C13228 + C1597 * C13224 +
                 (C113 * C1584 + C30897 * C1585) * C13229 +
                 (C113 * C1586 + C30897 * C1587) * C13225) *
                    C18919) *
                   C30732 * C30998) *
                  C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31036 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31025 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C30714 * C288 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C31025 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C31036 -
           ((C2301 * C13225 + C2302 * C13229 + C2303 * C13224 +
             C2304 * C13228) *
                C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C31001) *
              C30714 * C289 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C31036 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C31025 +
           ((C19236 + C19235 + C19234 + C19233) * C18918 +
            (C2302 * C13228 + C2301 * C13224 +
             (C113 * C2288 + C30897 * C2289) * C13229 +
             (C113 * C2290 + C30897 * C2291) * C13225) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1074 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1075 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1075 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1074 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C1074 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C1075 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C19213 + C19214 + C19215 + C19216) * C18919) *
              C30732 * C1142 -
          ((C19698 + C19697 + C19696 + C19695) * C18919 +
           (C358 * C13225 + C359 * C13229 +
            (C113 * C305 + C30897 * C323) * C13224 +
            (C113 * C293 + C30897 * C306) * C13228) *
               C18918) *
              C30732 * C1143 +
          (((C113 * C294 + C30897 * C307) * C13228 +
            (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
            C361 * C13225) *
               C18918 +
           (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 + C1599 * C13225) *
               C18919) *
              C30732 * C1144 -
          (((C113 * C1704 + C30897 * C1708) * C13225 +
            (C113 * C1699 + C30897 * C1703) * C13229 + C10213 * C13224 +
            C10212 * C13228) *
               C18919 +
           (C1437 * C13225 + C1438 * C13229 +
            (C113 * C1158 + C30897 * C1168) * C13224 +
            (C113 * C1150 + C30897 * C1159) * C13228) *
               C18918) *
              C30732 * C1145 +
          (((C113 * C1151 + C30897 * C1160) * C13228 +
            (C113 * C1161 + C30897 * C1169) * C13224 +
            (C113 * C1152 + C30897 * C1162) * C13229 +
            (C113 * C1163 + C30897 * C1170) * C13225) *
               C18918 +
           ((C113 * C5596 + C30897 * C5601) * C13228 +
            (C113 * C5600 + C30897 * C5605) * C13224 +
            (C113 * C5855 + C30897 * C5856) * C13229 +
            (C113 * C5857 + C30897 * C5858) * C13225) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31036 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31025 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C1074 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C31025 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C31036 -
           ((C10683 * C13225 + C10684 * C13229 + C9836 * C13224 +
             C9835 * C13228) *
                C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C31001) *
              C1075 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C31036 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C31025 +
           ((C20092 + C20091 + C20090 + C20089) * C18918 +
            (C9842 * C13228 + C9841 * C13224 +
             (C113 * C6503 + C30897 * C6504) * C13229 +
             (C113 * C6505 + C30897 * C6506) * C13225) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C1820 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C1821 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C30714 * C31032 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C1821 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C1820 -
           ((C2301 * C13225 + C2302 * C13229 + C2303 * C13224 +
             C2304 * C13228) *
                C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C31001) *
              C30714 * C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C1820 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C1821 +
           ((C19236 + C19235 + C19234 + C19233) * C18918 +
            (C2302 * C13228 + C2301 * C13224 +
             (C113 * C2288 + C30897 * C2289) * C13229 +
             (C113 * C2290 + C30897 * C2291) * C13225) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C1820 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C1821 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C31035 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C1821 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C1820 -
           ((C10683 * C13225 + C10684 * C13229 + C9836 * C13224 +
             C9835 * C13228) *
                C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C31001) *
              C31023 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C1820 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C1821 +
           ((C20092 + C20091 + C20090 + C20089) * C18918 +
            (C9842 * C13228 + C9841 * C13224 +
             (C113 * C6503 + C30897 * C6504) * C13229 +
             (C113 * C6505 + C30897 * C6506) * C13225) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C19213 + C19214 + C19215 + C19216) * C18919) *
              C1995 -
          ((C19217 + C19218 + C19219 + C19220) * C18919 +
           (C19216 + C19215 + C19214 + C19213) * C18918) *
              C1996 +
          ((C19220 + C19219 + C19218 + C19217) * C18918 +
           (C20935 + C20936 + C20937 + C20938) * C18919) *
              C1997 -
          ((C20939 + C20940 + C20941 + C20942) * C18919 +
           (C20938 + C20937 + C20936 + C20935) * C18918) *
              C1998 +
          ((C20942 + C20941 + C20940 + C20939) * C18918 +
           (C10522 * C13228 + C10521 * C13224 +
            (C113 * C10784 + C30897 * C10785) * C13229 +
            (C113 * C10786 + C30897 * C10787) * C13225) *
               C18919) *
              C1999) *
         C30714 * C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C1074 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C1075 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C30968 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C30998) *
              C30953 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C1074 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C2183 * C13225 + C2184 * C13229 + C2185 * C13224 +
              C2186 * C13228) *
                 C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C1075 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30968 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C30714 * C656 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C30819 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30968) *
              C30714 * C657 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30968 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C30819) *
              C30714 * C658 +
          (((C19497 + C19498 + C19499 + C19500) * C18918 +
            (C556 * C13228 + C555 * C13224 +
             (C113 * C489 + C30897 * C508) * C13229 +
             (C113 * C509 + C30897 * C519) * C13225) *
                C18919) *
               C30819 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C2284 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C2285 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C20935 + C20936 + C20937 + C20938) * C18919) *
               C2286 -
           ((C20939 + C20940 + C20941 + C20942) * C18919 +
            (C20938 + C20937 + C20936 + C20935) * C18918) *
               C31014) *
              C30714 * C30953 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C2285 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C2284 -
           ((C21271 + C21272 + C21273 + C21274) * C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C2286 +
           ((C21274 + C21273 + C21272 + C21271) * C18918 +
            (C10795 * C13228 + C10794 * C13224 +
             (C113 * C2005 + C30897 * C2016) * C13229 +
             (C113 * C2017 + C30897 * C2023) * C13225) *
                C18919) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C960 * C13225 + C959 * C13229 + C9529 * C13224 + C9528 * C13228) *
                C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C31023 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C288 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C959 * C13228 + C960 * C13224 + C961 * C13229 + C962 * C13225) *
                C18919) *
               C30732 * C31023 -
           ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
                C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C31035 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C289 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C963 * C13225 + C964 * C13229 + C962 * C13224 + C961 * C13228) *
                C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C31023 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
               C18919) *
              C30732 * C30714 * C108 -
          ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
               C18919 +
           (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
               C18918) *
              C30732 * C30714 * C109 +
          ((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
               C18918 +
           (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
               C18919) *
              C30732 * C30714 * C110 -
          ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
               C18919 +
           (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
               C18918) *
              C30732 * C30714 * C111 +
          ((C172 * C13228 + C173 * C13224 + C175 * C13229 + C174 * C13225) *
               C18918 +
           (C780 * C13228 + C779 * C13224 +
            (C113 * C770 + C30897 * C771) * C13229 +
            (C113 * C772 + C30897 * C773) * C13225) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1074 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1075 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1075 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1074 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C1074 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C1075 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C19213 + C19214 + C19215 + C19216) * C18919) *
              C30732 * C1142 -
          ((C19698 + C19697 + C19696 + C19695) * C18919 +
           (C358 * C13225 + C359 * C13229 +
            (C113 * C305 + C30897 * C323) * C13224 +
            (C113 * C293 + C30897 * C306) * C13228) *
               C18918) *
              C30732 * C1143 +
          (((C113 * C294 + C30897 * C307) * C13228 +
            (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
            C361 * C13225) *
               C18918 +
           (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 + C1599 * C13225) *
               C18919) *
              C30732 * C1144 -
          (((C113 * C1704 + C30897 * C1708) * C13225 +
            (C113 * C1699 + C30897 * C1703) * C13229 + C10213 * C13224 +
            C10212 * C13228) *
               C18919 +
           (C1437 * C13225 + C1438 * C13229 +
            (C113 * C1158 + C30897 * C1168) * C13224 +
            (C113 * C1150 + C30897 * C1159) * C13228) *
               C18918) *
              C30732 * C1145 +
          (((C113 * C1151 + C30897 * C1160) * C13228 +
            (C113 * C1161 + C30897 * C1169) * C13224 +
            (C113 * C1152 + C30897 * C1162) * C13229 +
            (C113 * C1163 + C30897 * C1170) * C13225) *
               C18918 +
           ((C113 * C5596 + C30897 * C5601) * C13228 +
            (C113 * C5600 + C30897 * C5605) * C13224 +
            (C113 * C5855 + C30897 * C5856) * C13229 +
            (C113 * C5857 + C30897 * C5858) * C13225) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C1820 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C1821 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C30714 * C31032 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C1821 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C1820 -
           ((C2301 * C13225 + C2302 * C13229 + C2303 * C13224 +
             C2304 * C13228) *
                C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C31001) *
              C30714 * C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C1820 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C1821 +
           ((C19236 + C19235 + C19234 + C19233) * C18918 +
            (C2302 * C13228 + C2301 * C13224 +
             (C113 * C2288 + C30897 * C2289) * C13229 +
             (C113 * C2290 + C30897 * C2291) * C13225) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C1820 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C1821 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C31035 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C1821 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C1820 -
           ((C10683 * C13225 + C10684 * C13229 + C9836 * C13224 +
             C9835 * C13228) *
                C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C31001) *
              C31023 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C1820 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C1821 +
           ((C20092 + C20091 + C20090 + C20089) * C18918 +
            (C9842 * C13228 + C9841 * C13224 +
             (C113 * C6503 + C30897 * C6504) * C13229 +
             (C113 * C6505 + C30897 * C6506) * C13225) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C30967 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C30691 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C30967 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C30700 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C3274 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C30967 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C3274) *
               C30777) *
              C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30815 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30822 +
            ((C19220 + C19219 + C19218 + C19217) * C18918 +
             (C20935 + C20936 + C20937 + C20938) * C18919) *
                C3782) *
               C30967 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30822 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30815 -
            ((C21405 + C21406 + C21407 + C21408) * C18919 +
             (C20084 + C20083 + C20082 + C20081) * C18918) *
                C3782) *
               C30777) *
              C2620 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30822 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30815 -
            ((C21271 + C21272 + C21273 + C21274) * C18919 +
             (C19228 + C19227 + C19226 + C19225) * C18918) *
                C3782) *
               C30967 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30815 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30822 +
            ((C21140 + C21139 + C21138 + C21137) * C18918 +
             (C10684 * C13228 + C10683 * C13224 +
              (C113 * C2404 + C30897 * C2409) * C13229 +
              (C113 * C2410 + C30897 * C2413) * C13225) *
                 C18919) *
                C3782) *
               C30777) *
              C30697)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C31035 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C31023 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C3274 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C30998) *
              C2620 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C31035 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C31023 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C3274 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C30714 * C31041 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C30819 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C3274) *
              C30714 * C31034 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C3274 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C30819) *
              C30714 * C31021 +
          (((C19497 + C19498 + C19499 + C19500) * C18918 +
            (C556 * C13228 + C555 * C13224 +
             (C113 * C489 + C30897 * C508) * C13229 +
             (C113 * C509 + C30897 * C519) * C13225) *
                C18919) *
               C30819 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31043 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31040 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C20935 + C20936 + C20937 + C20938) * C18919) *
               C31031 -
           ((C20939 + C20940 + C20941 + C20942) * C18919 +
            (C20938 + C20937 + C20936 + C20935) * C18918) *
               C31014) *
              C30714 * C2620 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C31040 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C31043 -
           ((C21271 + C21272 + C21273 + C21274) * C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C31031 +
           ((C21274 + C21273 + C21272 + C21271) * C18918 +
            (C10795 * C13228 + C10794 * C13224 +
             (C113 * C2005 + C30897 * C2016) * C13229 +
             (C113 * C2017 + C30897 * C2023) * C13225) *
                C18919) *
               C31014) *
              C30714 * C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30815 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30822 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C20935 + C20936 + C20937 + C20938) * C18919) *
               C3782) *
              C30714 * C30691 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C30822 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30815 -
           ((C21271 + C21272 + C21273 + C21274) * C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C3782) *
              C30714 * C30700 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30815 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C30822 +
           ((C19236 + C19235 + C19234 + C19233) * C18918 +
            (C2302 * C13228 + C2301 * C13224 +
             (C113 * C2288 + C30897 * C2289) * C13229 +
             (C113 * C2290 + C30897 * C2291) * C13225) *
                C18919) *
               C3782) *
              C30714 * C2883)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C3274 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C30714 * C31041 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C30819 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C3274) *
              C30714 * C31034 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C3274 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C30819) *
              C30714 * C31021 +
          (((C19497 + C19498 + C19499 + C19500) * C18918 +
            (C556 * C13228 + C555 * C13224 +
             (C113 * C489 + C30897 * C508) * C13229 +
             (C113 * C509 + C30897 * C519) * C13225) *
                C18919) *
               C30819 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C3274) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C3274 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C31035 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C3274) *
               C31023 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C3274 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C30998) *
              C2620 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C3274) *
               C31035 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C3274 -
            ((C21137 + C21138 + C21139 + C21140) * C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C31023 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C3274) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C30967 -
           ((C960 * C13225 + C959 * C13229 + C9529 * C13224 + C9528 * C13228) *
                C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C30777) *
              C656 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C959 * C13228 + C960 * C13224 + C961 * C13229 + C962 * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C30967) *
              C657 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C30967 -
           ((C963 * C13225 + C964 * C13229 + C962 * C13224 + C961 * C13228) *
                C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C30777) *
              C658 +
          (((C364 * C13228 + C365 * C13224 + C670 * C13229 + C669 * C13225) *
                C18918 +
            (C964 * C13228 + C963 * C13224 +
             (C113 * C930 + C30897 * C939) * C13229 +
             (C113 * C940 + C30897 * C945) * C13225) *
                C18919) *
               C30732 * C30777 -
           ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
                C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30732 * C30967) *
              C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1416 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1417 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30732 * C1418 -
           ((C20227 * C13225 + C20228 * C13229 + C10213 * C13224 +
             C10212 * C13228) *
                C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30732 * C31008) *
              C30953 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1417 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1416 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C1418 +
           ((C1438 * C13228 + C1437 * C13224 + C1436 * C13229 +
             C1435 * C13225) *
                C18918 +
            (C20228 * C13228 + C20227 * C13224 +
             (C113 * C1700 + C30897 * C1705) * C13229 +
             (C113 * C1706 + C30897 * C1709) * C13225) *
                C18919) *
               C30732 * C31008) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C30967 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C9530 * C13228 + C9531 * C13224 + C2186 * C13229 +
              C2185 * C13225) *
                 C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C288 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C30967 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C2183 * C13225 + C2184 * C13229 + C2185 * C13224 +
              C2186 * C13228) *
                 C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C30777) *
              C289 +
          ((((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                 C18918 +
             (C19229 + C19230 + C19231 + C19232) * C18919) *
                C30968 -
            ((C19233 + C19234 + C19235 + C19236) * C18919 +
             (C19232 + C19231 + C19230 + C19229) * C18918) *
                C30819) *
               C30967 +
           (((C19703 + C19704 + C19705 + C19706) * C18918 +
             (C2184 * C13228 + C2183 * C13224 +
              (C113 * C2170 + C30897 * C2171) * C13229 +
              (C113 * C2172 + C30897 * C2173) * C13225) *
                 C18919) *
                C30819 -
            ((C19706 + C19705 + C19704 + C19703) * C18919 +
             (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                 C18918) *
                C30968) *
               C30777) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30968 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C1416 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C30819 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30968) *
              C1417 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C30968 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C30819) *
              C1418 +
          (((C20557 + C20558 + C20559 + C20560) * C18918 +
            (C10214 * C13228 + C10215 * C13224 +
             (C113 * C6401 + C30897 * C6402) * C13229 +
             (C113 * C6403 + C30897 * C6404) * C13225) *
                C18919) *
               C30819 -
           ((C20560 + C20559 + C20558 + C20557) * C18919 +
            (C1437 * C13225 + C1438 * C13229 +
             (C113 * C1158 + C30897 * C1168) * C13224 +
             (C113 * C1150 + C30897 * C1159) * C13228) *
                C18918) *
               C30968) *
              C31008) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C960 * C13225 + C959 * C13229 + C9529 * C13224 + C9528 * C13228) *
                C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C31023 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C288 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C959 * C13228 + C960 * C13224 + C961 * C13229 + C962 * C13225) *
                C18919) *
               C30732 * C31023 -
           ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
                C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C31035 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C289 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C963 * C13225 + C964 * C13229 + C962 * C13224 + C961 * C13228) *
                C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C31023 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
               C18919) *
              C30732 * C30714 * C108 -
          ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
               C18919 +
           (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
               C18918) *
              C30732 * C30714 * C109 +
          ((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
               C18918 +
           (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
               C18919) *
              C30732 * C30714 * C110 -
          ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
               C18919 +
           (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
               C18918) *
              C30732 * C30714 * C111 +
          ((C172 * C13228 + C173 * C13224 + C175 * C13229 + C174 * C13225) *
               C18918 +
           (C780 * C13228 + C779 * C13224 +
            (C113 * C770 + C30897 * C771) * C13229 +
            (C113 * C772 + C30897 * C773) * C13225) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31036 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31025 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C30714 * C288 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C31025 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C31036 -
           ((C2301 * C13225 + C2302 * C13229 + C2303 * C13224 +
             C2304 * C13228) *
                C18919 +
            (C19228 + C19227 + C19226 + C19225) * C18918) *
               C31001) *
              C30714 * C289 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C31036 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C31025 +
           ((C19236 + C19235 + C19234 + C19233) * C18918 +
            (C2302 * C13228 + C2301 * C13224 +
             (C113 * C2288 + C30897 * C2289) * C13229 +
             (C113 * C2290 + C30897 * C2291) * C13225) *
                C18919) *
               C31001) *
              C30714 * C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1074 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1075 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1075 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1074 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C1074 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C1075 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C19213 + C19214 + C19215 + C19216) * C18919) *
              C30732 * C1142 -
          ((C19698 + C19697 + C19696 + C19695) * C18919 +
           (C358 * C13225 + C359 * C13229 +
            (C113 * C305 + C30897 * C323) * C13224 +
            (C113 * C293 + C30897 * C306) * C13228) *
               C18918) *
              C30732 * C1143 +
          (((C113 * C294 + C30897 * C307) * C13228 +
            (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
            C361 * C13225) *
               C18918 +
           (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 + C1599 * C13225) *
               C18919) *
              C30732 * C1144 -
          (((C113 * C1704 + C30897 * C1708) * C13225 +
            (C113 * C1699 + C30897 * C1703) * C13229 + C10213 * C13224 +
            C10212 * C13228) *
               C18919 +
           (C1437 * C13225 + C1438 * C13229 +
            (C113 * C1158 + C30897 * C1168) * C13224 +
            (C113 * C1150 + C30897 * C1159) * C13228) *
               C18918) *
              C30732 * C1145 +
          (((C113 * C1151 + C30897 * C1160) * C13228 +
            (C113 * C1161 + C30897 * C1169) * C13224 +
            (C113 * C1152 + C30897 * C1162) * C13229 +
            (C113 * C1163 + C30897 * C1170) * C13225) *
               C18918 +
           ((C113 * C5596 + C30897 * C5601) * C13228 +
            (C113 * C5600 + C30897 * C5605) * C13224 +
            (C113 * C5855 + C30897 * C5856) * C13229 +
            (C113 * C5857 + C30897 * C5858) * C13225) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C31036 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C31025 +
           ((C19220 + C19219 + C19218 + C19217) * C18918 +
            (C9156 * C13228 + C9155 * C13224 + C2304 * C13229 +
             C2303 * C13225) *
                C18919) *
               C31001) *
              C1074 +
          (((C19695 + C19696 + C19697 + C19698) * C18918 +
            (C20081 + C20082 + C20083 + C20084) * C18919) *
               C31025 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C31036 -
           ((C10683 * C13225 + C10684 * C13229 + C9836 * C13224 +
             C9835 * C13228) *
                C18919 +
            (C20084 + C20083 + C20082 + C20081) * C18918) *
               C31001) *
              C1075 +
          ((((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C20085 + C20086 + C20087 + C20088) * C18919) *
               C31036 -
           ((C20089 + C20090 + C20091 + C20092) * C18919 +
            (C20088 + C20087 + C20086 + C20085) * C18918) *
               C31025 +
           ((C20092 + C20091 + C20090 + C20089) * C18918 +
            (C9842 * C13228 + C9841 * C13224 +
             (C113 * C6503 + C30897 * C6504) * C13229 +
             (C113 * C6505 + C30897 * C6506) * C13225) *
                C18919) *
               C31001) *
              C30998) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30968 -
           ((C19217 + C19218 + C19219 + C19220) * C18919 +
            (C19216 + C19215 + C19214 + C19213) * C18918) *
               C30819) *
              C30714 * C656 +
          (((C19221 + C19222 + C19223 + C19224) * C18918 +
            (C19225 + C19226 + C19227 + C19228) * C18919) *
               C30819 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30968) *
              C30714 * C657 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30968 -
           ((C19233 + C19234 + C19235 + C19236) * C18919 +
            (C19232 + C19231 + C19230 + C19229) * C18918) *
               C30819) *
              C30714 * C658 +
          (((C19497 + C19498 + C19499 + C19500) * C18918 +
            (C556 * C13228 + C555 * C13224 +
             (C113 * C489 + C30897 * C508) * C13229 +
             (C113 * C509 + C30897 * C519) * C13225) *
                C18919) *
               C30819 -
           ((C19500 + C19499 + C19498 + C19497) * C18919 +
            (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
                C18918) *
               C30968) *
              C30714 * C31002)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C117 + C30897 * C124) * C13228 +
              (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
              C167 * C13225) *
                 C18918 +
             (C19213 + C19214 + C19215 + C19216) * C18919) *
                C30968 -
            ((C19217 + C19218 + C19219 + C19220) * C18919 +
             (C19216 + C19215 + C19214 + C19213) * C18918) *
                C30819) *
               C1074 +
           (((C19695 + C19696 + C19697 + C19698) * C18918 +
             (C20081 + C20082 + C20083 + C20084) * C18919) *
                C30819 -
            ((C19698 + C19697 + C19696 + C19695) * C18919 +
             (C358 * C13225 + C359 * C13229 +
              (C113 * C305 + C30897 * C323) * C13224 +
              (C113 * C293 + C30897 * C306) * C13228) *
                 C18918) *
                C30968) *
               C1075 +
           ((((C113 * C294 + C30897 * C307) * C13228 +
              (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
              C361 * C13225) *
                 C18918 +
             (C20085 + C20086 + C20087 + C20088) * C18919) *
                C30968 -
            ((C20089 + C20090 + C20091 + C20092) * C18919 +
             (C20088 + C20087 + C20086 + C20085) * C18918) *
                C30819) *
               C30998) *
              C30953 +
          ((((C19221 + C19222 + C19223 + C19224) * C18918 +
             (C19225 + C19226 + C19227 + C19228) * C18919) *
                C30819 -
            ((C19224 + C19223 + C19222 + C19221) * C18919 +
             (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                 C18918) *
                C30968) *
               C1074 +
           (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                 C18918 +
             (C19699 + C19700 + C19701 + C19702) * C18919) *
                C30968 -
            ((C2183 * C13225 + C2184 * C13229 + C2185 * C13224 +
              C2186 * C13228) *
                 C18919 +
             (C19702 + C19701 + C19700 + C19699) * C18918) *
                C30819) *
               C1075 +
           (((C20423 + C20424 + C20425 + C20426) * C18918 +
             (C10102 * C13228 + C10103 * C13224 +
              (C113 * C1290 + C30897 * C1307) * C13229 +
              (C113 * C1308 + C30897 * C1317) * C13225) *
                 C18919) *
                C30819 -
            ((C20426 + C20425 + C20424 + C20423) * C18919 +
             (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                 C18918) *
                C30968) *
               C30998) *
              C30697)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
               C18919) *
              C30732 * C30714 * C108 -
          ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
               C18919 +
           (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
               C18918) *
              C30732 * C30714 * C109 +
          ((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
               C18918 +
           (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
               C18919) *
              C30732 * C30714 * C110 -
          ((C779 * C13225 + C780 * C13229 + C554 * C13224 + C553 * C13228) *
               C18919 +
           (C173 * C13225 + C172 * C13229 + C170 * C13224 + C171 * C13228) *
               C18918) *
              C30732 * C30714 * C111 +
          ((C172 * C13228 + C173 * C13224 + C175 * C13229 + C174 * C13225) *
               C18918 +
           (C780 * C13228 + C779 * C13224 +
            (C113 * C770 + C30897 * C771) * C13229 +
            (C113 * C772 + C30897 * C773) * C13225) *
               C18919) *
              C30732 * C30714 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C9151 * C13228 + C9152 * C13224 + C548 * C13229 + C547 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C960 * C13225 + C959 * C13229 + C9529 * C13224 + C9528 * C13228) *
                C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C31023 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C288 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C959 * C13228 + C960 * C13224 + C961 * C13229 + C962 * C13225) *
                C18919) *
               C30732 * C31023 -
           ((C545 * C13225 + C546 * C13229 + C547 * C13224 + C548 * C13228) *
                C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C31035 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C289 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C546 * C13228 + C545 * C13224 + C553 * C13229 + C554 * C13225) *
                C18919) *
               C30732 * C31035 -
           ((C963 * C13225 + C964 * C13229 + C962 * C13224 + C961 * C13228) *
                C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C31023 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C117 + C30897 * C124) * C13228 +
             (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
             C167 * C13225) *
                C18918 +
            (C19213 + C19214 + C19215 + C19216) * C18919) *
               C30732 * C1074 -
           ((C19698 + C19697 + C19696 + C19695) * C18919 +
            (C358 * C13225 + C359 * C13229 +
             (C113 * C305 + C30897 * C323) * C13224 +
             (C113 * C293 + C30897 * C306) * C13228) *
                C18918) *
               C30732 * C1075 +
           (((C113 * C294 + C30897 * C307) * C13228 +
             (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
             C361 * C13225) *
                C18918 +
            (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 +
             C1599 * C13225) *
                C18919) *
               C30732 * C30998) *
              C31032 +
          (((C359 * C13228 + C358 * C13224 + C357 * C13229 + C356 * C13225) *
                C18918 +
            (C19699 + C19700 + C19701 + C19702) * C18919) *
               C30732 * C1075 -
           ((C19224 + C19223 + C19222 + C19221) * C18919 +
            (C169 * C13225 + C168 * C13229 + C167 * C13224 + C166 * C13228) *
                C18918) *
               C30732 * C1074 -
           ((C1597 * C13225 + C1598 * C13229 + C1599 * C13224 +
             C1600 * C13228) *
                C18919 +
            (C363 * C13225 + C362 * C13229 + C361 * C13224 + C360 * C13228) *
                C18918) *
               C30732 * C30998) *
              C31019 +
          (((C168 * C13228 + C169 * C13224 + C171 * C13229 + C170 * C13225) *
                C18918 +
            (C19229 + C19230 + C19231 + C19232) * C18919) *
               C30732 * C1074 -
           ((C19706 + C19705 + C19704 + C19703) * C18919 +
            (C365 * C13225 + C364 * C13229 + C356 * C13224 + C357 * C13228) *
                C18918) *
               C30732 * C1075 +
           ((C362 * C13228 + C363 * C13224 + C367 * C13229 + C366 * C13225) *
                C18918 +
            (C1598 * C13228 + C1597 * C13224 +
             (C113 * C1584 + C30897 * C1585) * C13229 +
             (C113 * C1586 + C30897 * C1587) * C13225) *
                C18919) *
               C30732 * C30998) *
              C30992)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C30897 * C124) * C13228 +
            (C113 * C125 + C30897 * C138) * C13224 + C166 * C13229 +
            C167 * C13225) *
               C18918 +
           (C19213 + C19214 + C19215 + C19216) * C18919) *
              C30732 * C1142 -
          ((C19698 + C19697 + C19696 + C19695) * C18919 +
           (C358 * C13225 + C359 * C13229 +
            (C113 * C305 + C30897 * C323) * C13224 +
            (C113 * C293 + C30897 * C306) * C13228) *
               C18918) *
              C30732 * C1143 +
          (((C113 * C294 + C30897 * C307) * C13228 +
            (C113 * C308 + C30897 * C324) * C13224 + C360 * C13229 +
            C361 * C13225) *
               C18918 +
           (C9837 * C13228 + C9838 * C13224 + C1600 * C13229 + C1599 * C13225) *
               C18919) *
              C30732 * C1144 -
          (((C113 * C1704 + C30897 * C1708) * C13225 +
            (C113 * C1699 + C30897 * C1703) * C13229 + C10213 * C13224 +
            C10212 * C13228) *
               C18919 +
           (C1437 * C13225 + C1438 * C13229 +
            (C113 * C1158 + C30897 * C1168) * C13224 +
            (C113 * C1150 + C30897 * C1159) * C13228) *
               C18918) *
              C30732 * C1145 +
          (((C113 * C1151 + C30897 * C1160) * C13228 +
            (C113 * C1161 + C30897 * C1169) * C13224 +
            (C113 * C1152 + C30897 * C1162) * C13229 +
            (C113 * C1163 + C30897 * C1170) * C13225) *
               C18918 +
           ((C113 * C5596 + C30897 * C5601) * C13228 +
            (C113 * C5600 + C30897 * C5605) * C13224 +
            (C113 * C5855 + C30897 * C5856) * C13229 +
            (C113 * C5857 + C30897 * C5858) * C13225) *
               C18919) *
              C30732 * C1146) *
         C30686) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C30773 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C30780 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C2880) *
                       C30691 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C30780 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C30773 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C2880) *
                       C30700 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C30773 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C30780 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C2880) *
                       C2883)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C30773 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C30780 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C2880) *
                       C30691 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C30780 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C30773 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C2880) *
                       C30700 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C30773 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C30780 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C2880) *
                       C2883)) /
                     (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C30773 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C30780 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C30968 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C2880) *
                       C2620 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C30773 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30780 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C30968) *
                        C2880) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C30773 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C30780 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C2880) *
                       C2620 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C30773 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30780 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C30968) *
                        C2880) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C31042 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C31038 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C31028 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30732 * C31008) *
                       C2620 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C31038 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C31042 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C31028 +
                    (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                     (C113 * C1422 + C30897 * C1423) * C116 +
                     (C113 * C1424 + C30897 * C1425) * C104) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C2512 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C30777) *
                       C31041 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C30777 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C2512) *
                       C31034 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C2512 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C30777) *
                       C31021 +
                   ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                     (C113 * C660 + C30897 * C661) * C116 +
                     (C113 * C662 + C30897 * C663) * C104) *
                        C30911 * C30732 * C30777 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30732 * C2512) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C31036 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C31025 +
                     ((C113 * C483 + C30897 * C496) * C114 +
                      (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                      C550 * C103 + C551 * C116 + C552 * C104) *
                         C30911 * C31001) *
                        C2512 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C31025 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C31036 -
                     (C2183 * C104 + C2184 * C116 + C2185 * C103 +
                      C2186 * C115 + (C113 * C1295 + C30897 * C1311) * C102 +
                      (C113 * C1284 + C30897 * C1296) * C114) *
                         C30911 * C31001) *
                        C30777) *
                       C2620 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C31025 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C31036 -
                     (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                      C550 * C102 + C549 * C114) *
                         C30911 * C31001) *
                        C2512 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C31036 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C31025 +
                     (C2186 * C114 + C2185 * C102 + C2184 * C115 +
                      C2183 * C103 + (C113 * C2170 + C30897 * C2171) * C116 +
                      (C113 * C2172 + C30897 * C2173) * C104) *
                         C30911 * C31001) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C2512 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C31041 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C2512) *
                       C31034 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C2512 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C31021 +
                   (((C4739 * C297 + C4735 * C313 + C4740 * C298 +
                      C4736 * C316 + C4741 * C1422 + C4737 * C1423) *
                         C4742 +
                     (C4739 * C314 + C4735 * C327 + C4740 * C315 +
                      C4736 * C328 + C4741 * C1424 + C4737 * C1425) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30732 * C2512) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31042 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31038 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C31028 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30732 * C31008) *
                       C2620 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31038 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31042 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C31028 +
                    ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                      C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                         C4742 +
                     (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                      C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                         C30662) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C31036 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C31025 +
                     ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                       C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                          C4742 +
                      (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                       C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                          C30662) *
                         C30911 * C31001) *
                        C2512 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C31025 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C31036 -
                     ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                       C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                          C30662 +
                      (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                       C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                          C4742) *
                         C30911 * C31001) *
                        C30777) *
                       C2620 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C31025 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C31036 -
                     ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                       C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                          C30662 +
                      (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                       C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                          C4742) *
                         C30911 * C31001) *
                        C2512 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C31036 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C31025 +
                     ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                       C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                          C4742 +
                      (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                       C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                          C30662) *
                         C30911 * C31001) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C2512 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C30691 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C2512 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C30700 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C30968 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C2512 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C2883)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C30691 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C2512 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C30700 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C2883)) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C2512 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C30777) *
                       C31041 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C30777 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C2512) *
                       C31034 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C2512 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C30777) *
                       C31021 +
                   ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                     (C113 * C660 + C30897 * C661) * C116 +
                     (C113 * C662 + C30897 * C663) * C104) *
                        C30911 * C30732 * C30777 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30732 * C2512) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C31042 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C31038 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C31028 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30732 * C31008) *
                       C2620 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C31038 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C31042 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C31028 +
                    (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                     (C113 * C1422 + C30897 * C1423) * C116 +
                     (C113 * C1424 + C30897 * C1425) * C104) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C2512 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C31041 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C2512) *
                       C31034 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C2512 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C31021 +
                   (((C4739 * C297 + C4735 * C313 + C4740 * C298 +
                      C4736 * C316 + C4741 * C1422 + C4737 * C1423) *
                         C4742 +
                     (C4739 * C314 + C4735 * C327 + C4740 * C315 +
                      C4736 * C328 + C4741 * C1424 + C4737 * C1425) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30732 * C2512) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31042 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31038 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C31028 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30732 * C31008) *
                       C2620 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31038 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31042 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C31028 +
                    ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                      C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                         C4742 +
                     (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                      C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                         C30662) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C30773 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C30780 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C3274 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C2880) *
                       C30953 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C30773 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30780 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C3274) *
                        C2880) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C30773 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C30780 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C2880) *
                       C30953 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C30773 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30780 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C3274) *
                        C2880) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30815 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30822 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C3782) *
                       C30773 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30822 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30815 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C3782) *
                       C30780 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30815 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30822 +
                    ((C113 * C1288 + C30897 * C1303) * C114 +
                     (C113 * C1304 + C30897 * C1315) * C102 +
                     (C113 * C1289 + C30897 * C1305) * C115 +
                     (C113 * C1306 + C30897 * C1316) * C103 +
                     (C113 * C1290 + C30897 * C1307) * C116 +
                     (C113 * C1308 + C30897 * C1317) * C104) *
                        C30911 * C3782) *
                       C2880) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C3782) *
                       C30773 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C3782) *
                       C30780 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                      C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                         C4742 +
                     (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                      C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                         C30662) *
                        C30911 * C3782) *
                       C2880) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C31042 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C31038 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C31028 +
                   (((C113 * C1698 + C30897 * C1701) * C114 +
                     (C113 * C1702 + C30897 * C1707) * C102 +
                     (C113 * C1699 + C30897 * C1703) * C115 +
                     (C113 * C1704 + C30897 * C1708) * C103 +
                     (C113 * C1700 + C30897 * C1705) * C116 +
                     (C113 * C1706 + C30897 * C1709) * C104) *
                        C30911 * C30819 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C3274) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C2512 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C31032 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C2512 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C31019 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C3274 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C2512 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31043 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31040 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31031 -
                    (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                     (C113 * C2010 + C30897 * C2020) * C102 +
                     (C113 * C2002 + C30897 * C2011) * C114) *
                        C30911 * C31014) *
                       C2512 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C31040 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C31043 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31031 +
                    ((C113 * C2402 + C30897 * C2405) * C114 +
                     (C113 * C2406 + C30897 * C2411) * C102 +
                     (C113 * C2403 + C30897 * C2407) * C115 +
                     (C113 * C2408 + C30897 * C2412) * C103 +
                     (C113 * C2404 + C30897 * C2409) * C116 +
                     (C113 * C2410 + C30897 * C2413) * C104) *
                        C30911 * C31014) *
                       C30777) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C31032 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C2512 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C31019 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C31042 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C31038 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C31028 +
                   (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                      C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                         C4742 +
                     (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                      C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C3274) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31043 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31040 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31031 -
                    ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 +
                      C4736 * C2411 + C4739 * C2010 + C4735 * C2020) *
                         C30662 +
                     (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 +
                      C4736 * C2405 + C4739 * C2002 + C4735 * C2011) *
                         C4742) *
                        C30911 * C31014) *
                       C2512 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C31040 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C31043 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31031 +
                    ((C4739 * C2402 + C4735 * C2405 + C4740 * C6243 +
                      C4736 * C6247 + C4741 * C6605 + C4737 * C6606) *
                         C4742 +
                     (C4739 * C2406 + C4735 * C2411 + C4740 * C6246 +
                      C4736 * C6252 + C4741 * C6607 + C4737 * C6608) *
                         C30662) *
                        C30911 * C31014) *
                       C30777) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30815 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30822 +
                     ((C113 * C483 + C30897 * C496) * C114 +
                      (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                      C550 * C103 + C551 * C116 + C552 * C104) *
                         C30911 * C3782) *
                        C2512 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30822 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30815 -
                     (C2183 * C104 + C2184 * C116 + C2185 * C103 +
                      C2186 * C115 + (C113 * C1295 + C30897 * C1311) * C102 +
                      (C113 * C1284 + C30897 * C1296) * C114) *
                         C30911 * C3782) *
                        C30777) *
                       C30953 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30822 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30815 -
                     (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                      C550 * C102 + C549 * C114) *
                         C30911 * C3782) *
                        C2512 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30815 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30822 +
                     (C2186 * C114 + C2185 * C102 + C2184 * C115 +
                      C2183 * C103 + (C113 * C2170 + C30897 * C2171) * C116 +
                      (C113 * C2172 + C30897 * C2173) * C104) *
                         C30911 * C3782) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30815 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30822 +
                     ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                       C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                          C4742 +
                      (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                       C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                          C30662) *
                         C30911 * C3782) *
                        C2512 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30822 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30815 -
                     ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                       C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                          C30662 +
                      (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                       C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                          C4742) *
                         C30911 * C3782) *
                        C30777) *
                       C30953 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30822 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30815 -
                     ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                       C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                          C30662 +
                      (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                       C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                          C4742) *
                         C30911 * C3782) *
                        C2512 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30815 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30822 +
                     ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                       C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                          C4742 +
                      (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                       C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                          C30662) *
                         C30911 * C3782) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C2512 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C31032 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C2512 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C31019 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C3274 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C2512 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C31042 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C3274) *
                       C31038 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C3274 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C31028 +
                   (((C113 * C1698 + C30897 * C1701) * C114 +
                     (C113 * C1702 + C30897 * C1707) * C102 +
                     (C113 * C1699 + C30897 * C1703) * C115 +
                     (C113 * C1704 + C30897 * C1708) * C103 +
                     (C113 * C1700 + C30897 * C1705) * C116 +
                     (C113 * C1706 + C30897 * C1709) * C104) *
                        C30911 * C30819 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C3274) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C31032 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C2512 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C31019 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C2512 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C31042 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C3274) *
                       C31038 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C31028 +
                   (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                      C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                         C4742 +
                     (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                      C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C3274) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1416 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1417 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C1418 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30732 * C31008) *
                       C30953 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1417 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1416 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C1418 +
                    (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                     (C113 * C1422 + C30897 * C1423) * C116 +
                     (C113 * C1424 + C30897 * C1425) * C104) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C30967 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C30777) *
                       C656 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C30777 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C30967) *
                       C657 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C30967 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C30777) *
                       C658 +
                   ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                     (C113 * C660 + C30897 * C661) * C116 +
                     (C113 * C662 + C30897 * C663) * C104) *
                        C30911 * C30732 * C30777 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30732 * C30967) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C1820 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C1821 +
                     ((C113 * C483 + C30897 * C496) * C114 +
                      (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                      C550 * C103 + C551 * C116 + C552 * C104) *
                         C30911 * C31001) *
                        C30967 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C1821 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C1820 -
                     (C2183 * C104 + C2184 * C116 + C2185 * C103 +
                      C2186 * C115 + (C113 * C1295 + C30897 * C1311) * C102 +
                      (C113 * C1284 + C30897 * C1296) * C114) *
                         C30911 * C31001) *
                        C30777) *
                       C30953 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C1821 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C1820 -
                     (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                      C550 * C102 + C549 * C114) *
                         C30911 * C31001) *
                        C30967 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C1820 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C1821 +
                     (C2186 * C114 + C2185 * C102 + C2184 * C115 +
                      C2183 * C103 + (C113 * C2170 + C30897 * C2171) * C116 +
                      (C113 * C2172 + C30897 * C2173) * C104) *
                         C30911 * C31001) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C30967 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C656 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C30967) *
                       C657 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C30967 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C658 +
                   (((C4739 * C297 + C4735 * C313 + C4740 * C298 +
                      C4736 * C316 + C4741 * C1422 + C4737 * C1423) *
                         C4742 +
                     (C4739 * C314 + C4735 * C327 + C4740 * C315 +
                      C4736 * C328 + C4741 * C1424 + C4737 * C1425) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30732 * C30967) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1416 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1417 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C1418 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30732 * C31008) *
                       C30953 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1417 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1416 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C1418 +
                    ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                      C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                         C4742 +
                     (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                      C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                         C30662) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C1820 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C1821 +
                     ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                       C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                          C4742 +
                      (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                       C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                          C30662) *
                         C30911 * C31001) *
                        C30967 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C1821 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C1820 -
                     ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                       C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                          C30662 +
                      (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                       C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                          C4742) *
                         C30911 * C31001) *
                        C30777) *
                       C30953 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C1821 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C1820 -
                     ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                       C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                          C30662 +
                      (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                       C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                          C4742) *
                         C30911 * C31001) *
                        C30967 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C1820 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C1821 +
                     ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                       C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                          C4742 +
                      (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                       C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                          C30662) *
                         C30911 * C31001) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C1416 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C1417 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30968 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C1418 +
                   (((C113 * C1698 + C30897 * C1701) * C114 +
                     (C113 * C1702 + C30897 * C1707) * C102 +
                     (C113 * C1699 + C30897 * C1703) * C115 +
                     (C113 * C1704 + C30897 * C1708) * C103 +
                     (C113 * C1700 + C30897 * C1705) * C116 +
                     (C113 * C1706 + C30897 * C1709) * C104) *
                        C30911 * C30819 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30968) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C30967 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C288 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C30967 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C289 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C30968 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C30967 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C2284 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C2285 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C2286 -
                    (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                     (C113 * C2010 + C30897 * C2020) * C102 +
                     (C113 * C2002 + C30897 * C2011) * C114) *
                        C30911 * C31014) *
                       C30967 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C2285 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C2284 -
                    (C2183 * C104 + C2184 * C116 + C2185 * C103 + C2186 * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C2286 +
                    ((C113 * C2402 + C30897 * C2405) * C114 +
                     (C113 * C2406 + C30897 * C2411) * C102 +
                     (C113 * C2403 + C30897 * C2407) * C115 +
                     (C113 * C2408 + C30897 * C2412) * C103 +
                     (C113 * C2404 + C30897 * C2409) * C116 +
                     (C113 * C2410 + C30897 * C2413) * C104) *
                        C30911 * C31014) *
                       C30777) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C288 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C30967 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C289 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C1416 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C1417 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C1418 +
                   (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                      C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                         C4742 +
                     (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                      C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30968) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C2284 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C2285 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C2286 -
                    ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 +
                      C4736 * C2411 + C4739 * C2010 + C4735 * C2020) *
                         C30662 +
                     (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 +
                      C4736 * C2405 + C4739 * C2002 + C4735 * C2011) *
                         C4742) *
                        C30911 * C31014) *
                       C30967 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C2285 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C2284 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C2286 +
                    ((C4739 * C2402 + C4735 * C2405 + C4740 * C6243 +
                      C4736 * C6247 + C4741 * C6605 + C4737 * C6606) *
                         C4742 +
                     (C4739 * C2406 + C4735 * C2411 + C4740 * C6246 +
                      C4736 * C6252 + C4741 * C6607 + C4737 * C6608) *
                         C30662) *
                        C30911 * C31014) *
                       C30777) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      (((C113 * C117 + C30897 * C124) * C114 +
                        (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                        C167 * C103 + C168 * C116 + C169 * C104) *
                           C30911 * C30732 * C30714 * C108 -
                       (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                        C167 * C102 + C166 * C114) *
                           C30911 * C30732 * C30714 * C109 +
                       (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                        C172 * C116 + C173 * C104) *
                           C30911 * C30732 * C30714 * C110 -
                       (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                        C170 * C102 + C171 * C114) *
                           C30911 * C30732 * C30714 * C111 +
                       (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                        (C113 * C123 + C30897 * C136) * C116 +
                        (C113 * C137 + C30897 * C144) * C104) *
                           C30911 * C30732 * C30714 * C112) +
                  std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      ((((C113 * C117 + C30897 * C124) * C114 +
                         (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                         C167 * C103 + C168 * C116 + C169 * C104) *
                            C30911 * C30732 * C31035 -
                        (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                         (C113 * C305 + C30897 * C323) * C102 +
                         (C113 * C293 + C30897 * C306) * C114) *
                            C30911 * C30732 * C31023 +
                        ((C113 * C294 + C30897 * C307) * C114 +
                         (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                         C361 * C103 + C362 * C116 + C363 * C104) *
                            C30911 * C30732 * C30998) *
                           C288 +
                       ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                         C364 * C116 + C365 * C104) *
                            C30911 * C30732 * C31023 -
                        (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                         C167 * C102 + C166 * C114) *
                            C30911 * C30732 * C31035 -
                        (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                         C361 * C102 + C360 * C114) *
                            C30911 * C30732 * C30998) *
                           C289 +
                       ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                         C172 * C116 + C173 * C104) *
                            C30911 * C30732 * C31035 -
                        ((C113 * C317 + C30897 * C329) * C104 +
                         (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                         C364 * C115 + C356 * C102 + C357 * C114) *
                            C30911 * C30732 * C31023 +
                        (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                         (C113 * C300 + C30897 * C319) * C116 +
                         (C113 * C320 + C30897 * C330) * C104) *
                            C30911 * C30732 * C30998) *
                           C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31036 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31025 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C30714 * C288 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C31025 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C31036 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C30714 * C289 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C31036 -
                    ((C113 * C506 + C30897 * C518) * C104 +
                     (C113 * C488 + C30897 * C507) * C116 + C554 * C103 +
                     C553 * C115 + C545 * C102 + C546 * C114) *
                        C30911 * C31025 +
                    (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                     (C113 * C489 + C30897 * C508) * C116 +
                     (C113 * C509 + C30897 * C519) * C104) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1074 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1075 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1075 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1074 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C1074 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C1075 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1142 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1143 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C1144 -
                   ((C113 * C1154 + C30897 * C1166) * C104 +
                    (C113 * C1148 + C30897 * C1155) * C116 +
                    (C113 * C1156 + C30897 * C1167) * C103 +
                    (C113 * C1149 + C30897 * C1157) * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C1145 +
                   ((C113 * C1151 + C30897 * C1160) * C114 +
                    (C113 * C1161 + C30897 * C1169) * C102 +
                    (C113 * C1152 + C30897 * C1162) * C115 +
                    (C113 * C1163 + C30897 * C1170) * C103 +
                    (C113 * C1153 + C30897 * C1164) * C116 +
                    (C113 * C1165 + C30897 * C1171) * C104) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31036 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31025 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C1074 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C31025 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C31036 -
                    ((C113 * C1291 + C30897 * C1309) * C104 +
                     (C113 * C1282 + C30897 * C1292) * C116 +
                     (C113 * C1293 + C30897 * C1310) * C103 +
                     (C113 * C1283 + C30897 * C1294) * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C1075 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C31036 -
                    ((C113 * C1297 + C30897 * C1312) * C104 +
                     (C113 * C1285 + C30897 * C1298) * C116 +
                     (C113 * C1299 + C30897 * C1313) * C103 +
                     (C113 * C1286 + C30897 * C1300) * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C31025 +
                    ((C113 * C1288 + C30897 * C1303) * C114 +
                     (C113 * C1304 + C30897 * C1315) * C102 +
                     (C113 * C1289 + C30897 * C1305) * C115 +
                     (C113 * C1306 + C30897 * C1316) * C103 +
                     (C113 * C1290 + C30897 * C1307) * C116 +
                     (C113 * C1308 + C30897 * C1317) * C104) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C1821 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C30714 * C31032 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C1821 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C1820 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C30714 * C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C1820 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C1821 +
                    (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                     (C113 * C489 + C30897 * C508) * C116 +
                     (C113 * C509 + C30897 * C519) * C104) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C1821 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C31035 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C1821 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C1820 -
                    ((C113 * C1291 + C30897 * C1309) * C104 +
                     (C113 * C1282 + C30897 * C1292) * C116 +
                     (C113 * C1293 + C30897 * C1310) * C103 +
                     (C113 * C1283 + C30897 * C1294) * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C31023 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C1820 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C1821 +
                    ((C113 * C1288 + C30897 * C1303) * C114 +
                     (C113 * C1304 + C30897 * C1315) * C102 +
                     (C113 * C1289 + C30897 * C1305) * C115 +
                     (C113 * C1306 + C30897 * C1316) * C103 +
                     (C113 * C1290 + C30897 * C1307) * C116 +
                     (C113 * C1308 + C30897 * C1317) * C104) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C1995 -
                   (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                    (C113 * C494 + C30897 * C512) * C102 +
                    (C113 * C482 + C30897 * C495) * C114) *
                       C30911 * C1996 +
                   ((C113 * C483 + C30897 * C496) * C114 +
                    (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                    C550 * C103 + C551 * C116 + C552 * C104) *
                       C30911 * C1997 -
                   ((C113 * C2006 + C30897 * C2018) * C104 +
                    (C113 * C2000 + C30897 * C2007) * C116 +
                    (C113 * C2008 + C30897 * C2019) * C103 +
                    (C113 * C2001 + C30897 * C2009) * C115 +
                    (C113 * C2010 + C30897 * C2020) * C102 +
                    (C113 * C2002 + C30897 * C2011) * C114) *
                       C30911 * C1998 +
                   ((C113 * C2003 + C30897 * C2012) * C114 +
                    (C113 * C2013 + C30897 * C2021) * C102 +
                    (C113 * C2004 + C30897 * C2014) * C115 +
                    (C113 * C2015 + C30897 * C2022) * C103 +
                    (C113 * C2005 + C30897 * C2016) * C116 +
                    (C113 * C2017 + C30897 * C2023) * C104) *
                       C30911 * C1999) *
                  C30714 * C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30714 * C108 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30714 * C109 +
                   ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30714 * C110 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30714 * C111 +
                   ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                     C4741 * C300 + C4737 * C319) *
                        C4742 +
                    (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                     C4741 * C320 + C4737 * C330) *
                        C30662) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31023 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C288 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C30714 * C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                      C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                         C4742 +
                     (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                      C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1075 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1142 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1143 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1144 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C1145 +
                   ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                     C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                        C4742 +
                    (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                     C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                        C30662) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C1074 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C1075 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                      C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                         C4742 +
                     (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                      C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                         C30662) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C31032 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C30714 * C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                      C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                         C4742 +
                     (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                      C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C31035 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C31023 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                      C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                         C4742 +
                     (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                      C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                         C30662) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C1995 -
                   ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                     C4736 * C941 + C4739 * C494 + C4735 * C512) *
                        C30662 +
                    (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                     C4736 * C931 + C4739 * C482 + C4735 * C495) *
                        C4742) *
                       C30911 * C1996 +
                   ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                     C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                        C4742 +
                    (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                     C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                        C30662) *
                       C30911 * C1997 -
                   ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 +
                     C4736 * C2411 + C4739 * C2010 + C4735 * C2020) *
                        C30662 +
                    (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 +
                     C4736 * C2405 + C4739 * C2002 + C4735 * C2011) *
                        C4742) *
                       C30911 * C1998 +
                   ((C4739 * C2003 + C4735 * C2012 + C4740 * C6244 +
                     C4736 * C6248 + C4741 * C6245 + C4737 * C6249) *
                        C4742 +
                    (C4739 * C2013 + C4735 * C2021 + C4740 * C6250 +
                     C4736 * C6253 + C4741 * C6251 + C4737 * C6254) *
                        C30662) *
                       C30911 * C1999) *
                  C30714 * C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C1074 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C1075 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C30968 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C30998) *
                       C30953 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C1074 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C1075 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C30968) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30714 * C656 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C30714 * C657 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30968 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30714 * C658 +
                   ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                     (C113 * C770 + C30897 * C771) * C116 +
                     (C113 * C772 + C30897 * C773) * C104) *
                        C30911 * C30819 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30968) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C2284 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C2285 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C2286 -
                    (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                     (C113 * C2010 + C30897 * C2020) * C102 +
                     (C113 * C2002 + C30897 * C2011) * C114) *
                        C30911 * C31014) *
                       C30714 * C30953 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C2285 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C2284 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C2286 +
                    (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                     (C113 * C2288 + C30897 * C2289) * C116 +
                     (C113 * C2290 + C30897 * C2291) * C104) *
                        C30911 * C31014) *
                       C30714 * C30697)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C656 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C30714 * C657 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C658 +
                   (((C4739 * C486 + C4735 * C502 + C4740 * C929 +
                      C4736 * C938 + C4741 * C1584 + C4737 * C1585) *
                         C4742 +
                     (C4739 * C503 + C4735 * C516 + C4740 * C937 +
                      C4736 * C944 + C4741 * C1586 + C4737 * C1587) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30968) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C1074 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C1075 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C30998) *
                       C30953 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C1074 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C1075 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C30968) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C2284 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C2285 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C2286 -
                    ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 +
                      C4736 * C2411 + C4739 * C2010 + C4735 * C2020) *
                         C30662 +
                     (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 +
                      C4736 * C2405 + C4739 * C2002 + C4735 * C2011) *
                         C4742) *
                        C30911 * C31014) *
                       C30714 * C30953 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C2285 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C2284 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C2286 +
                    ((C4739 * C2001 + C4735 * C2009 + C4740 * C2403 +
                      C4736 * C2407 + C4741 * C6503 + C4737 * C6504) *
                         C4742 +
                     (C4739 * C2008 + C4735 * C2019 + C4740 * C2408 +
                      C4736 * C2412 + C4741 * C6505 + C4737 * C6506) *
                         C30662) *
                        C30911 * C31014) *
                       C30714 * C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C31035 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C31023 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C31023 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C31035 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C31035 -
                    ((C113 * C317 + C30897 * C329) * C104 +
                     (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                     C364 * C115 + C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C31023 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C30714 * C108 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C30714 * C109 +
                   (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C30714 * C110 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30732 * C30714 * C111 +
                   (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                    (C113 * C123 + C30897 * C136) * C116 +
                    (C113 * C137 + C30897 * C144) * C104) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1074 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1075 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1075 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1074 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C1074 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C1075 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1142 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1143 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C1144 -
                   ((C113 * C1154 + C30897 * C1166) * C104 +
                    (C113 * C1148 + C30897 * C1155) * C116 +
                    (C113 * C1156 + C30897 * C1167) * C103 +
                    (C113 * C1149 + C30897 * C1157) * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C1145 +
                   ((C113 * C1151 + C30897 * C1160) * C114 +
                    (C113 * C1161 + C30897 * C1169) * C102 +
                    (C113 * C1152 + C30897 * C1162) * C115 +
                    (C113 * C1163 + C30897 * C1170) * C103 +
                    (C113 * C1153 + C30897 * C1164) * C116 +
                    (C113 * C1165 + C30897 * C1171) * C104) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C1821 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C30714 * C31032 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C1821 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C1820 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C30714 * C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C1820 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C1821 +
                    (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                     (C113 * C489 + C30897 * C508) * C116 +
                     (C113 * C509 + C30897 * C519) * C104) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C1820 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C1821 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C31035 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C1821 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C1820 -
                    ((C113 * C1291 + C30897 * C1309) * C104 +
                     (C113 * C1282 + C30897 * C1292) * C116 +
                     (C113 * C1293 + C30897 * C1310) * C103 +
                     (C113 * C1283 + C30897 * C1294) * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C31023 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C1820 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C1821 +
                    ((C113 * C1288 + C30897 * C1303) * C114 +
                     (C113 * C1304 + C30897 * C1315) * C102 +
                     (C113 * C1289 + C30897 * C1305) * C115 +
                     (C113 * C1306 + C30897 * C1316) * C103 +
                     (C113 * C1290 + C30897 * C1307) * C116 +
                     (C113 * C1308 + C30897 * C1317) * C104) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30714 * C108 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30714 * C109 +
                   ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30714 * C110 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30714 * C111 +
                   ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                     C4741 * C300 + C4737 * C319) *
                        C4742 +
                    (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                     C4741 * C320 + C4737 * C330) *
                        C30662) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31023 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1075 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1142 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1143 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1144 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C1145 +
                   ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                     C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                        C4742 +
                    (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                     C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                        C30662) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C31032 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C30714 * C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                      C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                         C4742 +
                     (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                      C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C31035 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C1821 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C1820 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C31023 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C1820 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C1821 +
                    ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                      C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                         C4742 +
                     (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                      C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                         C30662) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C30967 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C30691 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C30967 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C30700 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C3274 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C30967 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C3274) *
                        C30777) *
                       C2883)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C30691 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C30967 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C30700 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C3274) *
                        C30777) *
                       C2883)) /
                     (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30815 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30822 +
                     ((C113 * C483 + C30897 * C496) * C114 +
                      (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                      C550 * C103 + C551 * C116 + C552 * C104) *
                         C30911 * C3782) *
                        C30967 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30822 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30815 -
                     (C2183 * C104 + C2184 * C116 + C2185 * C103 +
                      C2186 * C115 + (C113 * C1295 + C30897 * C1311) * C102 +
                      (C113 * C1284 + C30897 * C1296) * C114) *
                         C30911 * C3782) *
                        C30777) *
                       C2620 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30822 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30815 -
                     (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                      C550 * C102 + C549 * C114) *
                         C30911 * C3782) *
                        C30967 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30815 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30822 +
                     (C2186 * C114 + C2185 * C102 + C2184 * C115 +
                      C2183 * C103 + (C113 * C2170 + C30897 * C2171) * C116 +
                      (C113 * C2172 + C30897 * C2173) * C104) *
                         C30911 * C3782) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30815 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30822 +
                     ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                       C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                          C4742 +
                      (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                       C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                          C30662) *
                         C30911 * C3782) *
                        C30967 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30822 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30815 -
                     ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                       C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                          C30662 +
                      (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                       C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                          C4742) *
                         C30911 * C3782) *
                        C30777) *
                       C2620 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30822 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30815 -
                     ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                       C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                          C30662 +
                      (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                       C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                          C4742) *
                         C30911 * C3782) *
                        C30967 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30815 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30822 +
                     ((C4739 * C1283 + C4735 * C1294 + C4740 * C1289 +
                       C4736 * C1305 + C4741 * C6401 + C4737 * C6402) *
                          C4742 +
                      (C4739 * C1293 + C4735 * C1310 + C4740 * C1306 +
                       C4736 * C1316 + C4741 * C6403 + C4737 * C6404) *
                          C30662) *
                         C30911 * C3782) *
                        C30777) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C31035 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C31023 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C3274 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C30998) *
                       C2620 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C31035 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C31023 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C3274) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30714 * C31041 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C30714 * C31034 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30714 * C31021 +
                   ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                     (C113 * C770 + C30897 * C771) * C116 +
                     (C113 * C772 + C30897 * C773) * C104) *
                        C30911 * C30819 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C3274) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31043 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31040 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31031 -
                    (C2301 * C104 + C2302 * C116 + C2303 * C103 + C2304 * C115 +
                     (C113 * C2010 + C30897 * C2020) * C102 +
                     (C113 * C2002 + C30897 * C2011) * C114) *
                        C30911 * C31014) *
                       C30714 * C2620 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C31040 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C31043 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31031 +
                    (C2304 * C114 + C2303 * C102 + C2302 * C115 + C2301 * C103 +
                     (C113 * C2288 + C30897 * C2289) * C116 +
                     (C113 * C2290 + C30897 * C2291) * C104) *
                        C30911 * C31014) *
                       C30714 * C30697)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C31041 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C30714 * C31034 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C31021 +
                   (((C4739 * C486 + C4735 * C502 + C4740 * C929 +
                      C4736 * C938 + C4741 * C1584 + C4737 * C1585) *
                         C4742 +
                     (C4739 * C503 + C4735 * C516 + C4740 * C937 +
                      C4736 * C944 + C4741 * C1586 + C4737 * C1587) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C3274) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C31035 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C31023 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C30998) *
                       C2620 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C31035 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C31023 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C3274) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31043 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31040 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31031 -
                    ((C4741 * C6246 + C4737 * C6252 + C4740 * C2406 +
                      C4736 * C2411 + C4739 * C2010 + C4735 * C2020) *
                         C30662 +
                     (C4741 * C6243 + C4737 * C6247 + C4740 * C2402 +
                      C4736 * C2405 + C4739 * C2002 + C4735 * C2011) *
                         C4742) *
                        C30911 * C31014) *
                       C30714 * C2620 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C31040 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C31043 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31031 +
                    ((C4739 * C2001 + C4735 * C2009 + C4740 * C2403 +
                      C4736 * C2407 + C4741 * C6503 + C4737 * C6504) *
                         C4742 +
                     (C4739 * C2008 + C4735 * C2019 + C4740 * C2408 +
                      C4736 * C2412 + C4741 * C6505 + C4737 * C6506) *
                         C30662) *
                        C30911 * C31014) *
                       C30714 * C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30815 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30822 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C3782) *
                       C30714 * C30691 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30822 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30815 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C3782) *
                       C30714 * C30700 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30815 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30822 +
                    (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                     (C113 * C489 + C30897 * C508) * C116 +
                     (C113 * C509 + C30897 * C519) * C104) *
                        C30911 * C3782) *
                       C30714 * C2883)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C3782) *
                       C30714 * C30691 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30822 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30815 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C3782) *
                       C30714 * C30700 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30815 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30822 +
                    ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                      C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                         C4742 +
                     (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                      C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                         C30662) *
                        C30911 * C3782) *
                       C30714 * C2883)) /
                     (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C3274 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30714 * C31041 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C3274) *
                       C30714 * C31034 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C3274 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30714 * C31021 +
                   ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                     (C113 * C770 + C30897 * C771) * C116 +
                     (C113 * C772 + C30897 * C773) * C104) *
                        C30911 * C30819 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C3274) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C3274 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C31035 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C3274) *
                        C31023 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C3274 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C30998) *
                       C2620 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C3274) *
                        C31035 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C3274 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C31023 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C3274) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C31041 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C3274) *
                       C30714 * C31034 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C3274 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C31021 +
                   (((C4739 * C486 + C4735 * C502 + C4740 * C929 +
                      C4736 * C938 + C4741 * C1584 + C4737 * C1585) *
                         C4742 +
                     (C4739 * C503 + C4735 * C516 + C4740 * C937 +
                      C4736 * C944 + C4741 * C1586 + C4737 * C1587) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C3274) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C31035 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C3274) *
                        C31023 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C30998) *
                       C2620 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C3274) *
                        C31035 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C3274 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C31023 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C3274) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C30967 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C30777) *
                       C656 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C30777 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C30967) *
                       C657 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C30967 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C30777) *
                       C658 +
                   ((C364 * C114 + C365 * C102 + C670 * C115 + C669 * C103 +
                     (C113 * C660 + C30897 * C661) * C116 +
                     (C113 * C662 + C30897 * C663) * C104) *
                        C30911 * C30732 * C30777 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30732 * C30967) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1416 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1417 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C1418 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30732 * C31008) *
                       C30953 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1417 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1416 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C1418 +
                    (C1438 * C114 + C1437 * C102 + C1436 * C115 + C1435 * C103 +
                     (C113 * C1422 + C30897 * C1423) * C116 +
                     (C113 * C1424 + C30897 * C1425) * C104) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C30967 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C656 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C30967) *
                       C657 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C30967 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C30777) *
                       C658 +
                   (((C4739 * C297 + C4735 * C313 + C4740 * C298 +
                      C4736 * C316 + C4741 * C1422 + C4737 * C1423) *
                         C4742 +
                     (C4739 * C314 + C4735 * C327 + C4740 * C315 +
                      C4736 * C328 + C4741 * C1424 + C4737 * C1425) *
                         C30662) *
                        C30911 * C30732 * C30777 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30732 * C30967) *
                       C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1416 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1417 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C1418 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30732 * C31008) *
                       C30953 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1417 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1416 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C1418 +
                    ((C4739 * C1149 + C4735 * C1157 + C4740 * C1152 +
                      C4736 * C1162 + C4741 * C5705 + C4737 * C5706) *
                         C4742 +
                     (C4739 * C1156 + C4735 * C1167 + C4740 * C1163 +
                      C4736 * C1170 + C4741 * C5707 + C4737 * C5708) *
                         C30662) *
                        C30911 * C30732 * C31008) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C30967 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C288 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C30967 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C30777) *
                       C289 +
                   (((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                      C172 * C116 + C173 * C104) *
                         C30911 * C30968 -
                     (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                      C545 * C102 + C546 * C114) *
                         C30911 * C30819) *
                        C30967 +
                    ((C961 * C114 + C962 * C102 + C964 * C115 + C963 * C103 +
                      (C113 * C930 + C30897 * C939) * C116 +
                      (C113 * C940 + C30897 * C945) * C104) *
                         C30911 * C30819 -
                     (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                      C356 * C102 + C357 * C114) *
                         C30911 * C30968) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C1416 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C30819 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30968) *
                       C1417 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30968 -
                    (C1597 * C104 + C1598 * C116 + C1599 * C103 + C1600 * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C30819) *
                       C1418 +
                   (((C113 * C1698 + C30897 * C1701) * C114 +
                     (C113 * C1702 + C30897 * C1707) * C102 +
                     (C113 * C1699 + C30897 * C1703) * C115 +
                     (C113 * C1704 + C30897 * C1708) * C103 +
                     (C113 * C1700 + C30897 * C1705) * C116 +
                     (C113 * C1706 + C30897 * C1709) * C104) *
                        C30911 * C30819 -
                    (C1435 * C104 + C1436 * C116 + C1437 * C103 + C1438 * C115 +
                     (C113 * C1158 + C30897 * C1168) * C102 +
                     (C113 * C1150 + C30897 * C1159) * C114) *
                        C30911 * C30968) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C288 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C30967 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C30777) *
                       C289 +
                   ((((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                       C4736 * C302 + C4741 * C296 + C4737 * C311) *
                          C4742 +
                      (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                       C4736 * C321 + C4741 * C312 + C4737 * C326) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                       C4736 * C943 + C4739 * C490 + C4735 * C510) *
                          C30662 +
                      (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                       C4736 * C935 + C4739 * C480 + C4735 * C491) *
                          C4742) *
                         C30911 * C30819) *
                        C30967 +
                    (((C4739 * C928 + C4735 * C935 + C4740 * C1285 +
                       C4736 * C1298 + C4741 * C1700 + C4737 * C1705) *
                          C4742 +
                      (C4739 * C936 + C4735 * C943 + C4740 * C1297 +
                       C4736 * C1312 + C4741 * C1706 + C4737 * C1709) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                       C4736 * C326 + C4739 * C301 + C4735 * C321) *
                          C30662 +
                      (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                       C4736 * C311 + C4739 * C291 + C4735 * C302) *
                          C4742) *
                         C30911 * C30968) *
                        C30777) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C1416 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30968) *
                       C1417 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C30819) *
                       C1418 +
                   (((C4739 * C1698 + C4735 * C1701 + C4740 * C5596 +
                      C4736 * C5601 + C4741 * C5957 + C4737 * C5958) *
                         C4742 +
                     (C4739 * C1702 + C4735 * C1707 + C4740 * C5600 +
                      C4736 * C5605 + C4741 * C5959 + C4737 * C5960) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                      C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                         C30662 +
                     (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                      C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                         C4742) *
                        C30911 * C30968) *
                       C31008) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C31035 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C31023 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C31023 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C31035 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C31035 -
                    ((C113 * C317 + C30897 * C329) * C104 +
                     (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                     C364 * C115 + C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C31023 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C30714 * C108 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C30714 * C109 +
                   (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C30714 * C110 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30732 * C30714 * C111 +
                   (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                    (C113 * C123 + C30897 * C136) * C116 +
                    (C113 * C137 + C30897 * C144) * C104) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31036 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31025 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C30714 * C288 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C31025 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C31036 -
                    (C555 * C104 + C556 * C116 + C552 * C103 + C551 * C115 +
                     C550 * C102 + C549 * C114) *
                        C30911 * C31001) *
                       C30714 * C289 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C31036 -
                    ((C113 * C506 + C30897 * C518) * C104 +
                     (C113 * C488 + C30897 * C507) * C116 + C554 * C103 +
                     C553 * C115 + C545 * C102 + C546 * C114) *
                        C30911 * C31025 +
                    (C551 * C114 + C552 * C102 + C556 * C115 + C555 * C103 +
                     (C113 * C489 + C30897 * C508) * C116 +
                     (C113 * C509 + C30897 * C519) * C104) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1074 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1075 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1075 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1074 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C1074 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C1075 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1142 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1143 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C1144 -
                   ((C113 * C1154 + C30897 * C1166) * C104 +
                    (C113 * C1148 + C30897 * C1155) * C116 +
                    (C113 * C1156 + C30897 * C1167) * C103 +
                    (C113 * C1149 + C30897 * C1157) * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C1145 +
                   ((C113 * C1151 + C30897 * C1160) * C114 +
                    (C113 * C1161 + C30897 * C1169) * C102 +
                    (C113 * C1152 + C30897 * C1162) * C115 +
                    (C113 * C1163 + C30897 * C1170) * C103 +
                    (C113 * C1153 + C30897 * C1164) * C116 +
                    (C113 * C1165 + C30897 * C1171) * C104) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C31036 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C31025 +
                    ((C113 * C483 + C30897 * C496) * C114 +
                     (C113 * C497 + C30897 * C513) * C102 + C549 * C115 +
                     C550 * C103 + C551 * C116 + C552 * C104) *
                        C30911 * C31001) *
                       C1074 +
                   (((C113 * C926 + C30897 * C931) * C114 +
                     (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                     C960 * C103 + C961 * C116 + C962 * C104) *
                        C30911 * C31025 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C31036 -
                    ((C113 * C1291 + C30897 * C1309) * C104 +
                     (C113 * C1282 + C30897 * C1292) * C116 +
                     (C113 * C1293 + C30897 * C1310) * C103 +
                     (C113 * C1283 + C30897 * C1294) * C115 +
                     (C113 * C1295 + C30897 * C1311) * C102 +
                     (C113 * C1284 + C30897 * C1296) * C114) *
                        C30911 * C31001) *
                       C1075 +
                   (((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C31036 -
                    ((C113 * C1297 + C30897 * C1312) * C104 +
                     (C113 * C1285 + C30897 * C1298) * C116 +
                     (C113 * C1299 + C30897 * C1313) * C103 +
                     (C113 * C1286 + C30897 * C1300) * C115 +
                     (C113 * C1301 + C30897 * C1314) * C102 +
                     (C113 * C1287 + C30897 * C1302) * C114) *
                        C30911 * C31025 +
                    ((C113 * C1288 + C30897 * C1303) * C114 +
                     (C113 * C1304 + C30897 * C1315) * C102 +
                     (C113 * C1289 + C30897 * C1305) * C115 +
                     (C113 * C1306 + C30897 * C1316) * C103 +
                     (C113 * C1290 + C30897 * C1307) * C116 +
                     (C113 * C1308 + C30897 * C1317) * C104) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30714 * C108 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30714 * C109 +
                   ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30714 * C110 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30714 * C111 +
                   ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                     C4741 * C300 + C4737 * C319) *
                        C4742 +
                    (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                     C4741 * C320 + C4737 * C330) *
                        C30662) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31023 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C288 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C1306 + C4737 * C1316 + C4740 * C1293 +
                      C4736 * C1310 + C4739 * C499 + C4735 * C514) *
                         C30662 +
                     (C4741 * C1289 + C4737 * C1305 + C4740 * C1283 +
                      C4736 * C1294 + C4739 * C484 + C4735 * C498) *
                         C4742) *
                        C30911 * C31001) *
                       C30714 * C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C485 + C4735 * C500 + C4740 * C1282 +
                      C4736 * C1292 + C4741 * C1290 + C4737 * C1307) *
                         C4742 +
                     (C4739 * C501 + C4735 * C515 + C4740 * C1291 +
                      C4736 * C1309 + C4741 * C1308 + C4737 * C1317) *
                         C30662) *
                        C30911 * C31001) *
                       C30714 * C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1075 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1142 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1143 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1144 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C1145 +
                   ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                     C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                        C4742 +
                    (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                     C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                        C30662) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C483 + C4735 * C496 + C4740 * C1284 +
                      C4736 * C1296 + C4741 * C1288 + C4737 * C1303) *
                         C4742 +
                     (C4739 * C497 + C4735 * C513 + C4740 * C1295 +
                      C4736 * C1311 + C4741 * C1304 + C4737 * C1315) *
                         C30662) *
                        C30911 * C31001) *
                       C1074 +
                   (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                      C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                         C4742 +
                     (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                      C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                         C30662) *
                        C30911 * C31025 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C31036 -
                    ((C4741 * C5598 + C4737 * C5604 + C4740 * C1304 +
                      C4736 * C1315 + C4739 * C1295 + C4735 * C1311) *
                         C30662 +
                     (C4741 * C5595 + C4737 * C5599 + C4740 * C1288 +
                      C4736 * C1303 + C4739 * C1284 + C4735 * C1296) *
                         C4742) *
                        C30911 * C31001) *
                       C1075 +
                   (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C31036 -
                    ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                      C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                         C30662 +
                     (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                      C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                         C4742) *
                        C30911 * C31025 +
                    ((C4739 * C1288 + C4735 * C1303 + C4740 * C5595 +
                      C4736 * C5599 + C4741 * C5597 + C4737 * C5602) *
                         C4742 +
                     (C4739 * C1304 + C4735 * C1315 + C4740 * C5598 +
                      C4736 * C5604 + C4741 * C5603 + C4737 * C5606) *
                         C30662) *
                        C30911 * C31001) *
                       C30998) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30968 -
                    (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                     (C113 * C494 + C30897 * C512) * C102 +
                     (C113 * C482 + C30897 * C495) * C114) *
                        C30911 * C30819) *
                       C30714 * C656 +
                   ((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                     C553 * C116 + C554 * C104) *
                        C30911 * C30819 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30968) *
                       C30714 * C657 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30968 -
                    (C779 * C104 + C780 * C116 + C554 * C103 + C553 * C115 +
                     C545 * C102 + C546 * C114) *
                        C30911 * C30819) *
                       C30714 * C658 +
                   ((C553 * C114 + C554 * C102 + C780 * C115 + C779 * C103 +
                     (C113 * C770 + C30897 * C771) * C116 +
                     (C113 * C772 + C30897 * C773) * C104) *
                        C30911 * C30819 -
                    (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                     C170 * C102 + C171 * C114) *
                        C30911 * C30968) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C30897 * C124) * C114 +
                      (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                      C167 * C103 + C168 * C116 + C169 * C104) *
                         C30911 * C30968 -
                     (C545 * C104 + C546 * C116 + C547 * C103 + C548 * C115 +
                      (C113 * C494 + C30897 * C512) * C102 +
                      (C113 * C482 + C30897 * C495) * C114) *
                         C30911 * C30819) *
                        C1074 +
                    (((C113 * C926 + C30897 * C931) * C114 +
                      (C113 * C932 + C30897 * C941) * C102 + C959 * C115 +
                      C960 * C103 + C961 * C116 + C962 * C104) *
                         C30911 * C30819 -
                     (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                      (C113 * C305 + C30897 * C323) * C102 +
                      (C113 * C293 + C30897 * C306) * C114) *
                         C30911 * C30968) *
                        C1075 +
                    (((C113 * C294 + C30897 * C307) * C114 +
                      (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                      C361 * C103 + C362 * C116 + C363 * C104) *
                         C30911 * C30968 -
                     (C1597 * C104 + C1598 * C116 + C1599 * C103 +
                      C1600 * C115 + (C113 * C1301 + C30897 * C1314) * C102 +
                      (C113 * C1287 + C30897 * C1302) * C114) *
                         C30911 * C30819) *
                        C30998) *
                       C30953 +
                   (((C548 * C114 + C547 * C102 + C546 * C115 + C545 * C103 +
                      C553 * C116 + C554 * C104) *
                         C30911 * C30819 -
                     (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                      C167 * C102 + C166 * C114) *
                         C30911 * C30968) *
                        C1074 +
                    ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                      C364 * C116 + C365 * C104) *
                         C30911 * C30968 -
                     (C963 * C104 + C964 * C116 + C962 * C103 + C961 * C115 +
                      C960 * C102 + C959 * C114) *
                         C30911 * C30819) *
                        C1075 +
                    ((C1600 * C114 + C1599 * C102 + C1598 * C115 +
                      C1597 * C103 + (C113 * C1584 + C30897 * C1585) * C116 +
                      (C113 * C1586 + C30897 * C1587) * C104) *
                         C30911 * C30819 -
                     (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                      C361 * C102 + C360 * C114) *
                         C30911 * C30968) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                      C4736 * C941 + C4739 * C494 + C4735 * C512) *
                         C30662 +
                     (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                      C4736 * C931 + C4739 * C482 + C4735 * C495) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C656 +
                   (((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                      C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                         C4742 +
                     (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                      C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30968) *
                       C30714 * C657 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30968 -
                    ((C4741 * C1297 + C4737 * C1312 + C4740 * C936 +
                      C4736 * C943 + C4739 * C490 + C4735 * C510) *
                         C30662 +
                     (C4741 * C1285 + C4737 * C1298 + C4740 * C928 +
                      C4736 * C935 + C4739 * C480 + C4735 * C491) *
                         C4742) *
                        C30911 * C30819) *
                       C30714 * C658 +
                   (((C4739 * C486 + C4735 * C502 + C4740 * C929 +
                      C4736 * C938 + C4741 * C1584 + C4737 * C1585) *
                         C4742 +
                     (C4739 * C503 + C4735 * C516 + C4740 * C937 +
                      C4736 * C944 + C4741 * C1586 + C4737 * C1587) *
                         C30662) *
                        C30911 * C30819 -
                    ((C4741 * C315 + C4737 * C328 + C4740 * C314 +
                      C4736 * C327 + C4739 * C130 + C4735 * C141) *
                         C30662 +
                     (C4741 * C298 + C4737 * C316 + C4740 * C297 +
                      C4736 * C313 + C4739 * C120 + C4735 * C131) *
                         C4742) *
                        C30911 * C30968) *
                       C30714 * C31002)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                       C4736 * C306 + C4741 * C294 + C4737 * C307) *
                          C4742 +
                      (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                       C4736 * C323 + C4741 * C308 + C4737 * C324) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1301 + C4737 * C1314 + C4740 * C932 +
                       C4736 * C941 + C4739 * C494 + C4735 * C512) *
                          C30662 +
                      (C4741 * C1287 + C4737 * C1302 + C4740 * C926 +
                       C4736 * C931 + C4739 * C482 + C4735 * C495) *
                          C4742) *
                         C30911 * C30819) *
                        C1074 +
                    (((C4739 * C926 + C4735 * C931 + C4740 * C1287 +
                       C4736 * C1302 + C4741 * C1698 + C4737 * C1701) *
                          C4742 +
                      (C4739 * C932 + C4735 * C941 + C4740 * C1301 +
                       C4736 * C1314 + C4741 * C1702 + C4737 * C1707) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                       C4736 * C324 + C4739 * C305 + C4735 * C323) *
                          C30662 +
                      (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                       C4736 * C307 + C4739 * C293 + C4735 * C306) *
                          C4742) *
                         C30911 * C30968) *
                        C1075 +
                    (((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                       C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                          C4742 +
                      (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                       C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C5600 + C4737 * C5605 + C4740 * C1702 +
                       C4736 * C1707 + C4739 * C1301 + C4735 * C1314) *
                          C30662 +
                      (C4741 * C5596 + C4737 * C5601 + C4740 * C1698 +
                       C4736 * C1701 + C4739 * C1287 + C4735 * C1302) *
                          C4742) *
                         C30911 * C30819) *
                        C30998) *
                       C30953 +
                   ((((C4739 * C481 + C4735 * C493 + C4740 * C927 +
                       C4736 * C933 + C4741 * C1286 + C4737 * C1300) *
                          C4742 +
                      (C4739 * C492 + C4735 * C511 + C4740 * C934 +
                       C4736 * C942 + C4741 * C1299 + C4737 * C1313) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                       C4736 * C322 + C4739 * C127 + C4735 * C139) *
                          C30662 +
                      (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                       C4736 * C304 + C4739 * C118 + C4735 * C126) *
                          C4742) *
                         C30911 * C30968) *
                        C1074 +
                    (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                       C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                          C4742 +
                      (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                       C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                          C30662) *
                         C30911 * C30968 -
                     ((C4741 * C1704 + C4737 * C1708 + C4740 * C1299 +
                       C4736 * C1313 + C4739 * C934 + C4735 * C942) *
                          C30662 +
                      (C4741 * C1699 + C4737 * C1703 + C4740 * C1286 +
                       C4736 * C1300 + C4739 * C927 + C4735 * C933) *
                          C4742) *
                         C30911 * C30819) *
                        C1075 +
                    (((C4739 * C1286 + C4735 * C1300 + C4740 * C1699 +
                       C4736 * C1703 + C4741 * C5855 + C4737 * C5856) *
                          C4742 +
                      (C4739 * C1299 + C4735 * C1313 + C4740 * C1704 +
                       C4736 * C1708 + C4741 * C5857 + C4737 * C5858) *
                          C30662) *
                         C30911 * C30819 -
                     ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                       C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                          C30662 +
                      (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                       C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                          C4742) *
                         C30911 * C30968) *
                        C30998) *
                       C30697)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C30714 * C108 -
                   (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                    C167 * C102 + C166 * C114) *
                       C30911 * C30732 * C30714 * C109 +
                   (C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                    C172 * C116 + C173 * C104) *
                       C30911 * C30732 * C30714 * C110 -
                   (C174 * C104 + C175 * C116 + C173 * C103 + C172 * C115 +
                    C170 * C102 + C171 * C114) *
                       C30911 * C30732 * C30714 * C111 +
                   (C172 * C114 + C173 * C102 + C175 * C115 + C174 * C103 +
                    (C113 * C123 + C30897 * C136) * C116 +
                    (C113 * C137 + C30897 * C144) * C104) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C31035 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C31023 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C31023 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C31035 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C31035 -
                    ((C113 * C317 + C30897 * C329) * C104 +
                     (C113 * C299 + C30897 * C318) * C116 + C365 * C103 +
                     C364 * C115 + C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C31023 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C30897 * C124) * C114 +
                     (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                     C167 * C103 + C168 * C116 + C169 * C104) *
                        C30911 * C30732 * C1074 -
                    (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                     (C113 * C305 + C30897 * C323) * C102 +
                     (C113 * C293 + C30897 * C306) * C114) *
                        C30911 * C30732 * C1075 +
                    ((C113 * C294 + C30897 * C307) * C114 +
                     (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                     C361 * C103 + C362 * C116 + C363 * C104) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   ((C359 * C114 + C358 * C102 + C357 * C115 + C356 * C103 +
                     C364 * C116 + C365 * C104) *
                        C30911 * C30732 * C1075 -
                    (C170 * C104 + C171 * C116 + C169 * C103 + C168 * C115 +
                     C167 * C102 + C166 * C114) *
                        C30911 * C30732 * C1074 -
                    (C366 * C104 + C367 * C116 + C363 * C103 + C362 * C115 +
                     C361 * C102 + C360 * C114) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   ((C168 * C114 + C169 * C102 + C171 * C115 + C170 * C103 +
                     C172 * C116 + C173 * C104) *
                        C30911 * C30732 * C1074 -
                    (C669 * C104 + C670 * C116 + C365 * C103 + C364 * C115 +
                     C356 * C102 + C357 * C114) *
                        C30911 * C30732 * C1075 +
                    (C362 * C114 + C363 * C102 + C367 * C115 + C366 * C103 +
                     (C113 * C300 + C30897 * C319) * C116 +
                     (C113 * C320 + C30897 * C330) * C104) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C30897 * C124) * C114 +
                    (C113 * C125 + C30897 * C138) * C102 + C166 * C115 +
                    C167 * C103 + C168 * C116 + C169 * C104) *
                       C30911 * C30732 * C1142 -
                   (C356 * C104 + C357 * C116 + C358 * C103 + C359 * C115 +
                    (C113 * C305 + C30897 * C323) * C102 +
                    (C113 * C293 + C30897 * C306) * C114) *
                       C30911 * C30732 * C1143 +
                   ((C113 * C294 + C30897 * C307) * C114 +
                    (C113 * C308 + C30897 * C324) * C102 + C360 * C115 +
                    C361 * C103 + C362 * C116 + C363 * C104) *
                       C30911 * C30732 * C1144 -
                   ((C113 * C1154 + C30897 * C1166) * C104 +
                    (C113 * C1148 + C30897 * C1155) * C116 +
                    (C113 * C1156 + C30897 * C1167) * C103 +
                    (C113 * C1149 + C30897 * C1157) * C115 +
                    (C113 * C1158 + C30897 * C1168) * C102 +
                    (C113 * C1150 + C30897 * C1159) * C114) *
                       C30911 * C30732 * C1145 +
                   ((C113 * C1151 + C30897 * C1160) * C114 +
                    (C113 * C1161 + C30897 * C1169) * C102 +
                    (C113 * C1152 + C30897 * C1162) * C115 +
                    (C113 * C1163 + C30897 * C1170) * C103 +
                    (C113 * C1153 + C30897 * C1164) * C116 +
                    (C113 * C1165 + C30897 * C1171) * C104) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C30714 * C108 -
                   ((C4741 * C310 + C4737 * C325 + C4740 * C303 + C4736 * C322 +
                     C4739 * C127 + C4735 * C139) *
                        C30662 +
                    (C4741 * C295 + C4737 * C309 + C4740 * C292 + C4736 * C304 +
                     C4739 * C118 + C4735 * C126) *
                        C4742) *
                       C30911 * C30732 * C30714 * C109 +
                   ((C4739 * C119 + C4735 * C128 + C4740 * C291 + C4736 * C302 +
                     C4741 * C296 + C4737 * C311) *
                        C4742 +
                    (C4739 * C129 + C4735 * C140 + C4740 * C301 + C4736 * C321 +
                     C4741 * C312 + C4737 * C326) *
                        C30662) *
                       C30911 * C30732 * C30714 * C110 -
                   ((C4741 * C315 + C4737 * C328 + C4740 * C314 + C4736 * C327 +
                     C4739 * C130 + C4735 * C141) *
                        C30662 +
                    (C4741 * C298 + C4737 * C316 + C4740 * C297 + C4736 * C313 +
                     C4739 * C120 + C4735 * C131) *
                        C4742) *
                       C30911 * C30732 * C30714 * C111 +
                   ((C4739 * C121 + C4735 * C132 + C4740 * C299 + C4736 * C318 +
                     C4741 * C300 + C4737 * C319) *
                        C4742 +
                    (C4739 * C133 + C4735 * C142 + C4740 * C317 + C4736 * C329 +
                     C4741 * C320 + C4737 * C330) *
                        C30662) *
                       C30911 * C30732 * C30714 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C288 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C31023 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C289 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C31035 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C31023 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4739 * C117 + C4735 * C124 + C4740 * C293 +
                      C4736 * C306 + C4741 * C294 + C4737 * C307) *
                         C4742 +
                     (C4739 * C125 + C4735 * C138 + C4740 * C305 +
                      C4736 * C323 + C4741 * C308 + C4737 * C324) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                      C4736 * C324 + C4739 * C305 + C4735 * C323) *
                         C30662 +
                     (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                      C4736 * C307 + C4739 * C293 + C4735 * C306) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                      C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                         C4742 +
                     (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                      C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C31032 +
                   (((C4739 * C292 + C4735 * C304 + C4740 * C295 +
                      C4736 * C309 + C4741 * C1149 + C4737 * C1157) *
                         C4742 +
                     (C4739 * C303 + C4735 * C322 + C4740 * C310 +
                      C4736 * C325 + C4741 * C1156 + C4737 * C1167) *
                         C30662) *
                        C30911 * C30732 * C1075 -
                    ((C4741 * C310 + C4737 * C325 + C4740 * C303 +
                      C4736 * C322 + C4739 * C127 + C4735 * C139) *
                         C30662 +
                     (C4741 * C295 + C4737 * C309 + C4740 * C292 +
                      C4736 * C304 + C4739 * C118 + C4735 * C126) *
                         C4742) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1163 + C4737 * C1170 + C4740 * C1156 +
                      C4736 * C1167 + C4739 * C310 + C4735 * C325) *
                         C30662 +
                     (C4741 * C1152 + C4737 * C1162 + C4740 * C1149 +
                      C4736 * C1157 + C4739 * C295 + C4735 * C309) *
                         C4742) *
                        C30911 * C30732 * C30998) *
                       C31019 +
                   (((C4739 * C119 + C4735 * C128 + C4740 * C291 +
                      C4736 * C302 + C4741 * C296 + C4737 * C311) *
                         C4742 +
                     (C4739 * C129 + C4735 * C140 + C4740 * C301 +
                      C4736 * C321 + C4741 * C312 + C4737 * C326) *
                         C30662) *
                        C30911 * C30732 * C1074 -
                    ((C4741 * C1154 + C4737 * C1166 + C4740 * C312 +
                      C4736 * C326 + C4739 * C301 + C4735 * C321) *
                         C30662 +
                     (C4741 * C1148 + C4737 * C1155 + C4740 * C296 +
                      C4736 * C311 + C4739 * C291 + C4735 * C302) *
                         C4742) *
                        C30911 * C30732 * C1075 +
                    ((C4739 * C296 + C4735 * C311 + C4740 * C1148 +
                      C4736 * C1155 + C4741 * C1153 + C4737 * C1164) *
                         C4742 +
                     (C4739 * C312 + C4735 * C326 + C4740 * C1154 +
                      C4736 * C1166 + C4741 * C1165 + C4737 * C1171) *
                         C30662) *
                        C30911 * C30732 * C30998) *
                       C30992)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4739 * C117 + C4735 * C124 + C4740 * C293 + C4736 * C306 +
                     C4741 * C294 + C4737 * C307) *
                        C4742 +
                    (C4739 * C125 + C4735 * C138 + C4740 * C305 + C4736 * C323 +
                     C4741 * C308 + C4737 * C324) *
                        C30662) *
                       C30911 * C30732 * C1142 -
                   ((C4741 * C1158 + C4737 * C1168 + C4740 * C308 +
                     C4736 * C324 + C4739 * C305 + C4735 * C323) *
                        C30662 +
                    (C4741 * C1150 + C4737 * C1159 + C4740 * C294 +
                     C4736 * C307 + C4739 * C293 + C4735 * C306) *
                        C4742) *
                       C30911 * C30732 * C1143 +
                   ((C4739 * C294 + C4735 * C307 + C4740 * C1150 +
                     C4736 * C1159 + C4741 * C1151 + C4737 * C1160) *
                        C4742 +
                    (C4739 * C308 + C4735 * C324 + C4740 * C1158 +
                     C4736 * C1168 + C4741 * C1161 + C4737 * C1169) *
                        C30662) *
                       C30911 * C30732 * C1144 -
                   ((C4741 * C5479 + C4737 * C5483 + C4740 * C1161 +
                     C4736 * C1169 + C4739 * C1158 + C4735 * C1168) *
                        C30662 +
                    (C4741 * C5477 + C4737 * C5480 + C4740 * C1151 +
                     C4736 * C1160 + C4739 * C1150 + C4735 * C1159) *
                        C4742) *
                       C30911 * C30732 * C1145 +
                   ((C4739 * C1151 + C4735 * C1160 + C4740 * C5477 +
                     C4736 * C5480 + C4741 * C5478 + C4737 * C5481) *
                        C4742 +
                    (C4739 * C1161 + C4735 * C1169 + C4740 * C5479 +
                     C4736 * C5483 + C4741 * C5482 + C4737 * C5484) *
                        C30662) *
                       C30911 * C30732 * C1146) *
                  C30686) /
                     (p * q * std::sqrt(p + q));
}
