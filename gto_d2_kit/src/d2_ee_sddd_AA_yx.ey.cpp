/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AA_yx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_11_21(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29950 = ae * be;
    const double C29949 = ae + be;
    const double C29948 = 0 * be;
    const double C29947 = xA - xB;
    const double C29971 = 0 * be;
    const double C29970 = yA - yB;
    const double C29992 = xP - xQ;
    const double C29991 = yP - yQ;
    const double C29990 = p + q;
    const double C29989 = p * q;
    const double C29999 = std::pow(ae, 2);
    const double C29997 = bs[3];
    const double C30007 = bs[4];
    const double C30016 = bs[5];
    const double C30030 = bs[6];
    const double C30052 = bs[7];
    const double C30161 = zP - zQ;
    const double C30324 = bs[2];
    const double C117 = bs[0];
    const double C30699 = ce + de;
    const double C30698 = ce * de;
    const double C30697 = xC - xD;
    const double C30731 = yC - yD;
    const double C30749 = zC - zD;
    const double C30928 = zA - zB;
    const double C29951 = std::pow(C29949, 2);
    const double C30972 = 2 * C29949;
    const double C29952 = C29950 * C29947;
    const double C30678 = std::pow(C29947, 2);
    const double C30971 = C29947 * ae;
    const double C29972 = C29950 * C29970;
    const double C30917 = std::pow(C29970, 2);
    const double C31003 = C29970 * ae;
    const double C30017 = std::pow(C29992, 2);
    const double C30075 = C29992 * ae;
    const double C30000 = C29991 * ae;
    const double C29998 = C29991 * C29992;
    const double C30173 = std::pow(C29991, 2);
    const double C29993 = 2 * C29989;
    const double C30192 = std::pow(C30161, 2);
    const double C30703 = 2 * C30699;
    const double C30702 = std::pow(C30699, 2);
    const double C30704 = C30697 * de;
    const double C30701 = C30697 * ce;
    const double C30700 = std::pow(C30697, 2);
    const double C30732 = std::pow(C30731, 2);
    const double C30791 = C30731 * de;
    const double C30789 = C30731 * ce;
    const double C30750 = std::pow(C30749, 2);
    const double C30833 = C30749 * de;
    const double C30831 = C30749 * ce;
    const double C30929 = std::pow(C30928, 2);
    const double C31004 = C30928 * ae;
    const double C29953 = 2 * C29951;
    const double C138 = (std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                         (yP - yQ) * (xP - xQ) * std::pow(ae, 2)) /
                        C29951;
    const double C31007 = std::pow(C30972, -2);
    const double C31005 = std::pow(C30972, -1);
    const double C30679 = C30678 * C29950;
    const double C30918 = C30917 * C29950;
    const double C30080 = C29997 * C30075;
    const double C30083 = C30007 * C30075;
    const double C30089 = C30016 * C30075;
    const double C30103 = C30030 * C30075;
    const double C30124 = C30052 * C30075;
    const double C30003 = C29997 * C30000;
    const double C30009 = C30007 * C30000;
    const double C30019 = C30016 * C30000;
    const double C30034 = C30030 * C30000;
    const double C30058 = C30052 * C30000;
    const double C30002 = C29998 * C29999;
    const double C29994 = C29993 / C29990;
    const double C124 = (-(bs[1] * C30075 * C29993) / C29990) / C29949;
    const double C127 = (-(bs[1] * C30000 * C29993) / C29990) / C29949;
    const double C118 = -(C29992 * bs[1] * C29993) / C29990;
    const double C263 = -(C29991 * bs[1] * C29993) / C29990;
    const double C416 = -(C30161 * bs[1] * C29993) / C29990;
    const double C30716 = std::pow(C30703, -1);
    const double C30980 = std::pow(C30703, -2);
    const double C30717 = 2 * C30702;
    const double C30984 = C30702 * C30703;
    const double C30983 = 4 * C30702;
    const double C30973 = std::pow(C30701, 2);
    const double C30705 = C30700 * C30698;
    const double C30733 = C30732 * C30698;
    const double C30985 = std::pow(C30789, 2);
    const double C30751 = C30750 * C30698;
    const double C30987 = std::pow(C30831, 2);
    const double C30930 = C30929 * C29950;
    const double C30680 = C30679 / C29949;
    const double C30919 = C30918 / C29949;
    const double C30008 = C30007 * C30002;
    const double C30018 = C30016 * C30002;
    const double C30032 = C30030 * C30002;
    const double C30056 = C30052 * C30002;
    const double C29996 = -C29994;
    const double C30006 = std::pow(C29994, 4);
    const double C30029 = std::pow(C29994, 6);
    const double C139 = (ae * std::pow(C29994, 2) * bs[2] * C29991 * ae +
                         C29992 * std::pow(-C29994, 3) * bs[3] * C29991 *
                             C29992 * std::pow(ae, 2)) /
                        C29951;
    const double C30323 = std::pow(C29994, 2);
    const double C125 =
        (C29992 * std::pow(C29994, 2) * bs[2] * C30075) / C29949 -
        (ae * bs[1] * C29993) / (C29990 * C29949);
    const double C31017 = 4 * C30984;
    const double C31016 = C30699 * C30983;
    const double C30706 = C30705 / C30699;
    const double C30734 = C30733 / C30699;
    const double C30752 = C30751 / C30699;
    const double C30931 = C30930 / C29949;
    const double C30681 = -C30680;
    const double C30920 = -C30919;
    const double C30001 = std::pow(C29996, 3);
    const double C30015 = std::pow(C29996, 5);
    const double C30051 = std::pow(C29996, 7);
    const double C30011 = C30006 * C30009;
    const double C30010 = C30006 * C30008;
    const double C30085 = C30006 * C30083;
    const double C30090 = C30007 * C30006;
    const double C30037 = C30029 * C30034;
    const double C30036 = C30029 * C30032;
    const double C30105 = C30029 * C30103;
    const double C30125 = C30030 * C30029;
    const double C30325 = C30324 * C30323;
    const double C128 = (C29992 * C30323 * C30324 * C30000) / C29949;
    const double C273 = (C29991 * C30323 * C30324 * C30000) / C29949 -
                        (ae * bs[1] * C29993) / (C29990 * C29949);
    const double C276 = (C29991 * C30323 * C30324 * C30075) / C29949;
    const double C426 = (C30161 * C30323 * C30324 * C30000) / C29949;
    const double C429 = (C30161 * C30323 * C30324 * C30075) / C29949;
    const double C30707 = -C30706;
    const double C30735 = -C30734;
    const double C30753 = -C30752;
    const double C30932 = -C30931;
    const double C30682 = std::exp(C30681);
    const double C30921 = std::exp(C30920);
    const double C30004 = C30001 * C30003;
    const double C30076 = C29997 * C30001;
    const double C30081 = C30001 * C30080;
    const double C293 = (ae * std::pow(C29994, 2) * bs[2] * C30075 +
                         C29991 * C30001 * C29997 * C30002) /
                        C29951;
    const double C446 = ((zP - zQ) * C30001 * C29997 * C30002) / C29951;
    const double C30021 = C30015 * C30019;
    const double C30020 = C30015 * C30018;
    const double C30091 = C30015 * C30089;
    const double C30104 = C30016 * C30015;
    const double C30061 = C30051 * C30058;
    const double C30060 = C30051 * C30056;
    const double C30127 = C30051 * C30124;
    const double C30014 = ae * C30011;
    const double C30013 = C29992 * C30011;
    const double C30410 = C29991 * C30011;
    const double C447 =
        (C30001 * C29997 * C30002 + C30010 * std::pow(zP - zQ, 2)) / C29951;
    const double C30086 = C29992 * C30085;
    const double C30171 = ae * C30085;
    const double C30170 = C29991 * C30085;
    const double C30093 = C29992 * C30090;
    const double C30092 = C30090 * ae;
    const double C30333 = C30090 * C30017;
    const double C30412 = C30090 * C30173;
    const double C30479 = C29991 * C30090;
    const double C30660 = C30090 * C30192;
    const double C30663 = C30161 * C30090;
    const double C30039 = C30037 * C30017;
    const double C30050 = ae * C30037;
    const double C30049 = C29992 * C30037;
    const double C30494 = C29991 * C30037;
    const double C30561 = C30037 * C30192;
    const double C30038 = C29992 * C30036;
    const double C30223 = C29991 * C30036;
    const double C30257 = C30036 * C30192;
    const double C30261 = C30161 * C30036;
    const double C30109 = C29992 * C30105;
    const double C30224 = C30105 * C30173;
    const double C30238 = ae * C30105;
    const double C30237 = C29991 * C30105;
    const double C30266 = C30105 * C30192;
    const double C30295 = C30161 * C30105;
    const double C30130 = C30125 * C30017;
    const double C30129 = C29992 * C30125;
    const double C30128 = C30125 * ae;
    const double C30497 = C30125 * C30173;
    const double C119 = C30325 * C30017 - (bs[1] * C29993) / C29990;
    const double C262 = C29991 * C29992 * C30325;
    const double C264 = C30325 * C30173 - (bs[1] * C29993) / C29990;
    const double C415 = C30161 * C29992 * C30325;
    const double C417 = C30325 * C30192 - (bs[1] * C29993) / C29990;
    const double C812 = C30161 * C29991 * C30325;
    const double C30708 = std::exp(C30707);
    const double C30736 = std::exp(C30735);
    const double C30754 = std::exp(C30753);
    const double C30933 = std::exp(C30932);
    const double C4675 = C30682 * C276;
    const double C9128 = C30682 * C429;
    const double C29954 = C29952 * C30682;
    const double C31006 = C30682 * C30971;
    const double C101 =
        (C30682 * std::pow(C30971, 2)) / C29951 + C30682 / C30972;
    const double C103 = C31007 * C30682;
    const double C13223 = C31005 * C30682;
    const double C29973 = C29972 * C30921;
    const double C116 = -(2 * C29950 * (yA - yB) * C30921) / C29949;
    const double C31037 = C30921 * C31003;
    const double C4556 =
        (C30921 * std::pow(C31003, 2)) / C29951 + C30921 / C30972;
    const double C4558 = C31007 * C30921;
    const double C13225 = C31005 * C30921;
    const double C140 = (C30001 * C29997 * C30002 + ae * C29992 * C30004 +
                         C29992 * (ae * C30004 + C29992 * std::pow(C29994, 4) *
                                                     bs[4] * C30002)) /
                        C29951;
    const double C141 =
        (2 * (ae * C30004 + C29992 * C30010) +
         ae * (C30004 + C30011 * std::pow(C29992, 2)) +
         C29992 * (C30010 + ae * C29992 * C30011 +
                   C29992 * (ae * C30011 +
                             C29992 * std::pow(C29996, 5) * bs[5] * C30002))) /
        C29951;
    const double C292 = (ae * (C29992 * C30001 * C29997 * C30075 +
                               bs[2] * std::pow(C29994, 2) * ae) +
                         C29991 * (ae * C30004 + C29992 * C30010)) /
                        C29951;
    const double C445 = ((zP - zQ) * (ae * C30004 + C29992 * C30010)) / C29951;
    const double C129 = (C30323 * C30324 * C30000 + C30004 * C30017) / C29949;
    const double C130 =
        (2 * C29992 * C30004 + C29992 * (C30004 + C30011 * C30017)) / C29949;
    const double C272 =
        (C29991 * C29992 * C30004 + C29992 * C30325 * ae) / C29949;
    const double C280 =
        (C30323 * C30324 * C30000 + C29991 * (C29991 * C30004 + C30325 * ae) +
         C29991 * C30325 * ae) /
        C29949;
    const double C424 = (C30161 * (C30004 + C30011 * C30017)) / C29949;
    const double C425 = (C30161 * C29992 * C30004) / C29949;
    const double C433 = (C30323 * C30324 * C30000 + C30004 * C30192) / C29949;
    const double C820 = (C30161 * (C29991 * C30004 + C30325 * ae)) / C29949;
    const double C1852 =
        (2 * C30161 * C30004 + C30161 * (C30004 + C30011 * C30192)) / C29949;
    const double C30084 = C30076 * ae;
    const double C30332 = C29992 * C30076;
    const double C30411 = C29991 * C30076;
    const double C271 = (C29991 * (C30004 + C30011 * C30017) +
                         (C30325 + C30076 * C30017) * ae) /
                        C29949;
    const double C120 =
        2 * C29992 * C30325 + C29992 * (C30325 + C30076 * C30017);
    const double C261 = C29991 * (C30325 + C30076 * C30017);
    const double C414 = C30161 * (C30325 + C30076 * C30017);
    const double C1018 =
        2 * C29991 * C30325 + C29991 * (C30325 + C30076 * C30173);
    const double C1155 = C30161 * (C30325 + C30076 * C30173);
    const double C1846 =
        2 * C30161 * C30325 + C30161 * (C30325 + C30076 * C30192);
    const double C1847 =
        3 * (C30325 + C30076 * C30192) +
        C30161 * (2 * C30161 * C30076 + C30161 * (C30076 + C30090 * C30192));
    const double C294 = (C30001 * C29997 * C30002 + ae * C29991 * C30081 +
                         C29991 * (ae * C30081 + C29991 * C30010)) /
                        C29951;
    const double C827 =
        (ae * C30161 * C30081 + C29991 * C30161 * C30010) / C29951;
    const double C126 =
        (C30323 * C30324 * C30075 + C29992 * (C29992 * C30081 + C30325 * ae) +
         C29992 * C30325 * ae) /
        C29949;
    const double C275 = (C29991 * (C29992 * C30081 + C30325 * ae)) / C29949;
    const double C277 = (C30323 * C30324 * C30075 + C30081 * C30173) / C29949;
    const double C428 = (C30161 * (C29992 * C30081 + C30325 * ae)) / C29949;
    const double C430 = (C30323 * C30324 * C30075 + C30081 * C30192) / C29949;
    const double C817 = (C30161 * C29991 * C30081) / C29949;
    const double C1027 =
        (2 * C29991 * C30081 + C29991 * (C30081 + C30085 * C30173)) / C29949;
    const double C1170 = (C30161 * (C30081 + C30085 * C30173)) / C29949;
    const double C1855 =
        (2 * C30161 * C30081 + C30161 * (C30081 + C30085 * C30192)) / C29949;
    const double C4677 = C30682 * C293;
    const double C9130 = C30682 * C446;
    const double C30023 = C30021 * C30017;
    const double C30028 = ae * C30021;
    const double C30027 = C29992 * C30021;
    const double C30478 = C29991 * C30021;
    const double C30550 = C30021 * C30192;
    const double C30560 = C30161 * C30021;
    const double C1859 =
        (3 * (C30004 + C30011 * C30192) +
         C30161 * (2 * C30161 * C30011 + C30161 * (C30011 + C30021 * C30192))) /
        C29949;
    const double C30022 = C29992 * C30020;
    const double C30172 = C29991 * C30020;
    const double C30204 = C30161 * C30020;
    const double C1036 = (2 * (ae * C30081 + C29991 * C30010) +
                          ae * (C30081 + C30085 * std::pow(C29991, 2)) +
                          C29991 * (C30010 + ae * C29991 * C30085 +
                                    C29991 * (ae * C30085 + C29991 * C30020))) /
                         C29951;
    const double C1179 = (ae * (C30081 + C30085 * C30192) +
                          C29991 * (C30010 + C30020 * C30192)) /
                         C29951;
    const double C1864 =
        (2 * C30161 * C30010 + C30161 * (C30010 + C30020 * C30192)) / C29951;
    const double C30094 = C29992 * C30091;
    const double C30175 = C30091 * C30173;
    const double C30222 = ae * C30091;
    const double C30221 = C29991 * C30091;
    const double C30260 = C30161 * C30091;
    const double C30553 = C30091 * C30192;
    const double C1856 =
        (3 * (C30081 + C30085 * C30192) +
         C30161 * (2 * C30161 * C30085 + C30161 * (C30085 + C30091 * C30192))) /
        C29949;
    const double C30108 = C30104 * C30017;
    const double C30107 = C29992 * C30104;
    const double C30106 = C30104 * ae;
    const double C30480 = C30104 * C30173;
    const double C30495 = C29991 * C30104;
    const double C30664 = C30104 * C30192;
    const double C30063 = C30061 * C30017;
    const double C30062 = C29992 * C30060;
    const double C30239 = C29991 * C30060;
    const double C30267 = C30060 * C30192;
    const double C30296 = C30161 * C30060;
    const double C30131 = C29992 * C30127;
    const double C30241 = C30127 * C30173;
    const double C434 = (C29992 * C30004 + C30013 * C30192) / C29949;
    const double C9134 = C30682 * C447;
    const double C1182 =
        (C30161 * C30010 + ae * C30161 * C30170 +
         C29991 * (ae * C30161 * C30085 + C29991 * C30161 * C30020)) /
        C29951;
    const double C1183 =
        (C30010 + C30020 * C30192 + ae * (C30170 + C29991 * C30091 * C30192) +
         C29991 * (ae * (C30085 + C30091 * C30192) +
                   C29991 * (C30020 + C30036 * C30192))) /
        C29951;
    const double C1164 = (C29991 * C30081 + C30170 * C30192) / C29949;
    const double C30095 = C30093 * ae;
    const double C30338 = 2 * C30093;
    const double C30417 = C29991 * C30093;
    const double C30334 = C30076 + C30333;
    const double C30414 = C30076 + C30412;
    const double C30484 = 2 * C30479;
    const double C30482 = C30479 * ae;
    const double C30661 = C30076 + C30660;
    const double C30665 = 2 * C30663;
    const double C30041 = C30021 + C30039;
    const double C30057 = 2 * C30049;
    const double C30055 = ae * C30049;
    const double C30521 = C29991 * C30049;
    const double C30572 = C30049 * C30192;
    const double C30563 = C30021 + C30561;
    const double C30258 = C30020 + C30257;
    const double C30263 = C29991 * C30261;
    const double C30312 = 2 * C30261;
    const double C30228 = C30091 + C30224;
    const double C30245 = 2 * C30237;
    const double C30243 = ae * C30237;
    const double C30294 = C30161 * C30237;
    const double C30575 = C30237 * C30192;
    const double C30268 = C30091 + C30266;
    const double C30298 = ae * C30295;
    const double C30133 = C30104 + C30130;
    const double C30132 = C30129 * ae;
    const double C30523 = C30129 * C30173;
    const double C30501 = C30104 + C30497;
    const double C30710 = C30708 * C30701;
    const double C30709 = C30708 / C30703;
    const double C30719 = C30716 * C30708;
    const double C30976 = C30708 * C30704;
    const double C31014 = C30980 * C30708;
    const double C31008 = C30708 * C30973;
    const double C30790 = C30736 / C30703;
    const double C30792 = C30736 * C30789;
    const double C30799 = C30716 * C30736;
    const double C30991 = C30736 * C30791;
    const double C31020 = C30980 * C30736;
    const double C31018 = C30736 * C30985;
    const double C30832 = C30754 / C30703;
    const double C30834 = C30754 * C30831;
    const double C30841 = C30716 * C30754;
    const double C30997 = C30754 * C30833;
    const double C31023 = C30980 * C30754;
    const double C31021 = C30754 * C30987;
    const double C31038 = C30933 * C31004;
    const double C8903 =
        (C30933 * std::pow(C31004, 2)) / C29951 + C30933 / C30972;
    const double C8905 = C31007 * C30933;
    const double C18919 = C31005 * C30933;
    const double C115 = ((0 * ae) / C29949 - C29954 / C29951) / (2 * C29949) +
                        (0 * ae) / C29949;
    const double C4559 = -(2 * C29954) / C29949;
    const double C13226 =
        ((C30682 - (C29947 * 2 * C29954) / C29949) * ae) / C29949 -
        C29948 / C29953;
    const double C13227 = (0 * ae) / C29949 - C29954 / C29951;
    const double C102 = (2 * C31005 * C31006) / C29949;
    const double C13222 = C31006 / C29949;
    const double C114 =
        (((C30682 - (C29947 * 2 * C29954) / C29949) * ae) / C29949 -
         C29948 / C29953) /
            (2 * C29949) +
        ((C29947 * ((0 * ae) / C29949 - C29954 / C29951) + C13223) * ae) /
            C29949;
    const double C4562 = ((0 * ae) / C29949 - C29973 / C29951) / (2 * C29949) +
                         (0 * ae) / C29949;
    const double C13228 =
        ((C30921 - (C29970 * 2 * C29973) / C29949) * ae) / C29949 -
        C29971 / C29953;
    const double C13229 = (0 * ae) / C29949 - C29973 / C29951;
    const double C4557 = (2 * C31005 * C31037) / C29949;
    const double C13224 = C31037 / C29949;
    const double C4561 =
        (((C30921 - (C29970 * 2 * C29973) / C29949) * ae) / C29949 -
         C29971 / C29953) /
            (2 * C29949) +
        ((C29970 * ((0 * ae) / C29949 - C29973 / C29951) + C13225) * ae) /
            C29949;
    const double C4689 = C30682 * C292;
    const double C13384 = C13223 * C292;
    const double C9142 = C30682 * C445;
    const double C19220 = C13223 * C445;
    const double C30087 = C30086 + C30084;
    const double C30413 = C30410 + C30084;
    const double C1024 =
        (2 * (C29991 * C30004 + C30325 * ae) +
         C29991 * (C30004 + C29991 * (C29991 * C30011 + C30084) +
                   C29991 * C30076 * ae) +
         (C30325 + C30076 * C30173) * ae) /
        C29949;
    const double C281 =
        (C29992 * C30004 + C29991 * (C29991 * C30013 + C30332 * ae) +
         C29991 * C30332 * ae) /
        C29949;
    const double C821 = (C30161 * (C29991 * C30013 + C30332 * ae)) / C29949;
    const double C265 = C29992 * C30325 + C30332 * C30173;
    const double C418 = C29992 * C30325 + C30332 * C30192;
    const double C813 = C30161 * C29991 * C30332;
    const double C1017 =
        2 * C29991 * C30332 + C29991 * (C30332 + C30093 * C30173);
    const double C1154 = C30161 * (C30332 + C30093 * C30173);
    const double C1845 =
        2 * C30161 * C30332 + C30161 * (C30332 + C30093 * C30192);
    const double C1152 = C29991 * C30325 + C30411 * C30192;
    const double C2222 =
        2 * C30161 * C30411 + C30161 * (C30411 + C30479 * C30192);
    const double C4681 = C30682 * C294;
    const double C5197 = C30682 * C827;
    const double C4687 = C30682 * C275;
    const double C13380 = C13223 * C275;
    const double C4679 = C30682 * C277;
    const double C9140 = C30682 * C428;
    const double C19216 = C13223 * C428;
    const double C9132 = C30682 * C430;
    const double C5199 = C30682 * C817;
    const double C4685 = C30682 * C1027;
    const double C5195 = C30682 * C1170;
    const double C9138 = C30682 * C1855;
    const double C30025 = C30011 + C30023;
    const double C30040 = C30028 + C30038;
    const double C30033 = 2 * C30027;
    const double C30031 = ae * C30027;
    const double C30416 = C29991 * C30027;
    const double C1851 =
        (2 * C30161 * C30013 + C30161 * (C30013 + C30027 * C30192)) / C29949;
    const double C1860 =
        (3 * (C30013 + C30027 * C30192) +
         C30161 * (2 * C30161 * C30027 + C30161 * (C30027 + C30049 * C30192))) /
        C29949;
    const double C30481 = C30478 + C30092;
    const double C30551 = C30011 + C30550;
    const double C30562 = 2 * C30560;
    const double C30024 = C30014 + C30022;
    const double C30174 = C30171 + C30172;
    const double C1865 =
        (3 * (C30010 + C30020 * C30192) +
         C30161 * (2 * C30204 + C30161 * (C30020 + C30036 * C30192))) /
        C29951;
    const double C2231 =
        (ae * (2 * C30161 * C30085 + C30161 * (C30085 + C30091 * C30192)) +
         C29991 * (2 * C30204 + C30161 * (C30020 + C30036 * C30192))) /
        C29951;
    const double C4683 = C30682 * C1036;
    const double C5545 = C30682 * C1179;
    const double C9136 = C30682 * C1864;
    const double C30096 = C30094 + C30092;
    const double C30176 = C30085 + C30175;
    const double C30226 = C30222 + C30223;
    const double C30227 = 2 * C30221;
    const double C30225 = ae * C30221;
    const double C2225 =
        (2 * C30161 * C30170 + C30161 * (C30170 + C30221 * C30192)) / C29949;
    const double C6224 =
        (3 * (C30170 + C30221 * C30192) +
         C30161 * (2 * C30161 * C30221 + C30161 * (C30221 + C30237 * C30192))) /
        C29949;
    const double C30262 = ae * C30260;
    const double C30556 = 2 * C30260;
    const double C30554 = C30085 + C30553;
    const double C10512 = C30682 * C1856;
    const double C30111 = C30090 + C30108;
    const double C30110 = C30107 * ae;
    const double C30126 = 2 * C30107;
    const double C30418 = C30107 * C30173;
    const double C30522 = C29991 * C30107;
    const double C30671 = C30107 * C30192;
    const double C1848 =
        3 * (C30332 + C30093 * C30192) +
        C30161 * (2 * C30161 * C30093 + C30161 * (C30093 + C30107 * C30192));
    const double C30112 = C30109 + C30106;
    const double C30499 = C30494 + C30106;
    const double C30483 = C30090 + C30480;
    const double C30502 = 2 * C30495;
    const double C30500 = C30495 * ae;
    const double C30674 = C30495 * C30192;
    const double C6220 =
        3 * (C30411 + C30479 * C30192) +
        C30161 * (2 * C30161 * C30479 + C30161 * (C30479 + C30495 * C30192));
    const double C30666 = C30090 + C30664;
    const double C30065 = C30037 + C30063;
    const double C30064 = C30050 + C30062;
    const double C30244 = C30238 + C30239;
    const double C30269 = C30036 + C30267;
    const double C30299 = C29991 * C30296;
    const double C30134 = C30131 + C30128;
    const double C30246 = C30105 + C30241;
    const double C5193 = C30682 * C1182;
    const double C5549 = C30682 * C1183;
    const double C5543 = C30682 * C1164;
    const double C1023 =
        (2 * (C29991 * C30013 + C30332 * ae) +
         C29991 * (C30013 + C29991 * (C29991 * C30027 + C30095) +
                   C29991 * C30093 * ae) +
         (C30332 + C30093 * C30173) * ae) /
        C29949;
    const double C1151 = C29991 * C30332 + C30417 * C30192;
    const double C121 = 3 * (C30325 + C30076 * C30017) +
                        C29992 * (2 * C30332 + C29992 * C30334);
    const double C266 = C30325 + C30076 * C30017 + C30334 * C30173;
    const double C267 = C29991 * (2 * C30332 + C29992 * C30334);
    const double C419 = C30325 + C30076 * C30017 + C30334 * C30192;
    const double C420 = C30161 * (2 * C30332 + C29992 * C30334);
    const double C814 = C30161 * C29991 * C30334;
    const double C1019 = 3 * (C30325 + C30076 * C30173) +
                         C29991 * (2 * C30411 + C29991 * C30414);
    const double C1156 = C30325 + C30076 * C30173 + C30414 * C30192;
    const double C1542 = C30161 * (2 * C30411 + C29991 * C30414);
    const double C10501 =
        4 * (2 * C30161 * C30076 + C30161 * C30661) +
        C30161 * (3 * C30661 + C30161 * (2 * C30161 * C30090 +
                                         C30161 * (C30090 + C30104 * C30192)));
    const double C30043 = C29992 * C30041;
    const double C30053 = 3 * C30041;
    const double C30048 = ae * C30041;
    const double C30422 = C29991 * C30041;
    const double C30059 = C30036 + C30055;
    const double C30573 = C30027 + C30572;
    const double C30564 = C30161 * C30563;
    const double C30231 = C29991 * C30228;
    const double C30240 = 3 * C30228;
    const double C30236 = ae * C30228;
    const double C30247 = C30036 + C30243;
    const double C30297 = ae * C30294;
    const double C30576 = C30221 + C30575;
    const double C30270 = ae * C30268;
    const double C30557 = C30161 * C30268;
    const double C30136 = C29992 * C30133;
    const double C30135 = C30133 * ae;
    const double C30424 = C30133 * C30173;
    const double C30526 = C30107 + C30523;
    const double C30504 = C29991 * C30501;
    const double C30711 = C30710 * C30704;
    const double C30718 = C30710 / C30717;
    const double C30977 = C30716 * C30710;
    const double C30975 = C30710 / C30699;
    const double C258 = (C30708 * std::pow(C30704, 2)) / C30702 + C30709;
    const double C30720 = C30719 * C30704;
    const double C30981 = C30701 * C30719;
    const double C30979 = 2 * C30719;
    const double C31024 = C30719 / C30983;
    const double C112 = C30719 / C31017;
    const double C2703 = C30719 / C30703;
    const double C31010 = C30976 / C30699;
    const double C259 = (-2 * C30716 * C30976) / C30699;
    const double C31039 = C31008 / C30702;
    const double C942 = (C30736 * std::pow(C30791, 2)) / C30702 + C30790;
    const double C30793 = C30792 * C30791;
    const double C30798 = C30792 / C30717;
    const double C30989 = C30792 / C30699;
    const double C30986 = C30716 * C30792;
    const double C30800 = C30799 * C30791;
    const double C30995 = C30789 * C30799;
    const double C30994 = 2 * C30799;
    const double C31030 = C30799 / C30983;
    const double C1014 = C30799 / C31017;
    const double C2700 = C30799 / C30703;
    const double C31026 = C30991 / C30699;
    const double C943 = (-2 * C30716 * C30991) / C30699;
    const double C31044 = C31018 / C30702;
    const double C1664 = (C30754 * std::pow(C30833, 2)) / C30702 + C30832;
    const double C30835 = C30834 * C30833;
    const double C30840 = C30834 / C30717;
    const double C30990 = C30834 / C30699;
    const double C30988 = C30716 * C30834;
    const double C30842 = C30841 * C30833;
    const double C31001 = C30831 * C30841;
    const double C31000 = 2 * C30841;
    const double C31036 = C30841 / C30983;
    const double C1843 = C30841 / C31017;
    const double C3602 = C30841 / C30703;
    const double C31032 = C30997 / C30699;
    const double C1665 = (-2 * C30716 * C30997) / C30699;
    const double C31046 = C31021 / C30702;
    const double C8904 = (2 * C31005 * C31038) / C29949;
    const double C18918 = C31038 / C29949;
    const double C4700 = C4559 * C271;
    const double C4698 = C4559 * C261;
    const double C4688 = C4559 * C272;
    const double C4686 = C4559 * C262;
    const double C4684 = C4559 * C1018;
    const double C4680 = C4559 * C280;
    const double C4678 = C4559 * C264;
    const double C4676 = C4559 * C273;
    const double C4674 = C4559 * C263;
    const double C5198 = C4559 * C812;
    const double C5196 = C4559 * C820;
    const double C5194 = C4559 * C1155;
    const double C9153 = C4559 * C424;
    const double C9151 = C4559 * C414;
    const double C9145 = C4559 * C434;
    const double C9141 = C4559 * C425;
    const double C9139 = C4559 * C415;
    const double C9137 = C4559 * C1846;
    const double C9135 = C4559 * C1852;
    const double C9133 = C4559 * C433;
    const double C9131 = C4559 * C417;
    const double C9129 = C4559 * C426;
    const double C9127 = C4559 * C416;
    const double C10513 = C4559 * C1859;
    const double C10511 = C4559 * C1847;
    const double C13413 = C13226 * C271;
    const double C13409 = C13226 * C261;
    const double C13397 = C13226 * C272;
    const double C13393 = C13226 * C262;
    const double C13391 = C13226 * C264;
    const double C13387 = C13226 * C280;
    const double C13381 = C13226 * C273;
    const double C13377 = C13226 * C263;
    const double C14067 = C13226 * C812;
    const double C14063 = C13226 * C820;
    const double C14325 = C13226 * C1018;
    const double C14503 = C13226 * C1155;
    const double C19249 = C13226 * C424;
    const double C19245 = C13226 * C414;
    const double C19241 = C13226 * C434;
    const double C19233 = C13226 * C425;
    const double C19229 = C13226 * C415;
    const double C19227 = C13226 * C417;
    const double C19223 = C13226 * C433;
    const double C19217 = C13226 * C426;
    const double C19213 = C13226 * C416;
    const double C20967 = C13226 * C1847;
    const double C20963 = C13226 * C1859;
    const double C20957 = C13226 * C1852;
    const double C20953 = C13226 * C1846;
    const double C13399 = C13227 * C271;
    const double C13395 = C13227 * C261;
    const double C13383 = C13227 * C272;
    const double C13379 = C13227 * C262;
    const double C19235 = C13227 * C424;
    const double C19231 = C13227 * C414;
    const double C19221 = C13227 * C434;
    const double C19219 = C13227 * C425;
    const double C19215 = C13227 * C415;
    const double C13398 = C13222 * C292;
    const double C13394 = C13222 * C275;
    const double C13392 = C13222 * C277;
    const double C13388 = C13222 * C294;
    const double C13382 = C13222 * C293;
    const double C13378 = C13222 * C276;
    const double C14068 = C13222 * C817;
    const double C14064 = C13222 * C827;
    const double C14330 = C13222 * C1036;
    const double C14326 = C13222 * C1027;
    const double C14514 = C13222 * C1183;
    const double C14508 = C13222 * C1182;
    const double C14504 = C13222 * C1170;
    const double C14500 = C13222 * C1179;
    const double C14496 = C13222 * C1164;
    const double C19234 = C13222 * C445;
    const double C19230 = C13222 * C428;
    const double C19228 = C13222 * C430;
    const double C19224 = C13222 * C447;
    const double C19218 = C13222 * C446;
    const double C19214 = C13222 * C429;
    const double C20968 = C13222 * C1856;
    const double C20958 = C13222 * C1864;
    const double C20954 = C13222 * C1855;
    const double C113 =
        (((0 - (C29947 * C29948) / C29949) * ae) / C29949 - (0 * be) / C29953) /
            (2 * C29949) +
        ((C29947 * (((C30682 - (C29947 * 2 * C29954) / C29949) * ae) / C29949 -
                    C29948 / C29953) +
          C13222) *
         ae) /
            C29949 +
        (0 * ae) / C29949 - C29954 / C29951;
    const double C4560 =
        (((0 - (C29970 * C29971) / C29949) * ae) / C29949 - (0 * be) / C29953) /
            (2 * C29949) +
        ((C29970 * (((C30921 - (C29970 * 2 * C29973) / C29949) * ae) / C29949 -
                    C29971 / C29953) +
          C13224) *
         ae) /
            C29949 +
        (0 * ae) / C29949 - C29973 / C29951;
    const double C131 =
        (2 * (C29992 * C30081 + C30325 * ae) +
         C29992 * (C30081 + C29992 * C30087 + C29992 * C30076 * ae) +
         (C30325 + C30076 * C30017) * ae) /
        C29949;
    const double C274 =
        (C29991 * (C30081 + C29992 * C30087 + C30332 * ae)) / C29949;
    const double C278 =
        (C29992 * C30081 + C30325 * ae + C30087 * C30173) / C29949;
    const double C427 =
        (C30161 * (C30081 + C29992 * C30087 + C30332 * ae)) / C29949;
    const double C431 =
        (C29992 * C30081 + C30325 * ae + C30087 * C30192) / C29949;
    const double C818 = (C30161 * C29991 * C30087) / C29949;
    const double C1031 =
        (3 * (C30004 + C29991 * C30413 + C30411 * ae) +
         C29991 * (2 * C30413 +
                   C29991 * (C30011 + C29991 * (C29991 * C30021 + C30092) +
                             C29991 * C30090 * ae) +
                   C30414 * ae) +
         (2 * C30411 + C29991 * C30414) * ae) /
        C29949;
    const double C1161 =
        (C29991 * C30004 + C30325 * ae + C30413 * C30192) / C29949;
    const double C1167 =
        (C30161 * (C30004 + C29991 * C30413 + C30411 * ae)) / C29949;
    const double C1174 =
        (C30004 + C29991 * C30413 + C30411 * ae +
         (C30011 + C29991 * (C29991 * C30021 + C30092) + C29991 * C30090 * ae) *
             C30192) /
        C29949;
    const double C1548 =
        (C30161 * (2 * C30413 +
                   C29991 * (C30011 + C29991 * (C29991 * C30021 + C30092) +
                             C29991 * C30090 * ae) +
                   C30414 * ae)) /
        C29949;
    const double C2228 =
        (2 * C30161 * C30413 +
         C30161 * (C30413 + (C29991 * C30021 + C30092) * C30192)) /
        C29949;
    const double C4682 = C4559 * C1024;
    const double C14329 = C13226 * C1024;
    const double C4692 = C4559 * C281;
    const double C13405 = C13226 * C281;
    const double C13385 = C13227 * C281;
    const double C5202 = C4559 * C821;
    const double C14073 = C13226 * C821;
    const double C14061 = C13227 * C821;
    const double C4690 = C4559 * C265;
    const double C13401 = C13226 * C265;
    const double C13389 = C13227 * C265;
    const double C9143 = C4559 * C418;
    const double C19237 = C13226 * C418;
    const double C19225 = C13227 * C418;
    const double C5200 = C4559 * C813;
    const double C14069 = C13226 * C813;
    const double C14065 = C13227 * C813;
    const double C4694 = C4559 * C1017;
    const double C14327 = C13227 * C1017;
    const double C14667 = C13226 * C1017;
    const double C5204 = C4559 * C1154;
    const double C14505 = C13227 * C1154;
    const double C14873 = C13226 * C1154;
    const double C9147 = C4559 * C1845;
    const double C20955 = C13227 * C1845;
    const double C21307 = C13226 * C1845;
    const double C5542 = C4559 * C1152;
    const double C14495 = C13226 * C1152;
    const double C6604 = C4559 * C2222;
    const double C15867 = C13226 * C2222;
    const double C133 = (3 * (C30004 + C30011 * C30017) +
                         C29992 * (2 * C30013 + C29992 * C30025)) /
                        C29949;
    const double C282 =
        (C30004 + C30011 * C30017 + C29991 * (C29991 * C30025 + C30334 * ae) +
         C29991 * C30334 * ae) /
        C29949;
    const double C284 = (C29991 * (2 * C30013 + C29992 * C30025) +
                         (2 * C30332 + C29992 * C30334) * ae) /
                        C29949;
    const double C435 = (C30004 + C30011 * C30017 + C30025 * C30192) / C29949;
    const double C437 = (C30161 * (2 * C30013 + C29992 * C30025)) / C29949;
    const double C822 = (C30161 * (C29991 * C30025 + C30334 * ae)) / C29949;
    const double C1850 =
        (2 * C30161 * C30025 + C30161 * (C30025 + C30041 * C30192)) / C29949;
    const double C30042 = C29992 * C30040;
    const double C30047 = 2 * C30040;
    const double C30180 = C29991 * C30040;
    const double C30206 = C30161 * C30040;
    const double C30035 = C30020 + C30031;
    const double C30419 = C30416 + C30095;
    const double C9149 = C4559 * C1851;
    const double C20959 = C13227 * C1851;
    const double C21303 = C13226 * C1851;
    const double C10790 = C4559 * C1860;
    const double C20961 = C13227 * C1860;
    const double C30485 = C29991 * C30481;
    const double C30493 = 2 * C30481;
    const double C10503 =
        (4 * (2 * C30161 * C30011 + C30161 * C30551) +
         C30161 *
             (3 * C30551 + C30161 * (2 * C30161 * C30021 +
                                     C30161 * (C30021 + C30037 * C30192)))) /
        C29949;
    const double C142 =
        (3 * (C30010 + ae * C30013 + C29992 * C30024) +
         ae * (2 * C30013 + C29992 * C30025) +
         C29992 *
             (2 * C30024 + ae * C30025 +
              C29992 * (C30020 + ae * C29992 * C30021 +
                        C29992 * (ae * C30021 + C29992 * std::pow(C29994, 6) *
                                                    bs[6] * C30002)))) /
        C29951;
    const double C291 =
        (ae * (C30001 * C29997 * C30075 +
               C29992 * (C29992 * C30006 * C30007 * C30075 + C30076 * ae) +
               C29992 * C30076 * ae) +
         C29991 * (C30010 + ae * C30013 + C29992 * C30024)) /
        C29951;
    const double C295 = (ae * C30004 + C29992 * C30010 + ae * C29991 * C30087 +
                         C29991 * (ae * C30087 + C29991 * C30024)) /
                        C29951;
    const double C444 =
        ((zP - zQ) * (C30010 + ae * C30013 + C29992 * C30024)) / C29951;
    const double C448 =
        (ae * C30004 + C29992 * C30010 + C30024 * std::pow(zP - zQ, 2)) /
        C29951;
    const double C828 =
        (ae * C30161 * C30087 + C29991 * C30161 * C30024) / C29951;
    const double C1863 =
        (2 * C30161 * C30024 + C30161 * (C30024 + C30040 * C30192)) / C29951;
    const double C10514 = C30682 * C1865;
    const double C20964 = C13222 * C1865;
    const double C6603 = C30682 * C2231;
    const double C15864 = C13222 * C2231;
    const double C30097 = C29992 * C30096;
    const double C30102 = 2 * C30096;
    const double C30179 = ae * C30096;
    const double C30178 = C29991 * C30096;
    const double C1035 = (2 * (ae * C30087 + C29991 * C30024) +
                          ae * (C30087 + C30096 * std::pow(C29991, 2)) +
                          C29991 * (C30024 + ae * C29991 * C30096 +
                                    C29991 * (ae * C30096 + C29991 * C30040))) /
                         C29951;
    const double C1178 = (ae * (C30087 + C30096 * C30192) +
                          C29991 * (C30024 + C30040 * C30192)) /
                         C29951;
    const double C1026 =
        (2 * C29991 * C30087 + C29991 * (C30087 + C30096 * C30173)) / C29949;
    const double C1169 = (C30161 * (C30087 + C30096 * C30173)) / C29949;
    const double C1854 =
        (2 * C30161 * C30087 + C30161 * (C30087 + C30096 * C30192)) / C29949;
    const double C1037 =
        (3 * (C30010 + ae * C30170 + C29991 * C30174) +
         ae * (2 * C30170 + C29991 * C30176) +
         C29991 * (2 * C30174 + ae * C30176 +
                   C29991 * (C30020 + ae * C29991 * C30091 +
                             C29991 * (ae * C30091 + C29991 * C30036)))) /
        C29951;
    const double C1551 =
        (2 * (ae * C30161 * C30085 + C29991 * C30204) + ae * C30161 * C30176 +
         C29991 *
             (C30204 + ae * C30161 * C29991 * C30091 +
              C29991 * (ae * C30161 * C30091 + C29991 * C30161 * C30036))) /
        C29951;
    const double C5538 =
        (2 * (ae * (C30085 + C30091 * C30192) + C29991 * C30258) +
         ae * (C30176 + C30228 * C30192) +
         C29991 * (C30258 + ae * (C30221 + C30237 * C30192) +
                   C29991 * (ae * (C30091 + C30105 * C30192) +
                             C29991 * (C30036 + C30060 * C30192)))) /
        C29951;
    const double C1028 = (3 * (C30081 + C30085 * C30173) +
                          C29991 * (2 * C30170 + C29991 * C30176)) /
                         C29949;
    const double C1171 = (C30081 + C30085 * C30173 + C30176 * C30192) / C29949;
    const double C1545 = (C30161 * (2 * C30170 + C29991 * C30176)) / C29949;
    const double C6223 =
        (2 * C30161 * C30176 + C30161 * (C30176 + C30228 * C30192)) / C29949;
    const double C30230 = C29991 * C30226;
    const double C30235 = 2 * C30226;
    const double C30229 = C30020 + C30225;
    const double C6605 = C30682 * C2225;
    const double C15868 = C13222 * C2225;
    const double C10904 = C30682 * C6224;
    const double C30264 = C30262 + C30263;
    const double C10504 =
        (4 * (2 * C30161 * C30085 + C30161 * C30554) +
         C30161 * (3 * C30554 + C30161 * (2 * C30260 + C30161 * C30268))) /
        C29949;
    const double C30113 = C30111 * ae;
    const double C30339 = C29992 * C30111;
    const double C30342 = 3 * C30111;
    const double C30423 = C29991 * C30111;
    const double C1016 =
        2 * C29991 * C30334 + C29991 * (C30334 + C30111 * C30173);
    const double C1153 = C30161 * (C30334 + C30111 * C30173);
    const double C1844 =
        2 * C30161 * C30334 + C30161 * (C30334 + C30111 * C30192);
    const double C1849 =
        3 * (C30334 + C30111 * C30192) +
        C30161 * (2 * C30161 * C30111 + C30161 * (C30111 + C30133 * C30192));
    const double C30524 = C30521 + C30110;
    const double C30420 = C30093 + C30418;
    const double C30527 = 2 * C30522;
    const double C30525 = C30522 * ae;
    const double C2223 =
        2 * C30161 * C30417 + C30161 * (C30417 + C30522 * C30192);
    const double C10673 =
        3 * (C30417 + C30522 * C30192) +
        C30161 * (2 * C30161 * C30522 +
                  C30161 * (C30522 + C29991 * C30129 * C30192));
    const double C30672 = C30093 + C30671;
    const double C10792 = C4559 * C1848;
    const double C20965 = C13227 * C1848;
    const double C30114 = C29992 * C30112;
    const double C30123 = 2 * C30112;
    const double C30181 = C30112 * C30173;
    const double C30275 = ae * C30112;
    const double C30274 = C29991 * C30112;
    const double C30288 = C30161 * C30112;
    const double C30569 = C30112 * C30192;
    const double C1857 =
        (3 * (C30087 + C30096 * C30192) +
         C30161 * (2 * C30161 * C30096 + C30161 * (C30096 + C30112 * C30192))) /
        C29949;
    const double C30503 = C29991 * C30499;
    const double C30578 = C30499 * C30192;
    const double C6225 =
        (3 * (C30413 + C30481 * C30192) +
         C30161 * (2 * C30161 * C30481 + C30161 * (C30481 + C30499 * C30192))) /
        C29949;
    const double C30486 = C29991 * C30483;
    const double C30498 = 3 * C30483;
    const double C30496 = C30483 * ae;
    const double C6219 =
        2 * C30161 * C30414 + C30161 * (C30414 + C30483 * C30192);
    const double C6221 =
        3 * (C30414 + C30483 * C30192) +
        C30161 * (2 * C30161 * C30483 + C30161 * (C30483 + C30501 * C30192));
    const double C30675 = C30479 + C30674;
    const double C10903 = C4559 * C6220;
    const double C30667 = C30161 * C30666;
    const double C30067 = C29992 * C30065;
    const double C1861 =
        (3 * (C30025 + C30041 * C30192) +
         C30161 * (2 * C30161 * C30041 + C30161 * (C30041 + C30065 * C30192))) /
        C29949;
    const double C30066 = C29992 * C30064;
    const double C30276 = C29991 * C30064;
    const double C30289 = C30161 * C30064;
    const double C30308 = C30064 * C30192;
    const double C30248 = C29991 * C30244;
    const double C30271 = C29991 * C30269;
    const double C30313 = C30161 * C30269;
    const double C6228 =
        (2 * C30204 + C30161 * C30258 +
         ae * (2 * C30161 * C30221 + C30161 * (C30221 + C30237 * C30192)) +
         C29991 * (ae * (2 * C30260 + C30161 * C30268) +
                   C29991 * (2 * C30261 + C30161 * C30269))) /
        C29951;
    const double C6229 =
        (ae * (3 * (C30085 + C30091 * C30192) +
               C30161 * (2 * C30260 + C30161 * C30268)) +
         C29991 * (3 * C30258 + C30161 * (2 * C30261 + C30161 * C30269))) /
        C29951;
    const double C6230 =
        (3 * C30258 + C30161 * (2 * C30261 + C30161 * C30269) +
         ae * (3 * (C30221 + C30237 * C30192) +
               C30161 * (2 * C30294 +
                         C30161 * (C30237 + C29991 * C30127 * C30192))) +
         C29991 * (ae * (3 * C30268 +
                         C30161 * (2 * C30295 +
                                   C30161 * (C30105 + C30127 * C30192))) +
                   C29991 * (3 * C30269 +
                             C30161 * (2 * C30296 +
                                       C30161 * (C30060 + std::pow(C29994, 8) *
                                                              bs[8] * C30002 *
                                                              C30192))))) /
        C29951;
    const double C30301 = C30298 + C30299;
    const double C30137 = C29992 * C30134;
    const double C30277 = C30134 * C30173;
    const double C30249 = C29991 * C30246;
    const double C6226 =
        (3 * (C30176 + C30228 * C30192) +
         C30161 * (2 * C30161 * C30228 + C30161 * (C30228 + C30246 * C30192))) /
        C29949;
    const double C4696 = C4559 * C1023;
    const double C14331 = C13227 * C1023;
    const double C14663 = C13226 * C1023;
    const double C6388 = C4559 * C1151;
    const double C14497 = C13227 * C1151;
    const double C15595 = C13226 * C1151;
    const double C4702 = C4559 * C266;
    const double C13423 = C13226 * C266;
    const double C13403 = C13227 * C266;
    const double C4936 = C4559 * C267;
    const double C13411 = C13227 * C267;
    const double C13725 = C13226 * C267;
    const double C9155 = C4559 * C419;
    const double C19259 = C13226 * C419;
    const double C19239 = C13227 * C419;
    const double C9398 = C4559 * C420;
    const double C19247 = C13227 * C420;
    const double C19545 = C13226 * C420;
    const double C5214 = C4559 * C814;
    const double C14083 = C13226 * C814;
    const double C14071 = C13227 * C814;
    const double C5408 = C4559 * C1019;
    const double C14339 = C13226 * C1019;
    const double C5546 = C4559 * C1156;
    const double C14517 = C13226 * C1156;
    const double C5550 = C4559 * C1542;
    const double C15015 = C13226 * C1542;
    const double C10517 = C4559 * C10501;
    const double C30045 = C30033 + C30043;
    const double C10786 =
        (4 * (2 * C30161 * C30027 + C30161 * C30573) +
         C30161 * (3 * C30573 +
                   C30161 * (2 * C30161 * C30049 +
                             C30161 * (C30049 + C29992 * C30061 * C30192)))) /
        C29949;
    const double C30565 = C30562 + C30564;
    const double C30233 = C30227 + C30231;
    const double C30300 = C30261 + C30297;
    const double C10896 =
        (4 * (2 * C30161 * C30221 + C30161 * C30576) +
         C30161 * (3 * C30576 +
                   C30161 * (2 * C30294 +
                             C30161 * (C30237 + C29991 * C30127 * C30192)))) /
        C29949;
    const double C30558 = C30556 + C30557;
    const double C30138 = C30126 + C30136;
    const double C30426 = C30111 + C30424;
    const double C30529 = C29991 * C30526;
    const double C30506 = C30502 + C30504;
    const double C30712 = C30711 / C30702;
    const double C31011 = 2 * C30977;
    const double C30721 = C30720 / C30699;
    const double C31015 = C30981 / C30717;
    const double C31040 = C30975 - C31010;
    const double C2440 = -C31010;
    const double C31054 = C31039 + C30709;
    const double C30794 = C30793 / C30702;
    const double C31019 = 2 * C30986;
    const double C30801 = C30800 / C30699;
    const double C31029 = C30995 / C30717;
    const double C31048 = C30989 - C31026;
    const double C2332 = -C31026;
    const double C31057 = C31044 + C30790;
    const double C30836 = C30835 / C30702;
    const double C31022 = 2 * C30988;
    const double C30843 = C30842 / C30699;
    const double C31035 = C31001 / C30717;
    const double C31051 = C30990 - C31032;
    const double C3094 = -C31032;
    const double C31058 = C31046 + C30832;
    const double C4717 = C4688 + C4689;
    const double C4716 = C4686 + C4687;
    const double C4715 = C4684 + C4685;
    const double C4713 = C4680 + C4681;
    const double C4712 = C4678 + C4679;
    const double C4711 = C4676 + C4677;
    const double C4710 = C4674 + C4675;
    const double C5219 = C5198 + C5199;
    const double C5218 = C5196 + C5197;
    const double C5217 = C5194 + C5195;
    const double C9170 = C9141 + C9142;
    const double C9169 = C9139 + C9140;
    const double C9168 = C9137 + C9138;
    const double C9167 = C9135 + C9136;
    const double C9166 = C9133 + C9134;
    const double C9165 = C9131 + C9132;
    const double C9164 = C9129 + C9130;
    const double C9163 = C9127 + C9128;
    const double C10519 = C10511 + C10512;
    const double C13428 = C13383 + C13384;
    const double C13426 = C13379 + C13380;
    const double C19264 = C19219 + C19220;
    const double C19262 = C19215 + C19216;
    const double C13435 = C13397 + C13398;
    const double C13433 = C13393 + C13394;
    const double C13432 = C13391 + C13392;
    const double C13430 = C13387 + C13388;
    const double C13427 = C13381 + C13382;
    const double C13425 = C13377 + C13378;
    const double C14088 = C14067 + C14068;
    const double C14086 = C14063 + C14064;
    const double C14341 = C14325 + C14326;
    const double C14523 = C14503 + C14504;
    const double C19271 = C19233 + C19234;
    const double C19269 = C19229 + C19230;
    const double C19268 = C19227 + C19228;
    const double C19266 = C19223 + C19224;
    const double C19263 = C19217 + C19218;
    const double C19261 = C19213 + C19214;
    const double C20976 = C20967 + C20968;
    const double C20971 = C20957 + C20958;
    const double C20969 = C20953 + C20954;
    const double C4699 = C30682 * C274;
    const double C13410 = C13222 * C274;
    const double C13396 = C13223 * C274;
    const double C4691 = C30682 * C278;
    const double C13402 = C13222 * C278;
    const double C13390 = C13223 * C278;
    const double C9152 = C30682 * C427;
    const double C19246 = C13222 * C427;
    const double C19232 = C13223 * C427;
    const double C9144 = C30682 * C431;
    const double C19238 = C13222 * C431;
    const double C19226 = C13223 * C431;
    const double C5201 = C30682 * C818;
    const double C14070 = C13222 * C818;
    const double C14066 = C13223 * C818;
    const double C5410 = C4559 * C1031;
    const double C14335 = C13226 * C1031;
    const double C5544 = C4559 * C1161;
    const double C14499 = C13226 * C1161;
    const double C5192 = C4559 * C1167;
    const double C14507 = C13226 * C1167;
    const double C5548 = C4559 * C1174;
    const double C14513 = C13226 * C1174;
    const double C5552 = C4559 * C1548;
    const double C15011 = C13226 * C1548;
    const double C6602 = C4559 * C2228;
    const double C15863 = C13226 * C2228;
    const double C4714 = C4682 + C4683;
    const double C14343 = C14329 + C14330;
    const double C5558 = C5542 + C5543;
    const double C14519 = C14495 + C14496;
    const double C4704 = C4559 * C282;
    const double C13419 = C13226 * C282;
    const double C13407 = C13227 * C282;
    const double C4938 = C4559 * C284;
    const double C13415 = C13227 * C284;
    const double C13729 = C13226 * C284;
    const double C9157 = C4559 * C435;
    const double C19255 = C13226 * C435;
    const double C19243 = C13227 * C435;
    const double C9400 = C4559 * C437;
    const double C19251 = C13227 * C437;
    const double C19549 = C13226 * C437;
    const double C5212 = C4559 * C822;
    const double C14079 = C13226 * C822;
    const double C14075 = C13227 * C822;
    const double C9159 = C4559 * C1850;
    const double C21301 = C13227 * C1850;
    const double C30054 = C30047 + C30048;
    const double C1866 =
        (3 * (C30024 + C30040 * C30192) +
         C30161 * (2 * C30206 + C30161 * (C30040 + C30064 * C30192))) /
        C29951;
    const double C2232 =
        (ae * (2 * C30161 * C30096 + C30161 * (C30096 + C30112 * C30192)) +
         C29991 * (2 * C30206 + C30161 * (C30040 + C30064 * C30192))) /
        C29951;
    const double C30044 = C30035 + C30042;
    const double C1160 =
        (C29991 * C30013 + C30332 * ae + C30419 * C30192) / C29949;
    const double C1166 =
        (C30161 * (C30013 + C29991 * C30419 + C30417 * ae)) / C29949;
    const double C1175 =
        (C30013 + C29991 * C30419 + C30417 * ae +
         (C30027 + C29991 * (C29991 * C30049 + C30110) + C29991 * C30107 * ae) *
             C30192) /
        C29949;
    const double C2229 =
        (2 * C30161 * C30419 +
         C30161 * (C30419 + (C29991 * C30049 + C30110) * C30192)) /
        C29949;
    const double C30487 = C30011 + C30485;
    const double C10515 = C4559 * C10503;
    const double C4701 = C30682 * C291;
    const double C13414 = C13222 * C291;
    const double C13400 = C13223 * C291;
    const double C4693 = C30682 * C295;
    const double C13406 = C13222 * C295;
    const double C13386 = C13223 * C295;
    const double C9154 = C30682 * C444;
    const double C19250 = C13222 * C444;
    const double C19236 = C13223 * C444;
    const double C9146 = C30682 * C448;
    const double C19242 = C13222 * C448;
    const double C19222 = C13223 * C448;
    const double C5203 = C30682 * C828;
    const double C14074 = C13222 * C828;
    const double C14062 = C13223 * C828;
    const double C9150 = C30682 * C1863;
    const double C20960 = C13223 * C1863;
    const double C21304 = C13222 * C1863;
    const double C10520 = C10513 + C10514;
    const double C20974 = C20963 + C20964;
    const double C30098 = C30085 + C30097;
    const double C30182 = C30179 + C30180;
    const double C1181 =
        (C30161 * C30024 + ae * C30161 * C30178 +
         C29991 * (ae * C30161 * C30096 + C29991 * C30161 * C30040)) /
        C29951;
    const double C1184 =
        (C30024 + C30040 * C30192 + ae * (C30178 + C29991 * C30112 * C30192) +
         C29991 * (ae * (C30096 + C30112 * C30192) +
                   C29991 * (C30040 + C30064 * C30192))) /
        C29951;
    const double C1163 = (C29991 * C30087 + C30178 * C30192) / C29949;
    const double C4697 = C30682 * C1035;
    const double C14332 = C13223 * C1035;
    const double C14664 = C13222 * C1035;
    const double C6387 = C30682 * C1178;
    const double C14502 = C13223 * C1178;
    const double C15592 = C13222 * C1178;
    const double C4695 = C30682 * C1026;
    const double C14328 = C13223 * C1026;
    const double C14668 = C13222 * C1026;
    const double C5205 = C30682 * C1169;
    const double C14506 = C13223 * C1169;
    const double C14874 = C13222 * C1169;
    const double C9148 = C30682 * C1854;
    const double C20956 = C13223 * C1854;
    const double C21308 = C13222 * C1854;
    const double C5411 = C30682 * C1037;
    const double C14336 = C13222 * C1037;
    const double C5553 = C30682 * C1551;
    const double C15012 = C13222 * C1551;
    const double C5555 = C30682 * C5538;
    const double C5409 = C30682 * C1028;
    const double C14340 = C13222 * C1028;
    const double C5547 = C30682 * C1171;
    const double C14518 = C13222 * C1171;
    const double C5551 = C30682 * C1545;
    const double C15016 = C13222 * C1545;
    const double C6601 = C30682 * C6223;
    const double C30242 = C30235 + C30236;
    const double C30232 = C30229 + C30230;
    const double C6609 = C6604 + C6605;
    const double C15872 = C15867 + C15868;
    const double C10518 = C30682 * C10504;
    const double C30425 = C30422 + C30113;
    const double C1022 =
        (2 * (C29991 * C30025 + C30334 * ae) +
         C29991 * (C30025 + C29991 * (C29991 * C30041 + C30113) +
                   C29991 * C30111 * ae) +
         (C30334 + C30111 * C30173) * ae) /
        C29949;
    const double C30340 = C30338 + C30339;
    const double C1150 = C29991 * C30334 + C30423 * C30192;
    const double C2224 =
        2 * C30161 * C30423 + C30161 * (C30423 + C29991 * C30133 * C30192);
    const double C4708 = C4559 * C1016;
    const double C14665 = C13227 * C1016;
    const double C5210 = C4559 * C1153;
    const double C14871 = C13227 * C1153;
    const double C9161 = C4559 * C1844;
    const double C21305 = C13227 * C1844;
    const double C30528 = C29991 * C30524;
    const double C10675 =
        (3 * (C30419 + C30524 * C30192) +
         C30161 * (2 * C30161 * C30524 +
                   C30161 * (C30524 +
                             (C29991 * C29992 * C30061 + C30132) * C30192))) /
        C29949;
    const double C1032 =
        (3 * (C30013 + C29991 * C30419 + C30417 * ae) +
         C29991 * (2 * C30419 +
                   C29991 * (C30027 + C29991 * (C29991 * C30049 + C30110) +
                             C29991 * C30107 * ae) +
                   C30420 * ae) +
         (2 * C30417 + C29991 * C30420) * ae) /
        C29949;
    const double C1549 =
        (C30161 * (2 * C30419 +
                   C29991 * (C30027 + C29991 * (C29991 * C30049 + C30110) +
                             C29991 * C30107 * ae) +
                   C30420 * ae)) /
        C29949;
    const double C1020 = 3 * (C30332 + C30093 * C30173) +
                         C29991 * (2 * C30417 + C29991 * C30420);
    const double C1157 = C30332 + C30093 * C30173 + C30420 * C30192;
    const double C1543 = C30161 * (2 * C30417 + C29991 * C30420);
    const double C6491 =
        2 * C30161 * C30420 + C30161 * (C30420 + C30526 * C30192);
    const double C10681 = C4559 * C2223;
    const double C15865 = C13227 * C2223;
    const double C10784 =
        4 * (2 * C30161 * C30093 + C30161 * C30672) +
        C30161 * (3 * C30672 + C30161 * (2 * C30161 * C30107 +
                                         C30161 * (C30107 + C30129 * C30192)));
    const double C30115 = C30091 + C30114;
    const double C30183 = C30096 + C30181;
    const double C30280 = 2 * C30274;
    const double C30278 = ae * C30274;
    const double C2226 =
        (2 * C30161 * C30178 + C30161 * (C30178 + C30274 * C30192)) / C29949;
    const double C10674 =
        (3 * (C30178 + C30274 * C30192) +
         C30161 * (2 * C30161 * C30274 +
                   C30161 * (C30274 + C29991 * C30134 * C30192))) /
        C29949;
    const double C30290 = ae * C30288;
    const double C30570 = C30096 + C30569;
    const double C10793 = C30682 * C1857;
    const double C20966 = C13223 * C1857;
    const double C30505 = C30021 + C30503;
    const double C30579 = C30481 + C30578;
    const double C10901 = C4559 * C6225;
    const double C30488 = C30484 + C30486;
    const double C6600 = C4559 * C6219;
    const double C10895 =
        4 * (2 * C30161 * C30479 + C30161 * C30675) +
        C30161 * (3 * C30675 +
                  C30161 * (2 * C30161 * C30495 +
                            C30161 * (C30495 + C29991 * C30125 * C30192)));
    const double C10906 = C10903 + C10904;
    const double C30668 = C30665 + C30667;
    const double C30069 = C30057 + C30067;
    const double C30068 = C30059 + C30066;
    const double C30279 = C30275 + C30276;
    const double C30291 = C29991 * C30289;
    const double C30309 = C30040 + C30308;
    const double C30250 = C30247 + C30248;
    const double C30272 = C30270 + C30271;
    const double C30314 = C30312 + C30313;
    const double C6599 = C30682 * C6228;
    const double C10902 = C30682 * C6229;
    const double C30302 = C29991 * C30301;
    const double C30139 = C30105 + C30137;
    const double C30281 = C30112 + C30277;
    const double C30251 = C30245 + C30249;
    const double C134 = (4 * (2 * C30013 + C29992 * C30025) +
                         C29992 * (3 * C30025 + C29992 * C30045)) /
                        C29949;
    const double C438 =
        (2 * C30013 + C29992 * C30025 + C30045 * C30192) / C29949;
    const double C440 = (C30161 * (3 * C30025 + C29992 * C30045)) / C29949;
    const double C10506 =
        (5 * (3 * C30551 + C30161 * C30565) +
         C30161 * (4 * C30565 +
                   C30161 * (3 * C30563 +
                             C30161 * (2 * C30161 * C30037 +
                                       C30161 * (C30037 + C30061 * C30192))))) /
        C29949;
    const double C5539 =
        (3 * (C30204 + ae * C30161 * C30221 + C29991 * C30264) +
         ae * C30161 * C30233 +
         C29991 * (2 * C30264 + ae * C30161 * C30228 +
                   C29991 * (C30261 + ae * C30161 * C30237 +
                             C29991 * (ae * C30161 * C30105 +
                                       C29991 * C30161 * C30060)))) /
        C29951;
    const double C5402 = (4 * (2 * C30170 + C29991 * C30176) +
                          C29991 * (3 * C30176 + C29991 * C30233)) /
                         C29949;
    const double C5533 =
        (2 * C30170 + C29991 * C30176 + C30233 * C30192) / C29949;
    const double C5535 = (C30161 * (3 * C30176 + C29991 * C30233)) / C29949;
    const double C10505 =
        (5 * (3 * C30554 + C30161 * C30558) +
         C30161 * (4 * C30558 +
                   C30161 * (3 * C30268 +
                             C30161 * (2 * C30295 +
                                       C30161 * (C30105 + C30127 * C30192))))) /
        C29949;
    const double C30140 = C30138 * ae;
    const double C30343 = C29992 * C30138;
    const double C1021 = 3 * (C30334 + C30111 * C30173) +
                         C29991 * (2 * C30423 + C29991 * C30426);
    const double C1158 = C30334 + C30111 * C30173 + C30426 * C30192;
    const double C1544 = C30161 * (2 * C30423 + C29991 * C30426);
    const double C30531 = C30527 + C30529;
    const double C30508 = C29991 * C30506;
    const double C30713 = C30709 - C30712;
    const double C31041 = C31011 / C30699;
    const double C30722 = C30718 - C30721;
    const double C31055 = C31040 / C30703;
    const double C30795 = C30790 - C30794;
    const double C31045 = C31019 / C30699;
    const double C30802 = C30798 - C30801;
    const double C31059 = C31048 / C30703;
    const double C30837 = C30832 - C30836;
    const double C31047 = C31022 / C30699;
    const double C30844 = C30840 - C30843;
    const double C31061 = C31051 / C30703;
    const double C9560 = C5219 * C116;
    const double C24783 = C5219 * C13229;
    const double C25269 = C5219 * C13228;
    const double C9561 = C5218 * C30921;
    const double C24784 = C5218 * C13225;
    const double C25270 = C5218 * C13224;
    const double C9863 = C5217 * C116;
    const double C25271 = C5217 * C13229;
    const double C25659 = C5217 * C13228;
    const double C9188 = C9170 * C30921;
    const double C24790 = C9170 * C13224;
    const double C9187 = C9169 * C116;
    const double C24789 = C9169 * C13228;
    const double C9186 = C9168 * C116;
    const double C26503 = C9168 * C13228;
    const double C9185 = C9167 * C30921;
    const double C26504 = C9167 * C13224;
    const double C9184 = C9166 * C30921;
    const double C24787 = C9166 * C13224;
    const double C9183 = C9165 * C116;
    const double C24788 = C9165 * C13228;
    const double C9182 = C9164 * C30921;
    const double C24782 = C9164 * C13224;
    const double C9181 = C9163 * C116;
    const double C24781 = C9163 * C13228;
    const double C10523 = C10519 * C116;
    const double C26510 = C10519 * C13228;
    const double C4722 = C4698 + C4699;
    const double C13441 = C13409 + C13410;
    const double C13434 = C13395 + C13396;
    const double C4718 = C4690 + C4691;
    const double C13437 = C13401 + C13402;
    const double C13431 = C13389 + C13390;
    const double C9175 = C9151 + C9152;
    const double C19277 = C19245 + C19246;
    const double C19270 = C19231 + C19232;
    const double C9171 = C9143 + C9144;
    const double C19273 = C19237 + C19238;
    const double C19267 = C19225 + C19226;
    const double C5220 = C5200 + C5201;
    const double C14089 = C14069 + C14070;
    const double C14087 = C14065 + C14066;
    const double C5559 = C5544 + C5545;
    const double C14521 = C14499 + C14500;
    const double C5216 = C5192 + C5193;
    const double C14525 = C14507 + C14508;
    const double C5561 = C5548 + C5549;
    const double C14528 = C14513 + C14514;
    const double C6608 = C6602 + C6603;
    const double C15870 = C15863 + C15864;
    const double C9562 = C5558 * C116;
    const double C24786 = C5558 * C13229;
    const double C25655 = C5558 * C13228;
    const double C10791 = C30682 * C1866;
    const double C20962 = C13223 * C1866;
    const double C10680 = C30682 * C2232;
    const double C15862 = C13223 * C2232;
    const double C143 =
        (4 * (2 * C30024 + ae * C30025 + C29992 * C30044) +
         ae * (3 * C30025 + C29992 * C30045) +
         C29992 * (3 * C30044 + ae * C30045 +
                   C29992 * (2 * C30040 + ae * C30041 +
                             C29992 * (C30036 + ae * C29992 * C30037 +
                                       C29992 * (ae * C30037 +
                                                 C29992 * std::pow(C29996, 7) *
                                                     bs[7] * C30002))))) /
        C29951;
    const double C449 = (C30010 + ae * C30013 + C29992 * C30024 +
                         C30044 * std::pow(zP - zQ, 2)) /
                        C29951;
    const double C450 =
        ((zP - zQ) * (2 * C30024 + ae * C30025 + C29992 * C30044)) / C29951;
    const double C6386 = C4559 * C1160;
    const double C14501 = C13227 * C1160;
    const double C15591 = C13226 * C1160;
    const double C5206 = C4559 * C1166;
    const double C14509 = C13227 * C1166;
    const double C14869 = C13226 * C1166;
    const double C6382 = C4559 * C1175;
    const double C14511 = C13227 * C1175;
    const double C10679 = C4559 * C2229;
    const double C15861 = C13227 * C2229;
    const double C30489 = C30487 + C30482;
    const double C4723 = C4700 + C4701;
    const double C13443 = C13413 + C13414;
    const double C13436 = C13399 + C13400;
    const double C4719 = C4692 + C4693;
    const double C13439 = C13405 + C13406;
    const double C13429 = C13385 + C13386;
    const double C9176 = C9153 + C9154;
    const double C19279 = C19249 + C19250;
    const double C19272 = C19235 + C19236;
    const double C9172 = C9145 + C9146;
    const double C19275 = C19241 + C19242;
    const double C19265 = C19221 + C19222;
    const double C5221 = C5202 + C5203;
    const double C14091 = C14073 + C14074;
    const double C14085 = C14061 + C14062;
    const double C9174 = C9149 + C9150;
    const double C20972 = C20959 + C20960;
    const double C21310 = C21303 + C21304;
    const double C10524 = C10520 * C30921;
    const double C26509 = C10520 * C13224;
    const double C30099 = C30098 + C30095;
    const double C5207 = C30682 * C1181;
    const double C14510 = C13223 * C1181;
    const double C14870 = C13222 * C1181;
    const double C6383 = C30682 * C1184;
    const double C14512 = C13223 * C1184;
    const double C6389 = C30682 * C1163;
    const double C14498 = C13223 * C1163;
    const double C15596 = C13222 * C1163;
    const double C4721 = C4696 + C4697;
    const double C14344 = C14331 + C14332;
    const double C14670 = C14663 + C14664;
    const double C4720 = C4694 + C4695;
    const double C14342 = C14327 + C14328;
    const double C14672 = C14667 + C14668;
    const double C5222 = C5204 + C5205;
    const double C14524 = C14505 + C14506;
    const double C14878 = C14873 + C14874;
    const double C9173 = C9147 + C9148;
    const double C20970 = C20955 + C20956;
    const double C21312 = C21307 + C21308;
    const double C5417 = C5410 + C5411;
    const double C14346 = C14335 + C14336;
    const double C5563 = C5552 + C5553;
    const double C15018 = C15011 + C15012;
    const double C5416 = C5408 + C5409;
    const double C14348 = C14339 + C14340;
    const double C5560 = C5546 + C5547;
    const double C14530 = C14517 + C14518;
    const double C5562 = C5550 + C5551;
    const double C15020 = C15015 + C15016;
    const double C5405 =
        (4 * (2 * C30174 + ae * C30176 + C29991 * C30232) +
         ae * (3 * C30176 + C29991 * C30233) +
         C29991 *
             (3 * C30232 + ae * C30233 +
              C29991 * (2 * C30226 + ae * C30228 +
                        C29991 * (C30036 + ae * C29991 * C30105 +
                                  C29991 * (ae * C30105 + C29991 * C30060))))) /
        C29951;
    const double C9860 = C6609 * C116;
    const double C26505 = C6609 * C13229;
    const double C26976 = C6609 * C13228;
    const double C10522 = C10517 + C10518;
    const double C1033 =
        (3 * (C30025 + C29991 * C30425 + C30423 * ae) +
         C29991 * (2 * C30425 +
                   C29991 * (C30041 + C29991 * (C29991 * C30065 + C30135) +
                             C29991 * C30133 * ae) +
                   C30426 * ae) +
         (2 * C30423 + C29991 * C30426) * ae) /
        C29949;
    const double C1159 =
        (C29991 * C30025 + C30334 * ae + C30425 * C30192) / C29949;
    const double C1165 =
        (C30161 * (C30025 + C29991 * C30425 + C30423 * ae)) / C29949;
    const double C1176 =
        (C30025 + C29991 * C30425 + C30423 * ae +
         (C30041 + C29991 * (C29991 * C30065 + C30135) + C29991 * C30133 * ae) *
             C30192) /
        C29949;
    const double C1550 =
        (C30161 * (2 * C30425 +
                   C29991 * (C30041 + C29991 * (C29991 * C30065 + C30135) +
                             C29991 * C30133 * ae) +
                   C30426 * ae)) /
        C29949;
    const double C2230 =
        (2 * C30161 * C30425 +
         C30161 * (C30425 + (C29991 * C30065 + C30135) * C30192)) /
        C29949;
    const double C4706 = C4559 * C1022;
    const double C14661 = C13227 * C1022;
    const double C285 =
        (2 * C30013 + C29992 * C30025 +
         C29991 * (C29991 * C30045 + C30340 * ae) + C29991 * C30340 * ae) /
        C29949;
    const double C287 = (C29991 * (3 * C30025 + C29992 * C30045) +
                         (3 * C30334 + C29992 * C30340) * ae) /
                        C29949;
    const double C823 = (C30161 * (C29991 * C30045 + C30340 * ae)) / C29949;
    const double C122 = 4 * (2 * C30332 + C29992 * C30334) +
                        C29992 * (3 * C30334 + C29992 * C30340);
    const double C268 = 2 * C30332 + C29992 * C30334 + C30340 * C30173;
    const double C269 = C29991 * (3 * C30334 + C29992 * C30340);
    const double C421 = 2 * C30332 + C29992 * C30334 + C30340 * C30192;
    const double C422 = C30161 * (3 * C30334 + C29992 * C30340);
    const double C815 = C30161 * C29991 * C30340;
    const double C1290 =
        2 * C29991 * C30340 + C29991 * (C30340 + C30138 * C30173);
    const double C1440 = C30161 * (C30340 + C30138 * C30173);
    const double C2014 = C29991 * C30340 + C29991 * C30138 * C30192;
    const double C2120 =
        2 * C30161 * C30340 + C30161 * (C30340 + C30138 * C30192);
    const double C9570 = C4559 * C1150;
    const double C15593 = C13227 * C1150;
    const double C30530 = C30027 + C30528;
    const double C5668 = C4559 * C1032;
    const double C14333 = C13227 * C1032;
    const double C5824 = C4559 * C1549;
    const double C15009 = C13227 * C1549;
    const double C5670 = C4559 * C1020;
    const double C14337 = C13227 * C1020;
    const double C6384 = C4559 * C1157;
    const double C14515 = C13227 * C1157;
    const double C5826 = C4559 * C1543;
    const double C15013 = C13227 * C1543;
    const double C30116 = C30115 + C30110;
    const double C1038 =
        (3 * (C30024 + ae * C30178 + C29991 * C30182) +
         ae * (2 * C30178 + C29991 * C30183) +
         C29991 * (2 * C30182 + ae * C30183 +
                   C29991 * (C30040 + ae * C29991 * C30112 +
                             C29991 * (ae * C30112 + C29991 * C30064)))) /
        C29951;
    const double C1552 =
        (2 * (ae * C30161 * C30096 + C29991 * C30206) + ae * C30161 * C30183 +
         C29991 *
             (C30206 + ae * C30161 * C29991 * C30112 +
              C29991 * (ae * C30161 * C30112 + C29991 * C30161 * C30064))) /
        C29951;
    const double C1029 = (3 * (C30087 + C30096 * C30173) +
                          C29991 * (2 * C30178 + C29991 * C30183)) /
                         C29949;
    const double C1172 = (C30087 + C30096 * C30173 + C30183 * C30192) / C29949;
    const double C1546 = (C30161 * (2 * C30178 + C29991 * C30183)) / C29949;
    const double C30282 = C30040 + C30278;
    const double C10682 = C30682 * C2226;
    const double C15866 = C13223 * C2226;
    const double C10785 =
        (4 * (2 * C30161 * C30096 + C30161 * C30570) +
         C30161 *
             (3 * C30570 +
              C30161 * (2 * C30288 + C30161 * (C30112 + C30134 * C30192)))) /
        C29949;
    const double C10795 = C10792 + C10793;
    const double C20975 = C20965 + C20966;
    const double C30507 = C30505 + C30500;
    const double C10897 =
        (4 * (2 * C30161 * C30481 + C30161 * C30579) +
         C30161 * (3 * C30579 +
                   C30161 * (2 * C30161 * C30499 +
                             C30161 * (C30499 +
                                       (C29991 * C30061 + C30128) * C30192)))) /
        C29949;
    const double C5399 = 4 * (2 * C30411 + C29991 * C30414) +
                         C29991 * (3 * C30414 + C29991 * C30488);
    const double C5529 = 2 * C30411 + C29991 * C30414 + C30488 * C30192;
    const double C5530 = C30161 * (3 * C30414 + C29991 * C30488);
    const double C6593 =
        2 * C30161 * C30488 + C30161 * (C30488 + C30506 * C30192);
    const double C6607 = C6600 + C6601;
    const double C10908 = C10906 * C116;
    const double C26508 = C10906 * C13229;
    const double C10502 =
        5 * (3 * C30661 + C30161 * C30668) +
        C30161 * (4 * C30668 +
                  C30161 * (3 * C30666 +
                            C30161 * (2 * C30161 * C30104 +
                                      C30161 * (C30104 + C30125 * C30192))));
    const double C30071 = C29992 * C30069;
    const double C2122 =
        (2 * C30161 * C30045 + C30161 * (C30045 + C30069 * C30192)) / C29949;
    const double C30070 = C29992 * C30068;
    const double C30187 = C29991 * C30068;
    const double C30208 = C30161 * C30068;
    const double C1862 =
        (2 * C30161 * C30044 + C30161 * (C30044 + C30068 * C30192)) / C29951;
    const double C30283 = C29991 * C30279;
    const double C30292 = C30290 + C30291;
    const double C6494 =
        (2 * C30206 + C30161 * C30309 +
         ae * (2 * C30161 * C30274 +
               C30161 * (C30274 + C29991 * C30134 * C30192)) +
         C29991 * (ae * (2 * C30288 + C30161 * (C30112 + C30134 * C30192)) +
                   C29991 * (2 * C30289 +
                             C30161 * (C30064 + (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30192)))) /
        C29951;
    const double C10676 =
        (ae * (3 * (C30096 + C30112 * C30192) +
               C30161 * (2 * C30288 + C30161 * (C30112 + C30134 * C30192))) +
         C29991 * (3 * C30309 +
                   C30161 * (2 * C30289 +
                             C30161 * (C30064 + (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30192)))) /
        C29951;
    const double C10787 =
        (4 * (2 * C30206 + C30161 * C30309) +
         C30161 * (3 * C30309 +
                   C30161 * (2 * C30289 +
                             C30161 * (C30064 + (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30192)))) /
        C29951;
    const double C30252 = C29991 * C30250;
    const double C6596 =
        (2 * (ae * (2 * C30260 + C30161 * C30268) + C29991 * C30314) +
         ae * (2 * C30161 * C30228 + C30161 * (C30228 + C30246 * C30192)) +
         C29991 *
             (C30314 +
              ae * (2 * C30294 + C30161 * (C30237 + C29991 * C30127 * C30192)) +
              C29991 *
                  (ae * (2 * C30295 + C30161 * (C30105 + C30127 * C30192)) +
                   C29991 * (2 * C30296 +
                             C30161 * (C30060 + std::pow(C29994, 8) * bs[8] *
                                                    C30002 * C30192))))) /
        C29951;
    const double C10507 = (4 * (2 * C30204 + C30161 * C30258) +
                           C30161 * (3 * C30258 + C30161 * C30314)) /
                          C29951;
    const double C10508 =
        (5 * (3 * C30258 + C30161 * C30314) +
         C30161 * (4 * C30314 +
                   C30161 * (3 * C30269 +
                             C30161 * (2 * C30296 +
                                       C30161 * (C30060 + std::pow(C29994, 8) *
                                                              bs[8] * C30002 *
                                                              C30192))))) /
        C29951;
    const double C10898 =
        (ae * (4 * (2 * C30260 + C30161 * C30268) +
               C30161 * (3 * C30268 +
                         C30161 * (2 * C30295 +
                                   C30161 * (C30105 + C30127 * C30192)))) +
         C29991 * (4 * C30314 +
                   C30161 * (3 * C30269 +
                             C30161 * (2 * C30296 +
                                       C30161 * (C30060 + std::pow(C29994, 8) *
                                                              bs[8] * C30002 *
                                                              C30192))))) /
        C29951;
    const double C10905 = C10901 + C10902;
    const double C30303 = C30300 + C30302;
    const double C30141 = C30139 + C30132;
    const double C30284 = C29991 * C30281;
    const double C6380 =
        (2 * (ae * (C30096 + C30112 * C30192) + C29991 * C30309) +
         ae * (C30183 + C30281 * C30192) +
         C29991 * (C30309 + ae * (C30274 + C29991 * C30134 * C30192) +
                   C29991 * (ae * (C30112 + C30134 * C30192) +
                             C29991 * (C30064 + (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002) *
                                                    C30192)))) /
        C29951;
    const double C6492 =
        (2 * C30161 * C30183 + C30161 * (C30183 + C30281 * C30192)) / C29949;
    const double C30253 = C29991 * C30251;
    const double C5540 =
        (3 * (C30258 + ae * (C30221 + C30237 * C30192) + C29991 * C30272) +
         ae * (C30233 + C30251 * C30192) +
         C29991 * (2 * C30272 + ae * (C30228 + C30246 * C30192) +
                   C29991 * (C30269 + ae * (C30237 + C29991 * C30127 * C30192) +
                             C29991 * (ae * (C30105 + C30127 * C30192) +
                                       C29991 * (C30060 + std::pow(C29994, 8) *
                                                              bs[8] * C30002 *
                                                              C30192))))) /
        C29951;
    const double C6594 =
        (2 * C30161 * C30233 + C30161 * (C30233 + C30251 * C30192)) / C29949;
    const double C9404 = C4559 * C438;
    const double C19253 = C13227 * C438;
    const double C19551 = C13227 * C440;
    const double C5933 = C30682 * C5539;
    const double C5415 = C30682 * C5402;
    const double C5557 = C30682 * C5533;
    const double C5935 = C30682 * C5535;
    const double C1292 =
        (2 * (C29991 * C30045 + C30340 * ae) +
         C29991 * (C30045 + C29991 * (C29991 * C30069 + C30140) +
                   C29991 * C30138 * ae) +
         (C30340 + C30138 * C30173) * ae) /
        C29949;
    const double C1442 =
        (C30161 * (C30045 + C29991 * (C29991 * C30069 + C30140) +
                   C29991 * C30138 * ae)) /
        C29949;
    const double C2016 =
        (C29991 * C30045 + C30340 * ae + (C29991 * C30069 + C30140) * C30192) /
        C29949;
    const double C30344 = C30342 + C30343;
    const double C5663 = 4 * (2 * C30417 + C29991 * C30420) +
                         C29991 * (3 * C30420 + C29991 * C30531);
    const double C5819 = C30161 * (3 * C30420 + C29991 * C30531);
    const double C6377 = 2 * C30417 + C29991 * C30420 + C30531 * C30192;
    const double C30510 = C30498 + C30508;
    const double C30974 = C30713 * C30701;
    const double C31013 = C30979 + C30713;
    const double C30982 = C30722 / C30703;
    const double C30978 = C30722 * C30701;
    const double C554 = C31055 - (C30713 * C30704) / C30699;
    const double C30992 = C30795 * C30789;
    const double C31028 = C30994 + C30795;
    const double C30996 = C30802 / C30703;
    const double C30993 = C30802 * C30789;
    const double C1284 = C31059 - (C30795 * C30791) / C30699;
    const double C30998 = C30837 * C30831;
    const double C31034 = C31000 + C30837;
    const double C31002 = C30844 / C30703;
    const double C30999 = C30844 * C30831;
    const double C2116 = C31061 - (C30837 * C30833) / C30699;
    const double C10510 = C9185 + C9186;
    const double C9199 = C9183 + C9184;
    const double C9193 = C9175 * C116;
    const double C24797 = C9175 * C13228;
    const double C9189 = C9171 * C116;
    const double C24793 = C9171 * C13228;
    const double C9564 = C5220 * C116;
    const double C24791 = C5220 * C13229;
    const double C25273 = C5220 * C13228;
    const double C9563 = C5559 * C30921;
    const double C24785 = C5559 * C13225;
    const double C25656 = C5559 * C13224;
    const double C9864 = C5216 * C30921;
    const double C25272 = C5216 * C13225;
    const double C25660 = C5216 * C13224;
    const double C9866 = C5561 * C30921;
    const double C25665 = C5561 * C13224;
    const double C25658 = C5561 * C13225;
    const double C9861 = C6608 * C30921;
    const double C26506 = C6608 * C13225;
    const double C26975 = C6608 * C13224;
    const double C10794 = C10790 + C10791;
    const double C20973 = C20961 + C20962;
    const double C9158 = C30682 * C449;
    const double C19256 = C13222 * C449;
    const double C19244 = C13223 * C449;
    const double C9401 = C30682 * C450;
    const double C19252 = C13223 * C450;
    const double C19550 = C13222 * C450;
    const double C6392 = C6386 + C6387;
    const double C14522 = C14501 + C14502;
    const double C15598 = C15591 + C15592;
    const double C10683 = C10679 + C10680;
    const double C15869 = C15861 + C15862;
    const double C5401 =
        (4 * (2 * C30413 + C29991 * C30489 + C30414 * ae) +
         C29991 *
             (3 * C30489 +
              C29991 * (2 * C30481 +
                        C29991 * (C30021 + C29991 * (C29991 * C30037 + C30106) +
                                  C29991 * C30104 * ae) +
                        C30483 * ae) +
              C30488 * ae) +
         (3 * C30414 + C29991 * C30488) * ae) /
        C29949;
    const double C9194 = C9176 * C30921;
    const double C24798 = C9176 * C13224;
    const double C9190 = C9172 * C30921;
    const double C24794 = C9172 * C13224;
    const double C9565 = C5221 * C30921;
    const double C24792 = C5221 * C13225;
    const double C25274 = C5221 * C13224;
    const double C9192 = C9174 * C30921;
    const double C26841 = C9174 * C13224;
    const double C10527 = C10523 + C10524;
    const double C296 =
        (C30010 + ae * C30013 + C29992 * C30024 + ae * C29991 * C30099 +
         C29991 * (ae * C30099 + C29991 * C30044)) /
        C29951;
    const double C297 =
        (ae * (2 * C30087 + C29992 * C30099 + (C30076 + C30090 * C30017) * ae) +
         C29991 * (2 * C30024 + ae * C30025 + C29992 * C30044)) /
        C29951;
    const double C829 =
        (ae * C30161 * C30099 + C29991 * C30161 * C30044) / C29951;
    const double C132 = (3 * (C30081 + C29992 * C30087 + C30332 * ae) +
                         C29992 * (2 * C30087 + C29992 * C30099 + C30334 * ae) +
                         (2 * C30332 + C29992 * C30334) * ae) /
                        C29949;
    const double C279 =
        (C30081 + C29992 * C30087 + C30332 * ae + C30099 * C30173) / C29949;
    const double C283 =
        (C29991 * (2 * C30087 + C29992 * C30099 + C30334 * ae)) / C29949;
    const double C432 =
        (C30081 + C29992 * C30087 + C30332 * ae + C30099 * C30192) / C29949;
    const double C436 =
        (C30161 * (2 * C30087 + C29992 * C30099 + C30334 * ae)) / C29949;
    const double C819 = (C30161 * C29991 * C30099) / C29949;
    const double C5223 = C5206 + C5207;
    const double C14526 = C14509 + C14510;
    const double C14876 = C14869 + C14870;
    const double C6390 = C6382 + C6383;
    const double C14527 = C14511 + C14512;
    const double C6393 = C6388 + C6389;
    const double C14520 = C14497 + C14498;
    const double C15600 = C15595 + C15596;
    const double C10114 = C5222 * C116;
    const double C25275 = C5222 * C13229;
    const double C25991 = C5222 * C13228;
    const double C9191 = C9173 * C116;
    const double C26842 = C9173 * C13228;
    const double C10217 = C5563 * C30921;
    const double C25662 = C5563 * C13225;
    const double C26126 = C5563 * C13224;
    const double C9865 = C5560 * C116;
    const double C25666 = C5560 * C13228;
    const double C25657 = C5560 * C13229;
    const double C10216 = C5562 * C116;
    const double C25661 = C5562 * C13229;
    const double C26125 = C5562 * C13228;
    const double C5413 = C30682 * C5405;
    const double C10526 = C10522 * C116;
    const double C9572 = C4559 * C1159;
    const double C15589 = C13227 * C1159;
    const double C5208 = C4559 * C1165;
    const double C14867 = C13227 * C1165;
    const double C4942 = C4559 * C285;
    const double C13417 = C13227 * C285;
    const double C13731 = C13227 * C287;
    const double C14077 = C13227 * C823;
    const double C24937 = C4559 * C823;
    const double C4940 = C4559 * C268;
    const double C13421 = C13227 * C268;
    const double C13727 = C13227 * C269;
    const double C9402 = C4559 * C421;
    const double C19257 = C13227 * C421;
    const double C19547 = C13227 * C422;
    const double C14081 = C13227 * C815;
    const double C24935 = C4559 * C815;
    const double C30532 = C30530 + C30525;
    const double C30117 = C29992 * C30116;
    const double C30122 = 3 * C30116;
    const double C30186 = ae * C30116;
    const double C30185 = C29991 * C30116;
    const double C1034 = (2 * (ae * C30099 + C29991 * C30044) +
                          ae * (C30099 + C30116 * std::pow(C29991, 2)) +
                          C29991 * (C30044 + ae * C29991 * C30116 +
                                    C29991 * (ae * C30116 + C29991 * C30068))) /
                         C29951;
    const double C1177 = (ae * (C30099 + C30116 * C30192) +
                          C29991 * (C30044 + C30068 * C30192)) /
                         C29951;
    const double C1025 =
        (2 * C29991 * C30099 + C29991 * (C30099 + C30116 * C30173)) / C29949;
    const double C1168 = (C30161 * (C30099 + C30116 * C30173)) / C29949;
    const double C1853 =
        (2 * C30161 * C30099 + C30161 * (C30099 + C30116 * C30192)) / C29949;
    const double C5669 = C30682 * C1038;
    const double C14334 = C13223 * C1038;
    const double C5825 = C30682 * C1552;
    const double C15010 = C13223 * C1552;
    const double C5671 = C30682 * C1029;
    const double C14338 = C13223 * C1029;
    const double C6385 = C30682 * C1172;
    const double C14516 = C13223 * C1172;
    const double C5827 = C30682 * C1546;
    const double C15014 = C13223 * C1546;
    const double C10684 = C10681 + C10682;
    const double C15871 = C15865 + C15866;
    const double C10797 = C10795 * C116;
    const double C30509 = C29991 * C30507;
    const double C6222 =
        (2 * C30161 * C30489 + C30161 * (C30489 + C30507 * C30192)) / C29949;
    const double C6227 =
        (3 * (C30489 + C30507 * C30192) +
         C30161 *
             (2 * C30161 * C30507 +
              C30161 * (C30507 + (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) *
                                     C30192))) /
        C29949;
    const double C5414 = C4559 * C5399;
    const double C5556 = C4559 * C5529;
    const double C5934 = C4559 * C5530;
    const double C9868 = C6607 * C116;
    const double C26974 = C6607 * C13229;
    const double C30073 = C30053 + C30071;
    const double C30072 = C30054 + C30070;
    const double C1867 =
        (3 * (C30044 + C30068 * C30192) +
         C30161 * (2 * C30208 +
                   C30161 * (C30068 + (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30192))) /
        C29951;
    const double C9160 = C30682 * C1862;
    const double C21302 = C13223 * C1862;
    const double C30285 = C30282 + C30283;
    const double C30254 = C30242 + C30252;
    const double C10516 = C30682 * C10507;
    const double C10907 = C10905 * C30921;
    const double C26507 = C10905 * C13225;
    const double C30142 = C29992 * C30141;
    const double C30188 = C30141 * C30173;
    const double C2233 =
        (ae * (2 * C30161 * C30116 + C30161 * (C30116 + C30141 * C30192)) +
         C29991 * (2 * C30208 +
                   C30161 * (C30068 + (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30192))) /
        C29951;
    const double C1858 =
        (3 * (C30099 + C30116 * C30192) +
         C30161 * (2 * C30161 * C30116 + C30161 * (C30116 + C30141 * C30192))) /
        C29949;
    const double C30286 = C30280 + C30284;
    const double C30255 = C30240 + C30253;
    const double C123 = 5 * (3 * C30334 + C29992 * C30340) +
                        C29992 * (4 * C30340 + C29992 * C30344);
    const double C270 = 3 * C30334 + C29992 * C30340 + C30344 * C30173;
    const double C423 = 3 * C30334 + C29992 * C30340 + C30344 * C30192;
    const double C558 = C29991 * (4 * C30340 + C29992 * C30344);
    const double C662 = C30161 * (4 * C30340 + C29992 * C30344);
    const double C816 = C30161 * C29991 * C30344;
    const double C5400 = 5 * (3 * C30414 + C29991 * C30488) +
                         C29991 * (4 * C30488 + C29991 * C30510);
    const double C5531 = 3 * C30414 + C29991 * C30488 + C30510 * C30192;
    const double C5927 = C30161 * (4 * C30488 + C29991 * C30510);
    const double C31009 = C30974 / C30699;
    const double C31042 = C31013 / C30703;
    const double C31043 = C31015 + C30982;
    const double C556 = C30982 - C30720 / C30717;
    const double C31012 = C30978 / C30699;
    const double C31025 = C30992 / C30699;
    const double C31049 = C31028 / C30703;
    const double C31050 = C31029 + C30996;
    const double C1286 = C30996 - C30800 / C30717;
    const double C31027 = C30993 / C30699;
    const double C31031 = C30998 / C30699;
    const double C31052 = C31034 / C30703;
    const double C31053 = C31035 + C31002;
    const double C2118 = C31002 - C30842 / C30717;
    const double C31033 = C30999 / C30699;
    const double C9862 = C9563 + C9562;
    const double C10900 = C9860 + C9861;
    const double C10796 = C10794 * C30921;
    const double C9178 = C9157 + C9158;
    const double C19282 = C19255 + C19256;
    const double C19276 = C19243 + C19244;
    const double C9407 = C9400 + C9401;
    const double C19280 = C19251 + C19252;
    const double C19555 = C19549 + C19550;
    const double C9567 = C6392 * C30921;
    const double C24796 = C6392 * C13225;
    const double C26707 = C6392 * C13224;
    const double C10685 = C10683 * C30921;
    const double C26839 = C10683 * C13225;
    const double C5412 = C4559 * C5401;
    const double C9200 = C9190 + C9189;
    const double C4705 = C30682 * C296;
    const double C13420 = C13222 * C296;
    const double C13408 = C13223 * C296;
    const double C4939 = C30682 * C297;
    const double C13416 = C13223 * C297;
    const double C13730 = C13222 * C297;
    const double C5213 = C30682 * C829;
    const double C14080 = C13222 * C829;
    const double C14076 = C13223 * C829;
    const double C4703 = C30682 * C279;
    const double C13424 = C13222 * C279;
    const double C13404 = C13223 * C279;
    const double C4937 = C30682 * C283;
    const double C13412 = C13223 * C283;
    const double C13726 = C13222 * C283;
    const double C9156 = C30682 * C432;
    const double C19260 = C13222 * C432;
    const double C19240 = C13223 * C432;
    const double C9399 = C30682 * C436;
    const double C19248 = C13223 * C436;
    const double C19546 = C13222 * C436;
    const double C5215 = C30682 * C819;
    const double C14084 = C13222 * C819;
    const double C14072 = C13223 * C819;
    const double C10115 = C5223 * C30921;
    const double C25276 = C5223 * C13225;
    const double C25992 = C5223 * C13224;
    const double C10117 = C6390 * C30921;
    const double C26705 = C6390 * C13225;
    const double C9566 = C6393 * C116;
    const double C24795 = C6393 * C13229;
    const double C26708 = C6393 * C13228;
    const double C10789 = C9191 + C9192;
    const double C9869 = C9865 + C9866;
    const double C5665 =
        (4 * (2 * C30419 + C29991 * C30532 + C30420 * ae) +
         C29991 *
             (3 * C30532 +
              C29991 * (2 * C30524 +
                        C29991 * (C30049 +
                                  C29991 * (C29991 * C29992 * C30061 + C30132) +
                                  C29991 * C30129 * ae) +
                        C30526 * ae) +
              C30531 * ae) +
         (3 * C30420 + C29991 * C30531) * ae) /
        C29949;
    const double C5821 =
        (C30161 *
         (3 * C30532 +
          C29991 *
              (2 * C30524 +
               C29991 * (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                         C29991 * C30129 * ae) +
               C30526 * ae) +
          C30531 * ae)) /
        C29949;
    const double C6379 =
        (2 * C30419 + C29991 * C30532 + C30420 * ae +
         (2 * C30524 +
          C29991 * (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                    C29991 * C30129 * ae) +
          C30526 * ae) *
             C30192) /
        C29949;
    const double C6493 =
        (2 * C30161 * C30532 +
         C30161 *
             (C30532 + (C30049 + C29991 * (C29991 * C29992 * C30061 + C30132) +
                        C29991 * C30129 * ae) *
                           C30192)) /
        C29949;
    const double C30118 = C30102 + C30117;
    const double C30189 = C30186 + C30187;
    const double C1180 =
        (C30161 * C30044 + ae * C30161 * C30185 +
         C29991 * (ae * C30161 * C30116 + C29991 * C30161 * C30068)) /
        C29951;
    const double C1185 =
        (C30044 + C30068 * C30192 + ae * (C30185 + C29991 * C30141 * C30192) +
         C29991 * (ae * (C30116 + C30141 * C30192) +
                   C29991 * (C30068 + (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)) *
                                          C30192))) /
        C29951;
    const double C1162 = (C29991 * C30099 + C30185 * C30192) / C29949;
    const double C2227 =
        (2 * C30161 * C30185 + C30161 * (C30185 + C29991 * C30141 * C30192)) /
        C29949;
    const double C4707 = C30682 * C1034;
    const double C14662 = C13223 * C1034;
    const double C9573 = C30682 * C1177;
    const double C15590 = C13223 * C1177;
    const double C4709 = C30682 * C1025;
    const double C14666 = C13223 * C1025;
    const double C5211 = C30682 * C1168;
    const double C14872 = C13223 * C1168;
    const double C9162 = C30682 * C1853;
    const double C21306 = C13223 * C1853;
    const double C5672 = C5668 + C5669;
    const double C14345 = C14333 + C14334;
    const double C5828 = C5824 + C5825;
    const double C15017 = C15009 + C15010;
    const double C5673 = C5670 + C5671;
    const double C14347 = C14337 + C14338;
    const double C6391 = C6384 + C6385;
    const double C14529 = C14515 + C14516;
    const double C5829 = C5826 + C5827;
    const double C15019 = C15013 + C15014;
    const double C10686 = C10684 * C116;
    const double C26840 = C10684 * C13229;
    const double C30511 = C30493 + C30509;
    const double C6598 = C4559 * C6222;
    const double C5419 = C5414 + C5415;
    const double C5565 = C5556 + C5557;
    const double C5937 = C5934 + C5935;
    const double C137 = (5 * (3 * C30025 + C29992 * C30045) +
                         C29992 * (4 * C30045 + C29992 * C30073)) /
                        C29949;
    const double C290 =
        (3 * C30025 + C29992 * C30045 +
         C29991 * (C29991 * C30073 + C30344 * ae) + C29991 * C30344 * ae) /
        C29949;
    const double C443 =
        (3 * C30025 + C29992 * C30045 + C30073 * C30192) / C29949;
    const double C560 = (C29991 * (4 * C30045 + C29992 * C30073) +
                         (4 * C30340 + C29992 * C30344) * ae) /
                        C29949;
    const double C664 = (C30161 * (4 * C30045 + C29992 * C30073)) / C29949;
    const double C826 = (C30161 * (C29991 * C30073 + C30344 * ae)) / C29949;
    const double C144 =
        (5 * (3 * C30044 + ae * C30045 + C29992 * C30072) +
         ae * (4 * C30045 + C29992 * C30073) +
         C29992 *
             (4 * C30072 + ae * C30073 +
              C29992 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C451 = (2 * C30024 + ae * C30025 + C29992 * C30044 +
                         C30072 * std::pow(zP - zQ, 2)) /
                        C29951;
    const double C452 =
        ((zP - zQ) * (3 * C30044 + ae * C30045 + C29992 * C30072)) / C29951;
    const double C453 =
        (3 * C30044 + ae * C30045 + C29992 * C30072 +
         (3 * C30068 + ae * C30069 +
          C29992 *
              (2 * C30064 + ae * C30065 +
               C29992 * (C30060 + ae * C29992 * C30061 +
                         C29992 * (ae * C30061 + C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))) *
             std::pow(zP - zQ, 2)) /
        C29951;
    const double C665 =
        ((zP - zQ) *
         (4 * C30072 + ae * C30073 +
          C29992 * (3 * C30068 + ae * C30069 +
                    C29992 * (2 * C30064 + ae * C30065 +
                              C29992 * (C30060 + ae * C29992 * C30061 +
                                        C29992 * (ae * C30061 +
                                                  C29992 * std::pow(C29994, 8) *
                                                      bs[8] * C30002)))))) /
        C29951;
    const double C2123 =
        (2 * C30161 * C30072 +
         C30161 * (C30072 + (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30192)) /
        C29951;
    const double C9179 = C9159 + C9160;
    const double C21309 = C21301 + C21302;
    const double C10521 = C10515 + C10516;
    const double C30143 = C30123 + C30142;
    const double C30190 = C30116 + C30188;
    const double C5666 =
        (4 * (2 * C30182 + ae * C30183 + C29991 * C30285) +
         ae * (3 * C30183 + C29991 * C30286) +
         C29991 *
             (3 * C30285 + ae * C30286 +
              C29991 *
                  (2 * C30279 + ae * C30281 +
                   C29991 * (C30064 + ae * C29991 * C30134 +
                             C29991 * (ae * C30134 +
                                       C29991 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C5822 =
        (3 * (C30206 + ae * C30161 * C30274 + C29991 * C30292) +
         ae * C30161 * C30286 +
         C29991 * (2 * C30292 + ae * C30161 * C30281 +
                   C29991 * (C30289 + ae * C30161 * C29991 * C30134 +
                             C29991 * (ae * C30161 * C30134 +
                                       C29991 * C30161 *
                                           (ae * C30061 +
                                            C29992 * std::pow(C29994, 8) *
                                                bs[8] * C30002))))) /
        C29951;
    const double C5664 = (4 * (2 * C30178 + C29991 * C30183) +
                          C29991 * (3 * C30183 + C29991 * C30286)) /
                         C29949;
    const double C5820 = (C30161 * (3 * C30183 + C29991 * C30286)) / C29949;
    const double C6378 =
        (2 * C30178 + C29991 * C30183 + C30286 * C30192) / C29949;
    const double C5406 =
        (5 * (3 * C30232 + ae * C30233 + C29991 * C30254) +
         ae * (4 * C30233 + C29991 * C30255) +
         C29991 *
             (4 * C30254 + ae * C30255 +
              C29991 *
                  (3 * C30250 + ae * C30251 +
                   C29991 * (2 * C30244 + ae * C30246 +
                             C29991 * (C30060 + ae * C29991 * C30127 +
                                       C29991 * (ae * C30127 +
                                                 C29991 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C5930 =
        (4 * (2 * C30264 + ae * C30161 * C30228 + C29991 * C30303) +
         ae * C30161 * C30255 +
         C29991 * (3 * C30303 + ae * C30161 * C30251 +
                   C29991 * (2 * C30301 + ae * C30161 * C30246 +
                             C29991 * (C30296 + ae * C30161 * C29991 * C30127 +
                                       C29991 * (ae * C30161 * C30127 +
                                                 C29991 * C30161 *
                                                     std::pow(C29994, 8) *
                                                     bs[8] * C30002))))) /
        C29951;
    const double C5403 = (5 * (3 * C30176 + C29991 * C30233) +
                          C29991 * (4 * C30233 + C29991 * C30255)) /
                         C29949;
    const double C5536 =
        (3 * C30176 + C29991 * C30233 + C30255 * C30192) / C29949;
    const double C5928 = (C30161 * (4 * C30233 + C29991 * C30255)) / C29949;
    const double C31063 = C31009 + C31055;
    const double C555 = C31042 - (C30722 * C30704) / C30699;
    const double C111 = C31043 / C30703 - C30720 / C31016;
    const double C31056 = C31012 + C31042;
    const double C31064 = C31025 + C31059;
    const double C1285 = C31049 - (C30802 * C30791) / C30699;
    const double C1013 = C31050 / C30703 - C30800 / C31016;
    const double C31060 = C31027 + C31049;
    const double C31065 = C31031 + C31061;
    const double C2117 = C31052 - (C30844 * C30833) / C30699;
    const double C1842 = C31053 / C30703 - C30842 / C31016;
    const double C31062 = C31033 + C31052;
    const double C9196 = C9178 * C30921;
    const double C24803 = C9178 * C13224;
    const double C9411 = C9407 * C30921;
    const double C25072 = C9407 * C13224;
    const double C5418 = C5412 + C5413;
    const double C4725 = C4704 + C4705;
    const double C13446 = C13419 + C13420;
    const double C13440 = C13407 + C13408;
    const double C4945 = C4938 + C4939;
    const double C13444 = C13415 + C13416;
    const double C13735 = C13729 + C13730;
    const double C5226 = C5212 + C5213;
    const double C14094 = C14079 + C14080;
    const double C14092 = C14075 + C14076;
    const double C4724 = C4702 + C4703;
    const double C13448 = C13423 + C13424;
    const double C13438 = C13403 + C13404;
    const double C4944 = C4936 + C4937;
    const double C13442 = C13411 + C13412;
    const double C13733 = C13725 + C13726;
    const double C9177 = C9155 + C9156;
    const double C19284 = C19259 + C19260;
    const double C19274 = C19239 + C19240;
    const double C9406 = C9398 + C9399;
    const double C19278 = C19247 + C19248;
    const double C19553 = C19545 + C19546;
    const double C5227 = C5214 + C5215;
    const double C14096 = C14083 + C14084;
    const double C14090 = C14071 + C14072;
    const double C10678 = C9566 + C9567;
    const double C30119 = C30118 + C30113;
    const double C5209 = C30682 * C1180;
    const double C14868 = C13223 * C1180;
    const double C9571 = C30682 * C1162;
    const double C15594 = C13223 * C1162;
    const double C4726 = C4706 + C4707;
    const double C14669 = C14661 + C14662;
    const double C9575 = C9572 + C9573;
    const double C15597 = C15589 + C15590;
    const double C4727 = C4708 + C4709;
    const double C14671 = C14665 + C14666;
    const double C5225 = C5210 + C5211;
    const double C14877 = C14871 + C14872;
    const double C9180 = C9161 + C9162;
    const double C21311 = C21305 + C21306;
    const double C25994 = C5828 * C13225;
    const double C10116 = C6391 * C116;
    const double C26706 = C6391 * C13229;
    const double C25993 = C5829 * C13229;
    const double C30512 = C30511 + C30496;
    const double C6606 = C6598 + C6599;
    const double C10218 = C5565 * C116;
    const double C25664 = C5565 * C13229;
    const double C26127 = C5937 * C13229;
    const double C9405 = C30682 * C451;
    const double C19254 = C13223 * C451;
    const double C19552 = C13223 * C452;
    const double C9197 = C9179 * C30921;
    const double C10525 = C10521 * C30921;
    const double C30144 = C30143 + C30135;
    const double C1039 =
        (3 * (C30044 + ae * C30185 + C29991 * C30189) +
         ae * (2 * C30185 + C29991 * C30190) +
         C29991 *
             (2 * C30189 + ae * C30190 +
              C29991 *
                  (C30068 + ae * C29991 * C30141 +
                   C29991 * (ae * C30141 +
                             C29991 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C1553 =
        (2 * (ae * C30161 * C30116 + C29991 * C30208) + ae * C30161 * C30190 +
         C29991 * (C30208 + ae * C30161 * C29991 * C30141 +
                   C29991 * (ae * C30161 * C30141 +
                             C29991 * C30161 *
                                 (C30060 + ae * C29992 * C30061 +
                                  C29992 * (ae * C30061 +
                                            C29992 * std::pow(C29994, 8) *
                                                bs[8] * C30002))))) /
        C29951;
    const double C1030 = (3 * (C30099 + C30116 * C30173) +
                          C29991 * (2 * C30185 + C29991 * C30190)) /
                         C29949;
    const double C1173 = (C30099 + C30116 * C30173 + C30190 * C30192) / C29949;
    const double C1547 = (C30161 * (2 * C30185 + C29991 * C30190)) / C29949;
    const double C108 =
        (C31054 + 2 * C30713) / C30703 - (C31063 * C30704) / C30699;
    const double C109 =
        (C31041 + 2 * C30722 + C31063) / C30703 - (C31056 * C30704) / C30699;
    const double C110 = (C31014 + C30719 / C30699 + C31056) / C30703 -
                        (C31043 * C30704) / C30699;
    const double C1010 =
        (C31057 + 2 * C30795) / C30703 - (C31064 * C30791) / C30699;
    const double C1011 =
        (C31045 + 2 * C30802 + C31064) / C30703 - (C31060 * C30791) / C30699;
    const double C1012 = (C31020 + C30799 / C30699 + C31060) / C30703 -
                         (C31050 * C30791) / C30699;
    const double C1839 =
        (C31058 + 2 * C30837) / C30703 - (C31065 * C30833) / C30699;
    const double C1840 =
        (C31047 + 2 * C30844 + C31065) / C30703 - (C31062 * C30833) / C30699;
    const double C1841 = (C31023 + C30841 / C30699 + C31062) / C30703 -
                         (C31053 * C30833) / C30699;
    const double C9569 = C5226 * C30921;
    const double C24800 = C5226 * C13225;
    const double C25278 = C5226 * C13224;
    const double C9195 = C9177 * C116;
    const double C24804 = C9177 * C13228;
    const double C9410 = C9406 * C116;
    const double C25071 = C9406 * C13228;
    const double C9568 = C5227 * C116;
    const double C24799 = C5227 * C13229;
    const double C25277 = C5227 * C13228;
    const double C298 =
        (2 * C30024 + ae * C30025 + C29992 * C30044 + ae * C29991 * C30119 +
         C29991 * (ae * C30119 + C29991 * C30072)) /
        C29951;
    const double C299 =
        (ae * (3 * C30099 + C29992 * C30119 +
               (2 * C30093 + C29992 * C30111) * ae) +
         C29991 * (3 * C30044 + ae * C30045 + C29992 * C30072)) /
        C29951;
    const double C830 =
        (ae * C30161 * C30119 + C29991 * C30161 * C30072) / C29951;
    const double C135 = (4 * (2 * C30087 + C29992 * C30099 + C30334 * ae) +
                         C29992 * (3 * C30099 + C29992 * C30119 + C30340 * ae) +
                         (3 * C30334 + C29992 * C30340) * ae) /
                        C29949;
    const double C286 =
        (2 * C30087 + C29992 * C30099 + C30334 * ae + C30119 * C30173) / C29949;
    const double C288 =
        (C29991 * (3 * C30099 + C29992 * C30119 + C30340 * ae)) / C29949;
    const double C439 =
        (2 * C30087 + C29992 * C30099 + C30334 * ae + C30119 * C30192) / C29949;
    const double C441 =
        (C30161 * (3 * C30099 + C29992 * C30119 + C30340 * ae)) / C29949;
    const double C824 = (C30161 * C29991 * C30119) / C29949;
    const double C5224 = C5208 + C5209;
    const double C14875 = C14867 + C14868;
    const double C9574 = C9570 + C9571;
    const double C15599 = C15593 + C15594;
    const double C9577 = C9575 * C30921;
    const double C24801 = C9575 * C13225;
    const double C25279 = C5225 * C13229;
    const double C9198 = C9180 * C116;
    const double C5404 =
        (5 * (3 * C30489 + C29991 * C30512 + C30488 * ae) +
         C29991 *
             (4 * C30512 +
              C29991 *
                  (3 * C30507 +
                   C29991 *
                       (2 * C30499 +
                        C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) +
                        C30501 * ae) +
                   C30506 * ae) +
              C30510 * ae) +
         (4 * C30488 + C29991 * C30510) * ae) /
        C29949;
    const double C5532 =
        (2 * C30413 + C29991 * C30489 + C30414 * ae + C30512 * C30192) / C29949;
    const double C5534 =
        (C30161 * (3 * C30489 + C29991 * C30512 + C30488 * ae)) / C29949;
    const double C5537 =
        (3 * C30489 + C29991 * C30512 + C30488 * ae +
         (3 * C30507 +
          C29991 * (2 * C30499 +
                    C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                              C29991 * C30125 * ae) +
                    C30501 * ae) +
          C30506 * ae) *
             C30192) /
        C29949;
    const double C5929 =
        (C30161 *
         (4 * C30512 +
          C29991 * (3 * C30507 +
                    C29991 * (2 * C30499 +
                              C29991 * (C30037 +
                                        C29991 * (C29991 * C30061 + C30128) +
                                        C29991 * C30125 * ae) +
                              C30501 * ae) +
                    C30506 * ae) +
          C30510 * ae)) /
        C29949;
    const double C6595 =
        (2 * C30161 * C30512 +
         C30161 *
             (C30512 + (2 * C30499 +
                        C29991 * (C30037 + C29991 * (C29991 * C30061 + C30128) +
                                  C29991 * C30125 * ae) +
                        C30501 * ae) *
                           C30192)) /
        C29949;
    const double C9867 = C6606 * C30921;
    const double C26973 = C6606 * C13225;
    const double C9409 = C9404 + C9405;
    const double C19281 = C19253 + C19254;
    const double C19556 = C19551 + C19552;
    const double C30145 = C29992 * C30144;
    const double C1293 =
        (2 * (ae * C30119 + C29991 * C30072) + ae * (C30119 + C30144 * C30173) +
         C29991 *
             (C30072 + ae * C29991 * C30144 +
              C29991 *
                  (ae * C30144 +
                   C29991 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C1443 =
        (C30161 * C30072 + ae * C30161 * C29991 * C30144 +
         C29991 * (ae * C30161 * C30144 +
                   C29991 * C30161 *
                       (2 * C30064 + ae * C30065 +
                        C29992 * (C30060 + ae * C29992 * C30061 +
                                  C29992 * (ae * C30061 +
                                            C29992 * std::pow(C29994, 8) *
                                                bs[8] * C30002))))) /
        C29951;
    const double C2017 =
        (ae * (C30119 + C30144 * C30192) +
         C29991 * (C30072 + (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002))) *
                                C30192)) /
        C29951;
    const double C1291 =
        (2 * C29991 * C30119 + C29991 * (C30119 + C30144 * C30173)) / C29949;
    const double C1441 = (C30161 * (C30119 + C30144 * C30173)) / C29949;
    const double C2015 = (C29991 * C30119 + C29991 * C30144 * C30192) / C29949;
    const double C2121 =
        (2 * C30161 * C30119 + C30161 * (C30119 + C30144 * C30192)) / C29949;
    const double C9201 = C9195 + C9196;
    const double C4943 = C30682 * C298;
    const double C13418 = C13223 * C298;
    const double C13732 = C13223 * C299;
    const double C14078 = C13223 * C830;
    const double C24938 = C30682 * C830;
    const double C4941 = C30682 * C286;
    const double C13422 = C13223 * C286;
    const double C13728 = C13223 * C288;
    const double C9403 = C30682 * C439;
    const double C19258 = C13223 * C439;
    const double C19548 = C13223 * C441;
    const double C14082 = C13223 * C824;
    const double C24936 = C30682 * C824;
    const double C25280 = C5224 * C13225;
    const double C9576 = C9574 * C116;
    const double C24802 = C9574 * C13229;
    const double C5554 = C4559 * C5532;
    const double C5932 = C4559 * C5534;
    const double C9413 = C9409 * C30921;
    const double C30146 = C30122 + C30145;
    const double C4947 = C4942 + C4943;
    const double C13445 = C13417 + C13418;
    const double C13736 = C13731 + C13732;
    const double C14093 = C14077 + C14078;
    const double C24940 = C24937 + C24938;
    const double C4946 = C4940 + C4941;
    const double C13447 = C13421 + C13422;
    const double C13734 = C13727 + C13728;
    const double C9408 = C9402 + C9403;
    const double C19283 = C19257 + C19258;
    const double C19554 = C19547 + C19548;
    const double C14095 = C14081 + C14082;
    const double C24939 = C24935 + C24936;
    const double C5564 = C5554 + C5555;
    const double C5936 = C5932 + C5933;
    const double C30147 = C30146 + C30140;
    const double C25074 = C24940 * C13225;
    const double C9412 = C9408 * C116;
    const double C25073 = C24939 * C13229;
    const double C10219 = C5564 * C30921;
    const double C25663 = C5564 * C13225;
    const double C26128 = C5936 * C13225;
    const double C300 =
        (3 * C30044 + ae * C30045 + C29992 * C30072 + ae * C29991 * C30147 +
         C29991 *
             (ae * C30147 +
              C29991 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C561 =
        (ae * (4 * C30119 + C29992 * C30147 +
               (3 * C30111 + C29992 * C30138) * ae) +
         C29991 *
             (4 * C30072 + ae * C30073 +
              C29992 *
                  (3 * C30068 + ae * C30069 +
                   C29992 * (2 * C30064 + ae * C30065 +
                             C29992 * (C30060 + ae * C29992 * C30061 +
                                       C29992 * (ae * C30061 +
                                                 C29992 * std::pow(C29994, 8) *
                                                     bs[8] * C30002)))))) /
        C29951;
    const double C831 =
        (ae * C30161 * C30147 +
         C29991 * C30161 *
             (3 * C30068 + ae * C30069 +
              C29992 * (2 * C30064 + ae * C30065 +
                        C29992 * (C30060 + ae * C29992 * C30061 +
                                  C29992 * (ae * C30061 +
                                            C29992 * std::pow(C29994, 8) *
                                                bs[8] * C30002))))) /
        C29951;
    const double C136 = (5 * (3 * C30099 + C29992 * C30119 + C30340 * ae) +
                         C29992 * (4 * C30119 + C29992 * C30147 + C30344 * ae) +
                         (4 * C30340 + C29992 * C30344) * ae) /
                        C29949;
    const double C289 =
        (3 * C30099 + C29992 * C30119 + C30340 * ae + C30147 * C30173) / C29949;
    const double C442 =
        (3 * C30099 + C29992 * C30119 + C30340 * ae + C30147 * C30192) / C29949;
    const double C559 =
        (C29991 * (4 * C30119 + C29992 * C30147 + C30344 * ae)) / C29949;
    const double C663 =
        (C30161 * (4 * C30119 + C29992 * C30147 + C30344 * ae)) / C29949;
    const double C825 = (C30161 * C29991 * C30147) / C29949;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C30795 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C30802 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30754 * C2700) *
              C30713 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C30802 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C30795 -
           ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C2700) *
              C30722 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C30795 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C30802 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C30795 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C30802 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C30990 -
            ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C2700) *
              C2440 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C30795 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30802 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C30990) *
               C2700) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C31064 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C31060 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30754 * C31050 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30754 * C31030) *
              C2440 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C31060 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C31064 -
           ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31050 +
           ((C14672 + C14671) * C13228 + (C14670 + C14669) * C13224 +
            (C13226 * C1020 + C13222 * C1029 + C13227 * C1021 +
             C13223 * C1030) *
                C13229 +
            (C13226 * C1032 + C13222 * C1038 + C13227 * C1033 +
             C13223 * C1039) *
                C13225) *
               C30933 * C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C2332 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C30799) *
              C31063 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C30799 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C2332) *
              C31056 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C2332 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C30799) *
              C31043 +
          (((C13733 + C13734) * C13228 + (C13735 + C13736) * C13224 +
            (C13226 * C268 + C13222 * C286 + C13227 * C270 + C13223 * C289) *
                C13229 +
            (C13226 * C285 + C13222 * C298 + C13227 * C290 + C13223 * C300) *
                C13225) *
               C30933 * C30754 * C30799 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30754 * C2332) *
              C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C31058 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C31047 +
            ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                 C13228 +
             (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                 C13224 +
             (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
                C30933 * C31023) *
               C2332 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C31047 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C31058 -
            ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
             (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
                C30933 * C31023) *
               C30799) *
              C2440 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C31047 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C31058 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                 C13224 +
             (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                 C13228) *
                C30933 * C31023) *
               C2332 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C31058 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C31047 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
              C13223 * C1173) *
                 C13229 +
             (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
              C13223 * C1185) *
                 C13225) *
                C30933 * C31023) *
               C30799) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C30799) *
              C30713 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C2332 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C30722 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C30990 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C30990) *
               C30799) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C2332 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C30799) *
              C31063 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C30799 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C2332) *
              C31056 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C2332 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C30799) *
              C31043 +
          (((C13733 + C13734) * C13228 + (C13735 + C13736) * C13224 +
            (C13226 * C268 + C13222 * C286 + C13227 * C270 + C13223 * C289) *
                C13229 +
            (C13226 * C285 + C13222 * C298 + C13227 * C290 + C13223 * C300) *
                C13225) *
               C30933 * C30754 * C30799 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30754 * C2332) *
              C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C31064 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C31060 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30754 * C31050 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30754 * C31030) *
              C2440 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C31060 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C31064 -
           ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31050 +
           ((C14672 + C14671) * C13228 + (C14670 + C14669) * C13224 +
            (C13226 * C1020 + C13222 * C1029 + C13227 * C1021 +
             C13223 * C1030) *
                C13229 +
            (C13226 * C1032 + C13222 * C1038 + C13227 * C1033 +
             C13223 * C1039) *
                C13225) *
               C30933 * C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C30795 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C30802 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C3094 -
            ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C2700) *
              C30975 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C30795 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30802 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C3094) *
               C2700) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30837 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30844 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C3602) *
              C30795 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C30844 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30837 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C3602) *
              C30802 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30837 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C30844 +
           ((C14530 + C14529) * C13228 + (C14528 + C14527) * C13224 +
            (C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
             C13223 * C6378) *
                C13229 +
            (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
             C13223 * C6380) *
                C13225) *
               C30933 * C3602) *
              C2700) *
         C30708) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C3094 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C31064 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C30841 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C3094) *
              C31060 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C3094 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C30841) *
              C31050 +
          (((C15020 + C15019) * C13228 + (C15018 + C15017) * C13224 +
            (C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C13229 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C13225) *
               C30933 * C30841 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C30799) *
              C31054 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C2332 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C3094 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31065 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31062 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31053 -
           ((C15869 + C15870) * C13225 + (C15871 + C15872) * C13229 +
            (C13227 * C1851 + C13223 * C1863 + C13226 * C1852 +
             C13222 * C1864) *
                C13224 +
            (C13227 * C1845 + C13223 * C1854 + C13226 * C1846 +
             C13222 * C1855) *
                C13228) *
               C30933 * C31036) *
              C2332 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C31062 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C31065 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C31053 +
           ((C15872 + C15871) * C13228 + (C15870 + C15869) * C13224 +
            (C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
             C13223 * C6492) *
                C13229 +
            (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
             C13223 * C6494) *
                C13225) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30837 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30844 +
            ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                 C13228 +
             (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                 C13224 +
             (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
                C30933 * C3602) *
               C2332 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30844 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30837 -
            ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
             (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
                C30933 * C3602) *
               C30799) *
              C30975 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30844 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30837 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                 C13224 +
             (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                 C13228) *
                C30933 * C3602) *
               C2332 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30837 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30844 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
              C13223 * C1173) *
                 C13229 +
             (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
              C13223 * C1185) *
                 C13225) *
                C30933 * C3602) *
               C30799) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C30799) *
              C31054 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C2332 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C3094 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C2332 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C3094 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C31064 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C30841 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C3094) *
              C31060 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C3094 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C30841) *
              C31050 +
          (((C15020 + C15019) * C13228 + (C15018 + C15017) * C13224 +
            (C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C13229 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C13225) *
               C30933 * C30841 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C1284 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C1285 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30754 * C1286 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30754 * C31030) *
              C30975 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C1285 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C1284 -
           ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C1286 +
           ((C14672 + C14671) * C13228 + (C14670 + C14669) * C13224 +
            (C13226 * C1020 + C13222 * C1029 + C13227 * C1021 +
             C13223 * C1030) *
                C13229 +
            (C13226 * C1032 + C13222 * C1038 + C13227 * C1033 +
             C13223 * C1039) *
                C13225) *
               C30933 * C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C30989 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C30799) *
              C554 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C30799 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C30989) *
              C555 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C30989 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C30799) *
              C556 +
          (((C13733 + C13734) * C13228 + (C13735 + C13736) * C13224 +
            (C13226 * C268 + C13222 * C286 + C13227 * C270 + C13223 * C289) *
                C13229 +
            (C13226 * C285 + C13222 * C298 + C13227 * C290 + C13223 * C300) *
                C13225) *
               C30933 * C30754 * C30799 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30754 * C30989) *
              C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C1664 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C1665 +
            ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                 C13228 +
             (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                 C13224 +
             (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
                C30933 * C31023) *
               C30989 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C1665 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C1664 -
            ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
             (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
                C30933 * C31023) *
               C30799) *
              C30975 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C1665 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C1664 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                 C13224 +
             (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                 C13228) *
                C30933 * C31023) *
               C30989 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C1664 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C1665 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
              C13223 * C1173) *
                 C13229 +
             (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
              C13223 * C1185) *
                 C13225) *
                C30933 * C31023) *
               C30799) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30990 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C1284 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C30841 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30990) *
              C1285 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30990 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C30841) *
              C1286 +
          (((C15020 + C15019) * C13228 + (C15018 + C15017) * C13224 +
            (C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C13229 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C13225) *
               C30933 * C30841 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C13226 * C1155 + C13222 * C1170 + C13227 * C1154 +
              C13223 * C1169) *
                 C13229 +
             (C13226 * C1167 + C13222 * C1182 + C13227 * C1166 +
              C13223 * C1181) *
                 C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C30799) *
              C258 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C30989 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C13227 * C1165 + C13223 * C1180 + C13226 * C1166 +
              C13222 * C1181) *
                 C13225 +
             (C13227 * C1153 + C13223 * C1168 + C13226 * C1154 +
              C13222 * C1169) *
                 C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C30990 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C2116 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C2117 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C2118 -
           ((C15869 + C15870) * C13225 + (C15871 + C15872) * C13229 +
            (C13227 * C1851 + C13223 * C1863 + C13226 * C1852 +
             C13222 * C1864) *
                C13224 +
            (C13227 * C1845 + C13223 * C1854 + C13226 * C1846 +
             C13222 * C1855) *
                C13228) *
               C30933 * C31036) *
              C30989 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C2117 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C2116 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C2118 +
           ((C15872 + C15871) * C13228 + (C15870 + C15869) * C13224 +
            (C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
             C13223 * C6492) *
                C13229 +
            (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
             C13223 * C6494) *
                C13225) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                   C13228 +
               (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                   C13224 +
               (C13226 * C263 + C13222 * C276 + C13227 * C262 + C13223 * C275) *
                   C13229 +
               (C13226 * C273 + C13222 * C293 + C13227 * C272 + C13223 * C292) *
                   C13225) *
                  C30933 * C30754 * C30736 * C108 -
              ((C13227 * C271 + C13223 * C291 + C13226 * C272 + C13222 * C292) *
                   C13225 +
               (C13227 * C261 + C13223 * C274 + C13226 * C262 + C13222 * C275) *
                   C13229 +
               (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                   C13224 +
               (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                   C13228) *
                  C30933 * C30754 * C30736 * C109 +
              ((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                   C13228 +
               (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                   C13224 +
               (C13226 * C261 + C13222 * C274 + C13227 * C267 + C13223 * C283) *
                   C13229 +
               (C13226 * C271 + C13222 * C291 + C13227 * C284 + C13223 * C297) *
                   C13225) *
                  C30933 * C30754 * C30736 * C110 -
              ((C13227 * C287 + C13223 * C299 + C13226 * C284 + C13222 * C297) *
                   C13225 +
               (C13227 * C269 + C13223 * C288 + C13226 * C267 + C13222 * C283) *
                   C13229 +
               (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                   C13224 +
               (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                   C13228) *
                  C30933 * C30754 * C30736 * C111 +
              ((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
                   C13228 +
               (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
                   C13224 +
               (C13226 * C269 + C13222 * C288 + C13227 * C558 + C13223 * C559) *
                   C13229 +
               (C13226 * C287 + C13222 * C299 + C13227 * C560 + C13223 * C561) *
                   C13225) *
                  C30933 * C30754 * C30736 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13226 * C117 + C13222 * C124 + C13227 * C118 +
                 C13223 * C125) *
                    C13228 +
                (C13226 * C127 + C13222 * C138 + C13227 * C128 +
                 C13223 * C139) *
                    C13224 +
                (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                   C30933 * C30754 * C31057 -
               ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
                (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                   C30933 * C30754 * C31045 +
               ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
                (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
                 C13223 * C1026) *
                    C13229 +
                (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
                 C13223 * C1035) *
                    C13225) *
                   C30933 * C30754 * C31020) *
                  C258 +
              (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
                (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                   C30933 * C30754 * C31045 -
               ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
                (C13227 * C129 + C13223 * C140 + C13226 * C128 +
                 C13222 * C139) *
                    C13224 +
                (C13227 * C119 + C13223 * C126 + C13226 * C118 +
                 C13222 * C125) *
                    C13228) *
                   C30933 * C30754 * C31057 -
               ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
                 C13222 * C1035) *
                    C13225 +
                (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
                 C13222 * C1026) *
                    C13229 +
                (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                   C30933 * C30754 * C31020) *
                  C259 +
              (((C13226 * C119 + C13222 * C126 + C13227 * C120 +
                 C13223 * C131) *
                    C13228 +
                (C13226 * C129 + C13222 * C140 + C13227 * C130 +
                 C13223 * C141) *
                    C13224 +
                (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                   C30933 * C30754 * C31057 -
               ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
                (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                   C30933 * C30754 * C31045 +
               ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
                (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
                 C13223 * C1291) *
                    C13229 +
                (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
                 C13223 * C1293) *
                    C13225) *
                   C30933 * C30754 * C31020) *
                  C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31058 -
           ((C13227 * C821 + C13223 * C828 + C13226 * C820 + C13222 * C827) *
                C13225 +
            (C13227 * C813 + C13223 * C818 + C13226 * C812 + C13222 * C817) *
                C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C13226 * C1152 + C13222 * C1164 + C13227 * C1151 +
             C13223 * C1163) *
                C13229 +
            (C13226 * C1161 + C13222 * C1179 + C13227 * C1160 +
             C13223 * C1178) *
                C13225) *
               C30933 * C31023) *
              C30736 * C258 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C13226 * C813 + C13222 * C818 + C13227 * C814 + C13223 * C819) *
                C13229 +
            (C13226 * C821 + C13222 * C828 + C13227 * C822 + C13223 * C829) *
                C13225) *
               C30933 * C31047 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C31058 -
           ((C13227 * C1159 + C13223 * C1177 + C13226 * C1160 +
             C13222 * C1178) *
                C13225 +
            (C13227 * C1150 + C13223 * C1162 + C13226 * C1151 +
             C13222 * C1163) *
                C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C31023) *
              C30736 * C259 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C31058 -
           ((C13227 * C823 + C13223 * C830 + C13226 * C822 + C13222 * C829) *
                C13225 +
            (C13227 * C815 + C13223 * C824 + C13226 * C814 + C13222 * C819) *
                C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C419 + C13222 * C432 + C13227 * C421 + C13223 * C439) *
                C13228 +
            (C13226 * C435 + C13222 * C449 + C13227 * C438 + C13223 * C451) *
                C13224 +
            (C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
             C13223 * C2015) *
                C13229 +
            (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
             C13223 * C2017) *
                C13225) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C942 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C943 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31054 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C943 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C942 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C942 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C943 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
              C30933 * C30754 * C1010 -
          ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
           (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
              C30933 * C30754 * C1011 +
          ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
           (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
              C30933 * C30754 * C1012 -
          ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
           (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
              C30933 * C30754 * C1013 +
          ((C14348 + C14347) * C13228 + (C14346 + C14345) * C13224 +
           (C13226 * C5399 + C13222 * C5402 + C13227 * C5663 + C13223 * C5664) *
               C13229 +
           (C13226 * C5401 + C13222 * C5405 + C13227 * C5665 + C13223 * C5666) *
               C13225) *
              C30933 * C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31058 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C942 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C31047 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C31058 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C31023) *
              C943 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C31058 -
           ((C13227 * C1549 + C13223 * C1552 + C13226 * C1548 +
             C13222 * C1551) *
                C13225 +
            (C13227 * C1543 + C13223 * C1546 + C13226 * C1542 +
             C13222 * C1545) *
                C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C31047 +
           ((C14530 + C14529) * C13228 + (C14528 + C14527) * C13224 +
            (C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
             C13223 * C6378) *
                C13229 +
            (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
             C13223 * C6380) *
                C13225) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C1664 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C30736 * C31054 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C1665 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C1664 -
           ((C13227 * C1159 + C13223 * C1177 + C13226 * C1160 +
             C13222 * C1178) *
                C13225 +
            (C13227 * C1150 + C13223 * C1162 + C13226 * C1151 +
             C13222 * C1163) *
                C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C31023) *
              C30736 * C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C1664 -
           ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C419 + C13222 * C432 + C13227 * C421 + C13223 * C439) *
                C13228 +
            (C13226 * C435 + C13222 * C449 + C13227 * C438 + C13223 * C451) *
                C13224 +
            (C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
             C13223 * C2015) *
                C13229 +
            (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
             C13223 * C2017) *
                C13225) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C1664 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C31057 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C1665 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C1664 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C31023) *
              C31045 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C1664 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C1665 +
           ((C14530 + C14529) * C13228 + (C14528 + C14527) * C13224 +
            (C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
             C13223 * C6378) *
                C13229 +
            (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
             C13223 * C6380) *
                C13225) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
              C30933 * C1839 -
          ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
           (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
               C13224 +
           (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
               C13228) *
              C30933 * C1840 +
          ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
               C13228 +
           (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
               C13224 +
           (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
              C30933 * C1841 -
          ((C13227 * C2229 + C13223 * C2232 + C13226 * C2228 + C13222 * C2231) *
               C13225 +
           (C13227 * C2223 + C13223 * C2226 + C13226 * C2222 + C13222 * C2225) *
               C13229 +
           (C13227 * C1851 + C13223 * C1863 + C13226 * C1852 + C13222 * C1864) *
               C13224 +
           (C13227 * C1845 + C13223 * C1854 + C13226 * C1846 + C13222 * C1855) *
               C13228) *
              C30933 * C1842 +
          ((C13226 * C1847 + C13222 * C1856 + C13227 * C1848 + C13223 * C1857) *
               C13228 +
           (C13226 * C1859 + C13222 * C1865 + C13227 * C1860 + C13223 * C1866) *
               C13224 +
           (C13226 * C6220 + C13222 * C6224 + C13227 * C10673 +
            C13223 * C10674) *
               C13229 +
           (C13226 * C6225 + C13222 * C6229 + C13227 * C10675 +
            C13223 * C10676) *
               C13225) *
              C30933 * C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C942 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C943 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C30990 -
            ((C13227 * C1549 + C13223 * C1552 + C13226 * C1548 +
              C13222 * C1551) *
                 C13225 +
             (C13227 * C1543 + C13223 * C1546 + C13226 * C1542 +
              C13222 * C1545) *
                 C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C31020) *
              C30975 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C942 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C943 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30990 -
           ((C13227 * C821 + C13223 * C828 + C13226 * C820 + C13222 * C827) *
                C13225 +
            (C13227 * C813 + C13223 * C818 + C13226 * C812 + C13222 * C817) *
                C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C30736 * C554 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C13226 * C813 + C13222 * C818 + C13227 * C814 + C13223 * C819) *
                C13229 +
            (C13226 * C821 + C13222 * C828 + C13227 * C822 + C13223 * C829) *
                C13225) *
               C30933 * C30841 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30990) *
              C30736 * C555 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30990 -
           ((C13227 * C823 + C13223 * C830 + C13226 * C822 + C13222 * C829) *
                C13225 +
            (C13227 * C815 + C13223 * C824 + C13226 * C814 + C13222 * C819) *
                C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C30841) *
              C30736 * C556 +
          (((C13226 * C420 + C13222 * C436 + C13227 * C422 + C13223 * C441) *
                C13228 +
            (C13226 * C437 + C13222 * C450 + C13227 * C440 + C13223 * C452) *
                C13224 +
            (C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                C13229 +
            (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                C13225) *
               C30933 * C30841 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C2116 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C2117 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C2118 -
           ((C13227 * C2229 + C13223 * C2232 + C13226 * C2228 +
             C13222 * C2231) *
                C13225 +
            (C13227 * C2223 + C13223 * C2226 + C13226 * C2222 +
             C13222 * C2225) *
                C13229 +
            (C13227 * C1851 + C13223 * C1863 + C13226 * C1852 +
             C13222 * C1864) *
                C13224 +
            (C13227 * C1845 + C13223 * C1854 + C13226 * C1846 +
             C13222 * C1855) *
                C13228) *
               C30933 * C31036) *
              C30736 * C30975 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C2117 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C2116 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C2118 +
           ((C13226 * C1845 + C13222 * C1854 + C13227 * C1844 +
             C13223 * C1853) *
                C13228 +
            (C13226 * C1851 + C13222 * C1863 + C13227 * C1850 +
             C13223 * C1862) *
                C13224 +
            (C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
             C13223 * C2227) *
                C13229 +
            (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
             C13223 * C2233) *
                C13225) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C258 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C31045 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C31057 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C259 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13226 * C263 + C13222 * C276 + C13227 * C262 + C13223 * C275) *
               C13229 +
           (C13226 * C273 + C13222 * C293 + C13227 * C272 + C13223 * C292) *
               C13225) *
              C30933 * C30754 * C30736 * C108 -
          ((C13227 * C271 + C13223 * C291 + C13226 * C272 + C13222 * C292) *
               C13225 +
           (C13227 * C261 + C13223 * C274 + C13226 * C262 + C13222 * C275) *
               C13229 +
           (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
               C13224 +
           (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
               C13228) *
              C30933 * C30754 * C30736 * C109 +
          ((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
               C13228 +
           (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
               C13224 +
           (C13226 * C261 + C13222 * C274 + C13227 * C267 + C13223 * C283) *
               C13229 +
           (C13226 * C271 + C13222 * C291 + C13227 * C284 + C13223 * C297) *
               C13225) *
              C30933 * C30754 * C30736 * C110 -
          ((C13227 * C287 + C13223 * C299 + C13226 * C284 + C13222 * C297) *
               C13225 +
           (C13227 * C269 + C13223 * C288 + C13226 * C267 + C13222 * C283) *
               C13229 +
           (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
               C13224 +
           (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
               C13228) *
              C30933 * C30754 * C30736 * C111 +
          ((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
               C13228 +
           (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
               C13224 +
           (C13226 * C269 + C13222 * C288 + C13227 * C558 + C13223 * C559) *
               C13229 +
           (C13226 * C287 + C13222 * C299 + C13227 * C560 + C13223 * C561) *
               C13225) *
              C30933 * C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C942 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C943 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31054 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C943 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C942 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C942 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C943 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
              C30933 * C30754 * C1010 -
          ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
           (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
              C30933 * C30754 * C1011 +
          ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
           (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
              C30933 * C30754 * C1012 -
          ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
           (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
              C30933 * C30754 * C1013 +
          ((C14348 + C14347) * C13228 + (C14346 + C14345) * C13224 +
           (C13226 * C5399 + C13222 * C5402 + C13227 * C5663 + C13223 * C5664) *
               C13229 +
           (C13226 * C5401 + C13222 * C5405 + C13227 * C5665 + C13223 * C5666) *
               C13225) *
              C30933 * C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C1664 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C30736 * C31054 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C1665 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C1664 -
           ((C13227 * C1159 + C13223 * C1177 + C13226 * C1160 +
             C13222 * C1178) *
                C13225 +
            (C13227 * C1150 + C13223 * C1162 + C13226 * C1151 +
             C13222 * C1163) *
                C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C31023) *
              C30736 * C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C1664 -
           ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C419 + C13222 * C432 + C13227 * C421 + C13223 * C439) *
                C13228 +
            (C13226 * C435 + C13222 * C449 + C13227 * C438 + C13223 * C451) *
                C13224 +
            (C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
             C13223 * C2015) *
                C13229 +
            (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
             C13223 * C2017) *
                C13225) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C1664 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C1665 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C31057 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C1665 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C1664 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C31023) *
              C31045 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C1664 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C1665 +
           ((C14530 + C14529) * C13228 + (C14528 + C14527) * C13224 +
            (C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
             C13223 * C6378) *
                C13229 +
            (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
             C13223 * C6380) *
                C13225) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C30799) *
              C30713 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C30989 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C30722 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C3094 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C3094) *
               C30799) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30837 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30844 +
            ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                 C13228 +
             (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                 C13224 +
             (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
                C30933 * C3602) *
               C30989 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30844 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30837 -
            ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
             (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
                C30933 * C3602) *
               C30799) *
              C2440 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30844 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30837 -
            ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
             (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                 C13224 +
             (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                 C13228) *
                C30933 * C3602) *
               C30989 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30837 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30844 +
            ((C15600 + C15599) * C13228 + (C15598 + C15597) * C13224 +
             (C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
              C13223 * C1173) *
                 C13229 +
             (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
              C13223 * C1185) *
                 C13225) *
                C30933 * C3602) *
               C30799) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C31057 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C31045 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C3094 -
            ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C31020) *
              C2440 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C31057 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C31045 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C3094 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C30736 * C31063 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C30841 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C3094) *
              C30736 * C31056 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C3094 -
           ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C30841) *
              C30736 * C31043 +
          (((C13226 * C420 + C13222 * C436 + C13227 * C422 + C13223 * C441) *
                C13228 +
            (C13226 * C437 + C13222 * C450 + C13227 * C440 + C13223 * C452) *
                C13224 +
            (C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                C13229 +
            (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                C13225) *
               C30933 * C30841 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31065 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31062 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31053 -
           ((C15869 + C15870) * C13225 + (C15871 + C15872) * C13229 +
            (C13227 * C1851 + C13223 * C1863 + C13226 * C1852 +
             C13222 * C1864) *
                C13224 +
            (C13227 * C1845 + C13223 * C1854 + C13226 * C1846 +
             C13222 * C1855) *
                C13228) *
               C30933 * C31036) *
              C30736 * C2440 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C31062 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C31065 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C31053 +
           ((C13226 * C1845 + C13222 * C1854 + C13227 * C1844 +
             C13223 * C1853) *
                C13228 +
            (C13226 * C1851 + C13222 * C1863 + C13227 * C1850 +
             C13223 * C1862) *
                C13224 +
            (C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
             C13223 * C2227) *
                C13229 +
            (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
             C13223 * C2233) *
                C13225) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30837 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30844 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C3602) *
              C30736 * C30713 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C30844 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30837 -
           ((C15597 + C15598) * C13225 + (C15599 + C15600) * C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C3602) *
              C30736 * C30722 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30837 -
           ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C30844 +
           ((C13226 * C419 + C13222 * C432 + C13227 * C421 + C13223 * C439) *
                C13228 +
            (C13226 * C435 + C13222 * C449 + C13227 * C438 + C13223 * C451) *
                C13224 +
            (C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
             C13223 * C2015) *
                C13229 +
            (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
             C13223 * C2017) *
                C13225) *
               C30933 * C3602) *
              C30736 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C3094 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C30736 * C31063 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
               C30933 * C30841 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C3094) *
              C30736 * C31056 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C3094 -
           ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C30841) *
              C30736 * C31043 +
          (((C13226 * C420 + C13222 * C436 + C13227 * C422 + C13223 * C441) *
                C13228 +
            (C13226 * C437 + C13222 * C450 + C13227 * C440 + C13223 * C452) *
                C13224 +
            (C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                C13229 +
            (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                C13225) *
               C30933 * C30841 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C3094 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C31057 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C3094) *
               C31045 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C3094 -
            ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C31020) *
              C2440 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C3094) *
               C31057 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C3094 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C31045 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C30989 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C30799) *
              C554 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C30799 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C30989) *
              C555 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C30989 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C30799) *
              C556 +
          (((C13733 + C13734) * C13228 + (C13735 + C13736) * C13224 +
            (C13226 * C268 + C13222 * C286 + C13227 * C270 + C13223 * C289) *
                C13229 +
            (C13226 * C285 + C13222 * C298 + C13227 * C290 + C13223 * C300) *
                C13225) *
               C30933 * C30754 * C30799 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30754 * C30989) *
              C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C1284 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C1285 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30754 * C1286 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30754 * C31030) *
              C30975 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C1285 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C1284 -
           ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C1286 +
           ((C14672 + C14671) * C13228 + (C14670 + C14669) * C13224 +
            (C13226 * C1020 + C13222 * C1029 + C13227 * C1021 +
             C13223 * C1030) *
                C13229 +
            (C13226 * C1032 + C13222 * C1038 + C13227 * C1033 +
             C13223 * C1039) *
                C13225) *
               C30933 * C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C13226 * C1155 + C13222 * C1170 + C13227 * C1154 +
              C13223 * C1169) *
                 C13229 +
             (C13226 * C1167 + C13222 * C1182 + C13227 * C1166 +
              C13223 * C1181) *
                 C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C30799) *
              C258 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C30989 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C13227 * C1165 + C13223 * C1180 + C13226 * C1166 +
              C13222 * C1181) *
                 C13225 +
             (C13227 * C1153 + C13223 * C1168 + C13226 * C1154 +
              C13222 * C1169) *
                 C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C30799) *
              C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C13228 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C13224 +
             (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
                C30933 * C30990 -
            ((C14093 + C14094) * C13225 + (C14095 + C14096) * C13229 +
             (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                 C13224 +
             (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                 C13228) *
                C30933 * C30841) *
               C30989 +
           (((C14096 + C14095) * C13228 + (C14094 + C14093) * C13224 +
             (C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C13229 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C13225) *
                C30933 * C30841 -
            ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
             (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
                C30933 * C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30990 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C1284 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C30841 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30990) *
              C1285 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C30990 -
           ((C15017 + C15018) * C13225 + (C15019 + C15020) * C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C30841) *
              C1286 +
          (((C15020 + C15019) * C13228 + (C15018 + C15017) * C13224 +
            (C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C13229 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C13225) *
               C30933 * C30841 -
           ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
            (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
               C30933 * C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C258 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C31045 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C31057 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C259 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13226 * C263 + C13222 * C276 + C13227 * C262 + C13223 * C275) *
               C13229 +
           (C13226 * C273 + C13222 * C293 + C13227 * C272 + C13223 * C292) *
               C13225) *
              C30933 * C30754 * C30736 * C108 -
          ((C13227 * C271 + C13223 * C291 + C13226 * C272 + C13222 * C292) *
               C13225 +
           (C13227 * C261 + C13223 * C274 + C13226 * C262 + C13222 * C275) *
               C13229 +
           (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
               C13224 +
           (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
               C13228) *
              C30933 * C30754 * C30736 * C109 +
          ((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
               C13228 +
           (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
               C13224 +
           (C13226 * C261 + C13222 * C274 + C13227 * C267 + C13223 * C283) *
               C13229 +
           (C13226 * C271 + C13222 * C291 + C13227 * C284 + C13223 * C297) *
               C13225) *
              C30933 * C30754 * C30736 * C110 -
          ((C13227 * C287 + C13223 * C299 + C13226 * C284 + C13222 * C297) *
               C13225 +
           (C13227 * C269 + C13223 * C288 + C13226 * C267 + C13222 * C283) *
               C13229 +
           (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
               C13224 +
           (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
               C13228) *
              C30933 * C30754 * C30736 * C111 +
          ((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
               C13228 +
           (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
               C13224 +
           (C13226 * C269 + C13222 * C288 + C13227 * C558 + C13223 * C559) *
               C13229 +
           (C13226 * C287 + C13222 * C299 + C13227 * C560 + C13223 * C561) *
               C13225) *
              C30933 * C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31058 -
           ((C13227 * C821 + C13223 * C828 + C13226 * C820 + C13222 * C827) *
                C13225 +
            (C13227 * C813 + C13223 * C818 + C13226 * C812 + C13222 * C817) *
                C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C13226 * C1152 + C13222 * C1164 + C13227 * C1151 +
             C13223 * C1163) *
                C13229 +
            (C13226 * C1161 + C13222 * C1179 + C13227 * C1160 +
             C13223 * C1178) *
                C13225) *
               C30933 * C31023) *
              C30736 * C258 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C13226 * C813 + C13222 * C818 + C13227 * C814 + C13223 * C819) *
                C13229 +
            (C13226 * C821 + C13222 * C828 + C13227 * C822 + C13223 * C829) *
                C13225) *
               C30933 * C31047 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C31058 -
           ((C13227 * C1159 + C13223 * C1177 + C13226 * C1160 +
             C13222 * C1178) *
                C13225 +
            (C13227 * C1150 + C13223 * C1162 + C13226 * C1151 +
             C13222 * C1163) *
                C13229 +
            (C13227 * C435 + C13223 * C449 + C13226 * C434 + C13222 * C448) *
                C13224 +
            (C13227 * C419 + C13223 * C432 + C13226 * C418 + C13222 * C431) *
                C13228) *
               C30933 * C31023) *
              C30736 * C259 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C31058 -
           ((C13227 * C823 + C13223 * C830 + C13226 * C822 + C13222 * C829) *
                C13225 +
            (C13227 * C815 + C13223 * C824 + C13226 * C814 + C13222 * C819) *
                C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C419 + C13222 * C432 + C13227 * C421 + C13223 * C439) *
                C13228 +
            (C13226 * C435 + C13222 * C449 + C13227 * C438 + C13223 * C451) *
                C13224 +
            (C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
             C13223 * C2015) *
                C13229 +
            (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
             C13223 * C2017) *
                C13225) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C942 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C943 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31054 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C943 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C942 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C942 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C943 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
              C30933 * C30754 * C1010 -
          ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
           (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
              C30933 * C30754 * C1011 +
          ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
           (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
              C30933 * C30754 * C1012 -
          ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
           (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
              C30933 * C30754 * C1013 +
          ((C14348 + C14347) * C13228 + (C14346 + C14345) * C13224 +
           (C13226 * C5399 + C13222 * C5402 + C13227 * C5663 + C13223 * C5664) *
               C13229 +
           (C13226 * C5401 + C13222 * C5405 + C13227 * C5665 + C13223 * C5666) *
               C13225) *
              C30933 * C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C31058 -
           ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C31047 +
           ((C13226 * C417 + C13222 * C430 + C13227 * C418 + C13223 * C431) *
                C13228 +
            (C13226 * C433 + C13222 * C447 + C13227 * C434 + C13223 * C448) *
                C13224 +
            (C14519 + C14520) * C13229 + (C14521 + C14522) * C13225) *
               C30933 * C31023) *
              C942 +
          (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
            (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
               C30933 * C31047 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C31058 -
           ((C14527 + C14528) * C13225 + (C14529 + C14530) * C13229 +
            (C14522 + C14521) * C13224 + (C14520 + C14519) * C13228) *
               C30933 * C31023) *
              C943 +
          (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
               C30933 * C31058 -
           ((C13227 * C1549 + C13223 * C1552 + C13226 * C1548 +
             C13222 * C1551) *
                C13225 +
            (C13227 * C1543 + C13223 * C1546 + C13226 * C1542 +
             C13222 * C1545) *
                C13229 +
            (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
               C30933 * C31047 +
           ((C14530 + C14529) * C13228 + (C14528 + C14527) * C13224 +
            (C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
             C13223 * C6378) *
                C13229 +
            (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
             C13223 * C6380) *
                C13225) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30990 -
           ((C13227 * C821 + C13223 * C828 + C13226 * C820 + C13222 * C827) *
                C13225 +
            (C13227 * C813 + C13223 * C818 + C13226 * C812 + C13222 * C817) *
                C13229 +
            (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                C13224 +
            (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                C13228) *
               C30933 * C30841) *
              C30736 * C554 +
          (((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                C13228 +
            (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                C13224 +
            (C13226 * C813 + C13222 * C818 + C13227 * C814 + C13223 * C819) *
                C13229 +
            (C13226 * C821 + C13222 * C828 + C13227 * C822 + C13223 * C829) *
                C13225) *
               C30933 * C30841 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30990) *
              C30736 * C555 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30990 -
           ((C13227 * C823 + C13223 * C830 + C13226 * C822 + C13222 * C829) *
                C13225 +
            (C13227 * C815 + C13223 * C824 + C13226 * C814 + C13222 * C819) *
                C13229 +
            (C13227 * C437 + C13223 * C450 + C13226 * C424 + C13222 * C444) *
                C13224 +
            (C13227 * C420 + C13223 * C436 + C13226 * C414 + C13222 * C427) *
                C13228) *
               C30933 * C30841) *
              C30736 * C556 +
          (((C13226 * C420 + C13222 * C436 + C13227 * C422 + C13223 * C441) *
                C13228 +
            (C13226 * C437 + C13222 * C450 + C13227 * C440 + C13223 * C452) *
                C13224 +
            (C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                C13229 +
            (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                C13225) *
               C30933 * C30841 -
           ((C13736 + C13735) * C13225 + (C13734 + C13733) * C13229 +
            (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C13224 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C13228) *
               C30933 * C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C13228 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C13224 +
             (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
                C30933 * C30990 -
            ((C14085 + C14086) * C13225 + (C14087 + C14088) * C13229 +
             (C13227 * C425 + C13223 * C445 + C13226 * C426 + C13222 * C446) *
                 C13224 +
             (C13227 * C415 + C13223 * C428 + C13226 * C416 + C13222 * C429) *
                 C13228) *
                C30933 * C30841) *
               C942 +
           (((C14088 + C14087) * C13228 + (C14086 + C14085) * C13224 +
             (C14523 + C14524) * C13229 + (C14525 + C14526) * C13225) *
                C30933 * C30841 -
            ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
             (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
                C30933 * C30990) *
               C943 +
           (((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
             (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
                C30933 * C30990 -
            ((C13227 * C1549 + C13223 * C1552 + C13226 * C1548 +
              C13222 * C1551) *
                 C13225 +
             (C13227 * C1543 + C13223 * C1546 + C13226 * C1542 +
              C13222 * C1545) *
                 C13229 +
             (C14526 + C14525) * C13224 + (C14524 + C14523) * C13228) *
                C30933 * C30841) *
               C31020) *
              C30975 +
          ((((C13226 * C415 + C13222 * C428 + C13227 * C414 + C13223 * C427) *
                 C13228 +
             (C13226 * C425 + C13222 * C445 + C13227 * C424 + C13223 * C444) *
                 C13224 +
             (C14089 + C14090) * C13229 + (C14091 + C14092) * C13225) *
                C30933 * C30841 -
            ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
             (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C13224 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C13228) *
                C30933 * C30990) *
               C942 +
           (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
             (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
                C30933 * C30990 -
            ((C14875 + C14876) * C13225 + (C14877 + C14878) * C13229 +
             (C14092 + C14091) * C13224 + (C14090 + C14089) * C13228) *
                C30933 * C30841) *
               C943 +
           (((C14878 + C14877) * C13228 + (C14876 + C14875) * C13224 +
             (C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C13229 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C13225) *
                C30933 * C30841 -
            ((C14669 + C14670) * C13225 + (C14671 + C14672) * C13229 +
             (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
                C30933 * C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13226 * C263 + C13222 * C276 + C13227 * C262 + C13223 * C275) *
               C13229 +
           (C13226 * C273 + C13222 * C293 + C13227 * C272 + C13223 * C292) *
               C13225) *
              C30933 * C30754 * C30736 * C108 -
          ((C13227 * C271 + C13223 * C291 + C13226 * C272 + C13222 * C292) *
               C13225 +
           (C13227 * C261 + C13223 * C274 + C13226 * C262 + C13222 * C275) *
               C13229 +
           (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
               C13224 +
           (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
               C13228) *
              C30933 * C30754 * C30736 * C109 +
          ((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
               C13228 +
           (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
               C13224 +
           (C13226 * C261 + C13222 * C274 + C13227 * C267 + C13223 * C283) *
               C13229 +
           (C13226 * C271 + C13222 * C291 + C13227 * C284 + C13223 * C297) *
               C13225) *
              C30933 * C30754 * C30736 * C110 -
          ((C13227 * C287 + C13223 * C299 + C13226 * C284 + C13222 * C297) *
               C13225 +
           (C13227 * C269 + C13223 * C288 + C13226 * C267 + C13222 * C283) *
               C13229 +
           (C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
               C13224 +
           (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
               C13228) *
              C30933 * C30754 * C30736 * C111 +
          ((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
               C13228 +
           (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
               C13224 +
           (C13226 * C269 + C13222 * C288 + C13227 * C558 + C13223 * C559) *
               C13229 +
           (C13226 * C287 + C13222 * C299 + C13227 * C560 + C13223 * C561) *
               C13225) *
              C30933 * C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C258 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C31045 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C31057 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C259 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C31057 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C31045 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C13228 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C13224 +
            (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
               C30933 * C30754 * C942 -
           ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
            (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
               C30933 * C30754 * C943 +
           ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
            (C13226 * C1018 + C13222 * C1027 + C13227 * C1017 +
             C13223 * C1026) *
                C13229 +
            (C13226 * C1024 + C13222 * C1036 + C13227 * C1023 +
             C13223 * C1035) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31054 +
          (((C13433 + C13434) * C13228 + (C13435 + C13436) * C13224 +
            (C13437 + C13438) * C13229 + (C13439 + C13440) * C13225) *
               C30933 * C30754 * C943 -
           ((C13436 + C13435) * C13225 + (C13434 + C13433) * C13229 +
            (C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C13224 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C13228) *
               C30933 * C30754 * C942 -
           ((C13227 * C1022 + C13223 * C1034 + C13226 * C1023 +
             C13222 * C1035) *
                C13225 +
            (C13227 * C1016 + C13223 * C1025 + C13226 * C1017 +
             C13222 * C1026) *
                C13229 +
            (C13440 + C13439) * C13224 + (C13438 + C13437) * C13228) *
               C30933 * C30754 * C31020) *
              C31041 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C13228 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C13224 +
            (C13441 + C13442) * C13229 + (C13443 + C13444) * C13225) *
               C30933 * C30754 * C942 -
           ((C13445 + C13446) * C13225 + (C13447 + C13448) * C13229 +
            (C13444 + C13443) * C13224 + (C13442 + C13441) * C13228) *
               C30933 * C30754 * C943 +
           ((C13448 + C13447) * C13228 + (C13446 + C13445) * C13224 +
            (C13226 * C1016 + C13222 * C1025 + C13227 * C1290 +
             C13223 * C1291) *
                C13229 +
            (C13226 * C1022 + C13222 * C1034 + C13227 * C1292 +
             C13223 * C1293) *
                C13225) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
               C13228 +
           (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
               C13224 +
           (C13425 + C13426) * C13229 + (C13427 + C13428) * C13225) *
              C30933 * C30754 * C1010 -
          ((C13429 + C13430) * C13225 + (C13431 + C13432) * C13229 +
           (C13428 + C13427) * C13224 + (C13426 + C13425) * C13228) *
              C30933 * C30754 * C1011 +
          ((C13432 + C13431) * C13228 + (C13430 + C13429) * C13224 +
           (C14341 + C14342) * C13229 + (C14343 + C14344) * C13225) *
              C30933 * C30754 * C1012 -
          ((C14345 + C14346) * C13225 + (C14347 + C14348) * C13229 +
           (C14344 + C14343) * C13224 + (C14342 + C14341) * C13228) *
              C30933 * C30754 * C1013 +
          ((C14348 + C14347) * C13228 + (C14346 + C14345) * C13224 +
           (C13226 * C5399 + C13222 * C5402 + C13227 * C5663 + C13223 * C5664) *
               C13229 +
           (C13226 * C5401 + C13222 * C5405 + C13227 * C5665 + C13223 * C5666) *
               C13225) *
              C30933 * C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C30795 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C30802 +
                   ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30754 * C2700) *
                      C30713 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C30802 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C30795 -
                   ((C25994 + C25993 + C25992 + C25991) * C18919 +
                    (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                     C4718 * C13228) *
                        C18918) *
                       C30754 * C2700) *
                      C30722 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30754 * C30795 -
                   ((C25280 + C25279 + C25278 + C25277) * C18919 +
                    (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                     C4722 * C13228) *
                        C18918) *
                       C30754 * C30802 +
                   ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
                     C4726 * C13225) *
                        C18918 +
                    (C5225 * C13228 + C5224 * C13224 +
                     (C4559 * C1544 + C30682 * C1547) * C13229 +
                     (C4559 * C1550 + C30682 * C1553) * C13225) *
                        C18919) *
                       C30754 * C2700) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C30795 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C30802 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C30990 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C2700) *
                      C2440 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C30795 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30802 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C30990) *
                       C2700) *
                      C30719)) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C31064 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C31060 +
                   ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30754 * C31050 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30754 * C31030) *
                      C2440 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C31060 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C31064 -
                   ((C25994 + C25993 + C25992 + C25991) * C18919 +
                    (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                     C4718 * C13228) *
                        C18918) *
                       C30754 * C31050 +
                   ((C4720 * C13228 + C4721 * C13224 + C5673 * C13229 +
                     C5672 * C13225) *
                        C18918 +
                    (C5829 * C13228 + C5828 * C13224 +
                     (C4559 * C5819 + C30682 * C5820) * C13229 +
                     (C4559 * C5821 + C30682 * C5822) * C13225) *
                        C18919) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C2332 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C31063 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C30799 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C2332) *
                      C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30754 * C2332 -
                   ((C25280 + C25279 + C25278 + C25277) * C18919 +
                    (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                     C4722 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C31043 +
                  (((C4944 * C13228 + C4945 * C13224 + C4946 * C13229 +
                     C4947 * C13225) *
                        C18918 +
                    (C24939 * C13228 + C24940 * C13224 +
                     (C4559 * C1440 + C30682 * C1441) * C13229 +
                     (C4559 * C1442 + C30682 * C1443) * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C31058 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C31047 +
                    ((C24788 + C24787 + C24786 + C24785) * C18918 +
                     (C26503 + C26504 + C26505 + C26506) * C18919) *
                        C31023) *
                       C2332 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C31047 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C31058 -
                    ((C26973 + C26974 + C26975 + C26976) * C18919 +
                     (C25658 + C25657 + C25656 + C25655) * C18918) *
                        C31023) *
                       C30799) *
                      C2440 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C31047 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C31058 -
                    ((C26839 + C26840 + C26841 + C26842) * C18919 +
                     (C24796 + C24795 + C24794 + C24793) * C18918) *
                        C31023) *
                       C2332 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C31058 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C31047 +
                    ((C26708 + C26707 + C26706 + C26705) * C18918 +
                     (C10684 * C13228 + C10683 * C13224 +
                      (C4559 * C6491 + C30682 * C6492) * C13229 +
                      (C4559 * C6493 + C30682 * C6494) * C13225) *
                         C18919) *
                        C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C30713 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C2332 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C30722 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C30990 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C2332 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C31063 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C30799 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C2332) *
                      C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30754 * C2332 -
                   ((C25280 + C25279 + C25278 + C25277) * C18919 +
                    (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                     C4722 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C31043 +
                  (((C4944 * C13228 + C4945 * C13224 + C4946 * C13229 +
                     C4947 * C13225) *
                        C18918 +
                    (C24939 * C13228 + C24940 * C13224 +
                     (C4559 * C1440 + C30682 * C1441) * C13229 +
                     (C4559 * C1442 + C30682 * C1443) * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C31064 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C31060 +
                   ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30754 * C31050 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30754 * C31030) *
                      C2440 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C31060 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C31064 -
                   ((C25994 + C25993 + C25992 + C25991) * C18919 +
                    (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                     C4718 * C13228) *
                        C18918) *
                       C30754 * C31050 +
                   ((C4720 * C13228 + C4721 * C13224 + C5673 * C13229 +
                     C5672 * C13225) *
                        C18918 +
                    (C5829 * C13228 + C5828 * C13224 +
                     (C4559 * C5819 + C30682 * C5820) * C13229 +
                     (C4559 * C5821 + C30682 * C5822) * C13225) *
                        C18919) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C30795 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C30802 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C3094 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C2700) *
                      C30975 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C30795 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30802 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C3094) *
                       C2700) *
                      C30719)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30837 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30844 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C3602) *
                      C30795 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C30844 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30837 -
                   ((C26973 + C26974 + C26975 + C26976) * C18919 +
                    (C25658 + C25657 + C25656 + C25655) * C18918) *
                       C3602) *
                      C30802 +
                  (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30837 -
                   ((C25663 + C25664 + C25665 + C25666) * C18919 +
                    (C25662 + C25661 + C25660 + C25659) * C18918) *
                       C30844 +
                   ((C25666 + C25665 + C25664 + C25663) * C18918 +
                    (C6607 * C13228 + C6606 * C13224 +
                     (C4559 * C6593 + C30682 * C6594) * C13229 +
                     (C4559 * C6595 + C30682 * C6596) * C13225) *
                        C18919) *
                       C3602) *
                      C2700) *
                 C30708) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C3094 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C31064 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C30841 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C3094) *
                      C31060 +
                  (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C3094 -
                   ((C25663 + C25664 + C25665 + C25666) * C18919 +
                    (C25662 + C25661 + C25660 + C25659) * C18918) *
                       C30841) *
                      C31050 +
                  (((C26125 + C26126 + C26127 + C26128) * C18918 +
                    (C5565 * C13228 + C5564 * C13224 +
                     (C4559 * C5531 + C30682 * C5536) * C13229 +
                     (C4559 * C5537 + C30682 * C5540) * C13225) *
                        C18919) *
                       C30841 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C3094) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C31054 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C2332 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C31041 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C3094 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C31065 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C31062 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C31053 -
                   ((C26507 + C26508 + C26509 + C26510) * C18919 +
                    (C26506 + C26505 + C26504 + C26503) * C18918) *
                       C31036) *
                      C2332 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C31062 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C31065 -
                   ((C26973 + C26974 + C26975 + C26976) * C18919 +
                    (C25658 + C25657 + C25656 + C25655) * C18918) *
                       C31053 +
                   ((C26976 + C26975 + C26974 + C26973) * C18918 +
                    (C10906 * C13228 + C10905 * C13224 +
                     (C4559 * C6221 + C30682 * C6226) * C13229 +
                     (C4559 * C6227 + C30682 * C6230) * C13225) *
                        C18919) *
                       C31036) *
                      C30799) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30837 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30844 +
                    ((C24788 + C24787 + C24786 + C24785) * C18918 +
                     (C26503 + C26504 + C26505 + C26506) * C18919) *
                        C3602) *
                       C2332 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30844 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30837 -
                    ((C26973 + C26974 + C26975 + C26976) * C18919 +
                     (C25658 + C25657 + C25656 + C25655) * C18918) *
                        C3602) *
                       C30799) *
                      C30975 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30844 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30837 -
                    ((C26839 + C26840 + C26841 + C26842) * C18919 +
                     (C24796 + C24795 + C24794 + C24793) * C18918) *
                        C3602) *
                       C2332 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30837 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30844 +
                    ((C26708 + C26707 + C26706 + C26705) * C18918 +
                     (C10684 * C13228 + C10683 * C13224 +
                      (C4559 * C6491 + C30682 * C6492) * C13229 +
                      (C4559 * C6493 + C30682 * C6494) * C13225) *
                         C18919) *
                        C3602) *
                       C30799) *
                      C30719)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C31054 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C2332 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C31041 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C3094 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C2332 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C3094 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C31064 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C30841 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C3094) *
                      C31060 +
                  (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C3094 -
                   ((C25663 + C25664 + C25665 + C25666) * C18919 +
                    (C25662 + C25661 + C25660 + C25659) * C18918) *
                       C30841) *
                      C31050 +
                  (((C26125 + C26126 + C26127 + C26128) * C18918 +
                    (C5565 * C13228 + C5564 * C13224 +
                     (C4559 * C5531 + C30682 * C5536) * C13229 +
                     (C4559 * C5537 + C30682 * C5540) * C13225) *
                        C18919) *
                       C30841 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C3094) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C1284 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C1285 +
                   ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30754 * C1286 -
                   ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 +
                     C5562 * C13228) *
                        C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30754 * C31030) *
                      C30975 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C1285 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C1284 -
                   ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
                     C5222 * C13228) *
                        C18919 +
                    (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                     C4718 * C13228) *
                        C18918) *
                       C30754 * C1286 +
                   ((C4720 * C13228 + C4721 * C13224 + C5673 * C13229 +
                     C5672 * C13225) *
                        C18918 +
                    (C5829 * C13228 + C5828 * C13224 +
                     (C4559 * C5819 + C30682 * C5820) * C13229 +
                     (C4559 * C5821 + C30682 * C5822) * C13225) *
                        C18919) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C30989 -
                   ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
                     C5219 * C13228) *
                        C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C554 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
                     C5223 * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C30989) *
                      C555 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30754 * C30989 -
                   ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
                     C5227 * C13228) *
                        C18919 +
                    (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                     C4722 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C556 +
                  (((C4944 * C13228 + C4945 * C13224 + C4946 * C13229 +
                     C4947 * C13225) *
                        C18918 +
                    (C24939 * C13228 + C24940 * C13224 +
                     (C4559 * C1440 + C30682 * C1441) * C13229 +
                     (C4559 * C1442 + C30682 * C1443) * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C24940 * C13225 + C24939 * C13229 + C9407 * C13224 +
                     C9406 * C13228) *
                        C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C1664 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C1665 +
                    ((C24788 + C24787 + C24786 + C24785) * C18918 +
                     (C26503 + C26504 + C26505 + C26506) * C18919) *
                        C31023) *
                       C30989 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C1665 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C1664 -
                    ((C6606 * C13225 + C6607 * C13229 + C6608 * C13224 +
                      C6609 * C13228) *
                         C18919 +
                     (C25658 + C25657 + C25656 + C25655) * C18918) *
                        C31023) *
                       C30799) *
                      C30975 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C1665 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C1664 -
                    ((C10683 * C13225 + C10684 * C13229 + C9174 * C13224 +
                      C9173 * C13228) *
                         C18919 +
                     (C24796 + C24795 + C24794 + C24793) * C18918) *
                        C31023) *
                       C30989 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C1664 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C1665 +
                    ((C26708 + C26707 + C26706 + C26705) * C18918 +
                     (C10684 * C13228 + C10683 * C13224 +
                      (C4559 * C6491 + C30682 * C6492) * C13229 +
                      (C4559 * C6493 + C30682 * C6494) * C13225) *
                         C18919) *
                        C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30990 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C1284 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C30841 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30990) *
                      C1285 +
                  (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30990 -
                   ((C25663 + C25664 + C25665 + C25666) * C18919 +
                    (C25662 + C25661 + C25660 + C25659) * C18918) *
                       C30841) *
                      C1286 +
                  (((C26125 + C26126 + C26127 + C26128) * C18918 +
                    (C5565 * C13228 + C5564 * C13224 +
                     (C4559 * C5531 + C30682 * C5536) * C13229 +
                     (C4559 * C5537 + C30682 * C5540) * C13225) *
                        C18919) *
                       C30841 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30990) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C5558 * C13228 + C5559 * C13224 + C5560 * C13229 +
                      C5561 * C13225) *
                         C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C258 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C30989 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C6390 * C13225 + C6391 * C13229 + C6392 * C13224 +
                      C6393 * C13228) *
                         C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C259 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C30990 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C2116 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C2117 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C2118 -
                   ((C26507 + C26508 + C26509 + C26510) * C18919 +
                    (C26506 + C26505 + C26504 + C26503) * C18918) *
                       C31036) *
                      C30989 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C2117 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C2116 -
                   ((C26973 + C26974 + C26975 + C26976) * C18919 +
                    (C25658 + C25657 + C25656 + C25655) * C18918) *
                       C2118 +
                   ((C26976 + C26975 + C26974 + C26973) * C18918 +
                    (C10906 * C13228 + C10905 * C13224 +
                     (C4559 * C6221 + C30682 * C6226) * C13229 +
                     (C4559 * C6227 + C30682 * C6230) * C13225) *
                        C18919) *
                       C31036) *
                      C30799) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C4559 * C117 + C30682 * C124) * C13228 +
                (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                C4711 * C13225) *
                   C18918 +
               (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 +
                C5218 * C13225) *
                   C18919) *
                  C30754 * C30736 * C108 -
              ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 +
                C9169 * C13228) *
                   C18919 +
               (C4717 * C13225 + C4716 * C13229 +
                (C4559 * C128 + C30682 * C139) * C13224 +
                (C4559 * C118 + C30682 * C125) * C13228) *
                   C18918) *
                  C30754 * C30736 * C109 +
              (((C4559 * C119 + C30682 * C126) * C13228 +
                (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                C4723 * C13225) *
                   C18918 +
               (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 +
                C5226 * C13225) *
                   C18919) *
                  C30754 * C30736 * C110 -
              (((C4559 * C823 + C30682 * C830) * C13225 +
                (C4559 * C815 + C30682 * C824) * C13229 + C9407 * C13224 +
                C9406 * C13228) *
                   C18919 +
               (C4945 * C13225 + C4944 * C13229 +
                (C4559 * C130 + C30682 * C141) * C13224 +
                (C4559 * C120 + C30682 * C131) * C13228) *
                   C18918) *
                  C30754 * C30736 * C111 +
              (((C4559 * C121 + C30682 * C132) * C13228 +
                (C4559 * C133 + C30682 * C142) * C13224 +
                (C4559 * C269 + C30682 * C288) * C13229 +
                (C4559 * C287 + C30682 * C299) * C13225) *
                   C18918 +
               ((C4559 * C422 + C30682 * C441) * C13228 +
                (C4559 * C440 + C30682 * C452) * C13224 +
                (C4559 * C816 + C30682 * C825) * C13229 +
                (C4559 * C826 + C30682 * C831) * C13225) *
                   C18919) *
                  C30754 * C30736 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C4559 * C117 + C30682 * C124) * C13228 +
                 (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                 C4711 * C13225) *
                    C18918 +
                (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 +
                 C5218 * C13225) *
                    C18919) *
                   C30754 * C31057 -
               ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
                 C5219 * C13228) *
                    C18919 +
                (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                 C4710 * C13228) *
                    C18918) *
                   C30754 * C31045 +
               ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                 C4714 * C13225) *
                    C18918 +
                (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
                 C5563 * C13225) *
                    C18919) *
                   C30754 * C31020) *
                  C258 +
              (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                 C4719 * C13225) *
                    C18918 +
                (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
                 C5223 * C13225) *
                    C18919) *
                   C30754 * C31045 -
               ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 +
                 C9169 * C13228) *
                    C18919 +
                (C4717 * C13225 + C4716 * C13229 +
                 (C4559 * C128 + C30682 * C139) * C13224 +
                 (C4559 * C118 + C30682 * C125) * C13228) *
                    C18918) *
                   C30754 * C31057 -
               ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
                 C5222 * C13228) *
                    C18919 +
                (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                 C4718 * C13228) *
                    C18918) *
                   C30754 * C31020) *
                  C259 +
              ((((C4559 * C119 + C30682 * C126) * C13228 +
                 (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                 C4723 * C13225) *
                    C18918 +
                (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 +
                 C5226 * C13225) *
                    C18919) *
                   C30754 * C31057 -
               ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
                 C5227 * C13228) *
                    C18919 +
                (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                 C4722 * C13228) *
                    C18918) *
                   C30754 * C31045 +
               ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
                 C4726 * C13225) *
                    C18918 +
                (C5225 * C13228 + C5224 * C13224 +
                 (C4559 * C1544 + C30682 * C1547) * C13229 +
                 (C4559 * C1550 + C30682 * C1553) * C13225) *
                    C18919) *
                   C30754 * C31020) *
                  C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C31058 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C31047 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C30736 * C258 +
          (((C24789 + C24790 + C24791 + C24792) * C18918 +
            (C24793 + C24794 + C24795 + C24796) * C18919) *
               C31047 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C31058 -
           ((C10683 * C13225 + C10684 * C13229 + C9174 * C13224 +
             C9173 * C13228) *
                C18919 +
            (C24796 + C24795 + C24794 + C24793) * C18918) *
               C31023) *
              C30736 * C259 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C31058 -
           ((C24801 + C24802 + C24803 + C24804) * C18919 +
            (C24800 + C24799 + C24798 + C24797) * C18918) *
               C31047 +
           ((C24804 + C24803 + C24802 + C24801) * C18918 +
            (C9180 * C13228 + C9179 * C13224 +
             (C4559 * C2224 + C30682 * C2227) * C13229 +
             (C4559 * C2230 + C30682 * C2233) * C13225) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C30754 * C942 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C31054 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C25273 + C25274 + C25275 + C25276) * C18919) *
               C30754 * C943 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C942 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C30754 * C942 -
           ((C25280 + C25279 + C25278 + C25277) * C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C24781 + C24782 + C24783 + C24784) * C18919) *
              C30754 * C1010 -
          ((C25272 + C25271 + C25270 + C25269) * C18919 +
           (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 + C4710 * C13228) *
               C18918) *
              C30754 * C1011 +
          ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 + C4714 * C13225) *
               C18918 +
           (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 + C5563 * C13225) *
               C18919) *
              C30754 * C1012 -
          ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 + C5562 * C13228) *
               C18919 +
           (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 + C4715 * C13228) *
               C18918) *
              C30754 * C1013 +
          ((C5416 * C13228 + C5417 * C13224 + C5419 * C13229 + C5418 * C13225) *
               C18918 +
           (C5937 * C13228 + C5936 * C13224 +
            (C4559 * C5927 + C30682 * C5928) * C13229 +
            (C4559 * C5929 + C30682 * C5930) * C13225) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C31058 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C31047 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C942 +
          (((C25269 + C25270 + C25271 + C25272) * C18918 +
            (C25655 + C25656 + C25657 + C25658) * C18919) *
               C31047 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C31058 -
           ((C6606 * C13225 + C6607 * C13229 + C6608 * C13224 +
             C6609 * C13228) *
                C18919 +
            (C25658 + C25657 + C25656 + C25655) * C18918) *
               C31023) *
              C943 +
          (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C25659 + C25660 + C25661 + C25662) * C18919) *
               C31058 -
           ((C25663 + C25664 + C25665 + C25666) * C18919 +
            (C25662 + C25661 + C25660 + C25659) * C18918) *
               C31047 +
           ((C25666 + C25665 + C25664 + C25663) * C18918 +
            (C6607 * C13228 + C6606 * C13224 +
             (C4559 * C6593 + C30682 * C6594) * C13229 +
             (C4559 * C6595 + C30682 * C6596) * C13225) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C1664 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C1665 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C30736 * C31054 +
          (((C24789 + C24790 + C24791 + C24792) * C18918 +
            (C24793 + C24794 + C24795 + C24796) * C18919) *
               C1665 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C1664 -
           ((C10683 * C13225 + C10684 * C13229 + C9174 * C13224 +
             C9173 * C13228) *
                C18919 +
            (C24796 + C24795 + C24794 + C24793) * C18918) *
               C31023) *
              C30736 * C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C1664 -
           ((C24801 + C24802 + C24803 + C24804) * C18919 +
            (C24800 + C24799 + C24798 + C24797) * C18918) *
               C1665 +
           ((C24804 + C24803 + C24802 + C24801) * C18918 +
            (C9180 * C13228 + C9179 * C13224 +
             (C4559 * C2224 + C30682 * C2227) * C13229 +
             (C4559 * C2230 + C30682 * C2233) * C13225) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C1664 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C1665 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C31057 +
          (((C25269 + C25270 + C25271 + C25272) * C18918 +
            (C25655 + C25656 + C25657 + C25658) * C18919) *
               C1665 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C1664 -
           ((C6606 * C13225 + C6607 * C13229 + C6608 * C13224 +
             C6609 * C13228) *
                C18919 +
            (C25658 + C25657 + C25656 + C25655) * C18918) *
               C31023) *
              C31045 +
          (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C25659 + C25660 + C25661 + C25662) * C18919) *
               C1664 -
           ((C25663 + C25664 + C25665 + C25666) * C18919 +
            (C25662 + C25661 + C25660 + C25659) * C18918) *
               C1665 +
           ((C25666 + C25665 + C25664 + C25663) * C18918 +
            (C6607 * C13228 + C6606 * C13224 +
             (C4559 * C6593 + C30682 * C6594) * C13229 +
             (C4559 * C6595 + C30682 * C6596) * C13225) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C24781 + C24782 + C24783 + C24784) * C18919) *
              C1839 -
          ((C24785 + C24786 + C24787 + C24788) * C18919 +
           (C24784 + C24783 + C24782 + C24781) * C18918) *
              C1840 +
          ((C24788 + C24787 + C24786 + C24785) * C18918 +
           (C26503 + C26504 + C26505 + C26506) * C18919) *
              C1841 -
          ((C26507 + C26508 + C26509 + C26510) * C18919 +
           (C26506 + C26505 + C26504 + C26503) * C18918) *
              C1842 +
          ((C26510 + C26509 + C26508 + C26507) * C18918 +
           (C10522 * C13228 + C10521 * C13224 +
            (C4559 * C10895 + C30682 * C10896) * C13229 +
            (C4559 * C10897 + C30682 * C10898) * C13225) *
               C18919) *
              C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C942 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C943 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C30990 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C31020) *
                      C30975 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C942 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C6390 * C13225 + C6391 * C13229 + C6392 * C13224 +
                      C6393 * C13228) *
                         C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C943 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C30990) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30990 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C30736 * C554 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C30841 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30990) *
                      C30736 * C555 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30990 -
                   ((C24801 + C24802 + C24803 + C24804) * C18919 +
                    (C24800 + C24799 + C24798 + C24797) * C18918) *
                       C30841) *
                      C30736 * C556 +
                  (((C25071 + C25072 + C25073 + C25074) * C18918 +
                    (C9408 * C13228 + C9409 * C13224 +
                     (C4559 * C2014 + C30682 * C2015) * C13229 +
                     (C4559 * C2016 + C30682 * C2017) * C13225) *
                        C18919) *
                       C30841 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30990) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C2116 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C2117 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C2118 -
                   ((C26507 + C26508 + C26509 + C26510) * C18919 +
                    (C26506 + C26505 + C26504 + C26503) * C18918) *
                       C31036) *
                      C30736 * C30975 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C2117 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C2116 -
                   ((C26839 + C26840 + C26841 + C26842) * C18919 +
                    (C24796 + C24795 + C24794 + C24793) * C18918) *
                       C2118 +
                   ((C26842 + C26841 + C26840 + C26839) * C18918 +
                    (C10795 * C13228 + C10794 * C13224 +
                     (C4559 * C10673 + C30682 * C10674) * C13229 +
                     (C4559 * C10675 + C30682 * C10676) * C13225) *
                        C18919) *
                       C31036) *
                      C30736 * C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 +
             C5218 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
             C5219 * C13228) *
                C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C258 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
             C5223 * C13225) *
                C18919) *
               C30754 * C31045 -
           ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 +
             C9169 * C13228) *
                C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C31057 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C259 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 +
             C5226 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
             C5227 * C13228) *
                C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 + C5218 * C13225) *
               C18919) *
              C30754 * C30736 * C108 -
          ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 + C9169 * C13228) *
               C18919 +
           (C4717 * C13225 + C4716 * C13229 +
            (C4559 * C128 + C30682 * C139) * C13224 +
            (C4559 * C118 + C30682 * C125) * C13228) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C4559 * C119 + C30682 * C126) * C13228 +
            (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
            C4723 * C13225) *
               C18918 +
           (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 + C5226 * C13225) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C4559 * C823 + C30682 * C830) * C13225 +
            (C4559 * C815 + C30682 * C824) * C13229 + C9407 * C13224 +
            C9406 * C13228) *
               C18919 +
           (C4945 * C13225 + C4944 * C13229 +
            (C4559 * C130 + C30682 * C141) * C13224 +
            (C4559 * C120 + C30682 * C131) * C13228) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C4559 * C121 + C30682 * C132) * C13228 +
            (C4559 * C133 + C30682 * C142) * C13224 +
            (C4559 * C269 + C30682 * C288) * C13229 +
            (C4559 * C287 + C30682 * C299) * C13225) *
               C18918 +
           ((C4559 * C422 + C30682 * C441) * C13228 +
            (C4559 * C440 + C30682 * C452) * C13224 +
            (C4559 * C816 + C30682 * C825) * C13229 +
            (C4559 * C826 + C30682 * C831) * C13225) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C30754 * C942 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C31054 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C25273 + C25274 + C25275 + C25276) * C18919) *
               C30754 * C943 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C942 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C30754 * C942 -
           ((C25280 + C25279 + C25278 + C25277) * C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C24781 + C24782 + C24783 + C24784) * C18919) *
              C30754 * C1010 -
          ((C25272 + C25271 + C25270 + C25269) * C18919 +
           (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 + C4710 * C13228) *
               C18918) *
              C30754 * C1011 +
          ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 + C4714 * C13225) *
               C18918 +
           (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 + C5563 * C13225) *
               C18919) *
              C30754 * C1012 -
          ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 + C5562 * C13228) *
               C18919 +
           (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 + C4715 * C13228) *
               C18918) *
              C30754 * C1013 +
          ((C5416 * C13228 + C5417 * C13224 + C5419 * C13229 + C5418 * C13225) *
               C18918 +
           (C5937 * C13228 + C5936 * C13224 +
            (C4559 * C5927 + C30682 * C5928) * C13229 +
            (C4559 * C5929 + C30682 * C5930) * C13225) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C1664 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C1665 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C30736 * C31054 +
          (((C24789 + C24790 + C24791 + C24792) * C18918 +
            (C24793 + C24794 + C24795 + C24796) * C18919) *
               C1665 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C1664 -
           ((C10683 * C13225 + C10684 * C13229 + C9174 * C13224 +
             C9173 * C13228) *
                C18919 +
            (C24796 + C24795 + C24794 + C24793) * C18918) *
               C31023) *
              C30736 * C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C1664 -
           ((C24801 + C24802 + C24803 + C24804) * C18919 +
            (C24800 + C24799 + C24798 + C24797) * C18918) *
               C1665 +
           ((C24804 + C24803 + C24802 + C24801) * C18918 +
            (C9180 * C13228 + C9179 * C13224 +
             (C4559 * C2224 + C30682 * C2227) * C13229 +
             (C4559 * C2230 + C30682 * C2233) * C13225) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C1664 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C1665 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C31057 +
          (((C25269 + C25270 + C25271 + C25272) * C18918 +
            (C25655 + C25656 + C25657 + C25658) * C18919) *
               C1665 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C1664 -
           ((C6606 * C13225 + C6607 * C13229 + C6608 * C13224 +
             C6609 * C13228) *
                C18919 +
            (C25658 + C25657 + C25656 + C25655) * C18918) *
               C31023) *
              C31045 +
          (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C25659 + C25660 + C25661 + C25662) * C18919) *
               C1664 -
           ((C25663 + C25664 + C25665 + C25666) * C18919 +
            (C25662 + C25661 + C25660 + C25659) * C18918) *
               C1665 +
           ((C25666 + C25665 + C25664 + C25663) * C18918 +
            (C6607 * C13228 + C6606 * C13224 +
             (C4559 * C6593 + C30682 * C6594) * C13229 +
             (C4559 * C6595 + C30682 * C6596) * C13225) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C30713 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C30989 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C30722 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C3094 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C3094) *
                       C30799) *
                      C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30837 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30844 +
                    ((C24788 + C24787 + C24786 + C24785) * C18918 +
                     (C26503 + C26504 + C26505 + C26506) * C18919) *
                        C3602) *
                       C30989 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30844 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30837 -
                    ((C26973 + C26974 + C26975 + C26976) * C18919 +
                     (C25658 + C25657 + C25656 + C25655) * C18918) *
                        C3602) *
                       C30799) *
                      C2440 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30844 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30837 -
                    ((C26839 + C26840 + C26841 + C26842) * C18919 +
                     (C24796 + C24795 + C24794 + C24793) * C18918) *
                        C3602) *
                       C30989 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30837 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30844 +
                    ((C26708 + C26707 + C26706 + C26705) * C18918 +
                     (C10684 * C13228 + C10683 * C13224 +
                      (C4559 * C6491 + C30682 * C6492) * C13229 +
                      (C4559 * C6493 + C30682 * C6494) * C13225) *
                         C18919) *
                        C3602) *
                       C30799) *
                      C30719)) /
                (p * q * std::sqrt(p + q));
    d2ee[42] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C31057 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C31045 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C3094 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C31020) *
                      C2440 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C31057 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C31045 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C3094) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C3094 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C30736 * C31063 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C30841 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C3094) *
                      C30736 * C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C3094 -
                   ((C24801 + C24802 + C24803 + C24804) * C18919 +
                    (C24800 + C24799 + C24798 + C24797) * C18918) *
                       C30841) *
                      C30736 * C31043 +
                  (((C25071 + C25072 + C25073 + C25074) * C18918 +
                    (C9408 * C13228 + C9409 * C13224 +
                     (C4559 * C2014 + C30682 * C2015) * C13229 +
                     (C4559 * C2016 + C30682 * C2017) * C13225) *
                        C18919) *
                       C30841 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C3094) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C31065 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C31062 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C31053 -
                   ((C26507 + C26508 + C26509 + C26510) * C18919 +
                    (C26506 + C26505 + C26504 + C26503) * C18918) *
                       C31036) *
                      C30736 * C2440 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C31062 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C31065 -
                   ((C26839 + C26840 + C26841 + C26842) * C18919 +
                    (C24796 + C24795 + C24794 + C24793) * C18918) *
                       C31053 +
                   ((C26842 + C26841 + C26840 + C26839) * C18918 +
                    (C10795 * C13228 + C10794 * C13224 +
                     (C4559 * C10673 + C30682 * C10674) * C13229 +
                     (C4559 * C10675 + C30682 * C10676) * C13225) *
                        C18919) *
                       C31036) *
                      C30736 * C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30837 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30844 +
                   ((C24788 + C24787 + C24786 + C24785) * C18918 +
                    (C26503 + C26504 + C26505 + C26506) * C18919) *
                       C3602) *
                      C30736 * C30713 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C30844 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30837 -
                   ((C26839 + C26840 + C26841 + C26842) * C18919 +
                    (C24796 + C24795 + C24794 + C24793) * C18918) *
                       C3602) *
                      C30736 * C30722 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30837 -
                   ((C24801 + C24802 + C24803 + C24804) * C18919 +
                    (C24800 + C24799 + C24798 + C24797) * C18918) *
                       C30844 +
                   ((C24804 + C24803 + C24802 + C24801) * C18918 +
                    (C9180 * C13228 + C9179 * C13224 +
                     (C4559 * C2224 + C30682 * C2227) * C13229 +
                     (C4559 * C2230 + C30682 * C2233) * C13225) *
                        C18919) *
                       C3602) *
                      C30736 * C2703)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C3094 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C30736 * C31063 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C30841 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C3094) *
                      C30736 * C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C3094 -
                   ((C24801 + C24802 + C24803 + C24804) * C18919 +
                    (C24800 + C24799 + C24798 + C24797) * C18918) *
                       C30841) *
                      C30736 * C31043 +
                  (((C25071 + C25072 + C25073 + C25074) * C18918 +
                    (C9408 * C13228 + C9409 * C13224 +
                     (C4559 * C2014 + C30682 * C2015) * C13229 +
                     (C4559 * C2016 + C30682 * C2017) * C13225) *
                        C18919) *
                       C30841 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C3094) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C3094 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C31057 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C3094) *
                       C31045 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C3094 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C31020) *
                      C2440 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C3094) *
                       C31057 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C3094 -
                    ((C26705 + C26706 + C26707 + C26708) * C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C31045 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C3094) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C30989 -
                   ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
                     C5219 * C13228) *
                        C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C554 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
                     C5223 * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C30989) *
                      C555 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30754 * C30989 -
                   ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
                     C5227 * C13228) *
                        C18919 +
                    (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                     C4722 * C13228) *
                        C18918) *
                       C30754 * C30799) *
                      C556 +
                  (((C4944 * C13228 + C4945 * C13224 + C4946 * C13229 +
                     C4947 * C13225) *
                        C18918 +
                    (C24939 * C13228 + C24940 * C13224 +
                     (C4559 * C1440 + C30682 * C1441) * C13229 +
                     (C4559 * C1442 + C30682 * C1443) * C13225) *
                        C18919) *
                       C30754 * C30799 -
                   ((C24940 * C13225 + C24939 * C13229 + C9407 * C13224 +
                     C9406 * C13228) *
                        C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30754 * C1284 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30754 * C1285 +
                   ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30754 * C1286 -
                   ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 +
                     C5562 * C13228) *
                        C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30754 * C31030) *
                      C30975 +
                  (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                     C4719 * C13225) *
                        C18918 +
                    (C25273 + C25274 + C25275 + C25276) * C18919) *
                       C30754 * C1285 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30754 * C1284 -
                   ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
                     C5222 * C13228) *
                        C18919 +
                    (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                     C4718 * C13228) *
                        C18918) *
                       C30754 * C1286 +
                   ((C4720 * C13228 + C4721 * C13224 + C5673 * C13229 +
                     C5672 * C13225) *
                        C18918 +
                    (C5829 * C13228 + C5828 * C13224 +
                     (C4559 * C5819 + C30682 * C5820) * C13229 +
                     (C4559 * C5821 + C30682 * C5822) * C13225) *
                        C18919) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C5558 * C13228 + C5559 * C13224 + C5560 * C13229 +
                      C5561 * C13225) *
                         C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C258 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C30989 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C6390 * C13225 + C6391 * C13229 + C6392 * C13224 +
                      C6393 * C13228) *
                         C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C30799) *
                      C259 +
                  (((((C4559 * C119 + C30682 * C126) * C13228 +
                      (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                      C4723 * C13225) *
                         C18918 +
                     (C24797 + C24798 + C24799 + C24800) * C18919) *
                        C30990 -
                    ((C24801 + C24802 + C24803 + C24804) * C18919 +
                     (C24800 + C24799 + C24798 + C24797) * C18918) *
                        C30841) *
                       C30989 +
                   (((C25277 + C25278 + C25279 + C25280) * C18918 +
                     (C9574 * C13228 + C9575 * C13224 +
                      (C4559 * C1158 + C30682 * C1173) * C13229 +
                      (C4559 * C1176 + C30682 * C1185) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25280 + C25279 + C25278 + C25277) * C18919 +
                     (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
                      C4722 * C13228) *
                         C18918) *
                        C30990) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30990 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C1284 +
                  (((C25269 + C25270 + C25271 + C25272) * C18918 +
                    (C25655 + C25656 + C25657 + C25658) * C18919) *
                       C30841 -
                   ((C25272 + C25271 + C25270 + C25269) * C18919 +
                    (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                     C4710 * C13228) *
                        C18918) *
                       C30990) *
                      C1285 +
                  (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                     C4714 * C13225) *
                        C18918 +
                    (C25659 + C25660 + C25661 + C25662) * C18919) *
                       C30990 -
                   ((C25663 + C25664 + C25665 + C25666) * C18919 +
                    (C25662 + C25661 + C25660 + C25659) * C18918) *
                       C30841) *
                      C1286 +
                  (((C26125 + C26126 + C26127 + C26128) * C18918 +
                    (C5565 * C13228 + C5564 * C13224 +
                     (C4559 * C5531 + C30682 * C5536) * C13229 +
                     (C4559 * C5537 + C30682 * C5540) * C13225) *
                        C18919) *
                       C30841 -
                   ((C26128 + C26127 + C26126 + C26125) * C18919 +
                    (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 +
                     C4715 * C13228) *
                        C18918) *
                       C30990) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 +
             C5218 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
             C5219 * C13228) *
                C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C258 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
             C5223 * C13225) *
                C18919) *
               C30754 * C31045 -
           ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 +
             C9169 * C13228) *
                C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C31057 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C259 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 +
             C5226 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
             C5227 * C13228) *
                C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 + C5218 * C13225) *
               C18919) *
              C30754 * C30736 * C108 -
          ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 + C9169 * C13228) *
               C18919 +
           (C4717 * C13225 + C4716 * C13229 +
            (C4559 * C128 + C30682 * C139) * C13224 +
            (C4559 * C118 + C30682 * C125) * C13228) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C4559 * C119 + C30682 * C126) * C13228 +
            (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
            C4723 * C13225) *
               C18918 +
           (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 + C5226 * C13225) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C4559 * C823 + C30682 * C830) * C13225 +
            (C4559 * C815 + C30682 * C824) * C13229 + C9407 * C13224 +
            C9406 * C13228) *
               C18919 +
           (C4945 * C13225 + C4944 * C13229 +
            (C4559 * C130 + C30682 * C141) * C13224 +
            (C4559 * C120 + C30682 * C131) * C13228) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C4559 * C121 + C30682 * C132) * C13228 +
            (C4559 * C133 + C30682 * C142) * C13224 +
            (C4559 * C269 + C30682 * C288) * C13229 +
            (C4559 * C287 + C30682 * C299) * C13225) *
               C18918 +
           ((C4559 * C422 + C30682 * C441) * C13228 +
            (C4559 * C440 + C30682 * C452) * C13224 +
            (C4559 * C816 + C30682 * C825) * C13229 +
            (C4559 * C826 + C30682 * C831) * C13225) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C31058 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C31047 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C30736 * C258 +
          (((C24789 + C24790 + C24791 + C24792) * C18918 +
            (C24793 + C24794 + C24795 + C24796) * C18919) *
               C31047 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C31058 -
           ((C10683 * C13225 + C10684 * C13229 + C9174 * C13224 +
             C9173 * C13228) *
                C18919 +
            (C24796 + C24795 + C24794 + C24793) * C18918) *
               C31023) *
              C30736 * C259 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C31058 -
           ((C24801 + C24802 + C24803 + C24804) * C18919 +
            (C24800 + C24799 + C24798 + C24797) * C18918) *
               C31047 +
           ((C24804 + C24803 + C24802 + C24801) * C18918 +
            (C9180 * C13228 + C9179 * C13224 +
             (C4559 * C2224 + C30682 * C2227) * C13229 +
             (C4559 * C2230 + C30682 * C2233) * C13225) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C30754 * C942 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C31054 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C25273 + C25274 + C25275 + C25276) * C18919) *
               C30754 * C943 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C942 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C30754 * C942 -
           ((C25280 + C25279 + C25278 + C25277) * C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C24781 + C24782 + C24783 + C24784) * C18919) *
              C30754 * C1010 -
          ((C25272 + C25271 + C25270 + C25269) * C18919 +
           (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 + C4710 * C13228) *
               C18918) *
              C30754 * C1011 +
          ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 + C4714 * C13225) *
               C18918 +
           (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 + C5563 * C13225) *
               C18919) *
              C30754 * C1012 -
          ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 + C5562 * C13228) *
               C18919 +
           (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 + C4715 * C13228) *
               C18918) *
              C30754 * C1013 +
          ((C5416 * C13228 + C5417 * C13224 + C5419 * C13229 + C5418 * C13225) *
               C18918 +
           (C5937 * C13228 + C5936 * C13224 +
            (C4559 * C5927 + C30682 * C5928) * C13229 +
            (C4559 * C5929 + C30682 * C5930) * C13225) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C31058 -
           ((C24785 + C24786 + C24787 + C24788) * C18919 +
            (C24784 + C24783 + C24782 + C24781) * C18918) *
               C31047 +
           ((C24788 + C24787 + C24786 + C24785) * C18918 +
            (C9168 * C13228 + C9167 * C13224 + C6609 * C13229 +
             C6608 * C13225) *
                C18919) *
               C31023) *
              C942 +
          (((C25269 + C25270 + C25271 + C25272) * C18918 +
            (C25655 + C25656 + C25657 + C25658) * C18919) *
               C31047 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C31058 -
           ((C6606 * C13225 + C6607 * C13229 + C6608 * C13224 +
             C6609 * C13228) *
                C18919 +
            (C25658 + C25657 + C25656 + C25655) * C18918) *
               C31023) *
              C943 +
          (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C25659 + C25660 + C25661 + C25662) * C18919) *
               C31058 -
           ((C25663 + C25664 + C25665 + C25666) * C18919 +
            (C25662 + C25661 + C25660 + C25659) * C18918) *
               C31047 +
           ((C25666 + C25665 + C25664 + C25663) * C18918 +
            (C6607 * C13228 + C6606 * C13224 +
             (C4559 * C6593 + C30682 * C6594) * C13229 +
             (C4559 * C6595 + C30682 * C6596) * C13225) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C13228 +
                     (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                     C4711 * C13225) *
                        C18918 +
                    (C24781 + C24782 + C24783 + C24784) * C18919) *
                       C30990 -
                   ((C24785 + C24786 + C24787 + C24788) * C18919 +
                    (C24784 + C24783 + C24782 + C24781) * C18918) *
                       C30841) *
                      C30736 * C554 +
                  (((C24789 + C24790 + C24791 + C24792) * C18918 +
                    (C24793 + C24794 + C24795 + C24796) * C18919) *
                       C30841 -
                   ((C24792 + C24791 + C24790 + C24789) * C18919 +
                    (C4717 * C13225 + C4716 * C13229 +
                     (C4559 * C128 + C30682 * C139) * C13224 +
                     (C4559 * C118 + C30682 * C125) * C13228) *
                        C18918) *
                       C30990) *
                      C30736 * C555 +
                  ((((C4559 * C119 + C30682 * C126) * C13228 +
                     (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
                     C4723 * C13225) *
                        C18918 +
                    (C24797 + C24798 + C24799 + C24800) * C18919) *
                       C30990 -
                   ((C24801 + C24802 + C24803 + C24804) * C18919 +
                    (C24800 + C24799 + C24798 + C24797) * C18918) *
                       C30841) *
                      C30736 * C556 +
                  (((C25071 + C25072 + C25073 + C25074) * C18918 +
                    (C9408 * C13228 + C9409 * C13224 +
                     (C4559 * C2014 + C30682 * C2015) * C13229 +
                     (C4559 * C2016 + C30682 * C2017) * C13225) *
                        C18919) *
                       C30841 -
                   ((C25074 + C25073 + C25072 + C25071) * C18919 +
                    (C4945 * C13225 + C4944 * C13229 +
                     (C4559 * C130 + C30682 * C141) * C13224 +
                     (C4559 * C120 + C30682 * C131) * C13228) *
                        C18918) *
                       C30990) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C13228 +
                      (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
                      C4711 * C13225) *
                         C18918 +
                     (C24781 + C24782 + C24783 + C24784) * C18919) *
                        C30990 -
                    ((C24785 + C24786 + C24787 + C24788) * C18919 +
                     (C24784 + C24783 + C24782 + C24781) * C18918) *
                        C30841) *
                       C942 +
                   (((C25269 + C25270 + C25271 + C25272) * C18918 +
                     (C25655 + C25656 + C25657 + C25658) * C18919) *
                        C30841 -
                    ((C25272 + C25271 + C25270 + C25269) * C18919 +
                     (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
                      C4710 * C13228) *
                         C18918) *
                        C30990) *
                       C943 +
                   (((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
                      C4714 * C13225) *
                         C18918 +
                     (C25659 + C25660 + C25661 + C25662) * C18919) *
                        C30990 -
                    ((C25663 + C25664 + C25665 + C25666) * C18919 +
                     (C25662 + C25661 + C25660 + C25659) * C18918) *
                        C30841) *
                       C31020) *
                      C30975 +
                  ((((C24789 + C24790 + C24791 + C24792) * C18918 +
                     (C24793 + C24794 + C24795 + C24796) * C18919) *
                        C30841 -
                    ((C24792 + C24791 + C24790 + C24789) * C18919 +
                     (C4717 * C13225 + C4716 * C13229 +
                      (C4559 * C128 + C30682 * C139) * C13224 +
                      (C4559 * C118 + C30682 * C125) * C13228) *
                         C18918) *
                        C30990) *
                       C942 +
                   (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
                      C4719 * C13225) *
                         C18918 +
                     (C25273 + C25274 + C25275 + C25276) * C18919) *
                        C30990 -
                    ((C6390 * C13225 + C6391 * C13229 + C6392 * C13224 +
                      C6393 * C13228) *
                         C18919 +
                     (C25276 + C25275 + C25274 + C25273) * C18918) *
                        C30841) *
                       C943 +
                   (((C25991 + C25992 + C25993 + C25994) * C18918 +
                     (C6391 * C13228 + C6390 * C13224 +
                      (C4559 * C6377 + C30682 * C6378) * C13229 +
                      (C4559 * C6379 + C30682 * C6380) * C13225) *
                         C18919) *
                        C30841 -
                    ((C25994 + C25993 + C25992 + C25991) * C18919 +
                     (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
                      C4718 * C13228) *
                         C18918) *
                        C30990) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 + C5218 * C13225) *
               C18919) *
              C30754 * C30736 * C108 -
          ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 + C9169 * C13228) *
               C18919 +
           (C4717 * C13225 + C4716 * C13229 +
            (C4559 * C128 + C30682 * C139) * C13224 +
            (C4559 * C118 + C30682 * C125) * C13228) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C4559 * C119 + C30682 * C126) * C13228 +
            (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
            C4723 * C13225) *
               C18918 +
           (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 + C5226 * C13225) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C4559 * C823 + C30682 * C830) * C13225 +
            (C4559 * C815 + C30682 * C824) * C13229 + C9407 * C13224 +
            C9406 * C13228) *
               C18919 +
           (C4945 * C13225 + C4944 * C13229 +
            (C4559 * C130 + C30682 * C141) * C13224 +
            (C4559 * C120 + C30682 * C131) * C13228) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C4559 * C121 + C30682 * C132) * C13228 +
            (C4559 * C133 + C30682 * C142) * C13224 +
            (C4559 * C269 + C30682 * C288) * C13229 +
            (C4559 * C287 + C30682 * C299) * C13225) *
               C18918 +
           ((C4559 * C422 + C30682 * C441) * C13228 +
            (C4559 * C440 + C30682 * C452) * C13224 +
            (C4559 * C816 + C30682 * C825) * C13229 +
            (C4559 * C826 + C30682 * C831) * C13225) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C9163 * C13228 + C9164 * C13224 + C5219 * C13229 +
             C5218 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5216 * C13225 + C5217 * C13229 + C5218 * C13224 +
             C5219 * C13228) *
                C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C258 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C5220 * C13228 + C5221 * C13224 + C5222 * C13229 +
             C5223 * C13225) *
                C18919) *
               C30754 * C31045 -
           ((C5221 * C13225 + C5220 * C13229 + C9170 * C13224 +
             C9169 * C13228) *
                C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C31057 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C259 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C9175 * C13228 + C9176 * C13224 + C5227 * C13229 +
             C5226 * C13225) *
                C18919) *
               C30754 * C31057 -
           ((C5224 * C13225 + C5225 * C13229 + C5226 * C13224 +
             C5227 * C13228) *
                C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C31045 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C13228 +
             (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
             C4711 * C13225) *
                C18918 +
            (C24781 + C24782 + C24783 + C24784) * C18919) *
               C30754 * C942 -
           ((C25272 + C25271 + C25270 + C25269) * C18919 +
            (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 +
             C4710 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 +
             C4714 * C13225) *
                C18918 +
            (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 +
             C5563 * C13225) *
                C18919) *
               C30754 * C31020) *
              C31054 +
          (((C4716 * C13228 + C4717 * C13224 + C4718 * C13229 +
             C4719 * C13225) *
                C18918 +
            (C25273 + C25274 + C25275 + C25276) * C18919) *
               C30754 * C943 -
           ((C24792 + C24791 + C24790 + C24789) * C18919 +
            (C4717 * C13225 + C4716 * C13229 +
             (C4559 * C128 + C30682 * C139) * C13224 +
             (C4559 * C118 + C30682 * C125) * C13228) *
                C18918) *
               C30754 * C942 -
           ((C5828 * C13225 + C5829 * C13229 + C5223 * C13224 +
             C5222 * C13228) *
                C18919 +
            (C4721 * C13225 + C4720 * C13229 + C4719 * C13224 +
             C4718 * C13228) *
                C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C13228 +
             (C4559 * C129 + C30682 * C140) * C13224 + C4722 * C13229 +
             C4723 * C13225) *
                C18918 +
            (C24797 + C24798 + C24799 + C24800) * C18919) *
               C30754 * C942 -
           ((C25280 + C25279 + C25278 + C25277) * C18919 +
            (C4725 * C13225 + C4724 * C13229 + C4723 * C13224 +
             C4722 * C13228) *
                C18918) *
               C30754 * C943 +
           ((C4724 * C13228 + C4725 * C13224 + C4727 * C13229 +
             C4726 * C13225) *
                C18918 +
            (C5225 * C13228 + C5224 * C13224 +
             (C4559 * C1544 + C30682 * C1547) * C13229 +
             (C4559 * C1550 + C30682 * C1553) * C13225) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C13228 +
            (C4559 * C127 + C30682 * C138) * C13224 + C4710 * C13229 +
            C4711 * C13225) *
               C18918 +
           (C24781 + C24782 + C24783 + C24784) * C18919) *
              C30754 * C1010 -
          ((C25272 + C25271 + C25270 + C25269) * C18919 +
           (C4713 * C13225 + C4712 * C13229 + C4711 * C13224 + C4710 * C13228) *
               C18918) *
              C30754 * C1011 +
          ((C4712 * C13228 + C4713 * C13224 + C4715 * C13229 + C4714 * C13225) *
               C18918 +
           (C5217 * C13228 + C5216 * C13224 + C5562 * C13229 + C5563 * C13225) *
               C18919) *
              C30754 * C1012 -
          ((C5936 * C13225 + C5937 * C13229 + C5563 * C13224 + C5562 * C13228) *
               C18919 +
           (C5417 * C13225 + C5416 * C13229 + C4714 * C13224 + C4715 * C13228) *
               C18918) *
              C30754 * C1013 +
          ((C5416 * C13228 + C5417 * C13224 + C5419 * C13229 + C5418 * C13225) *
               C18918 +
           (C5937 * C13228 + C5936 * C13224 +
            (C4559 * C5927 + C30682 * C5928) * C13229 +
            (C4559 * C5929 + C30682 * C5930) * C13225) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[50] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C30795 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C30802 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C2700) *
                      C30713 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C30802 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30795 -
                   (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C2700) *
                      C30722 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C30795 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C30802 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C2700) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C30795 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C30802 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C2700) *
                      C30713 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C30802 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C30795 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C2700) *
                      C30722 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C30795 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C30802 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C2700) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C30795 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C30802 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30754 * C2700) *
                      C30713 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + C10678 * C8905) *
                       C30754 * C30802 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C30795 -
                   ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C2700) *
                      C30722 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C30795 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C30802 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C2700) *
                      C2703)) /
                    (p * q * std::sqrt(p + q));
    d2ee[51] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30795 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C30802 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30990 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C2700) *
                      C2440 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C30795 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30990 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30802 +
                   ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                     C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                     (C4559 * C5821 + C30682 * C5822) * C4558) *
                        C30933 * C30841 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30990) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30795 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C30802 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C2700) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C30795 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30802 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30990) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30990 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C30795 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30990) *
                       C30802 +
                   (((C4712 * C116 + C4713 * C30921) * C8903 +
                     (C9863 + C9864) * C8904 + C9869 * C8905) *
                        C30990 -
                    ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                     (C9864 + C9863) * C8903) *
                        C30841) *
                       C2700) *
                      C2440 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30990) *
                       C30795 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C30990 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C30802 +
                   (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
                     ((C4559 * C6491 + C30682 * C6492) * C116 +
                      (C4559 * C6493 + C30682 * C6494) * C30921) *
                         C8905) *
                        C30841 -
                    ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                     (C4719 * C30921 + C4718 * C116) * C8903) *
                        C30990) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[52] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C2332 -
                       ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                         C113 * C273 + C101 * C293) *
                            C30921 +
                        (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                         C113 * C263 + C101 * C276) *
                            C116) *
                           C30933 * C30754 * C30799) *
                          C31063 +
                      (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                         C115 * C267 + C103 * C283) *
                            C116 +
                        (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                         C115 * C284 + C103 * C297) *
                            C30921) *
                           C30933 * C30754 * C30799 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C2332) *
                          C31056 +
                      (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                         C115 * C121 + C103 * C132) *
                            C116 +
                        (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                         C115 * C133 + C103 * C142) *
                            C30921) *
                           C30933 * C30754 * C2332 -
                       ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                         C113 * C271 + C101 * C291) *
                            C30921 +
                        (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                         C113 * C261 + C101 * C274) *
                            C116) *
                           C30933 * C30754 * C30799) *
                          C31043 +
                      (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                         C115 * C558 + C103 * C559) *
                            C116 +
                        (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                         C115 * C560 + C103 * C561) *
                            C30921) *
                           C30933 * C30754 * C30799 -
                       ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                         C113 * C130 + C101 * C141) *
                            C30921 +
                        (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                         C113 * C120 + C101 * C131) *
                            C116) *
                           C30933 * C30754 * C2332) *
                          C31024) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C31064 -
                       ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                         C113 * C273 + C101 * C293) *
                            C30921 +
                        (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                         C113 * C263 + C101 * C276) *
                            C116) *
                           C30933 * C30754 * C31060 +
                       ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                         C115 * C266 + C103 * C279) *
                            C116 +
                        (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                         C115 * C282 + C103 * C296) *
                            C30921) *
                           C30933 * C30754 * C31050 -
                       ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                         C102 * C1035 + C113 * C1024 + C101 * C1036) *
                            C30921 +
                        (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                         C102 * C1026 + C113 * C1018 + C101 * C1027) *
                            C116) *
                           C30933 * C30754 * C31030) *
                          C2440 +
                      (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                         C115 * C267 + C103 * C283) *
                            C116 +
                        (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                         C115 * C284 + C103 * C297) *
                            C30921) *
                           C30933 * C30754 * C31060 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C31064 -
                       ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                         C113 * C281 + C101 * C295) *
                            C30921 +
                        (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                         C113 * C265 + C101 * C278) *
                            C116) *
                           C30933 * C30754 * C31050 +
                       ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                         C102 * C1025 + C115 * C1290 + C103 * C1291) *
                            C116 +
                        (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                         C102 * C1034 + C115 * C1292 + C103 * C1293) *
                            C30921) *
                           C30933 * C30754 * C31030) *
                          C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C2332 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C30799) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C2332 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C30921) *
                        C30933 * C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C2332 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C30799) *
                      C31063 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C2332) *
                      C31056 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C2332 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C30799) *
                      C31043 +
                  ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                    C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                    (C4559 * C1292 + C30682 * C1293) * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C31064 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C31060 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C31050 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C31030) *
                      C2440 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C31060 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C31064 -
                   (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31050 +
                   (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                    C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                    (C4559 * C5665 + C30682 * C5666) * C4558) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31058 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C2332 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C31047 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C31058 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C30799) *
                      C2440 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C31047 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C31058 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C2332 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C31058 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C31047 +
                    (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                     C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                     (C4559 * C6379 + C30682 * C6380) * C4558) *
                        C30933 * C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C2332 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C30799) *
                      C31063 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + C10678 * C8905) *
                       C30754 * C30799 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C2332) *
                      C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C2332 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C30799) *
                      C31043 +
                  (((C4944 * C116 + C4945 * C30921) * C8903 +
                    ((C4559 * C815 + C30682 * C824) * C116 +
                     (C4559 * C823 + C30682 * C830) * C30921) *
                        C8904 +
                    ((C4559 * C2014 + C30682 * C2015) * C116 +
                     (C4559 * C2016 + C30682 * C2017) * C30921) *
                        C8905) *
                       C30754 * C30799 -
                   ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C31064 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C31060 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30754 * C31050 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C30754 * C31030) *
                      C2440 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + C10678 * C8905) *
                       C30754 * C31060 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C31064 -
                   ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31050 +
                   ((C4720 * C116 + C4721 * C30921) * C8903 +
                    (C5829 * C116 + C5828 * C30921) * C8904 +
                    ((C4559 * C6377 + C30682 * C6378) * C116 +
                     (C4559 * C6379 + C30682 * C6380) * C30921) *
                        C8905) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C31058 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C31047 +
                    (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) *
                        C31023) *
                       C2332 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C31047 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C31058 -
                    ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
                     C9862 * C8903) *
                        C31023) *
                       C30799) *
                      C2440 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C31047 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C31058 -
                    ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
                     C9200 * C8903) *
                        C31023) *
                       C2332 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C31058 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C31047 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C4559 * C10673 + C30682 * C10674) * C116 +
                      (C4559 * C10675 + C30682 * C10676) * C30921) *
                         C8905) *
                        C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[53] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C2332 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C30799) *
                      C30713 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C2332 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30990 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30799) *
                      C30722 +
                  ((((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30990 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C2332 +
                   ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                     C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                     (C4559 * C1550 + C30682 * C1553) * C4558) *
                        C30933 * C30841 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30990) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C2332 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C30799) *
                      C30713 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C2332 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30799) *
                      C30722 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C2332 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30990) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30990 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C2332 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30990) *
                       C30799) *
                      C30713 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30990) *
                       C2332 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C30990 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C30799) *
                      C30722 +
                  (((((C4559 * C119 + C30682 * C126) * C116 +
                      (C4559 * C129 + C30682 * C140) * C30921) *
                         C8903 +
                     (C9193 + C9194) * C8904 + C9201 * C8905) *
                        C30990 -
                    ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                     (C9194 + C9193) * C8903) *
                        C30841) *
                       C2332 +
                   (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
                     ((C4559 * C2224 + C30682 * C2227) * C116 +
                      (C4559 * C2230 + C30682 * C2233) * C30921) *
                         C8905) *
                        C30841 -
                    ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                     (C4723 * C30921 + C4722 * C116) * C8903) *
                        C30990) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q));
    d2ee[54] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C31064 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C31060 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31050 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C31030) *
                      C2440 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C31060 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C31064 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31050 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C30921) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C2332 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C30799) *
                      C31063 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C30799 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C2332) *
                      C31056 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C2332 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C30799) *
                      C31043 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C30921) *
                       C30933 * C30754 * C30799 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C2332 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C30799) *
                      C31063 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C2332) *
                      C31056 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C2332 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C30799) *
                      C31043 +
                  ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                    C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                    (C4559 * C1292 + C30682 * C1293) * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C31064 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C31060 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C31050 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C31030) *
                      C2440 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C31060 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C31064 -
                   (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31050 +
                   (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                    C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                    (C4559 * C5665 + C30682 * C5666) * C4558) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C2332 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C30799) *
                      C31063 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + C10678 * C8905) *
                       C30754 * C30799 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C2332) *
                      C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C2332 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C30799) *
                      C31043 +
                  (((C4944 * C116 + C4945 * C30921) * C8903 +
                    ((C4559 * C815 + C30682 * C824) * C116 +
                     (C4559 * C823 + C30682 * C830) * C30921) *
                        C8904 +
                    ((C4559 * C2014 + C30682 * C2015) * C116 +
                     (C4559 * C2016 + C30682 * C2017) * C30921) *
                        C8905) *
                       C30754 * C30799 -
                   ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C30754 * C2332) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C31064 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C31060 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30754 * C31050 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C30754 * C31030) *
                      C2440 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + C10678 * C8905) *
                       C30754 * C31060 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C31064 -
                   ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31050 +
                   ((C4720 * C116 + C4721 * C30921) * C8903 +
                    (C5829 * C116 + C5828 * C30921) * C8904 +
                    ((C4559 * C6377 + C30682 * C6378) * C116 +
                     (C4559 * C6379 + C30682 * C6380) * C30921) *
                        C8905) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[55] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30795 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C30802 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C3094 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C2700) *
                      C30975 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C30795 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C3094 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30802 +
                   ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                     C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                     (C4559 * C5821 + C30682 * C5822) * C4558) *
                        C30933 * C30841 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C3094) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30795 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C30802 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C2700) *
                      C30975 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C30795 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30802 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C3094) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C3094 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C30795 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C3094) *
                       C30802 +
                   (((C4712 * C116 + C4713 * C30921) * C8903 +
                     (C9863 + C9864) * C8904 + C9869 * C8905) *
                        C3094 -
                    ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                     (C9864 + C9863) * C8903) *
                        C30841) *
                       C2700) *
                      C30975 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C3094) *
                       C30795 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C3094 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C30802 +
                   (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
                     ((C4559 * C6491 + C30682 * C6492) * C116 +
                      (C4559 * C6493 + C30682 * C6494) * C30921) *
                         C8905) *
                        C30841 -
                    ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                     (C4719 * C30921 + C4718 * C116) * C8903) *
                        C3094) *
                       C2700) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30837 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30844 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C3602) *
              C30795 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C30844 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C30837 -
           (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 + C5560 * C4561 +
            C5559 * C4556 + C5558 * C4560) *
               C30933 * C3602) *
              C30802 +
          ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            C5416 * C4562 + C5417 * C4558) *
               C30933 * C30837 -
           (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 + C5562 * C4561 +
            C5216 * C4556 + C5217 * C4560) *
               C30933 * C30844 +
           (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 + C5564 * C4557 +
            (C4559 * C5531 + C30682 * C5536) * C4562 +
            (C4559 * C5537 + C30682 * C5540) * C4558) *
               C30933 * C3602) *
              C2700) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C30837 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C30844 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C3602) *
              C30795 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C30921) *
               C30933 * C30844 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C30921 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C30933 * C30837 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C30921 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C30933 * C3602) *
              C30802 +
          (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
             C115 * C266 + C103 * C279) *
                C116 +
            (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
             C115 * C282 + C103 * C296) *
                C30921) *
               C30933 * C30837 -
           ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
             C113 * C1167 + C101 * C1182) *
                C30921 +
            (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
             C113 * C1155 + C101 * C1170) *
                C116) *
               C30933 * C30844 +
           ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
             C115 * C1158 + C103 * C1173) *
                C116 +
            (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
             C115 * C1176 + C103 * C1185) *
                C30921) *
               C30933 * C3602) *
              C2700) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C30837 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30844 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C3602) *
              C30795 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            C10900 * C8905) *
               C30844 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C30837 -
           ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
            C9862 * C8903) *
               C3602) *
              C30802 +
          (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
            C9869 * C8905) *
               C30837 -
           ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
            (C9864 + C9863) * C8903) *
               C30844 +
           (C9869 * C8903 + (C9868 + C9867) * C8904 +
            ((C4559 * C6221 + C30682 * C6226) * C116 +
             (C4559 * C6227 + C30682 * C6230) * C30921) *
                C8905) *
               C3602) *
              C2700) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                  C115 * C119 + C103 * C126) *
                     C116 +
                 (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                  C115 * C129 + C103 * C140) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                  C113 * C426 + C101 * C446) *
                     C30921 +
                 (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                  C113 * C416 + C101 * C429) *
                     C116) *
                    C30933 * C30841) *
                   C2332 +
               (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                  C115 * C814 + C103 * C819) *
                     C116 +
                 (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                  C115 * C822 + C103 * C829) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                  C113 * C273 + C101 * C293) *
                     C30921 +
                 (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                  C113 * C263 + C101 * C276) *
                     C116) *
                    C30933 * C3094) *
                   C30799) *
                  C31054 +
              ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                  C115 * C420 + C103 * C436) *
                     C116 +
                 (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                  C115 * C437 + C103 * C450) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                  C113 * C128 + C101 * C139) *
                     C30921 +
                 (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                  C113 * C118 + C101 * C125) *
                     C116) *
                    C30933 * C3094) *
                   C2332 +
               (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                  C115 * C267 + C103 * C283) *
                     C116 +
                 (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                  C115 * C284 + C103 * C297) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                  C113 * C821 + C101 * C828) *
                     C30921 +
                 (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                  C113 * C813 + C101 * C818) *
                     C116) *
                    C30933 * C30841) *
                   C30799) *
                  C31041 +
              ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                  C115 * C121 + C103 * C132) *
                     C116 +
                 (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                  C115 * C133 + C103 * C142) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                  C113 * C424 + C101 * C444) *
                     C30921 +
                 (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                  C113 * C414 + C101 * C427) *
                     C116) *
                    C30933 * C30841) *
                   C2332 +
               (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                  C115 * C816 + C103 * C825) *
                     C116 +
                 (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                  C115 * C826 + C103 * C831) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                  C113 * C271 + C101 * C291) *
                     C30921 +
                 (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                  C113 * C261 + C101 * C274) *
                     C116) *
                    C30933 * C3094) *
                   C30799) *
                  C31014) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C3094 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C30841) *
                  C31064 +
              (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                 C115 * C814 + C103 * C819) *
                    C116 +
                (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                 C115 * C822 + C103 * C829) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C3094) *
                  C31060 +
              (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C3094 -
               ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                 C113 * C1167 + C101 * C1182) *
                    C30921 +
                (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                 C113 * C1155 + C101 * C1170) *
                    C116) *
                   C30933 * C30841) *
                  C31050 +
              (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                 C115 * C1544 + C103 * C1547) *
                    C116 +
                (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                 C115 * C1550 + C103 * C1553) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                 C113 * C1024 + C101 * C1036) *
                    C30921 +
                (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                 C113 * C1018 + C101 * C1027) *
                    C116) *
                   C30933 * C3094) *
                  C31030) *
             C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C31065 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C31062 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C31053 -
           ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
             C113 * C1852 + C101 * C1864) *
                C30921 +
            (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
             C113 * C1846 + C101 * C1855) *
                C116) *
               C30933 * C31036) *
              C2332 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C30921) *
               C30933 * C31062 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C30921 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C30933 * C31065 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C30921 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C30933 * C31053 +
           ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
             C115 * C2224 + C103 * C2227) *
                C116 +
            (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
             C115 * C2230 + C103 * C2233) *
                C30921) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C4560 +
             (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
             C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30933 * C3094 -
            (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
             (C4559 * C426 + C30682 * C446) * C4556 +
             (C4559 * C416 + C30682 * C429) * C4560) *
                C30933 * C30841) *
               C2332 +
           ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
             C5562 * C4562 + C5563 * C4558) *
                C30933 * C30841 -
            (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
             C4711 * C4556 + C4710 * C4560) *
                C30933 * C3094) *
               C30799) *
              C31054 +
          ((((C4559 * C415 + C30682 * C428) * C4560 +
             (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
             C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                C30933 * C30841 -
            (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
             (C4559 * C128 + C30682 * C139) * C4556 +
             (C4559 * C118 + C30682 * C125) * C4560) *
                C30933 * C3094) *
               C2332 +
           ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
             C4720 * C4562 + C4721 * C4558) *
                C30933 * C3094 -
            (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 + C5222 * C4561 +
             C5221 * C4556 + C5220 * C4560) *
                C30933 * C30841) *
               C30799) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C4560 +
             (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
             C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                C30933 * C3094 -
            (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 + C5227 * C4561 +
             (C4559 * C424 + C30682 * C444) * C4556 +
             (C4559 * C414 + C30682 * C427) * C4560) *
                C30933 * C30841) *
               C2332 +
           ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 + C5224 * C4557 +
             (C4559 * C1544 + C30682 * C1547) * C4562 +
             (C4559 * C1550 + C30682 * C1553) * C4558) *
                C30933 * C30841 -
            (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 + C4724 * C4561 +
             C4723 * C4556 + C4722 * C4560) *
                C30933 * C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C3094 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30841) *
              C31064 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C30841 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C3094) *
              C31060 +
          ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            C5416 * C4562 + C5417 * C4558) *
               C30933 * C3094 -
           (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 + C5562 * C4561 +
            C5216 * C4556 + C5217 * C4560) *
               C30933 * C30841) *
              C31050 +
          ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 + C5936 * C4557 +
            (C4559 * C5927 + C30682 * C5928) * C4562 +
            (C4559 * C5929 + C30682 * C5930) * C4558) *
               C30933 * C30841 -
           (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 + C5416 * C4561 +
            C4714 * C4556 + C4715 * C4560) *
               C30933 * C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C31065 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C31062 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C31053 -
           (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 + C6609 * C4561 +
            (C4559 * C1852 + C30682 * C1864) * C4556 +
            (C4559 * C1846 + C30682 * C1855) * C4560) *
               C30933 * C31036) *
              C2332 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C31062 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C31065 -
           (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 + C5560 * C4561 +
            C5559 * C4556 + C5558 * C4560) *
               C30933 * C31053 +
           (C6609 * C4560 + C6608 * C4556 + C6607 * C4561 + C6606 * C4557 +
            (C4559 * C6593 + C30682 * C6594) * C4562 +
            (C4559 * C6595 + C30682 * C6596) * C4558) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4559 * C117 + C30682 * C124) * C116 +
              (C4559 * C127 + C30682 * C138) * C30921) *
                 C8903 +
             (C9181 + C9182) * C8904 + C9199 * C8905) *
                C3094 -
            (C10510 * C8905 + (C9184 + C9183) * C8904 +
             (C9182 + C9181) * C8903) *
                C30841) *
               C2332 +
           (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
             C10900 * C8905) *
                C30841 -
            (C9862 * C8905 + (C9561 + C9560) * C8904 +
             (C4711 * C30921 + C4710 * C116) * C8903) *
                C3094) *
               C30799) *
              C31054 +
          ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
             C10789 * C8905) *
                C30841 -
            (C9200 * C8905 + (C9188 + C9187) * C8904 +
             ((C4559 * C128 + C30682 * C139) * C30921 +
              (C4559 * C118 + C30682 * C125) * C116) *
                 C8903) *
                C3094) *
               C2332 +
           (((C4716 * C116 + C4717 * C30921) * C8903 + (C9564 + C9565) * C8904 +
             C10678 * C8905) *
                C3094 -
            ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
             (C9565 + C9564) * C8903) *
                C30841) *
               C30799) *
              C31041 +
          (((((C4559 * C119 + C30682 * C126) * C116 +
              (C4559 * C129 + C30682 * C140) * C30921) *
                 C8903 +
             (C9193 + C9194) * C8904 + C9201 * C8905) *
                C3094 -
            ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
             (C9194 + C9193) * C8903) *
                C30841) *
               C2332 +
           (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
             ((C4559 * C2224 + C30682 * C2227) * C116 +
              (C4559 * C2230 + C30682 * C2233) * C30921) *
                 C8905) *
                C30841 -
            ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
             (C4723 * C30921 + C4722 * C116) * C8903) *
                C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C3094 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30841) *
              C31064 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            C10900 * C8905) *
               C30841 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C3094) *
              C31060 +
          (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
            C9869 * C8905) *
               C3094 -
           ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
            (C9864 + C9863) * C8903) *
               C30841) *
              C31050 +
          (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
            ((C4559 * C6593 + C30682 * C6594) * C116 +
             (C4559 * C6595 + C30682 * C6596) * C30921) *
                C8905) *
               C30841 -
           ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
            (C4714 * C30921 + C4715 * C116) * C8903) *
               C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C31065 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C31062 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C31053 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31036) *
              C2332 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            C10900 * C8905) *
               C31062 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C31065 -
           ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
            C9862 * C8903) *
               C31053 +
           (C10900 * C8903 + (C10908 + C10907) * C8904 +
            ((C4559 * C10895 + C30682 * C10896) * C116 +
             (C4559 * C10897 + C30682 * C10898) * C30921) *
                C8905) *
               C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[58] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30837 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30844 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C3602) *
                       C2332 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30844 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30837 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C3602) *
                       C30799) *
                      C30975 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30844 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30837 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C3602) *
                       C2332 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30837 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30844 +
                    (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                     C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                     (C4559 * C6379 + C30682 * C6380) * C4558) *
                        C30933 * C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C3602) *
                       C2332 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C3602) *
                       C30799) *
                      C30975 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C3602) *
                       C2332 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C30921) *
                        C30933 * C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30837 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30844 +
                    (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) *
                        C3602) *
                       C2332 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30844 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30837 -
                    ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
                     C9862 * C8903) *
                        C3602) *
                       C30799) *
                      C30975 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30844 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30837 -
                    ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
                     C9200 * C8903) *
                        C3602) *
                       C2332 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C30837 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30844 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C4559 * C10673 + C30682 * C10674) * C116 +
                      (C4559 * C10675 + C30682 * C10676) * C30921) *
                         C8905) *
                        C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[59] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C30841) *
                      C31064 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C3094) *
                      C31060 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C3094 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C30921 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C30933 * C30841) *
                      C31050 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C3094) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C2332 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C30799) *
                      C31054 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C2332 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30799) *
                      C31041 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C2332 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C3094) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C2332 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C30799) *
                      C31054 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C2332 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C3094 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30799) *
                      C31041 +
                  ((((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C3094 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C2332 +
                   ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                     C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                     (C4559 * C1550 + C30682 * C1553) * C4558) *
                        C30933 * C30841 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C3094) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C3094 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C30841) *
                      C31064 +
                  ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                    C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                       C30933 * C30841 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C3094) *
                      C31060 +
                  ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C3094 -
                   (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                    C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                       C30933 * C30841) *
                      C31050 +
                  ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                    C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                    (C4559 * C5929 + C30682 * C5930) * C4558) *
                       C30933 * C30841 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C3094) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C3094 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C2332 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C3094) *
                       C30799) *
                      C31054 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C3094) *
                       C2332 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C3094 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C30799) *
                      C31041 +
                  (((((C4559 * C119 + C30682 * C126) * C116 +
                      (C4559 * C129 + C30682 * C140) * C30921) *
                         C8903 +
                     (C9193 + C9194) * C8904 + C9201 * C8905) *
                        C3094 -
                    ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                     (C9194 + C9193) * C8903) *
                        C30841) *
                       C2332 +
                   (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
                     ((C4559 * C2224 + C30682 * C2227) * C116 +
                      (C4559 * C2230 + C30682 * C2233) * C30921) *
                         C8905) *
                        C30841 -
                    ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                     (C4723 * C30921 + C4722 * C116) * C8903) *
                        C3094) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C3094 -
                   (C10510 * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C30841) *
                      C31064 +
                  (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                    C10900 * C8905) *
                       C30841 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C3094) *
                      C31060 +
                  (((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C3094 -
                   ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                    (C9864 + C9863) * C8903) *
                       C30841) *
                      C31050 +
                  (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
                    ((C4559 * C6593 + C30682 * C6594) * C116 +
                     (C4559 * C6595 + C30682 * C6596) * C30921) *
                        C8905) *
                       C30841 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C3094) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[60] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C30989 -
                       ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                         C113 * C273 + C101 * C293) *
                            C30921 +
                        (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                         C113 * C263 + C101 * C276) *
                            C116) *
                           C30933 * C30754 * C30799) *
                          C554 +
                      (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                         C115 * C267 + C103 * C283) *
                            C116 +
                        (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                         C115 * C284 + C103 * C297) *
                            C30921) *
                           C30933 * C30754 * C30799 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C30989) *
                          C555 +
                      (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                         C115 * C121 + C103 * C132) *
                            C116 +
                        (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                         C115 * C133 + C103 * C142) *
                            C30921) *
                           C30933 * C30754 * C30989 -
                       ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                         C113 * C271 + C101 * C291) *
                            C30921 +
                        (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                         C113 * C261 + C101 * C274) *
                            C116) *
                           C30933 * C30754 * C30799) *
                          C556 +
                      (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                         C115 * C558 + C103 * C559) *
                            C116 +
                        (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                         C115 * C560 + C103 * C561) *
                            C30921) *
                           C30933 * C30754 * C30799 -
                       ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                         C113 * C130 + C101 * C141) *
                            C30921 +
                        (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                         C113 * C120 + C101 * C131) *
                            C116) *
                           C30933 * C30754 * C30989) *
                          C31024) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C1284 -
                       ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                         C113 * C273 + C101 * C293) *
                            C30921 +
                        (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                         C113 * C263 + C101 * C276) *
                            C116) *
                           C30933 * C30754 * C1285 +
                       ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                         C115 * C266 + C103 * C279) *
                            C116 +
                        (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                         C115 * C282 + C103 * C296) *
                            C30921) *
                           C30933 * C30754 * C1286 -
                       ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                         C102 * C1035 + C113 * C1024 + C101 * C1036) *
                            C30921 +
                        (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                         C102 * C1026 + C113 * C1018 + C101 * C1027) *
                            C116) *
                           C30933 * C30754 * C31030) *
                          C30975 +
                      (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                         C115 * C267 + C103 * C283) *
                            C116 +
                        (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                         C115 * C284 + C103 * C297) *
                            C30921) *
                           C30933 * C30754 * C1285 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C1284 -
                       ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                         C113 * C281 + C101 * C295) *
                            C30921 +
                        (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                         C113 * C265 + C101 * C278) *
                            C116) *
                           C30933 * C30754 * C1286 +
                       ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                         C102 * C1025 + C115 * C1290 + C103 * C1291) *
                            C116 +
                        (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                         C102 * C1034 + C115 * C1292 + C103 * C1293) *
                            C30921) *
                           C30933 * C30754 * C31030) *
                          C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C30989 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C30799) *
                      C30975 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C30989 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C30921) *
                        C30933 * C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C30989 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C30799) *
                      C554 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30989) *
                      C555 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C30989 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C30799) *
                      C556 +
                  ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                    C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                    (C4559 * C1292 + C30682 * C1293) * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1284 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1285 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1286 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C31030) *
                      C30975 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C1285 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C1284 -
                   (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C1286 +
                   (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                    C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                    (C4559 * C5665 + C30682 * C5666) * C4558) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C1664 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C30989 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C1665 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C1664 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C30799) *
                      C30975 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C1665 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C1664 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C30989 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C1664 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C1665 +
                    (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                     C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                     (C4559 * C6379 + C30682 * C6380) * C4558) *
                        C30933 * C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C30989 -
                   ((C5559 * C30921 + C5558 * C116) * C8905 +
                    (C5218 * C30921 + C5219 * C116) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C30799) *
                      C554 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C5220 * C116 + C5221 * C30921) * C8904 +
                    (C6393 * C116 + C6392 * C30921) * C8905) *
                       C30754 * C30799 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C30989) *
                      C555 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C30989 -
                   (((C4559 * C1159 + C30682 * C1177) * C30921 +
                     (C4559 * C1150 + C30682 * C1162) * C116) *
                        C8905 +
                    (C5226 * C30921 + C5227 * C116) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C30799) *
                      C556 +
                  (((C4944 * C116 + C4945 * C30921) * C8903 +
                    ((C4559 * C815 + C30682 * C824) * C116 +
                     (C4559 * C823 + C30682 * C830) * C30921) *
                        C8904 +
                    ((C4559 * C2014 + C30682 * C2015) * C116 +
                     (C4559 * C2016 + C30682 * C2017) * C30921) *
                        C8905) *
                       C30754 * C30799 -
                   (((C4559 * C438 + C30682 * C451) * C30921 +
                     (C4559 * C421 + C30682 * C439) * C116) *
                        C8905 +
                    ((C4559 * C437 + C30682 * C450) * C30921 +
                     (C4559 * C420 + C30682 * C436) * C116) *
                        C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C1284 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C1285 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30754 * C1286 -
                   ((C5564 * C30921 + C5565 * C116) * C8905 +
                    (C5563 * C30921 + C5562 * C116) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C30754 * C31030) *
                      C30975 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                       C30754 * C1285 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C1284 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C1286 +
                   ((C4720 * C116 + C4721 * C30921) * C8903 +
                    (C5829 * C116 + C5828 * C30921) * C8904 +
                    ((C4559 * C6377 + C30682 * C6378) * C116 +
                     (C4559 * C6379 + C30682 * C6380) * C30921) *
                        C8905) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C1664 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C1665 +
                    (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) *
                        C31023) *
                       C30989 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     (C9860 + C9861) * C8905) *
                        C1665 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C1664 -
                    (((C4559 * C6225 + C30682 * C6229) * C30921 +
                      (C4559 * C6220 + C30682 * C6224) * C116) *
                         C8905 +
                     (C9861 + C9860) * C8904 + C9862 * C8903) *
                        C31023) *
                       C30799) *
                      C30975 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     (C9191 + C9192) * C8905) *
                        C1665 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C1664 -
                    (((C4559 * C1860 + C30682 * C1866) * C30921 +
                      (C4559 * C1848 + C30682 * C1857) * C116) *
                         C8905 +
                     (C9192 + C9191) * C8904 + C9200 * C8903) *
                        C31023) *
                       C30989 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C1664 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C1665 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C4559 * C10673 + C30682 * C10674) * C116 +
                      (C4559 * C10675 + C30682 * C10676) * C30921) *
                         C8905) *
                        C31023) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                  C115 * C119 + C103 * C126) *
                     C116 +
                 (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                  C115 * C129 + C103 * C140) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                  C113 * C426 + C101 * C446) *
                     C30921 +
                 (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                  C113 * C416 + C101 * C429) *
                     C116) *
                    C30933 * C30841) *
                   C30989 +
               (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                  C115 * C814 + C103 * C819) *
                     C116 +
                 (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                  C115 * C822 + C103 * C829) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                  C113 * C273 + C101 * C293) *
                     C30921 +
                 (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                  C113 * C263 + C101 * C276) *
                     C116) *
                    C30933 * C30990) *
                   C30799) *
                  C258 +
              ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                  C115 * C420 + C103 * C436) *
                     C116 +
                 (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                  C115 * C437 + C103 * C450) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                  C113 * C128 + C101 * C139) *
                     C30921 +
                 (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                  C113 * C118 + C101 * C125) *
                     C116) *
                    C30933 * C30990) *
                   C30989 +
               (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                  C115 * C267 + C103 * C283) *
                     C116 +
                 (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                  C115 * C284 + C103 * C297) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                  C113 * C821 + C101 * C828) *
                     C30921 +
                 (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                  C113 * C813 + C101 * C818) *
                     C116) *
                    C30933 * C30841) *
                   C30799) *
                  C259 +
              ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                  C115 * C121 + C103 * C132) *
                     C116 +
                 (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                  C115 * C133 + C103 * C142) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                  C113 * C424 + C101 * C444) *
                     C30921 +
                 (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                  C113 * C414 + C101 * C427) *
                     C116) *
                    C30933 * C30841) *
                   C30989 +
               (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                  C115 * C816 + C103 * C825) *
                     C116 +
                 (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                  C115 * C826 + C103 * C831) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                  C113 * C271 + C101 * C291) *
                     C30921 +
                 (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                  C113 * C261 + C101 * C274) *
                     C116) *
                    C30933 * C30990) *
                   C30799) *
                  C31014) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C30990 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C30841) *
                  C1284 +
              (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                 C115 * C814 + C103 * C819) *
                    C116 +
                (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                 C115 * C822 + C103 * C829) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C30990) *
                  C1285 +
              (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C30990 -
               ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                 C113 * C1167 + C101 * C1182) *
                    C30921 +
                (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                 C113 * C1155 + C101 * C1170) *
                    C116) *
                   C30933 * C30841) *
                  C1286 +
              (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                 C115 * C1544 + C103 * C1547) *
                    C116 +
                (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                 C115 * C1550 + C103 * C1553) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                 C113 * C1024 + C101 * C1036) *
                    C30921 +
                (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                 C113 * C1018 + C101 * C1027) *
                    C116) *
                   C30933 * C30990) *
                  C31030) *
             C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C2116 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C2117 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C2118 -
           ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
             C113 * C1852 + C101 * C1864) *
                C30921 +
            (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
             C113 * C1846 + C101 * C1855) *
                C116) *
               C30933 * C31036) *
              C30989 +
          (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
             C115 * C814 + C103 * C819) *
                C116 +
            (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
             C115 * C822 + C103 * C829) *
                C30921) *
               C30933 * C2117 -
           ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
             C113 * C273 + C101 * C293) *
                C30921 +
            (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
             C113 * C263 + C101 * C276) *
                C116) *
               C30933 * C2116 -
           ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
             C113 * C1161 + C101 * C1179) *
                C30921 +
            (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
             C113 * C1152 + C101 * C1164) *
                C116) *
               C30933 * C2118 +
           ((C113 * C2222 + C101 * C2225 + C114 * C2223 + C102 * C2226 +
             C115 * C2224 + C103 * C2227) *
                C116 +
            (C113 * C2228 + C101 * C2231 + C114 * C2229 + C102 * C2232 +
             C115 * C2230 + C103 * C2233) *
                C30921) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C4560 +
             (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
             C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30933 * C30990 -
            (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
             (C4559 * C426 + C30682 * C446) * C4556 +
             (C4559 * C416 + C30682 * C429) * C4560) *
                C30933 * C30841) *
               C30989 +
           ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
             (C4559 * C1542 + C30682 * C1545) * C4562 +
             (C4559 * C1548 + C30682 * C1551) * C4558) *
                C30933 * C30841 -
            (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
             C4711 * C4556 + C4710 * C4560) *
                C30933 * C30990) *
               C30799) *
              C258 +
          ((((C4559 * C415 + C30682 * C428) * C4560 +
             (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
             C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                C30933 * C30841 -
            (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
             (C4559 * C128 + C30682 * C139) * C4556 +
             (C4559 * C118 + C30682 * C125) * C4560) *
                C30933 * C30990) *
               C30989 +
           ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
             C4720 * C4562 + C4721 * C4558) *
                C30933 * C30990 -
            ((C4559 * C1549 + C30682 * C1552) * C4558 +
             (C4559 * C1543 + C30682 * C1546) * C4562 + C5223 * C4557 +
             C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                C30933 * C30841) *
               C30799) *
              C259 +
          ((((C4559 * C119 + C30682 * C126) * C4560 +
             (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
             C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                C30933 * C30990 -
            (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 + C5227 * C4561 +
             (C4559 * C424 + C30682 * C444) * C4556 +
             (C4559 * C414 + C30682 * C427) * C4560) *
                C30933 * C30841) *
               C30989 +
           ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 + C5224 * C4557 +
             (C4559 * C1544 + C30682 * C1547) * C4562 +
             (C4559 * C1550 + C30682 * C1553) * C4558) *
                C30933 * C30841 -
            (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 + C4724 * C4561 +
             C4723 * C4556 + C4722 * C4560) *
                C30933 * C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30990 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30841) *
              C1284 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C30841 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C30990) *
              C1285 +
          ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            C5416 * C4562 + C5417 * C4558) *
               C30933 * C30990 -
           (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 + C5562 * C4561 +
            C5216 * C4556 + C5217 * C4560) *
               C30933 * C30841) *
              C1286 +
          ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 + C5936 * C4557 +
            (C4559 * C5927 + C30682 * C5928) * C4562 +
            (C4559 * C5929 + C30682 * C5930) * C4558) *
               C30933 * C30841 -
           (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 + C5416 * C4561 +
            C4714 * C4556 + C4715 * C4560) *
               C30933 * C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C2116 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C2117 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C2118 -
           (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 + C6609 * C4561 +
            (C4559 * C1852 + C30682 * C1864) * C4556 +
            (C4559 * C1846 + C30682 * C1855) * C4560) *
               C30933 * C31036) *
              C30989 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C2117 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C2116 -
           (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 + C5560 * C4561 +
            C5559 * C4556 + C5558 * C4560) *
               C30933 * C2118 +
           (C6609 * C4560 + C6608 * C4556 + C6607 * C4561 + C6606 * C4557 +
            (C4559 * C6593 + C30682 * C6594) * C4562 +
            (C4559 * C6595 + C30682 * C6596) * C4558) *
               C30933 * C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4559 * C117 + C30682 * C124) * C116 +
              (C4559 * C127 + C30682 * C138) * C30921) *
                 C8903 +
             (C9181 + C9182) * C8904 + C9199 * C8905) *
                C30990 -
            ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
             (C9182 + C9181) * C8903) *
                C30841) *
               C30989 +
           (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
             (C6609 * C116 + C6608 * C30921) * C8905) *
                C30841 -
            ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
             (C4711 * C30921 + C4710 * C116) * C8903) *
                C30990) *
               C30799) *
              C258 +
          ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
             (C9191 + C9192) * C8905) *
                C30841 -
            (C9200 * C8905 + (C9188 + C9187) * C8904 +
             ((C4559 * C128 + C30682 * C139) * C30921 +
              (C4559 * C118 + C30682 * C125) * C116) *
                 C8903) *
                C30990) *
               C30989 +
           (((C4716 * C116 + C4717 * C30921) * C8903 + (C9564 + C9565) * C8904 +
             (C9566 + C9567) * C8905) *
                C30990 -
            (((C4559 * C2229 + C30682 * C2232) * C30921 +
              (C4559 * C2223 + C30682 * C2226) * C116) *
                 C8905 +
             (C9567 + C9566) * C8904 + (C9565 + C9564) * C8903) *
                C30841) *
               C30799) *
              C259 +
          (((((C4559 * C119 + C30682 * C126) * C116 +
              (C4559 * C129 + C30682 * C140) * C30921) *
                 C8903 +
             (C9193 + C9194) * C8904 + C9201 * C8905) *
                C30990 -
            ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
             (C9194 + C9193) * C8903) *
                C30841) *
               C30989 +
           (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
             ((C4559 * C2224 + C30682 * C2227) * C116 +
              (C4559 * C2230 + C30682 * C2233) * C30921) *
                 C8905) *
                C30841 -
            ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
             (C4723 * C30921 + C4722 * C116) * C8903) *
                C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C30990 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30841) *
              C1284 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            (C9860 + C9861) * C8905) *
               C30841 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C30990) *
              C1285 +
          (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
            C9869 * C8905) *
               C30990 -
           ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
            (C9864 + C9863) * C8903) *
               C30841) *
              C1286 +
          (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
            ((C4559 * C6593 + C30682 * C6594) * C116 +
             (C4559 * C6595 + C30682 * C6596) * C30921) *
                C8905) *
               C30841 -
           ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
            (C4714 * C30921 + C4715 * C116) * C8903) *
               C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C2116 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C2117 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C2118 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31036) *
              C30989 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            C10900 * C8905) *
               C2117 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C2116 -
           ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
            C9862 * C8903) *
               C2118 +
           (C10900 * C8903 + (C10908 + C10907) * C8904 +
            ((C4559 * C10895 + C30682 * C10896) * C116 +
             (C4559 * C10897 + C30682 * C10898) * C30921) *
                C8905) *
               C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C30921) *
                  C30933 * C30754 * C30736 * C108 -
              ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                C113 * C128 + C101 * C139) *
                   C30921 +
               (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                C113 * C118 + C101 * C125) *
                   C116) *
                  C30933 * C30754 * C30736 * C109 +
              ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                C115 * C121 + C103 * C132) *
                   C116 +
               (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                C115 * C133 + C103 * C142) *
                   C30921) *
                  C30933 * C30754 * C30736 * C110 -
              ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                C113 * C130 + C101 * C141) *
                   C30921 +
               (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                C113 * C120 + C101 * C131) *
                   C116) *
                  C30933 * C30754 * C30736 * C111 +
              ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                C115 * C123 + C103 * C136) *
                   C116 +
               (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                C115 * C137 + C103 * C144) *
                   C30921) *
                  C30933 * C30754 * C30736 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C30754 * C31057 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C30754 * C31045 +
               ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C30754 * C31020) *
                  C258 +
              (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                 C115 * C267 + C103 * C283) *
                    C116 +
                (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                 C115 * C284 + C103 * C297) *
                    C30921) *
                   C30933 * C30754 * C31045 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C30754 * C31057 -
               ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                 C113 * C281 + C101 * C295) *
                    C30921 +
                (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                 C113 * C265 + C101 * C278) *
                    C116) *
                   C30933 * C30754 * C31020) *
                  C259 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C30754 * C31057 -
               ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                 C113 * C271 + C101 * C291) *
                    C30921 +
                (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                 C113 * C261 + C101 * C274) *
                    C116) *
                   C30933 * C30754 * C31045 +
               ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                 C115 * C270 + C103 * C289) *
                    C116 +
                (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                 C115 * C290 + C103 * C300) *
                    C30921) *
                   C30933 * C30754 * C31020) *
                  C31014) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C31058 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C31047 +
               ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                 C115 * C419 + C103 * C432) *
                    C116 +
                (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                 C115 * C435 + C103 * C449) *
                    C30921) *
                   C30933 * C31023) *
                  C30736 * C258 +
              (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                 C115 * C420 + C103 * C436) *
                    C116 +
                (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                 C115 * C437 + C103 * C450) *
                    C30921) *
                   C30933 * C31047 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C31058 -
               ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                 C113 * C434 + C101 * C448) *
                    C30921 +
                (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                 C113 * C418 + C101 * C431) *
                    C116) *
                   C30933 * C31023) *
                  C30736 * C259 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C31058 -
               ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                 C113 * C424 + C101 * C444) *
                    C30921 +
                (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                 C113 * C414 + C101 * C427) *
                    C116) *
                   C30933 * C31047 +
               ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                 C115 * C423 + C103 * C442) *
                    C116 +
                (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                 C115 * C443 + C103 * C453) *
                    C30921) *
                   C30933 * C31023) *
                  C30736 * C31014) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C30754 * C942 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C30754 * C943 +
               ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C30754 * C31020) *
                  C31054 +
              (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                 C115 * C267 + C103 * C283) *
                    C116 +
                (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                 C115 * C284 + C103 * C297) *
                    C30921) *
                   C30933 * C30754 * C943 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C30754 * C942 -
               ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                 C113 * C281 + C101 * C295) *
                    C30921 +
                (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                 C113 * C265 + C101 * C278) *
                    C116) *
                   C30933 * C30754 * C31020) *
                  C31041 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C30754 * C942 -
               ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                 C113 * C271 + C101 * C291) *
                    C30921 +
                (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                 C113 * C261 + C101 * C274) *
                    C116) *
                   C30933 * C30754 * C943 +
               ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                 C115 * C270 + C103 * C289) *
                    C116 +
                (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                 C115 * C290 + C103 * C300) *
                    C30921) *
                   C30933 * C30754 * C31020) *
                  C31014) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                C115 * C119 + C103 * C126) *
                   C116 +
               (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                C115 * C129 + C103 * C140) *
                   C30921) *
                  C30933 * C30754 * C1010 -
              ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                C113 * C273 + C101 * C293) *
                   C30921 +
               (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                C113 * C263 + C101 * C276) *
                   C116) *
                  C30933 * C30754 * C1011 +
              ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                C115 * C266 + C103 * C279) *
                   C116 +
               (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                C115 * C282 + C103 * C296) *
                   C30921) *
                  C30933 * C30754 * C1012 -
              ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                C113 * C1024 + C101 * C1036) *
                   C30921 +
               (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                C113 * C1018 + C101 * C1027) *
                   C116) *
                  C30933 * C30754 * C1013 +
              ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                C115 * C1021 + C103 * C1030) *
                   C116 +
               (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                C115 * C1033 + C103 * C1039) *
                   C30921) *
                  C30933 * C30754 * C1014) *
             C30708 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C31058 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C31047 +
               ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                 C115 * C419 + C103 * C432) *
                    C116 +
                (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                 C115 * C435 + C103 * C449) *
                    C30921) *
                   C30933 * C31023) *
                  C942 +
              (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                 C115 * C814 + C103 * C819) *
                    C116 +
                (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                 C115 * C822 + C103 * C829) *
                    C30921) *
                   C30933 * C31047 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C31058 -
               ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                 C113 * C1161 + C101 * C1179) *
                    C30921 +
                (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                 C113 * C1152 + C101 * C1164) *
                    C116) *
                   C30933 * C31023) *
                  C943 +
              (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C31058 -
               ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                 C113 * C1167 + C101 * C1182) *
                    C30921 +
                (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                 C113 * C1155 + C101 * C1170) *
                    C116) *
                   C30933 * C31047 +
               ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                 C115 * C1158 + C103 * C1173) *
                    C116 +
                (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                 C115 * C1176 + C103 * C1185) *
                    C30921) *
                   C30933 * C31023) *
                  C31020) *
             C30708 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C1664 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C1665 +
               ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                 C115 * C419 + C103 * C432) *
                    C116 +
                (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                 C115 * C435 + C103 * C449) *
                    C30921) *
                   C30933 * C31023) *
                  C30736 * C31054 +
              (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                 C115 * C420 + C103 * C436) *
                    C116 +
                (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                 C115 * C437 + C103 * C450) *
                    C30921) *
                   C30933 * C1665 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C1664 -
               ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                 C113 * C434 + C101 * C448) *
                    C30921 +
                (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                 C113 * C418 + C101 * C431) *
                    C116) *
                   C30933 * C31023) *
                  C30736 * C31041 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C1664 -
               ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                 C113 * C424 + C101 * C444) *
                    C30921 +
                (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                 C113 * C414 + C101 * C427) *
                    C116) *
                   C30933 * C1665 +
               ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                 C115 * C423 + C103 * C442) *
                    C116 +
                (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                 C115 * C443 + C103 * C453) *
                    C30921) *
                   C30933 * C31023) *
                  C30736 * C31014) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C1664 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C1665 +
               ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                 C115 * C419 + C103 * C432) *
                    C116 +
                (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                 C115 * C435 + C103 * C449) *
                    C30921) *
                   C30933 * C31023) *
                  C31057 +
              (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                 C115 * C814 + C103 * C819) *
                    C116 +
                (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                 C115 * C822 + C103 * C829) *
                    C30921) *
                   C30933 * C1665 -
               ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                 C113 * C273 + C101 * C293) *
                    C30921 +
                (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                 C113 * C263 + C101 * C276) *
                    C116) *
                   C30933 * C1664 -
               ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                 C113 * C1161 + C101 * C1179) *
                    C30921 +
                (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                 C113 * C1152 + C101 * C1164) *
                    C116) *
                   C30933 * C31023) *
                  C31045 +
              (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                 C115 * C266 + C103 * C279) *
                    C116 +
                (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                 C115 * C282 + C103 * C296) *
                    C30921) *
                   C30933 * C1664 -
               ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                 C113 * C1167 + C101 * C1182) *
                    C30921 +
                (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                 C113 * C1155 + C101 * C1170) *
                    C116) *
                   C30933 * C1665 +
               ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                 C115 * C1158 + C103 * C1173) *
                    C116 +
                (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                 C115 * C1176 + C103 * C1185) *
                    C30921) *
                   C30933 * C31023) *
                  C31020) *
             C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
            C115 * C119 + C103 * C126) *
               C116 +
           (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
            C115 * C129 + C103 * C140) *
               C30921) *
              C30933 * C1839 -
          ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
            C113 * C426 + C101 * C446) *
               C30921 +
           (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
            C113 * C416 + C101 * C429) *
               C116) *
              C30933 * C1840 +
          ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
            C115 * C419 + C103 * C432) *
               C116 +
           (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
            C115 * C435 + C103 * C449) *
               C30921) *
              C30933 * C1841 -
          ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
            C113 * C1852 + C101 * C1864) *
               C30921 +
           (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
            C113 * C1846 + C101 * C1855) *
               C116) *
              C30933 * C1842 +
          ((C113 * C1847 + C101 * C1856 + C114 * C1848 + C102 * C1857 +
            C115 * C1849 + C103 * C1858) *
               C116 +
           (C113 * C1859 + C101 * C1865 + C114 * C1860 + C102 * C1866 +
            C115 * C1861 + C103 * C1867) *
               C30921) *
              C30933 * C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4559 * C117 + C30682 * C124) * C4560 +
           (C4559 * C127 + C30682 * C138) * C4556 +
           (C4559 * C263 + C30682 * C276) * C4561 +
           (C4559 * C273 + C30682 * C293) * C4557 +
           (C4559 * C264 + C30682 * C277) * C4562 +
           (C4559 * C280 + C30682 * C294) * C4558) *
              C30933 * C30754 * C30736 * C108 -
          ((C4559 * C281 + C30682 * C295) * C4558 +
           (C4559 * C265 + C30682 * C278) * C4562 +
           (C4559 * C272 + C30682 * C292) * C4557 +
           (C4559 * C262 + C30682 * C275) * C4561 +
           (C4559 * C128 + C30682 * C139) * C4556 +
           (C4559 * C118 + C30682 * C125) * C4560) *
              C30933 * C30754 * C30736 * C109 +
          ((C4559 * C119 + C30682 * C126) * C4560 +
           (C4559 * C129 + C30682 * C140) * C4556 +
           (C4559 * C261 + C30682 * C274) * C4561 +
           (C4559 * C271 + C30682 * C291) * C4557 +
           (C4559 * C266 + C30682 * C279) * C4562 +
           (C4559 * C282 + C30682 * C296) * C4558) *
              C30933 * C30754 * C30736 * C110 -
          ((C4559 * C285 + C30682 * C298) * C4558 +
           (C4559 * C268 + C30682 * C286) * C4562 +
           (C4559 * C284 + C30682 * C297) * C4557 +
           (C4559 * C267 + C30682 * C283) * C4561 +
           (C4559 * C130 + C30682 * C141) * C4556 +
           (C4559 * C120 + C30682 * C131) * C4560) *
              C30933 * C30754 * C30736 * C111 +
          ((C4559 * C121 + C30682 * C132) * C4560 +
           (C4559 * C133 + C30682 * C142) * C4556 +
           (C4559 * C269 + C30682 * C288) * C4561 +
           (C4559 * C287 + C30682 * C299) * C4557 +
           (C4559 * C270 + C30682 * C289) * C4562 +
           (C4559 * C290 + C30682 * C300) * C4558) *
              C30933 * C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30754 * C31057 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C30754 * C31045 +
           (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            (C4559 * C1019 + C30682 * C1028) * C4562 +
            (C4559 * C1031 + C30682 * C1037) * C4558) *
               C30933 * C30754 * C31020) *
              C258 +
          ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
            C4720 * C4562 + C4721 * C4558) *
               C30933 * C30754 * C31045 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C30754 * C31057 -
           ((C4559 * C1032 + C30682 * C1038) * C4558 +
            (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
            C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
               C30933 * C30754 * C31020) *
              C259 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C30754 * C31057 -
           (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 + C4724 * C4561 +
            C4723 * C4556 + C4722 * C4560) *
               C30933 * C30754 * C31045 +
           (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 + C4726 * C4557 +
            (C4559 * C1021 + C30682 * C1030) * C4562 +
            (C4559 * C1033 + C30682 * C1039) * C4558) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C31058 -
           ((C4559 * C1167 + C30682 * C1182) * C4558 +
            (C4559 * C1155 + C30682 * C1170) * C4562 +
            (C4559 * C820 + C30682 * C827) * C4557 +
            (C4559 * C812 + C30682 * C817) * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C31047 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 +
            (C4559 * C1152 + C30682 * C1164) * C4561 +
            (C4559 * C1161 + C30682 * C1179) * C4557 +
            (C4559 * C1156 + C30682 * C1171) * C4562 +
            (C4559 * C1174 + C30682 * C1183) * C4558) *
               C30933 * C31023) *
              C30736 * C258 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 +
            (C4559 * C813 + C30682 * C818) * C4561 +
            (C4559 * C821 + C30682 * C828) * C4557 +
            (C4559 * C1154 + C30682 * C1169) * C4562 +
            (C4559 * C1166 + C30682 * C1181) * C4558) *
               C30933 * C31047 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C31058 -
           ((C4559 * C1175 + C30682 * C1184) * C4558 +
            (C4559 * C1157 + C30682 * C1172) * C4562 +
            (C4559 * C1160 + C30682 * C1178) * C4557 +
            (C4559 * C1151 + C30682 * C1163) * C4561 +
            (C4559 * C434 + C30682 * C448) * C4556 +
            (C4559 * C418 + C30682 * C431) * C4560) *
               C30933 * C31023) *
              C30736 * C259 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C31058 -
           ((C4559 * C1165 + C30682 * C1180) * C4558 +
            (C4559 * C1153 + C30682 * C1168) * C4562 +
            (C4559 * C822 + C30682 * C829) * C4557 +
            (C4559 * C814 + C30682 * C819) * C4561 +
            (C4559 * C424 + C30682 * C444) * C4556 +
            (C4559 * C414 + C30682 * C427) * C4560) *
               C30933 * C31047 +
           ((C4559 * C419 + C30682 * C432) * C4560 +
            (C4559 * C435 + C30682 * C449) * C4556 +
            (C4559 * C1150 + C30682 * C1162) * C4561 +
            (C4559 * C1159 + C30682 * C1177) * C4557 +
            (C4559 * C1158 + C30682 * C1173) * C4562 +
            (C4559 * C1176 + C30682 * C1185) * C4558) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30754 * C942 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C30754 * C943 +
           (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            (C4559 * C1019 + C30682 * C1028) * C4562 +
            (C4559 * C1031 + C30682 * C1037) * C4558) *
               C30933 * C30754 * C31020) *
              C31054 +
          ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
            C4720 * C4562 + C4721 * C4558) *
               C30933 * C30754 * C943 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C30754 * C942 -
           ((C4559 * C1032 + C30682 * C1038) * C4558 +
            (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
            C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
               C30933 * C30754 * C31020) *
              C31041 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C30754 * C942 -
           (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 + C4724 * C4561 +
            C4723 * C4556 + C4722 * C4560) *
               C30933 * C30754 * C943 +
           (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 + C4726 * C4557 +
            (C4559 * C1021 + C30682 * C1030) * C4562 +
            (C4559 * C1033 + C30682 * C1039) * C4558) *
               C30933 * C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4559 * C117 + C30682 * C124) * C4560 +
           (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
           C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
              C30933 * C30754 * C1010 -
          (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
           C4711 * C4556 + C4710 * C4560) *
              C30933 * C30754 * C1011 +
          (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
           C5416 * C4562 + C5417 * C4558) *
              C30933 * C30754 * C1012 -
          (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 + C5416 * C4561 +
           C4714 * C4556 + C4715 * C4560) *
              C30933 * C30754 * C1013 +
          (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 + C5418 * C4557 +
           (C4559 * C5400 + C30682 * C5403) * C4562 +
           (C4559 * C5404 + C30682 * C5406) * C4558) *
              C30933 * C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C31058 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C31047 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C31023) *
              C942 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C31047 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C31058 -
           (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 + C5560 * C4561 +
            C5559 * C4556 + C5558 * C4560) *
               C30933 * C31023) *
              C943 +
          ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            C5416 * C4562 + C5417 * C4558) *
               C30933 * C31058 -
           ((C4559 * C5534 + C30682 * C5539) * C4558 +
            (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
            C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
               C30933 * C31047 +
           (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 + C5564 * C4557 +
            (C4559 * C5531 + C30682 * C5536) * C4562 +
            (C4559 * C5537 + C30682 * C5540) * C4558) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C1664 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C1665 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C31023) *
              C30736 * C31054 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
            C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
               C30933 * C1665 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C1664 -
           ((C4559 * C1175 + C30682 * C1184) * C4558 +
            (C4559 * C1157 + C30682 * C1172) * C4562 +
            (C4559 * C1160 + C30682 * C1178) * C4557 +
            (C4559 * C1151 + C30682 * C1163) * C4561 +
            (C4559 * C434 + C30682 * C448) * C4556 +
            (C4559 * C418 + C30682 * C431) * C4560) *
               C30933 * C31023) *
              C30736 * C31041 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C1664 -
           (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 + C5227 * C4561 +
            (C4559 * C424 + C30682 * C444) * C4556 +
            (C4559 * C414 + C30682 * C427) * C4560) *
               C30933 * C1665 +
           ((C4559 * C419 + C30682 * C432) * C4560 +
            (C4559 * C435 + C30682 * C449) * C4556 +
            (C4559 * C1150 + C30682 * C1162) * C4561 +
            (C4559 * C1159 + C30682 * C1177) * C4557 +
            (C4559 * C1158 + C30682 * C1173) * C4562 +
            (C4559 * C1176 + C30682 * C1185) * C4558) *
               C30933 * C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C1664 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C1665 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C31023) *
              C31057 +
          ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
            C5562 * C4562 + C5563 * C4558) *
               C30933 * C1665 -
           (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
            C4711 * C4556 + C4710 * C4560) *
               C30933 * C1664 -
           (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 + C5560 * C4561 +
            C5559 * C4556 + C5558 * C4560) *
               C30933 * C31023) *
              C31045 +
          ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
            C5416 * C4562 + C5417 * C4558) *
               C30933 * C1664 -
           (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 + C5562 * C4561 +
            C5216 * C4556 + C5217 * C4560) *
               C30933 * C1665 +
           (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 + C5564 * C4557 +
            (C4559 * C5531 + C30682 * C5536) * C4562 +
            (C4559 * C5537 + C30682 * C5540) * C4558) *
               C30933 * C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4559 * C117 + C30682 * C124) * C4560 +
           (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
           C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
              C30933 * C1839 -
          (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
           (C4559 * C426 + C30682 * C446) * C4556 +
           (C4559 * C416 + C30682 * C429) * C4560) *
              C30933 * C1840 +
          ((C4559 * C417 + C30682 * C430) * C4560 +
           (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
           C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
              C30933 * C1841 -
          ((C4559 * C6222 + C30682 * C6228) * C4558 +
           (C4559 * C6219 + C30682 * C6223) * C4562 +
           (C4559 * C2228 + C30682 * C2231) * C4557 +
           (C4559 * C2222 + C30682 * C2225) * C4561 +
           (C4559 * C1852 + C30682 * C1864) * C4556 +
           (C4559 * C1846 + C30682 * C1855) * C4560) *
              C30933 * C1842 +
          ((C4559 * C1847 + C30682 * C1856) * C4560 +
           (C4559 * C1859 + C30682 * C1865) * C4556 +
           (C4559 * C6220 + C30682 * C6224) * C4561 +
           (C4559 * C6225 + C30682 * C6229) * C4557 +
           (C4559 * C6221 + C30682 * C6226) * C4562 +
           (C4559 * C6227 + C30682 * C6230) * C4558) *
              C30933 * C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C116 +
            (C4559 * C127 + C30682 * C138) * C30921) *
               C8903 +
           ((C4559 * C416 + C30682 * C429) * C116 +
            (C4559 * C426 + C30682 * C446) * C30921) *
               C8904 +
           ((C4559 * C417 + C30682 * C430) * C116 +
            (C4559 * C433 + C30682 * C447) * C30921) *
               C8905) *
              C30754 * C30736 * C108 -
          (((C4559 * C434 + C30682 * C448) * C30921 +
            (C4559 * C418 + C30682 * C431) * C116) *
               C8905 +
           ((C4559 * C425 + C30682 * C445) * C30921 +
            (C4559 * C415 + C30682 * C428) * C116) *
               C8904 +
           ((C4559 * C128 + C30682 * C139) * C30921 +
            (C4559 * C118 + C30682 * C125) * C116) *
               C8903) *
              C30754 * C30736 * C109 +
          (((C4559 * C119 + C30682 * C126) * C116 +
            (C4559 * C129 + C30682 * C140) * C30921) *
               C8903 +
           ((C4559 * C414 + C30682 * C427) * C116 +
            (C4559 * C424 + C30682 * C444) * C30921) *
               C8904 +
           ((C4559 * C419 + C30682 * C432) * C116 +
            (C4559 * C435 + C30682 * C449) * C30921) *
               C8905) *
              C30754 * C30736 * C110 -
          (((C4559 * C438 + C30682 * C451) * C30921 +
            (C4559 * C421 + C30682 * C439) * C116) *
               C8905 +
           ((C4559 * C437 + C30682 * C450) * C30921 +
            (C4559 * C420 + C30682 * C436) * C116) *
               C8904 +
           ((C4559 * C130 + C30682 * C141) * C30921 +
            (C4559 * C120 + C30682 * C131) * C116) *
               C8903) *
              C30754 * C30736 * C111 +
          (((C4559 * C121 + C30682 * C132) * C116 +
            (C4559 * C133 + C30682 * C142) * C30921) *
               C8903 +
           ((C4559 * C422 + C30682 * C441) * C116 +
            (C4559 * C440 + C30682 * C452) * C30921) *
               C8904 +
           ((C4559 * C423 + C30682 * C442) * C116 +
            (C4559 * C443 + C30682 * C453) * C30921) *
               C8905) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            ((C4559 * C416 + C30682 * C429) * C116 +
             (C4559 * C426 + C30682 * C446) * C30921) *
                C8904 +
            ((C4559 * C417 + C30682 * C430) * C116 +
             (C4559 * C433 + C30682 * C447) * C30921) *
                C8905) *
               C30754 * C31057 -
           ((C5559 * C30921 + C5558 * C116) * C8905 +
            (C5218 * C30921 + C5219 * C116) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C30754 * C31045 +
           ((C4712 * C116 + C4713 * C30921) * C8903 +
            (C5217 * C116 + C5216 * C30921) * C8904 +
            (C5560 * C116 + C5561 * C30921) * C8905) *
               C30754 * C31020) *
              C258 +
          (((C4716 * C116 + C4717 * C30921) * C8903 +
            (C5220 * C116 + C5221 * C30921) * C8904 +
            (C6393 * C116 + C6392 * C30921) * C8905) *
               C30754 * C31045 -
           (((C4559 * C434 + C30682 * C448) * C30921 +
             (C4559 * C418 + C30682 * C431) * C116) *
                C8905 +
            ((C4559 * C425 + C30682 * C445) * C30921 +
             (C4559 * C415 + C30682 * C428) * C116) *
                C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C30754 * C31057 -
           ((C6390 * C30921 + C6391 * C116) * C8905 +
            (C5223 * C30921 + C5222 * C116) * C8904 +
            (C4719 * C30921 + C4718 * C116) * C8903) *
               C30754 * C31020) *
              C259 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            ((C4559 * C414 + C30682 * C427) * C116 +
             (C4559 * C424 + C30682 * C444) * C30921) *
                C8904 +
            ((C4559 * C419 + C30682 * C432) * C116 +
             (C4559 * C435 + C30682 * C449) * C30921) *
                C8905) *
               C30754 * C31057 -
           (((C4559 * C1159 + C30682 * C1177) * C30921 +
             (C4559 * C1150 + C30682 * C1162) * C116) *
                C8905 +
            (C5226 * C30921 + C5227 * C116) * C8904 +
            (C4723 * C30921 + C4722 * C116) * C8903) *
               C30754 * C31045 +
           ((C4724 * C116 + C4725 * C30921) * C8903 +
            (C5225 * C116 + C5224 * C30921) * C8904 +
            ((C4559 * C1158 + C30682 * C1173) * C116 +
             (C4559 * C1176 + C30682 * C1185) * C30921) *
                C8905) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C31058 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C31047 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 +
            ((C4559 * C1847 + C30682 * C1856) * C116 +
             (C4559 * C1859 + C30682 * C1865) * C30921) *
                C8905) *
               C31023) *
              C30736 * C258 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            (C9191 + C9192) * C8905) *
               C31047 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C31058 -
           (((C4559 * C1860 + C30682 * C1866) * C30921 +
             (C4559 * C1848 + C30682 * C1857) * C116) *
                C8905 +
            (C9192 + C9191) * C8904 + C9200 * C8903) *
               C31023) *
              C30736 * C259 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C31058 -
           ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
            (C9194 + C9193) * C8903) *
               C31047 +
           (C9201 * C8903 + (C9198 + C9197) * C8904 +
            ((C4559 * C1849 + C30682 * C1858) * C116 +
             (C4559 * C1861 + C30682 * C1867) * C30921) *
                C8905) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C30754 * C942 -
           ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C30754 * C943 +
           ((C4712 * C116 + C4713 * C30921) * C8903 +
            (C5217 * C116 + C5216 * C30921) * C8904 +
            (C5560 * C116 + C5561 * C30921) * C8905) *
               C30754 * C31020) *
              C31054 +
          (((C4716 * C116 + C4717 * C30921) * C8903 + (C9564 + C9565) * C8904 +
            (C9566 + C9567) * C8905) *
               C30754 * C943 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C30754 * C942 -
           ((C6390 * C30921 + C6391 * C116) * C8905 +
            (C5223 * C30921 + C5222 * C116) * C8904 +
            (C4719 * C30921 + C4718 * C116) * C8903) *
               C30754 * C31020) *
              C31041 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C30754 * C942 -
           ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
            (C4723 * C30921 + C4722 * C116) * C8903) *
               C30754 * C943 +
           ((C4724 * C116 + C4725 * C30921) * C8903 +
            (C5225 * C116 + C5224 * C30921) * C8904 +
            ((C4559 * C1158 + C30682 * C1173) * C116 +
             (C4559 * C1176 + C30682 * C1185) * C30921) *
                C8905) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C116 +
            (C4559 * C127 + C30682 * C138) * C30921) *
               C8903 +
           (C9181 + C9182) * C8904 + C9199 * C8905) *
              C30754 * C1010 -
          ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
           (C4711 * C30921 + C4710 * C116) * C8903) *
              C30754 * C1011 +
          ((C4712 * C116 + C4713 * C30921) * C8903 +
           (C5217 * C116 + C5216 * C30921) * C8904 +
           (C5560 * C116 + C5561 * C30921) * C8905) *
              C30754 * C1012 -
          ((C5564 * C30921 + C5565 * C116) * C8905 +
           (C5563 * C30921 + C5562 * C116) * C8904 +
           (C4714 * C30921 + C4715 * C116) * C8903) *
              C30754 * C1013 +
          ((C5416 * C116 + C5417 * C30921) * C8903 +
           (C5937 * C116 + C5936 * C30921) * C8904 +
           ((C4559 * C5531 + C30682 * C5536) * C116 +
            (C4559 * C5537 + C30682 * C5540) * C30921) *
               C8905) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C31058 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C31047 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 +
            ((C4559 * C1847 + C30682 * C1856) * C116 +
             (C4559 * C1859 + C30682 * C1865) * C30921) *
                C8905) *
               C31023) *
              C942 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            (C9860 + C9861) * C8905) *
               C31047 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C31058 -
           (((C4559 * C6225 + C30682 * C6229) * C30921 +
             (C4559 * C6220 + C30682 * C6224) * C116) *
                C8905 +
            (C9861 + C9860) * C8904 + C9862 * C8903) *
               C31023) *
              C943 +
          (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
            C9869 * C8905) *
               C31058 -
           ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
            (C9864 + C9863) * C8903) *
               C31047 +
           (C9869 * C8903 + (C9868 + C9867) * C8904 +
            ((C4559 * C6221 + C30682 * C6226) * C116 +
             (C4559 * C6227 + C30682 * C6230) * C30921) *
                C8905) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C1664 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C1665 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 +
            ((C4559 * C1847 + C30682 * C1856) * C116 +
             (C4559 * C1859 + C30682 * C1865) * C30921) *
                C8905) *
               C31023) *
              C30736 * C31054 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            (C9191 + C9192) * C8905) *
               C1665 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C1664 -
           (((C4559 * C1860 + C30682 * C1866) * C30921 +
             (C4559 * C1848 + C30682 * C1857) * C116) *
                C8905 +
            (C9192 + C9191) * C8904 + C9200 * C8903) *
               C31023) *
              C30736 * C31041 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C1664 -
           ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
            (C9194 + C9193) * C8903) *
               C1665 +
           (C9201 * C8903 + (C9198 + C9197) * C8904 +
            ((C4559 * C1849 + C30682 * C1858) * C116 +
             (C4559 * C1861 + C30682 * C1867) * C30921) *
                C8905) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C1664 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C1665 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 +
            ((C4559 * C1847 + C30682 * C1856) * C116 +
             (C4559 * C1859 + C30682 * C1865) * C30921) *
                C8905) *
               C31023) *
              C31057 +
          (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
            (C9860 + C9861) * C8905) *
               C1665 -
           (C9862 * C8905 + (C9561 + C9560) * C8904 +
            (C4711 * C30921 + C4710 * C116) * C8903) *
               C1664 -
           (((C4559 * C6225 + C30682 * C6229) * C30921 +
             (C4559 * C6220 + C30682 * C6224) * C116) *
                C8905 +
            (C9861 + C9860) * C8904 + C9862 * C8903) *
               C31023) *
              C31045 +
          (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
            C9869 * C8905) *
               C1664 -
           ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
            (C9864 + C9863) * C8903) *
               C1665 +
           (C9869 * C8903 + (C9868 + C9867) * C8904 +
            ((C4559 * C6221 + C30682 * C6226) * C116 +
             (C4559 * C6227 + C30682 * C6230) * C30921) *
                C8905) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C116 +
            (C4559 * C127 + C30682 * C138) * C30921) *
               C8903 +
           (C9181 + C9182) * C8904 + C9199 * C8905) *
              C1839 -
          (C10510 * C8905 + (C9184 + C9183) * C8904 + (C9182 + C9181) * C8903) *
              C1840 +
          (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C1841 -
          ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
           C10510 * C8903) *
              C1842 +
          (C10527 * C8903 + (C10526 + C10525) * C8904 +
           ((C4559 * C10502 + C30682 * C10505) * C116 +
            (C4559 * C10506 + C30682 * C10508) * C30921) *
               C8905) *
              C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C30990 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C30841) *
                  C30736 * C554 +
              (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                 C115 * C420 + C103 * C436) *
                    C116 +
                (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                 C115 * C437 + C103 * C450) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C30990) *
                  C30736 * C555 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C30990 -
               ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                 C113 * C424 + C101 * C444) *
                    C30921 +
                (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                 C113 * C414 + C101 * C427) *
                    C116) *
                   C30933 * C30841) *
                  C30736 * C556 +
              (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                 C115 * C662 + C103 * C663) *
                    C116 +
                (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                 C115 * C664 + C103 * C665) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C130 + C101 * C141) *
                    C30921 +
                (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                 C113 * C120 + C101 * C131) *
                    C116) *
                   C30933 * C30990) *
                  C30736 * C31024) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                  C115 * C119 + C103 * C126) *
                     C116 +
                 (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                  C115 * C129 + C103 * C140) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                  C113 * C426 + C101 * C446) *
                     C30921 +
                 (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                  C113 * C416 + C101 * C429) *
                     C116) *
                    C30933 * C30841) *
                   C942 +
               (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                  C115 * C814 + C103 * C819) *
                     C116 +
                 (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                  C115 * C822 + C103 * C829) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                  C113 * C273 + C101 * C293) *
                     C30921 +
                 (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                  C113 * C263 + C101 * C276) *
                     C116) *
                    C30933 * C30990) *
                   C943 +
               (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                  C115 * C266 + C103 * C279) *
                     C116 +
                 (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                  C115 * C282 + C103 * C296) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                  C113 * C1167 + C101 * C1182) *
                     C30921 +
                 (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                  C113 * C1155 + C101 * C1170) *
                     C116) *
                    C30933 * C30841) *
                   C31020) *
                  C30975 +
              ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                  C115 * C420 + C103 * C436) *
                     C116 +
                 (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                  C115 * C437 + C103 * C450) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                  C113 * C128 + C101 * C139) *
                     C30921 +
                 (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                  C113 * C118 + C101 * C125) *
                     C116) *
                    C30933 * C30990) *
                   C942 +
               (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                  C115 * C267 + C103 * C283) *
                     C116 +
                 (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                  C115 * C284 + C103 * C297) *
                     C30921) *
                    C30933 * C30990 -
                ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                  C113 * C821 + C101 * C828) *
                     C30921 +
                 (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                  C113 * C813 + C101 * C818) *
                     C116) *
                    C30933 * C30841) *
                   C943 +
               (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                  C115 * C1440 + C103 * C1441) *
                     C116 +
                 (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                  C115 * C1442 + C103 * C1443) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                  C113 * C281 + C101 * C295) *
                     C30921 +
                 (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                  C113 * C265 + C101 * C278) *
                     C116) *
                    C30933 * C30990) *
                   C31020) *
                  C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C2116 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C2117 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C2118 -
           ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
             C113 * C1852 + C101 * C1864) *
                C30921 +
            (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
             C113 * C1846 + C101 * C1855) *
                C116) *
               C30933 * C31036) *
              C30736 * C30975 +
          (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
             C115 * C420 + C103 * C436) *
                C116 +
            (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
             C115 * C437 + C103 * C450) *
                C30921) *
               C30933 * C2117 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C30921 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C30933 * C2116 -
           ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
             C113 * C434 + C101 * C448) *
                C30921 +
            (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
             C113 * C418 + C101 * C431) *
                C116) *
               C30933 * C2118 +
           ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
             C115 * C2120 + C103 * C2121) *
                C116 +
            (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
             C115 * C2122 + C103 * C2123) *
                C30921) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30990 -
           ((C4559 * C1167 + C30682 * C1182) * C4558 +
            (C4559 * C1155 + C30682 * C1170) * C4562 +
            (C4559 * C820 + C30682 * C827) * C4557 +
            (C4559 * C812 + C30682 * C817) * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30841) *
              C30736 * C554 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 +
            (C4559 * C813 + C30682 * C818) * C4561 +
            (C4559 * C821 + C30682 * C828) * C4557 +
            (C4559 * C1154 + C30682 * C1169) * C4562 +
            (C4559 * C1166 + C30682 * C1181) * C4558) *
               C30933 * C30841 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C30990) *
              C30736 * C555 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C30990 -
           ((C4559 * C1165 + C30682 * C1180) * C4558 +
            (C4559 * C1153 + C30682 * C1168) * C4562 +
            (C4559 * C822 + C30682 * C829) * C4557 +
            (C4559 * C814 + C30682 * C819) * C4561 +
            (C4559 * C424 + C30682 * C444) * C4556 +
            (C4559 * C414 + C30682 * C427) * C4560) *
               C30933 * C30841) *
              C30736 * C556 +
          (((C4559 * C420 + C30682 * C436) * C4560 +
            (C4559 * C437 + C30682 * C450) * C4556 +
            (C4559 * C815 + C30682 * C824) * C4561 +
            (C4559 * C823 + C30682 * C830) * C4557 +
            (C4559 * C1440 + C30682 * C1441) * C4562 +
            (C4559 * C1442 + C30682 * C1443) * C4558) *
               C30933 * C30841 -
           (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 + C4944 * C4561 +
            (C4559 * C130 + C30682 * C141) * C4556 +
            (C4559 * C120 + C30682 * C131) * C4560) *
               C30933 * C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C4560 +
             (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
             C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30933 * C30990 -
            (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
             (C4559 * C426 + C30682 * C446) * C4556 +
             (C4559 * C416 + C30682 * C429) * C4560) *
                C30933 * C30841) *
               C942 +
           ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
             C5562 * C4562 + C5563 * C4558) *
                C30933 * C30841 -
            (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
             C4711 * C4556 + C4710 * C4560) *
                C30933 * C30990) *
               C943 +
           ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
             C5416 * C4562 + C5417 * C4558) *
                C30933 * C30990 -
            ((C4559 * C5534 + C30682 * C5539) * C4558 +
             (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
             C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                C30933 * C30841) *
               C31020) *
              C30975 +
          ((((C4559 * C415 + C30682 * C428) * C4560 +
             (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
             C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                C30933 * C30841 -
            (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
             (C4559 * C128 + C30682 * C139) * C4556 +
             (C4559 * C118 + C30682 * C125) * C4560) *
                C30933 * C30990) *
               C942 +
           ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
             C4720 * C4562 + C4721 * C4558) *
                C30933 * C30990 -
            (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 + C5222 * C4561 +
             C5221 * C4556 + C5220 * C4560) *
                C30933 * C30841) *
               C943 +
           ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 + C5828 * C4557 +
             (C4559 * C5819 + C30682 * C5820) * C4562 +
             (C4559 * C5821 + C30682 * C5822) * C4558) *
                C30933 * C30841 -
            (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 + C4720 * C4561 +
             C4719 * C4556 + C4718 * C4560) *
                C30933 * C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C2116 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C2117 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C2118 -
           ((C4559 * C6222 + C30682 * C6228) * C4558 +
            (C4559 * C6219 + C30682 * C6223) * C4562 +
            (C4559 * C2228 + C30682 * C2231) * C4557 +
            (C4559 * C2222 + C30682 * C2225) * C4561 +
            (C4559 * C1852 + C30682 * C1864) * C4556 +
            (C4559 * C1846 + C30682 * C1855) * C4560) *
               C30933 * C31036) *
              C30736 * C30975 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
            C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
               C30933 * C2117 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C2116 -
           (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 + C6393 * C4561 +
            (C4559 * C434 + C30682 * C448) * C4556 +
            (C4559 * C418 + C30682 * C431) * C4560) *
               C30933 * C2118 +
           ((C4559 * C1845 + C30682 * C1854) * C4560 +
            (C4559 * C1851 + C30682 * C1863) * C4556 +
            (C4559 * C2223 + C30682 * C2226) * C4561 +
            (C4559 * C2229 + C30682 * C2232) * C4557 +
            (C4559 * C6491 + C30682 * C6492) * C4562 +
            (C4559 * C6493 + C30682 * C6494) * C4558) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C30990 -
           ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30841) *
              C30736 * C554 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            (C9191 + C9192) * C8905) *
               C30841 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C30990) *
              C30736 * C555 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C30990 -
           ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
            (C9194 + C9193) * C8903) *
               C30841) *
              C30736 * C556 +
          (((C9410 + C9411) * C8903 + (C9412 + C9413) * C8904 +
            ((C4559 * C2120 + C30682 * C2121) * C116 +
             (C4559 * C2122 + C30682 * C2123) * C30921) *
                C8905) *
               C30841 -
           ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
            ((C4559 * C130 + C30682 * C141) * C30921 +
             (C4559 * C120 + C30682 * C131) * C116) *
                C8903) *
               C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4559 * C117 + C30682 * C124) * C116 +
              (C4559 * C127 + C30682 * C138) * C30921) *
                 C8903 +
             (C9181 + C9182) * C8904 + C9199 * C8905) *
                C30990 -
            ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
             (C9182 + C9181) * C8903) *
                C30841) *
               C942 +
           (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
             (C9860 + C9861) * C8905) *
                C30841 -
            (C9862 * C8905 + (C9561 + C9560) * C8904 +
             (C4711 * C30921 + C4710 * C116) * C8903) *
                C30990) *
               C943 +
           (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
             C9869 * C8905) *
                C30990 -
            ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
             (C9864 + C9863) * C8903) *
                C30841) *
               C31020) *
              C30975 +
          ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
             (C9191 + C9192) * C8905) *
                C30841 -
            (C9200 * C8905 + (C9188 + C9187) * C8904 +
             ((C4559 * C128 + C30682 * C139) * C30921 +
              (C4559 * C118 + C30682 * C125) * C116) *
                 C8903) *
                C30990) *
               C942 +
           (((C4716 * C116 + C4717 * C30921) * C8903 + (C9564 + C9565) * C8904 +
             (C9566 + C9567) * C8905) *
                C30990 -
            (((C4559 * C2229 + C30682 * C2232) * C30921 +
              (C4559 * C2223 + C30682 * C2226) * C116) *
                 C8905 +
             (C9567 + C9566) * C8904 + (C9565 + C9564) * C8903) *
                C30841) *
               C943 +
           (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
             ((C4559 * C6491 + C30682 * C6492) * C116 +
              (C4559 * C6493 + C30682 * C6494) * C30921) *
                 C8905) *
                C30841 -
            ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
             (C4719 * C30921 + C4718 * C116) * C8903) *
                C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C2116 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C2117 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C2118 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31036) *
              C30736 * C30975 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            C10789 * C8905) *
               C2117 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C2116 -
           ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
            C9200 * C8903) *
               C2118 +
           (C10789 * C8903 + (C10797 + C10796) * C8904 +
            ((C4559 * C10784 + C30682 * C10785) * C116 +
             (C4559 * C10786 + C30682 * C10787) * C30921) *
                C8905) *
               C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C30921) *
                      C30933 * C30754 * C30736 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C30921 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C30933 * C30754 * C30736 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C30921) *
                      C30933 * C30754 * C30736 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C30921 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C30933 * C30754 * C30736 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C30921) *
                      C30933 * C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C31045 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C31045 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31020) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C31045 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C30921) *
                      C30933 * C30754 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C30921 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C30933 * C30754 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C30921) *
                      C30933 * C30754 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C30921 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C30933 * C30754 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C30921) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C30921) *
                       C30933 * C31023) *
                      C30736 * C31054 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C30921) *
                       C30933 * C1665 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C1664 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C30921 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C30933 * C31023) *
                      C30736 * C31041 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C1664 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C30921 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C30933 * C1665 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C30921) *
                       C30933 * C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C1664 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C1665 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C30921) *
                       C30933 * C31023) *
                      C31057 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C30921) *
                       C30933 * C1665 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C1664 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C30921 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C30933 * C31023) *
                      C31045 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C1664 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C30921 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C30933 * C1665 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C30921) *
                       C30933 * C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 +
                   (C4559 * C263 + C30682 * C276) * C4561 +
                   (C4559 * C273 + C30682 * C293) * C4557 +
                   (C4559 * C264 + C30682 * C277) * C4562 +
                   (C4559 * C280 + C30682 * C294) * C4558) *
                      C30933 * C30754 * C30736 * C108 -
                  ((C4559 * C281 + C30682 * C295) * C4558 +
                   (C4559 * C265 + C30682 * C278) * C4562 +
                   (C4559 * C272 + C30682 * C292) * C4557 +
                   (C4559 * C262 + C30682 * C275) * C4561 +
                   (C4559 * C128 + C30682 * C139) * C4556 +
                   (C4559 * C118 + C30682 * C125) * C4560) *
                      C30933 * C30754 * C30736 * C109 +
                  ((C4559 * C119 + C30682 * C126) * C4560 +
                   (C4559 * C129 + C30682 * C140) * C4556 +
                   (C4559 * C261 + C30682 * C274) * C4561 +
                   (C4559 * C271 + C30682 * C291) * C4557 +
                   (C4559 * C266 + C30682 * C279) * C4562 +
                   (C4559 * C282 + C30682 * C296) * C4558) *
                      C30933 * C30754 * C30736 * C110 -
                  ((C4559 * C285 + C30682 * C298) * C4558 +
                   (C4559 * C268 + C30682 * C286) * C4562 +
                   (C4559 * C284 + C30682 * C297) * C4557 +
                   (C4559 * C267 + C30682 * C283) * C4561 +
                   (C4559 * C130 + C30682 * C141) * C4556 +
                   (C4559 * C120 + C30682 * C131) * C4560) *
                      C30933 * C30754 * C30736 * C111 +
                  ((C4559 * C121 + C30682 * C132) * C4560 +
                   (C4559 * C133 + C30682 * C142) * C4556 +
                   (C4559 * C269 + C30682 * C288) * C4561 +
                   (C4559 * C287 + C30682 * C299) * C4557 +
                   (C4559 * C270 + C30682 * C289) * C4562 +
                   (C4559 * C290 + C30682 * C300) * C4558) *
                      C30933 * C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C258 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C31045 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C31057 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C259 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C943 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C942 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                   C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                      C30933 * C30754 * C1010 -
                  (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                   C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                      C30933 * C30754 * C1011 +
                  (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                   C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                      C30933 * C30754 * C1012 -
                  (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                   C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                      C30933 * C30754 * C1013 +
                  (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                   C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                   (C4559 * C5404 + C30682 * C5406) * C4558) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C1664 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C1665 +
                   ((C4559 * C417 + C30682 * C430) * C4560 +
                    (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                    C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                       C30933 * C31023) *
                      C30736 * C31054 +
                  (((C4559 * C415 + C30682 * C428) * C4560 +
                    (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                    C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                       C30933 * C1665 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C1664 -
                   ((C4559 * C1175 + C30682 * C1184) * C4558 +
                    (C4559 * C1157 + C30682 * C1172) * C4562 +
                    (C4559 * C1160 + C30682 * C1178) * C4557 +
                    (C4559 * C1151 + C30682 * C1163) * C4561 +
                    (C4559 * C434 + C30682 * C448) * C4556 +
                    (C4559 * C418 + C30682 * C431) * C4560) *
                       C30933 * C31023) *
                      C30736 * C31041 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C1664 -
                   (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                    C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                    (C4559 * C414 + C30682 * C427) * C4560) *
                       C30933 * C1665 +
                   ((C4559 * C419 + C30682 * C432) * C4560 +
                    (C4559 * C435 + C30682 * C449) * C4556 +
                    (C4559 * C1150 + C30682 * C1162) * C4561 +
                    (C4559 * C1159 + C30682 * C1177) * C4557 +
                    (C4559 * C1158 + C30682 * C1173) * C4562 +
                    (C4559 * C1176 + C30682 * C1185) * C4558) *
                       C30933 * C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C1664 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C1665 +
                   ((C4559 * C417 + C30682 * C430) * C4560 +
                    (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                    C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                       C30933 * C31023) *
                      C31057 +
                  ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                    C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                       C30933 * C1665 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C1664 -
                   (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                    C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                       C30933 * C31023) *
                      C31045 +
                  ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C1664 -
                   (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                    C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                       C30933 * C1665 +
                   (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                    C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                    (C4559 * C5537 + C30682 * C5540) * C4558) *
                       C30933 * C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   ((C4559 * C416 + C30682 * C429) * C116 +
                    (C4559 * C426 + C30682 * C446) * C30921) *
                       C8904 +
                   ((C4559 * C417 + C30682 * C430) * C116 +
                    (C4559 * C433 + C30682 * C447) * C30921) *
                       C8905) *
                      C30754 * C30736 * C108 -
                  (((C4559 * C434 + C30682 * C448) * C30921 +
                    (C4559 * C418 + C30682 * C431) * C116) *
                       C8905 +
                   ((C4559 * C425 + C30682 * C445) * C30921 +
                    (C4559 * C415 + C30682 * C428) * C116) *
                       C8904 +
                   ((C4559 * C128 + C30682 * C139) * C30921 +
                    (C4559 * C118 + C30682 * C125) * C116) *
                       C8903) *
                      C30754 * C30736 * C109 +
                  (((C4559 * C119 + C30682 * C126) * C116 +
                    (C4559 * C129 + C30682 * C140) * C30921) *
                       C8903 +
                   ((C4559 * C414 + C30682 * C427) * C116 +
                    (C4559 * C424 + C30682 * C444) * C30921) *
                       C8904 +
                   ((C4559 * C419 + C30682 * C432) * C116 +
                    (C4559 * C435 + C30682 * C449) * C30921) *
                       C8905) *
                      C30754 * C30736 * C110 -
                  (((C4559 * C438 + C30682 * C451) * C30921 +
                    (C4559 * C421 + C30682 * C439) * C116) *
                       C8905 +
                   ((C4559 * C437 + C30682 * C450) * C30921 +
                    (C4559 * C420 + C30682 * C436) * C116) *
                       C8904 +
                   ((C4559 * C130 + C30682 * C141) * C30921 +
                    (C4559 * C120 + C30682 * C131) * C116) *
                       C8903) *
                      C30754 * C30736 * C111 +
                  (((C4559 * C121 + C30682 * C132) * C116 +
                    (C4559 * C133 + C30682 * C142) * C30921) *
                       C8903 +
                   ((C4559 * C422 + C30682 * C441) * C116 +
                    (C4559 * C440 + C30682 * C452) * C30921) *
                       C8904 +
                   ((C4559 * C423 + C30682 * C442) * C116 +
                    (C4559 * C443 + C30682 * C453) * C30921) *
                       C8905) *
                      C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    ((C4559 * C416 + C30682 * C429) * C116 +
                     (C4559 * C426 + C30682 * C446) * C30921) *
                        C8904 +
                    ((C4559 * C417 + C30682 * C430) * C116 +
                     (C4559 * C433 + C30682 * C447) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   ((C5559 * C30921 + C5558 * C116) * C8905 +
                    (C5218 * C30921 + C5219 * C116) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C258 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C5220 * C116 + C5221 * C30921) * C8904 +
                    (C6393 * C116 + C6392 * C30921) * C8905) *
                       C30754 * C31045 -
                   (((C4559 * C434 + C30682 * C448) * C30921 +
                     (C4559 * C418 + C30682 * C431) * C116) *
                        C8905 +
                    ((C4559 * C425 + C30682 * C445) * C30921 +
                     (C4559 * C415 + C30682 * C428) * C116) *
                        C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C31057 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C259 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    ((C4559 * C414 + C30682 * C427) * C116 +
                     (C4559 * C424 + C30682 * C444) * C30921) *
                        C8904 +
                    ((C4559 * C419 + C30682 * C432) * C116 +
                     (C4559 * C435 + C30682 * C449) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   (((C4559 * C1159 + C30682 * C1177) * C30921 +
                     (C4559 * C1150 + C30682 * C1162) * C116) *
                        C8905 +
                    (C5226 * C30921 + C5227 * C116) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C942 -
                   ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C31054 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                       C30754 * C943 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C942 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C31041 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C942 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   (C9181 + C9182) * C8904 + C9199 * C8905) *
                      C30754 * C1010 -
                  ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                   (C4711 * C30921 + C4710 * C116) * C8903) *
                      C30754 * C1011 +
                  ((C4712 * C116 + C4713 * C30921) * C8903 +
                   (C5217 * C116 + C5216 * C30921) * C8904 +
                   (C5560 * C116 + C5561 * C30921) * C8905) *
                      C30754 * C1012 -
                  ((C5564 * C30921 + C5565 * C116) * C8905 +
                   (C5563 * C30921 + C5562 * C116) * C8904 +
                   (C4714 * C30921 + C4715 * C116) * C8903) *
                      C30754 * C1013 +
                  ((C5416 * C116 + C5417 * C30921) * C8903 +
                   (C5937 * C116 + C5936 * C30921) * C8904 +
                   ((C4559 * C5531 + C30682 * C5536) * C116 +
                    (C4559 * C5537 + C30682 * C5540) * C30921) *
                       C8905) *
                      C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C1664 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C1665 +
                   (C9199 * C8903 + (C9186 + C9185) * C8904 +
                    ((C4559 * C1847 + C30682 * C1856) * C116 +
                     (C4559 * C1859 + C30682 * C1865) * C30921) *
                        C8905) *
                       C31023) *
                      C30736 * C31054 +
                  (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                    (C9191 + C9192) * C8905) *
                       C1665 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C1664 -
                   (((C4559 * C1860 + C30682 * C1866) * C30921 +
                     (C4559 * C1848 + C30682 * C1857) * C116) *
                        C8905 +
                    (C9192 + C9191) * C8904 + C9200 * C8903) *
                       C31023) *
                      C30736 * C31041 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C1664 -
                   ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                    (C9194 + C9193) * C8903) *
                       C1665 +
                   (C9201 * C8903 + (C9198 + C9197) * C8904 +
                    ((C4559 * C1849 + C30682 * C1858) * C116 +
                     (C4559 * C1861 + C30682 * C1867) * C30921) *
                        C8905) *
                       C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C1664 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C1665 +
                   (C9199 * C8903 + (C9186 + C9185) * C8904 +
                    ((C4559 * C1847 + C30682 * C1856) * C116 +
                     (C4559 * C1859 + C30682 * C1865) * C30921) *
                        C8905) *
                       C31023) *
                      C31057 +
                  (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                    (C9860 + C9861) * C8905) *
                       C1665 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C1664 -
                   (((C4559 * C6225 + C30682 * C6229) * C30921 +
                     (C4559 * C6220 + C30682 * C6224) * C116) *
                        C8905 +
                    (C9861 + C9860) * C8904 + C9862 * C8903) *
                       C31023) *
                      C31045 +
                  (((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C1664 -
                   ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                    (C9864 + C9863) * C8903) *
                       C1665 +
                   (C9869 * C8903 + (C9868 + C9867) * C8904 +
                    ((C4559 * C6221 + C30682 * C6226) * C116 +
                     (C4559 * C6227 + C30682 * C6230) * C30921) *
                        C8905) *
                       C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[65] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30989 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C30799) *
                      C30713 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C30989 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C3094 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30799) *
                      C30722 +
                  ((((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C3094 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30989 +
                   ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                     C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                     (C4559 * C1550 + C30682 * C1553) * C4558) *
                        C30933 * C30841 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C3094) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30989 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C30799) *
                      C30713 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C30989 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30799) *
                      C30722 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30989 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C3094) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C3094 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C30989 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C3094) *
                       C30799) *
                      C30713 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C3094) *
                       C30989 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C3094 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C30799) *
                      C30722 +
                  (((((C4559 * C119 + C30682 * C126) * C116 +
                      (C4559 * C129 + C30682 * C140) * C30921) *
                         C8903 +
                     (C9193 + C9194) * C8904 + C9201 * C8905) *
                        C3094 -
                    ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                     (C9194 + C9193) * C8903) *
                        C30841) *
                       C30989 +
                   (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
                     ((C4559 * C2224 + C30682 * C2227) * C116 +
                      (C4559 * C2230 + C30682 * C2233) * C30921) *
                         C8905) *
                        C30841 -
                    ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                     (C4723 * C30921 + C4722 * C116) * C8903) *
                        C3094) *
                       C30799) *
                      C2703)) /
                    (p * q * std::sqrt(p + q));
    d2ee[66] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30837 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30844 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C3602) *
                       C30989 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30844 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30837 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C3602) *
                       C30799) *
                      C2440 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30844 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30837 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C3602) *
                       C30989 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30837 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30844 +
                    (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                     C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                     (C4559 * C6379 + C30682 * C6380) * C4558) *
                        C30933 * C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C3602) *
                       C30989 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C3602) *
                       C30799) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C3602) *
                       C30989 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                      C102 * C1162 + C115 * C2014 + C103 * C2015) *
                         C116 +
                     (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                      C102 * C1177 + C115 * C2016 + C103 * C2017) *
                         C30921) *
                        C30933 * C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30837 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30844 +
                    (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) *
                        C3602) *
                       C30989 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30844 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30837 -
                    ((C10907 + C10908) * C8905 + (C9861 + C9860) * C8904 +
                     C9862 * C8903) *
                        C3602) *
                       C30799) *
                      C2440 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30844 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30837 -
                    ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
                     C9200 * C8903) *
                        C3602) *
                       C30989 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C30837 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30844 +
                    (C10678 * C8903 + (C10686 + C10685) * C8904 +
                     ((C4559 * C10673 + C30682 * C10674) * C116 +
                      (C4559 * C10675 + C30682 * C10676) * C30921) *
                         C8905) *
                        C3602) *
                       C30799) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                 C115 * C119 + C103 * C126) *
                    C116 +
                (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                 C115 * C129 + C103 * C140) *
                    C30921) *
                   C30933 * C3094 -
               ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                 C113 * C426 + C101 * C446) *
                    C30921 +
                (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                 C113 * C416 + C101 * C429) *
                    C116) *
                   C30933 * C30841) *
                  C30736 * C31063 +
              (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                 C115 * C420 + C103 * C436) *
                    C116 +
                (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                 C115 * C437 + C103 * C450) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                 C113 * C128 + C101 * C139) *
                    C30921 +
                (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                 C113 * C118 + C101 * C125) *
                    C116) *
                   C30933 * C3094) *
                  C30736 * C31056 +
              (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                 C115 * C121 + C103 * C132) *
                    C116 +
                (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                 C115 * C133 + C103 * C142) *
                    C30921) *
                   C30933 * C3094 -
               ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                 C113 * C424 + C101 * C444) *
                    C30921 +
                (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                 C113 * C414 + C101 * C427) *
                    C116) *
                   C30933 * C30841) *
                  C30736 * C31043 +
              (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                 C115 * C662 + C103 * C663) *
                    C116 +
                (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                 C115 * C664 + C103 * C665) *
                    C30921) *
                   C30933 * C30841 -
               ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                 C113 * C130 + C101 * C141) *
                    C30921 +
                (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                 C113 * C120 + C101 * C131) *
                    C116) *
                   C30933 * C3094) *
                  C30736 * C31024) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                  C115 * C119 + C103 * C126) *
                     C116 +
                 (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                  C115 * C129 + C103 * C140) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                  C113 * C426 + C101 * C446) *
                     C30921 +
                 (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                  C113 * C416 + C101 * C429) *
                     C116) *
                    C30933 * C30841) *
                   C31057 +
               (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                  C115 * C814 + C103 * C819) *
                     C116 +
                 (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                  C115 * C822 + C103 * C829) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                  C113 * C273 + C101 * C293) *
                     C30921 +
                 (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                  C113 * C263 + C101 * C276) *
                     C116) *
                    C30933 * C3094) *
                   C31045 +
               (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                  C115 * C266 + C103 * C279) *
                     C116 +
                 (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                  C115 * C282 + C103 * C296) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                  C113 * C1167 + C101 * C1182) *
                     C30921 +
                 (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                  C113 * C1155 + C101 * C1170) *
                     C116) *
                    C30933 * C30841) *
                   C31020) *
                  C2440 +
              ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                  C115 * C420 + C103 * C436) *
                     C116 +
                 (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                  C115 * C437 + C103 * C450) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                  C113 * C128 + C101 * C139) *
                     C30921 +
                 (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                  C113 * C118 + C101 * C125) *
                     C116) *
                    C30933 * C3094) *
                   C31057 +
               (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                  C115 * C267 + C103 * C283) *
                     C116 +
                 (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                  C115 * C284 + C103 * C297) *
                     C30921) *
                    C30933 * C3094 -
                ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                  C113 * C821 + C101 * C828) *
                     C30921 +
                 (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                  C113 * C813 + C101 * C818) *
                     C116) *
                    C30933 * C30841) *
                   C31045 +
               (((C113 * C1154 + C101 * C1169 + C114 * C1153 + C102 * C1168 +
                  C115 * C1440 + C103 * C1441) *
                     C116 +
                 (C113 * C1166 + C101 * C1181 + C114 * C1165 + C102 * C1180 +
                  C115 * C1442 + C103 * C1443) *
                     C30921) *
                    C30933 * C30841 -
                ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                  C113 * C281 + C101 * C295) *
                     C30921 +
                 (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                  C113 * C265 + C101 * C278) *
                     C116) *
                    C30933 * C3094) *
                   C31020) *
                  C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C31065 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C31062 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C31053 -
           ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
             C113 * C1852 + C101 * C1864) *
                C30921 +
            (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
             C113 * C1846 + C101 * C1855) *
                C116) *
               C30933 * C31036) *
              C30736 * C2440 +
          (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
             C115 * C420 + C103 * C436) *
                C116 +
            (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
             C115 * C437 + C103 * C450) *
                C30921) *
               C30933 * C31062 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C30921 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C30933 * C31065 -
           ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
             C113 * C434 + C101 * C448) *
                C30921 +
            (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
             C113 * C418 + C101 * C431) *
                C116) *
               C30933 * C31053 +
           ((C113 * C1845 + C101 * C1854 + C114 * C1844 + C102 * C1853 +
             C115 * C2120 + C103 * C2121) *
                C116 +
            (C113 * C1851 + C101 * C1863 + C114 * C1850 + C102 * C1862 +
             C115 * C2122 + C103 * C2123) *
                C30921) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C3094 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30841) *
              C30736 * C31063 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
            C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
               C30933 * C30841 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C3094) *
              C30736 * C31056 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C3094 -
           (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 + C5227 * C4561 +
            (C4559 * C424 + C30682 * C444) * C4556 +
            (C4559 * C414 + C30682 * C427) * C4560) *
               C30933 * C30841) *
              C30736 * C31043 +
          (((C4559 * C420 + C30682 * C436) * C4560 +
            (C4559 * C437 + C30682 * C450) * C4556 +
            (C4559 * C815 + C30682 * C824) * C4561 +
            (C4559 * C823 + C30682 * C830) * C4557 +
            (C4559 * C1440 + C30682 * C1441) * C4562 +
            (C4559 * C1442 + C30682 * C1443) * C4558) *
               C30933 * C30841 -
           (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 + C4944 * C4561 +
            (C4559 * C130 + C30682 * C141) * C4556 +
            (C4559 * C120 + C30682 * C131) * C4560) *
               C30933 * C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C4560 +
             (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
             C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                C30933 * C3094 -
            (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
             (C4559 * C426 + C30682 * C446) * C4556 +
             (C4559 * C416 + C30682 * C429) * C4560) *
                C30933 * C30841) *
               C31057 +
           ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 + C5216 * C4557 +
             C5562 * C4562 + C5563 * C4558) *
                C30933 * C30841 -
            (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 + C4712 * C4561 +
             C4711 * C4556 + C4710 * C4560) *
                C30933 * C3094) *
               C31045 +
           ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 + C4714 * C4557 +
             C5416 * C4562 + C5417 * C4558) *
                C30933 * C3094 -
            (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 + C5562 * C4561 +
             C5216 * C4556 + C5217 * C4560) *
                C30933 * C30841) *
               C31020) *
              C2440 +
          ((((C4559 * C415 + C30682 * C428) * C4560 +
             (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
             C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                C30933 * C30841 -
            (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
             (C4559 * C128 + C30682 * C139) * C4556 +
             (C4559 * C118 + C30682 * C125) * C4560) *
                C30933 * C3094) *
               C31057 +
           ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 + C4719 * C4557 +
             C4720 * C4562 + C4721 * C4558) *
                C30933 * C3094 -
            (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 + C5222 * C4561 +
             C5221 * C4556 + C5220 * C4560) *
                C30933 * C30841) *
               C31045 +
           ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 + C5828 * C4557 +
             (C4559 * C5819 + C30682 * C5820) * C4562 +
             (C4559 * C5821 + C30682 * C5822) * C4558) *
                C30933 * C30841 -
            (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 + C4720 * C4561 +
             C4719 * C4556 + C4718 * C4560) *
                C30933 * C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C31065 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C31062 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C31053 -
           (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 + C6609 * C4561 +
            (C4559 * C1852 + C30682 * C1864) * C4556 +
            (C4559 * C1846 + C30682 * C1855) * C4560) *
               C30933 * C31036) *
              C30736 * C2440 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
            C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
               C30933 * C31062 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C31065 -
           (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 + C6393 * C4561 +
            (C4559 * C434 + C30682 * C448) * C4556 +
            (C4559 * C418 + C30682 * C431) * C4560) *
               C30933 * C31053 +
           ((C4559 * C1845 + C30682 * C1854) * C4560 +
            (C4559 * C1851 + C30682 * C1863) * C4556 +
            (C4559 * C2223 + C30682 * C2226) * C4561 +
            (C4559 * C2229 + C30682 * C2232) * C4557 +
            (C4559 * C6491 + C30682 * C6492) * C4562 +
            (C4559 * C6493 + C30682 * C6494) * C4558) *
               C30933 * C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C3094 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30841) *
              C30736 * C31063 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            C10789 * C8905) *
               C30841 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C3094) *
              C30736 * C31056 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C3094 -
           ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
            (C9194 + C9193) * C8903) *
               C30841) *
              C30736 * C31043 +
          (((C9410 + C9411) * C8903 + (C9412 + C9413) * C8904 +
            ((C4559 * C2120 + C30682 * C2121) * C116 +
             (C4559 * C2122 + C30682 * C2123) * C30921) *
                C8905) *
               C30841 -
           ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
            ((C4559 * C130 + C30682 * C141) * C30921 +
             (C4559 * C120 + C30682 * C131) * C116) *
                C8903) *
               C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4559 * C117 + C30682 * C124) * C116 +
              (C4559 * C127 + C30682 * C138) * C30921) *
                 C8903 +
             (C9181 + C9182) * C8904 + C9199 * C8905) *
                C3094 -
            (C10510 * C8905 + (C9184 + C9183) * C8904 +
             (C9182 + C9181) * C8903) *
                C30841) *
               C31057 +
           (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
             C10900 * C8905) *
                C30841 -
            (C9862 * C8905 + (C9561 + C9560) * C8904 +
             (C4711 * C30921 + C4710 * C116) * C8903) *
                C3094) *
               C31045 +
           (((C4712 * C116 + C4713 * C30921) * C8903 + (C9863 + C9864) * C8904 +
             C9869 * C8905) *
                C3094 -
            ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
             (C9864 + C9863) * C8903) *
                C30841) *
               C31020) *
              C2440 +
          ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
             C10789 * C8905) *
                C30841 -
            (C9200 * C8905 + (C9188 + C9187) * C8904 +
             ((C4559 * C128 + C30682 * C139) * C30921 +
              (C4559 * C118 + C30682 * C125) * C116) *
                 C8903) *
                C3094) *
               C31057 +
           (((C4716 * C116 + C4717 * C30921) * C8903 + (C9564 + C9565) * C8904 +
             C10678 * C8905) *
                C3094 -
            ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
             (C9565 + C9564) * C8903) *
                C30841) *
               C31045 +
           (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
             ((C4559 * C6491 + C30682 * C6492) * C116 +
              (C4559 * C6493 + C30682 * C6494) * C30921) *
                 C8905) *
                C30841 -
            ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
             (C4719 * C30921 + C4718 * C116) * C8903) *
                C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C31065 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C31062 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C31053 -
           ((C10525 + C10526) * C8905 + (C10524 + C10523) * C8904 +
            C10510 * C8903) *
               C31036) *
              C30736 * C2440 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            C10789 * C8905) *
               C31062 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C31065 -
           ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
            C9200 * C8903) *
               C31053 +
           (C10789 * C8903 + (C10797 + C10796) * C8904 +
            ((C4559 * C10784 + C30682 * C10785) * C116 +
             (C4559 * C10786 + C30682 * C10787) * C30921) *
                C8905) *
               C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4559 * C117 + C30682 * C124) * C4560 +
            (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
            C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
               C30933 * C30837 -
           (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 + C5219 * C4561 +
            (C4559 * C426 + C30682 * C446) * C4556 +
            (C4559 * C416 + C30682 * C429) * C4560) *
               C30933 * C30844 +
           ((C4559 * C417 + C30682 * C430) * C4560 +
            (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
            C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
               C30933 * C3602) *
              C30736 * C30713 +
          (((C4559 * C415 + C30682 * C428) * C4560 +
            (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
            C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
               C30933 * C30844 -
           (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 + C4716 * C4561 +
            (C4559 * C128 + C30682 * C139) * C4556 +
            (C4559 * C118 + C30682 * C125) * C4560) *
               C30933 * C30837 -
           (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 + C6393 * C4561 +
            (C4559 * C434 + C30682 * C448) * C4556 +
            (C4559 * C418 + C30682 * C431) * C4560) *
               C30933 * C3602) *
              C30736 * C30722 +
          (((C4559 * C119 + C30682 * C126) * C4560 +
            (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
            C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
               C30933 * C30837 -
           (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 + C5227 * C4561 +
            (C4559 * C424 + C30682 * C444) * C4556 +
            (C4559 * C414 + C30682 * C427) * C4560) *
               C30933 * C30844 +
           ((C4559 * C419 + C30682 * C432) * C4560 +
            (C4559 * C435 + C30682 * C449) * C4556 +
            (C4559 * C1150 + C30682 * C1162) * C4561 +
            (C4559 * C1159 + C30682 * C1177) * C4557 +
            (C4559 * C1158 + C30682 * C1173) * C4562 +
            (C4559 * C1176 + C30682 * C1185) * C4558) *
               C30933 * C3602) *
              C30736 * C2703)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
             C115 * C119 + C103 * C126) *
                C116 +
            (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
             C115 * C129 + C103 * C140) *
                C30921) *
               C30933 * C30837 -
           ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
             C113 * C426 + C101 * C446) *
                C30921 +
            (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
             C113 * C416 + C101 * C429) *
                C116) *
               C30933 * C30844 +
           ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
             C115 * C419 + C103 * C432) *
                C116 +
            (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
             C115 * C435 + C103 * C449) *
                C30921) *
               C30933 * C3602) *
              C30736 * C30713 +
          (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
             C115 * C420 + C103 * C436) *
                C116 +
            (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
             C115 * C437 + C103 * C450) *
                C30921) *
               C30933 * C30844 -
           ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
             C113 * C128 + C101 * C139) *
                C30921 +
            (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
             C113 * C118 + C101 * C125) *
                C116) *
               C30933 * C30837 -
           ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
             C113 * C434 + C101 * C448) *
                C30921 +
            (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
             C113 * C418 + C101 * C431) *
                C116) *
               C30933 * C3602) *
              C30736 * C30722 +
          (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
             C115 * C121 + C103 * C132) *
                C116 +
            (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
             C115 * C133 + C103 * C142) *
                C30921) *
               C30933 * C30837 -
           ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
             C113 * C424 + C101 * C444) *
                C30921 +
            (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
             C113 * C414 + C101 * C427) *
                C116) *
               C30933 * C30844 +
           ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
             C115 * C423 + C103 * C442) *
                C116 +
            (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
             C115 * C443 + C103 * C453) *
                C30921) *
               C30933 * C3602) *
              C30736 * C2703)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4559 * C117 + C30682 * C124) * C116 +
             (C4559 * C127 + C30682 * C138) * C30921) *
                C8903 +
            (C9181 + C9182) * C8904 + C9199 * C8905) *
               C30837 -
           (C10510 * C8905 + (C9184 + C9183) * C8904 +
            (C9182 + C9181) * C8903) *
               C30844 +
           (C9199 * C8903 + (C9186 + C9185) * C8904 + C10527 * C8905) * C3602) *
              C30736 * C30713 +
          (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
            C10789 * C8905) *
               C30844 -
           (C9200 * C8905 + (C9188 + C9187) * C8904 +
            ((C4559 * C128 + C30682 * C139) * C30921 +
             (C4559 * C118 + C30682 * C125) * C116) *
                C8903) *
               C30837 -
           ((C10796 + C10797) * C8905 + (C9192 + C9191) * C8904 +
            C9200 * C8903) *
               C3602) *
              C30736 * C30722 +
          ((((C4559 * C119 + C30682 * C126) * C116 +
             (C4559 * C129 + C30682 * C140) * C30921) *
                C8903 +
            (C9193 + C9194) * C8904 + C9201 * C8905) *
               C30837 -
           ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
            (C9194 + C9193) * C8903) *
               C30844 +
           (C9201 * C8903 + (C9198 + C9197) * C8904 +
            ((C4559 * C1849 + C30682 * C1858) * C116 +
             (C4559 * C1861 + C30682 * C1867) * C30921) *
                C8905) *
               C3602) *
              C30736 * C2703)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C31057 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C31045 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C31020) *
                      C2440 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C31057 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C31045 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C3094) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C3094 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C30841) *
                      C30736 * C31063 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C3094) *
                      C30736 * C31056 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C3094 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C30921 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C30933 * C30841) *
                      C30736 * C31043 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C3094) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C3094 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C30841) *
                      C30736 * C31063 +
                  (((C4559 * C415 + C30682 * C428) * C4560 +
                    (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                    C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                       C30933 * C30841 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C3094) *
                      C30736 * C31056 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C3094 -
                   (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                    C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                    (C4559 * C414 + C30682 * C427) * C4560) *
                       C30933 * C30841) *
                      C30736 * C31043 +
                  (((C4559 * C420 + C30682 * C436) * C4560 +
                    (C4559 * C437 + C30682 * C450) * C4556 +
                    (C4559 * C815 + C30682 * C824) * C4561 +
                    (C4559 * C823 + C30682 * C830) * C4557 +
                    (C4559 * C1440 + C30682 * C1441) * C4562 +
                    (C4559 * C1442 + C30682 * C1443) * C4558) *
                       C30933 * C30841 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C3094) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C31057 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C31045 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C3094 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C31020) *
                      C2440 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C31057 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C3094 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C31045 +
                   ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                     C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                     (C4559 * C5821 + C30682 * C5822) * C4558) *
                        C30933 * C30841 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C3094) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C3094 -
                   (C10510 * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C30841) *
                      C30736 * C31063 +
                  (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                    C10789 * C8905) *
                       C30841 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C3094) *
                      C30736 * C31056 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C3094 -
                   ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                    (C9194 + C9193) * C8903) *
                       C30841) *
                      C30736 * C31043 +
                  (((C9410 + C9411) * C8903 + (C9412 + C9413) * C8904 +
                    ((C4559 * C2120 + C30682 * C2121) * C116 +
                     (C4559 * C2122 + C30682 * C2123) * C30921) *
                        C8905) *
                       C30841 -
                   ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C3094) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C3094 -
                    (C10510 * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C31057 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     C10900 * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C3094) *
                       C31045 +
                   (((C4712 * C116 + C4713 * C30921) * C8903 +
                     (C9863 + C9864) * C8904 + C9869 * C8905) *
                        C3094 -
                    ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                     (C9864 + C9863) * C8903) *
                        C30841) *
                       C31020) *
                      C2440 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     C10789 * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C3094) *
                       C31057 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + C10678 * C8905) *
                        C3094 -
                    ((C10685 + C10686) * C8905 + (C9567 + C9566) * C8904 +
                     (C9565 + C9564) * C8903) *
                        C30841) *
                       C31045 +
                   (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
                     ((C4559 * C6491 + C30682 * C6492) * C116 +
                      (C4559 * C6493 + C30682 * C6494) * C30921) *
                         C8905) *
                        C30841 -
                    ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                     (C4719 * C30921 + C4718 * C116) * C8903) *
                        C3094) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[70] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C1284 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C1285 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C1286 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C31030) *
                      C30975 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C1285 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C1284 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C1286 +
                   ((C113 * C1017 + C101 * C1026 + C114 * C1016 + C102 * C1025 +
                     C115 * C1290 + C103 * C1291) *
                        C116 +
                    (C113 * C1023 + C101 * C1035 + C114 * C1022 + C102 * C1034 +
                     C115 * C1292 + C103 * C1293) *
                        C30921) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C30989 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C30799) *
                      C554 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C30799 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C30989) *
                      C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C30989 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C30799) *
                      C556 +
                  (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                     C115 * C558 + C103 * C559) *
                        C116 +
                    (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                     C115 * C560 + C103 * C561) *
                        C30921) *
                       C30933 * C30754 * C30799 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C30989 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C30799) *
                      C554 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30989) *
                      C555 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C30989 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C30799) *
                      C556 +
                  ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                    C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                    (C4559 * C1292 + C30682 * C1293) * C4558) *
                       C30933 * C30754 * C30799 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1284 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1285 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1286 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C31030) *
                      C30975 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C1285 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C1284 -
                   (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C1286 +
                   (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                    C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                    (C4559 * C5665 + C30682 * C5666) * C4558) *
                       C30933 * C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C30989 -
                   ((C5559 * C30921 + C5558 * C116) * C8905 +
                    (C5218 * C30921 + C5219 * C116) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C30799) *
                      C554 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C5220 * C116 + C5221 * C30921) * C8904 +
                    (C6393 * C116 + C6392 * C30921) * C8905) *
                       C30754 * C30799 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C30989) *
                      C555 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C30989 -
                   (((C4559 * C1159 + C30682 * C1177) * C30921 +
                     (C4559 * C1150 + C30682 * C1162) * C116) *
                        C8905 +
                    (C5226 * C30921 + C5227 * C116) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C30799) *
                      C556 +
                  (((C4944 * C116 + C4945 * C30921) * C8903 +
                    ((C4559 * C815 + C30682 * C824) * C116 +
                     (C4559 * C823 + C30682 * C830) * C30921) *
                        C8904 +
                    ((C4559 * C2014 + C30682 * C2015) * C116 +
                     (C4559 * C2016 + C30682 * C2017) * C30921) *
                        C8905) *
                       C30754 * C30799 -
                   (((C4559 * C438 + C30682 * C451) * C30921 +
                     (C4559 * C421 + C30682 * C439) * C116) *
                        C8905 +
                    ((C4559 * C437 + C30682 * C450) * C30921 +
                     (C4559 * C420 + C30682 * C436) * C116) *
                        C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C30754 * C30989) *
                      C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C1284 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C1285 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30754 * C1286 -
                   ((C5564 * C30921 + C5565 * C116) * C8905 +
                    (C5563 * C30921 + C5562 * C116) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C30754 * C31030) *
                      C30975 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                       C30754 * C1285 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C1284 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C1286 +
                   ((C4720 * C116 + C4721 * C30921) * C8903 +
                    (C5829 * C116 + C5828 * C30921) * C8904 +
                    ((C4559 * C6377 + C30682 * C6378) * C116 +
                     (C4559 * C6379 + C30682 * C6380) * C30921) *
                        C8905) *
                       C30754 * C31030) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[71] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30990 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C30841) *
                      C1284 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30990) *
                      C1285 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30990 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C30921 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C30933 * C30841) *
                      C1286 +
                  (((C113 * C1542 + C101 * C1545 + C114 * C1543 + C102 * C1546 +
                     C115 * C1544 + C103 * C1547) *
                        C116 +
                    (C113 * C1548 + C101 * C1551 + C114 * C1549 + C102 * C1552 +
                     C115 * C1550 + C103 * C1553) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30990) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30989 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C30799) *
                      C258 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C30989 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C30799) *
                      C259 +
                  ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30989 +
                   (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                      C115 * C816 + C103 * C825) *
                         C116 +
                     (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                      C115 * C826 + C103 * C831) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30990) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30989 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + (C4559 * C1542 + C30682 * C1545) * C4562 +
                     (C4559 * C1548 + C30682 * C1551) * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C30799) *
                      C258 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C30989 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C1549 + C30682 * C1552) * C4558 +
                     (C4559 * C1543 + C30682 * C1546) * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C30799) *
                      C259 +
                  ((((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30990 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30989 +
                   ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                     C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                     (C4559 * C1550 + C30682 * C1553) * C4558) *
                        C30933 * C30841 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30990) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30990 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C30841) *
                      C1284 +
                  ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                    C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                       C30933 * C30841 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30990) *
                      C1285 +
                  ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30990 -
                   (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                    C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                       C30933 * C30841) *
                      C1286 +
                  ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                    C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                    (C4559 * C5929 + C30682 * C5930) * C4558) *
                       C30933 * C30841 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30990) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30990 -
                    ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C30989 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     (C6609 * C116 + C6608 * C30921) * C8905) *
                        C30841 -
                    ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30990) *
                       C30799) *
                      C258 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     (C9191 + C9192) * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30990) *
                       C30989 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                        C30990 -
                    (((C4559 * C2229 + C30682 * C2232) * C30921 +
                      (C4559 * C2223 + C30682 * C2226) * C116) *
                         C8905 +
                     (C9567 + C9566) * C8904 + (C9565 + C9564) * C8903) *
                        C30841) *
                       C30799) *
                      C259 +
                  (((((C4559 * C119 + C30682 * C126) * C116 +
                      (C4559 * C129 + C30682 * C140) * C30921) *
                         C8903 +
                     (C9193 + C9194) * C8904 + C9201 * C8905) *
                        C30990 -
                    ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                     (C9194 + C9193) * C8903) *
                        C30841) *
                       C30989 +
                   (((C9568 + C9569) * C8903 + (C9576 + C9577) * C8904 +
                     ((C4559 * C2224 + C30682 * C2227) * C116 +
                      (C4559 * C2230 + C30682 * C2233) * C30921) *
                         C8905) *
                        C30841 -
                    ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                     (C4723 * C30921 + C4722 * C116) * C8903) *
                        C30990) *
                       C30799) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30990 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C30841) *
                      C1284 +
                  (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                    (C9860 + C9861) * C8905) *
                       C30841 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30990) *
                      C1285 +
                  (((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C30990 -
                   ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                    (C9864 + C9863) * C8903) *
                       C30841) *
                      C1286 +
                  (((C10216 + C10217) * C8903 + (C10218 + C10219) * C8904 +
                    ((C4559 * C6593 + C30682 * C6594) * C116 +
                     (C4559 * C6595 + C30682 * C6596) * C30921) *
                        C8905) *
                       C30841 -
                   ((C10219 + C10218) * C8905 + (C10217 + C10216) * C8904 +
                    (C4714 * C30921 + C4715 * C116) * C8903) *
                       C30990) *
                      C31030) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[72] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                        C115 * C119 + C103 * C126) *
                           C116 +
                       (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                        C115 * C129 + C103 * C140) *
                           C30921) *
                          C30933 * C30754 * C30736 * C108 -
                      ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                        C113 * C128 + C101 * C139) *
                           C30921 +
                       (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                        C113 * C118 + C101 * C125) *
                           C116) *
                          C30933 * C30754 * C30736 * C109 +
                      ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                        C115 * C121 + C103 * C132) *
                           C116 +
                       (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                        C115 * C133 + C103 * C142) *
                           C30921) *
                          C30933 * C30754 * C30736 * C110 -
                      ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                        C113 * C130 + C101 * C141) *
                           C30921 +
                       (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                        C113 * C120 + C101 * C131) *
                           C116) *
                          C30933 * C30754 * C30736 * C111 +
                      ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                        C115 * C123 + C103 * C136) *
                           C116 +
                       (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                        C115 * C137 + C103 * C144) *
                           C30921) *
                          C30933 * C30754 * C30736 * C112) +
                 std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                     ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C31057 -
                       ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                         C113 * C273 + C101 * C293) *
                            C30921 +
                        (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                         C113 * C263 + C101 * C276) *
                            C116) *
                           C30933 * C30754 * C31045 +
                       ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                         C115 * C266 + C103 * C279) *
                            C116 +
                        (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                         C115 * C282 + C103 * C296) *
                            C30921) *
                           C30933 * C30754 * C31020) *
                          C258 +
                      (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                         C115 * C267 + C103 * C283) *
                            C116 +
                        (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                         C115 * C284 + C103 * C297) *
                            C30921) *
                           C30933 * C30754 * C31045 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C31057 -
                       ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                         C113 * C281 + C101 * C295) *
                            C30921 +
                        (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                         C113 * C265 + C101 * C278) *
                            C116) *
                           C30933 * C30754 * C31020) *
                          C259 +
                      (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                         C115 * C121 + C103 * C132) *
                            C116 +
                        (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                         C115 * C133 + C103 * C142) *
                            C30921) *
                           C30933 * C30754 * C31057 -
                       ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                         C113 * C271 + C101 * C291) *
                            C30921 +
                        (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                         C113 * C261 + C101 * C274) *
                            C116) *
                           C30933 * C30754 * C31045 +
                       ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                         C115 * C270 + C103 * C289) *
                            C116 +
                        (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                         C115 * C290 + C103 * C300) *
                            C30921) *
                           C30933 * C30754 * C31020) *
                          C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C31058 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C31047 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C30921) *
                       C30933 * C31023) *
                      C30736 * C258 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C30921) *
                       C30933 * C31047 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C31058 -
                   ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                     C113 * C434 + C101 * C448) *
                        C30921 +
                    (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                     C113 * C418 + C101 * C431) *
                        C116) *
                       C30933 * C31023) *
                      C30736 * C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C31058 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C30921 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C30933 * C31047 +
                   ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                     C115 * C423 + C103 * C442) *
                        C116 +
                    (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                     C115 * C443 + C103 * C453) *
                        C30921) *
                       C30933 * C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C30921) *
                      C30933 * C30754 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C30921 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C30933 * C30754 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C30921) *
                      C30933 * C30754 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C30921 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C30933 * C30754 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C30921) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C31058 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C31047 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C30921) *
                       C30933 * C31023) *
                      C942 +
                  (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                     C115 * C814 + C103 * C819) *
                        C116 +
                    (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                     C115 * C822 + C103 * C829) *
                        C30921) *
                       C30933 * C31047 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C31058 -
                   ((C115 * C1159 + C103 * C1177 + C114 * C1160 + C102 * C1178 +
                     C113 * C1161 + C101 * C1179) *
                        C30921 +
                    (C115 * C1150 + C103 * C1162 + C114 * C1151 + C102 * C1163 +
                     C113 * C1152 + C101 * C1164) *
                        C116) *
                       C30933 * C31023) *
                      C943 +
                  (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C31058 -
                   ((C115 * C1165 + C103 * C1180 + C114 * C1166 + C102 * C1181 +
                     C113 * C1167 + C101 * C1182) *
                        C30921 +
                    (C115 * C1153 + C103 * C1168 + C114 * C1154 + C102 * C1169 +
                     C113 * C1155 + C101 * C1170) *
                        C116) *
                       C30933 * C31047 +
                   ((C113 * C1156 + C101 * C1171 + C114 * C1157 + C102 * C1172 +
                     C115 * C1158 + C103 * C1173) *
                        C116 +
                    (C113 * C1174 + C101 * C1183 + C114 * C1175 + C102 * C1184 +
                     C115 * C1176 + C103 * C1185) *
                        C30921) *
                       C30933 * C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 +
                   (C4559 * C263 + C30682 * C276) * C4561 +
                   (C4559 * C273 + C30682 * C293) * C4557 +
                   (C4559 * C264 + C30682 * C277) * C4562 +
                   (C4559 * C280 + C30682 * C294) * C4558) *
                      C30933 * C30754 * C30736 * C108 -
                  ((C4559 * C281 + C30682 * C295) * C4558 +
                   (C4559 * C265 + C30682 * C278) * C4562 +
                   (C4559 * C272 + C30682 * C292) * C4557 +
                   (C4559 * C262 + C30682 * C275) * C4561 +
                   (C4559 * C128 + C30682 * C139) * C4556 +
                   (C4559 * C118 + C30682 * C125) * C4560) *
                      C30933 * C30754 * C30736 * C109 +
                  ((C4559 * C119 + C30682 * C126) * C4560 +
                   (C4559 * C129 + C30682 * C140) * C4556 +
                   (C4559 * C261 + C30682 * C274) * C4561 +
                   (C4559 * C271 + C30682 * C291) * C4557 +
                   (C4559 * C266 + C30682 * C279) * C4562 +
                   (C4559 * C282 + C30682 * C296) * C4558) *
                      C30933 * C30754 * C30736 * C110 -
                  ((C4559 * C285 + C30682 * C298) * C4558 +
                   (C4559 * C268 + C30682 * C286) * C4562 +
                   (C4559 * C284 + C30682 * C297) * C4557 +
                   (C4559 * C267 + C30682 * C283) * C4561 +
                   (C4559 * C130 + C30682 * C141) * C4556 +
                   (C4559 * C120 + C30682 * C131) * C4560) *
                      C30933 * C30754 * C30736 * C111 +
                  ((C4559 * C121 + C30682 * C132) * C4560 +
                   (C4559 * C133 + C30682 * C142) * C4556 +
                   (C4559 * C269 + C30682 * C288) * C4561 +
                   (C4559 * C287 + C30682 * C299) * C4557 +
                   (C4559 * C270 + C30682 * C289) * C4562 +
                   (C4559 * C290 + C30682 * C300) * C4558) *
                      C30933 * C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C258 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C31045 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C31057 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C259 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C31058 -
                   ((C4559 * C1167 + C30682 * C1182) * C4558 +
                    (C4559 * C1155 + C30682 * C1170) * C4562 +
                    (C4559 * C820 + C30682 * C827) * C4557 +
                    (C4559 * C812 + C30682 * C817) * C4561 +
                    (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C31047 +
                   ((C4559 * C417 + C30682 * C430) * C4560 +
                    (C4559 * C433 + C30682 * C447) * C4556 +
                    (C4559 * C1152 + C30682 * C1164) * C4561 +
                    (C4559 * C1161 + C30682 * C1179) * C4557 +
                    (C4559 * C1156 + C30682 * C1171) * C4562 +
                    (C4559 * C1174 + C30682 * C1183) * C4558) *
                       C30933 * C31023) *
                      C30736 * C258 +
                  (((C4559 * C415 + C30682 * C428) * C4560 +
                    (C4559 * C425 + C30682 * C445) * C4556 +
                    (C4559 * C813 + C30682 * C818) * C4561 +
                    (C4559 * C821 + C30682 * C828) * C4557 +
                    (C4559 * C1154 + C30682 * C1169) * C4562 +
                    (C4559 * C1166 + C30682 * C1181) * C4558) *
                       C30933 * C31047 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C31058 -
                   ((C4559 * C1175 + C30682 * C1184) * C4558 +
                    (C4559 * C1157 + C30682 * C1172) * C4562 +
                    (C4559 * C1160 + C30682 * C1178) * C4557 +
                    (C4559 * C1151 + C30682 * C1163) * C4561 +
                    (C4559 * C434 + C30682 * C448) * C4556 +
                    (C4559 * C418 + C30682 * C431) * C4560) *
                       C30933 * C31023) *
                      C30736 * C259 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C31058 -
                   ((C4559 * C1165 + C30682 * C1180) * C4558 +
                    (C4559 * C1153 + C30682 * C1168) * C4562 +
                    (C4559 * C822 + C30682 * C829) * C4557 +
                    (C4559 * C814 + C30682 * C819) * C4561 +
                    (C4559 * C424 + C30682 * C444) * C4556 +
                    (C4559 * C414 + C30682 * C427) * C4560) *
                       C30933 * C31047 +
                   ((C4559 * C419 + C30682 * C432) * C4560 +
                    (C4559 * C435 + C30682 * C449) * C4556 +
                    (C4559 * C1150 + C30682 * C1162) * C4561 +
                    (C4559 * C1159 + C30682 * C1177) * C4557 +
                    (C4559 * C1158 + C30682 * C1173) * C4562 +
                    (C4559 * C1176 + C30682 * C1185) * C4558) *
                       C30933 * C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C943 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C942 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                   C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                      C30933 * C30754 * C1010 -
                  (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                   C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                      C30933 * C30754 * C1011 +
                  (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                   C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                      C30933 * C30754 * C1012 -
                  (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                   C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                      C30933 * C30754 * C1013 +
                  (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                   C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                   (C4559 * C5404 + C30682 * C5406) * C4558) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C31058 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C31047 +
                   ((C4559 * C417 + C30682 * C430) * C4560 +
                    (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                    C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                       C30933 * C31023) *
                      C942 +
                  ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                    C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                       C30933 * C31047 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C31058 -
                   (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                    C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                       C30933 * C31023) *
                      C943 +
                  ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C31058 -
                   ((C4559 * C5534 + C30682 * C5539) * C4558 +
                    (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                    C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                       C30933 * C31047 +
                   (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                    C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                    (C4559 * C5537 + C30682 * C5540) * C4558) *
                       C30933 * C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   ((C4559 * C416 + C30682 * C429) * C116 +
                    (C4559 * C426 + C30682 * C446) * C30921) *
                       C8904 +
                   ((C4559 * C417 + C30682 * C430) * C116 +
                    (C4559 * C433 + C30682 * C447) * C30921) *
                       C8905) *
                      C30754 * C30736 * C108 -
                  (((C4559 * C434 + C30682 * C448) * C30921 +
                    (C4559 * C418 + C30682 * C431) * C116) *
                       C8905 +
                   ((C4559 * C425 + C30682 * C445) * C30921 +
                    (C4559 * C415 + C30682 * C428) * C116) *
                       C8904 +
                   ((C4559 * C128 + C30682 * C139) * C30921 +
                    (C4559 * C118 + C30682 * C125) * C116) *
                       C8903) *
                      C30754 * C30736 * C109 +
                  (((C4559 * C119 + C30682 * C126) * C116 +
                    (C4559 * C129 + C30682 * C140) * C30921) *
                       C8903 +
                   ((C4559 * C414 + C30682 * C427) * C116 +
                    (C4559 * C424 + C30682 * C444) * C30921) *
                       C8904 +
                   ((C4559 * C419 + C30682 * C432) * C116 +
                    (C4559 * C435 + C30682 * C449) * C30921) *
                       C8905) *
                      C30754 * C30736 * C110 -
                  (((C4559 * C438 + C30682 * C451) * C30921 +
                    (C4559 * C421 + C30682 * C439) * C116) *
                       C8905 +
                   ((C4559 * C437 + C30682 * C450) * C30921 +
                    (C4559 * C420 + C30682 * C436) * C116) *
                       C8904 +
                   ((C4559 * C130 + C30682 * C141) * C30921 +
                    (C4559 * C120 + C30682 * C131) * C116) *
                       C8903) *
                      C30754 * C30736 * C111 +
                  (((C4559 * C121 + C30682 * C132) * C116 +
                    (C4559 * C133 + C30682 * C142) * C30921) *
                       C8903 +
                   ((C4559 * C422 + C30682 * C441) * C116 +
                    (C4559 * C440 + C30682 * C452) * C30921) *
                       C8904 +
                   ((C4559 * C423 + C30682 * C442) * C116 +
                    (C4559 * C443 + C30682 * C453) * C30921) *
                       C8905) *
                      C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    ((C4559 * C416 + C30682 * C429) * C116 +
                     (C4559 * C426 + C30682 * C446) * C30921) *
                        C8904 +
                    ((C4559 * C417 + C30682 * C430) * C116 +
                     (C4559 * C433 + C30682 * C447) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   ((C5559 * C30921 + C5558 * C116) * C8905 +
                    (C5218 * C30921 + C5219 * C116) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C258 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C5220 * C116 + C5221 * C30921) * C8904 +
                    (C6393 * C116 + C6392 * C30921) * C8905) *
                       C30754 * C31045 -
                   (((C4559 * C434 + C30682 * C448) * C30921 +
                     (C4559 * C418 + C30682 * C431) * C116) *
                        C8905 +
                    ((C4559 * C425 + C30682 * C445) * C30921 +
                     (C4559 * C415 + C30682 * C428) * C116) *
                        C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C31057 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C259 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    ((C4559 * C414 + C30682 * C427) * C116 +
                     (C4559 * C424 + C30682 * C444) * C30921) *
                        C8904 +
                    ((C4559 * C419 + C30682 * C432) * C116 +
                     (C4559 * C435 + C30682 * C449) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   (((C4559 * C1159 + C30682 * C1177) * C30921 +
                     (C4559 * C1150 + C30682 * C1162) * C116) *
                        C8905 +
                    (C5226 * C30921 + C5227 * C116) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C31058 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C31047 +
                   (C9199 * C8903 + (C9186 + C9185) * C8904 +
                    ((C4559 * C1847 + C30682 * C1856) * C116 +
                     (C4559 * C1859 + C30682 * C1865) * C30921) *
                        C8905) *
                       C31023) *
                      C30736 * C258 +
                  (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                    (C9191 + C9192) * C8905) *
                       C31047 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C31058 -
                   (((C4559 * C1860 + C30682 * C1866) * C30921 +
                     (C4559 * C1848 + C30682 * C1857) * C116) *
                        C8905 +
                    (C9192 + C9191) * C8904 + C9200 * C8903) *
                       C31023) *
                      C30736 * C259 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C31058 -
                   ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                    (C9194 + C9193) * C8903) *
                       C31047 +
                   (C9201 * C8903 + (C9198 + C9197) * C8904 +
                    ((C4559 * C1849 + C30682 * C1858) * C116 +
                     (C4559 * C1861 + C30682 * C1867) * C30921) *
                        C8905) *
                       C31023) *
                      C30736 * C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C942 -
                   ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C31054 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                       C30754 * C943 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C942 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C31041 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C942 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   (C9181 + C9182) * C8904 + C9199 * C8905) *
                      C30754 * C1010 -
                  ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                   (C4711 * C30921 + C4710 * C116) * C8903) *
                      C30754 * C1011 +
                  ((C4712 * C116 + C4713 * C30921) * C8903 +
                   (C5217 * C116 + C5216 * C30921) * C8904 +
                   (C5560 * C116 + C5561 * C30921) * C8905) *
                      C30754 * C1012 -
                  ((C5564 * C30921 + C5565 * C116) * C8905 +
                   (C5563 * C30921 + C5562 * C116) * C8904 +
                   (C4714 * C30921 + C4715 * C116) * C8903) *
                      C30754 * C1013 +
                  ((C5416 * C116 + C5417 * C30921) * C8903 +
                   (C5937 * C116 + C5936 * C30921) * C8904 +
                   ((C4559 * C5531 + C30682 * C5536) * C116 +
                    (C4559 * C5537 + C30682 * C5540) * C30921) *
                       C8905) *
                      C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C31058 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C31047 +
                   (C9199 * C8903 + (C9186 + C9185) * C8904 +
                    ((C4559 * C1847 + C30682 * C1856) * C116 +
                     (C4559 * C1859 + C30682 * C1865) * C30921) *
                        C8905) *
                       C31023) *
                      C942 +
                  (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                    (C9860 + C9861) * C8905) *
                       C31047 -
                   (C9862 * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C31058 -
                   (((C4559 * C6225 + C30682 * C6229) * C30921 +
                     (C4559 * C6220 + C30682 * C6224) * C116) *
                        C8905 +
                    (C9861 + C9860) * C8904 + C9862 * C8903) *
                       C31023) *
                      C943 +
                  (((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C9863 + C9864) * C8904 + C9869 * C8905) *
                       C31058 -
                   ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                    (C9864 + C9863) * C8903) *
                       C31047 +
                   (C9869 * C8903 + (C9868 + C9867) * C8904 +
                    ((C4559 * C6221 + C30682 * C6226) * C116 +
                     (C4559 * C6227 + C30682 * C6230) * C30921) *
                        C8905) *
                       C31023) *
                      C31020) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[73] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C31020) *
                      C30975 +
                  ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C942 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                      C113 * C821 + C101 * C828) *
                         C30921 +
                     (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                      C113 * C813 + C101 * C818) *
                         C116) *
                        C30933 * C30841) *
                       C943 +
                   (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                      C102 * C1168 + C115 * C1440 + C103 * C1441) *
                         C116 +
                     (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                      C102 * C1180 + C115 * C1442 + C103 * C1443) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30990) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30990 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C30841) *
                      C30736 * C554 +
                  (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                     C115 * C420 + C103 * C436) *
                        C116 +
                    (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                     C115 * C437 + C103 * C450) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30990) *
                      C30736 * C555 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30990 -
                   ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                     C113 * C424 + C101 * C444) *
                        C30921 +
                    (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                     C113 * C414 + C101 * C427) *
                        C116) *
                       C30933 * C30841) *
                      C30736 * C556 +
                  (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                     C115 * C662 + C103 * C663) *
                        C116 +
                    (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                     C115 * C664 + C103 * C665) *
                        C30921) *
                       C30933 * C30841 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30990) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30990 -
                   ((C4559 * C1167 + C30682 * C1182) * C4558 +
                    (C4559 * C1155 + C30682 * C1170) * C4562 +
                    (C4559 * C820 + C30682 * C827) * C4557 +
                    (C4559 * C812 + C30682 * C817) * C4561 +
                    (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C30841) *
                      C30736 * C554 +
                  (((C4559 * C415 + C30682 * C428) * C4560 +
                    (C4559 * C425 + C30682 * C445) * C4556 +
                    (C4559 * C813 + C30682 * C818) * C4561 +
                    (C4559 * C821 + C30682 * C828) * C4557 +
                    (C4559 * C1154 + C30682 * C1169) * C4562 +
                    (C4559 * C1166 + C30682 * C1181) * C4558) *
                       C30933 * C30841 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30990) *
                      C30736 * C555 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30990 -
                   ((C4559 * C1165 + C30682 * C1180) * C4558 +
                    (C4559 * C1153 + C30682 * C1168) * C4562 +
                    (C4559 * C822 + C30682 * C829) * C4557 +
                    (C4559 * C814 + C30682 * C819) * C4561 +
                    (C4559 * C424 + C30682 * C444) * C4556 +
                    (C4559 * C414 + C30682 * C427) * C4560) *
                       C30933 * C30841) *
                      C30736 * C556 +
                  (((C4559 * C420 + C30682 * C436) * C4560 +
                    (C4559 * C437 + C30682 * C450) * C4556 +
                    (C4559 * C815 + C30682 * C824) * C4561 +
                    (C4559 * C823 + C30682 * C830) * C4557 +
                    (C4559 * C1440 + C30682 * C1441) * C4562 +
                    (C4559 * C1442 + C30682 * C1443) * C4558) *
                       C30933 * C30841 -
                   (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                    C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30990) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C942 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C943 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C5534 + C30682 * C5539) * C4558 +
                     (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C31020) *
                      C30975 +
                  ((((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C942 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30990 -
                    (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                     C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                        C30933 * C30841) *
                       C943 +
                   ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                     C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                     (C4559 * C5821 + C30682 * C5822) * C4558) *
                        C30933 * C30841 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30990) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30990 -
                   ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                    (C9182 + C9181) * C8903) *
                       C30841) *
                      C30736 * C554 +
                  (((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                    (C9191 + C9192) * C8905) *
                       C30841 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30990) *
                      C30736 * C555 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30990 -
                   ((C9197 + C9198) * C8905 + (C9196 + C9195) * C8904 +
                    (C9194 + C9193) * C8903) *
                       C30841) *
                      C30736 * C556 +
                  (((C9410 + C9411) * C8903 + (C9412 + C9413) * C8904 +
                    ((C4559 * C2120 + C30682 * C2121) * C116 +
                     (C4559 * C2122 + C30682 * C2123) * C30921) *
                        C8905) *
                       C30841 -
                   ((C9413 + C9412) * C8905 + (C9411 + C9410) * C8904 +
                    ((C4559 * C130 + C30682 * C141) * C30921 +
                     (C4559 * C120 + C30682 * C131) * C116) *
                        C8903) *
                       C30990) *
                      C30736 * C31024)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((((C4559 * C117 + C30682 * C124) * C116 +
                      (C4559 * C127 + C30682 * C138) * C30921) *
                         C8903 +
                     (C9181 + C9182) * C8904 + C9199 * C8905) *
                        C30990 -
                    ((C9185 + C9186) * C8905 + (C9184 + C9183) * C8904 +
                     (C9182 + C9181) * C8903) *
                        C30841) *
                       C942 +
                   (((C9560 + C9561) * C8903 + (C9562 + C9563) * C8904 +
                     (C9860 + C9861) * C8905) *
                        C30841 -
                    (C9862 * C8905 + (C9561 + C9560) * C8904 +
                     (C4711 * C30921 + C4710 * C116) * C8903) *
                        C30990) *
                       C943 +
                   (((C4712 * C116 + C4713 * C30921) * C8903 +
                     (C9863 + C9864) * C8904 + C9869 * C8905) *
                        C30990 -
                    ((C9867 + C9868) * C8905 + (C9866 + C9865) * C8904 +
                     (C9864 + C9863) * C8903) *
                        C30841) *
                       C31020) *
                      C30975 +
                  ((((C9187 + C9188) * C8903 + (C9189 + C9190) * C8904 +
                     (C9191 + C9192) * C8905) *
                        C30841 -
                    (C9200 * C8905 + (C9188 + C9187) * C8904 +
                     ((C4559 * C128 + C30682 * C139) * C30921 +
                      (C4559 * C118 + C30682 * C125) * C116) *
                         C8903) *
                        C30990) *
                       C942 +
                   (((C4716 * C116 + C4717 * C30921) * C8903 +
                     (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                        C30990 -
                    (((C4559 * C2229 + C30682 * C2232) * C30921 +
                      (C4559 * C2223 + C30682 * C2226) * C116) *
                         C8905 +
                     (C9567 + C9566) * C8904 + (C9565 + C9564) * C8903) *
                        C30841) *
                       C943 +
                   (((C10114 + C10115) * C8903 + (C10116 + C10117) * C8904 +
                     ((C4559 * C6491 + C30682 * C6492) * C116 +
                      (C4559 * C6493 + C30682 * C6494) * C30921) *
                         C8905) *
                        C30841 -
                    ((C10117 + C10116) * C8905 + (C10115 + C10114) * C8904 +
                     (C4719 * C30921 + C4718 * C116) * C8903) *
                        C30990) *
                       C31020) *
                      C30719)) /
                    (p * q * std::sqrt(p + q));
    d2ee[74] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C31045 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C258 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C31045 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31020) *
                      C259 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C31057 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C31045 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C30921) *
                      C30933 * C30754 * C30736 * C108 -
                  ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                    C113 * C128 + C101 * C139) *
                       C30921 +
                   (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                    C113 * C118 + C101 * C125) *
                       C116) *
                      C30933 * C30754 * C30736 * C109 +
                  ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                    C115 * C121 + C103 * C132) *
                       C116 +
                   (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                    C115 * C133 + C103 * C142) *
                       C30921) *
                      C30933 * C30754 * C30736 * C110 -
                  ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                    C113 * C130 + C101 * C141) *
                       C30921 +
                   (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                    C113 * C120 + C101 * C131) *
                       C116) *
                      C30933 * C30754 * C30736 * C111 +
                  ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                    C115 * C123 + C103 * C136) *
                       C116 +
                   (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                    C115 * C137 + C103 * C144) *
                       C30921) *
                      C30933 * C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                     C115 * C267 + C103 * C283) *
                        C116 +
                    (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                     C115 * C284 + C103 * C297) *
                        C30921) *
                       C30933 * C30754 * C943 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C942 -
                   ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                     C113 * C281 + C101 * C295) *
                        C30921 +
                    (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                     C113 * C265 + C101 * C278) *
                        C116) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C942 -
                   ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                     C113 * C271 + C101 * C291) *
                        C30921 +
                    (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                     C113 * C261 + C101 * C274) *
                        C116) *
                       C30933 * C30754 * C943 +
                   ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                     C115 * C270 + C103 * C289) *
                        C116 +
                    (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                     C115 * C290 + C103 * C300) *
                        C30921) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                    C115 * C119 + C103 * C126) *
                       C116 +
                   (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                    C115 * C129 + C103 * C140) *
                       C30921) *
                      C30933 * C30754 * C1010 -
                  ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                    C113 * C273 + C101 * C293) *
                       C30921 +
                   (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                    C113 * C263 + C101 * C276) *
                       C116) *
                      C30933 * C30754 * C1011 +
                  ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                    C115 * C266 + C103 * C279) *
                       C116 +
                   (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                    C115 * C282 + C103 * C296) *
                       C30921) *
                      C30933 * C30754 * C1012 -
                  ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                    C113 * C1024 + C101 * C1036) *
                       C30921 +
                   (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                    C113 * C1018 + C101 * C1027) *
                       C116) *
                      C30933 * C30754 * C1013 +
                  ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                    C115 * C1021 + C103 * C1030) *
                       C116 +
                   (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                    C115 * C1033 + C103 * C1039) *
                       C30921) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 +
                   (C4559 * C263 + C30682 * C276) * C4561 +
                   (C4559 * C273 + C30682 * C293) * C4557 +
                   (C4559 * C264 + C30682 * C277) * C4562 +
                   (C4559 * C280 + C30682 * C294) * C4558) *
                      C30933 * C30754 * C30736 * C108 -
                  ((C4559 * C281 + C30682 * C295) * C4558 +
                   (C4559 * C265 + C30682 * C278) * C4562 +
                   (C4559 * C272 + C30682 * C292) * C4557 +
                   (C4559 * C262 + C30682 * C275) * C4561 +
                   (C4559 * C128 + C30682 * C139) * C4556 +
                   (C4559 * C118 + C30682 * C125) * C4560) *
                      C30933 * C30754 * C30736 * C109 +
                  ((C4559 * C119 + C30682 * C126) * C4560 +
                   (C4559 * C129 + C30682 * C140) * C4556 +
                   (C4559 * C261 + C30682 * C274) * C4561 +
                   (C4559 * C271 + C30682 * C291) * C4557 +
                   (C4559 * C266 + C30682 * C279) * C4562 +
                   (C4559 * C282 + C30682 * C296) * C4558) *
                      C30933 * C30754 * C30736 * C110 -
                  ((C4559 * C285 + C30682 * C298) * C4558 +
                   (C4559 * C268 + C30682 * C286) * C4562 +
                   (C4559 * C284 + C30682 * C297) * C4557 +
                   (C4559 * C267 + C30682 * C283) * C4561 +
                   (C4559 * C130 + C30682 * C141) * C4556 +
                   (C4559 * C120 + C30682 * C131) * C4560) *
                      C30933 * C30754 * C30736 * C111 +
                  ((C4559 * C121 + C30682 * C132) * C4560 +
                   (C4559 * C133 + C30682 * C142) * C4556 +
                   (C4559 * C269 + C30682 * C288) * C4561 +
                   (C4559 * C287 + C30682 * C299) * C4557 +
                   (C4559 * C270 + C30682 * C289) * C4562 +
                   (C4559 * C290 + C30682 * C300) * C4558) *
                      C30933 * C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C258 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C31045 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C31057 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C259 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C31057 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C31045 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                    (C4559 * C1031 + C30682 * C1037) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31054 +
                  ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                    C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                       C30933 * C30754 * C943 -
                   (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                    C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C942 -
                   ((C4559 * C1032 + C30682 * C1038) * C4558 +
                    (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                    C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                       C30933 * C30754 * C31020) *
                      C31041 +
                  (((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                    C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                       C30933 * C30754 * C942 -
                   (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                    C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                       C30933 * C30754 * C943 +
                   (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                    C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                    (C4559 * C1033 + C30682 * C1039) * C4558) *
                       C30933 * C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                 (((C4559 * C117 + C30682 * C124) * C4560 +
                   (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                   C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                      C30933 * C30754 * C1010 -
                  (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                   C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                      C30933 * C30754 * C1011 +
                  (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                   C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                      C30933 * C30754 * C1012 -
                  (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                   C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                      C30933 * C30754 * C1013 +
                  (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                   C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                   (C4559 * C5404 + C30682 * C5406) * C4558) *
                      C30933 * C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   ((C4559 * C416 + C30682 * C429) * C116 +
                    (C4559 * C426 + C30682 * C446) * C30921) *
                       C8904 +
                   ((C4559 * C417 + C30682 * C430) * C116 +
                    (C4559 * C433 + C30682 * C447) * C30921) *
                       C8905) *
                      C30754 * C30736 * C108 -
                  (((C4559 * C434 + C30682 * C448) * C30921 +
                    (C4559 * C418 + C30682 * C431) * C116) *
                       C8905 +
                   ((C4559 * C425 + C30682 * C445) * C30921 +
                    (C4559 * C415 + C30682 * C428) * C116) *
                       C8904 +
                   ((C4559 * C128 + C30682 * C139) * C30921 +
                    (C4559 * C118 + C30682 * C125) * C116) *
                       C8903) *
                      C30754 * C30736 * C109 +
                  (((C4559 * C119 + C30682 * C126) * C116 +
                    (C4559 * C129 + C30682 * C140) * C30921) *
                       C8903 +
                   ((C4559 * C414 + C30682 * C427) * C116 +
                    (C4559 * C424 + C30682 * C444) * C30921) *
                       C8904 +
                   ((C4559 * C419 + C30682 * C432) * C116 +
                    (C4559 * C435 + C30682 * C449) * C30921) *
                       C8905) *
                      C30754 * C30736 * C110 -
                  (((C4559 * C438 + C30682 * C451) * C30921 +
                    (C4559 * C421 + C30682 * C439) * C116) *
                       C8905 +
                   ((C4559 * C437 + C30682 * C450) * C30921 +
                    (C4559 * C420 + C30682 * C436) * C116) *
                       C8904 +
                   ((C4559 * C130 + C30682 * C141) * C30921 +
                    (C4559 * C120 + C30682 * C131) * C116) *
                       C8903) *
                      C30754 * C30736 * C111 +
                  (((C4559 * C121 + C30682 * C132) * C116 +
                    (C4559 * C133 + C30682 * C142) * C30921) *
                       C8903 +
                   ((C4559 * C422 + C30682 * C441) * C116 +
                    (C4559 * C440 + C30682 * C452) * C30921) *
                       C8904 +
                   ((C4559 * C423 + C30682 * C442) * C116 +
                    (C4559 * C443 + C30682 * C453) * C30921) *
                       C8905) *
                      C30754 * C30736 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    ((C4559 * C416 + C30682 * C429) * C116 +
                     (C4559 * C426 + C30682 * C446) * C30921) *
                        C8904 +
                    ((C4559 * C417 + C30682 * C430) * C116 +
                     (C4559 * C433 + C30682 * C447) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   ((C5559 * C30921 + C5558 * C116) * C8905 +
                    (C5218 * C30921 + C5219 * C116) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C258 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C5220 * C116 + C5221 * C30921) * C8904 +
                    (C6393 * C116 + C6392 * C30921) * C8905) *
                       C30754 * C31045 -
                   (((C4559 * C434 + C30682 * C448) * C30921 +
                     (C4559 * C418 + C30682 * C431) * C116) *
                        C8905 +
                    ((C4559 * C425 + C30682 * C445) * C30921 +
                     (C4559 * C415 + C30682 * C428) * C116) *
                        C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C31057 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C259 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    ((C4559 * C414 + C30682 * C427) * C116 +
                     (C4559 * C424 + C30682 * C444) * C30921) *
                        C8904 +
                    ((C4559 * C419 + C30682 * C432) * C116 +
                     (C4559 * C435 + C30682 * C449) * C30921) *
                        C8905) *
                       C30754 * C31057 -
                   (((C4559 * C1159 + C30682 * C1177) * C30921 +
                     (C4559 * C1150 + C30682 * C1162) * C116) *
                        C8905 +
                    (C5226 * C30921 + C5227 * C116) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C31045 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((((C4559 * C117 + C30682 * C124) * C116 +
                     (C4559 * C127 + C30682 * C138) * C30921) *
                        C8903 +
                    (C9181 + C9182) * C8904 + C9199 * C8905) *
                       C30754 * C942 -
                   ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                    (C4711 * C30921 + C4710 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4712 * C116 + C4713 * C30921) * C8903 +
                    (C5217 * C116 + C5216 * C30921) * C8904 +
                    (C5560 * C116 + C5561 * C30921) * C8905) *
                       C30754 * C31020) *
                      C31054 +
                  (((C4716 * C116 + C4717 * C30921) * C8903 +
                    (C9564 + C9565) * C8904 + (C9566 + C9567) * C8905) *
                       C30754 * C943 -
                   (C9200 * C8905 + (C9188 + C9187) * C8904 +
                    ((C4559 * C128 + C30682 * C139) * C30921 +
                     (C4559 * C118 + C30682 * C125) * C116) *
                        C8903) *
                       C30754 * C942 -
                   ((C6390 * C30921 + C6391 * C116) * C8905 +
                    (C5223 * C30921 + C5222 * C116) * C8904 +
                    (C4719 * C30921 + C4718 * C116) * C8903) *
                       C30754 * C31020) *
                      C31041 +
                  ((((C4559 * C119 + C30682 * C126) * C116 +
                     (C4559 * C129 + C30682 * C140) * C30921) *
                        C8903 +
                    (C9193 + C9194) * C8904 + C9201 * C8905) *
                       C30754 * C942 -
                   ((C9577 + C9576) * C8905 + (C9569 + C9568) * C8904 +
                    (C4723 * C30921 + C4722 * C116) * C8903) *
                       C30754 * C943 +
                   ((C4724 * C116 + C4725 * C30921) * C8903 +
                    (C5225 * C116 + C5224 * C30921) * C8904 +
                    ((C4559 * C1158 + C30682 * C1173) * C116 +
                     (C4559 * C1176 + C30682 * C1185) * C30921) *
                        C8905) *
                       C30754 * C31020) *
                      C31014)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C4559 * C117 + C30682 * C124) * C116 +
                    (C4559 * C127 + C30682 * C138) * C30921) *
                       C8903 +
                   (C9181 + C9182) * C8904 + C9199 * C8905) *
                      C30754 * C1010 -
                  ((C9563 + C9562) * C8905 + (C9561 + C9560) * C8904 +
                   (C4711 * C30921 + C4710 * C116) * C8903) *
                      C30754 * C1011 +
                  ((C4712 * C116 + C4713 * C30921) * C8903 +
                   (C5217 * C116 + C5216 * C30921) * C8904 +
                   (C5560 * C116 + C5561 * C30921) * C8905) *
                      C30754 * C1012 -
                  ((C5564 * C30921 + C5565 * C116) * C8905 +
                   (C5563 * C30921 + C5562 * C116) * C8904 +
                   (C4714 * C30921 + C4715 * C116) * C8903) *
                      C30754 * C1013 +
                  ((C5416 * C116 + C5417 * C30921) * C8903 +
                   (C5937 * C116 + C5936 * C30921) * C8904 +
                   ((C4559 * C5531 + C30682 * C5536) * C116 +
                    (C4559 * C5537 + C30682 * C5540) * C30921) *
                       C8905) *
                      C30754 * C1014) *
                 C30708) /
                    (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C30795 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C30802 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C2700) *
              C30713 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C30802 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C30795 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C2700) *
              C30722 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C30795 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C30802 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C2700) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C30795 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C30802 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C30990 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C2700) *
              C2440 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C30795 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30802 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C30990) *
               C2700) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C31064 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C31060 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31050 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30754 * C31030) *
              C2440 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C31060 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C31064 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31050 +
           (((C14672 + C14671) * C116 + (C14670 + C14669) * C30921) * C18918 +
            ((C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C116 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C30921) *
                C18919) *
               C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C2332 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C30799) *
              C31063 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C30799 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C2332) *
              C31056 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C2332 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C30799) *
              C31043 +
          ((((C13733 + C13734) * C116 + (C13735 + C13736) * C30921) * C18918 +
            ((C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                 C116 +
             (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                 C30921) *
                C18919) *
               C30754 * C30799 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30754 * C2332) *
              C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C31058 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C31047 +
            (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
             ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
                C31023) *
               C2332 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C31047 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C31058 -
            (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
             ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
                C31023) *
               C30799) *
              C2440 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C31047 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C31058 -
            (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
             ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
                C31023) *
               C2332 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C31058 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C31047 +
            (((C15600 + C15599) * C116 + (C15598 + C15597) * C30921) * C18918 +
             ((C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
               C13223 * C2227) *
                  C116 +
              (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
               C13223 * C2233) *
                  C30921) *
                 C18919) *
                C31023) *
               C30799) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C30799) *
              C30713 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C2332 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C30722 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C30990 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C30990) *
               C30799) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C2332 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C30799) *
              C31063 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C30799 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C2332) *
              C31056 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C2332 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C30799) *
              C31043 +
          ((((C13733 + C13734) * C116 + (C13735 + C13736) * C30921) * C18918 +
            ((C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                 C116 +
             (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                 C30921) *
                C18919) *
               C30754 * C30799 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30754 * C2332) *
              C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C31064 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C31060 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31050 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30754 * C31030) *
              C2440 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C31060 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C31064 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31050 +
           (((C14672 + C14671) * C116 + (C14670 + C14669) * C30921) * C18918 +
            ((C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C116 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C30921) *
                C18919) *
               C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C30795 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C30802 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C3094 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C2700) *
              C30975 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C30795 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30802 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C3094) *
               C2700) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30837 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30844 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C3602) *
              C30795 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C30844 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30837 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C3602) *
              C30802 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30837 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C30844 +
           (((C14530 + C14529) * C116 + (C14528 + C14527) * C30921) * C18918 +
            ((C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
              C13223 * C6492) *
                 C116 +
             (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
              C13223 * C6494) *
                 C30921) *
                C18919) *
               C3602) *
              C2700) *
         C30708) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C3094 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C31064 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C30841 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C3094) *
              C31060 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C3094 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C30841) *
              C31050 +
          ((((C15020 + C15019) * C116 + (C15018 + C15017) * C30921) * C18918 +
            ((C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
              C13223 * C6378) *
                 C116 +
             (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
              C13223 * C6380) *
                 C30921) *
                C18919) *
               C30841 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C30799) *
              C31054 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C2332 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C31041 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C3094 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31065 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31062 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C31053 -
           (((C20973 + C20974) * C30921 + (C20975 + C20976) * C116) * C18919 +
            ((C20972 + C20971) * C30921 + (C20970 + C20969) * C116) * C18918) *
               C31036) *
              C2332 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C31062 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C31065 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C31053 +
           (((C15872 + C15871) * C116 + (C15870 + C15869) * C30921) * C18918 +
            ((C13226 * C6220 + C13222 * C6224 + C13227 * C10673 +
              C13223 * C10674) *
                 C116 +
             (C13226 * C6225 + C13222 * C6229 + C13227 * C10675 +
              C13223 * C10676) *
                 C30921) *
                C18919) *
               C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30837 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30844 +
            (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
             ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
                C3602) *
               C2332 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30844 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30837 -
            (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
             ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
                C3602) *
               C30799) *
              C30975 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30844 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30837 -
            (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
             ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
                C3602) *
               C2332 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30837 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30844 +
            (((C15600 + C15599) * C116 + (C15598 + C15597) * C30921) * C18918 +
             ((C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
               C13223 * C2227) *
                  C116 +
              (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
               C13223 * C2233) *
                  C30921) *
                 C18919) *
                C3602) *
               C30799) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C30799) *
              C31054 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C2332 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C31041 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C3094 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C2332 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C3094) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C3094 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C31064 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C30841 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C3094) *
              C31060 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C3094 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C30841) *
              C31050 +
          ((((C15020 + C15019) * C116 + (C15018 + C15017) * C30921) * C18918 +
            ((C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
              C13223 * C6378) *
                 C116 +
             (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
              C13223 * C6380) *
                 C30921) *
                C18919) *
               C30841 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C3094) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C1284 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C1285 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C1286 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30754 * C31030) *
              C30975 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C1285 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C1284 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C1286 +
           (((C14672 + C14671) * C116 + (C14670 + C14669) * C30921) * C18918 +
            ((C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C116 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C30921) *
                C18919) *
               C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C30989 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C30799) *
              C554 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C30799 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C30989) *
              C555 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C30989 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C30799) *
              C556 +
          ((((C13733 + C13734) * C116 + (C13735 + C13736) * C30921) * C18918 +
            ((C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                 C116 +
             (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                 C30921) *
                C18919) *
               C30754 * C30799 -
           (((C13227 * C440 + C13223 * C452 + C13226 * C437 + C13222 * C450) *
                 C30921 +
             (C13227 * C422 + C13223 * C441 + C13226 * C420 + C13222 * C436) *
                 C116) *
                C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30754 * C30989) *
              C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C1664 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C1665 +
            (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
             ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
                C31023) *
               C30989 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C1665 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C1664 -
            (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
             ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
                C31023) *
               C30799) *
              C30975 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C1665 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C1664 -
            (((C13227 * C1850 + C13223 * C1862 + C13226 * C1851 +
               C13222 * C1863) *
                  C30921 +
              (C13227 * C1844 + C13223 * C1853 + C13226 * C1845 +
               C13222 * C1854) *
                  C116) *
                 C18919 +
             ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
                C31023) *
               C30989 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C1664 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C1665 +
            (((C15600 + C15599) * C116 + (C15598 + C15597) * C30921) * C18918 +
             ((C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
               C13223 * C2227) *
                  C116 +
              (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
               C13223 * C2233) *
                  C30921) *
                 C18919) *
                C31023) *
               C30799) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30990 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C1284 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C30841 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30990) *
              C1285 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30990 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C30841) *
              C1286 +
          ((((C15020 + C15019) * C116 + (C15018 + C15017) * C30921) * C18918 +
            ((C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
              C13223 * C6378) *
                 C116 +
             (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
              C13223 * C6380) *
                 C30921) *
                C18919) *
               C30841 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C30799) *
              C258 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C30989 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C259 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C30990 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C2116 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C2117 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C2118 -
           (((C20973 + C20974) * C30921 + (C20975 + C20976) * C116) * C18919 +
            ((C20972 + C20971) * C30921 + (C20970 + C20969) * C116) * C18918) *
               C31036) *
              C30989 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C2117 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C2116 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C2118 +
           (((C15872 + C15871) * C116 + (C15870 + C15869) * C30921) * C18918 +
            ((C13226 * C6220 + C13222 * C6224 + C13227 * C10673 +
              C13223 * C10674) *
                 C116 +
             (C13226 * C6225 + C13222 * C6229 + C13227 * C10675 +
              C13223 * C10676) *
                 C30921) *
                C18919) *
               C31036) *
              C30799) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13226 * C117 + C13222 * C124 + C13227 * C118 +
                 C13223 * C125) *
                    C116 +
                (C13226 * C127 + C13222 * C138 + C13227 * C128 +
                 C13223 * C139) *
                    C30921) *
                   C18918 +
               ((C13226 * C416 + C13222 * C429 + C13227 * C415 +
                 C13223 * C428) *
                    C116 +
                (C13226 * C426 + C13222 * C446 + C13227 * C425 +
                 C13223 * C445) *
                    C30921) *
                   C18919) *
                  C30754 * C30736 * C108 -
              (((C13227 * C424 + C13223 * C444 + C13226 * C425 +
                 C13222 * C445) *
                    C30921 +
                (C13227 * C414 + C13223 * C427 + C13226 * C415 +
                 C13222 * C428) *
                    C116) *
                   C18919 +
               ((C13227 * C129 + C13223 * C140 + C13226 * C128 +
                 C13222 * C139) *
                    C30921 +
                (C13227 * C119 + C13223 * C126 + C13226 * C118 +
                 C13222 * C125) *
                    C116) *
                   C18918) *
                  C30754 * C30736 * C109 +
              (((C13226 * C119 + C13222 * C126 + C13227 * C120 +
                 C13223 * C131) *
                    C116 +
                (C13226 * C129 + C13222 * C140 + C13227 * C130 +
                 C13223 * C141) *
                    C30921) *
                   C18918 +
               ((C13226 * C414 + C13222 * C427 + C13227 * C420 +
                 C13223 * C436) *
                    C116 +
                (C13226 * C424 + C13222 * C444 + C13227 * C437 +
                 C13223 * C450) *
                    C30921) *
                   C18919) *
                  C30754 * C30736 * C110 -
              (((C13227 * C440 + C13223 * C452 + C13226 * C437 +
                 C13222 * C450) *
                    C30921 +
                (C13227 * C422 + C13223 * C441 + C13226 * C420 +
                 C13222 * C436) *
                    C116) *
                   C18919 +
               ((C13227 * C133 + C13223 * C142 + C13226 * C130 +
                 C13222 * C141) *
                    C30921 +
                (C13227 * C121 + C13223 * C132 + C13226 * C120 +
                 C13222 * C131) *
                    C116) *
                   C18918) *
                  C30754 * C30736 * C111 +
              (((C13226 * C121 + C13222 * C132 + C13227 * C122 +
                 C13223 * C135) *
                    C116 +
                (C13226 * C133 + C13222 * C142 + C13227 * C134 +
                 C13223 * C143) *
                    C30921) *
                   C18918 +
               ((C13226 * C422 + C13222 * C441 + C13227 * C662 +
                 C13223 * C663) *
                    C116 +
                (C13226 * C440 + C13222 * C452 + C13227 * C664 +
                 C13223 * C665) *
                    C30921) *
                   C18919) *
                  C30754 * C30736 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C13226 * C117 + C13222 * C124 + C13227 * C118 +
                  C13223 * C125) *
                     C116 +
                 (C13226 * C127 + C13222 * C138 + C13227 * C128 +
                  C13223 * C139) *
                     C30921) *
                    C18918 +
                ((C13226 * C416 + C13222 * C429 + C13227 * C415 +
                  C13223 * C428) *
                     C116 +
                 (C13226 * C426 + C13222 * C446 + C13227 * C425 +
                  C13223 * C445) *
                     C30921) *
                    C18919) *
                   C30754 * C31057 -
               (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) *
                    C18919 +
                ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) *
                    C18918) *
                   C30754 * C31045 +
               (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) *
                    C18918 +
                ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) *
                    C18919) *
                   C30754 * C31020) *
                  C258 +
              ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) *
                    C18918 +
                ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) *
                    C18919) *
                   C30754 * C31045 -
               (((C13227 * C424 + C13223 * C444 + C13226 * C425 +
                  C13222 * C445) *
                     C30921 +
                 (C13227 * C414 + C13223 * C427 + C13226 * C415 +
                  C13222 * C428) *
                     C116) *
                    C18919 +
                ((C13227 * C129 + C13223 * C140 + C13226 * C128 +
                  C13222 * C139) *
                     C30921 +
                 (C13227 * C119 + C13223 * C126 + C13226 * C118 +
                  C13222 * C125) *
                     C116) *
                    C18918) *
                   C30754 * C31057 -
               (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) *
                    C18919 +
                ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) *
                    C18918) *
                   C30754 * C31020) *
                  C259 +
              ((((C13226 * C119 + C13222 * C126 + C13227 * C120 +
                  C13223 * C131) *
                     C116 +
                 (C13226 * C129 + C13222 * C140 + C13227 * C130 +
                  C13223 * C141) *
                     C30921) *
                    C18918 +
                ((C13226 * C414 + C13222 * C427 + C13227 * C420 +
                  C13223 * C436) *
                     C116 +
                 (C13226 * C424 + C13222 * C444 + C13227 * C437 +
                  C13223 * C450) *
                     C30921) *
                    C18919) *
                   C30754 * C31057 -
               (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) *
                    C18919 +
                ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) *
                    C18918) *
                   C30754 * C31045 +
               (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) *
                    C18918 +
                ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
                  C13223 * C1441) *
                     C116 +
                 (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
                  C13223 * C1443) *
                     C30921) *
                    C18919) *
                   C30754 * C31020) *
                  C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31058 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31047 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C258 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C31047 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C31058 -
           (((C13227 * C1850 + C13223 * C1862 + C13226 * C1851 +
              C13222 * C1863) *
                 C30921 +
             (C13227 * C1844 + C13223 * C1853 + C13226 * C1845 +
              C13222 * C1854) *
                 C116) *
                C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C31023) *
              C30736 * C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C31058 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C31047 +
           (((C19284 + C19283) * C116 + (C19282 + C19281) * C30921) * C18918 +
            ((C13226 * C1844 + C13222 * C1853 + C13227 * C2120 +
              C13223 * C2121) *
                 C116 +
             (C13226 * C1850 + C13222 * C1862 + C13227 * C2122 +
              C13223 * C2123) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C942 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C943 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C31054 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C943 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C942 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C942 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C943 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
              C30754 * C1010 -
          (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
           ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
              C30754 * C1011 +
          (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
           ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
              C30754 * C1012 -
          (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
           ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
              C30754 * C1013 +
          (((C14348 + C14347) * C116 + (C14346 + C14345) * C30921) * C18918 +
           ((C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C116 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C30921) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31058 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31047 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C942 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C31047 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C31058 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C31023) *
              C943 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C31058 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C31047 +
           (((C14530 + C14529) * C116 + (C14528 + C14527) * C30921) * C18918 +
            ((C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
              C13223 * C6492) *
                 C116 +
             (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
              C13223 * C6494) *
                 C30921) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C1664 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C1665 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31054 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C1665 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C1664 -
           (((C13227 * C1850 + C13223 * C1862 + C13226 * C1851 +
              C13222 * C1863) *
                 C30921 +
             (C13227 * C1844 + C13223 * C1853 + C13226 * C1845 +
              C13222 * C1854) *
                 C116) *
                C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C31023) *
              C30736 * C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C1664 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C1665 +
           (((C19284 + C19283) * C116 + (C19282 + C19281) * C30921) * C18918 +
            ((C13226 * C1844 + C13222 * C1853 + C13227 * C2120 +
              C13223 * C2121) *
                 C116 +
             (C13226 * C1850 + C13222 * C1862 + C13227 * C2122 +
              C13223 * C2123) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C1664 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C1665 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C31057 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C1665 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C1664 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C31023) *
              C31045 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C1664 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C1665 +
           (((C14530 + C14529) * C116 + (C14528 + C14527) * C30921) * C18918 +
            ((C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
              C13223 * C6492) *
                 C116 +
             (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
              C13223 * C6494) *
                 C30921) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
              C1839 -
          (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
           ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
              C1840 +
          (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
           ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
              C1841 -
          (((C20973 + C20974) * C30921 + (C20975 + C20976) * C116) * C18919 +
           ((C20972 + C20971) * C30921 + (C20970 + C20969) * C116) * C18918) *
              C1842 +
          (((C20976 + C20975) * C116 + (C20974 + C20973) * C30921) * C18918 +
           ((C13226 * C10501 + C13222 * C10504 + C13227 * C10784 +
             C13223 * C10785) *
                C116 +
            (C13226 * C10503 + C13222 * C10507 + C13227 * C10786 +
             C13223 * C10787) *
                C30921) *
               C18919) *
              C1843) *
         C30736 * C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C942 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C943 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C30990 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C31020) *
              C30975 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C942 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C943 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30990 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C30736 * C554 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C30841 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30990) *
              C30736 * C555 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30990 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C30841) *
              C30736 * C556 +
          ((((C19553 + C19554) * C116 + (C19555 + C19556) * C30921) * C18918 +
            ((C13226 * C421 + C13222 * C439 + C13227 * C423 + C13223 * C442) *
                 C116 +
             (C13226 * C438 + C13222 * C451 + C13227 * C443 + C13223 * C453) *
                 C30921) *
                C18919) *
               C30841 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C2116 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C2117 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C2118 -
           (((C20973 + C20974) * C30921 + (C20975 + C20976) * C116) * C18919 +
            ((C20972 + C20971) * C30921 + (C20970 + C20969) * C116) * C18918) *
               C31036) *
              C30736 * C30975 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C2117 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C2116 -
           (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C2118 +
           (((C21312 + C21311) * C116 + (C21310 + C21309) * C30921) * C18918 +
            ((C13226 * C1848 + C13222 * C1857 + C13227 * C1849 +
              C13223 * C1858) *
                 C116 +
             (C13226 * C1860 + C13222 * C1866 + C13227 * C1861 +
              C13223 * C1867) *
                 C30921) *
                C18919) *
               C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                 C116 +
             (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C31045 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C258 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C31045 -
           (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                 C30921 +
             (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                 C116) *
                C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C31057 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                 C116 +
             (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C31045 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                C116 +
            (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                C30921) *
               C18919) *
              C30754 * C30736 * C108 -
          (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                C30921 +
            (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                C116) *
               C18919 +
           ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C30921 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C116) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C116 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C30921) *
               C18918 +
           ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                C116 +
            (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                C30921) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C13227 * C440 + C13223 * C452 + C13226 * C437 + C13222 * C450) *
                C30921 +
            (C13227 * C422 + C13223 * C441 + C13226 * C420 + C13222 * C436) *
                C116) *
               C18919 +
           ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C30921 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C116) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
                C116 +
            (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
                C30921) *
               C18918 +
           ((C13226 * C422 + C13222 * C441 + C13227 * C662 + C13223 * C663) *
                C116 +
            (C13226 * C440 + C13222 * C452 + C13227 * C664 + C13223 * C665) *
                C30921) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C942 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C943 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C31054 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C943 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C942 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C942 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C943 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
              C30754 * C1010 -
          (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
           ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
              C30754 * C1011 +
          (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
           ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
              C30754 * C1012 -
          (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
           ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
              C30754 * C1013 +
          (((C14348 + C14347) * C116 + (C14346 + C14345) * C30921) * C18918 +
           ((C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C116 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C30921) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C1664 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C1665 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31054 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C1665 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C1664 -
           (((C13227 * C1850 + C13223 * C1862 + C13226 * C1851 +
              C13222 * C1863) *
                 C30921 +
             (C13227 * C1844 + C13223 * C1853 + C13226 * C1845 +
              C13222 * C1854) *
                 C116) *
                C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C31023) *
              C30736 * C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C1664 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C1665 +
           (((C19284 + C19283) * C116 + (C19282 + C19281) * C30921) * C18918 +
            ((C13226 * C1844 + C13222 * C1853 + C13227 * C2120 +
              C13223 * C2121) *
                 C116 +
             (C13226 * C1850 + C13222 * C1862 + C13227 * C2122 +
              C13223 * C2123) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C1664 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C1665 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C31057 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C1665 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C1664 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C31023) *
              C31045 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C1664 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C1665 +
           (((C14530 + C14529) * C116 + (C14528 + C14527) * C30921) * C18918 +
            ((C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
              C13223 * C6492) *
                 C116 +
             (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
              C13223 * C6494) *
                 C30921) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C30799) *
              C30713 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C30989 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C30722 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C3094 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C3094) *
               C30799) *
              C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30837 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30844 +
            (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
             ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
                C3602) *
               C30989 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30844 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30837 -
            (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
             ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
                C3602) *
               C30799) *
              C2440 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30844 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30837 -
            (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
             ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
                C3602) *
               C30989 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30837 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30844 +
            (((C15600 + C15599) * C116 + (C15598 + C15597) * C30921) * C18918 +
             ((C13226 * C2223 + C13222 * C2226 + C13227 * C2224 +
               C13223 * C2227) *
                  C116 +
              (C13226 * C2229 + C13222 * C2232 + C13227 * C2230 +
               C13223 * C2233) *
                  C30921) *
                 C18919) *
                C3602) *
               C30799) *
              C30719)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C31057 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C31045 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C3094 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C31020) *
              C2440 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C31057 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C31045 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C3094 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C30736 * C31063 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C30841 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C3094) *
              C30736 * C31056 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C3094 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C30841) *
              C30736 * C31043 +
          ((((C19553 + C19554) * C116 + (C19555 + C19556) * C30921) * C18918 +
            ((C13226 * C421 + C13222 * C439 + C13227 * C423 + C13223 * C442) *
                 C116 +
             (C13226 * C438 + C13222 * C451 + C13227 * C443 + C13223 * C453) *
                 C30921) *
                C18919) *
               C30841 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31065 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31062 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C31053 -
           (((C20973 + C20974) * C30921 + (C20975 + C20976) * C116) * C18919 +
            ((C20972 + C20971) * C30921 + (C20970 + C20969) * C116) * C18918) *
               C31036) *
              C30736 * C2440 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C31062 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C31065 -
           (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C31053 +
           (((C21312 + C21311) * C116 + (C21310 + C21309) * C30921) * C18918 +
            ((C13226 * C1848 + C13222 * C1857 + C13227 * C1849 +
              C13223 * C1858) *
                 C116 +
             (C13226 * C1860 + C13222 * C1866 + C13227 * C1861 +
              C13223 * C1867) *
                 C30921) *
                C18919) *
               C31036) *
              C30736 * C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30837 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30844 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C20969 + C20970) * C116 + (C20971 + C20972) * C30921) * C18919) *
               C3602) *
              C30736 * C30713 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C30844 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30837 -
           (((C21309 + C21310) * C30921 + (C21311 + C21312) * C116) * C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C3602) *
              C30736 * C30722 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30837 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C30844 +
           (((C19284 + C19283) * C116 + (C19282 + C19281) * C30921) * C18918 +
            ((C13226 * C1844 + C13222 * C1853 + C13227 * C2120 +
              C13223 * C2121) *
                 C116 +
             (C13226 * C1850 + C13222 * C1862 + C13227 * C2122 +
              C13223 * C2123) *
                 C30921) *
                C18919) *
               C3602) *
              C30736 * C2703)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C3094 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C30736 * C31063 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C30841 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C3094) *
              C30736 * C31056 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C3094 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C30841) *
              C30736 * C31043 +
          ((((C19553 + C19554) * C116 + (C19555 + C19556) * C30921) * C18918 +
            ((C13226 * C421 + C13222 * C439 + C13227 * C423 + C13223 * C442) *
                 C116 +
             (C13226 * C438 + C13222 * C451 + C13227 * C443 + C13223 * C453) *
                 C30921) *
                C18919) *
               C30841 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C3094) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C3094 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C31057 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C3094) *
               C31045 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C3094 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C31020) *
              C2440 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C3094) *
               C31057 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C3094 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C31045 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C3094) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C30989 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C30799) *
              C554 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C30799 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C30989) *
              C555 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C30989 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C30799) *
              C556 +
          ((((C13733 + C13734) * C116 + (C13735 + C13736) * C30921) * C18918 +
            ((C13226 * C815 + C13222 * C824 + C13227 * C816 + C13223 * C825) *
                 C116 +
             (C13226 * C823 + C13222 * C830 + C13227 * C826 + C13223 * C831) *
                 C30921) *
                C18919) *
               C30754 * C30799 -
           (((C13227 * C440 + C13223 * C452 + C13226 * C437 + C13222 * C450) *
                 C30921 +
             (C13227 * C422 + C13223 * C441 + C13226 * C420 + C13222 * C436) *
                 C116) *
                C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30754 * C30989) *
              C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C1284 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C1285 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C1286 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30754 * C31030) *
              C30975 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C1285 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C1284 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C1286 +
           (((C14672 + C14671) * C116 + (C14670 + C14669) * C30921) * C18918 +
            ((C13226 * C1543 + C13222 * C1546 + C13227 * C1544 +
              C13223 * C1547) *
                 C116 +
             (C13226 * C1549 + C13222 * C1552 + C13227 * C1550 +
              C13223 * C1553) *
                 C30921) *
                C18919) *
               C30754 * C31030) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C30799) *
              C258 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C30989 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C30799) *
              C259 +
          (((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                  C116 +
              (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                  C30921) *
                 C18918 +
             ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
                C30990 -
            (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
             ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
                C30841) *
               C30989 +
           ((((C14096 + C14095) * C116 + (C14094 + C14093) * C30921) * C18918 +
             ((C13226 * C1150 + C13222 * C1162 + C13227 * C2014 +
               C13223 * C2015) *
                  C116 +
              (C13226 * C1159 + C13222 * C1177 + C13227 * C2016 +
               C13223 * C2017) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
             ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
                C30990) *
               C30799) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30990 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C1284 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C30841 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30990) *
              C1285 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30990 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C30841) *
              C1286 +
          ((((C15020 + C15019) * C116 + (C15018 + C15017) * C30921) * C18918 +
            ((C13226 * C5529 + C13222 * C5533 + C13227 * C6377 +
              C13223 * C6378) *
                 C116 +
             (C13226 * C5532 + C13222 * C5538 + C13227 * C6379 +
              C13223 * C6380) *
                 C30921) *
                C18919) *
               C30841 -
           (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
            ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
               C30990) *
              C31030) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                 C116 +
             (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C31045 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C258 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C31045 -
           (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                 C30921 +
             (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                 C116) *
                C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C31057 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                 C116 +
             (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C31045 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                C116 +
            (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                C30921) *
               C18919) *
              C30754 * C30736 * C108 -
          (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                C30921 +
            (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                C116) *
               C18919 +
           ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C30921 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C116) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C116 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C30921) *
               C18918 +
           ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                C116 +
            (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                C30921) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C13227 * C440 + C13223 * C452 + C13226 * C437 + C13222 * C450) *
                C30921 +
            (C13227 * C422 + C13223 * C441 + C13226 * C420 + C13222 * C436) *
                C116) *
               C18919 +
           ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C30921 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C116) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
                C116 +
            (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
                C30921) *
               C18918 +
           ((C13226 * C422 + C13222 * C441 + C13227 * C662 + C13223 * C663) *
                C116 +
            (C13226 * C440 + C13222 * C452 + C13227 * C664 + C13223 * C665) *
                C30921) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31058 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31047 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C258 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C31047 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C31058 -
           (((C13227 * C1850 + C13223 * C1862 + C13226 * C1851 +
              C13222 * C1863) *
                 C30921 +
             (C13227 * C1844 + C13223 * C1853 + C13226 * C1845 +
              C13222 * C1854) *
                 C116) *
                C18919 +
            ((C19276 + C19275) * C30921 + (C19274 + C19273) * C116) * C18918) *
               C31023) *
              C30736 * C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C31058 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C31047 +
           (((C19284 + C19283) * C116 + (C19282 + C19281) * C30921) * C18918 +
            ((C13226 * C1844 + C13222 * C1853 + C13227 * C2120 +
              C13223 * C2121) *
                 C116 +
             (C13226 * C1850 + C13222 * C1862 + C13227 * C2122 +
              C13223 * C2123) *
                 C30921) *
                C18919) *
               C31023) *
              C30736 * C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C942 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C943 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C31054 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C943 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C942 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C942 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C943 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
              C30754 * C1010 -
          (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
           ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
              C30754 * C1011 +
          (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
           ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
              C30754 * C1012 -
          (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
           ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
              C30754 * C1013 +
          (((C14348 + C14347) * C116 + (C14346 + C14345) * C30921) * C18918 +
           ((C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C116 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C30921) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C31058 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C31047 +
           (((C19268 + C19267) * C116 + (C19266 + C19265) * C30921) * C18918 +
            ((C13226 * C1846 + C13222 * C1855 + C13227 * C1845 +
              C13223 * C1854) *
                 C116 +
             (C13226 * C1852 + C13222 * C1864 + C13227 * C1851 +
              C13223 * C1863) *
                 C30921) *
                C18919) *
               C31023) *
              C942 +
          ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
            ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
               C31047 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C31058 -
           (((C15869 + C15870) * C30921 + (C15871 + C15872) * C116) * C18919 +
            ((C14522 + C14521) * C30921 + (C14520 + C14519) * C116) * C18918) *
               C31023) *
              C943 +
          ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C31058 -
           (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
            ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
               C31047 +
           (((C14530 + C14529) * C116 + (C14528 + C14527) * C30921) * C18918 +
            ((C13226 * C6219 + C13222 * C6223 + C13227 * C6491 +
              C13223 * C6492) *
                 C116 +
             (C13226 * C6222 + C13222 * C6228 + C13227 * C6493 +
              C13223 * C6494) *
                 C30921) *
                C18919) *
               C31023) *
              C31020) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30990 -
           (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
            ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
               C30841) *
              C30736 * C554 +
          ((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
            ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
               C30841 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30990) *
              C30736 * C555 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30990 -
           (((C19281 + C19282) * C30921 + (C19283 + C19284) * C116) * C18919 +
            ((C19280 + C19279) * C30921 + (C19278 + C19277) * C116) * C18918) *
               C30841) *
              C30736 * C556 +
          ((((C19553 + C19554) * C116 + (C19555 + C19556) * C30921) * C18918 +
            ((C13226 * C421 + C13222 * C439 + C13227 * C423 + C13223 * C442) *
                 C116 +
             (C13226 * C438 + C13222 * C451 + C13227 * C443 + C13223 * C453) *
                 C30921) *
                C18919) *
               C30841 -
           (((C19556 + C19555) * C30921 + (C19554 + C19553) * C116) * C18919 +
            ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                 C30921 +
             (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                 C116) *
                C18918) *
               C30990) *
              C30736 * C31024)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                  C116 +
              (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                  C30921) *
                 C18918 +
             ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
                C30990 -
            (((C19265 + C19266) * C30921 + (C19267 + C19268) * C116) * C18919 +
             ((C19264 + C19263) * C30921 + (C19262 + C19261) * C116) * C18918) *
                C30841) *
               C942 +
           ((((C14088 + C14087) * C116 + (C14086 + C14085) * C30921) * C18918 +
             ((C14519 + C14520) * C116 + (C14521 + C14522) * C30921) * C18919) *
                C30841 -
            (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
             ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
                C30990) *
               C943 +
           ((((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
             ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
                C30990 -
            (((C14527 + C14528) * C30921 + (C14529 + C14530) * C116) * C18919 +
             ((C14526 + C14525) * C30921 + (C14524 + C14523) * C116) * C18918) *
                C30841) *
               C31020) *
              C30975 +
          (((((C19269 + C19270) * C116 + (C19271 + C19272) * C30921) * C18918 +
             ((C19273 + C19274) * C116 + (C19275 + C19276) * C30921) * C18919) *
                C30841 -
            (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
             ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                  C30921 +
              (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                  C116) *
                 C18918) *
                C30990) *
               C942 +
           ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
             ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
                C30990 -
            (((C15597 + C15598) * C30921 + (C15599 + C15600) * C116) * C18919 +
             ((C14092 + C14091) * C30921 + (C14090 + C14089) * C116) * C18918) *
                C30841) *
               C943 +
           ((((C14878 + C14877) * C116 + (C14876 + C14875) * C30921) * C18918 +
             ((C13226 * C1157 + C13222 * C1172 + C13227 * C1158 +
               C13223 * C1173) *
                  C116 +
              (C13226 * C1175 + C13222 * C1184 + C13227 * C1176 +
               C13223 * C1185) *
                  C30921) *
                 C18919) *
                C30841 -
            (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
             ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
                C30990) *
               C31020) *
              C30719)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                C116 +
            (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                C30921) *
               C18919) *
              C30754 * C30736 * C108 -
          (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                C30921 +
            (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                C116) *
               C18919 +
           ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                C30921 +
            (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                C116) *
               C18918) *
              C30754 * C30736 * C109 +
          (((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                C116 +
            (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                C30921) *
               C18918 +
           ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                C116 +
            (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                C30921) *
               C18919) *
              C30754 * C30736 * C110 -
          (((C13227 * C440 + C13223 * C452 + C13226 * C437 + C13222 * C450) *
                C30921 +
            (C13227 * C422 + C13223 * C441 + C13226 * C420 + C13222 * C436) *
                C116) *
               C18919 +
           ((C13227 * C133 + C13223 * C142 + C13226 * C130 + C13222 * C141) *
                C30921 +
            (C13227 * C121 + C13223 * C132 + C13226 * C120 + C13222 * C131) *
                C116) *
               C18918) *
              C30754 * C30736 * C111 +
          (((C13226 * C121 + C13222 * C132 + C13227 * C122 + C13223 * C135) *
                C116 +
            (C13226 * C133 + C13222 * C142 + C13227 * C134 + C13223 * C143) *
                C30921) *
               C18918 +
           ((C13226 * C422 + C13222 * C441 + C13227 * C662 + C13223 * C663) *
                C116 +
            (C13226 * C440 + C13222 * C452 + C13227 * C664 + C13223 * C665) *
                C30921) *
               C18919) *
              C30754 * C30736 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C13226 * C416 + C13222 * C429 + C13227 * C415 + C13223 * C428) *
                 C116 +
             (C13226 * C426 + C13222 * C446 + C13227 * C425 + C13223 * C445) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C31045 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C258 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C31045 -
           (((C13227 * C424 + C13223 * C444 + C13226 * C425 + C13222 * C445) *
                 C30921 +
             (C13227 * C414 + C13223 * C427 + C13226 * C415 + C13222 * C428) *
                 C116) *
                C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C31057 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C259 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C13226 * C414 + C13222 * C427 + C13227 * C420 + C13223 * C436) *
                 C116 +
             (C13226 * C424 + C13222 * C444 + C13227 * C437 + C13223 * C450) *
                 C30921) *
                C18919) *
               C30754 * C31057 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C31045 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                 C116 +
             (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                 C30921) *
                C18918 +
            ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
               C30754 * C942 -
           (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
            ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
               C30754 * C943 +
           (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
            ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
               C30754 * C31020) *
              C31054 +
          ((((C13433 + C13434) * C116 + (C13435 + C13436) * C30921) * C18918 +
            ((C14089 + C14090) * C116 + (C14091 + C14092) * C30921) * C18919) *
               C30754 * C943 -
           (((C19272 + C19271) * C30921 + (C19270 + C19269) * C116) * C18919 +
            ((C13227 * C129 + C13223 * C140 + C13226 * C128 + C13222 * C139) *
                 C30921 +
             (C13227 * C119 + C13223 * C126 + C13226 * C118 + C13222 * C125) *
                 C116) *
                C18918) *
               C30754 * C942 -
           (((C14875 + C14876) * C30921 + (C14877 + C14878) * C116) * C18919 +
            ((C13440 + C13439) * C30921 + (C13438 + C13437) * C116) * C18918) *
               C30754 * C31020) *
              C31041 +
          ((((C13226 * C119 + C13222 * C126 + C13227 * C120 + C13223 * C131) *
                 C116 +
             (C13226 * C129 + C13222 * C140 + C13227 * C130 + C13223 * C141) *
                 C30921) *
                C18918 +
            ((C19277 + C19278) * C116 + (C19279 + C19280) * C30921) * C18919) *
               C30754 * C942 -
           (((C14093 + C14094) * C30921 + (C14095 + C14096) * C116) * C18919 +
            ((C13444 + C13443) * C30921 + (C13442 + C13441) * C116) * C18918) *
               C30754 * C943 +
           (((C13448 + C13447) * C116 + (C13446 + C13445) * C30921) * C18918 +
            ((C13226 * C1153 + C13222 * C1168 + C13227 * C1440 +
              C13223 * C1441) *
                 C116 +
             (C13226 * C1165 + C13222 * C1180 + C13227 * C1442 +
              C13223 * C1443) *
                 C30921) *
                C18919) *
               C30754 * C31020) *
              C31014)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13226 * C117 + C13222 * C124 + C13227 * C118 + C13223 * C125) *
                C116 +
            (C13226 * C127 + C13222 * C138 + C13227 * C128 + C13223 * C139) *
                C30921) *
               C18918 +
           ((C19261 + C19262) * C116 + (C19263 + C19264) * C30921) * C18919) *
              C30754 * C1010 -
          (((C14085 + C14086) * C30921 + (C14087 + C14088) * C116) * C18919 +
           ((C13428 + C13427) * C30921 + (C13426 + C13425) * C116) * C18918) *
              C30754 * C1011 +
          (((C13432 + C13431) * C116 + (C13430 + C13429) * C30921) * C18918 +
           ((C14523 + C14524) * C116 + (C14525 + C14526) * C30921) * C18919) *
              C30754 * C1012 -
          (((C15017 + C15018) * C30921 + (C15019 + C15020) * C116) * C18919 +
           ((C14344 + C14343) * C30921 + (C14342 + C14341) * C116) * C18918) *
              C30754 * C1013 +
          (((C14348 + C14347) * C116 + (C14346 + C14345) * C30921) * C18918 +
           ((C13226 * C5530 + C13222 * C5535 + C13227 * C5819 +
             C13223 * C5820) *
                C116 +
            (C13226 * C5534 + C13222 * C5539 + C13227 * C5821 +
             C13223 * C5822) *
                C30921) *
               C18919) *
              C30754 * C1014) *
         C30708) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C30795 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C30802 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C2700) *
                       C30713 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C30802 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C30795 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C2700) *
                       C30722 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C30795 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C30802 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C2700) *
                       C2703)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C30795 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C30802 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30754 * C2700) *
                       C30713 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C30802 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C30795 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C2700) *
                       C30722 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C30795 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C30802 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C2700) *
                       C2703)) /
                     (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C30795 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C30802 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C2700) *
                       C2440 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C30795 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30802 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C30990) *
                        C2700) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C30795 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C30802 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C30990 -
                     (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C2700) *
                       C2440 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C30795 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30802 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C30990) *
                        C2700) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C31064 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C31060 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31050 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30754 * C31030) *
                       C2440 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C31060 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C31064 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31050 +
                    ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                      C102 * C1025 + C115 * C1290 + C103 * C1291) *
                         C116 +
                     (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                      C102 * C1034 + C115 * C1292 + C103 * C1293) *
                         C30921) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C2332 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C31063 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C2332) *
                       C31056 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C2332 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C31043 +
                   (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                      C115 * C558 + C103 * C559) *
                         C116 +
                     (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                      C115 * C560 + C103 * C561) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30754 * C2332) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C31058 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C31047 +
                     ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                       C115 * C419 + C103 * C432) *
                          C116 +
                      (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                       C115 * C435 + C103 * C449) *
                          C30921) *
                         C30933 * C31023) *
                        C2332 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C31047 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C31058 -
                     ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                       C102 * C1178 + C113 * C1161 + C101 * C1179) *
                          C30921 +
                      (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                       C102 * C1163 + C113 * C1152 + C101 * C1164) *
                          C116) *
                         C30933 * C31023) *
                        C30799) *
                       C2440 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C31047 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C31058 -
                     ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                       C113 * C434 + C101 * C448) *
                          C30921 +
                      (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                       C113 * C418 + C101 * C431) *
                          C116) *
                         C30933 * C31023) *
                        C2332 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C31058 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C31047 +
                     ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                       C102 * C1162 + C115 * C2014 + C103 * C2015) *
                          C116 +
                      (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                       C102 * C1177 + C115 * C2016 + C103 * C2017) *
                          C30921) *
                         C30933 * C31023) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C2332 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C30799) *
                       C31063 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C2332) *
                       C31056 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C2332 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C30799) *
                       C31043 +
                   ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                     C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                     (C4559 * C1292 + C30682 * C1293) * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30754 * C2332) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31064 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31060 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30754 * C31050 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30754 * C31030) *
                       C2440 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31060 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31064 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31050 +
                    (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                     C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                     (C4559 * C5665 + C30682 * C5666) * C4558) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C31058 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C31047 +
                     ((C4559 * C417 + C30682 * C430) * C4560 +
                      (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                      C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                         C30933 * C31023) *
                        C2332 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C31047 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C31058 -
                     (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                      C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                         C30933 * C31023) *
                        C30799) *
                       C2440 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C31047 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C31058 -
                     (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                      C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                      (C4559 * C418 + C30682 * C431) * C4560) *
                         C30933 * C31023) *
                        C2332 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C31058 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C31047 +
                     (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                      C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                      (C4559 * C6379 + C30682 * C6380) * C4558) *
                         C30933 * C31023) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C30713 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C2332 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C30722 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C2703)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C30713 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C2332 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C30722 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C30990 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C2703)) /
                     (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C2332 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C31063 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C2332) *
                       C31056 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C2332 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C31043 +
                   (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                      C115 * C558 + C103 * C559) *
                         C116 +
                     (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                      C115 * C560 + C103 * C561) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30754 * C2332) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C31064 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C31060 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31050 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30754 * C31030) *
                       C2440 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C31060 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C31064 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31050 +
                    ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                      C102 * C1025 + C115 * C1290 + C103 * C1291) *
                         C116 +
                     (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                      C102 * C1034 + C115 * C1292 + C103 * C1293) *
                         C30921) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C2332 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C30799) *
                       C31063 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C2332) *
                       C31056 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C2332 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C30799) *
                       C31043 +
                   ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                     C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                     (C4559 * C1292 + C30682 * C1293) * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30754 * C2332) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31064 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31060 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30754 * C31050 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30754 * C31030) *
                       C2440 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31060 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31064 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31050 +
                    (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                     C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                     (C4559 * C5665 + C30682 * C5666) * C4558) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C30795 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C30802 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C2700) *
                       C30975 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C30795 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30802 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C3094) *
                        C2700) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C30795 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C30802 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C3094 -
                     (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C2700) *
                       C30975 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C30795 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30802 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C3094) *
                        C2700) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C3602) *
                       C30795 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C3602) *
                       C30802 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C1156 + C101 * C1171 + C114 * C1157 +
                      C102 * C1172 + C115 * C1158 + C103 * C1173) *
                         C116 +
                     (C113 * C1174 + C101 * C1183 + C114 * C1175 +
                      C102 * C1184 + C115 * C1176 + C103 * C1185) *
                         C30921) *
                        C30933 * C3602) *
                       C2700) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30837 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30844 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C3602) *
                       C30795 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30844 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30837 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C3602) *
                       C30802 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30837 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30844 +
                    (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                     C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                     (C4559 * C5537 + C30682 * C5540) * C4558) *
                        C30933 * C3602) *
                       C2700) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C31064 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C31060 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C31050 +
                   (((C113 * C1542 + C101 * C1545 + C114 * C1543 +
                      C102 * C1546 + C115 * C1544 + C103 * C1547) *
                         C116 +
                     (C113 * C1548 + C101 * C1551 + C114 * C1549 +
                      C102 * C1552 + C115 * C1550 + C103 * C1553) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C3094) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C31054 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C2332 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C31041 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31065 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31062 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31053 -
                    ((C115 * C1850 + C103 * C1862 + C114 * C1851 +
                      C102 * C1863 + C113 * C1852 + C101 * C1864) *
                         C30921 +
                     (C115 * C1844 + C103 * C1853 + C114 * C1845 +
                      C102 * C1854 + C113 * C1846 + C101 * C1855) *
                         C116) *
                        C30933 * C31036) *
                       C2332 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C31062 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C31065 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31053 +
                    ((C113 * C2222 + C101 * C2225 + C114 * C2223 +
                      C102 * C2226 + C115 * C2224 + C103 * C2227) *
                         C116 +
                     (C113 * C2228 + C101 * C2231 + C114 * C2229 +
                      C102 * C2232 + C115 * C2230 + C103 * C2233) *
                         C30921) *
                        C30933 * C31036) *
                       C30799) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C31054 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C2332 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C31041 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C3094 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C31064 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C31060 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C3094 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C31050 +
                   ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                     C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                     (C4559 * C5929 + C30682 * C5930) * C4558) *
                        C30933 * C30841 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C3094) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31065 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31062 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31053 -
                    (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 +
                     C6609 * C4561 + (C4559 * C1852 + C30682 * C1864) * C4556 +
                     (C4559 * C1846 + C30682 * C1855) * C4560) *
                        C30933 * C31036) *
                       C2332 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C31062 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C31065 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31053 +
                    (C6609 * C4560 + C6608 * C4556 + C6607 * C4561 +
                     C6606 * C4557 + (C4559 * C6593 + C30682 * C6594) * C4562 +
                     (C4559 * C6595 + C30682 * C6596) * C4558) *
                        C30933 * C31036) *
                       C30799) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30837 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30844 +
                     ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                       C115 * C419 + C103 * C432) *
                          C116 +
                      (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                       C115 * C435 + C103 * C449) *
                          C30921) *
                         C30933 * C3602) *
                        C2332 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30844 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30837 -
                     ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                       C102 * C1178 + C113 * C1161 + C101 * C1179) *
                          C30921 +
                      (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                       C102 * C1163 + C113 * C1152 + C101 * C1164) *
                          C116) *
                         C30933 * C3602) *
                        C30799) *
                       C30975 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30844 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30837 -
                     ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                       C113 * C434 + C101 * C448) *
                          C30921 +
                      (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                       C113 * C418 + C101 * C431) *
                          C116) *
                         C30933 * C3602) *
                        C2332 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30837 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30844 +
                     ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                       C102 * C1162 + C115 * C2014 + C103 * C2015) *
                          C116 +
                      (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                       C102 * C1177 + C115 * C2016 + C103 * C2017) *
                          C30921) *
                         C30933 * C3602) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30837 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30844 +
                     ((C4559 * C417 + C30682 * C430) * C4560 +
                      (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                      C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                         C30933 * C3602) *
                        C2332 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30844 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30837 -
                     (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                      C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                         C30933 * C3602) *
                        C30799) *
                       C30975 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30844 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30837 -
                     (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                      C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                      (C4559 * C418 + C30682 * C431) * C4560) *
                         C30933 * C3602) *
                        C2332 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30837 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30844 +
                     (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                      C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                      (C4559 * C6379 + C30682 * C6380) * C4558) *
                         C30933 * C3602) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C31054 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C2332 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C31041 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C2332 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C31064 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C3094) *
                       C31060 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C31050 +
                   (((C113 * C1542 + C101 * C1545 + C114 * C1543 +
                      C102 * C1546 + C115 * C1544 + C103 * C1547) *
                         C116 +
                     (C113 * C1548 + C101 * C1551 + C114 * C1549 +
                      C102 * C1552 + C115 * C1550 + C103 * C1553) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C3094) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C31054 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C2332 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C31041 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C3094 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C2332 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C31064 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C3094) *
                       C31060 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C3094 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C31050 +
                   ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                     C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                     (C4559 * C5929 + C30682 * C5930) * C4558) *
                        C30933 * C30841 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C3094) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C1284 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C1285 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C1286 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30754 * C31030) *
                       C30975 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C1285 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C1284 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C1286 +
                    ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                      C102 * C1025 + C115 * C1290 + C103 * C1291) *
                         C116 +
                     (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                      C102 * C1034 + C115 * C1292 + C103 * C1293) *
                         C30921) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C30989 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C554 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C30989) *
                       C555 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C30989 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C556 +
                   (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                      C115 * C558 + C103 * C559) *
                         C116 +
                     (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                      C115 * C560 + C103 * C561) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30754 * C30989) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C1664 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C1665 +
                     ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                       C115 * C419 + C103 * C432) *
                          C116 +
                      (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                       C115 * C435 + C103 * C449) *
                          C30921) *
                         C30933 * C31023) *
                        C30989 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C1665 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C1664 -
                     ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                       C102 * C1178 + C113 * C1161 + C101 * C1179) *
                          C30921 +
                      (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                       C102 * C1163 + C113 * C1152 + C101 * C1164) *
                          C116) *
                         C30933 * C31023) *
                        C30799) *
                       C30975 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C1665 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C1664 -
                     ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                       C113 * C434 + C101 * C448) *
                          C30921 +
                      (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                       C113 * C418 + C101 * C431) *
                          C116) *
                         C30933 * C31023) *
                        C30989 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C1664 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C1665 +
                     ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                       C102 * C1162 + C115 * C2014 + C103 * C2015) *
                          C116 +
                      (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                       C102 * C1177 + C115 * C2016 + C103 * C2017) *
                          C30921) *
                         C30933 * C31023) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C30989 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C30799) *
                       C554 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C30989) *
                       C555 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C30989 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C30799) *
                       C556 +
                   ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                     C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                     (C4559 * C1292 + C30682 * C1293) * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30754 * C30989) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C1284 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C1285 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30754 * C1286 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30754 * C31030) *
                       C30975 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C1285 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C1284 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C1286 +
                    (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                     C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                     (C4559 * C5665 + C30682 * C5666) * C4558) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C1664 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C1665 +
                     ((C4559 * C417 + C30682 * C430) * C4560 +
                      (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                      C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                         C30933 * C31023) *
                        C30989 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C1665 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C1664 -
                     (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                      C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                         C30933 * C31023) *
                        C30799) *
                       C30975 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C1665 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C1664 -
                     (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                      C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                      (C4559 * C418 + C30682 * C431) * C4560) *
                         C30933 * C31023) *
                        C30989 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C1664 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C1665 +
                     (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                      C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                      (C4559 * C6379 + C30682 * C6380) * C4558) *
                         C30933 * C31023) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C1284 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C1285 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C1286 +
                   (((C113 * C1542 + C101 * C1545 + C114 * C1543 +
                      C102 * C1546 + C115 * C1544 + C103 * C1547) *
                         C116 +
                     (C113 * C1548 + C101 * C1551 + C114 * C1549 +
                      C102 * C1552 + C115 * C1550 + C103 * C1553) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30990) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C258 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C30989 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C259 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C2116 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C2117 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C2118 -
                    ((C115 * C1850 + C103 * C1862 + C114 * C1851 +
                      C102 * C1863 + C113 * C1852 + C101 * C1864) *
                         C30921 +
                     (C115 * C1844 + C103 * C1853 + C114 * C1845 +
                      C102 * C1854 + C113 * C1846 + C101 * C1855) *
                         C116) *
                        C30933 * C31036) *
                       C30989 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C2117 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C2116 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C2118 +
                    ((C113 * C2222 + C101 * C2225 + C114 * C2223 +
                      C102 * C2226 + C115 * C2224 + C103 * C2227) *
                         C116 +
                     (C113 * C2228 + C101 * C2231 + C114 * C2229 +
                      C102 * C2232 + C115 * C2230 + C103 * C2233) *
                         C30921) *
                        C30933 * C31036) *
                       C30799) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + (C4559 * C1542 + C30682 * C1545) * C4562 +
                      (C4559 * C1548 + C30682 * C1551) * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C258 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C30989 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     ((C4559 * C1549 + C30682 * C1552) * C4558 +
                      (C4559 * C1543 + C30682 * C1546) * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C259 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C30990 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C1284 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C1285 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30990 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C1286 +
                   ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                     C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                     (C4559 * C5929 + C30682 * C5930) * C4558) *
                        C30933 * C30841 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30990) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C2116 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C2117 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C2118 -
                    (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 +
                     C6609 * C4561 + (C4559 * C1852 + C30682 * C1864) * C4556 +
                     (C4559 * C1846 + C30682 * C1855) * C4560) *
                        C30933 * C31036) *
                       C30989 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C2117 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C2116 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C2118 +
                    (C6609 * C4560 + C6608 * C4556 + C6607 * C4561 +
                     C6606 * C4557 + (C4559 * C6593 + C30682 * C6594) * C4562 +
                     (C4559 * C6595 + C30682 * C6596) * C4558) *
                        C30933 * C31036) *
                       C30799) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                         C115 * C119 + C103 * C126) *
                            C116 +
                        (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                         C115 * C129 + C103 * C140) *
                            C30921) *
                           C30933 * C30754 * C30736 * C108 -
                       ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                         C113 * C128 + C101 * C139) *
                            C30921 +
                        (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                         C113 * C118 + C101 * C125) *
                            C116) *
                           C30933 * C30754 * C30736 * C109 +
                       ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                         C115 * C121 + C103 * C132) *
                            C116 +
                        (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                         C115 * C133 + C103 * C142) *
                            C30921) *
                           C30933 * C30754 * C30736 * C110 -
                       ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                         C113 * C130 + C101 * C141) *
                            C30921 +
                        (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                         C113 * C120 + C101 * C131) *
                            C116) *
                           C30933 * C30754 * C30736 * C111 +
                       ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                         C115 * C123 + C103 * C136) *
                            C116 +
                        (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                         C115 * C137 + C103 * C144) *
                            C30921) *
                           C30933 * C30754 * C30736 * C112) +
                  std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                      ((((C113 * C117 + C101 * C124 + C114 * C118 +
                          C102 * C125 + C115 * C119 + C103 * C126) *
                             C116 +
                         (C113 * C127 + C101 * C138 + C114 * C128 +
                          C102 * C139 + C115 * C129 + C103 * C140) *
                             C30921) *
                            C30933 * C30754 * C31057 -
                        ((C115 * C271 + C103 * C291 + C114 * C272 +
                          C102 * C292 + C113 * C273 + C101 * C293) *
                             C30921 +
                         (C115 * C261 + C103 * C274 + C114 * C262 +
                          C102 * C275 + C113 * C263 + C101 * C276) *
                             C116) *
                            C30933 * C30754 * C31045 +
                        ((C113 * C264 + C101 * C277 + C114 * C265 +
                          C102 * C278 + C115 * C266 + C103 * C279) *
                             C116 +
                         (C113 * C280 + C101 * C294 + C114 * C281 +
                          C102 * C295 + C115 * C282 + C103 * C296) *
                             C30921) *
                            C30933 * C30754 * C31020) *
                           C258 +
                       (((C113 * C262 + C101 * C275 + C114 * C261 +
                          C102 * C274 + C115 * C267 + C103 * C283) *
                             C116 +
                         (C113 * C272 + C101 * C292 + C114 * C271 +
                          C102 * C291 + C115 * C284 + C103 * C297) *
                             C30921) *
                            C30933 * C30754 * C31045 -
                        ((C115 * C130 + C103 * C141 + C114 * C129 +
                          C102 * C140 + C113 * C128 + C101 * C139) *
                             C30921 +
                         (C115 * C120 + C103 * C131 + C114 * C119 +
                          C102 * C126 + C113 * C118 + C101 * C125) *
                             C116) *
                            C30933 * C30754 * C31057 -
                        ((C115 * C285 + C103 * C298 + C114 * C282 +
                          C102 * C296 + C113 * C281 + C101 * C295) *
                             C30921 +
                         (C115 * C268 + C103 * C286 + C114 * C266 +
                          C102 * C279 + C113 * C265 + C101 * C278) *
                             C116) *
                            C30933 * C30754 * C31020) *
                           C259 +
                       (((C113 * C119 + C101 * C126 + C114 * C120 +
                          C102 * C131 + C115 * C121 + C103 * C132) *
                             C116 +
                         (C113 * C129 + C101 * C140 + C114 * C130 +
                          C102 * C141 + C115 * C133 + C103 * C142) *
                             C30921) *
                            C30933 * C30754 * C31057 -
                        ((C115 * C287 + C103 * C299 + C114 * C284 +
                          C102 * C297 + C113 * C271 + C101 * C291) *
                             C30921 +
                         (C115 * C269 + C103 * C288 + C114 * C267 +
                          C102 * C283 + C113 * C261 + C101 * C274) *
                             C116) *
                            C30933 * C30754 * C31045 +
                        ((C113 * C266 + C101 * C279 + C114 * C268 +
                          C102 * C286 + C115 * C270 + C103 * C289) *
                             C116 +
                         (C113 * C282 + C101 * C296 + C114 * C285 +
                          C102 * C298 + C115 * C290 + C103 * C300) *
                             C30921) *
                            C30933 * C30754 * C31020) *
                           C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C258 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C30736 * C259 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                      C115 * C423 + C103 * C442) *
                         C116 +
                     (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                      C115 * C443 + C103 * C453) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C943 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C942 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C1010 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C1011 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C1012 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C1013 +
                   ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                     C115 * C1021 + C103 * C1030) *
                        C116 +
                    (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                     C115 * C1033 + C103 * C1039) *
                        C30921) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C1156 + C101 * C1171 + C114 * C1157 +
                      C102 * C1172 + C115 * C1158 + C103 * C1173) *
                         C116 +
                     (C113 * C1174 + C101 * C1183 + C114 * C1175 +
                      C102 * C1184 + C115 * C1176 + C103 * C1185) *
                         C30921) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31054 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C30736 * C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                      C115 * C423 + C103 * C442) *
                         C116 +
                     (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                      C115 * C443 + C103 * C453) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C31057 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C31045 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C1156 + C101 * C1171 + C114 * C1157 +
                      C102 * C1172 + C115 * C1158 + C103 * C1173) *
                         C116 +
                     (C113 * C1174 + C101 * C1183 + C114 * C1175 +
                      C102 * C1184 + C115 * C1176 + C103 * C1185) *
                         C30921) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C1839 -
                   ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                     C113 * C426 + C101 * C446) *
                        C30921 +
                    (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                     C113 * C416 + C101 * C429) *
                        C116) *
                       C30933 * C1840 +
                   ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                     C115 * C419 + C103 * C432) *
                        C116 +
                    (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                     C115 * C435 + C103 * C449) *
                        C30921) *
                       C30933 * C1841 -
                   ((C115 * C1850 + C103 * C1862 + C114 * C1851 + C102 * C1863 +
                     C113 * C1852 + C101 * C1864) *
                        C30921 +
                    (C115 * C1844 + C103 * C1853 + C114 * C1845 + C102 * C1854 +
                     C113 * C1846 + C101 * C1855) *
                        C116) *
                       C30933 * C1842 +
                   ((C113 * C1847 + C101 * C1856 + C114 * C1848 + C102 * C1857 +
                     C115 * C1849 + C103 * C1858) *
                        C116 +
                    (C113 * C1859 + C101 * C1865 + C114 * C1860 + C102 * C1866 +
                     C115 * C1861 + C103 * C1867) *
                        C30921) *
                       C30933 * C1843) *
                  C30736 * C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 +
                    (C4559 * C263 + C30682 * C276) * C4561 +
                    (C4559 * C273 + C30682 * C293) * C4557 +
                    (C4559 * C264 + C30682 * C277) * C4562 +
                    (C4559 * C280 + C30682 * C294) * C4558) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C4559 * C281 + C30682 * C295) * C4558 +
                    (C4559 * C265 + C30682 * C278) * C4562 +
                    (C4559 * C272 + C30682 * C292) * C4557 +
                    (C4559 * C262 + C30682 * C275) * C4561 +
                    (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 +
                    (C4559 * C261 + C30682 * C274) * C4561 +
                    (C4559 * C271 + C30682 * C291) * C4557 +
                    (C4559 * C266 + C30682 * C279) * C4562 +
                    (C4559 * C282 + C30682 * C296) * C4558) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C4559 * C285 + C30682 * C298) * C4558 +
                    (C4559 * C268 + C30682 * C286) * C4562 +
                    (C4559 * C284 + C30682 * C297) * C4557 +
                    (C4559 * C267 + C30682 * C283) * C4561 +
                    (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C4559 * C121 + C30682 * C132) * C4560 +
                    (C4559 * C133 + C30682 * C142) * C4556 +
                    (C4559 * C269 + C30682 * C288) * C4561 +
                    (C4559 * C287 + C30682 * C299) * C4557 +
                    (C4559 * C270 + C30682 * C289) * C4562 +
                    (C4559 * C290 + C30682 * C300) * C4558) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31045 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31057 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C1167 + C30682 * C1182) * C4558 +
                     (C4559 * C1155 + C30682 * C1170) * C4562 +
                     (C4559 * C820 + C30682 * C827) * C4557 +
                     (C4559 * C812 + C30682 * C817) * C4561 +
                     (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 +
                     (C4559 * C1152 + C30682 * C1164) * C4561 +
                     (C4559 * C1161 + C30682 * C1179) * C4557 +
                     (C4559 * C1156 + C30682 * C1171) * C4562 +
                     (C4559 * C1174 + C30682 * C1183) * C4558) *
                        C30933 * C31023) *
                       C30736 * C258 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 +
                     (C4559 * C813 + C30682 * C818) * C4561 +
                     (C4559 * C821 + C30682 * C828) * C4557 +
                     (C4559 * C1154 + C30682 * C1169) * C4562 +
                     (C4559 * C1166 + C30682 * C1181) * C4558) *
                        C30933 * C31047 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C31058 -
                    ((C4559 * C1175 + C30682 * C1184) * C4558 +
                     (C4559 * C1157 + C30682 * C1172) * C4562 +
                     (C4559 * C1160 + C30682 * C1178) * C4557 +
                     (C4559 * C1151 + C30682 * C1163) * C4561 +
                     (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C30736 * C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C1165 + C30682 * C1180) * C4558 +
                     (C4559 * C1153 + C30682 * C1168) * C4562 +
                     (C4559 * C822 + C30682 * C829) * C4557 +
                     (C4559 * C814 + C30682 * C819) * C4561 +
                     (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C419 + C30682 * C432) * C4560 +
                     (C4559 * C435 + C30682 * C449) * C4556 +
                     (C4559 * C1150 + C30682 * C1162) * C4561 +
                     (C4559 * C1159 + C30682 * C1177) * C4557 +
                     (C4559 * C1158 + C30682 * C1173) * C4562 +
                     (C4559 * C1176 + C30682 * C1185) * C4558) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C943 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C942 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1010 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1011 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1012 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C1013 +
                   (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                    C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                    (C4559 * C5404 + C30682 * C5406) * C4558) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31058 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C942 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C31047 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C31058 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C943 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C5534 + C30682 * C5539) * C4558 +
                     (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C31047 +
                    (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                     C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                     (C4559 * C5537 + C30682 * C5540) * C4558) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C1664 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C30736 * C31054 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C1665 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C1664 -
                    ((C4559 * C1175 + C30682 * C1184) * C4558 +
                     (C4559 * C1157 + C30682 * C1172) * C4562 +
                     (C4559 * C1160 + C30682 * C1178) * C4557 +
                     (C4559 * C1151 + C30682 * C1163) * C4561 +
                     (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C30736 * C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C1664 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C419 + C30682 * C432) * C4560 +
                     (C4559 * C435 + C30682 * C449) * C4556 +
                     (C4559 * C1150 + C30682 * C1162) * C4561 +
                     (C4559 * C1159 + C30682 * C1177) * C4557 +
                     (C4559 * C1158 + C30682 * C1173) * C4562 +
                     (C4559 * C1176 + C30682 * C1185) * C4558) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C1664 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C31057 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C1665 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C1664 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C31045 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C1664 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C1665 +
                    (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                     C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                     (C4559 * C5537 + C30682 * C5540) * C4558) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C1839 -
                   (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                    C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                    (C4559 * C416 + C30682 * C429) * C4560) *
                       C30933 * C1840 +
                   ((C4559 * C417 + C30682 * C430) * C4560 +
                    (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                    C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                       C30933 * C1841 -
                   ((C4559 * C6222 + C30682 * C6228) * C4558 +
                    (C4559 * C6219 + C30682 * C6223) * C4562 +
                    (C4559 * C2228 + C30682 * C2231) * C4557 +
                    (C4559 * C2222 + C30682 * C2225) * C4561 +
                    (C4559 * C1852 + C30682 * C1864) * C4556 +
                    (C4559 * C1846 + C30682 * C1855) * C4560) *
                       C30933 * C1842 +
                   ((C4559 * C1847 + C30682 * C1856) * C4560 +
                    (C4559 * C1859 + C30682 * C1865) * C4556 +
                    (C4559 * C6220 + C30682 * C6224) * C4561 +
                    (C4559 * C6225 + C30682 * C6229) * C4557 +
                    (C4559 * C6221 + C30682 * C6226) * C4562 +
                    (C4559 * C6227 + C30682 * C6230) * C4558) *
                       C30933 * C1843) *
                  C30736 * C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C942 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C943 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C31020) *
                       C30975 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C942 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C943 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C30990) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C554 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C30736 * C555 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C556 +
                   (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                      C115 * C662 + C103 * C663) *
                         C116 +
                     (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                      C115 * C664 + C103 * C665) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30990) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C2116 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C2117 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C2118 -
                    ((C115 * C1850 + C103 * C1862 + C114 * C1851 +
                      C102 * C1863 + C113 * C1852 + C101 * C1864) *
                         C30921 +
                     (C115 * C1844 + C103 * C1853 + C114 * C1845 +
                      C102 * C1854 + C113 * C1846 + C101 * C1855) *
                         C116) *
                        C30933 * C31036) *
                       C30736 * C30975 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C2117 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C2116 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C2118 +
                    ((C113 * C1845 + C101 * C1854 + C114 * C1844 +
                      C102 * C1853 + C115 * C2120 + C103 * C2121) *
                         C116 +
                     (C113 * C1851 + C101 * C1863 + C114 * C1850 +
                      C102 * C1862 + C115 * C2122 + C103 * C2123) *
                         C30921) *
                        C30933 * C31036) *
                       C30736 * C30719)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C1167 + C30682 * C1182) * C4558 +
                     (C4559 * C1155 + C30682 * C1170) * C4562 +
                     (C4559 * C820 + C30682 * C827) * C4557 +
                     (C4559 * C812 + C30682 * C817) * C4561 +
                     (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30736 * C554 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 +
                     (C4559 * C813 + C30682 * C818) * C4561 +
                     (C4559 * C821 + C30682 * C828) * C4557 +
                     (C4559 * C1154 + C30682 * C1169) * C4562 +
                     (C4559 * C1166 + C30682 * C1181) * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C30736 * C555 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C1165 + C30682 * C1180) * C4558 +
                     (C4559 * C1153 + C30682 * C1168) * C4562 +
                     (C4559 * C822 + C30682 * C829) * C4557 +
                     (C4559 * C814 + C30682 * C819) * C4561 +
                     (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30736 * C556 +
                   (((C4559 * C420 + C30682 * C436) * C4560 +
                     (C4559 * C437 + C30682 * C450) * C4556 +
                     (C4559 * C815 + C30682 * C824) * C4561 +
                     (C4559 * C823 + C30682 * C830) * C4557 +
                     (C4559 * C1440 + C30682 * C1441) * C4562 +
                     (C4559 * C1442 + C30682 * C1443) * C4558) *
                        C30933 * C30841 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30990) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C942 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C943 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C30990 -
                     ((C4559 * C5534 + C30682 * C5539) * C4558 +
                      (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C31020) *
                       C30975 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C942 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C943 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C30990) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C2116 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C2117 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C2118 -
                    ((C4559 * C6222 + C30682 * C6228) * C4558 +
                     (C4559 * C6219 + C30682 * C6223) * C4562 +
                     (C4559 * C2228 + C30682 * C2231) * C4557 +
                     (C4559 * C2222 + C30682 * C2225) * C4561 +
                     (C4559 * C1852 + C30682 * C1864) * C4556 +
                     (C4559 * C1846 + C30682 * C1855) * C4560) *
                        C30933 * C31036) *
                       C30736 * C30975 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C2117 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C2116 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C2118 +
                    ((C4559 * C1845 + C30682 * C1854) * C4560 +
                     (C4559 * C1851 + C30682 * C1863) * C4556 +
                     (C4559 * C2223 + C30682 * C2226) * C4561 +
                     (C4559 * C2229 + C30682 * C2232) * C4557 +
                     (C4559 * C6491 + C30682 * C6492) * C4562 +
                     (C4559 * C6493 + C30682 * C6494) * C4558) *
                        C30933 * C31036) *
                       C30736 * C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C31045 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                     C115 * C123 + C103 * C136) *
                        C116 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C137 + C103 * C144) *
                        C30921) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C943 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C942 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C1010 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C1011 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C1012 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C1013 +
                   ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                     C115 * C1021 + C103 * C1030) *
                        C116 +
                    (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                     C115 * C1033 + C103 * C1039) *
                        C30921) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31054 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C30736 * C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                      C115 * C423 + C103 * C442) *
                         C116 +
                     (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                      C115 * C443 + C103 * C453) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C31057 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C1665 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C1664 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C31045 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C1664 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C1665 +
                    ((C113 * C1156 + C101 * C1171 + C114 * C1157 +
                      C102 * C1172 + C115 * C1158 + C103 * C1173) *
                         C116 +
                     (C113 * C1174 + C101 * C1183 + C114 * C1175 +
                      C102 * C1184 + C115 * C1176 + C103 * C1185) *
                         C30921) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 +
                    (C4559 * C263 + C30682 * C276) * C4561 +
                    (C4559 * C273 + C30682 * C293) * C4557 +
                    (C4559 * C264 + C30682 * C277) * C4562 +
                    (C4559 * C280 + C30682 * C294) * C4558) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C4559 * C281 + C30682 * C295) * C4558 +
                    (C4559 * C265 + C30682 * C278) * C4562 +
                    (C4559 * C272 + C30682 * C292) * C4557 +
                    (C4559 * C262 + C30682 * C275) * C4561 +
                    (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 +
                    (C4559 * C261 + C30682 * C274) * C4561 +
                    (C4559 * C271 + C30682 * C291) * C4557 +
                    (C4559 * C266 + C30682 * C279) * C4562 +
                    (C4559 * C282 + C30682 * C296) * C4558) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C4559 * C285 + C30682 * C298) * C4558 +
                    (C4559 * C268 + C30682 * C286) * C4562 +
                    (C4559 * C284 + C30682 * C297) * C4557 +
                    (C4559 * C267 + C30682 * C283) * C4561 +
                    (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C4559 * C121 + C30682 * C132) * C4560 +
                    (C4559 * C133 + C30682 * C142) * C4556 +
                    (C4559 * C269 + C30682 * C288) * C4561 +
                    (C4559 * C287 + C30682 * C299) * C4557 +
                    (C4559 * C270 + C30682 * C289) * C4562 +
                    (C4559 * C290 + C30682 * C300) * C4558) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31045 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31057 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C943 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C942 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1010 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1011 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1012 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C1013 +
                   (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                    C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                    (C4559 * C5404 + C30682 * C5406) * C4558) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C1664 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C30736 * C31054 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C1665 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C1664 -
                    ((C4559 * C1175 + C30682 * C1184) * C4558 +
                     (C4559 * C1157 + C30682 * C1172) * C4562 +
                     (C4559 * C1160 + C30682 * C1178) * C4557 +
                     (C4559 * C1151 + C30682 * C1163) * C4561 +
                     (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C30736 * C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C1664 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C419 + C30682 * C432) * C4560 +
                     (C4559 * C435 + C30682 * C449) * C4556 +
                     (C4559 * C1150 + C30682 * C1162) * C4561 +
                     (C4559 * C1159 + C30682 * C1177) * C4557 +
                     (C4559 * C1158 + C30682 * C1173) * C4562 +
                     (C4559 * C1176 + C30682 * C1185) * C4558) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C1664 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C1665 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C31057 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C1665 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C1664 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C31045 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C1664 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C1665 +
                    (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                     C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                     (C4559 * C5537 + C30682 * C5540) * C4558) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C30713 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C30989 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C30722 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C3094) *
                        C30799) *
                       C2703)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C30713 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C30989 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C30722 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C3094 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C3094) *
                        C30799) *
                       C2703)) /
                     (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30837 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30844 +
                     ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                       C115 * C419 + C103 * C432) *
                          C116 +
                      (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                       C115 * C435 + C103 * C449) *
                          C30921) *
                         C30933 * C3602) *
                        C30989 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30844 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30837 -
                     ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                       C102 * C1178 + C113 * C1161 + C101 * C1179) *
                          C30921 +
                      (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                       C102 * C1163 + C113 * C1152 + C101 * C1164) *
                          C116) *
                         C30933 * C3602) *
                        C30799) *
                       C2440 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30844 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30837 -
                     ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                       C113 * C434 + C101 * C448) *
                          C30921 +
                      (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                       C113 * C418 + C101 * C431) *
                          C116) *
                         C30933 * C3602) *
                        C30989 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30837 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30844 +
                     ((C113 * C1151 + C101 * C1163 + C114 * C1150 +
                       C102 * C1162 + C115 * C2014 + C103 * C2015) *
                          C116 +
                      (C113 * C1160 + C101 * C1178 + C114 * C1159 +
                       C102 * C1177 + C115 * C2016 + C103 * C2017) *
                          C30921) *
                         C30933 * C3602) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30837 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30844 +
                     ((C4559 * C417 + C30682 * C430) * C4560 +
                      (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                      C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                         C30933 * C3602) *
                        C30989 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30844 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30837 -
                     (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                      C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                         C30933 * C3602) *
                        C30799) *
                       C2440 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30844 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30837 -
                     (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                      C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                      (C4559 * C418 + C30682 * C431) * C4560) *
                         C30933 * C3602) *
                        C30989 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30837 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30844 +
                     (C6393 * C4560 + C6392 * C4556 + C6391 * C4561 +
                      C6390 * C4557 + (C4559 * C6377 + C30682 * C6378) * C4562 +
                      (C4559 * C6379 + C30682 * C6380) * C4558) *
                         C30933 * C3602) *
                        C30799) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C31057 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C31045 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C31020) *
                       C2440 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C31057 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C31045 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C3094) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C31063 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C30736 * C31056 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C31043 +
                   (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                      C115 * C662 + C103 * C663) *
                         C116 +
                     (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                      C115 * C664 + C103 * C665) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C3094) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31065 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31062 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31053 -
                    ((C115 * C1850 + C103 * C1862 + C114 * C1851 +
                      C102 * C1863 + C113 * C1852 + C101 * C1864) *
                         C30921 +
                     (C115 * C1844 + C103 * C1853 + C114 * C1845 +
                      C102 * C1854 + C113 * C1846 + C101 * C1855) *
                         C116) *
                        C30933 * C31036) *
                       C30736 * C2440 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C31062 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C31065 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31053 +
                    ((C113 * C1845 + C101 * C1854 + C114 * C1844 +
                      C102 * C1853 + C115 * C2120 + C103 * C2121) *
                         C116 +
                     (C113 * C1851 + C101 * C1863 + C114 * C1850 +
                      C102 * C1862 + C115 * C2122 + C103 * C2123) *
                         C30921) *
                        C30933 * C31036) *
                       C30736 * C30719)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30736 * C31063 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C30736 * C31056 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C3094 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30736 * C31043 +
                   (((C4559 * C420 + C30682 * C436) * C4560 +
                     (C4559 * C437 + C30682 * C450) * C4556 +
                     (C4559 * C815 + C30682 * C824) * C4561 +
                     (C4559 * C823 + C30682 * C830) * C4557 +
                     (C4559 * C1440 + C30682 * C1441) * C4562 +
                     (C4559 * C1442 + C30682 * C1443) * C4558) *
                        C30933 * C30841 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C3094) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C31057 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C31045 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C3094 -
                     (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C31020) *
                       C2440 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C31057 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C31045 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C3094) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31065 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31062 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31053 -
                    (C6606 * C4558 + C6607 * C4562 + C6608 * C4557 +
                     C6609 * C4561 + (C4559 * C1852 + C30682 * C1864) * C4556 +
                     (C4559 * C1846 + C30682 * C1855) * C4560) *
                        C30933 * C31036) *
                       C30736 * C2440 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C31062 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C31065 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31053 +
                    ((C4559 * C1845 + C30682 * C1854) * C4560 +
                     (C4559 * C1851 + C30682 * C1863) * C4556 +
                     (C4559 * C2223 + C30682 * C2226) * C4561 +
                     (C4559 * C2229 + C30682 * C2232) * C4557 +
                     (C4559 * C6491 + C30682 * C6492) * C4562 +
                     (C4559 * C6493 + C30682 * C6494) * C4558) *
                        C30933 * C31036) *
                       C30736 * C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C3602) *
                       C30736 * C30713 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30844 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30837 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C3602) *
                       C30736 * C30722 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30837 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30844 +
                    ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                      C115 * C423 + C103 * C442) *
                         C116 +
                     (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                      C115 * C443 + C103 * C453) *
                         C30921) *
                        C30933 * C3602) *
                       C30736 * C2703)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30837 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30844 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C3602) *
                       C30736 * C30713 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30844 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30837 -
                    (C6390 * C4558 + C6391 * C4562 + C6392 * C4557 +
                     C6393 * C4561 + (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C3602) *
                       C30736 * C30722 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30837 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30844 +
                    ((C4559 * C419 + C30682 * C432) * C4560 +
                     (C4559 * C435 + C30682 * C449) * C4556 +
                     (C4559 * C1150 + C30682 * C1162) * C4561 +
                     (C4559 * C1159 + C30682 * C1177) * C4557 +
                     (C4559 * C1158 + C30682 * C1173) * C4562 +
                     (C4559 * C1176 + C30682 * C1185) * C4558) *
                        C30933 * C3602) *
                       C30736 * C2703)) /
                     (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C31063 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C3094) *
                       C30736 * C31056 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C3094 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C31043 +
                   (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                      C115 * C662 + C103 * C663) *
                         C116 +
                     (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                      C115 * C664 + C103 * C665) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C3094) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C31057 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C3094) *
                        C31045 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C31020) *
                       C2440 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C3094) *
                        C31057 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C3094 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C31045 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C3094) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C3094 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30736 * C31063 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                     C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C3094) *
                       C30736 * C31056 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C3094 -
                    (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                     C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30736 * C31043 +
                   (((C4559 * C420 + C30682 * C436) * C4560 +
                     (C4559 * C437 + C30682 * C450) * C4556 +
                     (C4559 * C815 + C30682 * C824) * C4561 +
                     (C4559 * C823 + C30682 * C830) * C4557 +
                     (C4559 * C1440 + C30682 * C1441) * C4562 +
                     (C4559 * C1442 + C30682 * C1443) * C4558) *
                        C30933 * C30841 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C3094) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C3094 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C31057 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C3094) *
                        C31045 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C3094 -
                     (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C31020) *
                       C2440 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C3094) *
                        C31057 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C3094 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C31045 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C3094) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C30989 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C554 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C30989) *
                       C555 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C30989 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C30799) *
                       C556 +
                   (((C113 * C267 + C101 * C283 + C114 * C269 + C102 * C288 +
                      C115 * C558 + C103 * C559) *
                         C116 +
                     (C113 * C284 + C101 * C297 + C114 * C287 + C102 * C299 +
                      C115 * C560 + C103 * C561) *
                         C30921) *
                        C30933 * C30754 * C30799 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30754 * C30989) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C1284 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C1285 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C1286 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30754 * C31030) *
                       C30975 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C1285 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C1284 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C1286 +
                    ((C113 * C1017 + C101 * C1026 + C114 * C1016 +
                      C102 * C1025 + C115 * C1290 + C103 * C1291) *
                         C116 +
                     (C113 * C1023 + C101 * C1035 + C114 * C1022 +
                      C102 * C1034 + C115 * C1292 + C103 * C1293) *
                         C30921) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C30989 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C30799) *
                       C554 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C30989) *
                       C555 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C30989 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C30799) *
                       C556 +
                   ((C4944 * C4560 + C4945 * C4556 + C4946 * C4561 +
                     C4947 * C4557 + (C4559 * C1290 + C30682 * C1291) * C4562 +
                     (C4559 * C1292 + C30682 * C1293) * C4558) *
                        C30933 * C30754 * C30799 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30754 * C30989) *
                       C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C1284 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C1285 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30754 * C1286 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30754 * C31030) *
                       C30975 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C1285 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C1284 -
                    (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C1286 +
                    (C4720 * C4560 + C4721 * C4556 + C5673 * C4561 +
                     C5672 * C4557 + (C4559 * C5663 + C30682 * C5664) * C4562 +
                     (C4559 * C5665 + C30682 * C5666) * C4558) *
                        C30933 * C30754 * C31030) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C258 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C30989 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C30799) *
                       C259 +
                   ((((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                       C115 * C121 + C103 * C132) *
                          C116 +
                      (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                       C115 * C133 + C103 * C142) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                       C113 * C424 + C101 * C444) *
                          C30921 +
                      (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                       C113 * C414 + C101 * C427) *
                          C116) *
                         C30933 * C30841) *
                        C30989 +
                    (((C113 * C814 + C101 * C819 + C114 * C815 + C102 * C824 +
                       C115 * C816 + C103 * C825) *
                          C116 +
                      (C113 * C822 + C101 * C829 + C114 * C823 + C102 * C830 +
                       C115 * C826 + C103 * C831) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                       C113 * C271 + C101 * C291) *
                          C30921 +
                      (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                       C113 * C261 + C101 * C274) *
                          C116) *
                         C30933 * C30990) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C1284 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30990) *
                       C1285 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C30841) *
                       C1286 +
                   (((C113 * C1542 + C101 * C1545 + C114 * C1543 +
                      C102 * C1546 + C115 * C1544 + C103 * C1547) *
                         C116 +
                     (C113 * C1548 + C101 * C1551 + C114 * C1549 +
                      C102 * C1552 + C115 * C1550 + C103 * C1553) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C1022 + C103 * C1034 + C114 * C1023 +
                      C102 * C1035 + C113 * C1024 + C101 * C1036) *
                         C30921 +
                     (C115 * C1016 + C103 * C1025 + C114 * C1017 +
                      C102 * C1026 + C113 * C1018 + C101 * C1027) *
                         C116) *
                        C30933 * C30990) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + (C4559 * C1542 + C30682 * C1545) * C4562 +
                      (C4559 * C1548 + C30682 * C1551) * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C258 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C30989 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     ((C4559 * C1549 + C30682 * C1552) * C4558 +
                      (C4559 * C1543 + C30682 * C1546) * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C30799) *
                       C259 +
                   ((((C4559 * C119 + C30682 * C126) * C4560 +
                      (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                      C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                         C30933 * C30990 -
                     (C5224 * C4558 + C5225 * C4562 + C5226 * C4557 +
                      C5227 * C4561 + (C4559 * C424 + C30682 * C444) * C4556 +
                      (C4559 * C414 + C30682 * C427) * C4560) *
                         C30933 * C30841) *
                        C30989 +
                    ((C5227 * C4560 + C5226 * C4556 + C5225 * C4561 +
                      C5224 * C4557 + (C4559 * C1544 + C30682 * C1547) * C4562 +
                      (C4559 * C1550 + C30682 * C1553) * C4558) *
                         C30933 * C30841 -
                     (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                      C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                         C30933 * C30990) *
                        C30799) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C1284 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C30841 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30990) *
                       C1285 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C30990 -
                    (C5936 * C4558 + C5937 * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C30841) *
                       C1286 +
                   ((C5562 * C4560 + C5563 * C4556 + C5937 * C4561 +
                     C5936 * C4557 + (C4559 * C5927 + C30682 * C5928) * C4562 +
                     (C4559 * C5929 + C30682 * C5930) * C4558) *
                        C30933 * C30841 -
                    (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                     C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                        C30933 * C30990) *
                       C31030) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C31045 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                     C115 * C123 + C103 * C136) *
                        C116 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C137 + C103 * C144) *
                        C30921) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C258 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C438 + C103 * C451 + C114 * C435 + C102 * C449 +
                      C113 * C434 + C101 * C448) *
                         C30921 +
                     (C115 * C421 + C103 * C439 + C114 * C419 + C102 * C432 +
                      C113 * C418 + C101 * C431) *
                         C116) *
                        C30933 * C31023) *
                       C30736 * C259 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C419 + C101 * C432 + C114 * C421 + C102 * C439 +
                      C115 * C423 + C103 * C442) *
                         C116 +
                     (C113 * C435 + C101 * C449 + C114 * C438 + C102 * C451 +
                      C115 * C443 + C103 * C453) *
                         C30921) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C943 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C942 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C1010 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C1011 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C1012 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C1013 +
                   ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                     C115 * C1021 + C103 * C1030) *
                        C116 +
                    (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                     C115 * C1033 + C103 * C1039) *
                        C30921) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C417 + C101 * C430 + C114 * C418 + C102 * C431 +
                      C115 * C419 + C103 * C432) *
                         C116 +
                     (C113 * C433 + C101 * C447 + C114 * C434 + C102 * C448 +
                      C115 * C435 + C103 * C449) *
                         C30921) *
                        C30933 * C31023) *
                       C942 +
                   (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                      C115 * C814 + C103 * C819) *
                         C116 +
                     (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                      C115 * C822 + C103 * C829) *
                         C30921) *
                        C30933 * C31047 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C31058 -
                    ((C115 * C1159 + C103 * C1177 + C114 * C1160 +
                      C102 * C1178 + C113 * C1161 + C101 * C1179) *
                         C30921 +
                     (C115 * C1150 + C103 * C1162 + C114 * C1151 +
                      C102 * C1163 + C113 * C1152 + C101 * C1164) *
                         C116) *
                        C30933 * C31023) *
                       C943 +
                   (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C31058 -
                    ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                      C102 * C1181 + C113 * C1167 + C101 * C1182) *
                         C30921 +
                     (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                      C102 * C1169 + C113 * C1155 + C101 * C1170) *
                         C116) *
                        C30933 * C31047 +
                    ((C113 * C1156 + C101 * C1171 + C114 * C1157 +
                      C102 * C1172 + C115 * C1158 + C103 * C1173) *
                         C116 +
                     (C113 * C1174 + C101 * C1183 + C114 * C1175 +
                      C102 * C1184 + C115 * C1176 + C103 * C1185) *
                         C30921) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 +
                    (C4559 * C263 + C30682 * C276) * C4561 +
                    (C4559 * C273 + C30682 * C293) * C4557 +
                    (C4559 * C264 + C30682 * C277) * C4562 +
                    (C4559 * C280 + C30682 * C294) * C4558) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C4559 * C281 + C30682 * C295) * C4558 +
                    (C4559 * C265 + C30682 * C278) * C4562 +
                    (C4559 * C272 + C30682 * C292) * C4557 +
                    (C4559 * C262 + C30682 * C275) * C4561 +
                    (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 +
                    (C4559 * C261 + C30682 * C274) * C4561 +
                    (C4559 * C271 + C30682 * C291) * C4557 +
                    (C4559 * C266 + C30682 * C279) * C4562 +
                    (C4559 * C282 + C30682 * C296) * C4558) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C4559 * C285 + C30682 * C298) * C4558 +
                    (C4559 * C268 + C30682 * C286) * C4562 +
                    (C4559 * C284 + C30682 * C297) * C4557 +
                    (C4559 * C267 + C30682 * C283) * C4561 +
                    (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C4559 * C121 + C30682 * C132) * C4560 +
                    (C4559 * C133 + C30682 * C142) * C4556 +
                    (C4559 * C269 + C30682 * C288) * C4561 +
                    (C4559 * C287 + C30682 * C299) * C4557 +
                    (C4559 * C270 + C30682 * C289) * C4562 +
                    (C4559 * C290 + C30682 * C300) * C4558) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31045 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31057 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C1167 + C30682 * C1182) * C4558 +
                     (C4559 * C1155 + C30682 * C1170) * C4562 +
                     (C4559 * C820 + C30682 * C827) * C4557 +
                     (C4559 * C812 + C30682 * C817) * C4561 +
                     (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 +
                     (C4559 * C1152 + C30682 * C1164) * C4561 +
                     (C4559 * C1161 + C30682 * C1179) * C4557 +
                     (C4559 * C1156 + C30682 * C1171) * C4562 +
                     (C4559 * C1174 + C30682 * C1183) * C4558) *
                        C30933 * C31023) *
                       C30736 * C258 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 +
                     (C4559 * C813 + C30682 * C818) * C4561 +
                     (C4559 * C821 + C30682 * C828) * C4557 +
                     (C4559 * C1154 + C30682 * C1169) * C4562 +
                     (C4559 * C1166 + C30682 * C1181) * C4558) *
                        C30933 * C31047 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C31058 -
                    ((C4559 * C1175 + C30682 * C1184) * C4558 +
                     (C4559 * C1157 + C30682 * C1172) * C4562 +
                     (C4559 * C1160 + C30682 * C1178) * C4557 +
                     (C4559 * C1151 + C30682 * C1163) * C4561 +
                     (C4559 * C434 + C30682 * C448) * C4556 +
                     (C4559 * C418 + C30682 * C431) * C4560) *
                        C30933 * C31023) *
                       C30736 * C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C1165 + C30682 * C1180) * C4558 +
                     (C4559 * C1153 + C30682 * C1168) * C4562 +
                     (C4559 * C822 + C30682 * C829) * C4557 +
                     (C4559 * C814 + C30682 * C819) * C4561 +
                     (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C419 + C30682 * C432) * C4560 +
                     (C4559 * C435 + C30682 * C449) * C4556 +
                     (C4559 * C1150 + C30682 * C1162) * C4561 +
                     (C4559 * C1159 + C30682 * C1177) * C4557 +
                     (C4559 * C1158 + C30682 * C1173) * C4562 +
                     (C4559 * C1176 + C30682 * C1185) * C4558) *
                        C30933 * C31023) *
                       C30736 * C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C943 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C942 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1010 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1011 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1012 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C1013 +
                   (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                    C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                    (C4559 * C5404 + C30682 * C5406) * C4558) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C31058 -
                    (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                     C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C31047 +
                    ((C4559 * C417 + C30682 * C430) * C4560 +
                     (C4559 * C433 + C30682 * C447) * C4556 + C5558 * C4561 +
                     C5559 * C4557 + C5560 * C4562 + C5561 * C4558) *
                        C30933 * C31023) *
                       C942 +
                   ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                     C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                        C30933 * C31047 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C31058 -
                    (C5564 * C4558 + C5565 * C4562 + C5561 * C4557 +
                     C5560 * C4561 + C5559 * C4556 + C5558 * C4560) *
                        C30933 * C31023) *
                       C943 +
                   ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                        C30933 * C31058 -
                    ((C4559 * C5534 + C30682 * C5539) * C4558 +
                     (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                     C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                        C30933 * C31047 +
                    (C5560 * C4560 + C5561 * C4556 + C5565 * C4561 +
                     C5564 * C4557 + (C4559 * C5531 + C30682 * C5536) * C4562 +
                     (C4559 * C5537 + C30682 * C5540) * C4558) *
                        C30933 * C31023) *
                       C31020) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                      C113 * C426 + C101 * C446) *
                         C30921 +
                     (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                      C113 * C416 + C101 * C429) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C554 +
                   (((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                      C115 * C420 + C103 * C436) *
                         C116 +
                     (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                      C115 * C437 + C103 * C450) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30990) *
                       C30736 * C555 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30990 -
                    ((C115 * C440 + C103 * C452 + C114 * C437 + C102 * C450 +
                      C113 * C424 + C101 * C444) *
                         C30921 +
                     (C115 * C422 + C103 * C441 + C114 * C420 + C102 * C436 +
                      C113 * C414 + C101 * C427) *
                         C116) *
                        C30933 * C30841) *
                       C30736 * C556 +
                   (((C113 * C420 + C101 * C436 + C114 * C422 + C102 * C441 +
                      C115 * C662 + C103 * C663) *
                         C116 +
                     (C113 * C437 + C101 * C450 + C114 * C440 + C102 * C452 +
                      C115 * C664 + C103 * C665) *
                         C30921) *
                        C30933 * C30841 -
                    ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                      C113 * C130 + C101 * C141) *
                         C30921 +
                     (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                      C113 * C120 + C101 * C131) *
                         C116) *
                        C30933 * C30990) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                       C115 * C119 + C103 * C126) *
                          C116 +
                      (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                       C115 * C129 + C103 * C140) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C424 + C103 * C444 + C114 * C425 + C102 * C445 +
                       C113 * C426 + C101 * C446) *
                          C30921 +
                      (C115 * C414 + C103 * C427 + C114 * C415 + C102 * C428 +
                       C113 * C416 + C101 * C429) *
                          C116) *
                         C30933 * C30841) *
                        C942 +
                    (((C113 * C812 + C101 * C817 + C114 * C813 + C102 * C818 +
                       C115 * C814 + C103 * C819) *
                          C116 +
                      (C113 * C820 + C101 * C827 + C114 * C821 + C102 * C828 +
                       C115 * C822 + C103 * C829) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                       C113 * C273 + C101 * C293) *
                          C30921 +
                      (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                       C113 * C263 + C101 * C276) *
                          C116) *
                         C30933 * C30990) *
                        C943 +
                    (((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                       C115 * C266 + C103 * C279) *
                          C116 +
                      (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                       C115 * C282 + C103 * C296) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C1165 + C103 * C1180 + C114 * C1166 +
                       C102 * C1181 + C113 * C1167 + C101 * C1182) *
                          C30921 +
                      (C115 * C1153 + C103 * C1168 + C114 * C1154 +
                       C102 * C1169 + C113 * C1155 + C101 * C1170) *
                          C116) *
                         C30933 * C30841) *
                        C31020) *
                       C30975 +
                   ((((C113 * C415 + C101 * C428 + C114 * C414 + C102 * C427 +
                       C115 * C420 + C103 * C436) *
                          C116 +
                      (C113 * C425 + C101 * C445 + C114 * C424 + C102 * C444 +
                       C115 * C437 + C103 * C450) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                       C113 * C128 + C101 * C139) *
                          C30921 +
                      (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                       C113 * C118 + C101 * C125) *
                          C116) *
                         C30933 * C30990) *
                        C942 +
                    (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                       C115 * C267 + C103 * C283) *
                          C116 +
                      (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                       C115 * C284 + C103 * C297) *
                          C30921) *
                         C30933 * C30990 -
                     ((C115 * C823 + C103 * C830 + C114 * C822 + C102 * C829 +
                       C113 * C821 + C101 * C828) *
                          C30921 +
                      (C115 * C815 + C103 * C824 + C114 * C814 + C102 * C819 +
                       C113 * C813 + C101 * C818) *
                          C116) *
                         C30933 * C30841) *
                        C943 +
                    (((C113 * C1154 + C101 * C1169 + C114 * C1153 +
                       C102 * C1168 + C115 * C1440 + C103 * C1441) *
                          C116 +
                      (C113 * C1166 + C101 * C1181 + C114 * C1165 +
                       C102 * C1180 + C115 * C1442 + C103 * C1443) *
                          C30921) *
                         C30933 * C30841 -
                     ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                       C113 * C281 + C101 * C295) *
                          C30921 +
                      (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                       C113 * C265 + C101 * C278) *
                          C116) *
                         C30933 * C30990) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C1167 + C30682 * C1182) * C4558 +
                     (C4559 * C1155 + C30682 * C1170) * C4562 +
                     (C4559 * C820 + C30682 * C827) * C4557 +
                     (C4559 * C812 + C30682 * C817) * C4561 +
                     (C4559 * C426 + C30682 * C446) * C4556 +
                     (C4559 * C416 + C30682 * C429) * C4560) *
                        C30933 * C30841) *
                       C30736 * C554 +
                   (((C4559 * C415 + C30682 * C428) * C4560 +
                     (C4559 * C425 + C30682 * C445) * C4556 +
                     (C4559 * C813 + C30682 * C818) * C4561 +
                     (C4559 * C821 + C30682 * C828) * C4557 +
                     (C4559 * C1154 + C30682 * C1169) * C4562 +
                     (C4559 * C1166 + C30682 * C1181) * C4558) *
                        C30933 * C30841 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30990) *
                       C30736 * C555 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30990 -
                    ((C4559 * C1165 + C30682 * C1180) * C4558 +
                     (C4559 * C1153 + C30682 * C1168) * C4562 +
                     (C4559 * C822 + C30682 * C829) * C4557 +
                     (C4559 * C814 + C30682 * C819) * C4561 +
                     (C4559 * C424 + C30682 * C444) * C4556 +
                     (C4559 * C414 + C30682 * C427) * C4560) *
                        C30933 * C30841) *
                       C30736 * C556 +
                   (((C4559 * C420 + C30682 * C436) * C4560 +
                     (C4559 * C437 + C30682 * C450) * C4556 +
                     (C4559 * C815 + C30682 * C824) * C4561 +
                     (C4559 * C823 + C30682 * C830) * C4557 +
                     (C4559 * C1440 + C30682 * C1441) * C4562 +
                     (C4559 * C1442 + C30682 * C1443) * C4558) *
                        C30933 * C30841 -
                    (C4947 * C4558 + C4946 * C4562 + C4945 * C4557 +
                     C4944 * C4561 + (C4559 * C130 + C30682 * C141) * C4556 +
                     (C4559 * C120 + C30682 * C131) * C4560) *
                        C30933 * C30990) *
                       C30736 * C31024)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                  (((((C4559 * C117 + C30682 * C124) * C4560 +
                      (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                      C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                         C30933 * C30990 -
                     (C5216 * C4558 + C5217 * C4562 + C5218 * C4557 +
                      C5219 * C4561 + (C4559 * C426 + C30682 * C446) * C4556 +
                      (C4559 * C416 + C30682 * C429) * C4560) *
                         C30933 * C30841) *
                        C942 +
                    ((C5219 * C4560 + C5218 * C4556 + C5217 * C4561 +
                      C5216 * C4557 + C5562 * C4562 + C5563 * C4558) *
                         C30933 * C30841 -
                     (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                      C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                         C30933 * C30990) *
                        C943 +
                    ((C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                      C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                         C30933 * C30990 -
                     ((C4559 * C5534 + C30682 * C5539) * C4558 +
                      (C4559 * C5530 + C30682 * C5535) * C4562 + C5563 * C4557 +
                      C5562 * C4561 + C5216 * C4556 + C5217 * C4560) *
                         C30933 * C30841) *
                        C31020) *
                       C30975 +
                   ((((C4559 * C415 + C30682 * C428) * C4560 +
                      (C4559 * C425 + C30682 * C445) * C4556 + C5220 * C4561 +
                      C5221 * C4557 + C5222 * C4562 + C5223 * C4558) *
                         C30933 * C30841 -
                     (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                      C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                      (C4559 * C118 + C30682 * C125) * C4560) *
                         C30933 * C30990) *
                        C942 +
                    ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                      C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                         C30933 * C30990 -
                     (C5828 * C4558 + C5829 * C4562 + C5223 * C4557 +
                      C5222 * C4561 + C5221 * C4556 + C5220 * C4560) *
                         C30933 * C30841) *
                        C943 +
                    ((C5222 * C4560 + C5223 * C4556 + C5829 * C4561 +
                      C5828 * C4557 + (C4559 * C5819 + C30682 * C5820) * C4562 +
                      (C4559 * C5821 + C30682 * C5822) * C4558) *
                         C30933 * C30841 -
                     (C5672 * C4558 + C5673 * C4562 + C4721 * C4557 +
                      C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                         C30933 * C30990) *
                        C31020) *
                       C30719)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                     C113 * C128 + C101 * C139) *
                        C30921 +
                    (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                     C113 * C118 + C101 * C125) *
                        C116) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                     C115 * C121 + C103 * C132) *
                        C116 +
                    (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                     C115 * C133 + C103 * C142) *
                        C30921) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C115 * C134 + C103 * C143 + C114 * C133 + C102 * C142 +
                     C113 * C130 + C101 * C141) *
                        C30921 +
                    (C115 * C122 + C103 * C135 + C114 * C121 + C102 * C132 +
                     C113 * C120 + C101 * C131) *
                        C116) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C113 * C121 + C101 * C132 + C114 * C122 + C102 * C135 +
                     C115 * C123 + C103 * C136) *
                        C116 +
                    (C113 * C133 + C101 * C142 + C114 * C134 + C102 * C143 +
                     C115 * C137 + C103 * C144) *
                        C30921) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C31045 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C31057 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C31045 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                      C115 * C119 + C103 * C126) *
                         C116 +
                     (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                      C115 * C129 + C103 * C140) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                      C113 * C273 + C101 * C293) *
                         C30921 +
                     (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                      C113 * C263 + C101 * C276) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                      C115 * C266 + C103 * C279) *
                         C116 +
                     (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                      C115 * C282 + C103 * C296) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   (((C113 * C262 + C101 * C275 + C114 * C261 + C102 * C274 +
                      C115 * C267 + C103 * C283) *
                         C116 +
                     (C113 * C272 + C101 * C292 + C114 * C271 + C102 * C291 +
                      C115 * C284 + C103 * C297) *
                         C30921) *
                        C30933 * C30754 * C943 -
                    ((C115 * C130 + C103 * C141 + C114 * C129 + C102 * C140 +
                      C113 * C128 + C101 * C139) *
                         C30921 +
                     (C115 * C120 + C103 * C131 + C114 * C119 + C102 * C126 +
                      C113 * C118 + C101 * C125) *
                         C116) *
                        C30933 * C30754 * C942 -
                    ((C115 * C285 + C103 * C298 + C114 * C282 + C102 * C296 +
                      C113 * C281 + C101 * C295) *
                         C30921 +
                     (C115 * C268 + C103 * C286 + C114 * C266 + C102 * C279 +
                      C113 * C265 + C101 * C278) *
                         C116) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C113 * C119 + C101 * C126 + C114 * C120 + C102 * C131 +
                      C115 * C121 + C103 * C132) *
                         C116 +
                     (C113 * C129 + C101 * C140 + C114 * C130 + C102 * C141 +
                      C115 * C133 + C103 * C142) *
                         C30921) *
                        C30933 * C30754 * C942 -
                    ((C115 * C287 + C103 * C299 + C114 * C284 + C102 * C297 +
                      C113 * C271 + C101 * C291) *
                         C30921 +
                     (C115 * C269 + C103 * C288 + C114 * C267 + C102 * C283 +
                      C113 * C261 + C101 * C274) *
                         C116) *
                        C30933 * C30754 * C943 +
                    ((C113 * C266 + C101 * C279 + C114 * C268 + C102 * C286 +
                      C115 * C270 + C103 * C289) *
                         C116 +
                     (C113 * C282 + C101 * C296 + C114 * C285 + C102 * C298 +
                      C115 * C290 + C103 * C300) *
                         C30921) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C113 * C117 + C101 * C124 + C114 * C118 + C102 * C125 +
                     C115 * C119 + C103 * C126) *
                        C116 +
                    (C113 * C127 + C101 * C138 + C114 * C128 + C102 * C139 +
                     C115 * C129 + C103 * C140) *
                        C30921) *
                       C30933 * C30754 * C1010 -
                   ((C115 * C271 + C103 * C291 + C114 * C272 + C102 * C292 +
                     C113 * C273 + C101 * C293) *
                        C30921 +
                    (C115 * C261 + C103 * C274 + C114 * C262 + C102 * C275 +
                     C113 * C263 + C101 * C276) *
                        C116) *
                       C30933 * C30754 * C1011 +
                   ((C113 * C264 + C101 * C277 + C114 * C265 + C102 * C278 +
                     C115 * C266 + C103 * C279) *
                        C116 +
                    (C113 * C280 + C101 * C294 + C114 * C281 + C102 * C295 +
                     C115 * C282 + C103 * C296) *
                        C30921) *
                       C30933 * C30754 * C1012 -
                   ((C115 * C1022 + C103 * C1034 + C114 * C1023 + C102 * C1035 +
                     C113 * C1024 + C101 * C1036) *
                        C30921 +
                    (C115 * C1016 + C103 * C1025 + C114 * C1017 + C102 * C1026 +
                     C113 * C1018 + C101 * C1027) *
                        C116) *
                       C30933 * C30754 * C1013 +
                   ((C113 * C1019 + C101 * C1028 + C114 * C1020 + C102 * C1029 +
                     C115 * C1021 + C103 * C1030) *
                        C116 +
                    (C113 * C1031 + C101 * C1037 + C114 * C1032 + C102 * C1038 +
                     C115 * C1033 + C103 * C1039) *
                        C30921) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 +
                    (C4559 * C263 + C30682 * C276) * C4561 +
                    (C4559 * C273 + C30682 * C293) * C4557 +
                    (C4559 * C264 + C30682 * C277) * C4562 +
                    (C4559 * C280 + C30682 * C294) * C4558) *
                       C30933 * C30754 * C30736 * C108 -
                   ((C4559 * C281 + C30682 * C295) * C4558 +
                    (C4559 * C265 + C30682 * C278) * C4562 +
                    (C4559 * C272 + C30682 * C292) * C4557 +
                    (C4559 * C262 + C30682 * C275) * C4561 +
                    (C4559 * C128 + C30682 * C139) * C4556 +
                    (C4559 * C118 + C30682 * C125) * C4560) *
                       C30933 * C30754 * C30736 * C109 +
                   ((C4559 * C119 + C30682 * C126) * C4560 +
                    (C4559 * C129 + C30682 * C140) * C4556 +
                    (C4559 * C261 + C30682 * C274) * C4561 +
                    (C4559 * C271 + C30682 * C291) * C4557 +
                    (C4559 * C266 + C30682 * C279) * C4562 +
                    (C4559 * C282 + C30682 * C296) * C4558) *
                       C30933 * C30754 * C30736 * C110 -
                   ((C4559 * C285 + C30682 * C298) * C4558 +
                    (C4559 * C268 + C30682 * C286) * C4562 +
                    (C4559 * C284 + C30682 * C297) * C4557 +
                    (C4559 * C267 + C30682 * C283) * C4561 +
                    (C4559 * C130 + C30682 * C141) * C4556 +
                    (C4559 * C120 + C30682 * C131) * C4560) *
                       C30933 * C30754 * C30736 * C111 +
                   ((C4559 * C121 + C30682 * C132) * C4560 +
                    (C4559 * C133 + C30682 * C142) * C4556 +
                    (C4559 * C269 + C30682 * C288) * C4561 +
                    (C4559 * C287 + C30682 * C299) * C4557 +
                    (C4559 * C270 + C30682 * C289) * C4562 +
                    (C4559 * C290 + C30682 * C300) * C4558) *
                       C30933 * C30754 * C30736 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C258 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C31045 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C31057 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C259 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C31057 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C31045 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  ((((C4559 * C117 + C30682 * C124) * C4560 +
                     (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                     C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                     C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                     C4714 * C4557 + (C4559 * C1019 + C30682 * C1028) * C4562 +
                     (C4559 * C1031 + C30682 * C1037) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31054 +
                   ((C4716 * C4560 + C4717 * C4556 + C4718 * C4561 +
                     C4719 * C4557 + C4720 * C4562 + C4721 * C4558) *
                        C30933 * C30754 * C943 -
                    (C4719 * C4558 + C4718 * C4562 + C4717 * C4557 +
                     C4716 * C4561 + (C4559 * C128 + C30682 * C139) * C4556 +
                     (C4559 * C118 + C30682 * C125) * C4560) *
                        C30933 * C30754 * C942 -
                    ((C4559 * C1032 + C30682 * C1038) * C4558 +
                     (C4559 * C1020 + C30682 * C1029) * C4562 + C4721 * C4557 +
                     C4720 * C4561 + C4719 * C4556 + C4718 * C4560) *
                        C30933 * C30754 * C31020) *
                       C31041 +
                   (((C4559 * C119 + C30682 * C126) * C4560 +
                     (C4559 * C129 + C30682 * C140) * C4556 + C4722 * C4561 +
                     C4723 * C4557 + C4724 * C4562 + C4725 * C4558) *
                        C30933 * C30754 * C942 -
                    (C4726 * C4558 + C4727 * C4562 + C4725 * C4557 +
                     C4724 * C4561 + C4723 * C4556 + C4722 * C4560) *
                        C30933 * C30754 * C943 +
                    (C4724 * C4560 + C4725 * C4556 + C4727 * C4561 +
                     C4726 * C4557 + (C4559 * C1021 + C30682 * C1030) * C4562 +
                     (C4559 * C1033 + C30682 * C1039) * C4558) *
                        C30933 * C30754 * C31020) *
                       C31014)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
                  (((C4559 * C117 + C30682 * C124) * C4560 +
                    (C4559 * C127 + C30682 * C138) * C4556 + C4710 * C4561 +
                    C4711 * C4557 + C4712 * C4562 + C4713 * C4558) *
                       C30933 * C30754 * C1010 -
                   (C4714 * C4558 + C4715 * C4562 + C4713 * C4557 +
                    C4712 * C4561 + C4711 * C4556 + C4710 * C4560) *
                       C30933 * C30754 * C1011 +
                   (C4712 * C4560 + C4713 * C4556 + C4715 * C4561 +
                    C4714 * C4557 + C5416 * C4562 + C5417 * C4558) *
                       C30933 * C30754 * C1012 -
                   (C5418 * C4558 + C5419 * C4562 + C5417 * C4557 +
                    C5416 * C4561 + C4714 * C4556 + C4715 * C4560) *
                       C30933 * C30754 * C1013 +
                   (C5416 * C4560 + C5417 * C4556 + C5419 * C4561 +
                    C5418 * C4557 + (C4559 * C5400 + C30682 * C5403) * C4562 +
                    (C4559 * C5404 + C30682 * C5406) * C4558) *
                       C30933 * C30754 * C1014) *
                  C30708) /
                     (p * q * std::sqrt(p + q));
}
