/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AA_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_11_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29968 = ae + be;
    const double C29967 = ae * be;
    const double C29966 = yA - yB;
    const double C29974 = 0 * be;
    const double C30010 = p + q;
    const double C30009 = p * q;
    const double C30018 = std::pow(ae, 2);
    const double C30016 = bs[3];
    const double C30015 = yP - yQ;
    const double C30024 = bs[4];
    const double C30022 = xP - xQ;
    const double C30032 = bs[5];
    const double C30041 = bs[6];
    const double C30052 = bs[7];
    const double C30068 = bs[2];
    const double C30156 = zP - zQ;
    const double C115 = bs[0];
    const double C30762 = xA - xB;
    const double C30782 = ce + de;
    const double C30781 = ce * de;
    const double C30780 = xC - xD;
    const double C30814 = yC - yD;
    const double C30832 = zC - zD;
    const double C31011 = zA - zB;
    const double C29975 = std::pow(C29968, 2);
    const double C31045 = 2 * C29968;
    const double C29977 = 2 * C29967;
    const double C29976 = C29967 * C29966;
    const double C30998 = std::pow(C29966, 2);
    const double C31076 = C29966 * ae;
    const double C30011 = 2 * C30009;
    const double C30019 = std::pow(C30015, 2);
    const double C30064 = C30015 * ae;
    const double C30034 = std::pow(C30022, 2);
    const double C30265 = std::pow(C30156, 2);
    const double C30763 = std::pow(C30762, 2);
    const double C31044 = C30762 * ae;
    const double C30786 = 2 * C30782;
    const double C30785 = std::pow(C30782, 2);
    const double C30787 = C30780 * de;
    const double C30784 = C30780 * ce;
    const double C30783 = std::pow(C30780, 2);
    const double C30815 = std::pow(C30814, 2);
    const double C30874 = C30814 * de;
    const double C30872 = C30814 * ce;
    const double C30833 = std::pow(C30832, 2);
    const double C30916 = C30832 * de;
    const double C30914 = C30832 * ce;
    const double C31012 = std::pow(C31011, 2);
    const double C31077 = C31011 * ae;
    const double C29979 = 2 * C29975;
    const double C31080 = std::pow(C31045, -2);
    const double C31078 = std::pow(C31045, -1);
    const double C30999 = C30998 * C29967;
    const double C30013 = C30011 / C30010;
    const double C129 =
        ((std::pow(yP - yQ, 2) * bs[2] * std::pow(C30011 / C30010, 2) -
          (bs[1] * C30011) / C30010) *
         std::pow(ae, 2)) /
        C29975;
    const double C116 = -(C30022 * bs[1] * C30011) / C30010;
    const double C286 = -(C30015 * bs[1] * C30011) / C30010;
    const double C469 = -(C30156 * bs[1] * C30011) / C30010;
    const double C30026 = C30019 * C30024;
    const double C30035 = C30019 * C30032;
    const double C30043 = C30019 * C30041;
    const double C30055 = C30019 * C30052;
    const double C30071 = C30016 * C30064;
    const double C30078 = C30024 * C30064;
    const double C30087 = C30032 * C30064;
    const double C30100 = C30041 * C30064;
    const double C30121 = C30052 * C30064;
    const double C122 = (-(bs[1] * C30064 * C30011) / C30010) / C29968;
    const double C30764 = C30763 * C29967;
    const double C30799 = std::pow(C30786, -1);
    const double C31053 = std::pow(C30786, -2);
    const double C30800 = 2 * C30785;
    const double C31057 = C30785 * C30786;
    const double C31056 = 4 * C30785;
    const double C31046 = std::pow(C30784, 2);
    const double C30788 = C30783 * C30781;
    const double C30816 = C30815 * C30781;
    const double C31058 = std::pow(C30872, 2);
    const double C30834 = C30833 * C30781;
    const double C31060 = std::pow(C30914, 2);
    const double C31013 = C31012 * C29967;
    const double C31000 = C30999 / C29968;
    const double C30017 = -C30013;
    const double C30025 = std::pow(C30013, 4);
    const double C30042 = std::pow(C30013, 6);
    const double C30067 = std::pow(C30013, 2);
    const double C130 = ((xP - xQ) *
                         (bs[2] * std::pow(C30013, 2) +
                          std::pow(yP - yQ, 2) * bs[3] * std::pow(-C30013, 3)) *
                         std::pow(ae, 2)) /
                        C29975;
    const double C30765 = C30764 / C29968;
    const double C31090 = 4 * C31057;
    const double C31089 = C30782 * C31056;
    const double C30789 = C30788 / C30782;
    const double C30817 = C30816 / C30782;
    const double C30835 = C30834 / C30782;
    const double C31014 = C31013 / C29968;
    const double C31001 = -C31000;
    const double C30020 = std::pow(C30017, 3);
    const double C30033 = std::pow(C30017, 5);
    const double C30053 = std::pow(C30017, 7);
    const double C30027 = C30026 * C30025;
    const double C30031 = C30024 * C30025;
    const double C30080 = C30025 * C30078;
    const double C30044 = C30043 * C30042;
    const double C30051 = C30041 * C30042;
    const double C30104 = C30042 * C30100;
    const double C30070 = C30068 * C30067;
    const double C123 = (C30022 * C30067 * C30068 * C30064) / C29968;
    const double C296 = (C30015 * C30067 * C30068 * C30064) / C29968 -
                        (ae * bs[1] * C30011) / (C30010 * C29968);
    const double C479 = (C30156 * C30067 * C30068 * C30064) / C29968;
    const double C30766 = -C30765;
    const double C30790 = -C30789;
    const double C30818 = -C30817;
    const double C30836 = -C30835;
    const double C31015 = -C31014;
    const double C31002 = std::exp(C31001);
    const double C30023 = C30016 * C30020;
    const double C30072 = C30020 * C30071;
    const double C131 =
        ((bs[2] * std::pow(C30013, 2) + C30019 * C30016 * C30020) * C30018 +
         (C30016 * C30020 + C30019 * bs[4] * std::pow(C30013, 4)) * C30018 *
             std::pow(xP - xQ, 2)) /
        C29975;
    const double C306 =
        (2 * ae * C30067 * C30068 * C30064 +
         C30015 * (C30068 * C30067 + C30019 * C30016 * C30020) * C30018) /
        C29975;
    const double C30036 = C30035 * C30033;
    const double C30040 = C30032 * C30033;
    const double C30089 = C30033 * C30087;
    const double C30056 = C30055 * C30053;
    const double C30126 = C30053 * C30121;
    const double C30088 = C30031 * C30034;
    const double C30101 = C30022 * C30031;
    const double C30202 = C30031 * C30019;
    const double C30201 = C30015 * C30031;
    const double C30200 = C30031 * ae;
    const double C30742 = C30031 * C30265;
    const double C30745 = C30156 * C30031;
    const double C30082 = C30022 * C30080;
    const double C30185 = C30015 * C30080;
    const double C30196 = ae * C30080;
    const double C30124 = C30051 * C30034;
    const double C30379 = C30051 * C30019;
    const double C30378 = C30015 * C30051;
    const double C30377 = C30051 * ae;
    const double C30465 = C30022 * C30051;
    const double C30107 = C30104 * C30034;
    const double C30120 = C30022 * C30104;
    const double C30338 = C30015 * C30104;
    const double C30371 = ae * C30104;
    const double C30441 = C30104 * C30265;
    const double C30512 = C30156 * C30104;
    const double C30073 = C30070 * ae;
    const double C489 =
        ((zP - zQ) * (C30070 + C30019 * C30016 * C30020) * C30018) / C29975;
    const double C117 = C30070 * C30034 - (bs[1] * C30011) / C30010;
    const double C285 = C30015 * C30022 * C30070;
    const double C287 = C30070 * C30019 - (bs[1] * C30011) / C30010;
    const double C468 = C30156 * C30022 * C30070;
    const double C470 = C30070 * C30265 - (bs[1] * C30011) / C30010;
    const double C905 = C30156 * C30015 * C30070;
    const double C30767 = std::exp(C30766);
    const double C30791 = std::exp(C30790);
    const double C30819 = std::exp(C30818);
    const double C30837 = std::exp(C30836);
    const double C31016 = std::exp(C31015);
    const double C140 = C31002 * C130;
    const double C29978 = C29976 * C31002;
    const double C113 =
        -((C31002 - (C29966 * 2 * C29967 * C29966 * C31002) / C29968) * 2 *
          C29967) /
        C29968;
    const double C114 = -(2 * C29967 * C29966 * C31002) / C29968;
    const double C31110 = C31002 * C31076;
    const double C4703 =
        (C31002 * std::pow(C31076, 2)) / C29975 + C31002 / C31045;
    const double C4705 = C31080 * C31002;
    const double C13236 = C31078 * C31002;
    const double C30028 = C30023 + C30027;
    const double C30079 = C30022 * C30023;
    const double C30187 = C30015 * C30023;
    const double C30186 = C30023 * ae;
    const double C118 =
        2 * C30022 * C30070 + C30022 * (C30070 + C30023 * C30034);
    const double C284 = C30015 * (C30070 + C30023 * C30034);
    const double C467 = C30156 * (C30070 + C30023 * C30034);
    const double C1126 =
        2 * C30015 * C30070 + C30015 * (C30070 + C30023 * C30019);
    const double C1263 = C30156 * (C30070 + C30023 * C30019);
    const double C1974 =
        2 * C30156 * C30070 + C30156 * (C30070 + C30023 * C30265);
    const double C1975 =
        3 * (C30070 + C30023 * C30265) +
        C30156 * (2 * C30156 * C30023 + C30156 * (C30023 + C30031 * C30265));
    const double C30074 = C30015 * C30072;
    const double C124 = (C30067 * C30068 * C30064 + C30072 * C30034) / C29968;
    const double C125 =
        (2 * C30022 * C30072 + C30022 * (C30072 + C30080 * C30034)) / C29968;
    const double C294 = (C30015 * (C30072 + C30080 * C30034) +
                         (C30070 + C30023 * C30034) * ae) /
                        C29968;
    const double C295 =
        (C30015 * C30022 * C30072 + C30022 * C30070 * ae) / C29968;
    const double C477 = (C30156 * (C30072 + C30080 * C30034)) / C29968;
    const double C478 = (C30156 * C30022 * C30072) / C29968;
    const double C480 = (C30067 * C30068 * C30064 + C30072 * C30265) / C29968;
    const double C1980 =
        (2 * C30156 * C30072 + C30156 * (C30072 + C30080 * C30265)) / C29968;
    const double C143 = C31002 * C131;
    const double C30037 = C30031 + C30036;
    const double C30045 = C30040 + C30044;
    const double C30102 = C30040 * C30034;
    const double C30123 = C30022 * C30040;
    const double C30341 = C30040 * C30019;
    const double C30340 = C30015 * C30040;
    const double C30339 = C30040 * ae;
    const double C30746 = C30040 * C30265;
    const double C30091 = C30089 * C30034;
    const double C30099 = C30022 * C30089;
    const double C30199 = C30015 * C30089;
    const double C30334 = ae * C30089;
    const double C30428 = C30156 * C30089;
    const double C30651 = C30089 * C30265;
    const double C1981 =
        (3 * (C30072 + C30080 * C30265) +
         C30156 * (2 * C30156 * C30080 + C30156 * (C30080 + C30089 * C30265))) /
        C29968;
    const double C30057 = C30051 + C30056;
    const double C30129 = C30126 * C30034;
    const double C30376 = C30015 * C30126;
    const double C30464 = C30022 * C30126;
    const double C30090 = C30023 + C30088;
    const double C30105 = 2 * C30101;
    const double C30176 = C30015 * C30101;
    const double C30175 = C30101 * ae;
    const double C30206 = C30023 + C30202;
    const double C30205 = C30201 * ae;
    const double C30342 = 2 * C30201;
    const double C30743 = C30023 + C30742;
    const double C30747 = 2 * C30745;
    const double C30083 = C30015 * C30082;
    const double C481 = (C30022 * C30072 + C30082 * C30265) / C29968;
    const double C30203 = 2 * C30196;
    const double C30128 = C30040 + C30124;
    const double C30387 = C30040 + C30379;
    const double C30386 = C30378 * ae;
    const double C30473 = C30465 * C30019;
    const double C30472 = C30015 * C30465;
    const double C30471 = C30465 * ae;
    const double C30109 = C30089 + C30107;
    const double C30125 = 2 * C30120;
    const double C30222 = C30015 * C30120;
    const double C30460 = ae * C30120;
    const double C30498 = C30156 * C30120;
    const double C30659 = C30120 * C30265;
    const double C30384 = 2 * C30371;
    const double C30446 = C30089 + C30441;
    const double C30519 = ae * C30512;
    const double C9189 = C31002 * C489;
    const double C31079 = C30767 * C31044;
    const double C102 =
        (C30767 * std::pow(C31044, 2)) / C29975 + C30767 / C31045;
    const double C104 = C31080 * C30767;
    const double C13238 = C31078 * C30767;
    const double C30793 = C30791 * C30784;
    const double C30792 = C30791 / C30786;
    const double C30802 = C30799 * C30791;
    const double C31049 = C30791 * C30787;
    const double C31087 = C31053 * C30791;
    const double C31081 = C30791 * C31046;
    const double C30873 = C30819 / C30786;
    const double C30875 = C30819 * C30872;
    const double C30882 = C30799 * C30819;
    const double C31064 = C30819 * C30874;
    const double C31093 = C31053 * C30819;
    const double C31091 = C30819 * C31058;
    const double C30915 = C30837 / C30786;
    const double C30917 = C30837 * C30914;
    const double C30924 = C30799 * C30837;
    const double C31070 = C30837 * C30916;
    const double C31096 = C31053 * C30837;
    const double C31094 = C30837 * C31060;
    const double C31111 = C31016 * C31077;
    const double C8964 =
        (C31016 * std::pow(C31077, 2)) / C29975 + C31016 / C31045;
    const double C8966 = C31080 * C31016;
    const double C18992 = C31078 * C31016;
    const double C29980 = 2 * C29978;
    const double C4712 = ((0 * ae) / C29968 - C29978 / C29975) / (2 * C29968) +
                         (0 * ae) / C29968;
    const double C13242 = (0 * ae) / C29968 - C29978 / C29975;
    const double C141 = C113 * C117;
    const double C138 = C113 * C116;
    const double C318 = C113 * C285;
    const double C501 = C113 * C468;
    const double C9190 = C113 * C470;
    const double C9188 = C113 * C469;
    const double C9556 = C113 * C905;
    const double C139 = C114 * C123;
    const double C137 = C114 * C122;
    const double C321 = C114 * C296;
    const double C504 = C114 * C479;
    const double C4704 = (2 * C31078 * C31110) / C29968;
    const double C13235 = C31110 / C29968;
    const double C30029 = C30028 * C30018;
    const double C30081 = C30079 * ae;
    const double C288 = C30022 * C30070 + C30079 * C30019;
    const double C471 = C30022 * C30070 + C30079 * C30265;
    const double C906 = C30156 * C30015 * C30079;
    const double C1125 =
        2 * C30015 * C30079 + C30015 * (C30079 + C30101 * C30019);
    const double C1262 = C30156 * (C30079 + C30101 * C30019);
    const double C1973 =
        2 * C30156 * C30079 + C30156 * (C30079 + C30101 * C30265);
    const double C30189 = C30187 * ae;
    const double C1260 = C30015 * C30070 + C30187 * C30265;
    const double C2370 =
        2 * C30156 * C30187 + C30156 * (C30187 + C30201 * C30265);
    const double C30188 = C30185 + C30186;
    const double C144 = C113 * C118;
    const double C315 = C113 * C284;
    const double C498 = C113 * C467;
    const double C9860 = C113 * C1263;
    const double C9192 = C113 * C1974;
    const double C10536 = C113 * C1975;
    const double C30075 = C30074 + C30073;
    const double C142 = C114 * C124;
    const double C145 = C114 * C125;
    const double C316 = C114 * C294;
    const double C319 = C114 * C295;
    const double C499 = C114 * C477;
    const double C502 = C114 * C478;
    const double C505 = C114 * C480;
    const double C1993 = C114 * C1980;
    const double C30038 = C30037 * C30018;
    const double C30046 = C30045 * C30018;
    const double C30106 = C30031 + C30102;
    const double C30127 = 2 * C30123;
    const double C30225 = C30123 * C30019;
    const double C30224 = C30015 * C30123;
    const double C30223 = C30123 * ae;
    const double C30753 = C30123 * C30265;
    const double C1976 =
        3 * (C30079 + C30101 * C30265) +
        C30156 * (2 * C30156 * C30101 + C30156 * (C30101 + C30123 * C30265));
    const double C30347 = C30031 + C30341;
    const double C30346 = C30340 * ae;
    const double C30380 = 2 * C30340;
    const double C30756 = C30340 * C30265;
    const double C6296 =
        3 * (C30187 + C30201 * C30265) +
        C30156 * (2 * C30156 * C30201 + C30156 * (C30201 + C30340 * C30265));
    const double C30345 = C30338 + C30339;
    const double C30748 = C30031 + C30746;
    const double C30093 = C30080 + C30091;
    const double C30103 = 2 * C30099;
    const double C30174 = C30015 * C30099;
    const double C30219 = ae * C30099;
    const double C1979 =
        (2 * C30156 * C30082 + C30156 * (C30082 + C30099 * C30265)) / C29968;
    const double C1982 =
        (3 * (C30082 + C30099 * C30265) +
         C30156 * (2 * C30156 * C30099 + C30156 * (C30099 + C30120 * C30265))) /
        C29968;
    const double C30204 = C30199 + C30200;
    const double C30344 = 2 * C30334;
    const double C30433 = ae * C30428;
    const double C30654 = 2 * C30428;
    const double C30652 = C30080 + C30651;
    const double C1994 = C114 * C1981;
    const double C30058 = C30057 * C30018;
    const double C30131 = C30104 + C30129;
    const double C30385 = C30376 + C30377;
    const double C30470 = C30015 * C30464;
    const double C30092 = C30090 * ae;
    const double C119 = 3 * (C30070 + C30023 * C30034) +
                        C30022 * (2 * C30079 + C30022 * C30090);
    const double C289 = C30070 + C30023 * C30034 + C30090 * C30019;
    const double C290 = C30015 * (2 * C30079 + C30022 * C30090);
    const double C472 = C30070 + C30023 * C30034 + C30090 * C30265;
    const double C473 = C30156 * (2 * C30079 + C30022 * C30090);
    const double C907 = C30156 * C30015 * C30090;
    const double C30178 = C30176 * ae;
    const double C1259 = C30015 * C30079 + C30176 * C30265;
    const double C30209 = C30206 * ae;
    const double C1127 = 3 * (C30070 + C30023 * C30019) +
                         C30015 * (2 * C30187 + C30015 * C30206);
    const double C1264 = C30070 + C30023 * C30019 + C30206 * C30265;
    const double C1670 = C30156 * (2 * C30187 + C30015 * C30206);
    const double C10529 =
        4 * (2 * C30156 * C30023 + C30156 * C30743) +
        C30156 * (3 * C30743 + C30156 * (2 * C30156 * C30031 +
                                         C30156 * (C30031 + C30040 * C30265)));
    const double C507 = C114 * C481;
    const double C30130 = C30022 * C30128;
    const double C30248 = C30128 * C30019;
    const double C30247 = C30015 * C30128;
    const double C30246 = C30128 * ae;
    const double C30392 = C30015 * C30387;
    const double C30391 = C30387 * ae;
    const double C30477 = C30123 + C30473;
    const double C30476 = C30472 * ae;
    const double C30111 = C30022 * C30109;
    const double C30119 = 3 * C30109;
    const double C30162 = C30015 * C30109;
    const double C30242 = ae * C30109;
    const double C30468 = 2 * C30460;
    const double C30503 = ae * C30498;
    const double C30660 = C30099 + C30659;
    const double C30451 = ae * C30446;
    const double C30655 = C30156 * C30446;
    const double C30525 = 2 * C30519;
    const double C103 = (2 * C31078 * C31079) / C29968;
    const double C13237 = C31079 / C29968;
    const double C30794 = C30793 * C30787;
    const double C30801 = C30793 / C30800;
    const double C31050 = C30799 * C30793;
    const double C31048 = C30793 / C30782;
    const double C281 = (C30791 * std::pow(C30787, 2)) / C30785 + C30792;
    const double C30803 = C30802 * C30787;
    const double C31054 = C30784 * C30802;
    const double C31052 = 2 * C30802;
    const double C31097 = C30802 / C31056;
    const double C112 = C30802 / C31090;
    const double C2851 = C30802 / C30786;
    const double C31083 = C31049 / C30782;
    const double C282 = (-2 * C30799 * C31049) / C30782;
    const double C31112 = C31081 / C30785;
    const double C1050 = (C30819 * std::pow(C30874, 2)) / C30785 + C30873;
    const double C30876 = C30875 * C30874;
    const double C30881 = C30875 / C30800;
    const double C31062 = C30875 / C30782;
    const double C31059 = C30799 * C30875;
    const double C30883 = C30882 * C30874;
    const double C31068 = C30872 * C30882;
    const double C31067 = 2 * C30882;
    const double C31103 = C30882 / C31056;
    const double C1122 = C30882 / C31090;
    const double C2848 = C30882 / C30786;
    const double C31099 = C31064 / C30782;
    const double C1051 = (-2 * C30799 * C31064) / C30782;
    const double C31117 = C31091 / C30785;
    const double C1792 = (C30837 * std::pow(C30916, 2)) / C30785 + C30915;
    const double C30918 = C30917 * C30916;
    const double C30923 = C30917 / C30800;
    const double C31063 = C30917 / C30782;
    const double C31061 = C30799 * C30917;
    const double C30925 = C30924 * C30916;
    const double C31074 = C30914 * C30924;
    const double C31073 = 2 * C30924;
    const double C31109 = C30924 / C31056;
    const double C1971 = C30924 / C31090;
    const double C3750 = C30924 / C30786;
    const double C31105 = C31070 / C30782;
    const double C1793 = (-2 * C30799 * C31070) / C30782;
    const double C31119 = C31094 / C30785;
    const double C8965 = (2 * C31078 * C31111) / C29968;
    const double C18991 = C31111 / C29968;
    const double C29981 = C29966 * C29980;
    const double C13253 = C13242 * C294;
    const double C13250 = C13242 * C295;
    const double C13245 = C13242 * C296;
    const double C154 = C138 + C139;
    const double C9200 = C9188 + C504;
    const double C13257 = C13235 * C131;
    const double C13248 = C13235 * C130;
    const double C24781 = C13235 * C489;
    const double C132 =
        (2 * C30022 * C30029 +
         C30022 * (C30029 +
                   (C30024 * C30025 + C30019 * bs[5] * std::pow(C30017, 5)) *
                       C30018 * std::pow(C30022, 2))) /
        C29975;
    const double C305 = (2 * ae * C30022 * C30020 * C30016 * C30064 +
                         C30015 * C30022 * C30029) /
                        C29975;
    const double C488 = ((zP - zQ) * C30022 * C30029) / C29975;
    const double C490 = ((C30070 + C30019 * C30016 * C30020) * C30018 +
                         C30029 * std::pow(zP - zQ, 2)) /
                        C29975;
    const double C915 =
        (2 * ae * C30156 * C30072 + C30015 * C30156 * C30029) / C29975;
    const double C30084 = C30083 + C30081;
    const double C323 = C113 * C288;
    const double C506 = C113 * C471;
    const double C922 = C113 * C906;
    const double C1404 = C113 * C1125;
    const double C1564 = C113 * C1262;
    const double C2264 = C113 * C1973;
    const double C9558 = C113 * C1260;
    const double C9857 = C113 * C2370;
    const double C30191 = ae * C30188;
    const double C30190 = C30015 * C30188;
    const double C30198 = 2 * C30188;
    const double C30275 = C30156 * C30188;
    const double C30076 = ae * C30075;
    const double C297 =
        (C30067 * C30068 * C30064 + C30015 * C30075 + C30015 * C30070 * ae) /
        C29968;
    const double C910 = (C30156 * C30075) / C29968;
    const double C1269 = (C30075 + C30188 * C30265) / C29968;
    const double C155 = C141 + C142;
    const double C156 = C144 + C145;
    const double C337 = C315 + C316;
    const double C338 = C318 + C319;
    const double C520 = C498 + C499;
    const double C521 = C501 + C502;
    const double C9201 = C9190 + C505;
    const double C9202 = C9192 + C1993;
    const double C30173 = C30022 * C30038;
    const double C30197 = C30015 * C30038;
    const double C30304 = C30156 * C30038;
    const double C133 =
        (3 * (C30029 + C30038 * C30034) +
         C30022 * (2 * C30022 * C30038 +
                   C30022 * (C30038 + (C30032 * C30033 +
                                       C30019 * bs[6] * std::pow(C30013, 6)) *
                                          C30018 * C30034))) /
        C29975;
    const double C304 =
        (2 * ae *
             (C30020 * C30016 * C30064 + C30025 * C30024 * C30064 * C30034) +
         C30015 * (C30029 + C30038 * C30034)) /
        C29975;
    const double C487 = ((zP - zQ) * (C30029 + C30038 * C30034)) / C29975;
    const double C491 =
        (C30022 * C30029 + C30022 * C30038 * std::pow(zP - zQ, 2)) / C29975;
    const double C916 =
        (2 * ae * C30156 * C30082 + C30015 * C30156 * C30022 * C30038) / C29975;
    const double C1278 = (2 * ae * (C30072 + C30080 * C30265) +
                          C30015 * (C30029 + C30038 * C30265)) /
                         C29975;
    const double C1986 =
        (2 * C30156 * C30029 + C30156 * (C30029 + C30038 * C30265)) / C29975;
    const double C30047 = C30046 * C30034;
    const double C30050 = C30022 * C30046;
    const double C30335 = C30015 * C30046;
    const double C30419 = C30046 * C30265;
    const double C30429 = C30156 * C30046;
    const double C30108 = C30022 * C30106;
    const double C30122 = 3 * C30106;
    const double C30164 = C30015 * C30106;
    const double C30163 = C30106 * ae;
    const double C1124 =
        2 * C30015 * C30090 + C30015 * (C30090 + C30106 * C30019);
    const double C1261 = C30156 * (C30090 + C30106 * C30019);
    const double C1972 =
        2 * C30156 * C30090 + C30156 * (C30090 + C30106 * C30265);
    const double C1977 =
        3 * (C30090 + C30106 * C30265) +
        C30156 * (2 * C30156 * C30106 + C30156 * (C30106 + C30128 * C30265));
    const double C30229 = C30101 + C30225;
    const double C30228 = C30224 * ae;
    const double C30466 = 2 * C30224;
    const double C2371 =
        2 * C30156 * C30176 + C30156 * (C30176 + C30224 * C30265);
    const double C10695 =
        3 * (C30176 + C30224 * C30265) +
        C30156 * (2 * C30156 * C30224 + C30156 * (C30224 + C30472 * C30265));
    const double C30227 = C30222 + C30223;
    const double C30754 = C30101 + C30753;
    const double C10807 = C113 * C1976;
    const double C30351 = C30015 * C30347;
    const double C30350 = C30347 * ae;
    const double C30381 = 3 * C30347;
    const double C6295 =
        2 * C30156 * C30206 + C30156 * (C30206 + C30347 * C30265);
    const double C6297 =
        3 * (C30206 + C30347 * C30265) +
        C30156 * (2 * C30156 * C30347 + C30156 * (C30347 + C30387 * C30265));
    const double C30757 = C30201 + C30756;
    const double C10915 = C113 * C6296;
    const double C30352 = ae * C30345;
    const double C30349 = C30015 * C30345;
    const double C30375 = 2 * C30345;
    const double C30421 = C30345 * C30265;
    const double C30432 = C30156 * C30345;
    const double C30749 = C30156 * C30748;
    const double C30094 = C30015 * C30093;
    const double C126 = (3 * (C30072 + C30080 * C30034) +
                         C30022 * (2 * C30082 + C30022 * C30093)) /
                        C29968;
    const double C300 = (C30015 * (2 * C30082 + C30022 * C30093) +
                         (2 * C30079 + C30022 * C30090) * ae) /
                        C29968;
    const double C482 = (C30072 + C30080 * C30034 + C30093 * C30265) / C29968;
    const double C483 = (C30156 * (2 * C30082 + C30022 * C30093)) / C29968;
    const double C1978 =
        (2 * C30156 * C30093 + C30156 * (C30093 + C30109 * C30265)) / C29968;
    const double C30177 = C30174 + C30175;
    const double C30226 = 2 * C30219;
    const double C1992 = C114 * C1979;
    const double C1995 = C114 * C1982;
    const double C30210 = ae * C30204;
    const double C30208 = C30015 * C30204;
    const double C30278 = C30204 * C30265;
    const double C30306 = C30156 * C30204;
    const double C30337 = 2 * C30204;
    const double C30438 = 2 * C30433;
    const double C10531 =
        (4 * (2 * C30156 * C30080 + C30156 * C30652) +
         C30156 * (3 * C30652 + C30156 * (2 * C30428 + C30156 * C30446))) /
        C29968;
    const double C10542 = C10536 + C1994;
    const double C30059 = C30058 * C30034;
    const double C30372 = C30015 * C30058;
    const double C30442 = C30058 * C30265;
    const double C30461 = C30022 * C30058;
    const double C30513 = C30156 * C30058;
    const double C30133 = C30022 * C30131;
    const double C30245 = C30015 * C30131;
    const double C1983 =
        (3 * (C30093 + C30109 * C30265) +
         C30156 * (2 * C30156 * C30109 + C30156 * (C30109 + C30131 * C30265))) /
        C29968;
    const double C30393 = ae * C30385;
    const double C30390 = C30015 * C30385;
    const double C30445 = C30385 * C30265;
    const double C30517 = C30156 * C30385;
    const double C30475 = C30470 + C30471;
    const double C147 = C113 * C119;
    const double C326 = C113 * C289;
    const double C329 = C113 * C290;
    const double C509 = C113 * C472;
    const double C512 = C113 * C473;
    const double C925 = C113 * C907;
    const double C2148 = C113 * C1259;
    const double C9862 = C113 * C1264;
    const double C10235 = C113 * C1670;
    const double C10538 = C113 * C10529;
    const double C30132 = C30127 + C30130;
    const double C30252 = C30106 + C30248;
    const double C30251 = C30247 * ae;
    const double C30396 = C30380 + C30392;
    const double C30481 = C30015 * C30477;
    const double C30480 = C30477 * ae;
    const double C30113 = C30103 + C30111;
    const double C30249 = 2 * C30242;
    const double C30508 = 2 * C30503;
    const double C10804 =
        (4 * (2 * C30156 * C30099 + C30156 * C30660) +
         C30156 *
             (3 * C30660 +
              C30156 * (2 * C30498 + C30156 * (C30120 + C30464 * C30265)))) /
        C29968;
    const double C30456 = 2 * C30451;
    const double C30656 = C30654 + C30655;
    const double C30795 = C30794 / C30785;
    const double C31084 = 2 * C31050;
    const double C30804 = C30803 / C30782;
    const double C31088 = C31054 / C30800;
    const double C31113 = C31048 - C31083;
    const double C2588 = -C31083;
    const double C31127 = C31112 + C30792;
    const double C30877 = C30876 / C30785;
    const double C31092 = 2 * C31059;
    const double C30884 = C30883 / C30782;
    const double C31102 = C31068 / C30800;
    const double C31121 = C31062 - C31099;
    const double C2480 = -C31099;
    const double C31130 = C31117 + C30873;
    const double C30919 = C30918 / C30785;
    const double C31095 = 2 * C31061;
    const double C30926 = C30925 / C30782;
    const double C31108 = C31074 / C30800;
    const double C31124 = C31063 - C31105;
    const double C3242 = -C31105;
    const double C31131 = C31119 + C30915;
    const double C29982 = C29981 / C29968;
    const double C159 = C154 + C139;
    const double C9203 = C9200 + C504;
    const double C146 = C31002 * C132;
    const double C13260 = C13235 * C132;
    const double C320 = C31002 * C305;
    const double C13251 = C13236 * C305;
    const double C13447 = C13235 * C305;
    const double C503 = C31002 * C488;
    const double C13649 = C13235 * C488;
    const double C9191 = C31002 * C490;
    const double C24787 = C13235 * C490;
    const double C9557 = C31002 * C915;
    const double C24783 = C13236 * C915;
    const double C25255 = C13235 * C915;
    const double C30085 = ae * C30084;
    const double C298 =
        (C30022 * C30072 + C30015 * C30084 + C30015 * C30079 * ae) / C29968;
    const double C911 = (C30156 * C30084) / C29968;
    const double C522 = C506 + C507;
    const double C30192 = C30072 + C30190;
    const double C30276 = ae * C30275;
    const double C307 =
        ((C30070 + C30019 * C30016 * C30020) * C30018 + C30076 + C30076 +
         C30015 * (2 * ae * C30072 + C30015 * C30029)) /
        C29975;
    const double C322 = C114 * C297;
    const double C4716 = C4712 * C297;
    const double C13448 = C13242 * C297;
    const double C921 = C114 * C910;
    const double C13650 = C13242 * C910;
    const double C1288 = C114 * C1269;
    const double C13653 = C13242 * C1269;
    const double C160 = C155 + C142;
    const double C161 = C156 + C145;
    const double C343 = C337 + C316;
    const double C344 = C338 + C319;
    const double C526 = C520 + C499;
    const double C527 = C521 + C502;
    const double C9204 = C9201 + C505;
    const double C9205 = C9202 + C1993;
    const double C30207 = C30203 + C30197;
    const double C1987 =
        (3 * (C30029 + C30038 * C30265) +
         C30156 * (2 * C30304 + C30156 * (C30038 + C30046 * C30265))) /
        C29975;
    const double C2376 =
        (2 * ae * (2 * C30156 * C30080 + C30156 * (C30080 + C30089 * C30265)) +
         C30015 * (2 * C30304 + C30156 * (C30038 + C30046 * C30265))) /
        C29975;
    const double C149 = C31002 * C133;
    const double C13269 = C13235 * C133;
    const double C317 = C31002 * C304;
    const double C13254 = C13236 * C304;
    const double C13460 = C13235 * C304;
    const double C500 = C31002 * C487;
    const double C13662 = C13235 * C487;
    const double C508 = C31002 * C491;
    const double C13656 = C13235 * C491;
    const double C924 = C31002 * C916;
    const double C13646 = C13236 * C916;
    const double C14182 = C13235 * C916;
    const double C9559 = C31002 * C1278;
    const double C24785 = C13236 * C1278;
    const double C25641 = C13235 * C1278;
    const double C9193 = C31002 * C1986;
    const double C26513 = C13235 * C1986;
    const double C30048 = C30038 + C30047;
    const double C30054 = 2 * C30050;
    const double C30220 = C30015 * C30050;
    const double C30310 = C30156 * C30050;
    const double C1277 = (2 * ae * (C30082 + C30099 * C30265) +
                          C30015 * (C30173 + C30050 * C30265)) /
                         C29975;
    const double C1985 =
        (2 * C30156 * C30173 + C30156 * (C30173 + C30050 * C30265)) / C29975;
    const double C30348 = C30344 + C30335;
    const double C30422 = C30038 + C30419;
    const double C30434 = C30015 * C30429;
    const double C30558 = 2 * C30429;
    const double C30110 = C30105 + C30108;
    const double C30166 = C30164 * ae;
    const double C1258 = C30015 * C30090 + C30164 * C30265;
    const double C2372 =
        2 * C30156 * C30164 + C30156 * (C30164 + C30247 * C30265);
    const double C30165 = C30162 + C30163;
    const double C1402 = C113 * C1124;
    const double C1562 = C113 * C1261;
    const double C2262 = C113 * C1972;
    const double C30232 = C30229 * ae;
    const double C1128 = 3 * (C30079 + C30101 * C30019) +
                         C30015 * (2 * C30176 + C30015 * C30229);
    const double C1265 = C30079 + C30101 * C30019 + C30229 * C30265;
    const double C1671 = C30156 * (2 * C30176 + C30015 * C30229);
    const double C6560 =
        2 * C30156 * C30229 + C30156 * (C30229 + C30477 * C30265);
    const double C10699 = C113 * C2371;
    const double C30233 = ae * C30227;
    const double C30231 = C30015 * C30227;
    const double C30282 = C30227 * C30265;
    const double C30312 = C30156 * C30227;
    const double C30463 = 2 * C30227;
    const double C10803 =
        4 * (2 * C30156 * C30101 + C30156 * C30754) +
        C30156 * (3 * C30754 + C30156 * (2 * C30156 * C30123 +
                                         C30156 * (C30123 + C30465 * C30265)));
    const double C30355 = C30342 + C30351;
    const double C9864 = C113 * C6295;
    const double C10911 =
        4 * (2 * C30156 * C30201 + C30156 * C30757) +
        C30156 * (3 * C30757 + C30156 * (2 * C30156 * C30340 +
                                         C30156 * (C30340 + C30378 * C30265)));
    const double C30370 = C30046 + C30352;
    const double C30354 = C30089 + C30349;
    const double C30424 = C30204 + C30421;
    const double C30437 = ae * C30432;
    const double C30537 = 2 * C30432;
    const double C30750 = C30747 + C30749;
    const double C30095 = C30094 + C30092;
    const double C148 = C114 * C126;
    const double C330 = C114 * C300;
    const double C13262 = C13242 * C300;
    const double C510 = C114 * C482;
    const double C513 = C114 * C483;
    const double C1991 = C114 * C1978;
    const double C30180 = ae * C30177;
    const double C30179 = C30015 * C30177;
    const double C30221 = 2 * C30177;
    const double C30272 = C30156 * C30177;
    const double C1268 = (C30084 + C30177 * C30265) / C29968;
    const double C2268 = C2264 + C1992;
    const double C10810 = C10807 + C1995;
    const double C30333 = C30038 + C30210;
    const double C30211 = C30080 + C30208;
    const double C30279 = C30188 + C30278;
    const double C30308 = ae * C30306;
    const double C30530 = 2 * C30306;
    const double C10539 = C114 * C10531;
    const double C10544 = C10542 + C1994;
    const double C30060 = C30046 + C30059;
    const double C30389 = C30384 + C30372;
    const double C30447 = C30046 + C30442;
    const double C30469 = C30015 * C30461;
    const double C30499 = C30156 * C30461;
    const double C30544 = C30461 * C30265;
    const double C30520 = C30015 * C30513;
    const double C30135 = C30125 + C30133;
    const double C30250 = C30245 + C30246;
    const double C1996 = C114 * C1983;
    const double C30395 = C30104 + C30390;
    const double C30450 = C30345 + C30445;
    const double C30524 = ae * C30517;
    const double C30482 = ae * C30475;
    const double C30479 = C30015 * C30475;
    const double C30502 = C30156 * C30475;
    const double C30546 = C30475 * C30265;
    const double C30134 = C30022 * C30132;
    const double C30292 = C30015 * C30132;
    const double C30291 = C30132 * ae;
    const double C30255 = C30252 * ae;
    const double C1129 = 3 * (C30090 + C30106 * C30019) +
                         C30015 * (2 * C30164 + C30015 * C30252);
    const double C1266 = C30090 + C30106 * C30019 + C30252 * C30265;
    const double C1672 = C30156 * (2 * C30164 + C30015 * C30252);
    const double C30400 = C30015 * C30396;
    const double C30399 = C30396 * ae;
    const double C30485 = C30466 + C30481;
    const double C30114 = C30015 * C30113;
    const double C127 = (4 * (2 * C30082 + C30022 * C30093) +
                         C30022 * (3 * C30093 + C30022 * C30113)) /
                        C29968;
    const double C484 =
        (2 * C30082 + C30022 * C30093 + C30113 * C30265) / C29968;
    const double C485 = (C30156 * (3 * C30093 + C30022 * C30113)) / C29968;
    const double C10809 = C114 * C10804;
    const double C10532 =
        (5 * (3 * C30652 + C30156 * C30656) +
         C30156 * (4 * C30656 +
                   C30156 * (3 * C30446 +
                             C30156 * (2 * C30512 +
                                       C30156 * (C30104 + C30126 * C30265))))) /
        C29968;
    const double C30796 = C30792 - C30795;
    const double C31114 = C31084 / C30782;
    const double C30805 = C30801 - C30804;
    const double C31128 = C31113 / C30786;
    const double C30878 = C30873 - C30877;
    const double C31118 = C31092 / C30782;
    const double C30885 = C30881 - C30884;
    const double C31132 = C31121 / C30786;
    const double C30920 = C30915 - C30919;
    const double C31120 = C31095 / C30782;
    const double C30927 = C30923 - C30926;
    const double C31134 = C31124 / C30786;
    const double C29983 = C31002 - C29982;
    const double C164 = C159 + C140;
    const double C9206 = C9203 + C9189;
    const double C308 =
        (C30022 * C30029 + C30085 + C30085 +
         C30015 * (2 * ae * C30082 + C30015 * C30022 * C30038)) /
        C29975;
    const double C324 = C114 * C298;
    const double C4717 = C4712 * C298;
    const double C13443 = C13242 * C298;
    const double C923 = C114 * C911;
    const double C13645 = C13242 * C911;
    const double C528 = C522 + C507;
    const double C30193 = C30192 + C30189;
    const double C1281 =
        (C30156 * C30029 + C30276 + C30276 +
         C30015 * (2 * ae * C30156 * C30080 + C30015 * C30156 * C30038)) /
        C29975;
    const double C9564 = C9556 + C921;
    const double C9565 = C9558 + C1288;
    const double C165 = C160 + C143;
    const double C166 = C161 + C146;
    const double C350 = C344 + C320;
    const double C533 = C527 + C503;
    const double C9207 = C9204 + C9191;
    const double C10537 = C31002 * C1987;
    const double C26519 = C13235 * C1987;
    const double C9858 = C31002 * C2376;
    const double C26515 = C13236 * C2376;
    const double C26991 = C13235 * C2376;
    const double C349 = C343 + C317;
    const double C532 = C526 + C500;
    const double C9208 = C9205 + C9193;
    const double C134 =
        (4 * (2 * C30022 * C30038 + C30022 * C30048) +
         C30022 * (3 * C30048 +
                   C30022 * (2 * C30022 * C30046 +
                             C30022 * (C30046 +
                                       (C30041 * C30042 +
                                        C30019 * bs[7] * std::pow(C30017, 7)) *
                                           C30018 * C30034)))) /
        C29975;
    const double C310 = (2 * ae * (2 * C30082 + C30022 * C30093) +
                         C30015 * (2 * C30022 * C30038 + C30022 * C30048)) /
                        C29975;
    const double C492 =
        (C30029 + C30038 * C30034 + C30048 * std::pow(zP - zQ, 2)) / C29975;
    const double C493 =
        ((zP - zQ) * (2 * C30022 * C30038 + C30022 * C30048)) / C29975;
    const double C917 =
        (2 * ae * C30156 * C30093 + C30015 * C30156 * C30048) / C29975;
    const double C30230 = C30226 + C30220;
    const double C1988 =
        (3 * (C30173 + C30050 * C30265) +
         C30156 * (2 * C30310 + C30156 * (C30050 + C30022 * C30058 * C30265))) /
        C29975;
    const double C2377 =
        (2 * ae * (2 * C30156 * C30099 + C30156 * (C30099 + C30120 * C30265)) +
         C30015 * (2 * C30310 + C30156 * (C30050 + C30022 * C30058 * C30265))) /
        C29975;
    const double C2149 = C31002 * C1277;
    const double C13659 = C13236 * C1277;
    const double C15661 = C13235 * C1277;
    const double C2265 = C31002 * C1985;
    const double C15803 = C13235 * C1985;
    const double C30353 = C30015 * C30348;
    const double C30369 = 2 * C30348;
    const double C30439 = C30438 + C30434;
    const double C30112 = C30110 * ae;
    const double C302 = (C30015 * (3 * C30093 + C30022 * C30113) +
                         (3 * C30090 + C30022 * C30110) * ae) /
                        C29968;
    const double C120 = 4 * (2 * C30079 + C30022 * C30090) +
                        C30022 * (3 * C30090 + C30022 * C30110);
    const double C291 = 2 * C30079 + C30022 * C30090 + C30110 * C30019;
    const double C292 = C30015 * (3 * C30090 + C30022 * C30110);
    const double C474 = 2 * C30079 + C30022 * C30090 + C30110 * C30265;
    const double C475 = C30156 * (3 * C30090 + C30022 * C30110);
    const double C908 = C30156 * C30015 * C30110;
    const double C1398 =
        2 * C30015 * C30110 + C30015 * (C30110 + C30132 * C30019);
    const double C1558 = C30156 * (C30110 + C30132 * C30019);
    const double C2258 =
        2 * C30156 * C30110 + C30156 * (C30110 + C30132 * C30265);
    const double C2146 = C113 * C1258;
    const double C30168 = ae * C30165;
    const double C30167 = C30015 * C30165;
    const double C30244 = 2 * C30165;
    const double C30269 = C30156 * C30165;
    const double C10130 = C113 * C1265;
    const double C20271 = C113 * C1671;
    const double C30459 = C30050 + C30233;
    const double C30234 = C30099 + C30231;
    const double C30283 = C30177 + C30282;
    const double C30314 = ae * C30312;
    const double C30553 = 2 * C30312;
    const double C30358 = C30355 * ae;
    const double C5513 = 4 * (2 * C30187 + C30015 * C30206) +
                         C30015 * (3 * C30206 + C30015 * C30355);
    const double C5635 = 2 * C30187 + C30015 * C30206 + C30355 * C30265;
    const double C5636 = C30156 * (3 * C30206 + C30015 * C30355);
    const double C6664 =
        2 * C30156 * C30355 + C30156 * (C30355 + C30396 * C30265);
    const double C30383 = C30370 + C30352;
    const double C30357 = C30354 + C30346;
    const double C30426 = ae * C30424;
    const double C30531 = C30156 * C30424;
    const double C30536 = 3 * C30424;
    const double C30511 = C30429 + C30437;
    const double C10530 =
        5 * (3 * C30743 + C30156 * C30750) +
        C30156 * (4 * C30750 +
                  C30156 * (3 * C30748 +
                            C30156 * (2 * C30156 * C30040 +
                                      C30156 * (C30040 + C30051 * C30265))));
    const double C30096 = ae * C30095;
    const double C299 =
        (C30072 + C30080 * C30034 + C30015 * C30095 + C30015 * C30090 * ae) /
        C29968;
    const double C912 = (C30156 * C30095) / C29968;
    const double C1267 = (C30095 + C30165 * C30265) / C29968;
    const double C157 = C147 + C148;
    const double C341 = C329 + C330;
    const double C523 = C509 + C510;
    const double C524 = C512 + C513;
    const double C2267 = C2262 + C1991;
    const double C30181 = C30082 + C30179;
    const double C30273 = ae * C30272;
    const double C1287 = C114 * C1268;
    const double C13658 = C13242 * C1268;
    const double C2270 = C2268 + C1992;
    const double C10811 = C10810 + C1995;
    const double C30343 = C30333 + C30210;
    const double C30212 = C30211 + C30205;
    const double C30280 = ae * C30279;
    const double C2373 = (2 * C30275 + C30156 * C30279) / C29968;
    const double C10543 = C10538 + C10539;
    const double C30061 = C30022 * C30060;
    const double C30243 = C30015 * C30060;
    const double C30316 = C30156 * C30060;
    const double C1276 = (2 * ae * (C30093 + C30109 * C30265) +
                          C30015 * (C30048 + C30060 * C30265)) /
                         C29975;
    const double C1984 =
        (2 * C30156 * C30048 + C30156 * (C30048 + C30060 * C30265)) / C29975;
    const double C30394 = C30015 * C30389;
    const double C30452 = C30015 * C30447;
    const double C30559 = C30156 * C30447;
    const double C6302 =
        (2 * ae *
             (3 * (C30080 + C30089 * C30265) +
              C30156 * (2 * C30428 + C30156 * C30446)) +
         C30015 * (3 * C30422 + C30156 * (2 * C30429 + C30156 * C30447))) /
        C29975;
    const double C30474 = C30468 + C30469;
    const double C30504 = C30015 * C30499;
    const double C30547 = C30050 + C30544;
    const double C30526 = C30525 + C30520;
    const double C30137 = C30022 * C30135;
    const double C30290 = C30015 * C30135;
    const double C2259 =
        (2 * C30156 * C30113 + C30156 * (C30113 + C30135 * C30265)) / C29968;
    const double C30256 = ae * C30250;
    const double C30254 = C30015 * C30250;
    const double C30286 = C30250 * C30265;
    const double C30318 = C30156 * C30250;
    const double C30398 = C30395 + C30386;
    const double C30455 = ae * C30450;
    const double C30538 = C30156 * C30450;
    const double C30484 = C30120 + C30479;
    const double C30507 = ae * C30502;
    const double C30549 = C30227 + C30546;
    const double C30136 = C30122 + C30134;
    const double C30294 = C30292 * ae;
    const double C2142 = C30015 * C30110 + C30292 * C30265;
    const double C30403 = C30381 + C30400;
    const double C30487 = C30485 * ae;
    const double C5751 = 4 * (2 * C30176 + C30015 * C30229) +
                         C30015 * (3 * C30229 + C30015 * C30485);
    const double C5903 = C30156 * (3 * C30229 + C30015 * C30485);
    const double C6456 = 2 * C30176 + C30015 * C30229 + C30485 * C30265;
    const double C151 = C114 * C127;
    const double C516 = C114 * C484;
    const double C518 = C114 * C485;
    const double C10541 = C114 * C10532;
    const double C31047 = C30796 * C30784;
    const double C31086 = C31052 + C30796;
    const double C31055 = C30805 / C30786;
    const double C31051 = C30805 * C30784;
    const double C637 = C31128 - (C30796 * C30787) / C30782;
    const double C31065 = C30878 * C30872;
    const double C31101 = C31067 + C30878;
    const double C31069 = C30885 / C30786;
    const double C31066 = C30885 * C30872;
    const double C1392 = C31132 - (C30878 * C30874) / C30782;
    const double C31071 = C30920 * C30914;
    const double C31107 = C31073 + C30920;
    const double C31075 = C30927 / C30786;
    const double C31072 = C30927 * C30914;
    const double C2254 = C31134 - (C30920 * C30916) / C30782;
    const double C29984 = C29983 * C29977;
    const double C4708 =
        (((0 - (C29966 * C29974) / C29968) * ae) / C29968 - (0 * be) / C29979) /
            (2 * C29968) +
        ((C29966 * ((C29983 * ae) / C29968 - C29974 / C29979) + C13235) * ae) /
            C29968 +
        (0 * ae) / C29968 - C29978 / C29975;
    const double C4710 =
        ((C29983 * ae) / C29968 - C29974 / C29979) / (2 * C29968) +
        ((C29966 * ((0 * ae) / C29968 - C29978 / C29975) + C13236) * ae) /
            C29968;
    const double C13240 = (C29983 * ae) / C29968 - C29974 / C29979;
    const double C9209 = C9206 * C30767;
    const double C19286 = C9206 * C13237;
    const double C325 = C31002 * C308;
    const double C13454 = C13235 * C308;
    const double C13444 = C13236 * C308;
    const double C339 = C323 + C324;
    const double C932 = C922 + C923;
    const double C534 = C528 + C508;
    const double C30194 = ae * C30193;
    const double C1132 =
        (2 * C30075 + C30015 * C30193 + (C30070 + C30023 * C30019) * ae) /
        C29968;
    const double C1272 = (C30156 * C30193) / C29968;
    const double C9861 = C31002 * C1281;
    const double C25257 = C13236 * C1281;
    const double C25645 = C13235 * C1281;
    const double C9566 = C9564 + C921;
    const double C9567 = C9565 + C1288;
    const double C9194 = C533 * C30767;
    const double C19290 = C533 * C13237;
    const double C19287 = C533 * C13238;
    const double C9210 = C9207 * C30767;
    const double C19289 = C9207 * C13237;
    const double C10546 = C10544 + C10537;
    const double C9197 = C532 * C30767;
    const double C19294 = C532 * C13237;
    const double C19291 = C532 * C13238;
    const double C9211 = C9208 * C30767;
    const double C20978 = C9208 * C13237;
    const double C152 = C31002 * C134;
    const double C331 = C31002 * C310;
    const double C13263 = C13236 * C310;
    const double C13833 = C13235 * C310;
    const double C511 = C31002 * C492;
    const double C13671 = C13235 * C492;
    const double C514 = C31002 * C493;
    const double C13975 = C13235 * C493;
    const double C927 = C31002 * C917;
    const double C13665 = C13236 * C917;
    const double C14191 = C13235 * C917;
    const double C10808 = C31002 * C1988;
    const double C10700 = C31002 * C2377;
    const double C15801 = C13236 * C2377;
    const double C30115 = C30114 + C30112;
    const double C335 = C114 * C302;
    const double C13265 = C13242 * C302;
    const double C150 = C113 * C120;
    const double C332 = C113 * C291;
    const double C645 = C113 * C292;
    const double C515 = C113 * C474;
    const double C754 = C113 * C475;
    const double C928 = C113 * C908;
    const double C30169 = C30093 + C30167;
    const double C30270 = ae * C30269;
    const double C30467 = C30459 + C30233;
    const double C30235 = C30234 + C30228;
    const double C30284 = ae * C30283;
    const double C2374 = (2 * C30272 + C30156 * C30283) / C29968;
    const double C10237 = C113 * C5635;
    const double C30360 = ae * C30357;
    const double C30359 = C30015 * C30357;
    const double C30374 = 3 * C30357;
    const double C30420 = C30357 * C30265;
    const double C30431 = C30156 * C30357;
    const double C30532 = C30530 + C30531;
    const double C30518 = C30511 + C30437;
    const double C309 = (C30029 + C30038 * C30034 + C30096 + C30096 +
                         C30015 * (2 * ae * C30093 + C30015 * C30048)) /
                        C29975;
    const double C327 = C114 * C299;
    const double C4722 = C4712 * C299;
    const double C13462 = C13242 * C299;
    const double C926 = C114 * C912;
    const double C13664 = C13242 * C912;
    const double C1286 = C114 * C1267;
    const double C13667 = C13242 * C1267;
    const double C162 = C157 + C148;
    const double C347 = C341 + C330;
    const double C529 = C523 + C510;
    const double C530 = C524 + C513;
    const double C2269 = C2267 + C1991;
    const double C30182 = C30181 + C30178;
    const double C1280 =
        (C30156 * C30173 + C30273 + C30273 +
         C30015 * (2 * ae * C30156 * C30099 + C30015 * C30156 * C30050)) /
        C29975;
    const double C2152 = C2148 + C1287;
    const double C2272 = C2270 + C2265;
    const double C30356 = C30343 + C30353;
    const double C30214 = ae * C30212;
    const double C30213 = C30015 * C30212;
    const double C30305 = C30156 * C30212;
    const double C30336 = 3 * C30212;
    const double C1273 = (C30193 + C30212 * C30265) / C29968;
    const double C1282 = (C30029 + C30038 * C30265 + C30280 + C30280 +
                          C30015 * (2 * ae * (C30080 + C30089 * C30265) +
                                    C30015 * (C30038 + C30046 * C30265))) /
                         C29975;
    const double C2380 = C114 * C2373;
    const double C15458 = C13242 * C2373;
    const double C10545 = C10543 + C10539;
    const double C30062 = C30054 + C30061;
    const double C30253 = C30249 + C30243;
    const double C1989 =
        (3 * (C30048 + C30060 * C30265) +
         C30156 * (2 * C30316 +
                   C30156 * (C30060 +
                             (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034) *
                                 C30265))) /
        C29975;
    const double C2378 =
        (2 * ae * (2 * C30156 * C30109 + C30156 * (C30109 + C30131 * C30265)) +
         C30015 * (2 * C30316 +
                   C30156 * (C30060 +
                             (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034) *
                                 C30265))) /
        C29975;
    const double C2147 = C31002 * C1276;
    const double C13668 = C13236 * C1276;
    const double C2263 = C31002 * C1984;
    const double C30397 = C30383 + C30394;
    const double C30457 = C30456 + C30452;
    const double C30563 = C30558 + C30559;
    const double C10916 = C31002 * C6302;
    const double C26517 = C13236 * C6302;
    const double C30478 = C30015 * C30474;
    const double C30509 = C30508 + C30504;
    const double C10697 =
        (2 * ae *
             (3 * (C30099 + C30120 * C30265) +
              C30156 * (2 * C30498 + C30156 * (C30120 + C30464 * C30265))) +
         C30015 * (3 * C30547 +
                   C30156 * (2 * C30499 +
                             C30156 * (C30461 + C30022 *
                                                    (C30052 * C30053 +
                                                     C30019 * bs[8] *
                                                         std::pow(C30013, 8)) *
                                                    C30018 * C30265)))) /
        C29975;
    const double C10805 =
        (4 * (2 * C30310 + C30156 * C30547) +
         C30156 * (3 * C30547 +
                   C30156 * (2 * C30499 +
                             C30156 * (C30461 + C30022 *
                                                    (C30052 * C30053 +
                                                     C30019 * bs[8] *
                                                         std::pow(C30013, 8)) *
                                                    C30018 * C30265)))) /
        C29975;
    const double C30527 = C30015 * C30526;
    const double C30139 = C30119 + C30137;
    const double C30293 = C30290 + C30291;
    const double C2266 = C114 * C2259;
    const double C30257 = C30109 + C30254;
    const double C30287 = C30165 + C30286;
    const double C30320 = ae * C30318;
    const double C30404 = ae * C30398;
    const double C30402 = C30015 * C30398;
    const double C30444 = C30398 * C30265;
    const double C30516 = C30156 * C30398;
    const double C30539 = C30537 + C30538;
    const double C30486 = C30484 + C30476;
    const double C30551 = ae * C30549;
    const double C30554 = C30156 * C30549;
    const double C30138 = C30136 * ae;
    const double C121 = 5 * (3 * C30090 + C30022 * C30110) +
                        C30022 * (4 * C30110 + C30022 * C30136);
    const double C293 = 3 * C30090 + C30022 * C30110 + C30136 * C30019;
    const double C476 = 3 * C30090 + C30022 * C30110 + C30136 * C30265;
    const double C641 = C30015 * (4 * C30110 + C30022 * C30136);
    const double C750 = C30156 * (4 * C30110 + C30022 * C30136);
    const double C909 = C30156 * C30015 * C30136;
    const double C30407 = C30403 * ae;
    const double C5514 = 5 * (3 * C30206 + C30015 * C30355) +
                         C30015 * (4 * C30355 + C30015 * C30403);
    const double C5637 = 3 * C30206 + C30015 * C30355 + C30403 * C30265;
    const double C6007 = C30156 * (4 * C30355 + C30015 * C30403);
    const double C31082 = C31047 / C30782;
    const double C31115 = C31086 / C30786;
    const double C31116 = C31088 + C31055;
    const double C639 = C31055 - C30803 / C30800;
    const double C31085 = C31051 / C30782;
    const double C31098 = C31065 / C30782;
    const double C31122 = C31101 / C30786;
    const double C31123 = C31102 + C31069;
    const double C1394 = C31069 - C30883 / C30800;
    const double C31100 = C31066 / C30782;
    const double C31104 = C31071 / C30782;
    const double C31125 = C31107 / C30786;
    const double C31126 = C31108 + C31075;
    const double C2256 = C31075 - C30925 / C30800;
    const double C31106 = C31072 / C30782;
    const double C29992 = C29966 * C29984;
    const double C4707 =
        (ae * -2 * C29974) / (C29975 * 2 * C29968) +
        (((C29966 * ((-4 * C29978) / C29968 - (C29966 * C29984) / C29968) *
           ae) /
              C29968 +
          2 * ((C29983 * ae) / C29968 - C29974 / C29979)) *
         ae) /
            C29968 -
        C29984 / C29979;
    const double C4711 = (-C29984 / C29968) / (4 * C29975);
    const double C13241 = (-C29984 / C29968) / (2 * C29968);
    const double C4726 = C4708 * C126;
    const double C4725 = C4708 * C125;
    const double C4720 = C4708 * C124;
    const double C4719 = C4708 * C123;
    const double C4714 = C4708 * C122;
    const double C4854 = C4708 * C299;
    const double C4853 = C4708 * C294;
    const double C4850 = C4708 * C298;
    const double C4845 = C4708 * C295;
    const double C4842 = C4708 * C297;
    const double C4841 = C4708 * C296;
    const double C4982 = C4708 * C482;
    const double C4981 = C4708 * C477;
    const double C4978 = C4708 * C481;
    const double C4973 = C4708 * C478;
    const double C4970 = C4708 * C480;
    const double C4969 = C4708 * C479;
    const double C5083 = C4708 * C300;
    const double C5184 = C4708 * C483;
    const double C5339 = C4708 * C912;
    const double C5338 = C4708 * C911;
    const double C5333 = C4708 * C910;
    const double C5647 = C4708 * C1269;
    const double C6308 = C4708 * C1981;
    const double C6307 = C4708 * C1980;
    const double C6460 = C4708 * C1268;
    const double C6564 = C4708 * C1979;
    const double C6668 = C4708 * C2373;
    const double C4727 = C4710 * C302;
    const double C4724 = C4710 * C300;
    const double C4721 = C4710 * C294;
    const double C4718 = C4710 * C295;
    const double C4715 = C4710 * C296;
    const double C4852 = C4710 * C299;
    const double C4846 = C4710 * C298;
    const double C4840 = C4710 * C297;
    const double C4983 = C4710 * C1267;
    const double C4980 = C4710 * C912;
    const double C4977 = C4710 * C1268;
    const double C4974 = C4710 * C911;
    const double C4971 = C4710 * C1269;
    const double C4968 = C4710 * C910;
    const double C6306 = C4710 * C2373;
    const double C13270 = C13240 * C127;
    const double C13268 = C13240 * C126;
    const double C13259 = C13240 * C125;
    const double C13256 = C13240 * C124;
    const double C13247 = C13240 * C123;
    const double C13244 = C13240 * C122;
    const double C13471 = C13240 * C300;
    const double C13468 = C13240 * C299;
    const double C13459 = C13240 * C294;
    const double C13453 = C13240 * C298;
    const double C13450 = C13240 * C297;
    const double C13449 = C13240 * C296;
    const double C13446 = C13240 * C295;
    const double C13674 = C13240 * C484;
    const double C13673 = C13240 * C483;
    const double C13670 = C13240 * C482;
    const double C13661 = C13240 * C477;
    const double C13655 = C13240 * C481;
    const double C13652 = C13240 * C480;
    const double C13651 = C13240 * C479;
    const double C13648 = C13240 * C478;
    const double C13834 = C13240 * C302;
    const double C13976 = C13240 * C485;
    const double C14190 = C13240 * C912;
    const double C14181 = C13240 * C911;
    const double C14178 = C13240 * C910;
    const double C14591 = C13240 * C1269;
    const double C14589 = C13240 * C1268;
    const double C15462 = C13240 * C1982;
    const double C15460 = C13240 * C1981;
    const double C15459 = C13240 * C1980;
    const double C15457 = C13240 * C1979;
    const double C15662 = C13240 * C1267;
    const double C15804 = C13240 * C1978;
    const double C15942 = C13240 * C2373;
    const double C26520 = C13240 * C10531;
    const double C345 = C339 + C324;
    const double C935 = C932 + C923;
    const double C9195 = C534 * C30767;
    const double C19292 = C534 * C13237;
    const double C19288 = C534 * C13238;
    const double C1138 =
        (2 * (2 * ae * C30072 + C30015 * C30029) + C30194 + C30194 +
         C30015 * (C30029 + C30191 + C30191 +
                   C30015 * (2 * ae * C30080 + C30015 * C30038))) /
        C29975;
    const double C1145 = C114 * C1132;
    const double C4843 = C4710 * C1132;
    const double C4839 = C4712 * C1132;
    const double C5522 = C4708 * C1132;
    const double C13451 = C13242 * C1132;
    const double C14437 = C13240 * C1132;
    const double C1291 = C114 * C1272;
    const double C4967 = C4712 * C1272;
    const double C5334 = C4710 * C1272;
    const double C5650 = C4708 * C1272;
    const double C14179 = C13242 * C1272;
    const double C14595 = C13240 * C1272;
    const double C9568 = C9566 + C9557;
    const double C9569 = C9567 + C9559;
    const double C10548 = C10546 * C30767;
    const double C20981 = C10546 * C13237;
    const double C10812 = C10811 + C10808;
    const double C30116 = ae * C30115;
    const double C301 = (2 * C30082 + C30022 * C30093 + C30015 * C30115 +
                         C30015 * C30110 * ae) /
                        C29968;
    const double C913 = (C30156 * C30115) / C29968;
    const double C158 = C150 + C151;
    const double C648 = C645 + C335;
    const double C525 = C515 + C516;
    const double C757 = C754 + C518;
    const double C30170 = C30169 + C30166;
    const double C1279 =
        (C30156 * C30048 + C30270 + C30270 +
         C30015 * (2 * ae * C30156 * C30109 + C30015 * C30156 * C30060)) /
        C29975;
    const double C30237 = ae * C30235;
    const double C30236 = C30015 * C30235;
    const double C30311 = C30156 * C30235;
    const double C30462 = 3 * C30235;
    const double C1283 =
        (C30173 + C30050 * C30265 + C30284 + C30284 +
         C30015 * (2 * ae * (C30099 + C30120 * C30265) +
                   C30015 * (C30050 + C30022 * C30058 * C30265))) /
        C29975;
    const double C2381 = C114 * C2374;
    const double C6565 = C4710 * C2374;
    const double C15456 = C13242 * C2374;
    const double C15944 = C13240 * C2374;
    const double C30382 = C30369 + C30360;
    const double C30361 = C30337 + C30359;
    const double C30423 = C30212 + C30420;
    const double C30436 = ae * C30431;
    const double C30560 = 2 * C30431;
    const double C30533 = ae * C30532;
    const double C6299 = (3 * C30279 + C30156 * C30532) / C29968;
    const double C328 = C31002 * C309;
    const double C13469 = C13235 * C309;
    const double C13463 = C13236 * C309;
    const double C340 = C326 + C327;
    const double C933 = C925 + C926;
    const double C2151 = C2146 + C1286;
    const double C167 = C162 + C149;
    const double C353 = C347 + C331;
    const double C535 = C529 + C511;
    const double C536 = C530 + C514;
    const double C30183 = ae * C30182;
    const double C1131 =
        (2 * C30084 + C30015 * C30182 + (C30079 + C30101 * C30019) * ae) /
        C29968;
    const double C1271 = (C30156 * C30182) / C29968;
    const double C1274 = (C30182 + C30235 * C30265) / C29968;
    const double C1565 = C31002 * C1280;
    const double C14185 = C13236 * C1280;
    const double C14939 = C13235 * C1280;
    const double C2154 = C2152 + C1287;
    const double C9196 = C2272 * C30767;
    const double C20979 = C2272 * C13238;
    const double C21309 = C2272 * C13237;
    const double C30215 = C30198 + C30213;
    const double C30307 = ae * C30305;
    const double C1292 = C114 * C1273;
    const double C4972 = C4712 * C1273;
    const double C5651 = C4708 * C1273;
    const double C5646 = C4710 * C1273;
    const double C14596 = C13240 * C1273;
    const double C14590 = C13242 * C1273;
    const double C9863 = C31002 * C1282;
    const double C25651 = C13235 * C1282;
    const double C25643 = C13236 * C1282;
    const double C9868 = C9857 + C2380;
    const double C135 =
        (5 * (3 * C30048 + C30022 * C30062) +
         C30022 *
             (4 * C30062 +
              C30022 * (3 * C30060 +
                        C30022 * (2 * C30022 * C30058 +
                                  C30022 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30034))))) /
        C29975;
    const double C312 = (2 * ae * (3 * C30093 + C30022 * C30113) +
                         C30015 * (3 * C30048 + C30022 * C30062)) /
                        C29975;
    const double C494 = (2 * C30022 * C30038 + C30022 * C30048 +
                         C30062 * std::pow(zP - zQ, 2)) /
                        C29975;
    const double C495 = ((zP - zQ) * (3 * C30048 + C30022 * C30062)) / C29975;
    const double C496 =
        (3 * C30048 + C30022 * C30062 +
         (3 * C30060 +
          C30022 * (2 * C30022 * C30058 +
                    C30022 * (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034))) *
             std::pow(zP - zQ, 2)) /
        C29975;
    const double C752 =
        ((zP - zQ) *
         (4 * C30062 +
          C30022 * (3 * C30060 +
                    C30022 * (2 * C30022 * C30058 +
                              C30022 * (C30058 +
                                        (C30052 * C30053 +
                                         C30019 * bs[8] * std::pow(C30013, 8)) *
                                            C30018 * C30034))))) /
        C29975;
    const double C918 =
        (2 * ae * C30156 * C30113 + C30015 * C30156 * C30062) / C29975;
    const double C2144 =
        (2 * ae * (C30113 + C30135 * C30265) +
         C30015 * (C30062 +
                   (2 * C30022 * C30058 +
                    C30022 * (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034)) *
                       C30265)) /
        C29975;
    const double C2260 =
        (2 * C30156 * C30062 +
         C30156 * (C30062 +
                   (2 * C30022 * C30058 +
                    C30022 * (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034)) *
                       C30265)) /
        C29975;
    const double C2271 = C2269 + C2263;
    const double C30401 = C30015 * C30397;
    const double C10533 = (4 * (2 * C30304 + C30156 * C30422) +
                           C30156 * (3 * C30422 + C30156 * C30563)) /
                          C29975;
    const double C10534 =
        (5 * (3 * C30422 + C30156 * C30563) +
         C30156 *
             (4 * C30563 +
              C30156 * (3 * C30447 +
                        C30156 * (2 * C30513 +
                                  C30156 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30265))))) /
        C29975;
    const double C10913 =
        (2 * ae *
             (4 * (2 * C30428 + C30156 * C30446) +
              C30156 * (3 * C30446 +
                        C30156 * (2 * C30512 +
                                  C30156 * (C30104 + C30126 * C30265)))) +
         C30015 *
             (4 * C30563 +
              C30156 * (3 * C30447 +
                        C30156 * (2 * C30513 +
                                  C30156 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30265))))) /
        C29975;
    const double C30483 = C30467 + C30478;
    const double C30528 = C30518 + C30527;
    const double C30140 = C30015 * C30139;
    const double C643 =
        (2 * ae * (4 * C30113 + C30022 * C30139) +
         C30015 *
             (4 * C30062 +
              C30022 * (3 * C30060 +
                        C30022 * (2 * C30022 * C30058 +
                                  C30022 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30034))))) /
        C29975;
    const double C919 =
        (2 * ae * C30156 * C30139 +
         C30015 * C30156 *
             (3 * C30060 +
              C30022 *
                  (2 * C30022 * C30058 +
                   C30022 * (C30058 + (C30052 * C30053 +
                                       C30019 * bs[8] * std::pow(C30013, 8)) *
                                          C30018 * C30034)))) /
        C29975;
    const double C128 = (5 * (3 * C30093 + C30022 * C30113) +
                         C30022 * (4 * C30113 + C30022 * C30139)) /
                        C29968;
    const double C486 =
        (3 * C30093 + C30022 * C30113 + C30139 * C30265) / C29968;
    const double C642 = (C30015 * (4 * C30113 + C30022 * C30139) +
                         (4 * C30110 + C30022 * C30136) * ae) /
                        C29968;
    const double C751 = (C30156 * (4 * C30113 + C30022 * C30139)) / C29968;
    const double C30296 = ae * C30293;
    const double C30295 = C30015 * C30293;
    const double C30301 = C30156 * C30293;
    const double C2143 = (C30115 + C30293 * C30265) / C29968;
    const double C30258 = C30257 + C30251;
    const double C30288 = ae * C30287;
    const double C2375 = (2 * C30269 + C30156 * C30287) / C29968;
    const double C30406 = C30375 + C30402;
    const double C30449 = C30357 + C30444;
    const double C30523 = ae * C30516;
    const double C30540 = C30156 * C30539;
    const double C30562 = ae * C30539;
    const double C30489 = ae * C30486;
    const double C30488 = C30015 * C30486;
    const double C30501 = C30156 * C30486;
    const double C30545 = C30486 * C30265;
    const double C30555 = C30553 + C30554;
    const double C31136 = C31082 + C31128;
    const double C638 = C31115 - (C30805 * C30787) / C30782;
    const double C111 = C31116 / C30786 - C30803 / C31089;
    const double C31129 = C31085 + C31115;
    const double C31137 = C31098 + C31132;
    const double C1393 = C31122 - (C30885 * C30874) / C30782;
    const double C1121 = C31123 / C30786 - C30883 / C31089;
    const double C31133 = C31100 + C31122;
    const double C31138 = C31104 + C31134;
    const double C2255 = C31125 - (C30927 * C30916) / C30782;
    const double C1970 = C31126 / C30786 - C30925 / C31089;
    const double C31135 = C31106 + C31125;
    const double C4709 =
        (((-4 * C29978) / C29968 - C29992 / C29968) * ae) / C29979 +
        ((2 * ((0 * ae) / C29968 - C29978 / C29975) - C29992 / C29979) * ae) /
            C29968;
    const double C13239 =
        (((-4 * C29978) / C29968 - C29992 / C29968) * ae) / C29968;
    const double C13264 = C13241 * C292;
    const double C13261 = C13241 * C290;
    const double C13252 = C13241 * C284;
    const double C13249 = C13241 * C285;
    const double C13464 = C13241 * C1124;
    const double C13461 = C13241 * C289;
    const double C13455 = C13241 * C1125;
    const double C13442 = C13241 * C288;
    const double C13666 = C13241 * C1258;
    const double C13663 = C13241 * C907;
    const double C13657 = C13241 * C1259;
    const double C13644 = C13241 * C906;
    const double C13830 = C13241 * C291;
    const double C13972 = C13241 * C908;
    const double C14186 = C13241 * C1261;
    const double C14183 = C13241 * C1262;
    const double C14730 = C13241 * C1128;
    const double C14936 = C13241 * C1671;
    const double C15658 = C13241 * C1265;
    const double C15800 = C13241 * C2371;
    const double C24784 = C13241 * C1260;
    const double C24782 = C13241 * C905;
    const double C25256 = C13241 * C1263;
    const double C25648 = C13241 * C5635;
    const double C25646 = C13241 * C1670;
    const double C25642 = C13241 * C1264;
    const double C26128 = C13241 * C5636;
    const double C26516 = C13241 * C6296;
    const double C26514 = C13241 * C2370;
    const double C26988 = C13241 * C6295;
    const double C351 = C345 + C325;
    const double C938 = C935 + C924;
    const double C9869 = C9860 + C1291;
    const double C9570 = C9568 * C30767;
    const double C19754 = C9568 * C13237;
    const double C9571 = C9569 * C30767;
    const double C20135 = C9569 * C13237;
    const double C10813 = C10812 * C30767;
    const double C20980 = C10812 * C13238;
    const double C311 =
        (2 * C30022 * C30038 + C30022 * C30048 + C30116 + C30116 +
         C30015 * (2 * ae * C30113 + C30015 * C30062)) /
        C29975;
    const double C333 = C114 * C301;
    const double C4723 = C4712 * C301;
    const double C5084 = C4710 * C301;
    const double C13472 = C13240 * C301;
    const double C13470 = C13242 * C301;
    const double C929 = C114 * C913;
    const double C5185 = C4710 * C913;
    const double C13672 = C13242 * C913;
    const double C14192 = C13240 * C913;
    const double C163 = C158 + C151;
    const double C649 = C648 + C335;
    const double C531 = C525 + C516;
    const double C758 = C757 + C518;
    const double C30171 = ae * C30170;
    const double C1130 =
        (2 * C30095 + C30015 * C30170 + (C30090 + C30106 * C30019) * ae) /
        C29968;
    const double C1270 = (C30156 * C30170) / C29968;
    const double C1563 = C31002 * C1279;
    const double C14188 = C13236 * C1279;
    const double C30238 = C30221 + C30236;
    const double C30313 = ae * C30311;
    const double C10131 = C31002 * C1283;
    const double C15659 = C13236 * C1283;
    const double C10702 = C10699 + C2381;
    const double C30388 = C30382 + C30360;
    const double C30362 = C30361 + C30350;
    const double C30425 = ae * C30423;
    const double C6298 = (2 * C30305 + C30156 * C30423) / C29968;
    const double C6301 = (2 * C30304 + C30156 * C30422 + C30533 + C30533 +
                          C30015 * (2 * ae * (2 * C30428 + C30156 * C30446) +
                                    C30015 * (2 * C30429 + C30156 * C30447))) /
                         C29975;
    const double C6309 = C4710 * C6299;
    const double C9859 = C114 * C6299;
    const double C15461 = C13242 * C6299;
    const double C26992 = C13240 * C6299;
    const double C346 = C340 + C327;
    const double C936 = C933 + C926;
    const double C2153 = C2151 + C1286;
    const double C9198 = C535 * C30767;
    const double C19297 = C535 * C13237;
    const double C19293 = C535 * C13238;
    const double C9408 = C536 * C30767;
    const double C19295 = C536 * C13238;
    const double C19558 = C536 * C13237;
    const double C1137 =
        (2 * (2 * ae * C30082 + C30015 * C30173) + C30183 + C30183 +
         C30015 * (C30173 + C30180 + C30180 +
                   C30015 * (2 * ae * C30099 + C30015 * C30050))) /
        C29975;
    const double C1144 = C114 * C1131;
    const double C4849 = C4710 * C1131;
    const double C4847 = C4712 * C1131;
    const double C5755 = C4708 * C1131;
    const double C13456 = C13242 * C1131;
    const double C14435 = C13240 * C1131;
    const double C1290 = C114 * C1271;
    const double C4975 = C4712 * C1271;
    const double C5337 = C4710 * C1271;
    const double C5907 = C4708 * C1271;
    const double C14184 = C13242 * C1271;
    const double C14593 = C13240 * C1271;
    const double C1293 = C114 * C1274;
    const double C4976 = C4712 * C1274;
    const double C6461 = C4710 * C1274;
    const double C14598 = C13240 * C1274;
    const double C14588 = C13242 * C1274;
    const double C2156 = C2154 + C2149;
    const double C30216 = C30215 + C30209;
    const double C1676 =
        (2 * (2 * ae * C30156 * C30080 + C30015 * C30304) + C30307 + C30307 +
         C30015 *
             (C30304 + C30308 + C30308 +
              C30015 * (2 * ae * C30156 * C30089 + C30015 * C30156 * C30046))) /
        C29975;
    const double C9870 = C9862 + C1292;
    const double C9872 = C9868 + C2380;
    const double C646 = C31002 * C312;
    const double C13266 = C13236 * C312;
    const double C517 = C31002 * C494;
    const double C755 = C31002 * C495;
    const double C930 = C31002 * C918;
    const double C13973 = C13236 * C918;
    const double C9199 = C2271 * C30767;
    const double C21308 = C2271 * C13238;
    const double C10540 = C31002 * C10533;
    const double C30141 = C30140 + C30138;
    const double C153 = C114 * C128;
    const double C519 = C114 * C486;
    const double C647 = C114 * C642;
    const double C13271 = C13242 * C642;
    const double C756 = C114 * C751;
    const double C30297 = C30113 + C30295;
    const double C30302 = ae * C30301;
    const double C2150 = C114 * C2143;
    const double C13675 = C13242 * C2143;
    const double C30260 = ae * C30258;
    const double C30259 = C30015 * C30258;
    const double C30317 = C30156 * C30258;
    const double C1275 = (C30170 + C30258 * C30265) / C29968;
    const double C1284 =
        (C30048 + C30060 * C30265 + C30288 + C30288 +
         C30015 * (2 * ae * (C30109 + C30131 * C30265) +
                   C30015 * (C30060 +
                             (C30058 + (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30034) *
                                 C30265))) /
        C29975;
    const double C2382 = C114 * C2375;
    const double C15805 = C13242 * C2375;
    const double C30408 = C30406 + C30391;
    const double C30454 = ae * C30449;
    const double C30561 = C30156 * C30449;
    const double C30541 = C30536 + C30540;
    const double C30490 = C30463 + C30488;
    const double C30506 = ae * C30501;
    const double C30548 = C30235 + C30545;
    const double C30556 = ae * C30555;
    const double C10696 = (3 * C30283 + C30156 * C30555) / C29968;
    const double C108 =
        (C31127 + 2 * C30796) / C30786 - (C31136 * C30787) / C30782;
    const double C109 =
        (C31114 + 2 * C30805 + C31136) / C30786 - (C31129 * C30787) / C30782;
    const double C110 = (C31087 + C30802 / C30782 + C31129) / C30786 -
                        (C31116 * C30787) / C30782;
    const double C1118 =
        (C31130 + 2 * C30878) / C30786 - (C31137 * C30874) / C30782;
    const double C1119 =
        (C31118 + 2 * C30885 + C31137) / C30786 - (C31133 * C30874) / C30782;
    const double C1120 = (C31093 + C30882 / C30782 + C31133) / C30786 -
                         (C31123 * C30874) / C30782;
    const double C1967 =
        (C31131 + 2 * C30920) / C30786 - (C31138 * C30916) / C30782;
    const double C1968 =
        (C31120 + 2 * C30927 + C31138) / C30786 - (C31135 * C30916) / C30782;
    const double C1969 = (C31096 + C30924 / C30782 + C31135) / C30786 -
                         (C31126 * C30916) / C30782;
    const double C13267 = C13239 * C119;
    const double C13258 = C13239 * C118;
    const double C13255 = C13239 * C117;
    const double C13246 = C13239 * C116;
    const double C13467 = C13239 * C289;
    const double C13458 = C13239 * C284;
    const double C13452 = C13239 * C288;
    const double C13445 = C13239 * C285;
    const double C13669 = C13239 * C472;
    const double C13660 = C13239 * C467;
    const double C13654 = C13239 * C471;
    const double C13647 = C13239 * C468;
    const double C13832 = C13239 * C290;
    const double C13974 = C13239 * C473;
    const double C14189 = C13239 * C907;
    const double C14180 = C13239 * C906;
    const double C14732 = C13239 * C1125;
    const double C14938 = C13239 * C1262;
    const double C15660 = C13239 * C1259;
    const double C15802 = C13239 * C1973;
    const double C24786 = C13239 * C470;
    const double C24780 = C13239 * C469;
    const double C25254 = C13239 * C905;
    const double C25650 = C13239 * C1264;
    const double C25644 = C13239 * C1263;
    const double C25640 = C13239 * C1260;
    const double C26126 = C13239 * C1670;
    const double C26518 = C13239 * C1975;
    const double C26512 = C13239 * C1974;
    const double C26990 = C13239 * C2370;
    const double C13278 = C13264 + C13265;
    const double C13277 = C13261 + C13262;
    const double C13274 = C13252 + C13253;
    const double C13273 = C13249 + C13250;
    const double C13479 = C13461 + C13462;
    const double C13474 = C13442 + C13443;
    const double C13682 = C13666 + C13667;
    const double C13681 = C13663 + C13664;
    const double C13679 = C13657 + C13658;
    const double C13676 = C13644 + C13645;
    const double C15806 = C15800 + C15456;
    const double C24790 = C24784 + C13653;
    const double C24789 = C24782 + C13650;
    const double C25259 = C25256 + C14179;
    const double C25655 = C25642 + C14590;
    const double C26523 = C26514 + C15458;
    const double C9560 = C938 * C30767;
    const double C19756 = C938 * C13237;
    const double C19755 = C938 * C13238;
    const double C9873 = C9869 + C1291;
    const double C334 = C31002 * C311;
    const double C13831 = C13236 * C311;
    const double C342 = C332 + C333;
    const double C13836 = C13830 + C13470;
    const double C934 = C928 + C929;
    const double C13978 = C13972 + C13672;
    const double C168 = C163 + C152;
    const double C1136 =
        (2 * (2 * ae * C30093 + C30015 * C30048) + C30171 + C30171 +
         C30015 * (C30048 + C30168 + C30168 +
                   C30015 * (2 * ae * C30109 + C30015 * C30060))) /
        C29975;
    const double C1143 = C114 * C1130;
    const double C4855 = C4710 * C1130;
    const double C4851 = C4712 * C1130;
    const double C13465 = C13242 * C1130;
    const double C14734 = C13240 * C1130;
    const double C1289 = C114 * C1270;
    const double C4979 = C4712 * C1270;
    const double C5340 = C4710 * C1270;
    const double C14187 = C13242 * C1270;
    const double C14940 = C13240 * C1270;
    const double C30239 = C30238 + C30232;
    const double C1677 =
        (2 * (2 * ae * C30156 * C30099 + C30015 * C30310) + C30313 + C30313 +
         C30015 * (C30310 + C30314 + C30314 +
                   C30015 * (2 * ae * C30156 * C30120 +
                             C30015 * C30156 * C30022 * C30058))) /
        C29975;
    const double C10703 = C10702 + C2381;
    const double C30405 = C30388 + C30401;
    const double C30364 = ae * C30362;
    const double C30363 = C30015 * C30362;
    const double C30373 = 4 * C30362;
    const double C30430 = C30156 * C30362;
    const double C5641 =
        (2 * (2 * ae * (C30080 + C30089 * C30265) + C30015 * C30422) + C30425 +
         C30425 +
         C30015 * (C30422 + C30426 + C30426 +
                   C30015 * (2 * ae * (C30089 + C30104 * C30265) +
                             C30015 * (C30046 + C30058 * C30265)))) /
        C29975;
    const double C6305 = C4712 * C6298;
    const double C6669 = C4710 * C6298;
    const double C9865 = C114 * C6298;
    const double C15943 = C13242 * C6298;
    const double C25652 = C13240 * C6298;
    const double C9866 = C31002 * C6301;
    const double C26989 = C13236 * C6301;
    const double C10918 = C10915 + C9859;
    const double C26524 = C26516 + C15461;
    const double C352 = C346 + C328;
    const double C939 = C936 + C927;
    const double C2155 = C2153 + C2147;
    const double C1405 = C31002 * C1137;
    const double C13457 = C13236 * C1137;
    const double C14733 = C13235 * C1137;
    const double C1408 = C1404 + C1144;
    const double C13477 = C13455 + C13456;
    const double C1568 = C1564 + C1290;
    const double C14195 = C14183 + C14184;
    const double C10133 = C10130 + C1293;
    const double C15664 = C15658 + C14588;
    const double C9561 = C2156 * C30767;
    const double C20136 = C2156 * C13238;
    const double C21177 = C2156 * C13237;
    const double C30217 = ae * C30216;
    const double C1133 =
        (3 * C30193 + C30015 * C30216 + (2 * C30187 + C30015 * C30206) * ae) /
        C29968;
    const double C1673 = (C30156 * C30216) / C29968;
    const double C5638 = (C30216 + C30362 * C30265) / C29968;
    const double C10236 = C31002 * C1676;
    const double C25647 = C13236 * C1676;
    const double C26127 = C13235 * C1676;
    const double C9874 = C9870 + C1292;
    const double C9876 = C9872 + C9858;
    const double C650 = C649 + C646;
    const double C537 = C531 + C517;
    const double C759 = C758 + C755;
    const double C10547 = C10545 + C10540;
    const double C30142 = ae * C30141;
    const double C303 = (3 * C30093 + C30022 * C30113 + C30015 * C30141 +
                         C30015 * C30136 * ae) /
                        C29968;
    const double C914 = (C30156 * C30141) / C29968;
    const double C30298 = C30297 + C30294;
    const double C1560 =
        (C30156 * C30062 + C30302 + C30302 +
         C30015 *
             (2 * ae * C30156 * C30135 +
              C30015 * C30156 *
                  (2 * C30022 * C30058 +
                   C30022 * (C30058 + (C30052 * C30053 +
                                       C30019 * bs[8] * std::pow(C30013, 8)) *
                                          C30018 * C30034)))) /
        C29975;
    const double C30261 = C30244 + C30259;
    const double C30319 = ae * C30317;
    const double C1294 = C114 * C1275;
    const double C4984 = C4712 * C1275;
    const double C15663 = C13242 * C1275;
    const double C30410 = ae * C30408;
    const double C30409 = C30015 * C30408;
    const double C30443 = C30408 * C30265;
    const double C30515 = C30156 * C30408;
    const double C30564 = C30560 + C30561;
    const double C30542 = ae * C30541;
    const double C10912 = (4 * C30532 + C30156 * C30541) / C29968;
    const double C30491 = C30490 + C30480;
    const double C30550 = ae * C30548;
    const double C6561 = (2 * C30311 + C30156 * C30548) / C29968;
    const double C6562 =
        (2 * C30310 + C30156 * C30547 + C30556 + C30556 +
         C30015 * (2 * ae * (2 * C30498 + C30156 * (C30120 + C30464 * C30265)) +
                   C30015 * (2 * C30499 +
                             C30156 * (C30461 + C30022 *
                                                    (C30052 * C30053 +
                                                     C30019 * bs[8] *
                                                         std::pow(C30013, 8)) *
                                                    C30018 * C30265)))) /
        C29975;
    const double C10701 = C114 * C10696;
    const double C15463 = C13242 * C10696;
    const double C13279 = C13267 + C13268;
    const double C13276 = C13258 + C13259;
    const double C13275 = C13255 + C13256;
    const double C13272 = C13246 + C13247;
    const double C13481 = C13467 + C13468;
    const double C13478 = C13458 + C13459;
    const double C13476 = C13452 + C13453;
    const double C13475 = C13445 + C13446;
    const double C13683 = C13669 + C13670;
    const double C13680 = C13660 + C13661;
    const double C13678 = C13654 + C13655;
    const double C13677 = C13647 + C13648;
    const double C13837 = C13832 + C13471;
    const double C13979 = C13974 + C13673;
    const double C14197 = C14189 + C14190;
    const double C14194 = C14180 + C14181;
    const double C14737 = C14732 + C14435;
    const double C14943 = C14938 + C14593;
    const double C15665 = C15660 + C14589;
    const double C15807 = C15802 + C15457;
    const double C24791 = C24786 + C13652;
    const double C24788 = C24780 + C13651;
    const double C25258 = C25254 + C14178;
    const double C25659 = C25650 + C14596;
    const double C25656 = C25644 + C14595;
    const double C25654 = C25640 + C14591;
    const double C26525 = C26518 + C15460;
    const double C26522 = C26512 + C15459;
    const double C26995 = C26990 + C15942;
    const double C13286 = C13278 + C13265;
    const double C13285 = C13277 + C13262;
    const double C13282 = C13274 + C13253;
    const double C13281 = C13273 + C13250;
    const double C13487 = C13479 + C13462;
    const double C13482 = C13474 + C13443;
    const double C13690 = C13682 + C13667;
    const double C13689 = C13681 + C13664;
    const double C13687 = C13679 + C13658;
    const double C13684 = C13676 + C13645;
    const double C15808 = C15806 + C15456;
    const double C24794 = C24790 + C13653;
    const double C24793 = C24789 + C13650;
    const double C25261 = C25259 + C14179;
    const double C25661 = C25655 + C14590;
    const double C26527 = C26523 + C15458;
    const double C9877 = C9873 + C9861;
    const double C348 = C342 + C333;
    const double C13838 = C13836 + C13470;
    const double C937 = C934 + C929;
    const double C13980 = C13978 + C13672;
    const double C1403 = C31002 * C1136;
    const double C13466 = C13236 * C1136;
    const double C1407 = C1402 + C1143;
    const double C13480 = C13464 + C13465;
    const double C1567 = C1562 + C1289;
    const double C14196 = C14186 + C14187;
    const double C30240 = ae * C30239;
    const double C1134 =
        (3 * C30182 + C30015 * C30239 + (2 * C30176 + C30015 * C30229) * ae) /
        C29968;
    const double C1674 = (C30156 * C30239) / C29968;
    const double C14937 = C13236 * C1677;
    const double C20272 = C31002 * C1677;
    const double C10704 = C10703 + C10700;
    const double C30365 = C30336 + C30363;
    const double C30435 = ae * C30430;
    const double C10238 = C31002 * C5641;
    const double C25649 = C13236 * C5641;
    const double C9871 = C9864 + C9865;
    const double C26994 = C26988 + C15943;
    const double C10919 = C10918 + C9859;
    const double C26528 = C26524 + C15461;
    const double C9562 = C939 * C30767;
    const double C19758 = C939 * C13237;
    const double C19757 = C939 * C13238;
    const double C9563 = C2155 * C30767;
    const double C21176 = C2155 * C13238;
    const double C1410 = C1408 + C1144;
    const double C13485 = C13477 + C13456;
    const double C1570 = C1568 + C1290;
    const double C14199 = C14195 + C14184;
    const double C10134 = C10133 + C1293;
    const double C15666 = C15664 + C14588;
    const double C1139 =
        (3 * (C30029 + C30191 + C30191 + C30015 * C30207) + C30217 + C30217 +
         C30015 * (2 * C30207 + C30214 + C30214 +
                   C30015 * (C30038 + C30210 + C30210 +
                             C30015 * (2 * ae * C30089 + C30015 * C30046)))) /
        C29975;
    const double C1146 = C114 * C1133;
    const double C4844 = C4712 * C1133;
    const double C5523 = C4708 * C1133;
    const double C5521 = C4710 * C1133;
    const double C14438 = C13240 * C1133;
    const double C14436 = C13242 * C1133;
    const double C1680 = C114 * C1673;
    const double C5335 = C4712 * C1673;
    const double C5649 = C4710 * C1673;
    const double C6011 = C4708 * C1673;
    const double C14594 = C13242 * C1673;
    const double C15078 = C13240 * C1673;
    const double C5652 = C4710 * C5638;
    const double C5645 = C4712 * C5638;
    const double C9744 = C114 * C5638;
    const double C14597 = C13242 * C5638;
    const double C26130 = C13240 * C5638;
    const double C9878 = C9874 + C9863;
    const double C9880 = C9876 * C30767;
    const double C21441 = C9876 * C13237;
    const double C9409 = C537 * C30767;
    const double C19296 = C537 * C13238;
    const double C19559 = C759 * C13238;
    const double C10549 = C10547 * C30767;
    const double C313 =
        (3 * C30048 + C30022 * C30062 + C30142 + C30142 +
         C30015 *
             (2 * ae * C30139 +
              C30015 * (3 * C30060 +
                        C30022 * (2 * C30022 * C30058 +
                                  C30022 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30034))))) /
        C29975;
    const double C336 = C114 * C303;
    const double C4728 = C4712 * C303;
    const double C13835 = C13242 * C303;
    const double C931 = C114 * C914;
    const double C13977 = C13242 * C914;
    const double C30299 = ae * C30298;
    const double C1399 =
        (2 * C30115 + C30015 * C30298 + (C30110 + C30132 * C30019) * ae) /
        C29968;
    const double C1559 = (C30156 * C30298) / C29968;
    const double C30262 = C30261 + C30255;
    const double C1678 =
        (2 * (2 * ae * C30156 * C30109 + C30015 * C30316) + C30319 + C30319 +
         C30015 *
             (C30316 + C30320 + C30320 +
              C30015 * (2 * ae * C30156 * C30131 +
                        C30015 * C30156 *
                            (C30058 + (C30052 * C30053 +
                                       C30019 * bs[8] * std::pow(C30013, 8)) *
                                          C30018 * C30034)))) /
        C29975;
    const double C30411 = C30374 + C30409;
    const double C30448 = C30362 + C30443;
    const double C30522 = ae * C30515;
    const double C30565 = ae * C30564;
    const double C6300 = (3 * C30423 + C30156 * C30564) / C29968;
    const double C6303 =
        (3 * C30422 + C30156 * (2 * C30429 + C30156 * C30447) + C30542 +
         C30542 +
         C30015 *
             (2 * ae *
                  (3 * C30446 +
                   C30156 *
                       (2 * C30512 + C30156 * (C30104 + C30126 * C30265))) +
              C30015 * (3 * C30447 +
                        C30156 * (2 * C30513 +
                                  C30156 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30265))))) /
        C29975;
    const double C10917 = C114 * C10912;
    const double C26521 = C13242 * C10912;
    const double C30493 = ae * C30491;
    const double C30492 = C30015 * C30491;
    const double C30500 = C30156 * C30491;
    const double C6457 = (C30239 + C30491 * C30265) / C29968;
    const double C6458 =
        (2 * (2 * ae * (C30099 + C30120 * C30265) + C30015 * C30547) + C30550 +
         C30550 +
         C30015 * (C30547 + C30551 + C30551 +
                   C30015 * (2 * ae * (C30120 + C30464 * C30265) +
                             C30015 * (C30461 + C30022 *
                                                    (C30052 * C30053 +
                                                     C30019 * bs[8] *
                                                         std::pow(C30013, 8)) *
                                                    C30018 * C30265)))) /
        C29975;
    const double C6566 = C4712 * C6561;
    const double C10132 = C114 * C6561;
    const double C15945 = C13242 * C6561;
    const double C13287 = C13279 + C13268;
    const double C13284 = C13276 + C13259;
    const double C13283 = C13275 + C13256;
    const double C13280 = C13272 + C13247;
    const double C13489 = C13481 + C13468;
    const double C13486 = C13478 + C13459;
    const double C13484 = C13476 + C13453;
    const double C13483 = C13475 + C13446;
    const double C13691 = C13683 + C13670;
    const double C13688 = C13680 + C13661;
    const double C13686 = C13678 + C13655;
    const double C13685 = C13677 + C13648;
    const double C13839 = C13837 + C13471;
    const double C13981 = C13979 + C13673;
    const double C14201 = C14197 + C14190;
    const double C14198 = C14194 + C14181;
    const double C14739 = C14737 + C14435;
    const double C14945 = C14943 + C14593;
    const double C15667 = C15665 + C14589;
    const double C15809 = C15807 + C15457;
    const double C24795 = C24791 + C13652;
    const double C24792 = C24788 + C13651;
    const double C25260 = C25258 + C14178;
    const double C25665 = C25659 + C14596;
    const double C25662 = C25656 + C14595;
    const double C25660 = C25654 + C14591;
    const double C26529 = C26525 + C15460;
    const double C26526 = C26522 + C15459;
    const double C26997 = C26995 + C15942;
    const double C13294 = C13286 + C13266;
    const double C13293 = C13285 + C13263;
    const double C13290 = C13282 + C13254;
    const double C13289 = C13281 + C13251;
    const double C13495 = C13487 + C13463;
    const double C13490 = C13482 + C13444;
    const double C13698 = C13690 + C13668;
    const double C13697 = C13689 + C13665;
    const double C13695 = C13687 + C13659;
    const double C13692 = C13684 + C13646;
    const double C15810 = C15808 + C15801;
    const double C24798 = C24794 + C24785;
    const double C24797 = C24793 + C24783;
    const double C25263 = C25261 + C25257;
    const double C25667 = C25661 + C25643;
    const double C26531 = C26527 + C26515;
    const double C9881 = C9877 * C30767;
    const double C20137 = C9877 * C13237;
    const double C354 = C348 + C334;
    const double C13840 = C13838 + C13831;
    const double C940 = C937 + C930;
    const double C13982 = C13980 + C13973;
    const double C1409 = C1407 + C1143;
    const double C13488 = C13480 + C13465;
    const double C1569 = C1567 + C1289;
    const double C14200 = C14196 + C14187;
    const double C1140 =
        (3 * (C30173 + C30180 + C30180 + C30015 * C30230) + C30240 + C30240 +
         C30015 * (2 * C30230 + C30237 + C30237 +
                   C30015 * (C30050 + C30233 + C30233 +
                             C30015 * (2 * ae * C30120 +
                                       C30015 * C30022 * C30058)))) /
        C29975;
    const double C1147 = C114 * C1134;
    const double C4848 = C4712 * C1134;
    const double C5756 = C4710 * C1134;
    const double C14440 = C13240 * C1134;
    const double C14434 = C13242 * C1134;
    const double C1681 = C114 * C1674;
    const double C5336 = C4712 * C1674;
    const double C5908 = C4710 * C1674;
    const double C14592 = C13242 * C1674;
    const double C15080 = C13240 * C1674;
    const double C10705 = C10704 * C30767;
    const double C21440 = C10704 * C13238;
    const double C30366 = C30365 + C30358;
    const double C5642 =
        (3 * (C30304 + C30308 + C30308 + C30015 * C30439) + C30435 + C30435 +
         C30015 * (2 * C30439 + C30436 + C30436 +
                   C30015 * (C30429 + C30437 + C30437 +
                             C30015 * (2 * ae * C30156 * C30104 +
                                       C30015 * C30156 * C30058)))) /
        C29975;
    const double C9875 = C9871 + C9865;
    const double C26996 = C26994 + C15943;
    const double C10920 = C10919 + C10916;
    const double C26532 = C26528 + C26517;
    const double C1412 = C1410 + C1405;
    const double C13493 = C13485 + C13457;
    const double C1572 = C1570 + C1565;
    const double C14203 = C14199 + C14185;
    const double C10135 = C10134 + C10131;
    const double C15668 = C15666 + C15659;
    const double C10240 = C10235 + C1680;
    const double C25657 = C25646 + C14594;
    const double C26132 = C26126 + C15078;
    const double C10241 = C10237 + C9744;
    const double C25658 = C25648 + C14597;
    const double C9882 = C9878 * C30767;
    const double C20140 = C9878 * C13237;
    const double C1400 =
        (2 * (2 * ae * C30113 + C30015 * C30062) + C30299 + C30299 +
         C30015 *
             (C30062 + C30296 + C30296 +
              C30015 * (2 * ae * C30135 +
                        C30015 * (2 * C30022 * C30058 +
                                  C30022 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30034))))) /
        C29975;
    const double C1406 = C114 * C1399;
    const double C5085 = C4712 * C1399;
    const double C13473 = C13242 * C1399;
    const double C1566 = C114 * C1559;
    const double C5186 = C4712 * C1559;
    const double C14193 = C13242 * C1559;
    const double C30263 = ae * C30262;
    const double C1135 =
        (3 * C30170 + C30015 * C30262 + (2 * C30164 + C30015 * C30252) * ae) /
        C29968;
    const double C1675 = (C30156 * C30262) / C29968;
    const double C30412 = C30411 + C30399;
    const double C30453 = ae * C30448;
    const double C6665 = (2 * C30430 + C30156 * C30448) / C29968;
    const double C6666 =
        (2 * (2 * ae * (2 * C30428 + C30156 * C30446) + C30015 * C30563) +
         C30565 + C30565 +
         C30015 *
             (C30563 + C30562 + C30562 +
              C30015 *
                  (2 * ae * (2 * C30512 + C30156 * (C30104 + C30126 * C30265)) +
                   C30015 * (2 * C30513 +
                             C30156 * (C30058 +
                                       (C30052 * C30053 +
                                        C30019 * bs[8] * std::pow(C30013, 8)) *
                                           C30018 * C30265))))) /
        C29975;
    const double C6310 = C4712 * C6300;
    const double C9867 = C114 * C6300;
    const double C26993 = C13242 * C6300;
    const double C30494 = C30462 + C30492;
    const double C30505 = ae * C30500;
    const double C6462 = C4712 * C6457;
    const double C9982 = C114 * C6457;
    const double C14599 = C13242 * C6457;
    const double C13295 = C13287 + C13269;
    const double C13292 = C13284 + C13260;
    const double C13291 = C13283 + C13257;
    const double C13288 = C13280 + C13248;
    const double C13497 = C13489 + C13469;
    const double C13494 = C13486 + C13460;
    const double C13492 = C13484 + C13454;
    const double C13491 = C13483 + C13447;
    const double C13699 = C13691 + C13671;
    const double C13696 = C13688 + C13662;
    const double C13694 = C13686 + C13656;
    const double C13693 = C13685 + C13649;
    const double C13841 = C13839 + C13833;
    const double C13983 = C13981 + C13975;
    const double C14205 = C14201 + C14191;
    const double C14202 = C14198 + C14182;
    const double C14741 = C14739 + C14733;
    const double C14947 = C14945 + C14939;
    const double C15669 = C15667 + C15661;
    const double C15811 = C15809 + C15803;
    const double C24799 = C24795 + C24787;
    const double C24796 = C24792 + C24781;
    const double C25262 = C25260 + C25255;
    const double C25671 = C25665 + C25651;
    const double C25668 = C25662 + C25645;
    const double C25666 = C25660 + C25641;
    const double C26533 = C26529 + C26519;
    const double C26530 = C26526 + C26513;
    const double C26999 = C26997 + C26991;
    const double C19759 = C940 * C13238;
    const double C1411 = C1409 + C1403;
    const double C13496 = C13488 + C13466;
    const double C1571 = C1569 + C1563;
    const double C14204 = C14200 + C14188;
    const double C14731 = C13236 * C1140;
    const double C14736 = C14730 + C14434;
    const double C20273 = C20271 + C1681;
    const double C14942 = C14936 + C14592;
    const double C30367 = ae * C30366;
    const double C5515 =
        (4 * C30216 + C30015 * C30366 + (3 * C30206 + C30015 * C30355) * ae) /
        C29968;
    const double C5639 = (C30156 * C30366) / C29968;
    const double C26129 = C13236 * C5642;
    const double C9879 = C9875 + C9866;
    const double C26998 = C26996 + C26989;
    const double C10921 = C10920 * C30767;
    const double C10129 = C1572 * C30767;
    const double C20138 = C1572 * C13238;
    const double C20470 = C1572 * C13237;
    const double C10136 = C10135 * C30767;
    const double C20139 = C10135 * C13238;
    const double C10242 = C10240 + C1680;
    const double C25663 = C25657 + C14594;
    const double C26134 = C26132 + C15078;
    const double C10243 = C10241 + C9744;
    const double C25664 = C25658 + C14597;
    const double C1141 =
        (3 * (C30048 + C30168 + C30168 + C30015 * C30253) + C30263 + C30263 +
         C30015 *
             (2 * C30253 + C30260 + C30260 +
              C30015 * (C30060 + C30256 + C30256 +
                        C30015 * (2 * ae * C30131 +
                                  C30015 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30034))))) /
        C29975;
    const double C1148 = C114 * C1135;
    const double C4856 = C4712 * C1135;
    const double C14735 = C13242 * C1135;
    const double C1682 = C114 * C1675;
    const double C5341 = C4712 * C1675;
    const double C14941 = C13242 * C1675;
    const double C30414 = ae * C30412;
    const double C30413 = C30015 * C30412;
    const double C30514 = C30156 * C30412;
    const double C5640 = (C30366 + C30412 * C30265) / C29968;
    const double C5643 =
        (3 * (C30422 + C30426 + C30426 + C30015 * C30457) + C30453 + C30453 +
         C30015 *
             (2 * C30457 + C30454 + C30454 +
              C30015 * (C30447 + C30455 + C30455 +
                        C30015 * (2 * ae * (C30104 + C30126 * C30265) +
                                  C30015 * (C30058 + (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                         C30018 * C30265))))) /
        C29975;
    const double C6670 = C4712 * C6665;
    const double C10239 = C114 * C6665;
    const double C25653 = C13242 * C6665;
    const double C30495 = C30494 + C30487;
    const double C5905 =
        (3 * (C30310 + C30314 + C30314 + C30015 * C30509) + C30505 + C30505 +
         C30015 *
             (2 * C30509 + C30506 + C30506 +
              C30015 * (C30499 + C30507 + C30507 +
                        C30015 * (2 * ae * C30156 * C30464 +
                                  C30015 * C30156 * C30022 *
                                      (C30052 * C30053 +
                                       C30019 * bs[8] * std::pow(C30013, 8)) *
                                      C30018)))) /
        C29975;
    const double C20471 = C1571 * C13238;
    const double C14738 = C14736 + C14434;
    const double C20274 = C20273 + C1681;
    const double C14944 = C14942 + C14592;
    const double C5517 =
        (4 * (2 * C30207 + C30214 + C30214 + C30015 * C30356) + C30367 +
         C30367 +
         C30015 * (3 * C30356 + C30364 + C30364 +
                   C30015 * (2 * C30348 + C30360 + C30360 +
                             C30015 * (C30046 + C30352 + C30352 +
                                       C30015 * (2 * ae * C30104 +
                                                 C30015 * C30058))))) /
        C29975;
    const double C5524 = C4710 * C5515;
    const double C5520 = C4712 * C5515;
    const double C14439 = C13242 * C5515;
    const double C5648 = C4712 * C5639;
    const double C6012 = C4710 * C5639;
    const double C9745 = C114 * C5639;
    const double C15079 = C13242 * C5639;
    const double C25492 = C13240 * C5639;
    const double C9883 = C9879 * C30767;
    const double C10244 = C10242 + C10236;
    const double C25669 = C25663 + C25647;
    const double C26136 = C26134 + C26127;
    const double C10245 = C10243 + C10238;
    const double C25670 = C25664 + C25649;
    const double C30415 = C30373 + C30413;
    const double C30521 = ae * C30514;
    const double C5653 = C4712 * C5640;
    const double C9746 = C114 * C5640;
    const double C26131 = C13242 * C5640;
    const double C30496 = ae * C30495;
    const double C5752 =
        (4 * C30239 + C30015 * C30495 + (3 * C30229 + C30015 * C30485) * ae) /
        C29968;
    const double C5904 = (C30156 * C30495) / C29968;
    const double C14740 = C14738 + C14731;
    const double C20275 = C20274 + C20272;
    const double C14946 = C14944 + C14937;
    const double C26133 = C26128 + C15079;
    const double C10246 = C10244 * C30767;
    const double C20602 = C10244 * C13237;
    const double C10247 = C10245 * C30767;
    const double C30416 = C30415 + C30407;
    const double C6009 =
        (4 * (2 * C30439 + C30436 + C30436 + C30015 * C30528) + C30521 +
         C30521 +
         C30015 * (3 * C30528 + C30522 + C30522 +
                   C30015 * (2 * C30526 + C30523 + C30523 +
                             C30015 * (C30513 + C30524 + C30524 +
                                       C30015 * (2 * ae * C30156 * C30126 +
                                                 C30015 * C30156 *
                                                     (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                     C30018))))) /
        C29975;
    const double C5753 =
        (4 * (2 * C30230 + C30237 + C30237 + C30015 * C30483) + C30496 +
         C30496 +
         C30015 * (3 * C30483 + C30493 + C30493 +
                   C30015 * (2 * C30474 + C30489 + C30489 +
                             C30015 * (C30461 + C30482 + C30482 +
                                       C30015 * (2 * ae * C30464 +
                                                 C30015 * C30022 *
                                                     (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                     C30018))))) /
        C29975;
    const double C5757 = C4712 * C5752;
    const double C14441 = C13242 * C5752;
    const double C5909 = C4712 * C5904;
    const double C15081 = C13242 * C5904;
    const double C19988 = C114 * C5904;
    const double C20603 = C20275 * C13238;
    const double C26135 = C26133 + C15079;
    const double C30417 = ae * C30416;
    const double C5516 =
        (5 * C30366 + C30015 * C30416 + (4 * C30355 + C30015 * C30403) * ae) /
        C29968;
    const double C6008 = (C30156 * C30416) / C29968;
    const double C26137 = C26135 + C26129;
    const double C5518 =
        (5 * (3 * C30356 + C30364 + C30364 + C30015 * C30405) + C30417 +
         C30417 +
         C30015 *
             (4 * C30405 + C30414 + C30414 +
              C30015 *
                  (3 * C30397 + C30410 + C30410 +
                   C30015 * (2 * C30389 + C30404 + C30404 +
                             C30015 * (C30058 + C30393 + C30393 +
                                       C30015 * (2 * ae * C30126 +
                                                 C30015 *
                                                     (C30052 * C30053 +
                                                      C30019 * bs[8] *
                                                          std::pow(C30013, 8)) *
                                                     C30018)))))) /
        C29975;
    const double C5525 = C4712 * C5516;
    const double C6013 = C4712 * C6008;
    const double C25493 = C13242 * C6008;
    d2ee[0] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C30878 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C30885 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C2848) *
                     C30796 +
                 (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                      C31016 * C30837 * C30885 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C30878 -
                  ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                      C31016 * C30837 * C2848) *
                     C30805 +
                 (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C30878 -
                  ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                      C31016 * C30837 * C30885 +
                  ((C13497 + C13496) * C13237 +
                   (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                    C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                       C13238) *
                      C31016 * C30837 * C2848) *
                     C2851)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30878 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31063) *
                      C30885 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C31063 -
                   ((C14946 + C14947) * C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C30924) *
                      C2848) *
                     C2588 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31063) *
                      C30878 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C31063 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30924) *
                      C30885 +
                  (((C14947 + C14946) * C13237 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C31063) *
                      C2848) *
                     C30802)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C31137 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C31133 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C31123 -
                  ((C14740 + C14741) * C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C30837 * C31103) *
                     C2588 +
                 (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                      C31016 * C30837 * C31133 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C31137 -
                  ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                      C31016 * C30837 * C31123 +
                  ((C14741 + C14740) * C13237 +
                   (C13239 * C1124 + C14734 + C14734 + C13235 * C1136 +
                    C13241 * C1129 + C14735 + C14735 + C13236 * C1141) *
                       C13238) *
                      C31016 * C30837 * C31103) *
                     C30802)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C2480 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C30882) *
                     C31136 +
                 (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                      C31016 * C30837 * C30882 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C2480) *
                     C31129 +
                 (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C2480 -
                  ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                      C31016 * C30837 * C30882) *
                     C31116 +
                 (((C13841 + C13840) * C13237 +
                   (C13239 * C292 + C13834 + C13834 + C13235 * C312 +
                    C13241 * C293 + C13835 + C13835 + C13236 * C313) *
                       C13238) *
                      C31016 * C30837 * C30882 -
                  ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                      C31016 * C30837 * C2480) *
                     C31097)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31131 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C31120 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31096) *
                      C2480 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C31120 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31131 -
                   ((C15668 + C15669) * C13238 +
                    (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                     C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                        C13237) *
                       C31016 * C31096) *
                      C30882) *
                     C2588 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C31120 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31131 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C31096) *
                      C2480 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C31131 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C31120 +
                   ((C15669 + C15668) * C13237 +
                    (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                     C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                        C13238) *
                       C31016 * C31096) *
                      C30882) *
                     C30802)) /
                   (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31063) *
                      C30882) *
                     C30796 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31063) *
                      C2480 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C31063 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30924) *
                      C30882) *
                     C30805 +
                 ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C31063 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C14205 + C14204) * C13237 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C31063) *
                      C30882) *
                     C2851)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C2480 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C30882) *
                     C31136 +
                 (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                      C31016 * C30837 * C30882 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C2480) *
                     C31129 +
                 (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C2480 -
                  ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                      C31016 * C30837 * C30882) *
                     C31116 +
                 (((C13841 + C13840) * C13237 +
                   (C13239 * C292 + C13834 + C13834 + C13235 * C312 +
                    C13241 * C293 + C13835 + C13835 + C13236 * C313) *
                       C13238) *
                      C31016 * C30837 * C30882 -
                  ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                      C31016 * C30837 * C2480) *
                     C31097)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C31137 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C31133 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C31123 -
                  ((C14740 + C14741) * C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C30837 * C31103) *
                     C2588 +
                 (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                      C31016 * C30837 * C31133 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C31137 -
                  ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                      C31016 * C30837 * C31123 +
                  ((C14741 + C14740) * C13237 +
                   (C13239 * C1124 + C14734 + C14734 + C13235 * C1136 +
                    C13241 * C1129 + C14735 + C14735 + C13236 * C1141) *
                       C13238) *
                      C31016 * C30837 * C31103) *
                     C30802)) /
                   (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C3242 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30878 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C3242) *
                      C30885 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C3242 -
                   ((C14946 + C14947) * C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C30924) *
                      C2848) *
                     C31048 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C3242) *
                      C30878 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C3242 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30924) *
                      C30885 +
                  (((C14947 + C14946) * C13237 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C3242) *
                      C2848) *
                     C30802)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30920 -
                  ((C13692 + C13693) * C13238 +
                   (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                    C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                       C13237) *
                      C31016 * C30927 +
                  ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                    C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                       C13237 +
                   (C13694 + C13695) * C13238) *
                      C31016 * C3750) *
                     C30878 +
                 (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                    C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                       C13237 +
                   (C14202 + C14203) * C13238) *
                      C31016 * C30927 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30920 -
                  ((C15668 + C15669) * C13238 +
                   (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                    C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                       C13237) *
                      C31016 * C3750) *
                     C30885 +
                 (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30920 -
                  ((C14946 + C14947) * C13238 +
                   (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                    C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                       C13237) *
                      C31016 * C30927 +
                  ((C13239 * C1264 + C14596 + C14596 + C13235 * C1282 +
                    C13241 * C5635 + C14597 + C14597 + C13236 * C5641) *
                       C13237 +
                   (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                    C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                       C13238) *
                      C31016 * C3750) *
                     C2848) *
                C30791) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C3242 -
                  ((C13692 + C13693) * C13238 +
                   (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                    C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                       C13237) *
                      C31016 * C30924) *
                     C31137 +
                 (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                    C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                       C13237 +
                   (C14202 + C14203) * C13238) *
                      C31016 * C30924 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C3242) *
                     C31133 +
                 (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C3242 -
                  ((C14946 + C14947) * C13238 +
                   (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                    C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                       C13237) *
                      C31016 * C30924) *
                     C31123 +
                 (((C13239 * C1670 + C15078 + C15078 + C13235 * C1676 +
                    C13241 * C5636 + C15079 + C15079 + C13236 * C5642) *
                       C13237 +
                   (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                    C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                       C13238) *
                      C31016 * C30924 -
                  ((C14740 + C14741) * C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C3242) *
                     C31103) *
                C30791) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C3242 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C3242) *
                      C30882) *
                     C31127 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C3242) *
                      C2480 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C3242 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30924) *
                      C30882) *
                     C31114 +
                 ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C3242 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C14205 + C14204) * C13237 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C3242) *
                      C30882) *
                     C31087)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C31138 -
                  ((C13692 + C13693) * C13238 +
                   (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                    C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                       C13237) *
                      C31016 * C31135 +
                  ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                    C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                       C13237 +
                   (C13694 + C13695) * C13238) *
                      C31016 * C31126 -
                  ((C15810 + C15811) * C13238 +
                   (C13241 * C2370 + C15458 + C15458 + C13236 * C2376 +
                    C13239 * C1974 + C15459 + C15459 + C13235 * C1986) *
                       C13237) *
                      C31016 * C31109) *
                     C2480 +
                 (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                    C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                       C13237 +
                   (C14202 + C14203) * C13238) *
                      C31016 * C31135 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C31138 -
                  ((C15668 + C15669) * C13238 +
                   (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                    C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                       C13237) *
                      C31016 * C31126 +
                  ((C13239 * C2370 + C15942 + C15942 + C13235 * C2376 +
                    C13241 * C6295 + C15943 + C15943 + C13236 * C6301) *
                       C13237 +
                   (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                    C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                       C13238) *
                      C31016 * C31109) *
                     C30882) *
                C30791) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30920 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30927 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C3750) *
                      C2480 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30927 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30920 -
                   ((C15668 + C15669) * C13238 +
                    (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                     C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                        C13237) *
                       C31016 * C3750) *
                      C30882) *
                     C31048 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30927 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30920 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C3750) *
                      C2480 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30920 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30927 +
                   ((C15669 + C15668) * C13237 +
                    (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                     C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                        C13238) *
                       C31016 * C3750) *
                      C30882) *
                     C30802)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C3242 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C3242) *
                      C30882) *
                     C31127 +
                 ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C3242) *
                      C2480 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C3242 -
                   ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                       C31016 * C30924) *
                      C30882) *
                     C31114 +
                 ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C3242 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C2480 +
                  (((C14205 + C14204) * C13237 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C3242) *
                      C30882) *
                     C31087)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C3242 -
                  ((C13692 + C13693) * C13238 +
                   (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                    C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                       C13237) *
                      C31016 * C30924) *
                     C31137 +
                 (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                    C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                       C13237 +
                   (C14202 + C14203) * C13238) *
                      C31016 * C30924 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C3242) *
                     C31133 +
                 (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C3242 -
                  ((C14946 + C14947) * C13238 +
                   (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                    C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                       C13237) *
                      C31016 * C30924) *
                     C31123 +
                 (((C13239 * C1670 + C15078 + C15078 + C13235 * C1676 +
                    C13241 * C5636 + C15079 + C15079 + C13236 * C5642) *
                       C13237 +
                   (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                    C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                       C13238) *
                      C31016 * C30924 -
                  ((C14740 + C14741) * C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C3242) *
                     C31103) *
                C30791) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C1392 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C1393 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C1394 -
                   ((C14740 + C14741) * C13238 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C13237) *
                       C31016 * C30837 * C31103) *
                      C31048 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C1393 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C1392 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C1394 +
                   ((C14741 + C14740) * C13237 +
                    (C13239 * C1124 + C14734 + C14734 + C13235 * C1136 +
                     C13241 * C1129 + C14735 + C14735 + C13236 * C1141) *
                        C13238) *
                       C31016 * C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C31062 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C30882) *
                      C637 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C30882 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C31062) *
                      C638 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C31062 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C30882) *
                      C639 +
                  (((C13841 + C13840) * C13237 +
                    (C13239 * C292 + C13834 + C13834 + C13235 * C312 +
                     C13241 * C293 + C13835 + C13835 + C13236 * C313) *
                        C13238) *
                       C31016 * C30837 * C30882 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C30837 * C31062) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C1792 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C1793 +
                    ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                      C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                         C13237 +
                     (C13694 + C13695) * C13238) *
                        C31016 * C31096) *
                       C31062 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C1793 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C1792 -
                    ((C15668 + C15669) * C13238 +
                     (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                      C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                         C13237) *
                        C31016 * C31096) *
                       C30882) *
                      C31048 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C1793 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C1792 -
                    ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                        C31016 * C31096) *
                       C31062 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C1792 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C1793 +
                    ((C15669 + C15668) * C13237 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C13238) *
                        C31016 * C31096) *
                       C30882) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C1392 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31063) *
                      C1393 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C31063 -
                   ((C14946 + C14947) * C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C30924) *
                      C1394 +
                  (((C13239 * C1670 + C15078 + C15078 + C13235 * C1676 +
                     C13241 * C5636 + C15079 + C15079 + C13236 * C5642) *
                        C13237 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C13238) *
                       C31016 * C30924 -
                   ((C14740 + C14741) * C13238 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C13237) *
                       C31016 * C31063) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C31063 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C31063) *
                       C30882) *
                      C281 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C31063) *
                       C31062 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C31063 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C30882) *
                      C282 +
                  ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                        C31016 * C31063 -
                    ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C14205 + C14204) * C13237 +
                     (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                      C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                        C31016 * C31063) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C2254 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C2255 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C2256 -
                   ((C15810 + C15811) * C13238 +
                    (C13241 * C2370 + C15458 + C15458 + C13236 * C2376 +
                     C13239 * C1974 + C15459 + C15459 + C13235 * C1986) *
                        C13237) *
                       C31016 * C31109) *
                      C31062 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C2255 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C2254 -
                   ((C15668 + C15669) * C13238 +
                    (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                     C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                        C13237) *
                       C31016 * C2256 +
                   ((C13239 * C2370 + C15942 + C15942 + C13235 * C2376 +
                     C13241 * C6295 + C15943 + C15943 + C13236 * C6301) *
                        C13237 +
                    (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                     C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                        C13238) *
                       C31016 * C31109) *
                      C30882) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                   C13237 +
               (C13288 + C13289) * C13238) *
                  C31016 * C30837 * C30819 * C108 -
              ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                  C31016 * C30837 * C30819 * C109 +
              ((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                  C31016 * C30837 * C30819 * C110 -
              ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                  C31016 * C30837 * C30819 * C111 +
              ((C13295 + C13294) * C13237 +
               (C13239 * C120 + C13270 + C13270 + C13235 * C134 +
                C13241 * C641 + C13271 + C13271 + C13236 * C643) *
                   C13238) *
                  C31016 * C30837 * C30819 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                 C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                    C13237 +
                (C13288 + C13289) * C13238) *
                   C31016 * C30837 * C31130 -
               ((C13490 + C13491) * C13238 +
                (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                 C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                    C13237) *
                   C31016 * C30837 * C31118 +
               ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                 C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                    C13237 +
                (C13492 + C13493) * C13238) *
                   C31016 * C30837 * C31093) *
                  C281 +
              (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                   C31016 * C30837 * C31118 -
               ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                   C31016 * C30837 * C31130 -
               ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                   C31016 * C30837 * C31093) *
                  C282 +
              (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                   C31016 * C30837 * C31130 -
               ((C13241 * C291 + C13470 + C13470 + C13236 * C311 +
                 C13239 * C290 + C13471 + C13471 + C13235 * C310) *
                    C13238 +
                (C13495 + C13494) * C13237) *
                   C31016 * C30837 * C31118 +
               ((C13497 + C13496) * C13237 +
                (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                 C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                    C13238) *
                   C31016 * C30837 * C31093) *
                  C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
             C13245 + C13245 + C13236 * C306) *
                C13237 +
            (C13288 + C13289) * C13238) *
               C31016 * C31131 -
           ((C13692 + C13693) * C13238 +
            (C13241 * C905 + C13650 + C13650 + C13236 * C915 + C13239 * C469 +
             C13651 + C13651 + C13235 * C489) *
                C13237) *
               C31016 * C31120 +
           ((C13239 * C470 + C13652 + C13652 + C13235 * C490 + C13241 * C1260 +
             C13653 + C13653 + C13236 * C1278) *
                C13237 +
            (C13694 + C13695) * C13238) *
               C31016 * C31096) *
              C30819 * C281 +
          (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) * C31016 *
               C31120 -
           ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) * C31016 *
               C31131 -
           ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) * C31016 *
               C31096) *
              C30819 * C282 +
          (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) * C31016 *
               C31131 -
           ((C13241 * C908 + C13672 + C13672 + C13236 * C918 + C13239 * C473 +
             C13673 + C13673 + C13235 * C493) *
                C13238 +
            (C13697 + C13696) * C13237) *
               C31016 * C31120 +
           ((C13699 + C13698) * C13237 +
            (C13239 * C474 + C13674 + C13674 + C13235 * C494 + C13241 * C2142 +
             C13675 + C13675 + C13236 * C2144) *
                C13238) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
             C13245 + C13245 + C13236 * C306) *
                C13237 +
            (C13288 + C13289) * C13238) *
               C31016 * C30837 * C1050 -
           ((C13490 + C13491) * C13238 +
            (C13241 * C287 + C13448 + C13448 + C13236 * C307 + C13239 * C286 +
             C13449 + C13449 + C13235 * C306) *
                C13237) *
               C31016 * C30837 * C1051 +
           ((C13239 * C287 + C13450 + C13450 + C13235 * C307 + C13241 * C1126 +
             C13451 + C13451 + C13236 * C1138) *
                C13237 +
            (C13492 + C13493) * C13238) *
               C31016 * C30837 * C31093) *
              C31127 +
          (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) * C31016 *
               C30837 * C1051 -
           ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) * C31016 *
               C30837 * C1050 -
           ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) * C31016 *
               C30837 * C31093) *
              C31114 +
          (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) * C31016 *
               C30837 * C1050 -
           ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) * C31016 *
               C30837 * C1051 +
           ((C13497 + C13496) * C13237 +
            (C13239 * C291 + C13472 + C13472 + C13235 * C311 + C13241 * C1398 +
             C13473 + C13473 + C13236 * C1400) *
                C13238) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
            C13245 + C13245 + C13236 * C306) *
               C13237 +
           (C13288 + C13289) * C13238) *
              C31016 * C30837 * C1118 -
          ((C13490 + C13491) * C13238 +
           (C13241 * C287 + C13448 + C13448 + C13236 * C307 + C13239 * C286 +
            C13449 + C13449 + C13235 * C306) *
               C13237) *
              C31016 * C30837 * C1119 +
          ((C13239 * C287 + C13450 + C13450 + C13235 * C307 + C13241 * C1126 +
            C13451 + C13451 + C13236 * C1138) *
               C13237 +
           (C13492 + C13493) * C13238) *
              C31016 * C30837 * C1120 -
          ((C13241 * C1128 + C14434 + C14434 + C13236 * C1140 + C13239 * C1125 +
            C14435 + C14435 + C13235 * C1137) *
               C13238 +
           (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 + C13239 * C1126 +
            C14437 + C14437 + C13235 * C1138) *
               C13237) *
              C31016 * C30837 * C1121 +
          ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 + C13241 * C5513 +
            C14439 + C14439 + C13236 * C5517) *
               C13237 +
           (C13239 * C1128 + C14440 + C14440 + C13235 * C1140 + C13241 * C5751 +
            C14441 + C14441 + C13236 * C5753) *
               C13238) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
             C13245 + C13245 + C13236 * C306) *
                C13237 +
            (C13288 + C13289) * C13238) *
               C31016 * C31131 -
           ((C13692 + C13693) * C13238 +
            (C13241 * C905 + C13650 + C13650 + C13236 * C915 + C13239 * C469 +
             C13651 + C13651 + C13235 * C489) *
                C13237) *
               C31016 * C31120 +
           ((C13239 * C470 + C13652 + C13652 + C13235 * C490 + C13241 * C1260 +
             C13653 + C13653 + C13236 * C1278) *
                C13237 +
            (C13694 + C13695) * C13238) *
               C31016 * C31096) *
              C1050 +
          (((C13239 * C905 + C14178 + C14178 + C13235 * C915 + C13241 * C1263 +
             C14179 + C14179 + C13236 * C1281) *
                C13237 +
            (C14202 + C14203) * C13238) *
               C31016 * C31120 -
           ((C13490 + C13491) * C13238 +
            (C13241 * C287 + C13448 + C13448 + C13236 * C307 + C13239 * C286 +
             C13449 + C13449 + C13235 * C306) *
                C13237) *
               C31016 * C31131 -
           ((C13241 * C1265 + C14588 + C14588 + C13236 * C1283 +
             C13239 * C1259 + C14589 + C14589 + C13235 * C1277) *
                C13238 +
            (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
             C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                C13237) *
               C31016 * C31096) *
              C1051 +
          (((C13239 * C287 + C13450 + C13450 + C13235 * C307 + C13241 * C1126 +
             C13451 + C13451 + C13236 * C1138) *
                C13237 +
            (C13492 + C13493) * C13238) *
               C31016 * C31131 -
           ((C13241 * C1671 + C14592 + C14592 + C13236 * C1677 +
             C13239 * C1262 + C14593 + C14593 + C13235 * C1280) *
                C13238 +
            (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
             C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                C13237) *
               C31016 * C31120 +
           ((C13239 * C1264 + C14596 + C14596 + C13235 * C1282 +
             C13241 * C5635 + C14597 + C14597 + C13236 * C5641) *
                C13237 +
            (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
             C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                C13238) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
             C13245 + C13245 + C13236 * C306) *
                C13237 +
            (C13288 + C13289) * C13238) *
               C31016 * C1792 -
           ((C13692 + C13693) * C13238 +
            (C13241 * C905 + C13650 + C13650 + C13236 * C915 + C13239 * C469 +
             C13651 + C13651 + C13235 * C489) *
                C13237) *
               C31016 * C1793 +
           ((C13239 * C470 + C13652 + C13652 + C13235 * C490 + C13241 * C1260 +
             C13653 + C13653 + C13236 * C1278) *
                C13237 +
            (C13694 + C13695) * C13238) *
               C31016 * C31096) *
              C30819 * C31127 +
          (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) * C31016 *
               C1793 -
           ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) * C31016 *
               C1792 -
           ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) * C31016 *
               C31096) *
              C30819 * C31114 +
          (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) * C31016 *
               C1792 -
           ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) * C31016 *
               C1793 +
           ((C13699 + C13698) * C13237 +
            (C13239 * C474 + C13674 + C13674 + C13235 * C494 + C13241 * C2142 +
             C13675 + C13675 + C13236 * C2144) *
                C13238) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
             C13245 + C13245 + C13236 * C306) *
                C13237 +
            (C13288 + C13289) * C13238) *
               C31016 * C1792 -
           ((C13692 + C13693) * C13238 +
            (C13241 * C905 + C13650 + C13650 + C13236 * C915 + C13239 * C469 +
             C13651 + C13651 + C13235 * C489) *
                C13237) *
               C31016 * C1793 +
           ((C13239 * C470 + C13652 + C13652 + C13235 * C490 + C13241 * C1260 +
             C13653 + C13653 + C13236 * C1278) *
                C13237 +
            (C13694 + C13695) * C13238) *
               C31016 * C31096) *
              C31130 +
          (((C13239 * C905 + C14178 + C14178 + C13235 * C915 + C13241 * C1263 +
             C14179 + C14179 + C13236 * C1281) *
                C13237 +
            (C14202 + C14203) * C13238) *
               C31016 * C1793 -
           ((C13490 + C13491) * C13238 +
            (C13241 * C287 + C13448 + C13448 + C13236 * C307 + C13239 * C286 +
             C13449 + C13449 + C13235 * C306) *
                C13237) *
               C31016 * C1792 -
           ((C13241 * C1265 + C14588 + C14588 + C13236 * C1283 +
             C13239 * C1259 + C14589 + C14589 + C13235 * C1277) *
                C13238 +
            (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
             C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                C13237) *
               C31016 * C31096) *
              C31118 +
          (((C13239 * C287 + C13450 + C13450 + C13235 * C307 + C13241 * C1126 +
             C13451 + C13451 + C13236 * C1138) *
                C13237 +
            (C13492 + C13493) * C13238) *
               C31016 * C1792 -
           ((C14946 + C14947) * C13238 +
            (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
             C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                C13237) *
               C31016 * C1793 +
           ((C13239 * C1264 + C14596 + C14596 + C13235 * C1282 +
             C13241 * C5635 + C14597 + C14597 + C13236 * C5641) *
                C13237 +
            (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
             C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                C13238) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13239 * C115 + C13244 + C13244 + C13235 * C129 + C13241 * C286 +
            C13245 + C13245 + C13236 * C306) *
               C13237 +
           (C13288 + C13289) * C13238) *
              C31016 * C1967 -
          ((C13692 + C13693) * C13238 +
           (C13241 * C905 + C13650 + C13650 + C13236 * C915 + C13239 * C469 +
            C13651 + C13651 + C13235 * C489) *
               C13237) *
              C31016 * C1968 +
          ((C13239 * C470 + C13652 + C13652 + C13235 * C490 + C13241 * C1260 +
            C13653 + C13653 + C13236 * C1278) *
               C13237 +
           (C13694 + C13695) * C13238) *
              C31016 * C1969 -
          ((C13241 * C2371 + C15456 + C15456 + C13236 * C2377 + C13239 * C1973 +
            C15457 + C15457 + C13235 * C1985) *
               C13238 +
           (C13241 * C2370 + C15458 + C15458 + C13236 * C2376 + C13239 * C1974 +
            C15459 + C15459 + C13235 * C1986) *
               C13237) *
              C31016 * C1970 +
          ((C13239 * C1975 + C15460 + C15460 + C13235 * C1987 + C13241 * C6296 +
            C15461 + C15461 + C13236 * C6302) *
               C13237 +
           (C13239 * C1976 + C15462 + C15462 + C13235 * C1988 +
            C13241 * C10695 + C15463 + C15463 + C13236 * C10697) *
               C13238) *
              C31016 * C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[13] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C31063 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C1050 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C31063) *
                       C1051 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C13237 +
                     (C13492 + C13493) * C13238) *
                        C31016 * C31063 -
                    ((C14946 + C14947) * C13238 +
                     (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                      C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                         C13237) *
                        C31016 * C30924) *
                       C31093) *
                      C31048 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C31063) *
                       C1050 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C31063 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C1051 +
                   (((C14947 + C14946) * C13237 +
                     (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                      C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                        C31016 * C31063) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30819 * C637 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31063) *
                      C30819 * C638 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C31063 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C30819 * C639 +
                  (((C13983 + C13982) * C13237 +
                    (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                     C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C31063) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C2254 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C2255 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C2256 -
                   ((C15810 + C15811) * C13238 +
                    (C13241 * C2370 + C15458 + C15458 + C13236 * C2376 +
                     C13239 * C1974 + C15459 + C15459 + C13235 * C1986) *
                        C13237) *
                       C31016 * C31109) *
                      C30819 * C31048 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C2255 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C2254 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C2256 +
                   ((C15811 + C15810) * C13237 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C13238) *
                       C31016 * C31109) *
                      C30819 * C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C31118 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C31130 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13241 * C291 + C13470 + C13470 + C13236 * C311 +
                     C13239 * C290 + C13471 + C13471 + C13235 * C310) *
                        C13238 +
                    (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C30819 * C108 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C30819 * C110 -
                  ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                      C31016 * C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C13237 +
                   (C13239 * C120 + C13270 + C13270 + C13235 * C134 +
                    C13241 * C641 + C13271 + C13271 + C13236 * C643) *
                       C13238) *
                      C31016 * C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C1051 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C1050 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C1118 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C1120 -
                  ((C13241 * C1128 + C14434 + C14434 + C13236 * C1140 +
                    C13239 * C1125 + C14435 + C14435 + C13235 * C1137) *
                       C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C13237 +
                   (C13239 * C1128 + C14440 + C14440 + C13235 * C1140 +
                    C13241 * C5751 + C14441 + C14441 + C13236 * C5753) *
                       C13238) *
                      C31016 * C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C1792 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C1793 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31096) *
                      C30819 * C31127 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C1793 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C1792 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C31096) *
                      C30819 * C31114 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C1792 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C1793 +
                   ((C13699 + C13698) * C13237 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C13238) *
                       C31016 * C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C1792 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C1793 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31096) *
                      C31130 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C1793 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C1792 -
                   ((C13241 * C1265 + C14588 + C14588 + C13236 * C1283 +
                     C13239 * C1259 + C14589 + C14589 + C13235 * C1277) *
                        C13238 +
                    (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                     C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                        C13237) *
                       C31016 * C31096) *
                      C31118 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C1792 -
                   ((C14946 + C14947) * C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C1793 +
                   ((C13239 * C1264 + C14596 + C14596 + C13235 * C1282 +
                     C13241 * C5635 + C14597 + C14597 + C13236 * C5641) *
                        C13237 +
                    (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                     C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                        C13238) *
                       C31016 * C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C3242 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C3242) *
                       C30882) *
                      C30796 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C3242) *
                       C31062 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C3242 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C30882) *
                      C30805 +
                  ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                        C31016 * C3242 -
                    ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C14205 + C14204) * C13237 +
                     (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                      C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                        C31016 * C3242) *
                       C30882) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C30920 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30927 +
                    ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                      C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                         C13237 +
                     (C13694 + C13695) * C13238) *
                        C31016 * C3750) *
                       C31062 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30927 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C30920 -
                    ((C15668 + C15669) * C13238 +
                     (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                      C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                         C13237) *
                        C31016 * C3750) *
                       C30882) *
                      C2588 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30927 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C30920 -
                    ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                        C31016 * C3750) *
                       C31062 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C30920 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30927 +
                    ((C15669 + C15668) * C13237 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C13238) *
                        C31016 * C3750) *
                       C30882) *
                      C30802)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C3242 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C31130 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C3242) *
                       C31118 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C13237 +
                     (C13492 + C13493) * C13238) *
                        C31016 * C3242 -
                    ((C14946 + C14947) * C13238 +
                     (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                      C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                         C13237) *
                        C31016 * C30924) *
                       C31093) *
                      C2588 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C3242) *
                       C31130 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C3242 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C31118 +
                   (((C14947 + C14946) * C13237 +
                     (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                      C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                        C31016 * C3242) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C3242 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30819 * C31136 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C3242) *
                      C30819 * C31129 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C3242 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C30819 * C31116 +
                  (((C13983 + C13982) * C13237 +
                    (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                     C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C3242) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31138 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C31135 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31126 -
                   ((C15810 + C15811) * C13238 +
                    (C13241 * C2370 + C15458 + C15458 + C13236 * C2376 +
                     C13239 * C1974 + C15459 + C15459 + C13235 * C1986) *
                        C13237) *
                       C31016 * C31109) *
                      C30819 * C2588 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C31135 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31138 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C31126 +
                   ((C15811 + C15810) * C13237 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C13238) *
                       C31016 * C31109) *
                      C30819 * C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30920 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30927 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C3750) *
                      C30819 * C30796 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30927 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30920 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C3750) *
                      C30819 * C30805 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30920 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30927 +
                   ((C13699 + C13698) * C13237 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C13238) *
                       C31016 * C3750) *
                      C30819 * C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C3242 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30819 * C31136 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C3242) *
                      C30819 * C31129 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C3242 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C30819 * C31116 +
                  (((C13983 + C13982) * C13237 +
                    (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                     C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C3242) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C3242 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C31130 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C3242) *
                       C31118 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C13237 +
                     (C13492 + C13493) * C13238) *
                        C31016 * C3242 -
                    ((C14946 + C14947) * C13238 +
                     (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                      C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                         C13237) *
                        C31016 * C30924) *
                       C31093) *
                      C2588 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C3242) *
                       C31130 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C3242 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C31118 +
                   (((C14947 + C14946) * C13237 +
                     (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                      C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                        C31016 * C3242) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C31062 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C30882) *
                      C637 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C30882 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C31062) *
                      C638 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C31062 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C30882) *
                      C639 +
                  (((C13841 + C13840) * C13237 +
                    (C13239 * C292 + C13834 + C13834 + C13235 * C312 +
                     C13241 * C293 + C13835 + C13835 + C13236 * C313) *
                        C13238) *
                       C31016 * C30837 * C30882 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C30837 * C31062) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C1392 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C1393 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C1394 -
                   ((C14740 + C14741) * C13238 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C13237) *
                       C31016 * C30837 * C31103) *
                      C31048 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C1393 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C1392 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C1394 +
                   ((C14741 + C14740) * C13237 +
                    (C13239 * C1124 + C14734 + C14734 + C13235 * C1136 +
                     C13241 * C1129 + C14735 + C14735 + C13236 * C1141) *
                        C13238) *
                       C31016 * C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C31063 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C31063) *
                       C30882) *
                      C281 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C31063) *
                       C31062 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C31063 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C30882) *
                      C282 +
                  ((((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                        C31016 * C31063 -
                    ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                        C31016 * C30924) *
                       C31062 +
                   (((C14205 + C14204) * C13237 +
                     (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                      C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                        C31016 * C31063) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C1392 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C30924 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31063) *
                      C1393 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C31063 -
                   ((C14946 + C14947) * C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C30924) *
                      C1394 +
                  (((C13239 * C1670 + C15078 + C15078 + C13235 * C1676 +
                     C13241 * C5636 + C15079 + C15079 + C13236 * C5642) *
                        C13237 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C13238) *
                       C31016 * C30924 -
                   ((C14740 + C14741) * C13238 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C13237) *
                       C31016 * C31063) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C31118 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C31130 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13241 * C291 + C13470 + C13470 + C13236 * C311 +
                     C13239 * C290 + C13471 + C13471 + C13235 * C310) *
                        C13238 +
                    (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C30819 * C108 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C30819 * C110 -
                  ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                      C31016 * C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C13237 +
                   (C13239 * C120 + C13270 + C13270 + C13235 * C134 +
                    C13241 * C641 + C13271 + C13271 + C13236 * C643) *
                       C13238) *
                      C31016 * C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31131 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C31120 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31096) *
                      C30819 * C281 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C31120 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31131 -
                   ((C13698 + C13699) * C13238 + (C13695 + C13694) * C13237) *
                       C31016 * C31096) *
                      C30819 * C282 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C31131 -
                   ((C13241 * C908 + C13672 + C13672 + C13236 * C918 +
                     C13239 * C473 + C13673 + C13673 + C13235 * C493) *
                        C13238 +
                    (C13697 + C13696) * C13237) *
                       C31016 * C31120 +
                   ((C13699 + C13698) * C13237 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C13238) *
                       C31016 * C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C1051 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C1050 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C1118 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C1120 -
                  ((C13241 * C1128 + C14434 + C14434 + C13236 * C1140 +
                    C13239 * C1125 + C14435 + C14435 + C13235 * C1137) *
                       C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C13237 +
                   (C13239 * C1128 + C14440 + C14440 + C13235 * C1140 +
                    C13241 * C5751 + C14441 + C14441 + C13236 * C5753) *
                       C13238) *
                      C31016 * C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31131 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C31120 +
                   ((C13239 * C470 + C13652 + C13652 + C13235 * C490 +
                     C13241 * C1260 + C13653 + C13653 + C13236 * C1278) *
                        C13237 +
                    (C13694 + C13695) * C13238) *
                       C31016 * C31096) *
                      C1050 +
                  (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                     C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                        C13237 +
                    (C14202 + C14203) * C13238) *
                       C31016 * C31120 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C31131 -
                   ((C13241 * C1265 + C14588 + C14588 + C13236 * C1283 +
                     C13239 * C1259 + C14589 + C14589 + C13235 * C1277) *
                        C13238 +
                    (C13241 * C1264 + C14590 + C14590 + C13236 * C1282 +
                     C13239 * C1260 + C14591 + C14591 + C13235 * C1278) *
                        C13237) *
                       C31016 * C31096) *
                      C1051 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C31131 -
                   ((C13241 * C1671 + C14592 + C14592 + C13236 * C1677 +
                     C13239 * C1262 + C14593 + C14593 + C13235 * C1280) *
                        C13238 +
                    (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                     C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                        C13237) *
                       C31016 * C31120 +
                   ((C13239 * C1264 + C14596 + C14596 + C13235 * C1282 +
                     C13241 * C5635 + C14597 + C14597 + C13236 * C5641) *
                        C13237 +
                    (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                     C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                        C13238) *
                       C31016 * C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C31063 -
                   ((C13692 + C13693) * C13238 +
                    (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                     C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                        C13237) *
                       C31016 * C30924) *
                      C30819 * C637 +
                  (((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                       C31016 * C30924 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C31063) *
                      C30819 * C638 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C31063 -
                   ((C13982 + C13983) * C13238 + (C13697 + C13696) * C13237) *
                       C31016 * C30924) *
                      C30819 * C639 +
                  (((C13983 + C13982) * C13237 +
                    (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                     C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                        C13238) *
                       C31016 * C30924 -
                   ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                       C31016 * C31063) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C13237 +
                     (C13288 + C13289) * C13238) *
                        C31016 * C31063 -
                    ((C13692 + C13693) * C13238 +
                     (C13241 * C905 + C13650 + C13650 + C13236 * C915 +
                      C13239 * C469 + C13651 + C13651 + C13235 * C489) *
                         C13237) *
                        C31016 * C30924) *
                       C1050 +
                   (((C13239 * C905 + C14178 + C14178 + C13235 * C915 +
                      C13241 * C1263 + C14179 + C14179 + C13236 * C1281) *
                         C13237 +
                     (C14202 + C14203) * C13238) *
                        C31016 * C30924 -
                    ((C13490 + C13491) * C13238 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C13237) *
                        C31016 * C31063) *
                       C1051 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C13237 +
                     (C13492 + C13493) * C13238) *
                        C31016 * C31063 -
                    ((C14946 + C14947) * C13238 +
                     (C13241 * C1670 + C14594 + C14594 + C13236 * C1676 +
                      C13239 * C1263 + C14595 + C14595 + C13235 * C1281) *
                         C13237) *
                        C31016 * C30924) *
                       C31093) *
                      C31048 +
                  ((((C13693 + C13692) * C13237 + (C13696 + C13697) * C13238) *
                        C31016 * C30924 -
                    ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                        C31016 * C31063) *
                       C1050 +
                   (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                        C31016 * C31063 -
                    ((C14204 + C14205) * C13238 + (C14203 + C14202) * C13237) *
                        C31016 * C30924) *
                       C1051 +
                   (((C14947 + C14946) * C13237 +
                     (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                      C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                         C13238) *
                        C31016 * C30924 -
                    ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                        C31016 * C31063) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C30819 * C108 -
                  ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                      C31016 * C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                      C31016 * C30837 * C30819 * C110 -
                  ((C13294 + C13295) * C13238 + (C13293 + C13292) * C13237) *
                      C31016 * C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C13237 +
                   (C13239 * C120 + C13270 + C13270 + C13235 * C134 +
                    C13241 * C641 + C13271 + C13271 + C13236 * C643) *
                       C13238) *
                      C31016 * C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C31118 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C31130 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C31130 -
                   ((C13241 * C291 + C13470 + C13470 + C13236 * C311 +
                     C13239 * C290 + C13471 + C13471 + C13235 * C310) *
                        C13238 +
                    (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C31118 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C13237 +
                    (C13288 + C13289) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13490 + C13491) * C13238 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C13237 +
                    (C13492 + C13493) * C13238) *
                       C31016 * C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C13237 + (C13494 + C13495) * C13238) *
                       C31016 * C30837 * C1051 -
                   ((C13290 + C13291) * C13238 + (C13289 + C13288) * C13237) *
                       C31016 * C30837 * C1050 -
                   ((C13496 + C13497) * C13238 + (C13493 + C13492) * C13237) *
                       C31016 * C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C13237 + (C13292 + C13293) * C13238) *
                       C31016 * C30837 * C1050 -
                   ((C13840 + C13841) * C13238 + (C13495 + C13494) * C13237) *
                       C31016 * C30837 * C1051 +
                   ((C13497 + C13496) * C13237 +
                    (C13239 * C291 + C13472 + C13472 + C13235 * C311 +
                     C13241 * C1398 + C13473 + C13473 + C13236 * C1400) *
                        C13238) *
                       C31016 * C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C13237 +
                   (C13288 + C13289) * C13238) *
                      C31016 * C30837 * C1118 -
                  ((C13490 + C13491) * C13238 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C13237) *
                      C31016 * C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C13237 +
                   (C13492 + C13493) * C13238) *
                      C31016 * C30837 * C1120 -
                  ((C13241 * C1128 + C14434 + C14434 + C13236 * C1140 +
                    C13239 * C1125 + C14435 + C14435 + C13235 * C1137) *
                       C13238 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C13237) *
                      C31016 * C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C13237 +
                   (C13239 * C1128 + C14440 + C14440 + C13235 * C1140 +
                    C13241 * C5751 + C14441 + C14441 + C13236 * C5753) *
                       C13238) *
                      C31016 * C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C30878 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C30885 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30837 * C2848) *
                      C30796 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C30885 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C30878 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C2848) *
                      C30805 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C30878 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C30885 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C2848) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C30878 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C30885 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C31063 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C2848) *
                      C2588 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C30878 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30885 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C31063) *
                       C2848) *
                      C30802)) /
                (p * q * std::sqrt(p + q));
    d2ee[27] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C31137 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C31133 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30837 * C31123 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C30837 * C31103) *
                      C2588 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C31133 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31137 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31123 +
                   ((C14741 + C14740) * C30767 * C18991 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C30767 * C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C2480 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C30882) *
                      C31136 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C2480) *
                      C31129 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C2480 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C30882) *
                      C31116 +
                  (((C13841 + C13840) * C30767 * C18991 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C30837 * C2480) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31131 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C31120 +
                    ((C24799 + C24798) * C30767 * C18991 +
                     (C26530 + C26531) * C30767 * C18992) *
                        C31096) *
                       C2480 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C31120 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31131 -
                    ((C26998 + C26999) * C30767 * C18992 +
                     (C25667 + C25666) * C30767 * C18991) *
                        C31096) *
                       C30882) *
                      C2588 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C31120 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31131 -
                    ((C15810 + C15811) * C30767 * C18992 +
                     (C13695 + C13694) * C30767 * C18991) *
                        C31096) *
                       C2480 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31131 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C31120 +
                    ((C15669 + C15668) * C30767 * C18991 +
                     (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                      C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                         C30767 * C18992) *
                        C31096) *
                       C30882) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[28] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C30796 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C2480 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C30805 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C31063 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[29] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C2480 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C30882) *
                      C31136 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C2480) *
                      C31129 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C2480 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C30882) *
                      C31116 +
                  (((C13841 + C13840) * C30767 * C18991 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C30837 * C2480) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C31137 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C31133 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30837 * C31123 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C30837 * C31103) *
                      C2588 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C31133 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31137 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31123 +
                   ((C14741 + C14740) * C30767 * C18991 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C30767 * C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[30] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C30878 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C30885 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C3242 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C2848) *
                      C31048 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C30878 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30885 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C3242) *
                       C2848) *
                      C30802)) /
                (p * q * std::sqrt(p + q));
    d2ee[31] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30920 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30927 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C3750) *
                      C30878 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C30927 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30920 -
                   ((C26998 + C26999) * C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C3750) *
                      C30885 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30920 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C30927 +
                   ((C25671 + C25670) * C30767 * C18991 +
                    (C13239 * C6295 + C25652 + C25652 + C13235 * C6301 +
                     C13241 * C6664 + C25653 + C25653 + C13236 * C6666) *
                        C30767 * C18992) *
                       C3750) *
                      C2848) *
                 C30791) /
                (p * q * std::sqrt(p + q));
    d2ee[32] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C3242 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C31137 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C30924 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C3242) *
                      C31133 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C3242 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C30924) *
                      C31123 +
                  (((C26136 + C26137) * C30767 * C18991 +
                    (C13239 * C5635 + C26130 + C26130 + C13235 * C5641 +
                     C13241 * C5637 + C26131 + C26131 + C13236 * C5643) *
                        C30767 * C18992) *
                       C30924 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C3242) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C31127 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C2480 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C31114 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C3242 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31138 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31135 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C31126 -
                   ((C26532 + C26533) * C30767 * C18992 +
                    (C26531 + C26530) * C30767 * C18991) *
                       C31109) *
                      C2480 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C31135 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C31138 -
                   ((C26998 + C26999) * C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C31126 +
                   ((C26999 + C26998) * C30767 * C18991 +
                    (C13239 * C6296 + C26992 + C26992 + C13235 * C6302 +
                     C13241 * C6297 + C26993 + C26993 + C13236 * C6303) *
                        C30767 * C18992) *
                       C31109) *
                      C30882) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[33] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C30920 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30927 +
                    ((C24799 + C24798) * C30767 * C18991 +
                     (C26530 + C26531) * C30767 * C18992) *
                        C3750) *
                       C2480 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30927 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C30920 -
                    ((C26998 + C26999) * C30767 * C18992 +
                     (C25667 + C25666) * C30767 * C18991) *
                        C3750) *
                       C30882) *
                      C31048 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30927 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C30920 -
                    ((C15810 + C15811) * C30767 * C18992 +
                     (C13695 + C13694) * C30767 * C18991) *
                        C3750) *
                       C2480 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C30920 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30927 +
                    ((C15669 + C15668) * C30767 * C18991 +
                     (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                      C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                         C30767 * C18992) *
                        C3750) *
                       C30882) *
                      C30802)) /
                (p * q * std::sqrt(p + q));
    d2ee[34] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C31127 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C2480 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C31114 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C3242 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C2480 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C3242 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C31137 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C30924 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C3242) *
                      C31133 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C3242 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C30924) *
                      C31123 +
                  (((C26136 + C26137) * C30767 * C18991 +
                    (C13239 * C5635 + C26130 + C26130 + C13235 * C5641 +
                     C13241 * C5637 + C26131 + C26131 + C13236 * C5643) *
                        C30767 * C18992) *
                       C30924 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C3242) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[35] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1392 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1393 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30837 * C1394 -
                   ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                     C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                        C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C30837 * C31103) *
                      C31048 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1393 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1392 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C1394 +
                   ((C14741 + C14740) * C30767 * C18991 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C30767 * C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C31062 -
                   ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                     C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                        C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C30882) *
                      C637 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31062) *
                      C638 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C31062 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C30882) *
                      C639 +
                  (((C13841 + C13840) * C30767 * C18991 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C30837 * C31062) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C1792 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C1793 +
                    ((C24799 + C24798) * C30767 * C18991 +
                     (C26530 + C26531) * C30767 * C18992) *
                        C31096) *
                       C31062 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C1793 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C1792 -
                    ((C13241 * C6295 + C15943 + C15943 + C13236 * C6301 +
                      C13239 * C2370 + C15942 + C15942 + C13235 * C2376) *
                         C30767 * C18992 +
                     (C25667 + C25666) * C30767 * C18991) *
                        C31096) *
                       C30882) *
                      C31048 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C1793 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C1792 -
                    ((C15810 + C15811) * C30767 * C18992 +
                     (C13695 + C13694) * C30767 * C18991) *
                        C31096) *
                       C31062 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C1792 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C1793 +
                    ((C15669 + C15668) * C30767 * C18991 +
                     (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                      C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                         C30767 * C18992) *
                        C31096) *
                       C30882) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[36] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31063 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C1392 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C30924 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C31063) *
                      C1393 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C31063 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C30924) *
                      C1394 +
                  (((C26136 + C26137) * C30767 * C18991 +
                    (C13239 * C5635 + C26130 + C26130 + C13235 * C5641 +
                     C13241 * C5637 + C26131 + C26131 + C13236 * C5643) *
                        C30767 * C18992) *
                       C30924 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C31063) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C13239 * C1260 + C14591 + C14591 + C13235 * C1278 +
                      C13241 * C1264 + C14590 + C14590 + C13236 * C1282) *
                         C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C281 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C31062 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C282 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C31063 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C2254 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C2255 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C2256 -
                   ((C26532 + C26533) * C30767 * C18992 +
                    (C26531 + C26530) * C30767 * C18991) *
                       C31109) *
                      C31062 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C2255 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C2254 -
                   ((C26998 + C26999) * C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C2256 +
                   ((C26999 + C26998) * C30767 * C18991 +
                    (C13239 * C6296 + C26992 + C26992 + C13235 * C6302 +
                     C13241 * C6297 + C26993 + C26993 + C13236 * C6303) *
                        C30767 * C18992) *
                       C31109) *
                      C30882) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[37] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                        C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                           C30767 * C18991 +
                       (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                        C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                           C30767 * C18992) *
                          C30837 * C30819 * C108 -
                      ((C13692 + C13693) * C30767 * C18992 +
                       (C13289 + C13288) * C30767 * C18991) *
                          C30837 * C30819 * C109 +
                      ((C13291 + C13290) * C30767 * C18991 +
                       (C13696 + C13697) * C30767 * C18992) *
                          C30837 * C30819 * C110 -
                      ((C13982 + C13983) * C30767 * C18992 +
                       (C13293 + C13292) * C30767 * C18991) *
                          C30837 * C30819 * C111 +
                      ((C13295 + C13294) * C30767 * C18991 +
                       (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                        C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                           C30767 * C18992) *
                          C30837 * C30819 * C112) +
                 std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                     ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                         C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                            C30767 * C18991 +
                        (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                         C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                            C30767 * C18992) *
                           C30837 * C31130 -
                       ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                         C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                            C30767 * C18992 +
                        (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                         C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                            C30767 * C18991) *
                           C30837 * C31118 +
                       ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                         C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                            C30767 * C18991 +
                        (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                         C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                            C30767 * C18992) *
                           C30837 * C31093) *
                          C281 +
                      (((C13491 + C13490) * C30767 * C18991 +
                        (C14202 + C14203) * C30767 * C18992) *
                           C30837 * C31118 -
                       ((C13692 + C13693) * C30767 * C18992 +
                        (C13289 + C13288) * C30767 * C18991) *
                           C30837 * C31130 -
                       ((C14946 + C14947) * C30767 * C18992 +
                        (C13493 + C13492) * C30767 * C18991) *
                           C30837 * C31093) *
                          C282 +
                      (((C13291 + C13290) * C30767 * C18991 +
                        (C13696 + C13697) * C30767 * C18992) *
                           C30837 * C31130 -
                       ((C14204 + C14205) * C30767 * C18992 +
                        (C13495 + C13494) * C30767 * C18991) *
                           C30837 * C31118 +
                       ((C13497 + C13496) * C30767 * C18991 +
                        (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                         C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                            C30767 * C18992) *
                           C30837 * C31093) *
                          C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31131 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31120 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C281 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C31120 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C31131 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C31096) *
                      C30819 * C282 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C31131 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C31120 +
                   ((C13699 + C13698) * C30767 * C18991 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1051 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1050 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C24796 + C24797) * C30767 * C18992) *
                      C30837 * C1118 -
                  ((C25263 + C25262) * C30767 * C18992 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C30767 * C18991) *
                      C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C30767 * C18991 +
                   (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                    C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                       C30767 * C18992) *
                      C30837 * C1120 -
                  ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                    C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                       C30767 * C18992 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C30767 * C18991) *
                      C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C30767 * C18991 +
                   (C13239 * C5636 + C25492 + C25492 + C13235 * C5642 +
                    C13241 * C6007 + C25493 + C25493 + C13236 * C6009) *
                       C30767 * C18992) *
                      C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31131 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31120 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C1050 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C31120 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C31131 -
                   ((C13241 * C6295 + C15943 + C15943 + C13236 * C6301 +
                     C13239 * C2370 + C15942 + C15942 + C13235 * C2376) *
                        C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C31096) *
                      C1051 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C31131 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C31120 +
                   ((C25671 + C25670) * C30767 * C18991 +
                    (C13239 * C6295 + C25652 + C25652 + C13235 * C6301 +
                     C13241 * C6664 + C25653 + C25653 + C13236 * C6666) *
                        C30767 * C18992) *
                       C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C1792 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C1793 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31127 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C1793 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C1792 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C31096) *
                      C30819 * C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C1792 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C1793 +
                   ((C13699 + C13698) * C30767 * C18991 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C1792 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C1793 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C31130 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C1793 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C1792 -
                   ((C13241 * C6295 + C15943 + C15943 + C13236 * C6301 +
                     C13239 * C2370 + C15942 + C15942 + C13235 * C2376) *
                        C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C31096) *
                      C31118 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C1792 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C1793 +
                   ((C25671 + C25670) * C30767 * C18991 +
                    (C13239 * C6295 + C25652 + C25652 + C13235 * C6301 +
                     C13241 * C6664 + C25653 + C25653 + C13236 * C6666) *
                        C30767 * C18992) *
                       C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C24796 + C24797) * C30767 * C18992) *
                      C1967 -
                  ((C24798 + C24799) * C30767 * C18992 +
                   (C24797 + C24796) * C30767 * C18991) *
                      C1968 +
                  ((C24799 + C24798) * C30767 * C18991 +
                   (C26530 + C26531) * C30767 * C18992) *
                      C1969 -
                  ((C26532 + C26533) * C30767 * C18992 +
                   (C26531 + C26530) * C30767 * C18991) *
                      C1970 +
                  ((C26533 + C26532) * C30767 * C18991 +
                   (C13239 * C10529 + C26520 + C26520 + C13235 * C10533 +
                    C13241 * C10911 + C26521 + C26521 + C13236 * C10913) *
                       C30767 * C18992) *
                      C1971) *
                 C30819 * C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[38] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C1050 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C1051 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C31063 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C31093) *
                      C31048 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C1050 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C1051 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C31063) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31063 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C30819 * C637 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C30924 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C31063) *
                      C30819 * C638 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C31063 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C30924) *
                      C30819 * C639 +
                  (((C13983 + C13982) * C30767 * C18991 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C30767 * C18992) *
                       C30924 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C31063) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C2254 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C2255 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C2256 -
                   ((C26532 + C26533) * C30767 * C18992 +
                    (C26531 + C26530) * C30767 * C18991) *
                       C31109) *
                      C30819 * C31048 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C2255 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C2254 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C2256 +
                   ((C15811 + C15810) * C30767 * C18991 +
                    (C13239 * C1976 + C15462 + C15462 + C13235 * C1988 +
                     C13241 * C10695 + C15463 + C15463 + C13236 * C10697) *
                        C30767 * C18992) *
                       C31109) *
                      C30819 * C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[39] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                     C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                        C30767 * C18992) *
                       C30837 * C31130 -
                   ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                     C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                        C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C31118 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31130 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C31130 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                    C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                       C30767 * C18992) *
                      C30837 * C30819 * C108 -
                  ((C13692 + C13693) * C30767 * C18992 +
                   (C13289 + C13288) * C30767 * C18991) *
                      C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C30767 * C18991 +
                   (C13696 + C13697) * C30767 * C18992) *
                      C30837 * C30819 * C110 -
                  ((C13982 + C13983) * C30767 * C18992 +
                   (C13293 + C13292) * C30767 * C18991) *
                      C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C30767 * C18991 +
                   (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                    C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                       C30767 * C18992) *
                      C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1051 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1050 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C24796 + C24797) * C30767 * C18992) *
                      C30837 * C1118 -
                  ((C25263 + C25262) * C30767 * C18992 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C30767 * C18991) *
                      C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C30767 * C18991 +
                   (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                    C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                       C30767 * C18992) *
                      C30837 * C1120 -
                  ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                    C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                       C30767 * C18992 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C30767 * C18991) *
                      C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C30767 * C18991 +
                   (C13239 * C5636 + C25492 + C25492 + C13235 * C5642 +
                    C13241 * C6007 + C25493 + C25493 + C13236 * C6009) *
                       C30767 * C18992) *
                      C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C1792 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C1793 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31127 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C1793 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C1792 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C31096) *
                      C30819 * C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C1792 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C1793 +
                   ((C13699 + C13698) * C30767 * C18991 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C1792 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C1793 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C31130 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C1793 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C1792 -
                   ((C13241 * C6295 + C15943 + C15943 + C13236 * C6301 +
                     C13239 * C2370 + C15942 + C15942 + C13235 * C2376) *
                        C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C31096) *
                      C31118 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C1792 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C1793 +
                   ((C25671 + C25670) * C30767 * C18991 +
                    (C13239 * C6295 + C25652 + C25652 + C13235 * C6301 +
                     C13241 * C6664 + C25653 + C25653 + C13236 * C6666) *
                        C30767 * C18992) *
                       C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[40] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C30796 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C31062 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C30805 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C3242 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C3242) *
                       C30882) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[41] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C30920 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30927 +
                    ((C24799 + C24798) * C30767 * C18991 +
                     (C26530 + C26531) * C30767 * C18992) *
                        C3750) *
                       C31062 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30927 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C30920 -
                    ((C26998 + C26999) * C30767 * C18992 +
                     (C25667 + C25666) * C30767 * C18991) *
                        C3750) *
                       C30882) *
                      C2588 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30927 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C30920 -
                    ((C15810 + C15811) * C30767 * C18992 +
                     (C13695 + C13694) * C30767 * C18991) *
                        C3750) *
                       C31062 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C30920 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30927 +
                    ((C15669 + C15668) * C30767 * C18991 +
                     (C13239 * C2371 + C15944 + C15944 + C13235 * C2377 +
                      C13241 * C6560 + C15945 + C15945 + C13236 * C6562) *
                         C30767 * C18992) *
                        C3750) *
                       C30882) *
                      C30802)) /
                (p * q * std::sqrt(p + q));
    d2ee[42] += (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C31130 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C31118 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C3242 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C31093) *
                      C2588 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C31130 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C31118 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C3242) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C3242 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C30819 * C31136 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C30924 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C3242) *
                      C30819 * C31129 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C3242 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C30924) *
                      C30819 * C31116 +
                  (((C13983 + C13982) * C30767 * C18991 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C30767 * C18992) *
                       C30924 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C3242) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31138 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31135 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C31126 -
                   ((C26532 + C26533) * C30767 * C18992 +
                    (C26531 + C26530) * C30767 * C18991) *
                       C31109) *
                      C30819 * C2588 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C31135 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C31138 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C31126 +
                   ((C15811 + C15810) * C30767 * C18991 +
                    (C13239 * C1976 + C15462 + C15462 + C13235 * C1988 +
                     C13241 * C10695 + C15463 + C15463 + C13236 * C10697) *
                        C30767 * C18992) *
                       C31109) *
                      C30819 * C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[43] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30920 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30927 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C26530 + C26531) * C30767 * C18992) *
                       C3750) *
                      C30819 * C30796 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C30927 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30920 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C3750) *
                      C30819 * C30805 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30920 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C30927 +
                   ((C13699 + C13698) * C30767 * C18991 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C30767 * C18992) *
                       C3750) *
                      C30819 * C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[44] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C3242 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C30819 * C31136 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C30924 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C3242) *
                      C30819 * C31129 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C3242 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C30924) *
                      C30819 * C31116 +
                  (((C13983 + C13982) * C30767 * C18991 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C30767 * C18992) *
                       C30924 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C3242) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C3242 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C31130 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C3242) *
                       C31118 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C3242 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C31093) *
                      C2588 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C3242) *
                       C31130 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C3242 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C31118 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C3242) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[45] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C31062 -
                   ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                     C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                        C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C30882) *
                      C637 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31062) *
                      C638 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C31062 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C30882) *
                      C639 +
                  (((C13841 + C13840) * C30767 * C18991 +
                    (C13239 * C908 + C14192 + C14192 + C13235 * C918 +
                     C13241 * C1558 + C14193 + C14193 + C13236 * C1560) *
                        C30767 * C18992) *
                       C30837 * C30882 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C30837 * C31062) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1392 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1393 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C30837 * C1394 -
                   ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                     C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                        C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C30837 * C31103) *
                      C31048 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1393 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1392 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C1394 +
                   ((C14741 + C14740) * C30767 * C18991 +
                    (C13239 * C1671 + C15080 + C15080 + C13235 * C1677 +
                     C13241 * C5903 + C15081 + C15081 + C13236 * C5905) *
                        C30767 * C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[46] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C13239 * C1260 + C14591 + C14591 + C13235 * C1278 +
                      C13241 * C1264 + C14590 + C14590 + C13236 * C1282) *
                         C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C281 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C31062 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C30882) *
                      C282 +
                  ((((C13291 + C13290) * C30767 * C18991 +
                     (C13696 + C13697) * C30767 * C18992) *
                        C31063 -
                    ((C13698 + C13699) * C30767 * C18992 +
                     (C13697 + C13696) * C30767 * C18991) *
                        C30924) *
                       C31062 +
                   (((C14205 + C14204) * C30767 * C18991 +
                     (C13239 * C1258 + C15662 + C15662 + C13235 * C1276 +
                      C13241 * C1266 + C15663 + C15663 + C13236 * C1284) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14204 + C14205) * C30767 * C18992 +
                     (C13495 + C13494) * C30767 * C18991) *
                        C31063) *
                       C30882) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31063 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C1392 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C30924 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C31063) *
                      C1393 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C31063 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C30924) *
                      C1394 +
                  (((C26136 + C26137) * C30767 * C18991 +
                    (C13239 * C5635 + C26130 + C26130 + C13235 * C5641 +
                     C13241 * C5637 + C26131 + C26131 + C13236 * C5643) *
                        C30767 * C18992) *
                       C30924 -
                   ((C26137 + C26136) * C30767 * C18992 +
                    (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                     C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                        C30767 * C18991) *
                       C31063) *
                      C31103) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[47] += (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                     C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                        C30767 * C18992) *
                       C30837 * C31130 -
                   ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                     C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                        C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C31118 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31130 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C31130 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                    C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                       C30767 * C18992) *
                      C30837 * C30819 * C108 -
                  ((C13692 + C13693) * C30767 * C18992 +
                   (C13289 + C13288) * C30767 * C18991) *
                      C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C30767 * C18991 +
                   (C13696 + C13697) * C30767 * C18992) *
                      C30837 * C30819 * C110 -
                  ((C13982 + C13983) * C30767 * C18992 +
                   (C13293 + C13292) * C30767 * C18991) *
                      C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C30767 * C18991 +
                   (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                    C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                       C30767 * C18992) *
                      C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31131 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31120 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C281 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C31120 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C31131 -
                   ((C15810 + C15811) * C30767 * C18992 +
                    (C13695 + C13694) * C30767 * C18991) *
                       C31096) *
                      C30819 * C282 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C31131 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C31120 +
                   ((C13699 + C13698) * C30767 * C18991 +
                    (C13239 * C1972 + C15804 + C15804 + C13235 * C1984 +
                     C13241 * C2372 + C15805 + C15805 + C13236 * C2378) *
                        C30767 * C18992) *
                       C31096) *
                      C30819 * C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1051 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1050 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C24796 + C24797) * C30767 * C18992) *
                      C30837 * C1118 -
                  ((C25263 + C25262) * C30767 * C18992 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C30767 * C18991) *
                      C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C30767 * C18991 +
                   (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                    C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                       C30767 * C18992) *
                      C30837 * C1120 -
                  ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                    C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                       C30767 * C18992 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C30767 * C18991) *
                      C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C30767 * C18991 +
                   (C13239 * C5636 + C25492 + C25492 + C13235 * C5642 +
                    C13241 * C6007 + C25493 + C25493 + C13236 * C6009) *
                       C30767 * C18992) *
                      C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31131 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C31120 +
                   ((C24799 + C24798) * C30767 * C18991 +
                    (C13239 * C1974 + C15459 + C15459 + C13235 * C1986 +
                     C13241 * C2370 + C15458 + C15458 + C13236 * C2376) *
                        C30767 * C18992) *
                       C31096) *
                      C1050 +
                  (((C25262 + C25263) * C30767 * C18991 +
                    (C25666 + C25667) * C30767 * C18992) *
                       C31120 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C31131 -
                   ((C13241 * C6295 + C15943 + C15943 + C13236 * C6301 +
                     C13239 * C2370 + C15942 + C15942 + C13235 * C2376) *
                        C30767 * C18992 +
                    (C25667 + C25666) * C30767 * C18991) *
                       C31096) *
                      C1051 +
                  (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C25668 + C25669) * C30767 * C18992) *
                       C31131 -
                   ((C25670 + C25671) * C30767 * C18992 +
                    (C25669 + C25668) * C30767 * C18991) *
                       C31120 +
                   ((C25671 + C25670) * C30767 * C18991 +
                    (C13239 * C6295 + C25652 + C25652 + C13235 * C6301 +
                     C13241 * C6664 + C25653 + C25653 + C13236 * C6666) *
                        C30767 * C18992) *
                       C31096) *
                      C31093) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[48] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C31063 -
                   ((C24798 + C24799) * C30767 * C18992 +
                    (C24797 + C24796) * C30767 * C18991) *
                       C30924) *
                      C30819 * C637 +
                  (((C13693 + C13692) * C30767 * C18991 +
                    (C13694 + C13695) * C30767 * C18992) *
                       C30924 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C31063) *
                      C30819 * C638 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C31063 -
                   ((C13698 + C13699) * C30767 * C18992 +
                    (C13697 + C13696) * C30767 * C18991) *
                       C30924) *
                      C30819 * C639 +
                  (((C13983 + C13982) * C30767 * C18991 +
                    (C13239 * C474 + C13674 + C13674 + C13235 * C494 +
                     C13241 * C2142 + C13675 + C13675 + C13236 * C2144) *
                        C30767 * C18992) *
                       C30924 -
                   ((C13982 + C13983) * C30767 * C18992 +
                    (C13293 + C13292) * C30767 * C18991) *
                       C31063) *
                      C30819 * C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                      C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                         C30767 * C18991 +
                     (C24796 + C24797) * C30767 * C18992) *
                        C31063 -
                    ((C24798 + C24799) * C30767 * C18992 +
                     (C24797 + C24796) * C30767 * C18991) *
                        C30924) *
                       C1050 +
                   (((C25262 + C25263) * C30767 * C18991 +
                     (C25666 + C25667) * C30767 * C18992) *
                        C30924 -
                    ((C25263 + C25262) * C30767 * C18992 +
                     (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                      C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                         C30767 * C18991) *
                        C31063) *
                       C1051 +
                   (((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                      C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                         C30767 * C18991 +
                     (C25668 + C25669) * C30767 * C18992) *
                        C31063 -
                    ((C25670 + C25671) * C30767 * C18992 +
                     (C25669 + C25668) * C30767 * C18991) *
                        C30924) *
                       C31093) *
                      C31048 +
                  ((((C13693 + C13692) * C30767 * C18991 +
                     (C13694 + C13695) * C30767 * C18992) *
                        C30924 -
                    ((C13692 + C13693) * C30767 * C18992 +
                     (C13289 + C13288) * C30767 * C18991) *
                        C31063) *
                       C1050 +
                   (((C13491 + C13490) * C30767 * C18991 +
                     (C14202 + C14203) * C30767 * C18992) *
                        C31063 -
                    ((C15668 + C15669) * C30767 * C18992 +
                     (C14203 + C14202) * C30767 * C18991) *
                        C30924) *
                       C1051 +
                   (((C14947 + C14946) * C30767 * C18991 +
                     (C13239 * C1265 + C14598 + C14598 + C13235 * C1283 +
                      C13241 * C6456 + C14599 + C14599 + C13236 * C6458) *
                         C30767 * C18992) *
                        C30924 -
                    ((C14946 + C14947) * C30767 * C18992 +
                     (C13493 + C13492) * C30767 * C18991) *
                        C31063) *
                       C31093) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[49] += (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                    C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                       C30767 * C18992) *
                      C30837 * C30819 * C108 -
                  ((C13692 + C13693) * C30767 * C18992 +
                   (C13289 + C13288) * C30767 * C18991) *
                      C30837 * C30819 * C109 +
                  ((C13291 + C13290) * C30767 * C18991 +
                   (C13696 + C13697) * C30767 * C18992) *
                      C30837 * C30819 * C110 -
                  ((C13982 + C13983) * C30767 * C18992 +
                   (C13293 + C13292) * C30767 * C18991) *
                      C30837 * C30819 * C111 +
                  ((C13295 + C13294) * C30767 * C18991 +
                   (C13239 * C475 + C13976 + C13976 + C13235 * C495 +
                    C13241 * C909 + C13977 + C13977 + C13236 * C919) *
                       C30767 * C18992) *
                      C30837 * C30819 * C112)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C13239 * C469 + C13651 + C13651 + C13235 * C489 +
                     C13241 * C905 + C13650 + C13650 + C13236 * C915) *
                        C30767 * C18992) *
                       C30837 * C31130 -
                   ((C13241 * C1263 + C14179 + C14179 + C13236 * C1281 +
                     C13239 * C905 + C14178 + C14178 + C13235 * C915) *
                        C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C281 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C31118 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C31130 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C282 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C31130 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C31118 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 ((((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                     C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                        C30767 * C18991 +
                    (C24796 + C24797) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C25263 + C25262) * C30767 * C18992 +
                    (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                     C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                        C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                     C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                        C30767 * C18991 +
                    (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                     C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31127 +
                  (((C13491 + C13490) * C30767 * C18991 +
                    (C14202 + C14203) * C30767 * C18992) *
                       C30837 * C1051 -
                   ((C13692 + C13693) * C30767 * C18992 +
                    (C13289 + C13288) * C30767 * C18991) *
                       C30837 * C1050 -
                   ((C14946 + C14947) * C30767 * C18992 +
                    (C13493 + C13492) * C30767 * C18991) *
                       C30837 * C31093) *
                      C31114 +
                  (((C13291 + C13290) * C30767 * C18991 +
                    (C13696 + C13697) * C30767 * C18992) *
                       C30837 * C1050 -
                   ((C14204 + C14205) * C30767 * C18992 +
                    (C13495 + C13494) * C30767 * C18991) *
                       C30837 * C1051 +
                   ((C13497 + C13496) * C30767 * C18991 +
                    (C13239 * C1261 + C14940 + C14940 + C13235 * C1279 +
                     C13241 * C1672 + C14941 + C14941 + C13236 * C1678) *
                        C30767 * C18992) *
                       C30837 * C31093) *
                      C31087)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
                 (((C13239 * C115 + C13244 + C13244 + C13235 * C129 +
                    C13241 * C286 + C13245 + C13245 + C13236 * C306) *
                       C30767 * C18991 +
                   (C24796 + C24797) * C30767 * C18992) *
                      C30837 * C1118 -
                  ((C25263 + C25262) * C30767 * C18992 +
                   (C13241 * C287 + C13448 + C13448 + C13236 * C307 +
                    C13239 * C286 + C13449 + C13449 + C13235 * C306) *
                       C30767 * C18991) *
                      C30837 * C1119 +
                  ((C13239 * C287 + C13450 + C13450 + C13235 * C307 +
                    C13241 * C1126 + C13451 + C13451 + C13236 * C1138) *
                       C30767 * C18991 +
                   (C13239 * C1263 + C14595 + C14595 + C13235 * C1281 +
                    C13241 * C1670 + C14594 + C14594 + C13236 * C1676) *
                       C30767 * C18992) *
                      C30837 * C1120 -
                  ((C13241 * C5636 + C15079 + C15079 + C13236 * C5642 +
                    C13239 * C1670 + C15078 + C15078 + C13235 * C1676) *
                       C30767 * C18992 +
                   (C13241 * C1127 + C14436 + C14436 + C13236 * C1139 +
                    C13239 * C1126 + C14437 + C14437 + C13235 * C1138) *
                       C30767 * C18991) *
                      C30837 * C1121 +
                  ((C13239 * C1127 + C14438 + C14438 + C13235 * C1139 +
                    C13241 * C5513 + C14439 + C14439 + C13236 * C5517) *
                       C30767 * C18991 +
                   (C13239 * C5636 + C25492 + C25492 + C13235 * C5642 +
                    C13241 * C6007 + C25493 + C25493 + C13236 * C6009) *
                       C30767 * C18992) *
                      C30837 * C1122) *
                 C30791) /
                    (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C30878 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30885 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C2848) *
              C30796 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30885 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C30878 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C2848) *
              C30805 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C30878 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30885 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C2848) *
              C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C30878 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30885 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C2848) *
              C30796 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30885 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C30878 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C2848) *
              C30805 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C30878 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30885 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C2848) *
              C2851)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C30878 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C30885 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30837 * C2848) *
              C30796 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C30885 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C30878 -
           (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C30837 *
               C2848) *
              C30805 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C30878 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C30885 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C2848) *
              C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C30878 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30885 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C2848) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C30878 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30885 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C30878 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C31063 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C2848) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C30878 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30885 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C30878 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C31063 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C2848) *
              C2588 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C30878 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30885 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) *
                C31063) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C2480 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C30882) *
                  C31136 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C30882 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C2480) *
                  C31129 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C2480 -
               (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
                   C30882) *
                  C31116 +
              ((C353 * C102 + C650 * C103 +
                (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
                   C31016 * C30837 * C30882 -
               (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
                   C2480) *
                  C31097) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C31137 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C31133 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C31123 -
               (C1411 * C104 + C1412 * C103 +
                (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
                   C31016 * C30837 * C31103) *
                  C2588 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C31133 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C31137 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C31123 +
               (C1412 * C102 + C1411 * C103 +
                (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
                   C31016 * C30837 * C31103) *
                  C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31131 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C31120 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C31096) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C31120 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31131 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C31096) *
               C30882) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31131 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C31120 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C31136 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C2480) *
              C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C31116 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31133 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31123 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C2588 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31133 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31123 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31131 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C31120 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C31096) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C31120 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31131 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C31096) *
               C30882) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C31120 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31131 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C31096) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31131 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C31120 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C2480 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C30882) *
              C31136 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C30882 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C2480) *
              C31129 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C2480 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C30882) *
              C31116 +
          ((C353 * C30767 * C8964 + C940 * C30767 * C8965 +
            (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C30767 * C8966) *
               C30837 * C30882 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C30837 *
               C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C31137 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31133 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30837 * C31123 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C30837 * C31103) *
              C2588 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C31133 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C31137 -
           (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C30837 *
               C31123 +
           (C1412 * C30767 * C8964 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C30767 * C8965 +
            (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C30767 * C8966) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31131 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31120 +
            (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C31096) *
               C2480 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C31120 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31131 -
            (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C31096) *
               C30882) *
              C2588 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C31120 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31131 -
            (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C31096) *
               C2480 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31131 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C31120 +
            (C9561 * C8964 + C10705 * C8965 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C30767 *
                 C8966) *
                C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C30796 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30882) *
              C30796 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C2480 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C30882) *
              C30796 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C2480 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30882) *
              C30805 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31063 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C2480 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C31063) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31137 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31133 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31123 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C2588 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31133 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31137 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31123 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C2480 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C31136 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C2480) *
              C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C2480 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C31116 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C31136 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C2480) *
              C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C31116 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31133 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31123 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C2588 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31133 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31123 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C2480 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C30882) *
              C31136 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C30882 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C2480) *
              C31129 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C2480 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C30882) *
              C31116 +
          ((C353 * C30767 * C8964 + C940 * C30767 * C8965 +
            (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C30767 * C8966) *
               C30837 * C30882 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C30837 *
               C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C31137 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31133 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30837 * C31123 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C30837 * C31103) *
              C2588 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C31133 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C31137 -
           (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C30837 *
               C31123 +
           (C1412 * C30767 * C8964 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C30767 * C8965 +
            (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C30767 * C8966) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C30878 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30885 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C2848) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C30878 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30885 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C30878 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C2848) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C30878 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30885 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C30878 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C3242 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C2848) *
              C31048 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C30878 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30885 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C3242) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30920 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30927 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C3750) *
              C30878 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30927 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30920 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C3750) *
              C30885 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30920 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30927 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C3750) *
              C2848) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30920 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30927 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C3750) *
              C30878 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30927 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30920 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C3750) *
              C30885 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30920 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30927 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C3750) *
              C2848) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30920 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30927 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C3750) *
              C30878 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30927 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30920 -
           (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C3750) *
              C30885 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30920 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30927 +
           (C9882 * C8964 + C9883 * C8965 +
            (C113 * C6297 + C9867 + C9867 + C31002 * C6303) * C30767 * C8966) *
               C3750) *
              C2848) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                 C164 * C103 + C165 * C104) *
                    C31016 * C3242 -
                (C532 * C104 + C533 * C103 +
                 (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                    C31016 * C30924) *
                   C2480 +
               (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                 C938 * C103 + C939 * C104) *
                    C31016 * C30924 -
                (C349 * C104 + C350 * C103 +
                 (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                    C31016 * C3242) *
                   C30882) *
                  C31127 +
              (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
                (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
                   C2480 +
               ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
                (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
                   C30882) *
                  C31114 +
              (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
                (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
                   C2480 +
               ((C939 * C102 + C940 * C103 +
                 (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                    C31016 * C30924 -
                (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
                   C30882) *
                  C31087) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C3242 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C30924) *
                  C31137 +
              (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                C938 * C103 + C939 * C104) *
                   C31016 * C30924 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C3242) *
                  C31133 +
              (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C3242 -
               (C1571 * C104 + C1572 * C103 +
                (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                   C31016 * C30924) *
                  C31123 +
              (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
                (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
                (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
                   C31016 * C30924 -
               (C1411 * C104 + C1412 * C103 +
                (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
                   C31016 * C3242) *
                  C31103) *
             C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31138 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31135 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31126 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C2480 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C31135 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31138 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31126 +
           ((C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C104) *
               C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31127 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C31137 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C3242) *
              C31133 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C3242 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C31123 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31138 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31135 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31126 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C2480 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31135 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31138 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31126 +
           (C4707 * C2370 + C6668 + C6668 + C4703 * C2376 + C4709 * C6295 +
            C6669 + C6669 + C4704 * C6301 + C4711 * C6664 + C6670 + C6670 +
            C4705 * C6666) *
               C30767 * C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C2480 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C30882) *
              C31127 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C2480 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30882) *
              C31114 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C3242 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C2480 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C3242 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C31137 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C3242) *
              C31133 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C3242 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
              C31123 +
          ((C10246 * C8964 + C10247 * C8965 +
            (C113 * C6664 + C10239 + C10239 + C31002 * C6666) * C30767 *
                C8966) *
               C30924 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31138 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31135 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C31126 -
           (C10549 * C8966 + C10548 * C8965 + C9211 * C8964) * C31109) *
              C2480 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C31135 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C31138 -
           (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C31126 +
           (C9880 * C8964 + C10921 * C8965 +
            (C113 * C10911 + C10917 + C10917 + C31002 * C10913) * C30767 *
                C8966) *
               C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C30920 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30927 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C3750) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30927 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C30920 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C3750) *
               C30882) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30927 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C30920 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C3750) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C30920 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30927 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C30920 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30927 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C3750) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30927 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C30920 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C3750) *
               C30882) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30920 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30927 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C30920 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30927 +
            (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C3750) *
               C2480 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30927 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C30920 -
            (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C3750) *
               C30882) *
              C31048 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30927 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30920 -
            (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C3750) *
               C2480 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30920 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30927 +
            (C9561 * C8964 + C10705 * C8965 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C30767 *
                 C8966) *
                C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C31137 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C3242) *
              C31133 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C3242 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C31123 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30882) *
              C31127 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31127 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C31137 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C3242) *
              C31133 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C3242 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C31123 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C2480 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C30882) *
              C31127 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C2480 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30882) *
              C31114 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C3242 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C2480 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C3242 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C31137 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C3242) *
              C31133 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C3242 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
              C31123 +
          ((C10246 * C8964 + C10247 * C8965 +
            (C113 * C6664 + C10239 + C10239 + C31002 * C6666) * C30767 *
                C8966) *
               C30924 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C31062 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C30882) *
                  C637 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C30882 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C31062) *
                  C638 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C31062 -
               (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
                   C30882) *
                  C639 +
              ((C353 * C102 + C650 * C103 +
                (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
                   C31016 * C30837 * C30882 -
               (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
                   C31062) *
                  C31097) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C1392 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C1393 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C1394 -
               (C1411 * C104 + C1412 * C103 +
                (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
                   C31016 * C30837 * C31103) *
                  C31048 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C1393 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C1392 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C1394 +
               (C1412 * C102 + C1411 * C103 +
                (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
                   C31016 * C30837 * C31103) *
                  C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C1792 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C1793 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C31096) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C1793 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C1792 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C31096) *
               C30882) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C1792 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C1793 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C637 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31062) *
              C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C639 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1393 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C1394 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C31048 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1393 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C1394 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C1792 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C1793 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C31096) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C1793 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C1792 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C31096) *
               C30882) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C1793 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C1792 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C31096) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C1792 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C1793 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C31062 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C30882) *
              C637 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C30882 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C31062) *
              C638 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C31062 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C30882) *
              C639 +
          ((C353 * C30767 * C8964 + C940 * C30767 * C8965 +
            (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C30767 * C8966) *
               C30837 * C30882 -
           (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
            C166 * C30767 * C8964) *
               C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1392 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1393 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30837 * C1394 -
           ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
            (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C30837 * C31103) *
              C31048 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1393 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1392 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C1394 +
           (C1412 * C30767 * C8964 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C30767 * C8965 +
            (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C30767 * C8966) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C1792 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1793 +
            (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C31096) *
               C31062 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C1793 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C1792 -
            ((C113 * C6296 + C9859 + C9859 + C31002 * C6302) * C30767 * C8966 +
             C9880 * C8965 + C9571 * C8964) *
                C31096) *
               C30882) *
              C31048 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C1793 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C1792 -
            ((C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C30767 * C8966 +
             C9196 * C8965 + C9195 * C8964) *
                C31096) *
               C31062 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C1792 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C1793 +
            (C9561 * C8964 + C10705 * C8965 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C30767 *
                 C8966) *
                C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                 C164 * C103 + C165 * C104) *
                    C31016 * C31063 -
                (C532 * C104 + C533 * C103 +
                 (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                    C31016 * C30924) *
                   C31062 +
               (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                 C938 * C103 + C939 * C104) *
                    C31016 * C30924 -
                (C349 * C104 + C350 * C103 +
                 (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                    C31016 * C31063) *
                   C30882) *
                  C281 +
              (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
                (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
                   C31062 +
               ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
                (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
                   C30882) *
                  C282 +
              (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
                (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
                   C31062 +
               ((C939 * C102 + C940 * C103 +
                 (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                    C31016 * C30924 -
                (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
                   C30882) *
                  C31087) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C31063 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C30924) *
                  C1392 +
              (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                C938 * C103 + C939 * C104) *
                   C31016 * C30924 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C31063) *
                  C1393 +
              (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C31063 -
               (C1571 * C104 + C1572 * C103 +
                (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                   C31016 * C30924) *
                  C1394 +
              (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
                (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
                (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
                   C31016 * C30924 -
               (C1411 * C104 + C1412 * C103 +
                (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
                   C31016 * C31063) *
                  C31103) *
             C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C2255 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C31062 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C2255 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C2254 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C2256 +
           ((C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C104) *
               C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C281 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C282 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C1392 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31063) *
              C1393 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31063 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C1394 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C2254 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C2255 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C2256 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C31062 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C2255 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C2254 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C2256 +
           (C4707 * C2370 + C6668 + C6668 + C4703 * C2376 + C4709 * C6295 +
            C6669 + C6669 + C4704 * C6301 + C4711 * C6664 + C6670 + C6670 +
            C4705 * C6666) *
               C30767 * C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C31062 +
           ((C9570 * C8964 + C9571 * C8965 +
             (C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C30767 * C8966) *
                C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C30882) *
              C281 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C31062 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            ((C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C30767 * C8966 +
             C9561 * C8965 + C9560 * C8964) *
                C30924) *
               C30882) *
              C282 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31063 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C31062 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31063 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C1392 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C31063) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C31063 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
              C1394 +
          ((C10246 * C8964 + C10247 * C8965 +
            (C113 * C6664 + C10239 + C10239 + C31002 * C6666) * C30767 *
                C8966) *
               C30924 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C2254 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C2255 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C2256 -
           (C10549 * C8966 + C10548 * C8965 + C9211 * C8964) * C31109) *
              C31062 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C2255 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C2254 -
           (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C2256 +
           (C9880 * C8964 + C10921 * C8965 +
            (C113 * C10911 + C10917 + C10917 + C31002 * C10913) * C30767 *
                C8966) *
               C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
               C164 * C103 + C165 * C104) *
                  C31016 * C30837 * C30819 * C108 -
              (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                  C30819 * C109 +
              (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                  C30819 * C110 -
              (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
                  C30819 * C111 +
              (C167 * C102 + C168 * C103 +
               (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
                  C31016 * C30837 * C30819 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C31130 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C31118 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C31093) *
                  C281 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C31118 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C31130 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C31093) *
                  C282 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C31130 -
               ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 +
                C353 * C103 + C349 * C102) *
                   C31016 * C30837 * C31118 +
               (C352 * C102 + C354 * C103 +
                (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
                   C31016 * C30837 * C31093) *
                  C31087) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C31131 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C31120 +
               ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 +
                C534 * C103 + C535 * C104) *
                   C31016 * C31096) *
                  C30819 * C281 +
              ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
               (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
                  C30819 * C282 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31131 -
               ((C113 * C475 + C518 + C518 + C31002 * C495) * C104 +
                C536 * C103 + C532 * C102) *
                   C31016 * C31120 +
               (C535 * C102 + C537 * C103 +
                (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
                   C31016 * C31096) *
                  C30819 * C31087) -
         0.25 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C1050 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C1051 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C31093) *
                  C31127 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C1051 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C1050 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C31093) *
                  C31114 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C1050 -
               (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
                   C1051 +
               (C352 * C102 + C354 * C103 +
                (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
                   C31016 * C30837 * C31093) *
                  C31087) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
               C164 * C103 + C165 * C104) *
                  C31016 * C30837 * C1118 -
              (C349 * C104 + C350 * C103 +
               (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                  C31016 * C30837 * C1119 +
              ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
               C351 * C103 + C352 * C104) *
                  C31016 * C30837 * C1120 -
              ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
               (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
               (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
                  C31016 * C30837 * C1121 +
              ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
               (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
               (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
                  C31016 * C30837 * C1122) *
             C30791 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C31131 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C31120 +
               ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 +
                C534 * C103 + C535 * C104) *
                   C31016 * C31096) *
                  C1050 +
              (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                C938 * C103 + C939 * C104) *
                   C31016 * C31120 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C31131 -
               ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
                (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
                (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                   C31016 * C31096) *
                  C1051 +
              (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C31131 -
               ((C113 * C1261 + C1289 + C1289 + C31002 * C1279) * C104 +
                (C113 * C1262 + C1290 + C1290 + C31002 * C1280) * C103 +
                (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                   C31016 * C31120 +
               ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
                (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
                (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
                   C31016 * C31096) *
                  C31093) *
             C30791 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C1792 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C1793 +
               ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 +
                C534 * C103 + C535 * C104) *
                   C31016 * C31096) *
                  C30819 * C31127 +
              ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
               (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
                  C30819 * C31114 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C1792 -
               (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C1793 +
               (C535 * C102 + C537 * C103 +
                (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
                   C31016 * C31096) *
                  C30819 * C31087) +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C1792 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C1793 +
               ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 +
                C534 * C103 + C535 * C104) *
                   C31016 * C31096) *
                  C31130 +
              (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                C938 * C103 + C939 * C104) *
                   C31016 * C1793 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C1792 -
               ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
                (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
                (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                   C31016 * C31096) *
                  C31118 +
              (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C1792 -
               (C1571 * C104 + C1572 * C103 +
                (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                   C31016 * C1793 +
               ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
                (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
                (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
                   C31016 * C31096) *
                  C31093) *
             C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C1967 -
          (C532 * C104 + C533 * C103 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
              C31016 * C1968 +
          ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
           C535 * C104) *
              C31016 * C1969 -
          ((C113 * C1972 + C1991 + C1991 + C31002 * C1984) * C104 +
           (C113 * C1973 + C1992 + C1992 + C31002 * C1985) * C103 +
           (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
              C31016 * C1970 +
          ((C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C102 +
           (C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C103 +
           (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C104) *
              C31016 * C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C281 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31120 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31131 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31131 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C31120 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C1050 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31120 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31131 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C1051 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31131 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C31120 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C31127 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C1793 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C1792 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C1792 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C1793 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C31130 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C1793 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C1792 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C31118 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C1792 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C1793 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C1967 -
          (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
           C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
           C4703 * C489) *
              C30767 * C31016 * C1968 +
          (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 + C4971 +
           C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
           C4705 * C1282) *
              C30767 * C31016 * C1969 -
          (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
           C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
           C4703 * C1986) *
              C30767 * C31016 * C1970 +
          (C4707 * C1975 + C6308 + C6308 + C4703 * C1987 + C4709 * C6296 +
           C6309 + C6309 + C4704 * C6302 + C4711 * C6297 + C6310 + C6310 +
           C4705 * C6303) *
              C30767 * C31016 * C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
           (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
              C30837 * C30819 * C108 -
          (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
           C164 * C30767 * C8964) *
              C30837 * C30819 * C109 +
          (C165 * C30767 * C8964 + C532 * C30767 * C8965 +
           C535 * C30767 * C8966) *
              C30837 * C30819 * C110 -
          (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
           C166 * C30767 * C8964) *
              C30837 * C30819 * C111 +
          (C167 * C30767 * C8964 + C759 * C30767 * C8965 +
           (C113 * C476 + C519 + C519 + C31002 * C496) * C30767 * C8966) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
            (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
               C30837 * C31130 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C281 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C31118 -
           (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
            C164 * C30767 * C8964) *
               C30837 * C31130 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C282 +
          ((C165 * C30767 * C8964 + C532 * C30767 * C8965 +
            C535 * C30767 * C8966) *
               C30837 * C31130 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C31118 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31131 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31120 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C30819 * C281 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C31120 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31131 -
           ((C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C30767 * C8966 +
            C9196 * C8965 + C9195 * C8964) *
               C31096) *
              C30819 * C282 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31131 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C31120 +
           (C9198 * C8964 + C9199 * C8965 +
            (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C30767 * C8966) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1050 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C31127 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1051 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1050 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C1050 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C1051 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           C9209 * C8965 + C9210 * C8966) *
              C30837 * C1118 -
          (C9571 * C8966 + C9570 * C8965 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
              C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
           (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
           (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
              C30837 * C1120 -
          ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
           (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
              C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C30767 * C8964 +
           (C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C30767 * C8965 +
           (C113 * C5637 + C9746 + C9746 + C31002 * C5643) * C30767 * C8966) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31131 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31120 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C1050 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C31120 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C31131 -
           ((C113 * C6296 + C9859 + C9859 + C31002 * C6302) * C30767 * C8966 +
            C9880 * C8965 + C9571 * C8964) *
               C31096) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C31131 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C31120 +
           (C9882 * C8964 + C9883 * C8965 +
            (C113 * C6297 + C9867 + C9867 + C31002 * C6303) * C30767 * C8966) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C1792 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1793 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C30819 * C31127 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C1793 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C1792 -
           ((C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C30767 * C8966 +
            C9196 * C8965 + C9195 * C8964) *
               C31096) *
              C30819 * C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C1792 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C1793 +
           (C9198 * C8964 + C9199 * C8965 +
            (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C30767 * C8966) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C1792 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1793 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C31130 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C1793 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C1792 -
           ((C113 * C6296 + C9859 + C9859 + C31002 * C6302) * C30767 * C8966 +
            C9880 * C8965 + C9571 * C8964) *
               C31096) *
              C31118 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C1792 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C1793 +
           (C9882 * C8964 + C9883 * C8965 +
            (C113 * C6297 + C9867 + C9867 + C31002 * C6303) * C30767 * C8966) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           C9209 * C8965 + C9210 * C8966) *
              C1967 -
          (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1968 +
          (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C1969 -
          (C10549 * C8966 + C10548 * C8965 + C9211 * C8964) * C1970 +
          (C10548 * C8964 + C10549 * C8965 +
           (C113 * C10530 + C10541 + C10541 + C31002 * C10534) * C30767 *
               C8966) *
              C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C31063 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C30924) *
                  C30819 * C637 +
              ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
                  C30819 * C638 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
               (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
                  C30819 * C639 +
              ((C536 * C102 + C759 * C103 +
                (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
                   C31016 * C30924 -
               (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C31063) *
                  C30819 * C31097) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                 C164 * C103 + C165 * C104) *
                    C31016 * C31063 -
                (C532 * C104 + C533 * C103 +
                 (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                    C31016 * C30924) *
                   C1050 +
               (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                 C938 * C103 + C939 * C104) *
                    C31016 * C30924 -
                (C349 * C104 + C350 * C103 +
                 (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                    C31016 * C31063) *
                   C1051 +
               (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                 C351 * C103 + C352 * C104) *
                    C31016 * C31063 -
                (C1571 * C104 + C1572 * C103 +
                 (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                    C31016 * C30924) *
                   C31093) *
                  C31048 +
              (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
                (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
                   C1050 +
               ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
                (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
                   C1051 +
               ((C1572 * C102 + C1571 * C103 +
                 (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                    C31016 * C30924 -
                (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
                   C31093) *
                  C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C2255 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C30819 * C31048 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C2255 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C2254 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C2256 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C104) *
               C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C637 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31063) *
              C30819 * C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31063 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C639 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C1050 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C1051 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C1050 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C1051 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C2254 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C2255 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C2256 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C30819 * C31048 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C2255 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C2254 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C2256 +
           (C4707 * C1973 + C6564 + C6564 + C4703 * C1985 + C4709 * C2371 +
            C6565 + C6565 + C4704 * C2377 + C4711 * C6560 + C6566 + C6566 +
            C4705 * C6562) *
               C30767 * C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31063 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C30819 * C637 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
              C30819 * C638 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31063 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
              C30819 * C639 +
          ((C9408 * C8964 + C9409 * C8965 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C30767 * C8966) *
               C30924 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C1050 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C31063 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C31093) *
              C31048 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C1050 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            ((C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C30767 * C8966 +
             C9561 * C8965 + C9560 * C8964) *
                C30924) *
               C1051 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) *
                C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C2254 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C2255 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C2256 -
           (C10549 * C8966 + C10548 * C8965 + C9211 * C8964) * C31109) *
              C30819 * C31048 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C2255 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C2254 -
           (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C2256 +
           (C9196 * C8964 + C10813 * C8965 +
            (C113 * C10803 + C10809 + C10809 + C31002 * C10805) * C30767 *
                C8966) *
               C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C30819 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C30819 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C30819 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 * C30819 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
              C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31130 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31118 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31130 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31130 -
           ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C31016 * C30837 * C31118 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C31127 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C1792 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C1793 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C31130 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C1793 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C1792 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C31118 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C1792 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C1793 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C31127 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C1793 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C1792 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C1792 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C1793 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C31130 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C1793 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C1792 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C31118 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C1792 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C1793 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
           (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
              C30837 * C30819 * C108 -
          (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
           C164 * C30767 * C8964) *
              C30837 * C30819 * C109 +
          (C165 * C30767 * C8964 + C532 * C30767 * C8965 +
           C535 * C30767 * C8966) *
              C30837 * C30819 * C110 -
          (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
           C166 * C30767 * C8964) *
              C30837 * C30819 * C111 +
          (C167 * C30767 * C8964 + C759 * C30767 * C8965 +
           (C113 * C476 + C519 + C519 + C31002 * C496) * C30767 * C8966) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
            (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
               C30837 * C31130 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C281 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C31118 -
           (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
            C164 * C30767 * C8964) *
               C30837 * C31130 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C282 +
          ((C165 * C30767 * C8964 + C532 * C30767 * C8965 +
            C535 * C30767 * C8966) *
               C30837 * C31130 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C31118 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1050 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C31127 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1051 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1050 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C1050 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C1051 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           C9209 * C8965 + C9210 * C8966) *
              C30837 * C1118 -
          (C9571 * C8966 + C9570 * C8965 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
              C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
           (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
           (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
              C30837 * C1120 -
          ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
           (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
              C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C30767 * C8964 +
           (C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C30767 * C8965 +
           (C113 * C5637 + C9746 + C9746 + C31002 * C5643) * C30767 * C8966) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C1792 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1793 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C30819 * C31127 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C1793 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C1792 -
           ((C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C30767 * C8966 +
            C9196 * C8965 + C9195 * C8964) *
               C31096) *
              C30819 * C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C1792 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C1793 +
           (C9198 * C8964 + C9199 * C8965 +
            (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C30767 * C8966) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C1792 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C1793 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C31130 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C1793 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C1792 -
           ((C113 * C6296 + C9859 + C9859 + C31002 * C6302) * C30767 * C8966 +
            C9880 * C8965 + C9571 * C8964) *
               C31096) *
              C31118 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C1792 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C1793 +
           (C9882 * C8964 + C9883 * C8965 +
            (C113 * C6297 + C9867 + C9867 + C31002 * C6303) * C30767 * C8966) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C30796 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30882) *
              C30796 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C31062 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C31062 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C30882) *
              C30796 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C31062 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C30882) *
              C30805 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C3242 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C31062 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C3242) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C30920 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30927 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C3750) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30927 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C30920 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C3750) *
               C30882) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30927 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C30920 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C3750) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C30920 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30927 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C30920 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30927 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C3750) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30927 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C30920 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C3750) *
               C30882) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30920 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30927 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C30920 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30927 +
            (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C3750) *
               C31062 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30927 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C30920 -
            (C10921 * C8966 + C9880 * C8965 + C9571 * C8964) * C3750) *
               C30882) *
              C2588 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30927 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30920 -
            (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C3750) *
               C31062 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30920 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30927 +
            (C9561 * C8964 + C10705 * C8965 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C30767 *
                 C8966) *
                C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C3242 -
               (C532 * C104 + C533 * C103 +
                (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                   C31016 * C30924) *
                  C30819 * C31136 +
              ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
                  C30819 * C31129 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
               (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
                  C30819 * C31116 +
              ((C536 * C102 + C759 * C103 +
                (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
                   C31016 * C30924 -
               (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C3242) *
                  C30819 * C31097) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                 C164 * C103 + C165 * C104) *
                    C31016 * C3242 -
                (C532 * C104 + C533 * C103 +
                 (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                    C31016 * C30924) *
                   C31130 +
               (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                 C938 * C103 + C939 * C104) *
                    C31016 * C30924 -
                (C349 * C104 + C350 * C103 +
                 (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                    C31016 * C3242) *
                   C31118 +
               (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                 C351 * C103 + C352 * C104) *
                    C31016 * C3242 -
                (C1571 * C104 + C1572 * C103 +
                 (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                    C31016 * C30924) *
                   C31093) *
                  C2588 +
              (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
                (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
                   C31130 +
               ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
                (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
                   C31118 +
               ((C1572 * C102 + C1571 * C103 +
                 (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                    C31016 * C30924 -
                (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
                   C31093) *
                  C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31138 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31135 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31126 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C30819 * C2588 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31135 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31138 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31126 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C104) *
               C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C31136 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C3242) *
              C30819 * C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C3242 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C31116 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31130 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C31118 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31130 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C31118 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31138 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31135 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31126 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C30819 * C2588 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31135 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31138 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31126 +
           (C4707 * C1973 + C6564 + C6564 + C4703 * C1985 + C4709 * C2371 +
            C6565 + C6565 + C4704 * C2377 + C4711 * C6560 + C6566 + C6566 +
            C4705 * C6562) *
               C30767 * C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C3242 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C30819 * C31136 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
              C30819 * C31129 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C3242 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
              C30819 * C31116 +
          ((C9408 * C8964 + C9409 * C8965 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C30767 * C8966) *
               C30924 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C31130 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C3242 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C31093) *
              C2588 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C31130 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C31118 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31138 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31135 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C31126 -
           (C10549 * C8966 + C10548 * C8965 + C9211 * C8964) * C31109) *
              C30819 * C2588 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C31135 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31138 -
           (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C31126 +
           (C9196 * C8964 + C10813 * C8965 +
            (C113 * C10803 + C10809 + C10809 + C31002 * C10805) * C30767 *
                C8966) *
               C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30920 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30927 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C3750) *
              C30819 * C30796 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30927 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30920 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C3750) *
              C30819 * C30805 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30920 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30927 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C3750) *
              C30819 * C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30920 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30927 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C3750) *
              C30819 * C30796 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
              C30819 * C30805 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30920 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30927 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C3750) *
              C30819 * C2851)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30920 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30927 +
           (C9210 * C8964 + C9211 * C8965 + C10548 * C8966) * C3750) *
              C30819 * C30796 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30927 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30920 -
           (C10813 * C8966 + C9196 * C8965 + C9195 * C8964) * C3750) *
              C30819 * C30805 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30920 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30927 +
           (C9198 * C8964 + C9199 * C8965 +
            (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C30767 * C8966) *
               C3750) *
              C30819 * C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31130 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C31130 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C31118 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C31136 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
              C30819 * C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C31116 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C31136 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C3242) *
              C30819 * C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C3242 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C31116 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31130 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C31118 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31130 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C31118 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C3242 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C30819 * C31136 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
              C30819 * C31129 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C3242 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
              C30819 * C31116 +
          ((C9408 * C8964 + C9409 * C8965 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C30767 * C8966) *
               C30924 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C3242 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C31130 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C3242) *
               C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C3242 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C31093) *
              C2588 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C3242) *
               C31130 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C3242 -
            (C10705 * C8966 + C9561 * C8965 + C9560 * C8964) * C30924) *
               C31118 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1392 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1393 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C1394 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C31048 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1393 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1392 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 * C1394 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31062 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C637 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31062) *
              C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31062 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C639 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C637 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31062) *
              C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C639 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1393 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C1394 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C31048 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1393 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C1394 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C31062 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C30882) *
              C637 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C30882 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C31062) *
              C638 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C31062 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C30882) *
              C639 +
          ((C353 * C30767 * C8964 + C940 * C30767 * C8965 +
            (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C30767 * C8966) *
               C30837 * C30882 -
           (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
            C166 * C30767 * C8964) *
               C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1392 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1393 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C30837 * C1394 -
           ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
            (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C30837 * C31103) *
              C31048 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1393 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1392 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C1394 +
           (C1412 * C30767 * C8964 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C30767 * C8965 +
            (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C30767 * C8966) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C1392 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31063) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31063 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C1394 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30882) *
              C281 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C282 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C31062 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C281 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C282 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C1392 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31063) *
              C1393 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31063 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C1394 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C31062 +
           ((C9570 * C8964 + C9571 * C8965 +
             (C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C30767 * C8966) *
                C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C30882) *
              C281 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C31062 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            ((C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C30767 * C8966 +
             C9561 * C8965 + C9560 * C8964) *
                C30924) *
               C30882) *
              C282 +
          (((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31063 -
            (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
               C31062 +
           ((C9562 * C8964 + C9563 * C8965 +
             (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C30767 * C8966) *
                C30924 -
            (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31063 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C1392 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C31063) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C31063 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
              C1394 +
          ((C10246 * C8964 + C10247 * C8965 +
            (C113 * C6664 + C10239 + C10239 + C31002 * C6666) * C30767 *
                C8966) *
               C30924 -
           (C10247 * C8966 + C10246 * C8965 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
               C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
               C164 * C103 + C165 * C104) *
                  C31016 * C30837 * C30819 * C108 -
              (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                  C30819 * C109 +
              (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                  C30819 * C110 -
              (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
                  C30819 * C111 +
              (C167 * C102 + C168 * C103 +
               (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
                  C31016 * C30837 * C30819 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C31130 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C31118 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C31093) *
                  C281 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C31118 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C31130 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C31093) *
                  C282 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C31130 -
               ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 +
                C353 * C103 + C349 * C102) *
                   C31016 * C30837 * C31118 +
               (C352 * C102 + C354 * C103 +
                (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
                   C31016 * C30837 * C31093) *
                  C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C281 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31131 -
           ((C113 * C475 + C518 + C518 + C31002 * C495) * C104 + C536 * C103 +
            C532 * C102) *
               C31016 * C31120 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C1050 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C31120 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31131 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31131 -
           ((C113 * C1261 + C1289 + C1289 + C31002 * C1279) * C104 +
            (C113 * C1262 + C1290 + C1290 + C31002 * C1280) * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C31120 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C281 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31120 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31131 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31131 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C31120 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C1050 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31120 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31131 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C1051 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31131 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C31120 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
           (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
              C30837 * C30819 * C108 -
          (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
           C164 * C30767 * C8964) *
              C30837 * C30819 * C109 +
          (C165 * C30767 * C8964 + C532 * C30767 * C8965 +
           C535 * C30767 * C8966) *
              C30837 * C30819 * C110 -
          (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
           C166 * C30767 * C8964) *
              C30837 * C30819 * C111 +
          (C167 * C30767 * C8964 + C759 * C30767 * C8965 +
           (C113 * C476 + C519 + C519 + C31002 * C496) * C30767 * C8966) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
            (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
               C30837 * C31130 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C281 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C31118 -
           (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
            C164 * C30767 * C8964) *
               C30837 * C31130 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C282 +
          ((C165 * C30767 * C8964 + C532 * C30767 * C8965 +
            C535 * C30767 * C8966) *
               C30837 * C31130 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C31118 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31131 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31120 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C30819 * C281 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C31120 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31131 -
           ((C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C30767 * C8966 +
            C9196 * C8965 + C9195 * C8964) *
               C31096) *
              C30819 * C282 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31131 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C31120 +
           (C9198 * C8964 + C9199 * C8965 +
            (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C30767 * C8966) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1050 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C31127 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1051 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1050 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C1050 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C1051 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           C9209 * C8965 + C9210 * C8966) *
              C30837 * C1118 -
          (C9571 * C8966 + C9570 * C8965 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
              C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
           (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
           (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
              C30837 * C1120 -
          ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
           (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
              C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C30767 * C8964 +
           (C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C30767 * C8965 +
           (C113 * C5637 + C9746 + C9746 + C31002 * C5643) * C30767 * C8966) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31131 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C31120 +
           (C9210 * C8964 + C9211 * C8965 +
            (C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C30767 * C8966) *
               C31096) *
              C1050 +
          ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C31120 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C31131 -
           ((C113 * C6296 + C9859 + C9859 + C31002 * C6302) * C30767 * C8966 +
            C9880 * C8965 + C9571 * C8964) *
               C31096) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            C9881 * C8965 + C9882 * C8966) *
               C31131 -
           (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C31120 +
           (C9882 * C8964 + C9883 * C8965 +
            (C113 * C6297 + C9867 + C9867 + C31002 * C6303) * C30767 * C8966) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C1050 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C31063 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C1050 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C1051 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C637 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
              C30819 * C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C639 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C637 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31063) *
              C30819 * C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31063 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C639 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C1050 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C1051 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C1050 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C1051 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C31063 -
           (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
              C30819 * C637 +
          ((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
              C30819 * C638 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C31063 -
           (C9199 * C8966 + C9198 * C8965 + C9197 * C8964) * C30924) *
              C30819 * C639 +
          ((C9408 * C8964 + C9409 * C8965 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C30767 * C8966) *
               C30924 -
           (C9409 * C8966 + C9408 * C8965 + C166 * C30767 * C8964) * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
             C9209 * C8965 + C9210 * C8966) *
                C31063 -
            (C9211 * C8966 + C9210 * C8965 + C9209 * C8964) * C30924) *
               C1050 +
           ((C9570 * C8964 + C9571 * C8965 + C9880 * C8966) * C30924 -
            (C9571 * C8966 + C9570 * C8965 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
                C31063) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
             C9881 * C8965 + C9882 * C8966) *
                C31063 -
            (C9883 * C8966 + C9882 * C8965 + C9881 * C8964) * C30924) *
               C31093) *
              C31048 +
          (((C9194 * C8964 + C9195 * C8965 + C9196 * C8966) * C30924 -
            (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C31063) *
               C1050 +
           ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C31063 -
            ((C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C30767 * C8966 +
             C9561 * C8965 + C9560 * C8964) *
                C30924) *
               C1051 +
           ((C10129 * C8964 + C10136 * C8965 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C30767 *
                 C8966) *
                C30924 -
            (C10136 * C8966 + C10129 * C8965 + C351 * C30767 * C8964) *
                C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31130 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31118 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31130 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31130 -
           ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C31016 * C30837 * C31118 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C30819 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C30819 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C30819 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 * C30819 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
              C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
           (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
              C30837 * C30819 * C108 -
          (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
           C164 * C30767 * C8964) *
              C30837 * C30819 * C109 +
          (C165 * C30767 * C8964 + C532 * C30767 * C8965 +
           C535 * C30767 * C8966) *
              C30837 * C30819 * C110 -
          (C537 * C30767 * C8966 + C536 * C30767 * C8965 +
           C166 * C30767 * C8964) *
              C30837 * C30819 * C111 +
          (C167 * C30767 * C8964 + C759 * C30767 * C8965 +
           (C113 * C476 + C519 + C519 + C31002 * C496) * C30767 * C8966) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C30767 * C8965 +
            (C113 * C470 + C505 + C505 + C31002 * C490) * C30767 * C8966) *
               C30837 * C31130 -
           ((C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C30767 * C8966 +
            (C113 * C905 + C921 + C921 + C31002 * C915) * C30767 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C281 +
          ((C350 * C30767 * C8964 + C938 * C30767 * C8965 +
            C2156 * C30767 * C8966) *
               C30837 * C31118 -
           (C534 * C30767 * C8966 + C533 * C30767 * C8965 +
            C164 * C30767 * C8964) *
               C30837 * C31130 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C282 +
          ((C165 * C30767 * C8964 + C532 * C30767 * C8965 +
            C535 * C30767 * C8966) *
               C30837 * C31130 -
           (C2155 * C30767 * C8966 + C939 * C30767 * C8965 +
            C349 * C30767 * C8964) *
               C30837 * C31118 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
            C9209 * C8965 + C9210 * C8966) *
               C30837 * C1050 -
           (C9571 * C8966 + C9570 * C8965 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
               C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
            (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
               C30837 * C31093) *
              C31127 +
          ((C350 * C30767 * C8964 + C9560 * C8965 + C9561 * C8966) * C30837 *
               C1051 -
           (C9195 * C8966 + C9194 * C8965 + C164 * C30767 * C8964) * C30837 *
               C1050 -
           ((C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C30767 * C8966 +
            C1572 * C30767 * C8965 + C351 * C30767 * C8964) *
               C30837 * C31093) *
              C31114 +
          ((C165 * C30767 * C8964 + C9197 * C8965 + C9198 * C8966) * C30837 *
               C1050 -
           (C9563 * C8966 + C9562 * C8965 + C349 * C30767 * C8964) * C30837 *
               C1051 +
           (C352 * C30767 * C8964 + C1571 * C30767 * C8965 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C30767 * C8966) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C30767 * C8964 +
           C9209 * C8965 + C9210 * C8966) *
              C30837 * C1118 -
          (C9571 * C8966 + C9570 * C8965 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C30767 * C8964) *
              C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C30767 * C8964 +
           (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C30767 * C8965 +
           (C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C30767 * C8966) *
              C30837 * C1120 -
          ((C113 * C5635 + C9744 + C9744 + C31002 * C5641) * C30767 * C8966 +
           (C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C30767 * C8965 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C30767 * C8964) *
              C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C30767 * C8964 +
           (C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C30767 * C8965 +
           (C113 * C5637 + C9746 + C9746 + C31002 * C5643) * C30767 * C8966) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[75] += (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                     C164 * C13238) *
                        C18991 +
                    (C19286 + C19287) * C18992) *
                       C30837 * C30878 -
                   ((C19755 + C19754) * C18992 +
                    (C350 * C13238 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                        C18991) *
                       C30837 * C30885 +
                   (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
                     C351 * C13238) *
                        C18991 +
                    (C20137 + C20138) * C18992) *
                       C30837 * C2848) *
                      C30796 +
                  (((C350 * C13237 + C349 * C13238) * C18991 +
                    (C19756 + C19757) * C18992) *
                       C30837 * C30885 -
                   ((C19291 + C19290) * C18992 +
                    (C165 * C13238 + C164 * C13237) * C18991) *
                       C30837 * C30878 -
                   ((C20471 + C20470) * C18992 +
                    (C352 * C13238 + C351 * C13237) * C18991) *
                       C30837 * C2848) *
                      C30805 +
                  (((C165 * C13237 + C166 * C13238) * C18991 +
                    (C19294 + C19295) * C18992) *
                       C30837 * C30878 -
                   ((C19759 + C19758) * C18992 +
                    (C353 * C13238 + C349 * C13237) * C18991) *
                       C30837 * C30885 +
                   ((C352 * C13237 + C354 * C13238) * C18991 +
                    (C1571 * C13237 +
                     (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                        C18992) *
                       C30837 * C2848) *
                      C2851)) /
                (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C30878 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C30885 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C31063 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C2848) *
              C2588 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C30878 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30885 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C31063) *
               C2848) *
              C30802)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C31137 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C31133 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C30837 * C31123 -
           ((C20603 + C20602) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C30837 * C31103) *
              C2588 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C31133 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C31137 -
           ((C20471 + C20470) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31123 +
           ((C1412 * C13237 + C1411 * C13238) * C18991 +
            (C20275 * C13237 +
             (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C13238) *
                C18992) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C2480 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C30882) *
              C31136 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C30882 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C2480) *
              C31129 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C2480 -
           ((C19759 + C19758) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C30882) *
              C31116 +
          (((C353 * C13237 + C650 * C13238) * C18991 +
            (C940 * C13237 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C13238) *
                C18992) *
               C30837 * C30882 -
           ((C19559 + C19558) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C30837 * C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31131 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31120 +
            ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) *
                C31096) *
               C2480 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C31120 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31131 -
            ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) *
                C31096) *
               C30882) *
              C2588 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C31120 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31131 -
            ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) *
                C31096) *
               C2480 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31131 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) * C31120 +
            ((C21177 + C21176) * C18991 +
             (C10704 * C13237 +
              (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C13238) *
                 C18992) *
                C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C2480 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C30882) *
              C30796 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C2480 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C30805 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C31063 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C2480 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C31063) *
               C30882) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                     C164 * C13238) *
                        C18991 +
                    (C19286 + C19287) * C18992) *
                       C30837 * C2480 -
                   ((C19755 + C19754) * C18992 +
                    (C350 * C13238 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                        C18991) *
                       C30837 * C30882) *
                      C31136 +
                  (((C350 * C13237 + C349 * C13238) * C18991 +
                    (C19756 + C19757) * C18992) *
                       C30837 * C30882 -
                   ((C19291 + C19290) * C18992 +
                    (C165 * C13238 + C164 * C13237) * C18991) *
                       C30837 * C2480) *
                      C31129 +
                  (((C165 * C13237 + C166 * C13238) * C18991 +
                    (C19294 + C19295) * C18992) *
                       C30837 * C2480 -
                   ((C19759 + C19758) * C18992 +
                    (C353 * C13238 + C349 * C13237) * C18991) *
                       C30837 * C30882) *
                      C31116 +
                  (((C353 * C13237 + C650 * C13238) * C18991 +
                    (C940 * C13237 +
                     (C113 * C909 + C931 + C931 + C31002 * C919) * C13238) *
                        C18992) *
                       C30837 * C30882 -
                   ((C19559 + C19558) * C18992 +
                    (C167 * C13238 + C166 * C13237) * C18991) *
                       C30837 * C2480) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                     C164 * C13238) *
                        C18991 +
                    (C19286 + C19287) * C18992) *
                       C30837 * C31137 -
                   ((C19755 + C19754) * C18992 +
                    (C350 * C13238 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                        C18991) *
                       C30837 * C31133 +
                   (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
                     C351 * C13238) *
                        C18991 +
                    (C20137 + C20138) * C18992) *
                       C30837 * C31123 -
                   ((C20603 + C20602) * C18992 +
                    (C1412 * C13238 +
                     (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                        C18991) *
                       C30837 * C31103) *
                      C2588 +
                  (((C350 * C13237 + C349 * C13238) * C18991 +
                    (C19756 + C19757) * C18992) *
                       C30837 * C31133 -
                   ((C19291 + C19290) * C18992 +
                    (C165 * C13238 + C164 * C13237) * C18991) *
                       C30837 * C31137 -
                   ((C20471 + C20470) * C18992 +
                    (C352 * C13238 + C351 * C13237) * C18991) *
                       C30837 * C31123 +
                   ((C1412 * C13237 + C1411 * C13238) * C18991 +
                    (C20275 * C13237 +
                     (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C13238) *
                        C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C30878 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C30885 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C3242 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C2848) *
              C31048 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C30878 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30885 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C3242) *
               C2848) *
              C30802)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30920 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30927 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C3750) *
              C30878 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30927 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30920 -
           ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) * C3750) *
              C30885 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C30920 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C30927 +
           ((C20140 + C20139) * C18991 +
            (C9879 * C13237 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C13238) *
                C18992) *
               C3750) *
              C2848) *
         C30791) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C3242 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C31137 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C3242) *
              C31133 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C3242 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C30924) *
              C31123 +
          (((C20602 + C20603) * C18991 +
            (C10245 * C13237 +
             (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C13238) *
                C18992) *
               C30924 -
           ((C20603 + C20602) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C2480 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C30882) *
              C31127 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C2480 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C31114 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C3242 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C2480 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31138 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31135 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C31126 -
           ((C20980 + C20981) * C18992 + (C20979 + C20978) * C18991) * C31109) *
              C2480 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C31135 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C31138 -
           ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) * C31126 +
           ((C21441 + C21440) * C18991 +
            (C10920 * C13237 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C13238) *
                C18992) *
               C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C30920 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30927 +
            ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C3750) *
               C2480 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30927 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C30920 -
            ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) * C3750) *
               C30882) *
              C31048 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30927 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C30920 -
            ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) * C3750) *
               C2480 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C30920 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) * C30927 +
            ((C21177 + C21176) * C18991 +
             (C10704 * C13237 +
              (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C13238) *
                 C18992) *
                C3750) *
               C30882) *
              C30802)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C2480 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C30882) *
              C31127 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C2480 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C31114 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C3242 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C2480 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C3242 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C31137 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C3242) *
              C31133 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C3242 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C30924) *
              C31123 +
          (((C20602 + C20603) * C18991 +
            (C10245 * C13237 +
             (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C13238) *
                C18992) *
               C30924 -
           ((C20603 + C20602) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C1392 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C1393 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C30837 * C1394 -
           ((C20275 * C13238 + C10244 * C13237) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C30837 * C31103) *
              C31048 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C1393 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C1392 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C1394 +
           ((C1412 * C13237 + C1411 * C13238) * C18991 +
            (C20275 * C13237 +
             (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C13238) *
                C18992) *
               C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C31062 -
           ((C938 * C13238 + C9568 * C13237) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C30882) *
              C637 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C938 * C13237 + C939 * C13238) * C18992) *
               C30837 * C30882 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C31062) *
              C638 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C31062 -
           ((C940 * C13238 + C939 * C13237) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C30882) *
              C639 +
          (((C353 * C13237 + C650 * C13238) * C18991 +
            (C940 * C13237 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C13238) *
                C18992) *
               C30837 * C30882 -
           ((C759 * C13238 + C536 * C13237) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C1792 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1793 +
            ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) *
                C31096) *
               C31062 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C1793 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C1792 -
            ((C10704 * C13238 + C9876 * C13237) * C18992 +
             (C20136 + C20135) * C18991) *
                C31096) *
               C30882) *
              C31048 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C1793 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C1792 -
            ((C2271 * C13238 + C2272 * C13237) * C18992 +
             (C19293 + C19292) * C18991) *
                C31096) *
               C31062 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C1792 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) * C1793 +
            ((C21177 + C21176) * C18991 +
             (C10704 * C13237 +
              (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C13238) *
                 C18992) *
                C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31063 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C1392 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C31063) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C31063 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C30924) *
              C1394 +
          (((C20602 + C20603) * C18991 +
            (C10245 * C13237 +
             (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C13238) *
                C18992) *
               C30924 -
           ((C20603 + C20602) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C31062 +
           (((C19754 + C19755) * C18991 +
             (C9569 * C13237 + C2156 * C13238) * C18992) *
                C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C30882) *
              C281 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C31062 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C2155 * C13238 + C2156 * C13237) * C18992 +
             (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C282 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C31063 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C31062 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C2254 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C2255 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C2256 -
           ((C20980 + C20981) * C18992 + (C20979 + C20978) * C18991) * C31109) *
              C31062 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C2255 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C2254 -
           ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) * C2256 +
           ((C21441 + C21440) * C18991 +
            (C10920 * C13237 +
             (C113 * C10695 + C10701 + C10701 + C31002 * C10697) * C13238) *
                C18992) *
               C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                C164 * C13238) *
                   C18991 +
               (C9206 * C13237 + C533 * C13238) * C18992) *
                  C30837 * C30819 * C108 -
              ((C532 * C13238 + C533 * C13237) * C18992 +
               (C165 * C13238 + C164 * C13237) * C18991) *
                  C30837 * C30819 * C109 +
              ((C165 * C13237 + C166 * C13238) * C18991 +
               (C532 * C13237 + C536 * C13238) * C18992) *
                  C30837 * C30819 * C110 -
              ((C759 * C13238 + C536 * C13237) * C18992 +
               (C167 * C13238 + C166 * C13237) * C18991) *
                  C30837 * C30819 * C111 +
              ((C167 * C13237 + C168 * C13238) * C18991 +
               (C759 * C13237 +
                (C113 * C750 + C756 + C756 + C31002 * C752) * C13238) *
                   C18992) *
                  C30837 * C30819 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                 C164 * C13238) *
                    C18991 +
                (C9206 * C13237 + C533 * C13238) * C18992) *
                   C30837 * C31130 -
               ((C938 * C13238 + C9568 * C13237) * C18992 +
                (C350 * C13238 +
                 (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                    C18991) *
                   C30837 * C31118 +
               (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
                 C351 * C13238) *
                    C18991 +
                (C9877 * C13237 + C1572 * C13238) * C18992) *
                   C30837 * C31093) *
                  C281 +
              (((C350 * C13237 + C349 * C13238) * C18991 +
                (C938 * C13237 + C939 * C13238) * C18992) *
                   C30837 * C31118 -
               ((C532 * C13238 + C533 * C13237) * C18992 +
                (C165 * C13238 + C164 * C13237) * C18991) *
                   C30837 * C31130 -
               ((C1571 * C13238 + C1572 * C13237) * C18992 +
                (C352 * C13238 + C351 * C13237) * C18991) *
                   C30837 * C31093) *
                  C282 +
              (((C165 * C13237 + C166 * C13238) * C18991 +
                (C532 * C13237 + C536 * C13238) * C18992) *
                   C30837 * C31130 -
               ((C940 * C13238 + C939 * C13237) * C18992 +
                (C353 * C13238 + C349 * C13237) * C18991) *
                   C30837 * C31118 +
               ((C352 * C13237 + C354 * C13238) * C18991 +
                (C1571 * C13237 +
                 (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                    C18992) *
                   C30837 * C31093) *
                  C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31131 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31120 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C30819 * C281 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C31120 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C31131 -
           ((C2271 * C13238 + C2272 * C13237) * C18992 +
            (C19293 + C19292) * C18991) *
               C31096) *
              C30819 * C282 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C31131 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C31120 +
           ((C19297 + C19296) * C18991 +
            (C2271 * C13237 +
             (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C13238) *
                C18992) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C1050 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C31127 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C1051 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C1050 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C1050 -
           ((C19759 + C19758) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C1051 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C19286 + C19287) * C18992) *
              C30837 * C1118 -
          ((C19755 + C19754) * C18992 +
           (C350 * C13238 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
               C18991) *
              C30837 * C1119 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
            C351 * C13238) *
               C18991 +
           (C9877 * C13237 + C1572 * C13238) * C18992) *
              C30837 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C13238 +
            C10244 * C13237) *
               C18992 +
           (C1412 * C13238 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
               C18991) *
              C30837 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C13237 +
            (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C13238) *
               C18991 +
           ((C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C13237 +
            (C113 * C5903 + C19988 + C19988 + C31002 * C5905) * C13238) *
               C18992) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31131 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31120 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C1050 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C31120 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C31131 -
           ((C10704 * C13238 + C9876 * C13237) * C18992 +
            (C20136 + C20135) * C18991) *
               C31096) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C31131 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C31120 +
           ((C20140 + C20139) * C18991 +
            (C9879 * C13237 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C13238) *
                C18992) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C1792 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1793 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C30819 * C31127 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C1793 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C1792 -
           ((C2271 * C13238 + C2272 * C13237) * C18992 +
            (C19293 + C19292) * C18991) *
               C31096) *
              C30819 * C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C1792 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C1793 +
           ((C19297 + C19296) * C18991 +
            (C2271 * C13237 +
             (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C13238) *
                C18992) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C1792 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1793 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C31130 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C1793 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C1792 -
           ((C10704 * C13238 + C9876 * C13237) * C18992 +
            (C20136 + C20135) * C18991) *
               C31096) *
              C31118 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C1792 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C1793 +
           ((C20140 + C20139) * C18991 +
            (C9879 * C13237 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C13238) *
                C18992) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C19286 + C19287) * C18992) *
              C1967 -
          ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1968 +
          ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C1969 -
          ((C20980 + C20981) * C18992 + (C20979 + C20978) * C18991) * C1970 +
          ((C20981 + C20980) * C18991 +
           (C10547 * C13237 +
            (C113 * C10803 + C10809 + C10809 + C31002 * C10805) * C13238) *
               C18992) *
              C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C1050 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C31063 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C31093) *
              C31048 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C1050 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C2155 * C13238 + C2156 * C13237) * C18992 +
             (C19757 + C19756) * C18991) *
                C30924) *
               C1051 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31063 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C30819 * C637 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C31063) *
              C30819 * C638 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C31063 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C30924) *
              C30819 * C639 +
          (((C19558 + C19559) * C18991 +
            (C537 * C13237 +
             (C113 * C476 + C519 + C519 + C31002 * C496) * C13238) *
                C18992) *
               C30924 -
           ((C19559 + C19558) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C2254 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C2255 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C2256 -
           ((C20980 + C20981) * C18992 + (C20979 + C20978) * C18991) * C31109) *
              C30819 * C31048 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C2255 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C2254 -
           ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) * C2256 +
           ((C21309 + C21308) * C18991 +
            (C10812 * C13237 +
             (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C13238) *
                C18992) *
               C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C9206 * C13237 + C533 * C13238) * C18992) *
               C30837 * C31130 -
           ((C938 * C13238 + C9568 * C13237) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C281 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C938 * C13237 + C939 * C13238) * C18992) *
               C30837 * C31118 -
           ((C532 * C13238 + C533 * C13237) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C31130 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C282 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C532 * C13237 + C536 * C13238) * C18992) *
               C30837 * C31130 -
           ((C940 * C13238 + C939 * C13237) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C31118 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C9206 * C13237 + C533 * C13238) * C18992) *
              C30837 * C30819 * C108 -
          ((C532 * C13238 + C533 * C13237) * C18992 +
           (C165 * C13238 + C164 * C13237) * C18991) *
              C30837 * C30819 * C109 +
          ((C165 * C13237 + C166 * C13238) * C18991 +
           (C532 * C13237 + C536 * C13238) * C18992) *
              C30837 * C30819 * C110 -
          ((C759 * C13238 + C536 * C13237) * C18992 +
           (C167 * C13238 + C166 * C13237) * C18991) *
              C30837 * C30819 * C111 +
          ((C167 * C13237 + C168 * C13238) * C18991 +
           (C759 * C13237 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C13238) *
               C18992) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C1050 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C31127 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C1051 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C1050 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C1050 -
           ((C19759 + C19758) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C1051 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C19286 + C19287) * C18992) *
              C30837 * C1118 -
          ((C19755 + C19754) * C18992 +
           (C350 * C13238 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
               C18991) *
              C30837 * C1119 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
            C351 * C13238) *
               C18991 +
           (C9877 * C13237 + C1572 * C13238) * C18992) *
              C30837 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C13238 +
            C10244 * C13237) *
               C18992 +
           (C1412 * C13238 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
               C18991) *
              C30837 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C13237 +
            (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C13238) *
               C18991 +
           ((C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C13237 +
            (C113 * C5903 + C19988 + C19988 + C31002 * C5905) * C13238) *
               C18992) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C1792 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1793 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C30819 * C31127 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C1793 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C1792 -
           ((C2271 * C13238 + C2272 * C13237) * C18992 +
            (C19293 + C19292) * C18991) *
               C31096) *
              C30819 * C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C1792 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C1793 +
           ((C19297 + C19296) * C18991 +
            (C2271 * C13237 +
             (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C13238) *
                C18992) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C1792 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C1793 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C31130 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C1793 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C1792 -
           ((C10704 * C13238 + C9876 * C13237) * C18992 +
            (C20136 + C20135) * C18991) *
               C31096) *
              C31118 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C1792 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C1793 +
           ((C20140 + C20139) * C18991 +
            (C9879 * C13237 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C13238) *
                C18992) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C31062 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C30882) *
              C30796 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C31062 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C30805 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C3242 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C31062 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C3242) *
               C30882) *
              C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C30920 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30927 +
            ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C3750) *
               C31062 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30927 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C30920 -
            ((C21440 + C21441) * C18992 + (C20136 + C20135) * C18991) * C3750) *
               C30882) *
              C2588 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30927 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C30920 -
            ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) * C3750) *
               C31062 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C30920 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) * C30927 +
            ((C21177 + C21176) * C18991 +
             (C10704 * C13237 +
              (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C13238) *
                 C18992) *
                C3750) *
               C30882) *
              C30802)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C31130 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C31118 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C3242 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C31093) *
              C2588 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C31130 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C31118 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C3242 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C30819 * C31136 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C3242) *
              C30819 * C31129 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C3242 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C30924) *
              C30819 * C31116 +
          (((C19558 + C19559) * C18991 +
            (C537 * C13237 +
             (C113 * C476 + C519 + C519 + C31002 * C496) * C13238) *
                C18992) *
               C30924 -
           ((C19559 + C19558) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31138 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31135 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C31126 -
           ((C20980 + C20981) * C18992 + (C20979 + C20978) * C18991) * C31109) *
              C30819 * C2588 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C31135 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C31138 -
           ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) * C31126 +
           ((C21309 + C21308) * C18991 +
            (C10812 * C13237 +
             (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C13238) *
                C18992) *
               C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30920 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30927 +
           ((C19289 + C19288) * C18991 + (C20978 + C20979) * C18992) * C3750) *
              C30819 * C30796 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30927 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30920 -
           ((C21308 + C21309) * C18992 + (C19293 + C19292) * C18991) * C3750) *
              C30819 * C30805 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30920 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C30927 +
           ((C19297 + C19296) * C18991 +
            (C2271 * C13237 +
             (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C13238) *
                C18992) *
               C3750) *
              C30819 * C2851)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C3242 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C30819 * C31136 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C3242) *
              C30819 * C31129 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C3242 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C30924) *
              C30819 * C31116 +
          (((C19558 + C19559) * C18991 +
            (C537 * C13237 +
             (C113 * C476 + C519 + C519 + C31002 * C496) * C13238) *
                C18992) *
               C30924 -
           ((C19559 + C19558) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C3242 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C31130 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C3242) *
               C31118 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C3242 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C31093) *
              C2588 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C3242) *
               C31130 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C3242 -
            ((C21176 + C21177) * C18992 + (C19757 + C19756) * C18991) *
                C30924) *
               C31118 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                     C164 * C13238) *
                        C18991 +
                    (C19286 + C19287) * C18992) *
                       C30837 * C31062 -
                   ((C938 * C13238 + C9568 * C13237) * C18992 +
                    (C350 * C13238 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                        C18991) *
                       C30837 * C30882) *
                      C637 +
                  (((C350 * C13237 + C349 * C13238) * C18991 +
                    (C938 * C13237 + C939 * C13238) * C18992) *
                       C30837 * C30882 -
                   ((C19291 + C19290) * C18992 +
                    (C165 * C13238 + C164 * C13237) * C18991) *
                       C30837 * C31062) *
                      C638 +
                  (((C165 * C13237 + C166 * C13238) * C18991 +
                    (C19294 + C19295) * C18992) *
                       C30837 * C31062 -
                   ((C940 * C13238 + C939 * C13237) * C18992 +
                    (C353 * C13238 + C349 * C13237) * C18991) *
                       C30837 * C30882) *
                      C639 +
                  (((C353 * C13237 + C650 * C13238) * C18991 +
                    (C940 * C13237 +
                     (C113 * C909 + C931 + C931 + C31002 * C919) * C13238) *
                        C18992) *
                       C30837 * C30882 -
                   ((C759 * C13238 + C536 * C13237) * C18992 +
                    (C167 * C13238 + C166 * C13237) * C18991) *
                       C30837 * C31062) *
                      C31097)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
                     C164 * C13238) *
                        C18991 +
                    (C19286 + C19287) * C18992) *
                       C30837 * C1392 -
                   ((C19755 + C19754) * C18992 +
                    (C350 * C13238 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                        C18991) *
                       C30837 * C1393 +
                   (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
                     C351 * C13238) *
                        C18991 +
                    (C20137 + C20138) * C18992) *
                       C30837 * C1394 -
                   ((C20275 * C13238 + C10244 * C13237) * C18992 +
                    (C1412 * C13238 +
                     (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                        C18991) *
                       C30837 * C31103) *
                      C31048 +
                  (((C350 * C13237 + C349 * C13238) * C18991 +
                    (C19756 + C19757) * C18992) *
                       C30837 * C1393 -
                   ((C19291 + C19290) * C18992 +
                    (C165 * C13238 + C164 * C13237) * C18991) *
                       C30837 * C1392 -
                   ((C1571 * C13238 + C1572 * C13237) * C18992 +
                    (C352 * C13238 + C351 * C13237) * C18991) *
                       C30837 * C1394 +
                   ((C1412 * C13237 + C1411 * C13238) * C18991 +
                    (C20275 * C13237 +
                     (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C13238) *
                        C18992) *
                       C30837 * C31103) *
                      C30802)) /
                    (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C31062 +
           (((C19754 + C19755) * C18991 +
             (C9569 * C13237 + C2156 * C13238) * C18992) *
                C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C30882) *
              C281 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C31062 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C2155 * C13238 + C2156 * C13237) * C18992 +
             (C19757 + C19756) * C18991) *
                C30924) *
               C30882) *
              C282 +
          ((((C165 * C13237 + C166 * C13238) * C18991 +
             (C19294 + C19295) * C18992) *
                C31063 -
            ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) *
                C30924) *
               C31062 +
           (((C19758 + C19759) * C18991 +
             (C2155 * C13237 +
              (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C13238) *
                 C18992) *
                C30924 -
            ((C19759 + C19758) * C18992 +
             (C353 * C13238 + C349 * C13237) * C18991) *
                C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31063 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C1392 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C31063) *
              C1393 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C31063 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C30924) *
              C1394 +
          (((C20602 + C20603) * C18991 +
            (C10245 * C13237 +
             (C113 * C6456 + C9982 + C9982 + C31002 * C6458) * C13238) *
                C18992) *
               C30924 -
           ((C20603 + C20602) * C18992 +
            (C1412 * C13238 +
             (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
                C18991) *
               C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C9206 * C13237 + C533 * C13238) * C18992) *
               C30837 * C31130 -
           ((C938 * C13238 + C9568 * C13237) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C281 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C938 * C13237 + C939 * C13238) * C18992) *
               C30837 * C31118 -
           ((C532 * C13238 + C533 * C13237) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C31130 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C282 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C532 * C13237 + C536 * C13238) * C18992) *
               C30837 * C31130 -
           ((C940 * C13238 + C939 * C13237) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C31118 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C9206 * C13237 + C533 * C13238) * C18992) *
              C30837 * C30819 * C108 -
          ((C532 * C13238 + C533 * C13237) * C18992 +
           (C165 * C13238 + C164 * C13237) * C18991) *
              C30837 * C30819 * C109 +
          ((C165 * C13237 + C166 * C13238) * C18991 +
           (C532 * C13237 + C536 * C13238) * C18992) *
              C30837 * C30819 * C110 -
          ((C759 * C13238 + C536 * C13237) * C18992 +
           (C167 * C13238 + C166 * C13237) * C18991) *
              C30837 * C30819 * C111 +
          ((C167 * C13237 + C168 * C13238) * C18991 +
           (C759 * C13237 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C13238) *
               C18992) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31131 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31120 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C30819 * C281 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C31120 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C31131 -
           ((C2271 * C13238 + C2272 * C13237) * C18992 +
            (C19293 + C19292) * C18991) *
               C31096) *
              C30819 * C282 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C31131 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C31120 +
           ((C19297 + C19296) * C18991 +
            (C2271 * C13237 +
             (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C13238) *
                C18992) *
               C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C1050 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C31127 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C1051 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C1050 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C1050 -
           ((C19759 + C19758) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C1051 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C19286 + C19287) * C18992) *
              C30837 * C1118 -
          ((C19755 + C19754) * C18992 +
           (C350 * C13238 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
               C18991) *
              C30837 * C1119 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
            C351 * C13238) *
               C18991 +
           (C9877 * C13237 + C1572 * C13238) * C18992) *
              C30837 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C13238 +
            C10244 * C13237) *
               C18992 +
           (C1412 * C13238 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
               C18991) *
              C30837 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C13237 +
            (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C13238) *
               C18991 +
           ((C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C13237 +
            (C113 * C5903 + C19988 + C19988 + C31002 * C5905) * C13238) *
               C18992) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31131 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C31120 +
           ((C19289 + C19288) * C18991 +
            (C9208 * C13237 + C2272 * C13238) * C18992) *
               C31096) *
              C1050 +
          (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C31120 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C31131 -
           ((C10704 * C13238 + C9876 * C13237) * C18992 +
            (C20136 + C20135) * C18991) *
               C31096) *
              C1051 +
          ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C20137 + C20138) * C18992) *
               C31131 -
           ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) * C31120 +
           ((C20140 + C20139) * C18991 +
            (C9879 * C13237 +
             (C113 * C6560 + C10132 + C10132 + C31002 * C6562) * C13238) *
                C18992) *
               C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C31063 -
           ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) * C30924) *
              C30819 * C637 +
          (((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C31063) *
              C30819 * C638 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C31063 -
           ((C19296 + C19297) * C18992 + (C19295 + C19294) * C18991) * C30924) *
              C30819 * C639 +
          (((C19558 + C19559) * C18991 +
            (C537 * C13237 +
             (C113 * C476 + C519 + C519 + C31002 * C496) * C13238) *
                C18992) *
               C30924 -
           ((C19559 + C19558) * C18992 +
            (C167 * C13238 + C166 * C13237) * C18991) *
               C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
              C164 * C13238) *
                 C18991 +
             (C19286 + C19287) * C18992) *
                C31063 -
            ((C19288 + C19289) * C18992 + (C19287 + C19286) * C18991) *
                C30924) *
               C1050 +
           (((C19754 + C19755) * C18991 + (C20135 + C20136) * C18992) * C30924 -
            ((C19755 + C19754) * C18992 +
             (C350 * C13238 +
              (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                 C18991) *
                C31063) *
               C1051 +
           ((((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
              C351 * C13238) *
                 C18991 +
             (C20137 + C20138) * C18992) *
                C31063 -
            ((C20139 + C20140) * C18992 + (C20138 + C20137) * C18991) *
                C30924) *
               C31093) *
              C31048 +
          ((((C19290 + C19291) * C18991 + (C19292 + C19293) * C18992) * C30924 -
            ((C19291 + C19290) * C18992 +
             (C165 * C13238 + C164 * C13237) * C18991) *
                C31063) *
               C1050 +
           (((C350 * C13237 + C349 * C13238) * C18991 +
             (C19756 + C19757) * C18992) *
                C31063 -
            ((C2155 * C13238 + C2156 * C13237) * C18992 +
             (C19757 + C19756) * C18991) *
                C30924) *
               C1051 +
           (((C20470 + C20471) * C18991 +
             (C10135 * C13237 +
              (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C13238) *
                 C18992) *
                C30924 -
            ((C20471 + C20470) * C18992 +
             (C352 * C13238 + C351 * C13237) * C18991) *
                C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C9206 * C13237 + C533 * C13238) * C18992) *
              C30837 * C30819 * C108 -
          ((C532 * C13238 + C533 * C13237) * C18992 +
           (C165 * C13238 + C164 * C13237) * C18991) *
              C30837 * C30819 * C109 +
          ((C165 * C13237 + C166 * C13238) * C18991 +
           (C532 * C13237 + C536 * C13238) * C18992) *
              C30837 * C30819 * C110 -
          ((C759 * C13238 + C536 * C13237) * C18992 +
           (C167 * C13238 + C166 * C13237) * C18991) *
              C30837 * C30819 * C111 +
          ((C167 * C13237 + C168 * C13238) * C18991 +
           (C759 * C13237 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C13238) *
               C18992) *
              C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C9206 * C13237 + C533 * C13238) * C18992) *
               C30837 * C31130 -
           ((C938 * C13238 + C9568 * C13237) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C281 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C938 * C13237 + C939 * C13238) * C18992) *
               C30837 * C31118 -
           ((C532 * C13238 + C533 * C13237) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C31130 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C282 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C532 * C13237 + C536 * C13238) * C18992) *
               C30837 * C31130 -
           ((C940 * C13238 + C939 * C13237) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C31118 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
             C164 * C13238) *
                C18991 +
            (C19286 + C19287) * C18992) *
               C30837 * C1050 -
           ((C19755 + C19754) * C18992 +
            (C350 * C13238 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
                C18991) *
               C30837 * C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
             C351 * C13238) *
                C18991 +
            (C9877 * C13237 + C1572 * C13238) * C18992) *
               C30837 * C31093) *
              C31127 +
          (((C350 * C13237 + C349 * C13238) * C18991 +
            (C19756 + C19757) * C18992) *
               C30837 * C1051 -
           ((C19291 + C19290) * C18992 +
            (C165 * C13238 + C164 * C13237) * C18991) *
               C30837 * C1050 -
           ((C1571 * C13238 + C1572 * C13237) * C18992 +
            (C352 * C13238 + C351 * C13237) * C18991) *
               C30837 * C31093) *
              C31114 +
          (((C165 * C13237 + C166 * C13238) * C18991 +
            (C19294 + C19295) * C18992) *
               C30837 * C1050 -
           ((C19759 + C19758) * C18992 +
            (C353 * C13238 + C349 * C13237) * C18991) *
               C30837 * C1051 +
           ((C352 * C13237 + C354 * C13238) * C18991 +
            (C1571 * C13237 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C13238) *
                C18992) *
               C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C13237 +
            C164 * C13238) *
               C18991 +
           (C19286 + C19287) * C18992) *
              C30837 * C1118 -
          ((C19755 + C19754) * C18992 +
           (C350 * C13238 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C13237) *
               C18991) *
              C30837 * C1119 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C13237 +
            C351 * C13238) *
               C18991 +
           (C9877 * C13237 + C1572 * C13238) * C18992) *
              C30837 * C1120 -
          (((C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C13238 +
            C10244 * C13237) *
               C18992 +
           (C1412 * C13238 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C13237) *
               C18991) *
              C30837 * C1121 +
          (((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C13237 +
            (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C13238) *
               C18991 +
           ((C113 * C5636 + C9745 + C9745 + C31002 * C5642) * C13237 +
            (C113 * C5903 + C19988 + C19988 + C31002 * C5905) * C13238) *
               C18992) *
              C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                     C164 * C103 + C165 * C104) *
                        C31016 * C30837 * C30878 -
                    (C349 * C104 + C350 * C103 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                        C31016 * C30837 * C30885 +
                    ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                     C351 * C103 + C352 * C104) *
                        C31016 * C30837 * C2848) *
                       C30796 +
                   ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 *
                        C30837 * C30885 -
                    (C166 * C104 + C165 * C103 + C164 * C102) * C31016 *
                        C30837 * C30878 -
                    (C354 * C104 + C352 * C103 + C351 * C102) * C31016 *
                        C30837 * C2848) *
                       C30805 +
                   ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 *
                        C30837 * C30878 -
                    (C650 * C104 + C353 * C103 + C349 * C102) * C31016 *
                        C30837 * C30885 +
                    (C352 * C102 + C354 * C103 +
                     (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
                        C31016 * C30837 * C2848) *
                       C2851)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4707 * C115 + C4714 + C4714 + C4703 * C129 +
                     C4709 * C286 + C4715 + C4715 + C4704 * C306 +
                     C4711 * C287 + C4716 + C4716 + C4705 * C307) *
                        C30767 * C31016 * C30837 * C30878 -
                    (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 +
                     C4709 * C287 + C4840 + C4840 + C4704 * C307 +
                     C4707 * C286 + C4841 + C4841 + C4703 * C306) *
                        C30767 * C31016 * C30837 * C30885 +
                    (C4707 * C287 + C4842 + C4842 + C4703 * C307 +
                     C4709 * C1126 + C4843 + C4843 + C4704 * C1138 +
                     C4711 * C1127 + C4844 + C4844 + C4705 * C1139) *
                        C30767 * C31016 * C30837 * C2848) *
                       C30796 +
                   ((C4707 * C285 + C4845 + C4845 + C4703 * C305 +
                     C4709 * C288 + C4846 + C4846 + C4704 * C308 +
                     C4711 * C1125 + C4847 + C4847 + C4705 * C1137) *
                        C30767 * C31016 * C30837 * C30885 -
                    (C4711 * C288 + C4717 + C4717 + C4705 * C308 +
                     C4709 * C285 + C4718 + C4718 + C4704 * C305 +
                     C4707 * C116 + C4719 + C4719 + C4703 * C130) *
                        C30767 * C31016 * C30837 * C30878 -
                    (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 +
                     C4709 * C1125 + C4849 + C4849 + C4704 * C1137 +
                     C4707 * C288 + C4850 + C4850 + C4703 * C308) *
                        C30767 * C31016 * C30837 * C2848) *
                       C30805 +
                   ((C4707 * C117 + C4720 + C4720 + C4703 * C131 +
                     C4709 * C284 + C4721 + C4721 + C4704 * C304 +
                     C4711 * C289 + C4722 + C4722 + C4705 * C309) *
                        C30767 * C31016 * C30837 * C30878 -
                    (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 +
                     C4709 * C289 + C4852 + C4852 + C4704 * C309 +
                     C4707 * C284 + C4853 + C4853 + C4703 * C304) *
                        C30767 * C31016 * C30837 * C30885 +
                    (C4707 * C289 + C4854 + C4854 + C4703 * C309 +
                     C4709 * C1124 + C4855 + C4855 + C4704 * C1136 +
                     C4711 * C1129 + C4856 + C4856 + C4705 * C1141) *
                        C30767 * C31016 * C30837 * C2848) *
                       C2851)) /
                     (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C30878 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C31063 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C2848) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C30878 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30885 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C30878 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30885 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C2848) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C30878 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30885 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31137 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31133 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31123 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C2588 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31133 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31137 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31123 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C2480 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C31136 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C2480) *
              C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C2480 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C31116 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31131 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C31120 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C31096) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C31120 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31131 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C31096) *
               C30882) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31131 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C31120 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C31136 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C2480) *
              C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C31116 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31133 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31123 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C2588 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31133 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31123 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31131 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C31120 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C31096) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C31120 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31131 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C31096) *
               C30882) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C31120 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31131 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C31096) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31131 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C31120 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30882) *
              C30796 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C30796 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C2480 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C31136 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C2480) *
              C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C2480 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C31116 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31137 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31133 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31123 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C2588 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31133 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31137 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31123 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C31136 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C2480) *
              C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C2480 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C31116 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C2480) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31133 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31123 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C2588 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31133 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31137 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31123 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C30878 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30885 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C2848) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C30878 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30885 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C30878 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30885 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C2848) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C30878 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30885 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C2848) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                     C164 * C103 + C165 * C104) *
                        C31016 * C30920 -
                    (C532 * C104 + C533 * C103 +
                     (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                        C31016 * C30927 +
                    ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 +
                     C534 * C103 + C535 * C104) *
                        C31016 * C3750) *
                       C30878 +
                   (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 +
                     C938 * C103 + C939 * C104) *
                        C31016 * C30927 -
                    (C349 * C104 + C350 * C103 +
                     (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                        C31016 * C30920 -
                    (C2155 * C104 + C2156 * C103 +
                     (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                        C31016 * C3750) *
                       C30885 +
                   (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                     C351 * C103 + C352 * C104) *
                        C31016 * C30920 -
                    (C1571 * C104 + C1572 * C103 +
                     (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                        C31016 * C30927 +
                    ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
                     (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
                     (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
                        C31016 * C3750) *
                       C2848) *
                  C30791) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
                  (((C4707 * C115 + C4714 + C4714 + C4703 * C129 +
                     C4709 * C286 + C4715 + C4715 + C4704 * C306 +
                     C4711 * C287 + C4716 + C4716 + C4705 * C307) *
                        C30767 * C31016 * C30920 -
                    (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 +
                     C4709 * C905 + C4968 + C4968 + C4704 * C915 +
                     C4707 * C469 + C4969 + C4969 + C4703 * C489) *
                        C30767 * C31016 * C30927 +
                    (C4707 * C470 + C4970 + C4970 + C4703 * C490 +
                     C4709 * C1260 + C4971 + C4971 + C4704 * C1278 +
                     C4711 * C1264 + C4972 + C4972 + C4705 * C1282) *
                        C30767 * C31016 * C3750) *
                       C30878 +
                   ((C4707 * C905 + C5333 + C5333 + C4703 * C915 +
                     C4709 * C1263 + C5334 + C5334 + C4704 * C1281 +
                     C4711 * C1670 + C5335 + C5335 + C4705 * C1676) *
                        C30767 * C31016 * C30927 -
                    (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 +
                     C4709 * C287 + C4840 + C4840 + C4704 * C307 +
                     C4707 * C286 + C4841 + C4841 + C4703 * C306) *
                        C30767 * C31016 * C30920 -
                    (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 +
                     C4709 * C1264 + C5646 + C5646 + C4704 * C1282 +
                     C4707 * C1260 + C5647 + C5647 + C4703 * C1278) *
                        C30767 * C31016 * C3750) *
                       C30885 +
                   ((C4707 * C287 + C4842 + C4842 + C4703 * C307 +
                     C4709 * C1126 + C4843 + C4843 + C4704 * C1138 +
                     C4711 * C1127 + C4844 + C4844 + C4705 * C1139) *
                        C30767 * C31016 * C30920 -
                    (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 +
                     C4709 * C1670 + C5649 + C5649 + C4704 * C1676 +
                     C4707 * C1263 + C5650 + C5650 + C4703 * C1281) *
                        C30767 * C31016 * C30927 +
                    (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 +
                     C4709 * C5635 + C5652 + C5652 + C4704 * C5641 +
                     C4711 * C5637 + C5653 + C5653 + C4705 * C5643) *
                        C30767 * C31016 * C3750) *
                       C2848) *
                  C30791) /
                     (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C31137 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C3242) *
              C31133 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C3242 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C31123 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30882) *
              C31127 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31138 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31135 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31126 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C2480 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C31135 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31138 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31126 +
           ((C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C104) *
               C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31127 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C31137 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C3242) *
              C31133 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C3242 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C31123 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31138 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31135 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31126 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C2480 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31135 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31138 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31126 +
           (C4707 * C2370 + C6668 + C6668 + C4703 * C2376 + C4709 * C6295 +
            C6669 + C6669 + C4704 * C6301 + C4711 * C6664 + C6670 + C6670 +
            C4705 * C6666) *
               C30767 * C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C30920 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30927 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C3750) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30927 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C30920 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C3750) *
               C30882) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30920 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30927 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C30920 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30927 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C3750) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30927 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C30920 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C3750) *
               C30882) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30927 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C30920 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C3750) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C30920 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30927 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C2480 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30882) *
              C31127 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C2480 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C2480 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C31137 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C3242) *
              C31133 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C3242 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C31123 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31127 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C2480 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C31114 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C2480 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C31137 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C3242) *
              C31133 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C3242 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C31123 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C3242) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1392 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1393 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C1394 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C31048 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1393 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1392 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 * C1394 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31062 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C637 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31062) *
              C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31062 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C639 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C1792 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C1793 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C31096) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C1793 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C1792 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C31096) *
               C30882) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C1792 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C1793 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C637 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31062) *
              C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C639 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1393 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C1394 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C31048 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1393 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C1394 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C1792 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C1793 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C31096) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C1793 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C1792 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C31096) *
               C30882) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C1793 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C1792 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C31096) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C1792 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C1793 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C31096) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C1392 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31063) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31063 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C1394 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30882) *
              C281 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C282 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C31062 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C2255 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C31062 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C2255 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C2254 -
           (C2155 * C104 + C2156 * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C2256 +
           ((C113 * C2370 + C2380 + C2380 + C31002 * C2376) * C102 +
            (C113 * C2371 + C2381 + C2381 + C31002 * C2377) * C103 +
            (C113 * C2372 + C2382 + C2382 + C31002 * C2378) * C104) *
               C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C281 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C282 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C1392 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31063) *
              C1393 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31063 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C1394 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C2254 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C2255 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C2256 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C31062 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C2255 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C2254 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C2256 +
           (C4707 * C2370 + C6668 + C6668 + C4703 * C2376 + C4709 * C6295 +
            C6669 + C6669 + C4704 * C6301 + C4711 * C6664 + C6670 + C6670 +
            C4705 * C6666) *
               C30767 * C31016 * C31109) *
              C30882) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
               C164 * C103 + C165 * C104) *
                  C31016 * C30837 * C30819 * C108 -
              (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                  C30819 * C109 +
              (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                  C30819 * C110 -
              (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
                  C30819 * C111 +
              (C167 * C102 + C168 * C103 +
               (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
                  C31016 * C30837 * C30819 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 +
                C164 * C103 + C165 * C104) *
                   C31016 * C30837 * C31130 -
               (C349 * C104 + C350 * C103 +
                (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                   C31016 * C30837 * C31118 +
               ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 +
                C351 * C103 + C352 * C104) *
                   C31016 * C30837 * C31093) *
                  C281 +
              ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
                   C31118 -
               (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
                   C31130 -
               (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
                   C31093) *
                  C282 +
              ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
                   C31130 -
               ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 +
                C353 * C103 + C349 * C102) *
                   C31016 * C30837 * C31118 +
               (C352 * C102 + C354 * C103 +
                (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
                   C31016 * C30837 * C31093) *
                  C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C281 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31131 -
           ((C113 * C475 + C518 + C518 + C31002 * C495) * C104 + C536 * C103 +
            C532 * C102) *
               C31016 * C31120 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C1050 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C31120 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31131 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31131 -
           ((C113 * C1261 + C1289 + C1289 + C31002 * C1279) * C104 +
            (C113 * C1262 + C1290 + C1290 + C31002 * C1280) * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C31120 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C31127 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C1792 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C1793 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C31130 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C1793 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C1792 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C31118 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C1792 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C1793 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C1967 -
          (C532 * C104 + C533 * C103 +
           (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
              C31016 * C1968 +
          ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
           C535 * C104) *
              C31016 * C1969 -
          ((C113 * C1972 + C1991 + C1991 + C31002 * C1984) * C104 +
           (C113 * C1973 + C1992 + C1992 + C31002 * C1985) * C103 +
           (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
              C31016 * C1970 +
          ((C113 * C1975 + C1994 + C1994 + C31002 * C1987) * C102 +
           (C113 * C1976 + C1995 + C1995 + C31002 * C1988) * C103 +
           (C113 * C1977 + C1996 + C1996 + C31002 * C1989) * C104) *
              C31016 * C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C281 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31120 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31131 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31131 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C31120 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C1050 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31120 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31131 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C1051 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31131 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C31120 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C31127 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C1793 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C1792 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C1792 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C1793 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C31130 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C1793 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C1792 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C31118 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C1792 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C1793 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C1967 -
          (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
           C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
           C4703 * C489) *
              C30767 * C31016 * C1968 +
          (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 + C4971 +
           C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
           C4705 * C1282) *
              C30767 * C31016 * C1969 -
          (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
           C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
           C4703 * C1986) *
              C30767 * C31016 * C1970 +
          (C4707 * C1975 + C6308 + C6308 + C4703 * C1987 + C4709 * C6296 +
           C6309 + C6309 + C4704 * C6302 + C4711 * C6297 + C6310 + C6310 +
           C4705 * C6303) *
              C30767 * C31016 * C1971) *
         C30819 * C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C1050 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C31063 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C1050 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C1051 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C637 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
              C30819 * C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C639 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C2254 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C2255 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C2256 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C30819 * C31048 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C2255 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C2254 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C2256 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C104) *
               C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C637 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31063) *
              C30819 * C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31063 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C639 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C1050 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C1051 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C1050 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C1051 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C2254 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C2255 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C2256 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C30819 * C31048 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C2255 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C2254 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C2256 +
           (C4707 * C1973 + C6564 + C6564 + C4703 * C1985 + C4709 * C2371 +
            C6565 + C6565 + C4704 * C2377 + C4711 * C6560 + C6566 + C6566 +
            C4705 * C6562) *
               C30767 * C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31130 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31118 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31130 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31130 -
           ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C31016 * C30837 * C31118 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C30819 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C30819 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C30819 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 * C30819 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
              C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C31127 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C1793 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C1792 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C1792 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C1793 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C1792 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C1793 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C31130 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C1793 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C1792 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C31118 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C1792 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C1793 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C31127 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C1793 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C1792 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C1792 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C1793 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C1792 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C1793 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C31130 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C1793 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C1792 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C31118 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C1792 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C1793 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C30882) *
              C30796 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C31062 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C3242) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C30882) *
              C30796 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C30805 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C3242 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C3242) *
               C30882) *
              C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C30920 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30927 +
            ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
             C535 * C104) *
                C31016 * C3750) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30927 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C30920 -
            (C2155 * C104 + C2156 * C103 +
             (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
                C31016 * C3750) *
               C30882) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
            (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30920 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30927 +
            (C2156 * C102 + C2155 * C103 +
             (C113 * C2142 + C2150 + C2150 + C31002 * C2144) * C104) *
                C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C30920 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30927 +
            (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
             C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
             C4705 * C1282) *
                C30767 * C31016 * C3750) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30927 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C30920 -
            (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
             C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
             C4703 * C1278) *
                C30767 * C31016 * C3750) *
               C30882) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30927 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C30920 -
            (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
             C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
             C4703 * C491) *
                C30767 * C31016 * C3750) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C30920 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30927 +
            (C4707 * C1259 + C6460 + C6460 + C4703 * C1277 + C4709 * C1265 +
             C6461 + C6461 + C4704 * C1283 + C4711 * C6456 + C6462 + C6462 +
             C4705 * C6458) *
                C30767 * C31016 * C3750) *
               C30882) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31130 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C31130 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C31118 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C31136 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
              C30819 * C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C31116 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31138 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31135 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31126 -
           (C2271 * C104 + C2272 * C103 +
            (C113 * C1974 + C1993 + C1993 + C31002 * C1986) * C102) *
               C31016 * C31109) *
              C30819 * C2588 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31135 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31138 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31126 +
           (C2272 * C102 + C2271 * C103 +
            (C113 * C2258 + C2266 + C2266 + C31002 * C2260) * C104) *
               C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C31136 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C3242) *
              C30819 * C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C3242 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C31116 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31130 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C31118 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31130 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C31118 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31138 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31135 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31126 -
           (C4711 * C6295 + C6305 + C6305 + C4705 * C6301 + C4709 * C2370 +
            C6306 + C6306 + C4704 * C2376 + C4707 * C1974 + C6307 + C6307 +
            C4703 * C1986) *
               C30767 * C31016 * C31109) *
              C30819 * C2588 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31135 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31138 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31126 +
           (C4707 * C1973 + C6564 + C6564 + C4703 * C1985 + C4709 * C2371 +
            C6565 + C6565 + C4704 * C2377 + C4711 * C6560 + C6566 + C6566 +
            C4705 * C6562) *
               C30767 * C31016 * C31109) *
              C30819 * C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30920 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30927 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C3750) *
              C30819 * C30796 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30927 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30920 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C3750) *
              C30819 * C30805 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30920 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30927 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C3750) *
              C30819 * C2851)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30920 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30927 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C3750) *
              C30819 * C30796 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30927 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30920 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C3750) *
              C30819 * C30805 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30920 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30927 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C3750) *
              C30819 * C2851)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C3242 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C31136 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
              C30819 * C31129 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C3242 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C31116 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C3242 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31130 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C3242) *
               C31118 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C3242 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C2588 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C3242) *
               C31130 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C3242 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C31118 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C3242 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C31136 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C3242) *
              C30819 * C31129 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C3242 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C31116 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C3242) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C3242 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31130 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C3242) *
               C31118 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C3242 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C2588 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C3242) *
               C31130 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C3242 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C31118 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C3242) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31062 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C30882) *
              C637 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C30882 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31062) *
              C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31062 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 *
               C30882) *
              C639 +
          ((C353 * C102 + C650 * C103 +
            (C113 * C641 + C647 + C647 + C31002 * C643) * C104) *
               C31016 * C30837 * C30882 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 *
               C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1392 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1393 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C1394 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C30837 * C31103) *
              C31048 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1393 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1392 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 * C1394 +
           (C1412 * C102 + C1411 * C103 +
            (C113 * C1398 + C1406 + C1406 + C31002 * C1400) * C104) *
               C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C30882) *
              C637 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31062) *
              C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31062 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C30882) *
              C639 +
          ((C4707 * C290 + C5083 + C5083 + C4703 * C310 + C4709 * C291 + C5084 +
            C5084 + C4704 * C311 + C4711 * C1398 + C5085 + C5085 +
            C4705 * C1400) *
               C30767 * C31016 * C30837 * C30882 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C30837 * C31062) *
              C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1393 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C1394 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C30837 * C31103) *
              C31048 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1393 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1392 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C1394 +
           (C4707 * C1125 + C5755 + C5755 + C4703 * C1137 + C4709 * C1128 +
            C5756 + C5756 + C4704 * C1140 + C4711 * C5751 + C5757 + C5757 +
            C4705 * C5753) *
               C30767 * C31016 * C30837 * C31103) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C31062 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C30882) *
              C281 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C31062 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C30882) *
              C282 +
          (((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
            (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
               C31062 +
           ((C939 * C102 + C940 * C103 +
             (C113 * C909 + C931 + C931 + C31002 * C919) * C104) *
                C31016 * C30924 -
            (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C1392 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C30924 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31063) *
              C1393 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31063 -
           (C1571 * C104 + C1572 * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C30924) *
              C1394 +
          (((C113 * C1670 + C1680 + C1680 + C31002 * C1676) * C102 +
            (C113 * C1671 + C1681 + C1681 + C31002 * C1677) * C103 +
            (C113 * C1672 + C1682 + C1682 + C31002 * C1678) * C104) *
               C31016 * C30924 -
           (C1411 * C104 + C1412 * C103 +
            (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
               C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C30882) *
              C281 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C31062 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C30882) *
              C282 +
          (((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 +
             C4721 + C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
             C4705 * C309) *
                C30767 * C31016 * C31063 -
            (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
             C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
             C4703 * C487) *
                C30767 * C31016 * C30924) *
               C31062 +
           ((C4707 * C907 + C5339 + C5339 + C4703 * C917 + C4709 * C1261 +
             C5340 + C5340 + C4704 * C1279 + C4711 * C1672 + C5341 + C5341 +
             C4705 * C1678) *
                C30767 * C31016 * C30924 -
            (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
             C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
             C4703 * C304) *
                C30767 * C31016 * C31063) *
               C30882) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C1392 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C30924 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31063) *
              C1393 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31063 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C30924) *
              C1394 +
          ((C4707 * C1670 + C6011 + C6011 + C4703 * C1676 + C4709 * C5636 +
            C6012 + C6012 + C4704 * C5642 + C4711 * C6007 + C6013 + C6013 +
            C4705 * C6009) *
               C30767 * C31016 * C30924 -
           (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
            C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
            C4703 * C1138) *
               C30767 * C31016 * C31063) *
              C31103) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31130 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31118 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31130 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31130 -
           ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C31016 * C30837 * C31118 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C30819 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C30819 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C30819 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 * C30819 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
              C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C30819 * C281 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C31120 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31131 -
           (C537 * C104 + C535 * C103 + C534 * C102) * C31016 * C31096) *
              C30819 * C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31131 -
           ((C113 * C475 + C518 + C518 + C31002 * C495) * C104 + C536 * C103 +
            C532 * C102) *
               C31016 * C31120 +
           (C535 * C102 + C537 * C103 +
            (C113 * C476 + C519 + C519 + C31002 * C496) * C104) *
               C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31131 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C31120 +
           ((C113 * C470 + C505 + C505 + C31002 * C490) * C102 + C534 * C103 +
            C535 * C104) *
               C31016 * C31096) *
              C1050 +
          (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
            C939 * C104) *
               C31016 * C31120 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C31131 -
           ((C113 * C1258 + C1286 + C1286 + C31002 * C1276) * C104 +
            (C113 * C1259 + C1287 + C1287 + C31002 * C1277) * C103 +
            (C113 * C1260 + C1288 + C1288 + C31002 * C1278) * C102) *
               C31016 * C31096) *
              C1051 +
          (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C31131 -
           ((C113 * C1261 + C1289 + C1289 + C31002 * C1279) * C104 +
            (C113 * C1262 + C1290 + C1290 + C31002 * C1280) * C103 +
            (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
               C31016 * C31120 +
           ((C113 * C1264 + C1292 + C1292 + C31002 * C1282) * C102 +
            (C113 * C1265 + C1293 + C1293 + C31002 * C1283) * C103 +
            (C113 * C1266 + C1294 + C1294 + C31002 * C1284) * C104) *
               C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C30819 * C281 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C31120 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31131 -
           (C4711 * C1265 + C4976 + C4976 + C4705 * C1283 + C4709 * C1259 +
            C4977 + C4977 + C4704 * C1277 + C4707 * C471 + C4978 + C4978 +
            C4703 * C491) *
               C30767 * C31016 * C31096) *
              C30819 * C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31131 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C31120 +
           (C4707 * C472 + C4982 + C4982 + C4703 * C492 + C4709 * C1258 +
            C4983 + C4983 + C4704 * C1276 + C4711 * C1266 + C4984 + C4984 +
            C4705 * C1284) *
               C30767 * C31016 * C31096) *
              C30819 * C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31131 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C31120 +
           (C4707 * C470 + C4970 + C4970 + C4703 * C490 + C4709 * C1260 +
            C4971 + C4971 + C4704 * C1278 + C4711 * C1264 + C4972 + C4972 +
            C4705 * C1282) *
               C30767 * C31016 * C31096) *
              C1050 +
          ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
            C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
            C4705 * C1676) *
               C30767 * C31016 * C31120 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C31131 -
           (C4711 * C5635 + C5645 + C5645 + C4705 * C5641 + C4709 * C1264 +
            C5646 + C5646 + C4704 * C1282 + C4707 * C1260 + C5647 + C5647 +
            C4703 * C1278) *
               C30767 * C31016 * C31096) *
              C1051 +
          ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C31131 -
           (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
            C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
            C4703 * C1281) *
               C30767 * C31016 * C31120 +
           (C4707 * C1264 + C5651 + C5651 + C4703 * C1282 + C4709 * C5635 +
            C5652 + C5652 + C4704 * C5641 + C4711 * C5637 + C5653 + C5653 +
            C4705 * C5643) *
               C30767 * C31016 * C31096) *
              C31093) *
         C30791) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C31063 -
           (C532 * C104 + C533 * C103 +
            (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
               C31016 * C30924) *
              C30819 * C637 +
          ((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
              C30819 * C638 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C31063 -
           (C759 * C104 + C536 * C103 + C532 * C102) * C31016 * C30924) *
              C30819 * C639 +
          ((C536 * C102 + C759 * C103 +
            (C113 * C750 + C756 + C756 + C31002 * C752) * C104) *
               C31016 * C30924 -
           (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
             C165 * C104) *
                C31016 * C31063 -
            (C532 * C104 + C533 * C103 +
             (C113 * C469 + C504 + C504 + C31002 * C489) * C102) *
                C31016 * C30924) *
               C1050 +
           (((C113 * C905 + C921 + C921 + C31002 * C915) * C102 + C938 * C103 +
             C939 * C104) *
                C31016 * C30924 -
            (C349 * C104 + C350 * C103 +
             (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
                C31016 * C31063) *
               C1051 +
           (((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
             C352 * C104) *
                C31016 * C31063 -
            (C1571 * C104 + C1572 * C103 +
             (C113 * C1263 + C1291 + C1291 + C31002 * C1281) * C102) *
                C31016 * C30924) *
               C31093) *
              C31048 +
          (((C533 * C102 + C532 * C103 + C536 * C104) * C31016 * C30924 -
            (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C31063) *
               C1050 +
           ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C31063 -
            (C940 * C104 + C939 * C103 + C938 * C102) * C31016 * C30924) *
               C1051 +
           ((C1572 * C102 + C1571 * C103 +
             (C113 * C1558 + C1566 + C1566 + C31002 * C1560) * C104) *
                C31016 * C30924 -
            (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C31063 -
           (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
            C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
            C4703 * C489) *
               C30767 * C31016 * C30924) *
              C30819 * C637 +
          ((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 + C4974 +
            C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
            C4705 * C1280) *
               C30767 * C31016 * C30924 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C31063) *
              C30819 * C638 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C31063 -
           (C4711 * C1261 + C4979 + C4979 + C4705 * C1279 + C4709 * C907 +
            C4980 + C4980 + C4704 * C917 + C4707 * C467 + C4981 + C4981 +
            C4703 * C487) *
               C30767 * C31016 * C30924) *
              C30819 * C639 +
          ((C4707 * C473 + C5184 + C5184 + C4703 * C493 + C4709 * C908 + C5185 +
            C5185 + C4704 * C918 + C4711 * C1558 + C5186 + C5186 +
            C4705 * C1560) *
               C30767 * C31016 * C30924 -
           (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
            C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 +
            C4703 * C132) *
               C30767 * C31016 * C31063) *
              C30819 * C31097)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 +
             C4715 + C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
             C4705 * C307) *
                C30767 * C31016 * C31063 -
            (C4711 * C1263 + C4967 + C4967 + C4705 * C1281 + C4709 * C905 +
             C4968 + C4968 + C4704 * C915 + C4707 * C469 + C4969 + C4969 +
             C4703 * C489) *
                C30767 * C31016 * C30924) *
               C1050 +
           ((C4707 * C905 + C5333 + C5333 + C4703 * C915 + C4709 * C1263 +
             C5334 + C5334 + C4704 * C1281 + C4711 * C1670 + C5335 + C5335 +
             C4705 * C1676) *
                C30767 * C31016 * C30924 -
            (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
             C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
             C4703 * C306) *
                C30767 * C31016 * C31063) *
               C1051 +
           ((C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
             C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
             C4705 * C1139) *
                C30767 * C31016 * C31063 -
            (C4711 * C5636 + C5648 + C5648 + C4705 * C5642 + C4709 * C1670 +
             C5649 + C5649 + C4704 * C1676 + C4707 * C1263 + C5650 + C5650 +
             C4703 * C1281) *
                C30767 * C31016 * C30924) *
               C31093) *
              C31048 +
          (((C4707 * C468 + C4973 + C4973 + C4703 * C488 + C4709 * C906 +
             C4974 + C4974 + C4704 * C916 + C4711 * C1262 + C4975 + C4975 +
             C4705 * C1280) *
                C30767 * C31016 * C30924 -
            (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 +
             C4718 + C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
             C4703 * C130) *
                C30767 * C31016 * C31063) *
               C1050 +
           ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 +
             C4846 + C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
             C4705 * C1137) *
                C30767 * C31016 * C31063 -
            (C4711 * C1671 + C5336 + C5336 + C4705 * C1677 + C4709 * C1262 +
             C5337 + C5337 + C4704 * C1280 + C4707 * C906 + C5338 + C5338 +
             C4703 * C916) *
                C30767 * C31016 * C30924) *
               C1051 +
           ((C4707 * C1262 + C5907 + C5907 + C4703 * C1280 + C4709 * C1671 +
             C5908 + C5908 + C4704 * C1677 + C4711 * C5903 + C5909 + C5909 +
             C4705 * C5905) *
                C30767 * C31016 * C30924 -
            (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
             C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
             C4703 * C308) *
                C30767 * C31016 * C31063) *
               C31093) *
              C30802)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C30819 * C108 -
          (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C30819 *
              C109 +
          (C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C30819 *
              C110 -
          (C168 * C104 + C167 * C103 + C166 * C102) * C31016 * C30837 * C30819 *
              C111 +
          (C167 * C102 + C168 * C103 +
           (C113 * C121 + C153 + C153 + C31002 * C135) * C104) *
              C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C31130 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C31118 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C281 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 *
               C31118 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 *
               C31130 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C282 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 *
               C31130 -
           ((C113 * C292 + C335 + C335 + C31002 * C312) * C104 + C353 * C103 +
            C349 * C102) *
               C31016 * C30837 * C31118 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
            C165 * C104) *
               C31016 * C30837 * C1050 -
           (C349 * C104 + C350 * C103 +
            (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
               C31016 * C30837 * C1051 +
           ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
            C352 * C104) *
               C31016 * C30837 * C31093) *
              C31127 +
          ((C350 * C102 + C349 * C103 + C353 * C104) * C31016 * C30837 * C1051 -
           (C166 * C104 + C165 * C103 + C164 * C102) * C31016 * C30837 * C1050 -
           (C354 * C104 + C352 * C103 + C351 * C102) * C31016 * C30837 *
               C31093) *
              C31114 +
          ((C165 * C102 + C166 * C103 + C167 * C104) * C31016 * C30837 * C1050 -
           (C650 * C104 + C353 * C103 + C349 * C102) * C31016 * C30837 * C1051 +
           (C352 * C102 + C354 * C103 +
            (C113 * C293 + C336 + C336 + C31002 * C313) * C104) *
               C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C137 + C137 + C31002 * C129) * C102 + C164 * C103 +
           C165 * C104) *
              C31016 * C30837 * C1118 -
          (C349 * C104 + C350 * C103 +
           (C113 * C286 + C321 + C321 + C31002 * C306) * C102) *
              C31016 * C30837 * C1119 +
          ((C113 * C287 + C322 + C322 + C31002 * C307) * C102 + C351 * C103 +
           C352 * C104) *
              C31016 * C30837 * C1120 -
          ((C113 * C1124 + C1143 + C1143 + C31002 * C1136) * C104 +
           (C113 * C1125 + C1144 + C1144 + C31002 * C1137) * C103 +
           (C113 * C1126 + C1145 + C1145 + C31002 * C1138) * C102) *
              C31016 * C30837 * C1121 +
          ((C113 * C1127 + C1146 + C1146 + C31002 * C1139) * C102 +
           (C113 * C1128 + C1147 + C1147 + C31002 * C1140) * C103 +
           (C113 * C1129 + C1148 + C1148 + C31002 * C1141) * C104) *
              C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C30819 * C108 -
          (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
           C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 + C4703 * C130) *
              C30767 * C31016 * C30837 * C30819 * C109 +
          (C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
           C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 + C4705 * C309) *
              C30767 * C31016 * C30837 * C30819 * C110 -
          (C4711 * C291 + C4723 + C4723 + C4705 * C311 + C4709 * C290 + C4724 +
           C4724 + C4704 * C310 + C4707 * C118 + C4725 + C4725 + C4703 * C132) *
              C30767 * C31016 * C30837 * C30819 * C111 +
          (C4707 * C119 + C4726 + C4726 + C4703 * C133 + C4709 * C292 + C4727 +
           C4727 + C4704 * C312 + C4711 * C293 + C4728 + C4728 + C4705 * C313) *
              C30767 * C31016 * C30837 * C30819 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C281 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C31118 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C282 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C31130 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C31118 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
            C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 +
            C4705 * C307) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
            C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
            C4703 * C306) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 +
            C4843 + C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
            C4705 * C1139) *
               C30767 * C31016 * C30837 * C31093) *
              C31127 +
          ((C4707 * C285 + C4845 + C4845 + C4703 * C305 + C4709 * C288 + C4846 +
            C4846 + C4704 * C308 + C4711 * C1125 + C4847 + C4847 +
            C4705 * C1137) *
               C30767 * C31016 * C30837 * C1051 -
           (C4711 * C288 + C4717 + C4717 + C4705 * C308 + C4709 * C285 + C4718 +
            C4718 + C4704 * C305 + C4707 * C116 + C4719 + C4719 +
            C4703 * C130) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1128 + C4848 + C4848 + C4705 * C1140 + C4709 * C1125 +
            C4849 + C4849 + C4704 * C1137 + C4707 * C288 + C4850 + C4850 +
            C4703 * C308) *
               C30767 * C31016 * C30837 * C31093) *
              C31114 +
          ((C4707 * C117 + C4720 + C4720 + C4703 * C131 + C4709 * C284 + C4721 +
            C4721 + C4704 * C304 + C4711 * C289 + C4722 + C4722 +
            C4705 * C309) *
               C30767 * C31016 * C30837 * C1050 -
           (C4711 * C1124 + C4851 + C4851 + C4705 * C1136 + C4709 * C289 +
            C4852 + C4852 + C4704 * C309 + C4707 * C284 + C4853 + C4853 +
            C4703 * C304) *
               C30767 * C31016 * C30837 * C1051 +
           (C4707 * C289 + C4854 + C4854 + C4703 * C309 + C4709 * C1124 +
            C4855 + C4855 + C4704 * C1136 + C4711 * C1129 + C4856 + C4856 +
            C4705 * C1141) *
               C30767 * C31016 * C30837 * C31093) *
              C31087)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C4707 * C115 + C4714 + C4714 + C4703 * C129 + C4709 * C286 + C4715 +
           C4715 + C4704 * C306 + C4711 * C287 + C4716 + C4716 + C4705 * C307) *
              C30767 * C31016 * C30837 * C1118 -
          (C4711 * C1126 + C4839 + C4839 + C4705 * C1138 + C4709 * C287 +
           C4840 + C4840 + C4704 * C307 + C4707 * C286 + C4841 + C4841 +
           C4703 * C306) *
              C30767 * C31016 * C30837 * C1119 +
          (C4707 * C287 + C4842 + C4842 + C4703 * C307 + C4709 * C1126 + C4843 +
           C4843 + C4704 * C1138 + C4711 * C1127 + C4844 + C4844 +
           C4705 * C1139) *
              C30767 * C31016 * C30837 * C1120 -
          (C4711 * C5513 + C5520 + C5520 + C4705 * C5517 + C4709 * C1127 +
           C5521 + C5521 + C4704 * C1139 + C4707 * C1126 + C5522 + C5522 +
           C4703 * C1138) *
              C30767 * C31016 * C30837 * C1121 +
          (C4707 * C1127 + C5523 + C5523 + C4703 * C1139 + C4709 * C5513 +
           C5524 + C5524 + C4704 * C5517 + C4711 * C5514 + C5525 + C5525 +
           C4705 * C5518) *
              C30767 * C31016 * C30837 * C1122) *
         C30791) /
            (p * q * std::sqrt(p + q));
}
