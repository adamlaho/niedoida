/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_sddd_AB_xx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_0222_12_11(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C29978 = ae * be;
    const double C29977 = ae + be;
    const double C29976 = 0 * be;
    const double C29975 = xA - xB;
    const double C30015 = p + q;
    const double C30014 = p * q;
    const double C30020 = xP - xQ;
    const double C30019 = bs[2];
    const double C30025 = bs[3];
    const double C30036 = bs[4];
    const double C30057 = bs[5];
    const double C30093 = bs[6];
    const double C30149 = bs[7];
    const double C30214 = yP - yQ;
    const double C30248 = zP - zQ;
    const double C119 = bs[0];
    const double C30728 = ce + de;
    const double C30727 = ce * de;
    const double C30726 = xC - xD;
    const double C30760 = yC - yD;
    const double C30778 = zC - zD;
    const double C30946 = yA - yB;
    const double C30958 = zA - zB;
    const double C29986 = 2 * C29978;
    const double C29979 = std::pow(C29977, 2);
    const double C30992 = 2 * C29977;
    const double C29980 = C29978 * C29975;
    const double C30707 = std::pow(C29975, 2);
    const double C30991 = C29975 * ae;
    const double C30016 = 2 * C30014;
    const double C30028 = C30020 * ae;
    const double C30027 = C30020 * be;
    const double C30024 = std::pow(C30020, 2);
    const double C30219 = std::pow(C30214, 2);
    const double C30253 = std::pow(C30248, 2);
    const double C30732 = 2 * C30728;
    const double C30731 = std::pow(C30728, 2);
    const double C30733 = C30726 * de;
    const double C30730 = C30726 * ce;
    const double C30729 = std::pow(C30726, 2);
    const double C30761 = std::pow(C30760, 2);
    const double C30820 = C30760 * de;
    const double C30818 = C30760 * ce;
    const double C30779 = std::pow(C30778, 2);
    const double C30862 = C30778 * de;
    const double C30860 = C30778 * ce;
    const double C30947 = std::pow(C30946, 2);
    const double C31023 = C30946 * ae;
    const double C30959 = std::pow(C30958, 2);
    const double C31024 = C30958 * ae;
    const double C29981 = 2 * C29979;
    const double C31027 = std::pow(C30992, -2);
    const double C31025 = std::pow(C30992, -1);
    const double C30708 = C30707 * C29978;
    const double C30018 = C30016 / C30015;
    const double C140 =
        ((std::pow(xP - xQ, 2) * bs[2] * std::pow(C30016 / C30015, 2) -
          (bs[1] * C30016) / C30015) *
         C29978) /
        C29979;
    const double C120 = -(C30020 * bs[1] * C30016) / C30015;
    const double C265 = -(C30214 * bs[1] * C30016) / C30015;
    const double C418 = -(C30248 * bs[1] * C30016) / C30015;
    const double C30031 = C30025 * C30028;
    const double C30042 = C30036 * C30028;
    const double C30065 = C30057 * C30028;
    const double C30105 = C30093 * C30028;
    const double C30165 = C30149 * C30028;
    const double C127 = (-(bs[1] * C30028 * C30016) / C30015) / C29977;
    const double C30030 = C30025 * C30027;
    const double C30039 = C30036 * C30027;
    const double C30061 = C30057 * C30027;
    const double C30101 = C30093 * C30027;
    const double C30161 = C30149 * C30027;
    const double C126 = (-(bs[1] * C30027 * C30016) / C30015) / C29977;
    const double C30038 = C30024 * C30036;
    const double C30060 = C30024 * C30057;
    const double C30100 = C30024 * C30093;
    const double C30160 = C30024 * C30149;
    const double C30745 = std::pow(C30732, -1);
    const double C31000 = std::pow(C30732, -2);
    const double C30746 = 2 * C30731;
    const double C31004 = C30731 * C30732;
    const double C31003 = 4 * C30731;
    const double C30993 = std::pow(C30730, 2);
    const double C30734 = C30729 * C30727;
    const double C30762 = C30761 * C30727;
    const double C31005 = std::pow(C30818, 2);
    const double C30780 = C30779 * C30727;
    const double C31007 = std::pow(C30860, 2);
    const double C30948 = C30947 * C29978;
    const double C30960 = C30959 * C29978;
    const double C30709 = C30708 / C29977;
    const double C30021 = std::pow(C30018, 2);
    const double C30026 = -C30018;
    const double C30037 = std::pow(C30018, 4);
    const double C30094 = std::pow(C30018, 6);
    const double C31037 = 4 * C31004;
    const double C31036 = C30728 * C31003;
    const double C30735 = C30734 / C30728;
    const double C30763 = C30762 / C30728;
    const double C30781 = C30780 / C30728;
    const double C30949 = C30948 / C29977;
    const double C30961 = C30960 / C29977;
    const double C30710 = -C30709;
    const double C30023 = C30019 * C30021;
    const double C141 = (ae * C30021 * C30019 * C30020 * be +
                         be * C30021 * C30019 * C30020 * ae +
                         C30020 *
                             (C30019 * C30021 + std::pow(C30020, 2) * bs[3] *
                                                    std::pow(-C30018, 3)) *
                             C29978) /
                        C29979;
    const double C128 = (C30020 * C30021 * C30019 * C30027) / C29977 -
                        (be * bs[1] * C30016) / (C30015 * C29977);
    const double C129 = (C30020 * C30021 * C30019 * C30028) / C29977 -
                        (ae * bs[1] * C30016) / (C30015 * C29977);
    const double C277 = (C30214 * C30021 * C30019 * C30027) / C29977;
    const double C278 = (C30214 * C30021 * C30019 * C30028) / C29977;
    const double C430 = (C30248 * C30021 * C30019 * C30027) / C29977;
    const double C431 = (C30248 * C30021 * C30019 * C30028) / C29977;
    const double C30029 = std::pow(C30026, 3);
    const double C30058 = std::pow(C30026, 5);
    const double C30150 = std::pow(C30026, 7);
    const double C30046 = C30037 * C30042;
    const double C30045 = C30037 * C30039;
    const double C30044 = C30038 * C30037;
    const double C30056 = C30036 * C30037;
    const double C30112 = C30094 * C30105;
    const double C30109 = C30094 * C30101;
    const double C30108 = C30100 * C30094;
    const double C30148 = C30093 * C30094;
    const double C30736 = -C30735;
    const double C30764 = -C30763;
    const double C30782 = -C30781;
    const double C30950 = -C30949;
    const double C30962 = -C30961;
    const double C30711 = std::exp(C30710);
    const double C121 = C30023 * C30024 - (bs[1] * C30016) / C30015;
    const double C264 = C30214 * C30020 * C30023;
    const double C266 = C30023 * C30219 - (bs[1] * C30016) / C30015;
    const double C417 = C30248 * C30020 * C30023;
    const double C419 = C30023 * C30253 - (bs[1] * C30016) / C30015;
    const double C814 = C30248 * C30214 * C30023;
    const double C30033 = C30029 * C30031;
    const double C30032 = C30029 * C30030;
    const double C30035 = C30025 * C30029;
    const double C295 =
        (C30214 * (C30023 + C30024 * C30025 * C30029) * C29978) / C29979;
    const double C448 =
        (C30248 * (C30023 + C30024 * C30025 * C30029) * C29978) / C29979;
    const double C30071 = C30058 * C30065;
    const double C30068 = C30058 * C30061;
    const double C30067 = C30060 * C30058;
    const double C30092 = C30057 * C30058;
    const double C30173 = C30150 * C30165;
    const double C30170 = C30150 * C30161;
    const double C30169 = C30160 * C30150;
    const double C30049 = C30020 * C30046;
    const double C30055 = be * C30046;
    const double C30515 = C30214 * C30046;
    const double C30048 = C30020 * C30045;
    const double C30054 = ae * C30045;
    const double C30513 = C30214 * C30045;
    const double C30066 = C30056 * ae;
    const double C30064 = C30056 * C30024;
    const double C30063 = C30020 * C30056;
    const double C30062 = C30056 * be;
    const double C30663 = C30056 * C30219;
    const double C30666 = C30214 * C30056;
    const double C30687 = C30056 * C30253;
    const double C30690 = C30248 * C30056;
    const double C30118 = C30020 * C30112;
    const double C30147 = be * C30112;
    const double C30237 = C30112 * C30219;
    const double C30271 = C30112 * C30253;
    const double C30285 = C30214 * C30112;
    const double C30302 = C30248 * C30112;
    const double C30115 = C30020 * C30109;
    const double C30146 = ae * C30109;
    const double C30236 = C30109 * C30219;
    const double C30270 = C30109 * C30253;
    const double C30284 = C30214 * C30109;
    const double C30301 = C30248 * C30109;
    const double C30166 = C30148 * ae;
    const double C30164 = C30148 * C30024;
    const double C30163 = C30020 * C30148;
    const double C30162 = C30148 * be;
    const double C30737 = std::exp(C30736);
    const double C30765 = std::exp(C30764);
    const double C30783 = std::exp(C30782);
    const double C30951 = std::exp(C30950);
    const double C30963 = std::exp(C30962);
    const double C29982 = C29980 * C30711;
    const double C31026 = C30711 * C30991;
    const double C101 =
        (C30711 * std::pow(C30991, 2)) / C29979 + C30711 / C30992;
    const double C103 = C31027 * C30711;
    const double C13230 = C31025 * C30711;
    const double C131 =
        (C30021 * C30019 * C30028 + C30020 * (C30020 * C30033 + C30023 * ae) +
         C30020 * C30023 * ae) /
        C29977;
    const double C276 = (C30214 * (C30020 * C30033 + C30023 * ae)) / C29977;
    const double C280 = (C30021 * C30019 * C30028 + C30033 * C30219) / C29977;
    const double C429 = (C30248 * (C30020 * C30033 + C30023 * ae)) / C29977;
    const double C433 = (C30021 * C30019 * C30028 + C30033 * C30253) / C29977;
    const double C820 = (C30248 * C30214 * C30033) / C29977;
    const double C1029 =
        (2 * C30214 * C30033 + C30214 * (C30033 + C30046 * C30219)) / C29977;
    const double C1166 = (C30214 * C30033 + C30214 * C30046 * C30253) / C29977;
    const double C1172 = (C30248 * (C30033 + C30046 * C30219)) / C29977;
    const double C1857 =
        (2 * C30248 * C30033 + C30248 * (C30033 + C30046 * C30253)) / C29977;
    const double C142 =
        ((C30023 + C30024 * C30025 * C30029) * C29978 +
         ae * (C30020 * C30032 + C30023 * be) +
         be * (C30020 * C30033 + C30023 * ae) +
         C30020 *
             (ae * C30032 + be * C30033 +
              C30020 *
                  (C30025 * C30029 + C30024 * bs[4] * std::pow(C30018, 4)) *
                  C29978)) /
        C29979;
    const double C130 =
        (C30021 * C30019 * C30027 + C30020 * (C30020 * C30032 + C30023 * be) +
         C30020 * C30023 * be) /
        C29977;
    const double C275 = (C30214 * (C30020 * C30032 + C30023 * be)) / C29977;
    const double C279 = (C30021 * C30019 * C30027 + C30032 * C30219) / C29977;
    const double C428 = (C30248 * (C30020 * C30032 + C30023 * be)) / C29977;
    const double C432 = (C30021 * C30019 * C30027 + C30032 * C30253) / C29977;
    const double C819 = (C30248 * C30214 * C30032) / C29977;
    const double C1028 =
        (2 * C30214 * C30032 + C30214 * (C30032 + C30045 * C30219)) / C29977;
    const double C1165 = (C30214 * C30032 + C30214 * C30045 * C30253) / C29977;
    const double C1171 = (C30248 * (C30032 + C30045 * C30219)) / C29977;
    const double C1856 =
        (2 * C30248 * C30032 + C30248 * (C30032 + C30045 * C30253)) / C29977;
    const double C30043 = C30035 * ae;
    const double C30041 = C30020 * C30035;
    const double C30040 = C30035 * be;
    const double C30047 = C30035 + C30044;
    const double C30657 = C30214 * C30035;
    const double C122 =
        2 * C30020 * C30023 + C30020 * (C30023 + C30035 * C30024);
    const double C263 = C30214 * (C30023 + C30035 * C30024);
    const double C416 = C30248 * (C30023 + C30035 * C30024);
    const double C1020 =
        2 * C30214 * C30023 + C30214 * (C30023 + C30035 * C30219);
    const double C1021 =
        3 * (C30023 + C30035 * C30219) +
        C30214 * (2 * C30214 * C30035 + C30214 * (C30035 + C30056 * C30219));
    const double C1154 = C30214 * C30023 + C30214 * C30035 * C30253;
    const double C1157 = C30248 * (C30023 + C30035 * C30219);
    const double C1158 =
        C30023 + C30035 * C30219 + (C30035 + C30056 * C30219) * C30253;
    const double C1544 =
        C30248 * (2 * C30214 * C30035 + C30214 * (C30035 + C30056 * C30219));
    const double C1848 =
        2 * C30248 * C30023 + C30248 * (C30023 + C30035 * C30253);
    const double C1849 =
        3 * (C30023 + C30035 * C30253) +
        C30248 * (2 * C30248 * C30035 + C30248 * (C30035 + C30056 * C30253));
    const double C4677 = C30711 * C295;
    const double C9190 = C30711 * C448;
    const double C30075 = C30020 * C30071;
    const double C30091 = be * C30071;
    const double C30228 = C30214 * C30071;
    const double C30262 = C30248 * C30071;
    const double C30528 = C30071 * C30219;
    const double C30570 = C30071 * C30253;
    const double C1031 =
        (3 * (C30033 + C30046 * C30219) +
         C30214 * (2 * C30214 * C30046 + C30214 * (C30046 + C30071 * C30219))) /
        C29977;
    const double C1174 =
        (C30033 + C30046 * C30219 + (C30046 + C30071 * C30219) * C30253) /
        C29977;
    const double C1548 =
        (C30248 * (2 * C30214 * C30046 + C30214 * (C30046 + C30071 * C30219))) /
        C29977;
    const double C1859 =
        (3 * (C30033 + C30046 * C30253) +
         C30248 * (2 * C30248 * C30046 + C30248 * (C30046 + C30071 * C30253))) /
        C29977;
    const double C30074 = C30020 * C30068;
    const double C30090 = ae * C30068;
    const double C30227 = C30214 * C30068;
    const double C30261 = C30248 * C30068;
    const double C30525 = C30068 * C30219;
    const double C30567 = C30068 * C30253;
    const double C1030 =
        (3 * (C30032 + C30045 * C30219) +
         C30214 * (2 * C30214 * C30045 + C30214 * (C30045 + C30068 * C30219))) /
        C29977;
    const double C1173 =
        (C30032 + C30045 * C30219 + (C30045 + C30068 * C30219) * C30253) /
        C29977;
    const double C1547 =
        (C30248 * (2 * C30214 * C30045 + C30214 * (C30045 + C30068 * C30219))) /
        C29977;
    const double C1858 =
        (3 * (C30032 + C30045 * C30253) +
         C30248 * (2 * C30248 * C30045 + C30248 * (C30045 + C30068 * C30253))) /
        C29977;
    const double C30073 = C30056 + C30067;
    const double C30106 = C30092 * ae;
    const double C30104 = C30092 * C30024;
    const double C30103 = C30020 * C30092;
    const double C30102 = C30092 * be;
    const double C30114 = C30092 + C30108;
    const double C30667 = C30092 * C30219;
    const double C30691 = C30092 * C30253;
    const double C30702 = C30214 * C30092;
    const double C30179 = C30020 * C30173;
    const double C30176 = C30020 * C30170;
    const double C30175 = C30148 + C30169;
    const double C30059 = C30054 + C30055;
    const double C30070 = C30035 + C30064;
    const double C30072 = C30063 * ae;
    const double C30069 = C30063 * be;
    const double C30096 = 2 * C30063;
    const double C30659 = C30214 * C30063;
    const double C30664 = C30035 + C30663;
    const double C30668 = 2 * C30666;
    const double C30688 = C30035 + C30687;
    const double C30692 = 2 * C30690;
    const double C30240 = C30071 + C30237;
    const double C30274 = C30071 + C30271;
    const double C30290 = be * C30285;
    const double C30322 = C30248 * C30285;
    const double C30592 = C30285 * C30253;
    const double C30307 = be * C30302;
    const double C30159 = C30146 + C30147;
    const double C30239 = C30068 + C30236;
    const double C30273 = C30068 + C30270;
    const double C30289 = ae * C30284;
    const double C30321 = C30248 * C30284;
    const double C30589 = C30284 * C30253;
    const double C30306 = ae * C30301;
    const double C30172 = C30092 + C30164;
    const double C30174 = C30163 * ae;
    const double C30171 = C30163 * be;
    const double C30739 = C30737 * C30730;
    const double C30738 = C30737 / C30732;
    const double C30748 = C30745 * C30737;
    const double C30996 = C30737 * C30733;
    const double C31034 = C31000 * C30737;
    const double C31028 = C30737 * C30993;
    const double C30819 = C30765 / C30732;
    const double C30821 = C30765 * C30818;
    const double C30828 = C30745 * C30765;
    const double C31011 = C30765 * C30820;
    const double C31040 = C31000 * C30765;
    const double C31038 = C30765 * C31005;
    const double C30861 = C30783 / C30732;
    const double C30863 = C30783 * C30860;
    const double C30870 = C30745 * C30783;
    const double C31017 = C30783 * C30862;
    const double C31043 = C31000 * C30783;
    const double C31041 = C30783 * C31007;
    const double C31057 = C30951 * C31023;
    const double C4558 =
        (C30951 * std::pow(C31023, 2)) / C29979 + C30951 / C30992;
    const double C4560 = C31027 * C30951;
    const double C13232 = C31025 * C30951;
    const double C31058 = C30963 * C31024;
    const double C8963 =
        (C30963 * std::pow(C31024, 2)) / C29979 + C30963 / C30992;
    const double C8965 = C31027 * C30963;
    const double C18966 = C31025 * C30963;
    const double C29985 = 2 * C29982;
    const double C117 = ((0 * ae) / C29977 - C29982 / C29979) / (2 * C29977) +
                        (0 * ae) / C29977;
    const double C13235 = (0 * ae) / C29977 - C29982 / C29979;
    const double C102 = (2 * C31025 * C31026) / C29977;
    const double C13229 = C31026 / C29977;
    const double C30052 = C30049 + C30043;
    const double C267 = C30020 * C30023 + C30041 * C30219;
    const double C420 = C30020 * C30023 + C30041 * C30253;
    const double C815 = C30248 * C30214 * C30041;
    const double C1019 =
        2 * C30214 * C30041 + C30214 * (C30041 + C30063 * C30219);
    const double C1153 = C30214 * C30041 + C30214 * C30063 * C30253;
    const double C1156 = C30248 * (C30041 + C30063 * C30219);
    const double C1847 =
        2 * C30248 * C30041 + C30248 * (C30041 + C30063 * C30253);
    const double C30051 = C30048 + C30040;
    const double C30050 = C30047 * C29978;
    const double C2224 =
        2 * C30248 * C30657 + C30248 * (C30657 + C30214 * C30056 * C30253);
    const double C6272 =
        3 * (C30657 + C30666 * C30253) +
        C30248 * (2 * C30248 * C30666 +
                  C30248 * (C30666 + C30214 * C30092 * C30253));
    const double C30078 = C30075 + C30066;
    const double C30231 = be * C30228;
    const double C30535 = 2 * C30228;
    const double C2228 =
        (2 * C30248 * C30515 + C30248 * (C30515 + C30228 * C30253)) / C29977;
    const double C6277 =
        (3 * (C30515 + C30228 * C30253) +
         C30248 * (2 * C30248 * C30228 + C30248 * (C30228 + C30285 * C30253))) /
        C29977;
    const double C30265 = be * C30262;
    const double C30577 = 2 * C30262;
    const double C30529 = C30046 + C30528;
    const double C30571 = C30046 + C30570;
    const double C30077 = C30074 + C30062;
    const double C30099 = C30090 + C30091;
    const double C30230 = ae * C30227;
    const double C30531 = 2 * C30227;
    const double C2227 =
        (2 * C30248 * C30513 + C30248 * (C30513 + C30227 * C30253)) / C29977;
    const double C6276 =
        (3 * (C30513 + C30227 * C30253) +
         C30248 * (2 * C30248 * C30227 + C30248 * (C30227 + C30284 * C30253))) /
        C29977;
    const double C30264 = ae * C30261;
    const double C30573 = 2 * C30261;
    const double C30526 = C30045 + C30525;
    const double C30568 = C30045 + C30567;
    const double C30076 = C30073 * C29978;
    const double C30123 = C30118 + C30106;
    const double C30111 = C30056 + C30104;
    const double C30113 = C30103 * ae;
    const double C30110 = C30103 * be;
    const double C30153 = 2 * C30103;
    const double C30676 = C30103 * C30219;
    const double C30697 = C30214 * C30103;
    const double C30699 = C30103 * C30253;
    const double C1022 =
        3 * (C30041 + C30063 * C30219) +
        C30214 * (2 * C30214 * C30063 + C30214 * (C30063 + C30103 * C30219));
    const double C1159 =
        C30041 + C30063 * C30219 + (C30063 + C30103 * C30219) * C30253;
    const double C1545 =
        C30248 * (2 * C30214 * C30063 + C30214 * (C30063 + C30103 * C30219));
    const double C1850 =
        3 * (C30041 + C30063 * C30253) +
        C30248 * (2 * C30248 * C30063 + C30248 * (C30063 + C30103 * C30253));
    const double C30121 = C30115 + C30102;
    const double C30120 = C30114 * C29978;
    const double C30669 = C30056 + C30667;
    const double C30693 = C30056 + C30691;
    const double C30703 = C30702 * C30253;
    const double C30184 = C30179 + C30166;
    const double C30182 = C30176 + C30162;
    const double C30181 = C30175 * C29978;
    const double C123 = 3 * (C30023 + C30035 * C30024) +
                        C30020 * (2 * C30041 + C30020 * C30070);
    const double C268 = C30023 + C30035 * C30024 + C30070 * C30219;
    const double C269 = C30214 * (2 * C30041 + C30020 * C30070);
    const double C421 = C30023 + C30035 * C30024 + C30070 * C30253;
    const double C422 = C30248 * (2 * C30041 + C30020 * C30070);
    const double C816 = C30248 * C30214 * C30070;
    const double C2225 =
        2 * C30248 * C30659 + C30248 * (C30659 + C30214 * C30103 * C30253);
    const double C5433 =
        4 * (2 * C30657 + C30214 * C30664) +
        C30214 * (3 * C30664 + C30214 * (2 * C30214 * C30056 +
                                         C30214 * (C30056 + C30092 * C30219)));
    const double C10518 =
        4 * (2 * C30248 * C30035 + C30248 * C30688) +
        C30248 * (3 * C30688 + C30248 * (2 * C30248 * C30056 +
                                         C30248 * (C30056 + C30092 * C30253)));
    const double C30243 = be * C30240;
    const double C30536 = C30214 * C30240;
    const double C30277 = be * C30274;
    const double C30578 = C30248 * C30274;
    const double C30325 = be * C30322;
    const double C30593 = C30228 + C30592;
    const double C30242 = ae * C30239;
    const double C30532 = C30214 * C30239;
    const double C30276 = ae * C30273;
    const double C30574 = C30248 * C30273;
    const double C30293 = C30289 + C30290;
    const double C30324 = ae * C30321;
    const double C30590 = C30227 + C30589;
    const double C30310 = C30306 + C30307;
    const double C30180 = C30172 * ae;
    const double C30178 = C30020 * C30172;
    const double C30177 = C30172 * be;
    const double C30740 = C30739 * C30733;
    const double C30747 = C30739 / C30746;
    const double C30997 = C30745 * C30739;
    const double C30995 = C30739 / C30728;
    const double C260 = (C30737 * std::pow(C30733, 2)) / C30731 + C30738;
    const double C30749 = C30748 * C30733;
    const double C31001 = C30730 * C30748;
    const double C30999 = 2 * C30748;
    const double C31044 = C30748 / C31003;
    const double C112 = C30748 / C31037;
    const double C2705 = C30748 / C30732;
    const double C31030 = C30996 / C30728;
    const double C261 = (-2 * C30745 * C30996) / C30728;
    const double C31059 = C31028 / C30731;
    const double C944 = (C30765 * std::pow(C30820, 2)) / C30731 + C30819;
    const double C30822 = C30821 * C30820;
    const double C30827 = C30821 / C30746;
    const double C31009 = C30821 / C30728;
    const double C31006 = C30745 * C30821;
    const double C30829 = C30828 * C30820;
    const double C31015 = C30818 * C30828;
    const double C31014 = 2 * C30828;
    const double C31050 = C30828 / C31003;
    const double C1016 = C30828 / C31037;
    const double C2702 = C30828 / C30732;
    const double C31046 = C31011 / C30728;
    const double C945 = (-2 * C30745 * C31011) / C30728;
    const double C31064 = C31038 / C30731;
    const double C1666 = (C30783 * std::pow(C30862, 2)) / C30731 + C30861;
    const double C30864 = C30863 * C30862;
    const double C30869 = C30863 / C30746;
    const double C31010 = C30863 / C30728;
    const double C31008 = C30745 * C30863;
    const double C30871 = C30870 * C30862;
    const double C31021 = C30860 * C30870;
    const double C31020 = 2 * C30870;
    const double C31056 = C30870 / C31003;
    const double C1845 = C30870 / C31037;
    const double C3604 = C30870 / C30732;
    const double C31052 = C31017 / C30728;
    const double C1667 = (-2 * C30745 * C31017) / C30728;
    const double C31066 = C31041 / C30731;
    const double C4559 = (2 * C31025 * C31057) / C29977;
    const double C13231 = C31057 / C29977;
    const double C8964 = (2 * C31025 * C31058) / C29977;
    const double C18965 = C31058 / C29977;
    const double C29987 = C29975 * C29985;
    const double C4561 = -C29985 / C29977;
    const double C13390 = C13235 * C276;
    const double C13388 = C13235 * C275;
    const double C19266 = C13235 * C429;
    const double C19264 = C13235 * C428;
    const double C13387 = C13229 * C295;
    const double C19263 = C13229 * C448;
    const double C113 =
        (((0 - (C29975 * C29976) / C29977) * ae) / C29977 - (0 * be) / C29981) /
            (2 * C29977) +
        ((C29975 * (((C30711 - (C29975 * 2 * C29982) / C29977) * ae) / C29977 -
                    C29976 / C29981) +
          C13229) *
         ae) /
            C29977 +
        (0 * ae) / C29977 - C29982 / C29979;
    const double C133 = (2 * (C30020 * C30033 + C30023 * ae) +
                         C30020 * (C30033 + C30020 * C30052 + C30041 * ae) +
                         (C30023 + C30035 * C30024) * ae) /
                        C29977;
    const double C274 =
        (C30214 * (C30033 + C30020 * C30052 + C30041 * ae)) / C29977;
    const double C282 =
        (C30020 * C30033 + C30023 * ae + C30052 * C30219) / C29977;
    const double C427 =
        (C30248 * (C30033 + C30020 * C30052 + C30041 * ae)) / C29977;
    const double C435 =
        (C30020 * C30033 + C30023 * ae + C30052 * C30253) / C29977;
    const double C822 = (C30248 * C30214 * C30052) / C29977;
    const double C132 = (2 * (C30020 * C30032 + C30023 * be) +
                         C30020 * (C30032 + C30020 * C30051 + C30041 * be) +
                         (C30023 + C30035 * C30024) * be) /
                        C29977;
    const double C273 =
        (C30214 * (C30032 + C30020 * C30051 + C30041 * be)) / C29977;
    const double C281 =
        (C30020 * C30032 + C30023 * be + C30051 * C30219) / C29977;
    const double C426 =
        (C30248 * (C30032 + C30020 * C30051 + C30041 * be)) / C29977;
    const double C434 =
        (C30020 * C30032 + C30023 * be + C30051 * C30253) / C29977;
    const double C821 = (C30248 * C30214 * C30051) / C29977;
    const double C143 =
        (2 * (ae * C30032 + be * C30033 + C30020 * C30050) +
         ae * (C30032 + C30020 * C30051 + C30041 * be) +
         be * (C30033 + C30020 * C30052 + C30041 * ae) +
         C30020 * (C30050 + ae * C30051 + be * C30052 +
                   C30020 * (ae * C30045 + be * C30046 +
                             C30020 *
                                 (C30036 * C30037 +
                                  C30024 * bs[5] * std::pow(C30026, 5)) *
                                 C29978))) /
        C29979;
    const double C294 = (ae * C30214 * C30032 + be * C30214 * C30033 +
                         C30020 * C30214 * C30050) /
                        C29979;
    const double C296 = ((C30023 + C30024 * C30025 * C30029) * C29978 +
                         C30050 * std::pow(C30214, 2)) /
                        C29979;
    const double C447 = (ae * C30248 * C30032 + be * C30248 * C30033 +
                         C30020 * C30248 * C30050) /
                        C29979;
    const double C449 = ((C30023 + C30024 * C30025 * C30029) * C29978 +
                         C30050 * std::pow(C30248, 2)) /
                        C29979;
    const double C829 = (C30248 * C30214 * C30050) / C29979;
    const double C30081 = C30020 * C30078;
    const double C30097 = 2 * C30078;
    const double C30089 = be * C30078;
    const double C30519 = C30214 * C30078;
    const double C1027 =
        (2 * C30214 * C30052 + C30214 * (C30052 + C30078 * C30219)) / C29977;
    const double C1164 = (C30214 * C30052 + C30214 * C30078 * C30253) / C29977;
    const double C1170 = (C30248 * (C30052 + C30078 * C30219)) / C29977;
    const double C1855 =
        (2 * C30248 * C30052 + C30248 * (C30052 + C30078 * C30253)) / C29977;
    const double C5436 =
        (4 * (2 * C30515 + C30214 * C30529) +
         C30214 * (3 * C30529 + C30214 * (2 * C30228 + C30214 * C30240))) /
        C29977;
    const double C6275 =
        (2 * C30248 * C30529 + C30248 * (C30529 + C30240 * C30253)) / C29977;
    const double C6279 =
        (3 * (C30529 + C30240 * C30253) +
         C30248 * (2 * C30248 * C30240 +
                   C30248 * (C30240 + (C30112 + C30173 * C30219) * C30253))) /
        C29977;
    const double C10521 =
        (4 * (2 * C30248 * C30046 + C30248 * C30571) +
         C30248 * (3 * C30571 + C30248 * (2 * C30262 + C30248 * C30274))) /
        C29977;
    const double C30080 = C30020 * C30077;
    const double C30095 = 2 * C30077;
    const double C30088 = ae * C30077;
    const double C30517 = C30214 * C30077;
    const double C1026 =
        (2 * C30214 * C30051 + C30214 * (C30051 + C30077 * C30219)) / C29977;
    const double C1163 = (C30214 * C30051 + C30214 * C30077 * C30253) / C29977;
    const double C1169 = (C30248 * (C30051 + C30077 * C30219)) / C29977;
    const double C1854 =
        (2 * C30248 * C30051 + C30248 * (C30051 + C30077 * C30253)) / C29977;
    const double C30233 = C30230 + C30231;
    const double C30267 = C30264 + C30265;
    const double C5435 =
        (4 * (2 * C30513 + C30214 * C30526) +
         C30214 * (3 * C30526 + C30214 * (2 * C30227 + C30214 * C30239))) /
        C29977;
    const double C6274 =
        (2 * C30248 * C30526 + C30248 * (C30526 + C30239 * C30253)) / C29977;
    const double C6278 =
        (3 * (C30526 + C30239 * C30253) +
         C30248 * (2 * C30248 * C30239 +
                   C30248 * (C30239 + (C30109 + C30170 * C30219) * C30253))) /
        C29977;
    const double C10520 =
        (4 * (2 * C30248 * C30045 + C30248 * C30568) +
         C30248 * (3 * C30568 + C30248 * (2 * C30261 + C30248 * C30273))) /
        C29977;
    const double C30079 = C30020 * C30076;
    const double C30222 = C30214 * C30076;
    const double C30256 = C30248 * C30076;
    const double C293 =
        (C30214 * C30050 + ae * C30214 * C30051 + be * C30214 * C30052 +
         C30020 * (ae * C30214 * C30045 + be * C30214 * C30046 +
                   C30020 * C30214 * C30076)) /
        C29979;
    const double C297 =
        (ae * (C30032 + C30045 * C30219) + be * (C30033 + C30046 * C30219) +
         C30020 * (C30050 + C30076 * C30219)) /
        C29979;
    const double C446 =
        (C30248 * C30050 + ae * C30248 * C30051 + be * C30248 * C30052 +
         C30020 * (ae * C30248 * C30045 + be * C30248 * C30046 +
                   C30020 * C30248 * C30076)) /
        C29979;
    const double C450 =
        (ae * (C30032 + C30045 * C30253) + be * (C30033 + C30046 * C30253) +
         C30020 * (C30050 + C30076 * C30253)) /
        C29979;
    const double C1038 =
        (2 * C30214 * C30050 + C30214 * (C30050 + C30076 * C30219)) / C29979;
    const double C1184 = (C30248 * (C30050 + C30076 * C30219)) / C29979;
    const double C1866 =
        (2 * C30248 * C30050 + C30248 * (C30050 + C30076 * C30253)) / C29979;
    const double C30126 = C30020 * C30123;
    const double C30156 = 2 * C30123;
    const double C30145 = be * C30123;
    const double C30283 = C30214 * C30123;
    const double C30300 = C30248 * C30123;
    const double C30548 = C30123 * C30219;
    const double C30586 = C30123 * C30253;
    const double C1033 =
        (3 * (C30052 + C30078 * C30219) +
         C30214 * (2 * C30214 * C30078 + C30214 * (C30078 + C30123 * C30219))) /
        C29977;
    const double C1176 =
        (C30052 + C30078 * C30219 + (C30078 + C30123 * C30219) * C30253) /
        C29977;
    const double C1550 =
        (C30248 * (2 * C30214 * C30078 + C30214 * (C30078 + C30123 * C30219))) /
        C29977;
    const double C1861 =
        (3 * (C30052 + C30078 * C30253) +
         C30248 * (2 * C30248 * C30078 + C30248 * (C30078 + C30123 * C30253))) /
        C29977;
    const double C30119 = C30111 * ae;
    const double C30117 = C30020 * C30111;
    const double C30116 = C30111 * be;
    const double C30154 = 3 * C30111;
    const double C30661 = C30214 * C30111;
    const double C1018 =
        2 * C30214 * C30070 + C30214 * (C30070 + C30111 * C30219);
    const double C1023 =
        3 * (C30070 + C30111 * C30219) +
        C30214 * (2 * C30214 * C30111 + C30214 * (C30111 + C30172 * C30219));
    const double C1152 = C30214 * C30070 + C30214 * C30111 * C30253;
    const double C1155 = C30248 * (C30070 + C30111 * C30219);
    const double C1160 =
        C30070 + C30111 * C30219 + (C30111 + C30172 * C30219) * C30253;
    const double C1546 =
        C30248 * (2 * C30214 * C30111 + C30214 * (C30111 + C30172 * C30219));
    const double C1846 =
        2 * C30248 * C30070 + C30248 * (C30070 + C30111 * C30253);
    const double C1851 =
        3 * (C30070 + C30111 * C30253) +
        C30248 * (2 * C30248 * C30111 + C30248 * (C30111 + C30172 * C30253));
    const double C30677 = C30063 + C30676;
    const double C10686 =
        3 * (C30659 + C30697 * C30253) +
        C30248 * (2 * C30248 * C30697 +
                  C30248 * (C30697 + C30214 * C30163 * C30253));
    const double C30700 = C30063 + C30699;
    const double C30125 = C30020 * C30121;
    const double C30152 = 2 * C30121;
    const double C30144 = ae * C30121;
    const double C30282 = C30214 * C30121;
    const double C30299 = C30248 * C30121;
    const double C30545 = C30121 * C30219;
    const double C30583 = C30121 * C30253;
    const double C1032 =
        (3 * (C30051 + C30077 * C30219) +
         C30214 * (2 * C30214 * C30077 + C30214 * (C30077 + C30121 * C30219))) /
        C29977;
    const double C1175 =
        (C30051 + C30077 * C30219 + (C30077 + C30121 * C30219) * C30253) /
        C29977;
    const double C1549 =
        (C30248 * (2 * C30214 * C30077 + C30214 * (C30077 + C30121 * C30219))) /
        C29977;
    const double C1860 =
        (3 * (C30051 + C30077 * C30253) +
         C30248 * (2 * C30248 * C30077 + C30248 * (C30077 + C30121 * C30253))) /
        C29977;
    const double C30124 = C30020 * C30120;
    const double C30224 = C30120 * C30219;
    const double C30229 = C30214 * C30120;
    const double C30258 = C30120 * C30253;
    const double C30263 = C30248 * C30120;
    const double C298 =
        (C30050 + C30076 * C30219 + ae * (C30051 + C30077 * C30219) +
         be * (C30052 + C30078 * C30219) +
         C30020 * (ae * (C30045 + C30068 * C30219) +
                   be * (C30046 + C30071 * C30219) +
                   C30020 * (C30076 + C30120 * C30219))) /
        C29979;
    const double C451 =
        (C30050 + C30076 * C30253 + ae * (C30051 + C30077 * C30253) +
         be * (C30052 + C30078 * C30253) +
         C30020 * (ae * (C30045 + C30068 * C30253) +
                   be * (C30046 + C30071 * C30253) +
                   C30020 * (C30076 + C30120 * C30253))) /
        C29979;
    const double C30670 = C30214 * C30669;
    const double C6271 =
        2 * C30248 * C30664 + C30248 * (C30664 + C30669 * C30253);
    const double C6273 =
        3 * (C30664 + C30669 * C30253) +
        C30248 * (2 * C30248 * C30669 +
                  C30248 * (C30669 + (C30092 + C30148 * C30219) * C30253));
    const double C30694 = C30248 * C30693;
    const double C30704 = C30666 + C30703;
    const double C30189 = C30020 * C30184;
    const double C30186 = C30020 * C30182;
    const double C30185 = C30020 * C30181;
    const double C30238 = C30181 * C30219;
    const double C30272 = C30181 * C30253;
    const double C30286 = C30214 * C30181;
    const double C30303 = C30248 * C30181;
    const double C30537 = C30535 + C30536;
    const double C30579 = C30577 + C30578;
    const double C10906 =
        (4 * (2 * C30248 * C30228 + C30248 * C30593) +
         C30248 * (3 * C30593 +
                   C30248 * (2 * C30322 +
                             C30248 * (C30285 + C30214 * C30173 * C30253)))) /
        C29977;
    const double C30245 = C30242 + C30243;
    const double C30533 = C30531 + C30532;
    const double C30279 = C30276 + C30277;
    const double C30575 = C30573 + C30574;
    const double C30327 = C30324 + C30325;
    const double C10905 =
        (4 * (2 * C30248 * C30227 + C30248 * C30590) +
         C30248 * (3 * C30590 +
                   C30248 * (2 * C30321 +
                             C30248 * (C30284 + C30214 * C30170 * C30253)))) /
        C29977;
    const double C30183 = C30153 + C30178;
    const double C30741 = C30740 / C30731;
    const double C31031 = 2 * C30997;
    const double C30750 = C30749 / C30728;
    const double C31035 = C31001 / C30746;
    const double C31060 = C30995 - C31030;
    const double C2442 = -C31030;
    const double C31074 = C31059 + C30738;
    const double C30823 = C30822 / C30731;
    const double C31039 = 2 * C31006;
    const double C30830 = C30829 / C30728;
    const double C31049 = C31015 / C30746;
    const double C31068 = C31009 - C31046;
    const double C2334 = -C31046;
    const double C31077 = C31064 + C30819;
    const double C30865 = C30864 / C30731;
    const double C31042 = 2 * C31008;
    const double C30872 = C30871 / C30728;
    const double C31055 = C31021 / C30746;
    const double C31071 = C31010 - C31052;
    const double C3096 = -C31052;
    const double C31078 = C31066 + C30861;
    const double C29988 = C29987 / C29977;
    const double C4688 = C4561 * C276;
    const double C4686 = C4561 * C275;
    const double C4684 = C4561 * C1029;
    const double C4682 = C4561 * C1028;
    const double C4680 = C4561 * C280;
    const double C4678 = C4561 * C279;
    const double C4676 = C4561 * C278;
    const double C4674 = C4561 * C277;
    const double C5220 = C4561 * C820;
    const double C5218 = C4561 * C819;
    const double C5216 = C4561 * C1172;
    const double C5214 = C4561 * C1171;
    const double C5444 = C4561 * C1031;
    const double C5442 = C4561 * C1030;
    const double C5590 = C4561 * C1548;
    const double C5588 = C4561 * C1547;
    const double C5586 = C4561 * C1174;
    const double C5584 = C4561 * C1173;
    const double C5582 = C4561 * C1166;
    const double C5580 = C4561 * C1165;
    const double C6660 = C4561 * C2228;
    const double C6658 = C4561 * C2227;
    const double C9201 = C4561 * C429;
    const double C9199 = C4561 * C428;
    const double C9197 = C4561 * C1857;
    const double C9195 = C4561 * C1856;
    const double C9193 = C4561 * C433;
    const double C9191 = C4561 * C432;
    const double C9189 = C4561 * C431;
    const double C9187 = C4561 * C430;
    const double C10529 = C4561 * C1859;
    const double C10527 = C4561 * C1858;
    const double C10911 = C4561 * C6277;
    const double C10909 = C4561 * C6276;
    const double C4700 = C4561 * C274;
    const double C13406 = C13235 * C274;
    const double C4692 = C4561 * C282;
    const double C13394 = C13235 * C282;
    const double C9213 = C4561 * C427;
    const double C19282 = C13235 * C427;
    const double C9205 = C4561 * C435;
    const double C19270 = C13235 * C435;
    const double C5224 = C4561 * C822;
    const double C14084 = C13235 * C822;
    const double C4698 = C4561 * C273;
    const double C13404 = C13235 * C273;
    const double C4690 = C4561 * C281;
    const double C13392 = C13235 * C281;
    const double C9211 = C4561 * C426;
    const double C19280 = C13235 * C426;
    const double C9203 = C4561 * C434;
    const double C19268 = C13235 * C434;
    const double C5222 = C4561 * C821;
    const double C14082 = C13235 * C821;
    const double C4689 = C30711 * C294;
    const double C13403 = C13229 * C294;
    const double C13391 = C13230 * C294;
    const double C4681 = C30711 * C296;
    const double C13399 = C13229 * C296;
    const double C9202 = C30711 * C447;
    const double C19279 = C13229 * C447;
    const double C19267 = C13230 * C447;
    const double C9194 = C30711 * C449;
    const double C19275 = C13229 * C449;
    const double C5221 = C30711 * C829;
    const double C14089 = C13229 * C829;
    const double C30084 = C30046 + C30081;
    const double C4696 = C4561 * C1027;
    const double C14358 = C13235 * C1027;
    const double C6440 = C4561 * C1164;
    const double C14532 = C13235 * C1164;
    const double C5228 = C4561 * C1170;
    const double C14540 = C13235 * C1170;
    const double C9209 = C4561 * C1855;
    const double C21020 = C13235 * C1855;
    const double C5448 = C4561 * C5436;
    const double C6656 = C4561 * C6275;
    const double C10533 = C4561 * C10521;
    const double C30083 = C30045 + C30080;
    const double C30098 = C30076 + C30088;
    const double C4694 = C4561 * C1026;
    const double C14356 = C13235 * C1026;
    const double C6438 = C4561 * C1163;
    const double C14530 = C13235 * C1163;
    const double C5226 = C4561 * C1169;
    const double C14538 = C13235 * C1169;
    const double C9207 = C4561 * C1854;
    const double C21018 = C13235 * C1854;
    const double C5446 = C4561 * C5435;
    const double C6654 = C4561 * C6274;
    const double C10531 = C4561 * C10520;
    const double C30082 = C30059 + C30079;
    const double C830 =
        (ae * C30248 * C30214 * C30045 + be * C30248 * C30214 * C30046 +
         C30020 * C30248 * C30222) /
        C29979;
    const double C1181 = (C30214 * C30050 + C30222 * C30253) / C29979;
    const double C4701 = C30711 * C293;
    const double C13419 = C13229 * C293;
    const double C13407 = C13230 * C293;
    const double C4693 = C30711 * C297;
    const double C13411 = C13229 * C297;
    const double C13395 = C13230 * C297;
    const double C9214 = C30711 * C446;
    const double C19295 = C13229 * C446;
    const double C19283 = C13230 * C446;
    const double C9206 = C30711 * C450;
    const double C19287 = C13229 * C450;
    const double C19271 = C13230 * C450;
    const double C4685 = C30711 * C1038;
    const double C14355 = C13229 * C1038;
    const double C5217 = C30711 * C1184;
    const double C14537 = C13229 * C1184;
    const double C9198 = C30711 * C1866;
    const double C21017 = C13229 * C1866;
    const double C30129 = C30071 + C30126;
    const double C30288 = be * C30283;
    const double C2230 =
        (2 * C30248 * C30519 + C30248 * (C30519 + C30283 * C30253)) / C29977;
    const double C10688 =
        (3 * (C30519 + C30283 * C30253) +
         C30248 * (2 * C30248 * C30283 +
                   C30248 * (C30283 + C30214 * C30184 * C30253))) /
        C29977;
    const double C30305 = be * C30300;
    const double C30549 = C30078 + C30548;
    const double C30587 = C30078 + C30586;
    const double C5716 = C4561 * C1033;
    const double C14362 = C13235 * C1033;
    const double C6436 = C4561 * C1176;
    const double C14544 = C13235 * C1176;
    const double C5874 = C4561 * C1550;
    const double C15052 = C13235 * C1550;
    const double C10802 = C4561 * C1861;
    const double C21024 = C13235 * C1861;
    const double C30122 = C30096 + C30117;
    const double C2226 =
        2 * C30248 * C30661 + C30248 * (C30661 + C30214 * C30172 * C30253);
    const double C5709 =
        4 * (2 * C30659 + C30214 * C30677) +
        C30214 * (3 * C30677 + C30214 * (2 * C30214 * C30103 +
                                         C30214 * (C30103 + C30163 * C30219)));
    const double C5867 =
        C30248 * (3 * C30677 + C30214 * (2 * C30214 * C30103 +
                                         C30214 * (C30103 + C30163 * C30219)));
    const double C6429 =
        2 * C30659 + C30214 * C30677 +
        (2 * C30214 * C30103 + C30214 * (C30103 + C30163 * C30219)) * C30253;
    const double C6547 =
        2 * C30248 * C30677 +
        C30248 * (C30677 + (C30103 + C30163 * C30219) * C30253);
    const double C10795 =
        4 * (2 * C30248 * C30063 + C30248 * C30700) +
        C30248 * (3 * C30700 + C30248 * (2 * C30248 * C30103 +
                                         C30248 * (C30103 + C30163 * C30253)));
    const double C30128 = C30068 + C30125;
    const double C30158 = C30120 + C30144;
    const double C30287 = ae * C30282;
    const double C2229 =
        (2 * C30248 * C30517 + C30248 * (C30517 + C30282 * C30253)) / C29977;
    const double C10687 =
        (3 * (C30517 + C30282 * C30253) +
         C30248 * (2 * C30248 * C30282 +
                   C30248 * (C30282 + C30214 * C30182 * C30253))) /
        C29977;
    const double C30304 = ae * C30299;
    const double C30546 = C30077 + C30545;
    const double C30584 = C30077 + C30583;
    const double C5714 = C4561 * C1032;
    const double C14360 = C13235 * C1032;
    const double C6434 = C4561 * C1175;
    const double C14542 = C13235 * C1175;
    const double C5872 = C4561 * C1549;
    const double C15050 = C13235 * C1549;
    const double C10800 = C4561 * C1860;
    const double C21022 = C13235 * C1860;
    const double C30127 = C30099 + C30124;
    const double C30225 = C30076 + C30224;
    const double C30232 = C30020 * C30229;
    const double C30319 = C30248 * C30229;
    const double C30345 = 2 * C30229;
    const double C831 = (C30248 * C30222 + ae * C30248 * C30214 * C30077 +
                         be * C30248 * C30214 * C30078 +
                         C30020 * (ae * C30248 * C30227 + be * C30248 * C30228 +
                                   C30020 * C30248 * C30229)) /
                        C29979;
    const double C1180 = (ae * (C30214 * C30045 + C30227 * C30253) +
                          be * (C30214 * C30046 + C30228 * C30253) +
                          C30020 * (C30222 + C30229 * C30253)) /
                         C29979;
    const double C2233 =
        (2 * C30248 * C30222 + C30248 * (C30222 + C30229 * C30253)) / C29979;
    const double C30259 = C30076 + C30258;
    const double C30266 = C30020 * C30263;
    const double C30363 = 2 * C30263;
    const double C4705 = C30711 * C298;
    const double C13431 = C13229 * C298;
    const double C13415 = C13230 * C298;
    const double C9218 = C30711 * C451;
    const double C19307 = C13229 * C451;
    const double C19291 = C13230 * C451;
    const double C30671 = C30668 + C30670;
    const double C30695 = C30692 + C30694;
    const double C10904 =
        4 * (2 * C30248 * C30666 + C30248 * C30704) +
        C30248 * (3 * C30704 +
                  C30248 * (2 * C30248 * C30702 +
                            C30248 * (C30702 + C30214 * C30148 * C30253)));
    const double C30194 = C30112 + C30189;
    const double C30192 = C30109 + C30186;
    const double C30191 = C30159 + C30185;
    const double C30241 = C30120 + C30238;
    const double C30275 = C30120 + C30272;
    const double C30291 = C30020 * C30286;
    const double C30323 = C30248 * C30286;
    const double C30360 = C30286 * C30253;
    const double C1179 =
        (C30222 + C30229 * C30253 + ae * (C30214 * C30077 + C30282 * C30253) +
         be * (C30214 * C30078 + C30283 * C30253) +
         C30020 * (ae * (C30227 + C30284 * C30253) +
                   be * (C30228 + C30285 * C30253) +
                   C30020 * (C30229 + C30286 * C30253))) /
        C29979;
    const double C30308 = C30020 * C30303;
    const double C5438 =
        (5 * (3 * C30529 + C30214 * C30537) +
         C30214 * (4 * C30537 +
                   C30214 * (3 * C30240 +
                             C30214 * (2 * C30285 +
                                       C30214 * (C30112 + C30173 * C30219))))) /
        C29977;
    const double C5571 =
        (2 * C30515 + C30214 * C30529 + C30537 * C30253) / C29977;
    const double C5573 = (C30248 * (3 * C30529 + C30214 * C30537)) / C29977;
    const double C5575 =
        (3 * C30529 + C30214 * C30537 +
         (3 * C30240 +
          C30214 * (2 * C30285 + C30214 * (C30112 + C30173 * C30219))) *
             C30253) /
        C29977;
    const double C5979 =
        (C30248 * (4 * C30537 +
                   C30214 * (3 * C30240 +
                             C30214 * (2 * C30285 +
                                       C30214 * (C30112 + C30173 * C30219))))) /
        C29977;
    const double C6651 =
        (2 * C30248 * C30537 +
         C30248 * (C30537 + (2 * C30285 + C30214 * (C30112 + C30173 * C30219)) *
                                C30253)) /
        C29977;
    const double C10523 =
        (5 * (3 * C30571 + C30248 * C30579) +
         C30248 * (4 * C30579 +
                   C30248 * (3 * C30274 +
                             C30248 * (2 * C30302 +
                                       C30248 * (C30112 + C30173 * C30253))))) /
        C29977;
    const double C5437 =
        (5 * (3 * C30526 + C30214 * C30533) +
         C30214 * (4 * C30533 +
                   C30214 * (3 * C30239 +
                             C30214 * (2 * C30284 +
                                       C30214 * (C30109 + C30170 * C30219))))) /
        C29977;
    const double C5570 =
        (2 * C30513 + C30214 * C30526 + C30533 * C30253) / C29977;
    const double C5572 = (C30248 * (3 * C30526 + C30214 * C30533)) / C29977;
    const double C5574 =
        (3 * C30526 + C30214 * C30533 +
         (3 * C30239 +
          C30214 * (2 * C30284 + C30214 * (C30109 + C30170 * C30219))) *
             C30253) /
        C29977;
    const double C5978 =
        (C30248 * (4 * C30533 +
                   C30214 * (3 * C30239 +
                             C30214 * (2 * C30284 +
                                       C30214 * (C30109 + C30170 * C30219))))) /
        C29977;
    const double C6650 =
        (2 * C30248 * C30533 +
         C30248 * (C30533 + (2 * C30284 + C30214 * (C30109 + C30170 * C30219)) *
                                C30253)) /
        C29977;
    const double C10522 =
        (5 * (3 * C30568 + C30248 * C30575) +
         C30248 * (4 * C30575 +
                   C30248 * (3 * C30273 +
                             C30248 * (2 * C30301 +
                                       C30248 * (C30109 + C30170 * C30253))))) /
        C29977;
    const double C30190 = C30183 * ae;
    const double C30188 = C30020 * C30183;
    const double C30187 = C30183 * be;
    const double C30742 = C30738 - C30741;
    const double C31061 = C31031 / C30728;
    const double C30751 = C30747 - C30750;
    const double C31075 = C31060 / C30732;
    const double C30824 = C30819 - C30823;
    const double C31065 = C31039 / C30728;
    const double C30831 = C30827 - C30830;
    const double C31079 = C31068 / C30732;
    const double C30866 = C30861 - C30865;
    const double C31067 = C31042 / C30728;
    const double C30873 = C30869 - C30872;
    const double C31081 = C31071 / C30732;
    const double C29989 = C30711 - C29988;
    const double C30086 = C30084 + C30072;
    const double C30085 = C30083 + C30069;
    const double C30107 = C30098 + C30089;
    const double C5225 = C30711 * C830;
    const double C14093 = C13229 * C830;
    const double C14085 = C13230 * C830;
    const double C5583 = C30711 * C1181;
    const double C14529 = C13229 * C1181;
    const double C30132 = C30129 + C30113;
    const double C10693 = C4561 * C2230;
    const double C15908 = C13235 * C2230;
    const double C5711 =
        (4 * (2 * C30519 + C30214 * C30549) +
         C30214 *
             (3 * C30549 +
              C30214 * (2 * C30283 + C30214 * (C30123 + C30184 * C30219)))) /
        C29977;
    const double C5869 =
        (C30248 *
         (3 * C30549 +
          C30214 * (2 * C30283 + C30214 * (C30123 + C30184 * C30219)))) /
        C29977;
    const double C6431 =
        (2 * C30519 + C30214 * C30549 +
         (2 * C30283 + C30214 * (C30123 + C30184 * C30219)) * C30253) /
        C29977;
    const double C6549 =
        (2 * C30248 * C30549 +
         C30248 * (C30549 + (C30123 + C30184 * C30219) * C30253)) /
        C29977;
    const double C10797 =
        (4 * (2 * C30248 * C30078 + C30248 * C30587) +
         C30248 *
             (3 * C30587 +
              C30248 * (2 * C30300 + C30248 * (C30123 + C30184 * C30253)))) /
        C29977;
    const double C124 = 4 * (2 * C30041 + C30020 * C30070) +
                        C30020 * (3 * C30070 + C30020 * C30122);
    const double C270 = 2 * C30041 + C30020 * C30070 + C30122 * C30219;
    const double C271 = C30214 * (3 * C30070 + C30020 * C30122);
    const double C423 = 2 * C30041 + C30020 * C30070 + C30122 * C30253;
    const double C424 = C30248 * (3 * C30070 + C30020 * C30122);
    const double C817 = C30248 * C30214 * C30122;
    const double C1292 =
        2 * C30214 * C30122 + C30214 * (C30122 + C30183 * C30219);
    const double C1442 = C30248 * (C30122 + C30183 * C30219);
    const double C2016 = C30214 * C30122 + C30214 * C30183 * C30253;
    const double C2122 =
        2 * C30248 * C30122 + C30248 * (C30122 + C30183 * C30253);
    const double C30131 = C30128 + C30110;
    const double C30168 = C30158 + C30145;
    const double C30292 = C30229 + C30287;
    const double C10691 = C4561 * C2229;
    const double C15906 = C13235 * C2229;
    const double C30309 = C30263 + C30304;
    const double C5710 =
        (4 * (2 * C30517 + C30214 * C30546) +
         C30214 *
             (3 * C30546 +
              C30214 * (2 * C30282 + C30214 * (C30121 + C30182 * C30219)))) /
        C29977;
    const double C5868 =
        (C30248 *
         (3 * C30546 +
          C30214 * (2 * C30282 + C30214 * (C30121 + C30182 * C30219)))) /
        C29977;
    const double C6430 =
        (2 * C30517 + C30214 * C30546 +
         (2 * C30282 + C30214 * (C30121 + C30182 * C30219)) * C30253) /
        C29977;
    const double C6548 =
        (2 * C30248 * C30546 +
         C30248 * (C30546 + (C30121 + C30182 * C30219) * C30253)) /
        C29977;
    const double C10796 =
        (4 * (2 * C30248 * C30077 + C30248 * C30584) +
         C30248 *
             (3 * C30584 +
              C30248 * (2 * C30299 + C30248 * (C30121 + C30182 * C30253)))) /
        C29977;
    const double C30130 = C30020 * C30127;
    const double C30141 = 2 * C30127;
    const double C1037 =
        (ae * (2 * C30214 * C30045 + C30214 * (C30045 + C30068 * C30219)) +
         be * (2 * C30214 * C30046 + C30214 * (C30046 + C30071 * C30219)) +
         C30020 * (2 * C30222 + C30214 * C30225)) /
        C29979;
    const double C1039 = (3 * (C30050 + C30076 * C30219) +
                          C30214 * (2 * C30222 + C30214 * C30225)) /
                         C29979;
    const double C1183 =
        (ae * C30248 * (C30045 + C30068 * C30219) +
         be * C30248 * (C30046 + C30071 * C30219) + C30020 * C30248 * C30225) /
        C29979;
    const double C1185 = (C30050 + C30076 * C30219 + C30225 * C30253) / C29979;
    const double C1553 = (C30248 * (2 * C30222 + C30214 * C30225)) / C29979;
    const double C30234 = C30233 + C30232;
    const double C5237 = C30711 * C831;
    const double C14105 = C13229 * C831;
    const double C14097 = C13230 * C831;
    const double C6441 = C30711 * C1180;
    const double C14533 = C13230 * C1180;
    const double C15639 = C13229 * C1180;
    const double C6661 = C30711 * C2233;
    const double C15913 = C13229 * C2233;
    const double C1865 =
        (ae * (2 * C30248 * C30045 + C30248 * (C30045 + C30068 * C30253)) +
         be * (2 * C30248 * C30046 + C30248 * (C30046 + C30071 * C30253)) +
         C30020 * (2 * C30256 + C30248 * C30259)) /
        C29979;
    const double C1867 = (3 * (C30050 + C30076 * C30253) +
                          C30248 * (2 * C30256 + C30248 * C30259)) /
                         C29979;
    const double C30268 = C30267 + C30266;
    const double C5434 =
        5 * (3 * C30664 + C30214 * C30671) +
        C30214 * (4 * C30671 +
                  C30214 * (3 * C30669 +
                            C30214 * (2 * C30214 * C30092 +
                                      C30214 * (C30092 + C30148 * C30219))));
    const double C5567 = 2 * C30657 + C30214 * C30664 + C30671 * C30253;
    const double C5568 = C30248 * (3 * C30664 + C30214 * C30671);
    const double C5569 =
        3 * C30664 + C30214 * C30671 +
        (3 * C30669 +
         C30214 * (2 * C30214 * C30092 + C30214 * (C30092 + C30148 * C30219))) *
            C30253;
    const double C5977 =
        C30248 * (4 * C30671 +
                  C30214 * (3 * C30669 +
                            C30214 * (2 * C30214 * C30092 +
                                      C30214 * (C30092 + C30148 * C30219))));
    const double C6649 =
        2 * C30248 * C30671 +
        C30248 * (C30671 +
                  (2 * C30214 * C30092 + C30214 * (C30092 + C30148 * C30219)) *
                      C30253);
    const double C10519 =
        5 * (3 * C30688 + C30248 * C30695) +
        C30248 * (4 * C30695 +
                  C30248 * (3 * C30693 +
                            C30248 * (2 * C30248 * C30092 +
                                      C30248 * (C30092 + C30148 * C30253))));
    const double C30197 = C30194 + C30174;
    const double C30196 = C30192 + C30171;
    const double C30195 = C30020 * C30191;
    const double C30244 = C30020 * C30241;
    const double C30346 = C30214 * C30241;
    const double C30349 = C30248 * C30241;
    const double C1036 =
        (2 * C30222 + C30214 * C30225 +
         ae * (2 * C30214 * C30077 + C30214 * (C30077 + C30121 * C30219)) +
         be * (2 * C30214 * C30078 + C30214 * (C30078 + C30123 * C30219)) +
         C30020 * (ae * (2 * C30227 + C30214 * C30239) +
                   be * (2 * C30228 + C30214 * C30240) +
                   C30020 * (2 * C30229 + C30214 * C30241))) /
        C29979;
    const double C1040 =
        (ae * (3 * (C30045 + C30068 * C30219) +
               C30214 * (2 * C30227 + C30214 * C30239)) +
         be * (3 * (C30046 + C30071 * C30219) +
               C30214 * (2 * C30228 + C30214 * C30240)) +
         C30020 * (3 * C30225 + C30214 * (2 * C30229 + C30214 * C30241))) /
        C29979;
    const double C1041 =
        (3 * C30225 + C30214 * (2 * C30229 + C30214 * C30241) +
         ae * (3 * (C30077 + C30121 * C30219) +
               C30214 * (2 * C30282 + C30214 * (C30121 + C30182 * C30219))) +
         be * (3 * (C30078 + C30123 * C30219) +
               C30214 * (2 * C30283 + C30214 * (C30123 + C30184 * C30219))) +
         C30020 *
             (ae * (3 * C30239 +
                    C30214 *
                        (2 * C30284 + C30214 * (C30109 + C30170 * C30219))) +
              be * (3 * C30240 +
                    C30214 *
                        (2 * C30285 + C30214 * (C30112 + C30173 * C30219))) +
              C30020 * (3 * C30241 +
                        C30214 * (2 * C30286 +
                                  C30214 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30219))))) /
        C29979;
    const double C1182 =
        (C30248 * C30225 + ae * C30248 * (C30077 + C30121 * C30219) +
         be * C30248 * (C30078 + C30123 * C30219) +
         C30020 * (ae * C30248 * C30239 + be * C30248 * C30240 +
                   C30020 * C30248 * C30241)) /
        C29979;
    const double C1186 = (ae * (C30045 + C30068 * C30219 + C30239 * C30253) +
                          be * (C30046 + C30071 * C30219 + C30240 * C30253) +
                          C30020 * (C30225 + C30241 * C30253)) /
                         C29979;
    const double C1187 =
        (C30225 + C30241 * C30253 +
         ae * (C30077 + C30121 * C30219 + (C30121 + C30182 * C30219) * C30253) +
         be * (C30078 + C30123 * C30219 + (C30123 + C30184 * C30219) * C30253) +
         C30020 * (ae * (C30239 + (C30109 + C30170 * C30219) * C30253) +
                   be * (C30240 + (C30112 + C30173 * C30219) * C30253) +
                   C30020 * (C30241 +
                             (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219) *
                                 C30253))) /
        C29979;
    const double C5870 =
        (ae * C30248 *
             (3 * C30239 +
              C30214 * (2 * C30284 + C30214 * (C30109 + C30170 * C30219))) +
         be * C30248 *
             (3 * C30240 +
              C30214 * (2 * C30285 + C30214 * (C30112 + C30173 * C30219))) +
         C30020 * C30248 *
             (3 * C30241 +
              C30214 *
                  (2 * C30286 +
                   C30214 * (C30181 + (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                          C29978 * C30219)))) /
        C29979;
    const double C6280 =
        (2 * C30248 * C30225 + C30248 * (C30225 + C30241 * C30253)) / C29979;
    const double C30278 = C30020 * C30275;
    const double C30364 = C30248 * C30275;
    const double C1864 =
        (2 * C30256 + C30248 * C30259 +
         ae * (2 * C30248 * C30077 + C30248 * (C30077 + C30121 * C30253)) +
         be * (2 * C30248 * C30078 + C30248 * (C30078 + C30123 * C30253)) +
         C30020 * (ae * (2 * C30261 + C30248 * C30273) +
                   be * (2 * C30262 + C30248 * C30274) +
                   C30020 * (2 * C30263 + C30248 * C30275))) /
        C29979;
    const double C1868 =
        (ae * (3 * (C30045 + C30068 * C30253) +
               C30248 * (2 * C30261 + C30248 * C30273)) +
         be * (3 * (C30046 + C30071 * C30253) +
               C30248 * (2 * C30262 + C30248 * C30274)) +
         C30020 * (3 * C30259 + C30248 * (2 * C30263 + C30248 * C30275))) /
        C29979;
    const double C1869 =
        (3 * C30259 + C30248 * (2 * C30263 + C30248 * C30275) +
         ae * (3 * (C30077 + C30121 * C30253) +
               C30248 * (2 * C30299 + C30248 * (C30121 + C30182 * C30253))) +
         be * (3 * (C30078 + C30123 * C30253) +
               C30248 * (2 * C30300 + C30248 * (C30123 + C30184 * C30253))) +
         C30020 *
             (ae * (3 * C30273 +
                    C30248 *
                        (2 * C30301 + C30248 * (C30109 + C30170 * C30253))) +
              be * (3 * C30274 +
                    C30248 *
                        (2 * C30302 + C30248 * (C30112 + C30173 * C30253))) +
              C30020 * (3 * C30275 +
                        C30248 * (2 * C30303 +
                                  C30248 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30253))))) /
        C29979;
    const double C30295 = C30293 + C30291;
    const double C30326 = C30020 * C30323;
    const double C30361 = C30229 + C30360;
    const double C9609 = C30711 * C1179;
    const double C15635 = C13230 * C1179;
    const double C30312 = C30310 + C30308;
    const double C5594 = C4561 * C5571;
    const double C5984 = C4561 * C5573;
    const double C5592 = C4561 * C5570;
    const double C5982 = C4561 * C5572;
    const double C30193 = C30154 + C30188;
    const double C30994 = C30742 * C30730;
    const double C31033 = C30999 + C30742;
    const double C31002 = C30751 / C30732;
    const double C30998 = C30751 * C30730;
    const double C556 = C31075 - (C30742 * C30733) / C30728;
    const double C31012 = C30824 * C30818;
    const double C31048 = C31014 + C30824;
    const double C31016 = C30831 / C30732;
    const double C31013 = C30831 * C30818;
    const double C1286 = C31079 - (C30824 * C30820) / C30728;
    const double C31018 = C30866 * C30860;
    const double C31054 = C31020 + C30866;
    const double C31022 = C30873 / C30732;
    const double C31019 = C30873 * C30860;
    const double C2118 = C31081 - (C30866 * C30862) / C30728;
    const double C29990 = C29989 * C29986;
    const double C115 =
        ((C29989 * ae) / C29977 - C29976 / C29981) / (2 * C29977) +
        ((C29975 * ((0 * ae) / C29977 - C29982 / C29979) + C13230) * ae) /
            C29977;
    const double C13233 = (C29989 * ae) / C29977 - C29976 / C29981;
    const double C135 = (3 * (C30033 + C30020 * C30052 + C30041 * ae) +
                         C30020 * (2 * C30052 + C30020 * C30086 + C30070 * ae) +
                         (2 * C30041 + C30020 * C30070) * ae) /
                        C29977;
    const double C284 =
        (C30033 + C30020 * C30052 + C30041 * ae + C30086 * C30219) / C29977;
    const double C286 =
        (C30214 * (2 * C30052 + C30020 * C30086 + C30070 * ae)) / C29977;
    const double C437 =
        (C30033 + C30020 * C30052 + C30041 * ae + C30086 * C30253) / C29977;
    const double C439 =
        (C30248 * (2 * C30052 + C30020 * C30086 + C30070 * ae)) / C29977;
    const double C824 = (C30248 * C30214 * C30086) / C29977;
    const double C144 =
        (3 * (C30050 + ae * C30051 + be * C30052 + C30020 * C30082) +
         ae * (2 * C30051 + C30020 * C30085 + C30070 * be) +
         be * (2 * C30052 + C30020 * C30086 + C30070 * ae) +
         C30020 *
             (2 * C30082 + ae * C30085 + be * C30086 +
              C30020 * (C30076 + ae * C30077 + be * C30078 +
                        C30020 * (ae * C30068 + be * C30071 +
                                  C30020 *
                                      (C30057 * C30058 +
                                       C30024 * bs[6] * std::pow(C30018, 6)) *
                                      C29978)))) /
        C29979;
    const double C299 =
        (2 * (ae * C30214 * C30045 + be * C30214 * C30046 + C30020 * C30222) +
         ae * C30214 * C30085 + be * C30214 * C30086 +
         C30020 * (C30222 + ae * C30214 * C30077 + be * C30214 * C30078 +
                   C30020 * (ae * C30214 * C30068 + be * C30214 * C30071 +
                             C30020 * C30214 * C30120))) /
        C29979;
    const double C452 =
        (2 * (ae * C30248 * C30045 + be * C30248 * C30046 + C30020 * C30256) +
         ae * C30248 * C30085 + be * C30248 * C30086 +
         C30020 * (C30256 + ae * C30248 * C30077 + be * C30248 * C30078 +
                   C30020 * (ae * C30248 * C30068 + be * C30248 * C30071 +
                             C30020 * C30248 * C30120))) /
        C29979;
    const double C134 = (3 * (C30032 + C30020 * C30051 + C30041 * be) +
                         C30020 * (2 * C30051 + C30020 * C30085 + C30070 * be) +
                         (2 * C30041 + C30020 * C30070) * be) /
                        C29977;
    const double C283 =
        (C30032 + C30020 * C30051 + C30041 * be + C30085 * C30219) / C29977;
    const double C285 =
        (C30214 * (2 * C30051 + C30020 * C30085 + C30070 * be)) / C29977;
    const double C436 =
        (C30032 + C30020 * C30051 + C30041 * be + C30085 * C30253) / C29977;
    const double C438 =
        (C30248 * (2 * C30051 + C30020 * C30085 + C30070 * be)) / C29977;
    const double C823 = (C30248 * C30214 * C30085) / C29977;
    const double C30135 = C30020 * C30132;
    const double C30155 = 3 * C30132;
    const double C30143 = be * C30132;
    const double C30523 = C30214 * C30132;
    const double C1025 =
        (2 * C30214 * C30086 + C30214 * (C30086 + C30132 * C30219)) / C29977;
    const double C1162 = (C30214 * C30086 + C30214 * C30132 * C30253) / C29977;
    const double C1168 = (C30248 * (C30086 + C30132 * C30219)) / C29977;
    const double C1853 =
        (2 * C30248 * C30086 + C30248 * (C30086 + C30132 * C30253)) / C29977;
    const double C30134 = C30020 * C30131;
    const double C30151 = 3 * C30131;
    const double C30142 = ae * C30131;
    const double C300 =
        (2 * (ae * (C30045 + C30068 * C30219) +
              be * (C30046 + C30071 * C30219) + C30020 * C30225) +
         ae * (C30085 + C30131 * C30219) + be * (C30086 + C30132 * C30219) +
         C30020 * (C30225 + ae * (C30077 + C30121 * C30219) +
                   be * (C30078 + C30123 * C30219) +
                   C30020 * (ae * (C30068 + C30109 * C30219) +
                             be * (C30071 + C30112 * C30219) +
                             C30020 * (C30120 + C30181 * C30219)))) /
        C29979;
    const double C453 =
        (2 * (ae * (C30045 + C30068 * C30253) +
              be * (C30046 + C30071 * C30253) + C30020 * C30259) +
         ae * (C30085 + C30131 * C30253) + be * (C30086 + C30132 * C30253) +
         C30020 * (C30259 + ae * (C30077 + C30121 * C30253) +
                   be * (C30078 + C30123 * C30253) +
                   C30020 * (ae * (C30068 + C30109 * C30253) +
                             be * (C30071 + C30112 * C30253) +
                             C30020 * (C30120 + C30181 * C30253)))) /
        C29979;
    const double C832 =
        (2 * (ae * C30248 * C30227 + be * C30248 * C30228 + C30020 * C30319) +
         ae * C30248 * C30214 * C30131 + be * C30248 * C30214 * C30132 +
         C30020 * (C30319 + ae * C30248 * C30282 + be * C30248 * C30283 +
                   C30020 * (ae * C30248 * C30284 + be * C30248 * C30285 +
                             C30020 * C30248 * C30286))) /
        C29979;
    const double C30521 = C30214 * C30131;
    const double C1024 =
        (2 * C30214 * C30085 + C30214 * (C30085 + C30131 * C30219)) / C29977;
    const double C1161 = (C30214 * C30085 + C30214 * C30131 * C30253) / C29977;
    const double C1167 = (C30248 * (C30085 + C30131 * C30219)) / C29977;
    const double C1852 =
        (2 * C30248 * C30085 + C30248 * (C30085 + C30131 * C30253)) / C29977;
    const double C30294 = C30292 + C30288;
    const double C30311 = C30309 + C30305;
    const double C30133 = C30107 + C30130;
    const double C4697 = C30711 * C1037;
    const double C14359 = C13230 * C1037;
    const double C14705 = C13229 * C1037;
    const double C5445 = C30711 * C1039;
    const double C14367 = C13229 * C1039;
    const double C5229 = C30711 * C1183;
    const double C14541 = C13230 * C1183;
    const double C14913 = C13229 * C1183;
    const double C5587 = C30711 * C1185;
    const double C14549 = C13229 * C1185;
    const double C5591 = C30711 * C1553;
    const double C15057 = C13229 * C1553;
    const double C9210 = C30711 * C1865;
    const double C21021 = C13230 * C1865;
    const double C21373 = C13229 * C1865;
    const double C10530 = C30711 * C1867;
    const double C21029 = C13229 * C1867;
    const double C30200 = C30020 * C30197;
    const double C1035 =
        (3 * (C30086 + C30132 * C30219) +
         C30214 * (2 * C30214 * C30132 + C30214 * (C30132 + C30197 * C30219))) /
        C29977;
    const double C1178 =
        (C30086 + C30132 * C30219 + (C30132 + C30197 * C30219) * C30253) /
        C29977;
    const double C1552 =
        (C30248 * (2 * C30214 * C30132 + C30214 * (C30132 + C30197 * C30219))) /
        C29977;
    const double C1863 =
        (3 * (C30086 + C30132 * C30253) +
         C30248 * (2 * C30248 * C30132 + C30248 * (C30132 + C30197 * C30253))) /
        C29977;
    const double C30199 = C30020 * C30196;
    const double C1034 =
        (3 * (C30085 + C30131 * C30219) +
         C30214 * (2 * C30214 * C30131 + C30214 * (C30131 + C30196 * C30219))) /
        C29977;
    const double C1177 =
        (C30085 + C30131 * C30219 + (C30131 + C30196 * C30219) * C30253) /
        C29977;
    const double C1551 =
        (C30248 * (2 * C30214 * C30131 + C30214 * (C30131 + C30196 * C30219))) /
        C29977;
    const double C1862 =
        (3 * (C30085 + C30131 * C30253) +
         C30248 * (2 * C30248 * C30131 + C30248 * (C30131 + C30196 * C30253))) /
        C29977;
    const double C30198 = C30168 + C30195;
    const double C30246 = C30245 + C30244;
    const double C30347 = C30345 + C30346;
    const double C1445 =
        (2 * (ae * C30248 * C30239 + be * C30248 * C30240 + C30020 * C30349) +
         ae * C30248 * (C30131 + C30196 * C30219) +
         be * C30248 * (C30132 + C30197 * C30219) +
         C30020 *
             (C30349 + ae * C30248 * (C30121 + C30182 * C30219) +
              be * C30248 * (C30123 + C30184 * C30219) +
              C30020 * (ae * C30248 * (C30109 + C30170 * C30219) +
                        be * C30248 * (C30112 + C30173 * C30219) +
                        C30020 * C30248 *
                            (C30181 + (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                          C29978 * C30219)))) /
        C29979;
    const double C6282 =
        (3 * (C30225 + C30241 * C30253) +
         C30248 * (2 * C30349 +
                   C30248 * (C30241 +
                             (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219) *
                                 C30253))) /
        C29979;
    const double C6550 =
        (ae * (2 * C30248 * C30239 +
               C30248 * (C30239 + (C30109 + C30170 * C30219) * C30253)) +
         be * (2 * C30248 * C30240 +
               C30248 * (C30240 + (C30112 + C30173 * C30219) * C30253)) +
         C30020 * (2 * C30349 +
                   C30248 * (C30241 +
                             (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219) *
                                 C30253))) /
        C29979;
    const double C4709 = C30711 * C1036;
    const double C14701 = C13230 * C1036;
    const double C5717 = C30711 * C1040;
    const double C14363 = C13230 * C1040;
    const double C5233 = C30711 * C1182;
    const double C14909 = C13230 * C1182;
    const double C6437 = C30711 * C1186;
    const double C14545 = C13230 * C1186;
    const double C6657 = C30711 * C6280;
    const double C30280 = C30279 + C30278;
    const double C30365 = C30363 + C30364;
    const double C9222 = C30711 * C1864;
    const double C21369 = C13230 * C1864;
    const double C10803 = C30711 * C1868;
    const double C21025 = C13230 * C1868;
    const double C30296 = C30020 * C30295;
    const double C30328 = C30327 + C30326;
    const double C2019 =
        (2 * (ae * (C30227 + C30284 * C30253) +
              be * (C30228 + C30285 * C30253) + C30020 * C30361) +
         ae * (C30214 * C30131 + C30214 * C30196 * C30253) +
         be * (C30214 * C30132 + C30214 * C30197 * C30253) +
         C30020 * (C30361 + ae * (C30282 + C30214 * C30182 * C30253) +
                   be * (C30283 + C30214 * C30184 * C30253) +
                   C30020 * (ae * (C30284 + C30214 * C30170 * C30253) +
                             be * (C30285 + C30214 * C30173 * C30253) +
                             C30020 * (C30286 + C30214 *
                                                    (C30149 * C30150 +
                                                     C30024 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29978 * C30253)))) /
        C29979;
    const double C2234 =
        (ae * (2 * C30248 * C30227 + C30248 * (C30227 + C30284 * C30253)) +
         be * (2 * C30248 * C30228 + C30248 * (C30228 + C30285 * C30253)) +
         C30020 * (2 * C30319 + C30248 * C30361)) /
        C29979;
    const double C2235 =
        (2 * C30319 + C30248 * C30361 +
         ae * (2 * C30248 * C30282 +
               C30248 * (C30282 + C30214 * C30182 * C30253)) +
         be * (2 * C30248 * C30283 +
               C30248 * (C30283 + C30214 * C30184 * C30253)) +
         C30020 *
             (ae * (2 * C30321 + C30248 * (C30284 + C30214 * C30170 * C30253)) +
              be * (2 * C30322 + C30248 * (C30285 + C30214 * C30173 * C30253)) +
              C30020 * (2 * C30323 +
                        C30248 * (C30286 +
                                  C30214 *
                                      (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                      C29978 * C30253)))) /
        C29979;
    const double C6281 = (3 * (C30222 + C30229 * C30253) +
                          C30248 * (2 * C30319 + C30248 * C30361)) /
                         C29979;
    const double C10689 =
        (ae * (3 * (C30227 + C30284 * C30253) +
               C30248 * (2 * C30321 +
                         C30248 * (C30284 + C30214 * C30170 * C30253))) +
         be * (3 * (C30228 + C30285 * C30253) +
               C30248 * (2 * C30322 +
                         C30248 * (C30285 + C30214 * C30173 * C30253))) +
         C30020 * (3 * C30361 +
                   C30248 * (2 * C30323 +
                             C30248 * (C30286 + C30214 *
                                                    (C30149 * C30150 +
                                                     C30024 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29978 * C30253)))) /
        C29979;
    const double C10907 =
        (4 * (2 * C30319 + C30248 * C30361) +
         C30248 * (3 * C30361 +
                   C30248 * (2 * C30323 +
                             C30248 * (C30286 + C30214 *
                                                    (C30149 * C30150 +
                                                     C30024 * bs[8] *
                                                         std::pow(C30018, 8)) *
                                                    C29978 * C30253)))) /
        C29979;
    const double C30313 = C30020 * C30312;
    const double C125 = 5 * (3 * C30070 + C30020 * C30122) +
                        C30020 * (4 * C30122 + C30020 * C30193);
    const double C272 = 3 * C30070 + C30020 * C30122 + C30193 * C30219;
    const double C425 = 3 * C30070 + C30020 * C30122 + C30193 * C30253;
    const double C560 = C30214 * (4 * C30122 + C30020 * C30193);
    const double C664 = C30248 * (4 * C30122 + C30020 * C30193);
    const double C818 = C30248 * C30214 * C30193;
    const double C31029 = C30994 / C30728;
    const double C31062 = C31033 / C30732;
    const double C31063 = C31035 + C31002;
    const double C558 = C31002 - C30749 / C30746;
    const double C31032 = C30998 / C30728;
    const double C31045 = C31012 / C30728;
    const double C31069 = C31048 / C30732;
    const double C31070 = C31049 + C31016;
    const double C1288 = C31016 - C30829 / C30746;
    const double C31047 = C31013 / C30728;
    const double C31051 = C31018 / C30728;
    const double C31072 = C31054 / C30732;
    const double C31073 = C31055 + C31022;
    const double C2120 = C31022 - C30871 / C30746;
    const double C31053 = C31019 / C30728;
    const double C29995 = C29975 * C29990;
    const double C114 =
        (ae * -2 * C29976) / (C29979 * 2 * C29977) +
        (((C29975 * ((-4 * C29982) / C29977 - (C29975 * C29990) / C29977) *
           ae) /
              C29977 +
          2 * ((C29989 * ae) / C29977 - C29976 / C29981)) *
         ae) /
            C29977 -
        C29990 / C29981;
    const double C118 = (-C29990 / C29977) / (4 * C29979);
    const double C4562 = -C29990 / C29977;
    const double C13236 = (-C29990 / C29977) / (2 * C29977);
    const double C13418 = C13233 * C274;
    const double C13416 = C13233 * C273;
    const double C13410 = C13233 * C282;
    const double C13408 = C13233 * C281;
    const double C13402 = C13233 * C276;
    const double C13400 = C13233 * C275;
    const double C13398 = C13233 * C280;
    const double C13396 = C13233 * C279;
    const double C13386 = C13233 * C278;
    const double C13384 = C13233 * C277;
    const double C14092 = C13233 * C822;
    const double C14090 = C13233 * C821;
    const double C14088 = C13233 * C820;
    const double C14086 = C13233 * C819;
    const double C14366 = C13233 * C1031;
    const double C14364 = C13233 * C1030;
    const double C14354 = C13233 * C1029;
    const double C14352 = C13233 * C1028;
    const double C14548 = C13233 * C1174;
    const double C14546 = C13233 * C1173;
    const double C14536 = C13233 * C1172;
    const double C14534 = C13233 * C1171;
    const double C14528 = C13233 * C1166;
    const double C14526 = C13233 * C1165;
    const double C14704 = C13233 * C1027;
    const double C14702 = C13233 * C1026;
    const double C14912 = C13233 * C1170;
    const double C14910 = C13233 * C1169;
    const double C15056 = C13233 * C1548;
    const double C15054 = C13233 * C1547;
    const double C15638 = C13233 * C1164;
    const double C15636 = C13233 * C1163;
    const double C15912 = C13233 * C2228;
    const double C15910 = C13233 * C2227;
    const double C19294 = C13233 * C427;
    const double C19292 = C13233 * C426;
    const double C19286 = C13233 * C435;
    const double C19284 = C13233 * C434;
    const double C19278 = C13233 * C429;
    const double C19276 = C13233 * C428;
    const double C19274 = C13233 * C433;
    const double C19272 = C13233 * C432;
    const double C19262 = C13233 * C431;
    const double C19260 = C13233 * C430;
    const double C21028 = C13233 * C1859;
    const double C21026 = C13233 * C1858;
    const double C21016 = C13233 * C1857;
    const double C21014 = C13233 * C1856;
    const double C21372 = C13233 * C1855;
    const double C21370 = C13233 * C1854;
    const double C4704 = C4561 * C284;
    const double C13430 = C13233 * C284;
    const double C13414 = C13235 * C284;
    const double C4956 = C4561 * C286;
    const double C13422 = C13235 * C286;
    const double C13746 = C13233 * C286;
    const double C9217 = C4561 * C437;
    const double C19306 = C13233 * C437;
    const double C19290 = C13235 * C437;
    const double C9448 = C4561 * C439;
    const double C19298 = C13235 * C439;
    const double C19606 = C13233 * C439;
    const double C5236 = C4561 * C824;
    const double C14104 = C13233 * C824;
    const double C14096 = C13235 * C824;
    const double C4957 = C30711 * C299;
    const double C13423 = C13230 * C299;
    const double C13747 = C13229 * C299;
    const double C9449 = C30711 * C452;
    const double C19299 = C13230 * C452;
    const double C19607 = C13229 * C452;
    const double C4702 = C4561 * C283;
    const double C13428 = C13233 * C283;
    const double C13412 = C13235 * C283;
    const double C4954 = C4561 * C285;
    const double C13420 = C13235 * C285;
    const double C13744 = C13233 * C285;
    const double C9215 = C4561 * C436;
    const double C19304 = C13233 * C436;
    const double C19288 = C13235 * C436;
    const double C9446 = C4561 * C438;
    const double C19296 = C13235 * C438;
    const double C19604 = C13233 * C438;
    const double C5234 = C4561 * C823;
    const double C14102 = C13233 * C823;
    const double C14094 = C13235 * C823;
    const double C30137 = C30097 + C30135;
    const double C2232 =
        (2 * C30248 * C30523 + C30248 * (C30523 + C30214 * C30197 * C30253)) /
        C29977;
    const double C4708 = C4561 * C1025;
    const double C14700 = C13235 * C1025;
    const double C9608 = C4561 * C1162;
    const double C15634 = C13235 * C1162;
    const double C5232 = C4561 * C1168;
    const double C14908 = C13235 * C1168;
    const double C9221 = C4561 * C1853;
    const double C21368 = C13235 * C1853;
    const double C30136 = C30095 + C30134;
    const double C30157 = C30141 + C30142;
    const double C4961 = C30711 * C300;
    const double C13427 = C13230 * C300;
    const double C9453 = C30711 * C453;
    const double C19303 = C13230 * C453;
    const double C14101 = C13230 * C832;
    const double C24994 = C30711 * C832;
    const double C2231 =
        (2 * C30248 * C30521 + C30248 * (C30521 + C30214 * C30196 * C30253)) /
        C29977;
    const double C4706 = C4561 * C1024;
    const double C14698 = C13235 * C1024;
    const double C9606 = C4561 * C1161;
    const double C15632 = C13235 * C1161;
    const double C5230 = C4561 * C1167;
    const double C14906 = C13235 * C1167;
    const double C9219 = C4561 * C1852;
    const double C21366 = C13235 * C1852;
    const double C30203 = C30156 + C30200;
    const double C30202 = C30152 + C30199;
    const double C30201 = C30020 * C30198;
    const double C1295 =
        (2 * (ae * (2 * C30227 + C30214 * C30239) +
              be * (2 * C30228 + C30214 * C30240) + C30020 * C30347) +
         ae * (2 * C30214 * C30131 + C30214 * (C30131 + C30196 * C30219)) +
         be * (2 * C30214 * C30132 + C30214 * (C30132 + C30197 * C30219)) +
         C30020 *
             (C30347 + ae * (2 * C30282 + C30214 * (C30121 + C30182 * C30219)) +
              be * (2 * C30283 + C30214 * (C30123 + C30184 * C30219)) +
              C30020 *
                  (ae * (2 * C30284 + C30214 * (C30109 + C30170 * C30219)) +
                   be * (2 * C30285 + C30214 * (C30112 + C30173 * C30219)) +
                   C30020 * (2 * C30286 +
                             C30214 * (C30181 +
                                       (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219))))) /
        C29979;
    const double C1554 = (ae * C30248 * (2 * C30227 + C30214 * C30239) +
                          be * C30248 * (2 * C30228 + C30214 * C30240) +
                          C30020 * C30248 * C30347) /
                         C29979;
    const double C1555 =
        (C30248 * C30347 +
         ae * C30248 * (2 * C30282 + C30214 * (C30121 + C30182 * C30219)) +
         be * C30248 * (2 * C30283 + C30214 * (C30123 + C30184 * C30219)) +
         C30020 *
             (ae * C30248 * (2 * C30284 + C30214 * (C30109 + C30170 * C30219)) +
              be * C30248 * (2 * C30285 + C30214 * (C30112 + C30173 * C30219)) +
              C30020 * C30248 *
                  (2 * C30286 +
                   C30214 * (C30181 + (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                          C29978 * C30219)))) /
        C29979;
    const double C5439 = (4 * (2 * C30222 + C30214 * C30225) +
                          C30214 * (3 * C30225 + C30214 * C30347)) /
                         C29979;
    const double C5440 =
        (5 * (3 * C30225 + C30214 * C30347) +
         C30214 *
             (4 * C30347 +
              C30214 * (3 * C30241 +
                        C30214 * (2 * C30286 +
                                  C30214 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30219))))) /
        C29979;
    const double C5576 =
        (2 * C30222 + C30214 * C30225 + C30347 * C30253) / C29979;
    const double C5577 = (C30248 * (3 * C30225 + C30214 * C30347)) / C29979;
    const double C5578 =
        (3 * C30225 + C30214 * C30347 +
         (3 * C30241 +
          C30214 * (2 * C30286 +
                    C30214 * (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219))) *
             C30253) /
        C29979;
    const double C5712 =
        (ae * (4 * (2 * C30227 + C30214 * C30239) +
               C30214 * (3 * C30239 +
                         C30214 * (2 * C30284 +
                                   C30214 * (C30109 + C30170 * C30219)))) +
         be * (4 * (2 * C30228 + C30214 * C30240) +
               C30214 * (3 * C30240 +
                         C30214 * (2 * C30285 +
                                   C30214 * (C30112 + C30173 * C30219)))) +
         C30020 *
             (4 * C30347 +
              C30214 * (3 * C30241 +
                        C30214 * (2 * C30286 +
                                  C30214 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30219))))) /
        C29979;
    const double C5980 =
        (C30248 *
         (4 * C30347 +
          C30214 * (3 * C30241 +
                    C30214 * (2 * C30286 +
                              C30214 * (C30181 +
                                        (C30149 * C30150 +
                                         C30024 * bs[8] * std::pow(C30018, 8)) *
                                            C29978 * C30219))))) /
        C29979;
    const double C6432 =
        (ae * (2 * C30227 + C30214 * C30239 +
               (2 * C30284 + C30214 * (C30109 + C30170 * C30219)) * C30253) +
         be * (2 * C30228 + C30214 * C30240 +
               (2 * C30285 + C30214 * (C30112 + C30173 * C30219)) * C30253) +
         C30020 * (C30347 +
                   (2 * C30286 +
                    C30214 * (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219)) *
                       C30253)) /
        C29979;
    const double C6652 =
        (2 * C30248 * C30347 +
         C30248 * (C30347 +
                   (2 * C30286 +
                    C30214 * (C30181 + (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30219)) *
                       C30253)) /
        C29979;
    const double C2125 =
        (2 * (ae * (2 * C30261 + C30248 * C30273) +
              be * (2 * C30262 + C30248 * C30274) + C30020 * C30365) +
         ae * (2 * C30248 * C30131 + C30248 * (C30131 + C30196 * C30253)) +
         be * (2 * C30248 * C30132 + C30248 * (C30132 + C30197 * C30253)) +
         C30020 *
             (C30365 + ae * (2 * C30299 + C30248 * (C30121 + C30182 * C30253)) +
              be * (2 * C30300 + C30248 * (C30123 + C30184 * C30253)) +
              C30020 *
                  (ae * (2 * C30301 + C30248 * (C30109 + C30170 * C30253)) +
                   be * (2 * C30302 + C30248 * (C30112 + C30173 * C30253)) +
                   C30020 * (2 * C30303 +
                             C30248 * (C30181 +
                                       (C30149 * C30150 +
                                        C30024 * bs[8] * std::pow(C30018, 8)) *
                                           C29978 * C30253))))) /
        C29979;
    const double C10524 = (4 * (2 * C30256 + C30248 * C30259) +
                           C30248 * (3 * C30259 + C30248 * C30365)) /
                          C29979;
    const double C10525 =
        (5 * (3 * C30259 + C30248 * C30365) +
         C30248 *
             (4 * C30365 +
              C30248 * (3 * C30275 +
                        C30248 * (2 * C30303 +
                                  C30248 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30253))))) /
        C29979;
    const double C10798 =
        (ae * (4 * (2 * C30261 + C30248 * C30273) +
               C30248 * (3 * C30273 +
                         C30248 * (2 * C30301 +
                                   C30248 * (C30109 + C30170 * C30253)))) +
         be * (4 * (2 * C30262 + C30248 * C30274) +
               C30248 * (3 * C30274 +
                         C30248 * (2 * C30302 +
                                   C30248 * (C30112 + C30173 * C30253)))) +
         C30020 *
             (4 * C30365 +
              C30248 * (3 * C30275 +
                        C30248 * (2 * C30303 +
                                  C30248 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30253))))) /
        C29979;
    const double C30297 = C30294 + C30296;
    const double C10694 = C30711 * C2234;
    const double C15909 = C13230 * C2234;
    const double C10912 = C30711 * C6281;
    const double C30314 = C30311 + C30313;
    const double C31083 = C31029 + C31075;
    const double C557 = C31062 - (C30751 * C30733) / C30728;
    const double C111 = C31063 / C30732 - C30749 / C31036;
    const double C31076 = C31032 + C31062;
    const double C31084 = C31045 + C31079;
    const double C1287 = C31069 - (C30831 * C30820) / C30728;
    const double C1015 = C31070 / C30732 - C30829 / C31036;
    const double C31080 = C31047 + C31069;
    const double C31085 = C31051 + C31081;
    const double C2119 = C31072 - (C30873 * C30862) / C30728;
    const double C1844 = C31073 / C30732 - C30871 / C31036;
    const double C31082 = C31053 + C31072;
    const double C116 =
        (((-4 * C29982) / C29977 - C29995 / C29977) * ae) / C29981 +
        ((2 * ((0 * ae) / C29977 - C29982 / C29979) - C29995 / C29981) * ae) /
            C29977;
    const double C13234 =
        (((-4 * C29982) / C29977 - C29995 / C29977) * ae) / C29977;
    const double C4707 = C4562 * C1018;
    const double C4703 = C4562 * C268;
    const double C4699 = C4562 * C263;
    const double C4695 = C4562 * C1019;
    const double C4691 = C4562 * C267;
    const double C4687 = C4562 * C264;
    const double C4683 = C4562 * C1020;
    const double C4679 = C4562 * C266;
    const double C4675 = C4562 * C265;
    const double C4959 = C4562 * C270;
    const double C4955 = C4562 * C269;
    const double C5235 = C4562 * C816;
    const double C5231 = C4562 * C1155;
    const double C5227 = C4562 * C1156;
    const double C5223 = C4562 * C815;
    const double C5219 = C4562 * C814;
    const double C5215 = C4562 * C1157;
    const double C5447 = C4562 * C5433;
    const double C5443 = C4562 * C1021;
    const double C5593 = C4562 * C5567;
    const double C5589 = C4562 * C1544;
    const double C5585 = C4562 * C1158;
    const double C5581 = C4562 * C1154;
    const double C5715 = C4562 * C1022;
    const double C5873 = C4562 * C1545;
    const double C5983 = C4562 * C5568;
    const double C6439 = C4562 * C1153;
    const double C6435 = C4562 * C1159;
    const double C6659 = C4562 * C2224;
    const double C6655 = C4562 * C6271;
    const double C9220 = C4562 * C1846;
    const double C9216 = C4562 * C421;
    const double C9212 = C4562 * C416;
    const double C9208 = C4562 * C1847;
    const double C9204 = C4562 * C420;
    const double C9200 = C4562 * C417;
    const double C9196 = C4562 * C1848;
    const double C9192 = C4562 * C419;
    const double C9188 = C4562 * C418;
    const double C9451 = C4562 * C423;
    const double C9447 = C4562 * C422;
    const double C9607 = C4562 * C1152;
    const double C10532 = C4562 * C10518;
    const double C10528 = C4562 * C1849;
    const double C10692 = C4562 * C2225;
    const double C10801 = C4562 * C1850;
    const double C10910 = C4562 * C6272;
    const double C24992 = C4562 * C817;
    const double C13425 = C13236 * C270;
    const double C13421 = C13236 * C269;
    const double C13413 = C13236 * C268;
    const double C13405 = C13236 * C263;
    const double C13393 = C13236 * C267;
    const double C13389 = C13236 * C264;
    const double C13749 = C13236 * C271;
    const double C14099 = C13236 * C817;
    const double C14095 = C13236 * C816;
    const double C14083 = C13236 * C815;
    const double C14361 = C13236 * C1022;
    const double C14357 = C13236 * C1019;
    const double C14543 = C13236 * C1159;
    const double C14539 = C13236 * C1156;
    const double C14531 = C13236 * C1153;
    const double C14699 = C13236 * C1018;
    const double C14907 = C13236 * C1155;
    const double C15051 = C13236 * C1545;
    const double C15633 = C13236 * C1152;
    const double C15907 = C13236 * C2225;
    const double C19301 = C13236 * C423;
    const double C19297 = C13236 * C422;
    const double C19289 = C13236 * C421;
    const double C19281 = C13236 * C416;
    const double C19269 = C13236 * C420;
    const double C19265 = C13236 * C417;
    const double C19609 = C13236 * C424;
    const double C21023 = C13236 * C1850;
    const double C21019 = C13236 * C1847;
    const double C21367 = C13236 * C1846;
    const double C30139 = C30137 + C30119;
    const double C30138 = C30136 + C30116;
    const double C30167 = C30157 + C30143;
    const double C30206 = C30203 + C30180;
    const double C30205 = C30202 + C30177;
    const double C5875 = C30711 * C1554;
    const double C15053 = C13230 * C1554;
    const double C5449 = C30711 * C5439;
    const double C5595 = C30711 * C5576;
    const double C5985 = C30711 * C5577;
    const double C10534 = C30711 * C10524;
    const double C108 =
        (C31074 + 2 * C30742) / C30732 - (C31083 * C30733) / C30728;
    const double C109 =
        (C31061 + 2 * C30751 + C31083) / C30732 - (C31076 * C30733) / C30728;
    const double C110 = (C31034 + C30748 / C30728 + C31076) / C30732 -
                        (C31063 * C30733) / C30728;
    const double C1012 =
        (C31077 + 2 * C30824) / C30732 - (C31084 * C30820) / C30728;
    const double C1013 =
        (C31065 + 2 * C30831 + C31084) / C30732 - (C31080 * C30820) / C30728;
    const double C1014 = (C31040 + C30828 / C30728 + C31080) / C30732 -
                         (C31070 * C30820) / C30728;
    const double C1841 =
        (C31078 + 2 * C30866) / C30732 - (C31085 * C30862) / C30728;
    const double C1842 =
        (C31067 + 2 * C30873 + C31085) / C30732 - (C31082 * C30862) / C30728;
    const double C1843 = (C31043 + C30870 / C30728 + C31082) / C30732 -
                         (C31073 * C30862) / C30728;
    const double C13429 = C13234 * C268;
    const double C13417 = C13234 * C263;
    const double C13409 = C13234 * C267;
    const double C13401 = C13234 * C264;
    const double C13397 = C13234 * C266;
    const double C13385 = C13234 * C265;
    const double C13745 = C13234 * C269;
    const double C14103 = C13234 * C816;
    const double C14091 = C13234 * C815;
    const double C14087 = C13234 * C814;
    const double C14365 = C13234 * C1021;
    const double C14353 = C13234 * C1020;
    const double C14547 = C13234 * C1158;
    const double C14535 = C13234 * C1157;
    const double C14527 = C13234 * C1154;
    const double C14703 = C13234 * C1019;
    const double C14911 = C13234 * C1156;
    const double C15055 = C13234 * C1544;
    const double C15637 = C13234 * C1153;
    const double C15911 = C13234 * C2224;
    const double C19305 = C13234 * C421;
    const double C19293 = C13234 * C416;
    const double C19285 = C13234 * C420;
    const double C19277 = C13234 * C417;
    const double C19273 = C13234 * C419;
    const double C19261 = C13234 * C418;
    const double C19605 = C13234 * C422;
    const double C21027 = C13234 * C1849;
    const double C21015 = C13234 * C1848;
    const double C21371 = C13234 * C1847;
    const double C4718 = C4706 - C4707;
    const double C4717 = C4702 - C4703;
    const double C4716 = C4698 - C4699;
    const double C4715 = C4694 - C4695;
    const double C4714 = C4690 - C4691;
    const double C4713 = C4686 - C4687;
    const double C4712 = C4682 - C4683;
    const double C4711 = C4678 - C4679;
    const double C4710 = C4674 - C4675;
    const double C4962 = C4954 - C4955;
    const double C5243 = C5234 - C5235;
    const double C5242 = C5230 - C5231;
    const double C5241 = C5226 - C5227;
    const double C5240 = C5222 - C5223;
    const double C5239 = C5218 - C5219;
    const double C5238 = C5214 - C5215;
    const double C5451 = C5446 - C5447;
    const double C5450 = C5442 - C5443;
    const double C5599 = C5592 - C5593;
    const double C5598 = C5588 - C5589;
    const double C5597 = C5584 - C5585;
    const double C5596 = C5580 - C5581;
    const double C5718 = C5714 - C5715;
    const double C5876 = C5872 - C5873;
    const double C5986 = C5982 - C5983;
    const double C6443 = C6438 - C6439;
    const double C6442 = C6434 - C6435;
    const double C6663 = C6658 - C6659;
    const double C6662 = C6654 - C6655;
    const double C9231 = C9219 - C9220;
    const double C9230 = C9215 - C9216;
    const double C9229 = C9211 - C9212;
    const double C9228 = C9207 - C9208;
    const double C9227 = C9203 - C9204;
    const double C9226 = C9199 - C9200;
    const double C9225 = C9195 - C9196;
    const double C9224 = C9191 - C9192;
    const double C9223 = C9187 - C9188;
    const double C9454 = C9446 - C9447;
    const double C9610 = C9606 - C9607;
    const double C10536 = C10531 - C10532;
    const double C10535 = C10527 - C10528;
    const double C10695 = C10691 - C10692;
    const double C10804 = C10800 - C10801;
    const double C10913 = C10909 - C10910;
    const double C13441 = C13420 - C13421;
    const double C13439 = C13412 - C13413;
    const double C13437 = C13404 - C13405;
    const double C13434 = C13392 - C13393;
    const double C13433 = C13388 - C13389;
    const double C14109 = C14094 - C14095;
    const double C14106 = C14082 - C14083;
    const double C14370 = C14360 - C14361;
    const double C14369 = C14356 - C14357;
    const double C14554 = C14542 - C14543;
    const double C14553 = C14538 - C14539;
    const double C14551 = C14530 - C14531;
    const double C14706 = C14698 - C14699;
    const double C14914 = C14906 - C14907;
    const double C15058 = C15050 - C15051;
    const double C15640 = C15632 - C15633;
    const double C15914 = C15906 - C15907;
    const double C19317 = C19296 - C19297;
    const double C19315 = C19288 - C19289;
    const double C19313 = C19280 - C19281;
    const double C19310 = C19268 - C19269;
    const double C19309 = C19264 - C19265;
    const double C21032 = C21022 - C21023;
    const double C21031 = C21018 - C21019;
    const double C21374 = C21366 - C21367;
    const double C137 = (4 * (2 * C30052 + C30020 * C30086 + C30070 * ae) +
                         C30020 * (3 * C30086 + C30020 * C30139 + C30122 * ae) +
                         (3 * C30070 + C30020 * C30122) * ae) /
                        C29977;
    const double C288 =
        (2 * C30052 + C30020 * C30086 + C30070 * ae + C30139 * C30219) / C29977;
    const double C290 =
        (C30214 * (3 * C30086 + C30020 * C30139 + C30122 * ae)) / C29977;
    const double C441 =
        (2 * C30052 + C30020 * C30086 + C30070 * ae + C30139 * C30253) / C29977;
    const double C443 =
        (C30248 * (3 * C30086 + C30020 * C30139 + C30122 * ae)) / C29977;
    const double C826 = (C30248 * C30214 * C30139) / C29977;
    const double C145 =
        (4 * (2 * C30082 + ae * C30085 + be * C30086 + C30020 * C30133) +
         ae * (3 * C30085 + C30020 * C30138 + C30122 * be) +
         be * (3 * C30086 + C30020 * C30139 + C30122 * ae) +
         C30020 * (3 * C30133 + ae * C30138 + be * C30139 +
                   C30020 * (2 * C30127 + ae * C30131 + be * C30132 +
                             C30020 * (C30120 + ae * C30121 + be * C30123 +
                                       C30020 * (ae * C30109 + be * C30112 +
                                                 C30020 *
                                                     (C30093 * C30094 +
                                                      C30024 * bs[7] *
                                                          std::pow(C30026, 7)) *
                                                     C29978))))) /
        C29979;
    const double C301 =
        (3 * (C30222 + ae * C30214 * C30077 + be * C30214 * C30078 +
              C30020 * C30234) +
         ae * C30214 * C30138 + be * C30214 * C30139 +
         C30020 *
             (2 * C30234 + ae * C30214 * C30131 + be * C30214 * C30132 +
              C30020 * (C30229 + ae * C30214 * C30121 + be * C30214 * C30123 +
                        C30020 * (ae * C30214 * C30109 + be * C30214 * C30112 +
                                  C30020 * C30214 * C30181)))) /
        C29979;
    const double C454 =
        (3 * (C30256 + ae * C30248 * C30077 + be * C30248 * C30078 +
              C30020 * C30268) +
         ae * C30248 * C30138 + be * C30248 * C30139 +
         C30020 *
             (2 * C30268 + ae * C30248 * C30131 + be * C30248 * C30132 +
              C30020 * (C30263 + ae * C30248 * C30121 + be * C30248 * C30123 +
                        C30020 * (ae * C30248 * C30109 + be * C30248 * C30112 +
                                  C30020 * C30248 * C30181)))) /
        C29979;
    const double C136 = (4 * (2 * C30051 + C30020 * C30085 + C30070 * be) +
                         C30020 * (3 * C30085 + C30020 * C30138 + C30122 * be) +
                         (3 * C30070 + C30020 * C30122) * be) /
                        C29977;
    const double C287 =
        (2 * C30051 + C30020 * C30085 + C30070 * be + C30138 * C30219) / C29977;
    const double C289 =
        (C30214 * (3 * C30085 + C30020 * C30138 + C30122 * be)) / C29977;
    const double C440 =
        (2 * C30051 + C30020 * C30085 + C30070 * be + C30138 * C30253) / C29977;
    const double C442 =
        (C30248 * (3 * C30085 + C30020 * C30138 + C30122 * be)) / C29977;
    const double C825 = (C30248 * C30214 * C30138) / C29977;
    const double C30204 = C30167 + C30201;
    const double C30208 = C30020 * C30206;
    const double C1294 =
        (2 * C30214 * C30139 + C30214 * (C30139 + C30206 * C30219)) / C29977;
    const double C1444 = (C30248 * (C30139 + C30206 * C30219)) / C29977;
    const double C2018 = (C30214 * C30139 + C30214 * C30206 * C30253) / C29977;
    const double C2124 =
        (2 * C30248 * C30139 + C30248 * (C30139 + C30206 * C30253)) / C29977;
    const double C30207 = C30020 * C30205;
    const double C302 =
        (3 * (C30225 + ae * (C30077 + C30121 * C30219) +
              be * (C30078 + C30123 * C30219) + C30020 * C30246) +
         ae * (C30138 + C30205 * C30219) + be * (C30139 + C30206 * C30219) +
         C30020 *
             (2 * C30246 + ae * (C30131 + C30196 * C30219) +
              be * (C30132 + C30197 * C30219) +
              C30020 * (C30241 + ae * (C30121 + C30182 * C30219) +
                        be * (C30123 + C30184 * C30219) +
                        C30020 * (ae * (C30109 + C30170 * C30219) +
                                  be * (C30112 + C30173 * C30219) +
                                  C30020 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30219))))) /
        C29979;
    const double C455 =
        (3 * (C30259 + ae * (C30077 + C30121 * C30253) +
              be * (C30078 + C30123 * C30253) + C30020 * C30280) +
         ae * (C30138 + C30205 * C30253) + be * (C30139 + C30206 * C30253) +
         C30020 *
             (2 * C30280 + ae * (C30131 + C30196 * C30253) +
              be * (C30132 + C30197 * C30253) +
              C30020 * (C30275 + ae * (C30121 + C30182 * C30253) +
                        be * (C30123 + C30184 * C30253) +
                        C30020 * (ae * (C30109 + C30170 * C30253) +
                                  be * (C30112 + C30173 * C30253) +
                                  C30020 * (C30181 + (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                         C29978 * C30253))))) /
        C29979;
    const double C833 =
        (3 * (C30319 + ae * C30248 * C30282 + be * C30248 * C30283 +
              C30020 * C30328) +
         ae * C30248 * C30214 * C30205 + be * C30248 * C30214 * C30206 +
         C30020 *
             (2 * C30328 + ae * C30248 * C30214 * C30196 +
              be * C30248 * C30214 * C30197 +
              C30020 * (C30323 + ae * C30248 * C30214 * C30182 +
                        be * C30248 * C30214 * C30184 +
                        C30020 * (ae * C30248 * C30214 * C30170 +
                                  be * C30248 * C30214 * C30173 +
                                  C30020 * C30248 * C30214 *
                                      (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                      C29978)))) /
        C29979;
    const double C1293 =
        (2 * C30214 * C30138 + C30214 * (C30138 + C30205 * C30219)) / C29977;
    const double C1443 = (C30248 * (C30138 + C30205 * C30219)) / C29977;
    const double C2017 = (C30214 * C30138 + C30214 * C30205 * C30253) / C29977;
    const double C2123 =
        (2 * C30248 * C30138 + C30248 * (C30138 + C30205 * C30253)) / C29977;
    const double C13443 = C13428 - C13429;
    const double C13440 = C13416 - C13417;
    const double C13438 = C13408 - C13409;
    const double C13436 = C13400 - C13401;
    const double C13435 = C13396 - C13397;
    const double C13432 = C13384 - C13385;
    const double C13752 = C13744 - C13745;
    const double C14111 = C14102 - C14103;
    const double C14108 = C14090 - C14091;
    const double C14107 = C14086 - C14087;
    const double C14371 = C14364 - C14365;
    const double C14368 = C14352 - C14353;
    const double C14555 = C14546 - C14547;
    const double C14552 = C14534 - C14535;
    const double C14550 = C14526 - C14527;
    const double C14707 = C14702 - C14703;
    const double C14915 = C14910 - C14911;
    const double C15059 = C15054 - C15055;
    const double C15641 = C15636 - C15637;
    const double C15915 = C15910 - C15911;
    const double C19319 = C19304 - C19305;
    const double C19316 = C19292 - C19293;
    const double C19314 = C19284 - C19285;
    const double C19312 = C19276 - C19277;
    const double C19311 = C19272 - C19273;
    const double C19308 = C19260 - C19261;
    const double C19612 = C19604 - C19605;
    const double C21033 = C21026 - C21027;
    const double C21030 = C21014 - C21015;
    const double C21375 = C21370 - C21371;
    const double C4727 = C4718 - C4708;
    const double C4726 = C4717 - C4704;
    const double C4725 = C4716 - C4700;
    const double C4724 = C4715 - C4696;
    const double C4723 = C4714 - C4692;
    const double C4722 = C4713 - C4688;
    const double C4721 = C4712 - C4684;
    const double C4720 = C4711 - C4680;
    const double C4719 = C4710 - C4676;
    const double C4964 = C4962 - C4956;
    const double C5249 = C5243 - C5236;
    const double C5248 = C5242 - C5232;
    const double C5247 = C5241 - C5228;
    const double C5246 = C5240 - C5224;
    const double C5245 = C5239 - C5220;
    const double C5244 = C5238 - C5216;
    const double C5453 = C5451 - C5448;
    const double C5452 = C5450 - C5444;
    const double C5603 = C5599 - C5594;
    const double C5602 = C5598 - C5590;
    const double C5601 = C5597 - C5586;
    const double C5600 = C5596 - C5582;
    const double C5719 = C5718 - C5716;
    const double C5877 = C5876 - C5874;
    const double C5987 = C5986 - C5984;
    const double C6445 = C6443 - C6440;
    const double C6444 = C6442 - C6436;
    const double C6665 = C6663 - C6660;
    const double C6664 = C6662 - C6656;
    const double C9240 = C9231 - C9221;
    const double C9239 = C9230 - C9217;
    const double C9238 = C9229 - C9213;
    const double C9237 = C9228 - C9209;
    const double C9236 = C9227 - C9205;
    const double C9235 = C9226 - C9201;
    const double C9234 = C9225 - C9197;
    const double C9233 = C9224 - C9193;
    const double C9232 = C9223 - C9189;
    const double C9456 = C9454 - C9448;
    const double C9611 = C9610 - C9608;
    const double C10538 = C10536 - C10533;
    const double C10537 = C10535 - C10529;
    const double C10696 = C10695 - C10693;
    const double C10805 = C10804 - C10802;
    const double C10914 = C10913 - C10911;
    const double C13453 = C13441 - C13422;
    const double C13451 = C13439 - C13414;
    const double C13449 = C13437 - C13406;
    const double C13446 = C13434 - C13394;
    const double C13445 = C13433 - C13390;
    const double C14115 = C14109 - C14096;
    const double C14112 = C14106 - C14084;
    const double C14374 = C14370 - C14362;
    const double C14373 = C14369 - C14358;
    const double C14560 = C14554 - C14544;
    const double C14559 = C14553 - C14540;
    const double C14557 = C14551 - C14532;
    const double C14708 = C14706 - C14700;
    const double C14916 = C14914 - C14908;
    const double C15060 = C15058 - C15052;
    const double C15642 = C15640 - C15634;
    const double C15916 = C15914 - C15908;
    const double C19329 = C19317 - C19298;
    const double C19327 = C19315 - C19290;
    const double C19325 = C19313 - C19282;
    const double C19322 = C19310 - C19270;
    const double C19321 = C19309 - C19266;
    const double C21036 = C21032 - C21024;
    const double C21035 = C21031 - C21020;
    const double C21376 = C21374 - C21368;
    const double C4960 = C4561 * C288;
    const double C13426 = C13235 * C288;
    const double C13750 = C13235 * C290;
    const double C9452 = C4561 * C441;
    const double C19302 = C13235 * C441;
    const double C19610 = C13235 * C443;
    const double C14100 = C13235 * C826;
    const double C24993 = C4561 * C826;
    const double C13751 = C13230 * C301;
    const double C19611 = C13230 * C454;
    const double C4958 = C4561 * C287;
    const double C13424 = C13235 * C287;
    const double C13748 = C13235 * C289;
    const double C9450 = C4561 * C440;
    const double C19300 = C13235 * C440;
    const double C19608 = C13235 * C442;
    const double C14098 = C13235 * C825;
    const double C24991 = C4561 * C825;
    const double C30210 = C30155 + C30208;
    const double C30209 = C30151 + C30207;
    const double C13455 = C13443 - C13430;
    const double C13452 = C13440 - C13418;
    const double C13450 = C13438 - C13410;
    const double C13448 = C13436 - C13402;
    const double C13447 = C13435 - C13398;
    const double C13444 = C13432 - C13386;
    const double C13754 = C13752 - C13746;
    const double C14117 = C14111 - C14104;
    const double C14114 = C14108 - C14092;
    const double C14113 = C14107 - C14088;
    const double C14375 = C14371 - C14366;
    const double C14372 = C14368 - C14354;
    const double C14561 = C14555 - C14548;
    const double C14558 = C14552 - C14536;
    const double C14556 = C14550 - C14528;
    const double C14709 = C14707 - C14704;
    const double C14917 = C14915 - C14912;
    const double C15061 = C15059 - C15056;
    const double C15643 = C15641 - C15638;
    const double C15917 = C15915 - C15912;
    const double C19331 = C19319 - C19306;
    const double C19328 = C19316 - C19294;
    const double C19326 = C19314 - C19286;
    const double C19324 = C19312 - C19278;
    const double C19323 = C19311 - C19274;
    const double C19320 = C19308 - C19262;
    const double C19614 = C19612 - C19606;
    const double C21037 = C21033 - C21028;
    const double C21034 = C21030 - C21016;
    const double C21377 = C21375 - C21372;
    const double C4736 = C4727 + C4709;
    const double C4735 = C4726 + C4705;
    const double C4734 = C4725 + C4701;
    const double C4733 = C4724 + C4697;
    const double C4732 = C4723 + C4693;
    const double C4731 = C4722 + C4689;
    const double C4730 = C4721 + C4685;
    const double C4729 = C4720 + C4681;
    const double C4728 = C4719 + C4677;
    const double C4966 = C4964 + C4957;
    const double C5255 = C5249 + C5237;
    const double C5254 = C5248 + C5233;
    const double C5253 = C5247 + C5229;
    const double C5252 = C5246 + C5225;
    const double C5251 = C5245 + C5221;
    const double C5250 = C5244 + C5217;
    const double C5455 = C5453 + C5449;
    const double C5454 = C5452 + C5445;
    const double C5607 = C5603 + C5595;
    const double C5606 = C5602 + C5591;
    const double C5605 = C5601 + C5587;
    const double C5604 = C5600 + C5583;
    const double C5720 = C5719 + C5717;
    const double C5878 = C5877 + C5875;
    const double C5988 = C5987 + C5985;
    const double C6447 = C6445 + C6441;
    const double C6446 = C6444 + C6437;
    const double C6667 = C6665 + C6661;
    const double C6666 = C6664 + C6657;
    const double C9249 = C9240 + C9222;
    const double C9248 = C9239 + C9218;
    const double C9247 = C9238 + C9214;
    const double C9246 = C9237 + C9210;
    const double C9245 = C9236 + C9206;
    const double C9244 = C9235 + C9202;
    const double C9243 = C9234 + C9198;
    const double C9242 = C9233 + C9194;
    const double C9241 = C9232 + C9190;
    const double C9458 = C9456 + C9449;
    const double C9612 = C9611 + C9609;
    const double C10540 = C10538 + C10534;
    const double C10539 = C10537 + C10530;
    const double C10697 = C10696 + C10694;
    const double C10806 = C10805 + C10803;
    const double C10915 = C10914 + C10912;
    const double C13465 = C13453 + C13423;
    const double C13463 = C13451 + C13415;
    const double C13461 = C13449 + C13407;
    const double C13458 = C13446 + C13395;
    const double C13457 = C13445 + C13391;
    const double C14121 = C14115 + C14097;
    const double C14118 = C14112 + C14085;
    const double C14378 = C14374 + C14363;
    const double C14377 = C14373 + C14359;
    const double C14566 = C14560 + C14545;
    const double C14565 = C14559 + C14541;
    const double C14563 = C14557 + C14533;
    const double C14710 = C14708 + C14701;
    const double C14918 = C14916 + C14909;
    const double C15062 = C15060 + C15053;
    const double C15644 = C15642 + C15635;
    const double C15918 = C15916 + C15909;
    const double C19341 = C19329 + C19299;
    const double C19339 = C19327 + C19291;
    const double C19337 = C19325 + C19283;
    const double C19334 = C19322 + C19271;
    const double C19333 = C19321 + C19267;
    const double C21040 = C21036 + C21025;
    const double C21039 = C21035 + C21021;
    const double C21378 = C21376 + C21369;
    const double C4963 = C4958 - C4959;
    const double C13442 = C13424 - C13425;
    const double C13753 = C13748 - C13749;
    const double C9455 = C9450 - C9451;
    const double C19318 = C19300 - C19301;
    const double C19613 = C19608 - C19609;
    const double C14110 = C14098 - C14099;
    const double C24995 = C24991 - C24992;
    const double C30212 = C30210 + C30190;
    const double C30211 = C30209 + C30187;
    const double C13467 = C13455 + C13431;
    const double C13464 = C13452 + C13419;
    const double C13462 = C13450 + C13411;
    const double C13460 = C13448 + C13403;
    const double C13459 = C13447 + C13399;
    const double C13456 = C13444 + C13387;
    const double C13756 = C13754 + C13747;
    const double C14123 = C14117 + C14105;
    const double C14120 = C14114 + C14093;
    const double C14119 = C14113 + C14089;
    const double C14379 = C14375 + C14367;
    const double C14376 = C14372 + C14355;
    const double C14567 = C14561 + C14549;
    const double C14564 = C14558 + C14537;
    const double C14562 = C14556 + C14529;
    const double C14711 = C14709 + C14705;
    const double C14919 = C14917 + C14913;
    const double C15063 = C15061 + C15057;
    const double C15645 = C15643 + C15639;
    const double C15919 = C15917 + C15913;
    const double C19343 = C19331 + C19307;
    const double C19340 = C19328 + C19295;
    const double C19338 = C19326 + C19287;
    const double C19336 = C19324 + C19279;
    const double C19335 = C19323 + C19275;
    const double C19332 = C19320 + C19263;
    const double C19616 = C19614 + C19607;
    const double C21041 = C21037 + C21029;
    const double C21038 = C21034 + C21017;
    const double C21379 = C21377 + C21373;
    const double C4745 = C4736 * C30963;
    const double C4744 = C4735 * C30963;
    const double C24713 = C4735 * C18965;
    const double C4743 = C4734 * C30963;
    const double C24710 = C4734 * C18965;
    const double C4742 = C4733 * C30963;
    const double C25844 = C4733 * C18965;
    const double C4741 = C4732 * C30963;
    const double C24708 = C4732 * C18965;
    const double C4740 = C4731 * C30963;
    const double C24706 = C4731 * C18965;
    const double C4739 = C4730 * C30963;
    const double C25557 = C4730 * C18965;
    const double C4738 = C4729 * C30963;
    const double C24705 = C4729 * C18965;
    const double C4737 = C4728 * C30963;
    const double C24702 = C4728 * C18965;
    const double C4968 = C4966 * C30963;
    const double C24990 = C4966 * C18965;
    const double C5261 = C5255 * C30963;
    const double C24711 = C5255 * C18966;
    const double C25328 = C5255 * C18965;
    const double C5260 = C5254 * C30963;
    const double C24712 = C5254 * C18966;
    const double C5259 = C5253 * C30963;
    const double C24709 = C5253 * C18966;
    const double C26040 = C5253 * C18965;
    const double C5258 = C5252 * C30963;
    const double C24707 = C5252 * C18966;
    const double C25325 = C5252 * C18965;
    const double C5257 = C5251 * C30963;
    const double C24703 = C5251 * C18966;
    const double C25324 = C5251 * C18965;
    const double C5256 = C5250 * C30963;
    const double C24704 = C5250 * C18966;
    const double C25709 = C5250 * C18965;
    const double C5457 = C5455 * C30963;
    const double C5456 = C5454 * C30963;
    const double C25560 = C5454 * C18965;
    const double C5611 = C5607 * C30963;
    const double C26171 = C5607 * C18966;
    const double C5610 = C5606 * C30963;
    const double C25558 = C5606 * C18966;
    const double C26172 = C5606 * C18965;
    const double C5609 = C5605 * C30963;
    const double C25712 = C5605 * C18965;
    const double C25710 = C5605 * C18966;
    const double C5608 = C5604 * C30963;
    const double C25323 = C5604 * C18966;
    const double C25707 = C5604 * C18965;
    const double C5721 = C5720 * C30963;
    const double C5879 = C5878 * C30963;
    const double C25843 = C5878 * C18966;
    const double C5989 = C5988 * C30963;
    const double C25559 = C5988 * C18966;
    const double C6449 = C6447 * C30963;
    const double C25326 = C6447 * C18966;
    const double C26742 = C6447 * C18965;
    const double C6448 = C6446 * C30963;
    const double C26039 = C6446 * C18966;
    const double C6669 = C6667 * C30963;
    const double C25708 = C6667 * C18966;
    const double C27004 = C6667 * C18965;
    const double C6668 = C6666 * C30963;
    const double C25711 = C6666 * C18966;
    const double C25327 = C9612 * C18966;
    const double C26741 = C10697 * C18966;
    const double C27003 = C10915 * C18966;
    const double C4965 = C4963 - C4960;
    const double C13454 = C13442 - C13426;
    const double C13755 = C13753 - C13750;
    const double C9457 = C9455 - C9452;
    const double C19330 = C19318 - C19302;
    const double C19615 = C19613 - C19610;
    const double C14116 = C14110 - C14100;
    const double C24996 = C24995 - C24993;
    const double C139 = (5 * (3 * C30086 + C30020 * C30139 + C30122 * ae) +
                         C30020 * (4 * C30139 + C30020 * C30212 + C30193 * ae) +
                         (4 * C30122 + C30020 * C30193) * ae) /
                        C29977;
    const double C292 =
        (3 * C30086 + C30020 * C30139 + C30122 * ae + C30212 * C30219) / C29977;
    const double C445 =
        (3 * C30086 + C30020 * C30139 + C30122 * ae + C30212 * C30253) / C29977;
    const double C562 =
        (C30214 * (4 * C30139 + C30020 * C30212 + C30193 * ae)) / C29977;
    const double C666 =
        (C30248 * (4 * C30139 + C30020 * C30212 + C30193 * ae)) / C29977;
    const double C828 = (C30248 * C30214 * C30212) / C29977;
    const double C146 =
        (5 * (3 * C30133 + ae * C30138 + be * C30139 + C30020 * C30204) +
         ae * (4 * C30138 + C30020 * C30211 + C30193 * be) +
         be * (4 * C30139 + C30020 * C30212 + C30193 * ae) +
         C30020 *
             (4 * C30204 + ae * C30211 + be * C30212 +
              C30020 *
                  (3 * C30198 + ae * C30205 + be * C30206 +
                   C30020 * (2 * C30191 + ae * C30196 + be * C30197 +
                             C30020 * (C30181 + ae * C30182 + be * C30184 +
                                       C30020 * (ae * C30170 + be * C30173 +
                                                 C30020 *
                                                     (C30149 * C30150 +
                                                      C30024 * bs[8] *
                                                          std::pow(C30018, 8)) *
                                                     C29978)))))) /
        C29979;
    const double C563 =
        (4 * (2 * C30234 + ae * C30214 * C30131 + be * C30214 * C30132 +
              C30020 * C30297) +
         ae * C30214 * C30211 + be * C30214 * C30212 +
         C30020 *
             (3 * C30297 + ae * C30214 * C30205 + be * C30214 * C30206 +
              C30020 *
                  (2 * C30295 + ae * C30214 * C30196 + be * C30214 * C30197 +
                   C30020 *
                       (C30286 + ae * C30214 * C30182 + be * C30214 * C30184 +
                        C30020 * (ae * C30214 * C30170 + be * C30214 * C30173 +
                                  C30020 * C30214 *
                                      (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                      C29978))))) /
        C29979;
    const double C667 =
        (4 * (2 * C30268 + ae * C30248 * C30131 + be * C30248 * C30132 +
              C30020 * C30314) +
         ae * C30248 * C30211 + be * C30248 * C30212 +
         C30020 *
             (3 * C30314 + ae * C30248 * C30205 + be * C30248 * C30206 +
              C30020 *
                  (2 * C30312 + ae * C30248 * C30196 + be * C30248 * C30197 +
                   C30020 *
                       (C30303 + ae * C30248 * C30182 + be * C30248 * C30184 +
                        C30020 * (ae * C30248 * C30170 + be * C30248 * C30173 +
                                  C30020 * C30248 *
                                      (C30149 * C30150 +
                                       C30024 * bs[8] * std::pow(C30018, 8)) *
                                      C29978))))) /
        C29979;
    const double C138 = (5 * (3 * C30085 + C30020 * C30138 + C30122 * be) +
                         C30020 * (4 * C30138 + C30020 * C30211 + C30193 * be) +
                         (4 * C30122 + C30020 * C30193) * be) /
                        C29977;
    const double C291 =
        (3 * C30085 + C30020 * C30138 + C30122 * be + C30211 * C30219) / C29977;
    const double C444 =
        (3 * C30085 + C30020 * C30138 + C30122 * be + C30211 * C30253) / C29977;
    const double C561 =
        (C30214 * (4 * C30138 + C30020 * C30211 + C30193 * be)) / C29977;
    const double C665 =
        (C30248 * (4 * C30138 + C30020 * C30211 + C30193 * be)) / C29977;
    const double C827 = (C30248 * C30214 * C30211) / C29977;
    const double C4967 = C4965 + C4961;
    const double C13466 = C13454 + C13427;
    const double C13757 = C13755 + C13751;
    const double C9459 = C9457 + C9453;
    const double C19342 = C19330 + C19303;
    const double C19617 = C19615 + C19611;
    const double C14122 = C14116 + C14101;
    const double C24997 = C24996 + C24994;
    const double C4969 = C4967 * C30963;
    const double C24998 = C24997 * C18966;
    d2ee[0] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C30824 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C30831 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30783 * C2702) *
              C30742 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C30831 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C30824 -
           ((C14710 + C14711) * C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C2702) *
              C30751 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C30824 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C30831 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C30824 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C30831 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C31010 -
            ((C15062 + C15063) * C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C2702) *
              C2442 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C30824 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30831 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C31010) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31084 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C31080 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30783 * C31070 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C30783 * C31050) *
              C2442 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C31080 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31084 -
           ((C14710 + C14711) * C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31070 +
           ((C14711 + C14710) * C30963 * C13231 +
            (C13233 * C1032 - C13234 * C1022 - C13233 * C1033 + C13229 * C1040 +
             C13235 * C1034 - C13236 * C1023 - C13235 * C1035 +
             C13230 * C1041) *
                C30963 * C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C2334 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C30828) *
              C31083 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C30828 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C2334) *
              C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C2334 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C30828) *
              C31063 +
          (((C13756 + C13757) * C30963 * C13231 +
            (C13233 * C287 - C13234 * C270 - C13233 * C288 + C13229 * C300 +
             C13235 * C291 - C13236 * C272 - C13235 * C292 + C13230 * C302) *
                C30963 * C13232) *
               C30783 * C30828 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31078 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C31067 +
            ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
              C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                 C30963 * C13231 +
             (C14562 + C14563) * C30963 * C13232) *
                C31043) *
               C2334 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C31067 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31078 -
            ((C14566 + C14567) * C30963 * C13232 +
             (C14563 + C14562) * C30963 * C13231) *
                C31043) *
               C30828) *
              C2442 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C31067 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31078 -
            ((C15644 + C15645) * C30963 * C13232 +
             (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
              C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                 C30963 * C13231) *
                C31043) *
               C2334 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31078 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C31067 +
            ((C15645 + C15644) * C30963 * C13231 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C30963 * C13232) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C30828) *
              C30742 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C2334 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C30751 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C31010 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C31010) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C2334 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C30828) *
              C31083 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C30828 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C2334) *
              C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C2334 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C30828) *
              C31063 +
          (((C13756 + C13757) * C30963 * C13231 +
            (C13233 * C287 - C13234 * C270 - C13233 * C288 + C13229 * C300 +
             C13235 * C291 - C13236 * C272 - C13235 * C292 + C13230 * C302) *
                C30963 * C13232) *
               C30783 * C30828 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31084 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C31080 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30783 * C31070 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C30783 * C31050) *
              C2442 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C31080 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31084 -
           ((C14710 + C14711) * C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31070 +
           ((C14711 + C14710) * C30963 * C13231 +
            (C13233 * C1032 - C13234 * C1022 - C13233 * C1033 + C13229 * C1040 +
             C13235 * C1034 - C13236 * C1023 - C13235 * C1035 +
             C13230 * C1041) *
                C30963 * C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C30824 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C30831 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C3096 -
            ((C15062 + C15063) * C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C2702) *
              C30995 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C30824 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30831 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C3096) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30866 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30873 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C3604) *
              C30824 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C30873 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30866 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C3604) *
              C30831 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30866 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C30873 +
           ((C14567 + C14566) * C30963 * C13231 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C30963 * C13232) *
               C3604) *
              C2702) *
         C30737) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C3096 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C31084 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C30870 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C3096) *
              C31080 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C3096 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C30870) *
              C31070 +
          (((C15063 + C15062) * C30963 * C13231 +
            (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
             C13235 * C5868 - C13236 * C5867 - C13235 * C5869 +
             C13230 * C5870) *
                C30963 * C13232) *
               C30870 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C30828) *
              C31074 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C2334 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C31061 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C3096 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31085 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31082 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31073 -
           ((C15918 + C15919) * C30963 * C13232 +
            (C13235 * C1854 - C13236 * C1847 - C13235 * C1855 + C13230 * C1865 +
             C13233 * C1856 - C13234 * C1848 - C13233 * C1857 +
             C13229 * C1866) *
                C30963 * C13231) *
               C31056) *
              C2334 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C31082 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C31085 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C31073 +
           ((C15919 + C15918) * C30963 * C13231 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C30963 * C13232) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C30866 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30873 +
            ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
              C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                 C30963 * C13231 +
             (C14562 + C14563) * C30963 * C13232) *
                C3604) *
               C2334 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30873 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C30866 -
            ((C14566 + C14567) * C30963 * C13232 +
             (C14563 + C14562) * C30963 * C13231) *
                C3604) *
               C30828) *
              C30995 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30873 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C30866 -
            ((C15644 + C15645) * C30963 * C13232 +
             (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
              C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                 C30963 * C13231) *
                C3604) *
               C2334 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C30866 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30873 +
            ((C15645 + C15644) * C30963 * C13231 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C30963 * C13232) *
                C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C30828) *
              C31074 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C2334 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C31061 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C3096 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C3096 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C31084 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C30870 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C3096) *
              C31080 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C3096 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C30870) *
              C31070 +
          (((C15063 + C15062) * C30963 * C13231 +
            (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
             C13235 * C5868 - C13236 * C5867 - C13235 * C5869 +
             C13230 * C5870) *
                C30963 * C13232) *
               C30870 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C1286 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C1287 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30783 * C1288 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C30783 * C31050) *
              C30995 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C1287 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C1286 -
           ((C14710 + C14711) * C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C1288 +
           ((C14711 + C14710) * C30963 * C13231 +
            (C13233 * C1032 - C13234 * C1022 - C13233 * C1033 + C13229 * C1040 +
             C13235 * C1034 - C13236 * C1023 - C13235 * C1035 +
             C13230 * C1041) *
                C30963 * C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31009 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C30828) *
              C556 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C30828 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31009) *
              C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C31009 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C30828) *
              C558 +
          (((C13756 + C13757) * C30963 * C13231 +
            (C13233 * C287 - C13234 * C270 - C13233 * C288 + C13229 * C300 +
             C13235 * C291 - C13236 * C272 - C13235 * C292 + C13230 * C302) *
                C30963 * C13232) *
               C30783 * C30828 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C1666 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C1667 +
            ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
              C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                 C30963 * C13231 +
             (C14562 + C14563) * C30963 * C13232) *
                C31043) *
               C31009 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C1667 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C1666 -
            ((C14566 + C14567) * C30963 * C13232 +
             (C14563 + C14562) * C30963 * C13231) *
                C31043) *
               C30828) *
              C30995 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C1667 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C1666 -
            ((C15644 + C15645) * C30963 * C13232 +
             (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
              C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                 C30963 * C13231) *
                C31043) *
               C31009 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C1666 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C1667 +
            ((C15645 + C15644) * C30963 * C13231 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C30963 * C13232) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31010 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C1286 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C30870 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C31010) *
              C1287 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C31010 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C30870) *
              C1288 +
          (((C15063 + C15062) * C30963 * C13231 +
            (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
             C13235 * C5868 - C13236 * C5867 - C13235 * C5869 +
             C13230 * C5870) *
                C30963 * C13232) *
               C30870 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C13233 * C1171 - C13234 * C1157 - C13233 * C1172 +
              C13229 * C1184 + C13235 * C1169 - C13236 * C1156 -
              C13235 * C1170 + C13230 * C1183) *
                 C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C30828) *
              C260 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C31009 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C13235 * C1167 - C13236 * C1155 - C13235 * C1168 +
              C13230 * C1182 + C13233 * C1169 - C13234 * C1156 -
              C13233 * C1170 + C13229 * C1183) *
                 C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C261 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C31010 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C2118 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C2119 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C2120 -
           ((C15918 + C15919) * C30963 * C13232 +
            (C13235 * C1854 - C13236 * C1847 - C13235 * C1855 + C13230 * C1865 +
             C13233 * C1856 - C13234 * C1848 - C13233 * C1857 +
             C13229 * C1866) *
                C30963 * C13231) *
               C31056) *
              C31009 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C2119 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C2118 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C2120 +
           ((C15919 + C15918) * C30963 * C13231 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C30963 * C13232) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
                C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                   C30963 * C13231 +
               (C13233 * C277 - C13234 * C265 - C13233 * C278 + C13229 * C295 +
                C13235 * C275 - C13236 * C264 - C13235 * C276 + C13230 * C294) *
                   C30963 * C13232) *
                  C30783 * C30765 * C108 -
              ((C13235 * C273 - C13236 * C263 - C13235 * C274 + C13230 * C293 +
                C13233 * C275 - C13234 * C264 - C13233 * C276 + C13229 * C294) *
                   C30963 * C13232 +
               (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
                C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                   C30963 * C13231) *
                  C30783 * C30765 * C109 +
              ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
                C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                   C30963 * C13231 +
               (C13233 * C273 - C13234 * C263 - C13233 * C274 + C13229 * C293 +
                C13235 * C285 - C13236 * C269 - C13235 * C286 + C13230 * C299) *
                   C30963 * C13232) *
                  C30783 * C30765 * C110 -
              ((C13235 * C289 - C13236 * C271 - C13235 * C290 + C13230 * C301 +
                C13233 * C285 - C13234 * C269 - C13233 * C286 + C13229 * C299) *
                   C30963 * C13232 +
               (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
                C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                   C30963 * C13231) *
                  C30783 * C30765 * C111 +
              ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
                C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
                   C30963 * C13231 +
               (C13233 * C289 - C13234 * C271 - C13233 * C290 + C13229 * C301 +
                C13235 * C561 - C13236 * C560 - C13235 * C562 + C13230 * C563) *
                   C30963 * C13232) *
                  C30783 * C30765 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
                 C13235 * C128 - C13236 * C120 - C13235 * C129 +
                 C13230 * C141) *
                    C30963 * C13231 +
                (C13456 + C13457) * C30963 * C13232) *
                   C30783 * C31077 -
               ((C13458 + C13459) * C30963 * C13232 +
                (C13457 + C13456) * C30963 * C13231) *
                   C30783 * C31065 +
               ((C13459 + C13458) * C30963 * C13231 +
                (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 +
                 C13229 * C1038 + C13235 * C1026 - C13236 * C1019 -
                 C13235 * C1027 + C13230 * C1037) *
                    C30963 * C13232) *
                   C30783 * C31040) *
                  C260 +
              (((C13460 + C13461) * C30963 * C13231 +
                (C13462 + C13463) * C30963 * C13232) *
                   C30783 * C31065 -
               ((C13461 + C13460) * C30963 * C13232 +
                (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
                 C13233 * C128 - C13234 * C120 - C13233 * C129 +
                 C13229 * C141) *
                    C30963 * C13231) *
                   C30783 * C31077 -
               ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 +
                 C13230 * C1036 + C13233 * C1026 - C13234 * C1019 -
                 C13233 * C1027 + C13229 * C1037) *
                    C30963 * C13232 +
                (C13463 + C13462) * C30963 * C13231) *
                   C30783 * C31040) *
                  C261 +
              (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
                 C13235 * C132 - C13236 * C122 - C13235 * C133 +
                 C13230 * C143) *
                    C30963 * C13231 +
                (C13464 + C13465) * C30963 * C13232) *
                   C30783 * C31077 -
               ((C13466 + C13467) * C30963 * C13232 +
                (C13465 + C13464) * C30963 * C13231) *
                   C30783 * C31065 +
               ((C13467 + C13466) * C30963 * C13231 +
                (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 +
                 C13229 * C1036 + C13235 * C1293 - C13236 * C1292 -
                 C13235 * C1294 + C13230 * C1295) *
                    C30963 * C13232) *
                   C30783 * C31040) *
                  C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31078 -
           ((C13235 * C821 - C13236 * C815 - C13235 * C822 + C13230 * C830 +
             C13233 * C819 - C13234 * C814 - C13233 * C820 + C13229 * C829) *
                C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C13233 * C1165 - C13234 * C1154 - C13233 * C1166 + C13229 * C1181 +
             C13235 * C1163 - C13236 * C1153 - C13235 * C1164 +
             C13230 * C1180) *
                C30963 * C13232) *
               C31043) *
              C30765 * C260 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C13233 * C821 - C13234 * C815 - C13233 * C822 + C13229 * C830 +
             C13235 * C823 - C13236 * C816 - C13235 * C824 + C13230 * C831) *
                C30963 * C13232) *
               C31067 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C31078 -
           ((C13235 * C1161 - C13236 * C1152 - C13235 * C1162 + C13230 * C1179 +
             C13233 * C1163 - C13234 * C1153 - C13233 * C1164 +
             C13229 * C1180) *
                C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C31043) *
              C30765 * C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C31078 -
           ((C13235 * C825 - C13236 * C817 - C13235 * C826 + C13230 * C832 +
             C13233 * C823 - C13234 * C816 - C13233 * C824 + C13229 * C831) *
                C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C436 - C13234 * C421 - C13233 * C437 + C13229 * C451 +
             C13235 * C440 - C13236 * C423 - C13235 * C441 + C13230 * C453) *
                C30963 * C13231 +
            (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 + C13229 * C1179 +
             C13235 * C2017 - C13236 * C2016 - C13235 * C2018 +
             C13230 * C2019) *
                C30963 * C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C944 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C945 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C945 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C944 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C944 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C945 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13456 + C13457) * C30963 * C13232) *
              C30783 * C1012 -
          ((C13458 + C13459) * C30963 * C13232 +
           (C13457 + C13456) * C30963 * C13231) *
              C30783 * C1013 +
          ((C13459 + C13458) * C30963 * C13231 +
           (C14376 + C14377) * C30963 * C13232) *
              C30783 * C1014 -
          ((C14378 + C14379) * C30963 * C13232 +
           (C14377 + C14376) * C30963 * C13231) *
              C30783 * C1015 +
          ((C14379 + C14378) * C30963 * C13231 +
           (C13233 * C5435 - C13234 * C5433 - C13233 * C5436 + C13229 * C5439 +
            C13235 * C5710 - C13236 * C5709 - C13235 * C5711 + C13230 * C5712) *
               C30963 * C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31078 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C944 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C31067 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C31078 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C31043) *
              C945 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C31078 -
           ((C13235 * C1549 - C13236 * C1545 - C13235 * C1550 + C13230 * C1554 +
             C13233 * C1547 - C13234 * C1544 - C13233 * C1548 +
             C13229 * C1553) *
                C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C31067 +
           ((C14567 + C14566) * C30963 * C13231 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C30963 * C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C1666 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C30765 * C31074 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C1667 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C1666 -
           ((C13235 * C1161 - C13236 * C1152 - C13235 * C1162 + C13230 * C1179 +
             C13233 * C1163 - C13234 * C1153 - C13233 * C1164 +
             C13229 * C1180) *
                C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C31043) *
              C30765 * C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C1666 -
           ((C14122 + C14123) * C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C436 - C13234 * C421 - C13233 * C437 + C13229 * C451 +
             C13235 * C440 - C13236 * C423 - C13235 * C441 + C13230 * C453) *
                C30963 * C13231 +
            (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 + C13229 * C1179 +
             C13235 * C2017 - C13236 * C2016 - C13235 * C2018 +
             C13230 * C2019) *
                C30963 * C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C1666 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C31077 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C1667 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C1666 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C31043) *
              C31065 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C1666 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C1667 +
           ((C14567 + C14566) * C30963 * C13231 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C30963 * C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13456 + C13457) * C30963 * C13232) *
              C1841 -
          ((C14118 + C14119) * C30963 * C13232 +
           (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
            C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
               C30963 * C13231) *
              C1842 +
          ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
            C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
               C30963 * C13231 +
           (C14562 + C14563) * C30963 * C13232) *
              C1843 -
          ((C13235 * C2229 - C13236 * C2225 - C13235 * C2230 + C13230 * C2234 +
            C13233 * C2227 - C13234 * C2224 - C13233 * C2228 + C13229 * C2233) *
               C30963 * C13232 +
           (C13235 * C1854 - C13236 * C1847 - C13235 * C1855 + C13230 * C1865 +
            C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866) *
               C30963 * C13231) *
              C1844 +
          ((C13233 * C1858 - C13234 * C1849 - C13233 * C1859 + C13229 * C1867 +
            C13235 * C1860 - C13236 * C1850 - C13235 * C1861 + C13230 * C1868) *
               C30963 * C13231 +
           (C13233 * C6276 - C13234 * C6272 - C13233 * C6277 + C13229 * C6281 +
            C13235 * C10687 - C13236 * C10686 - C13235 * C10688 +
            C13230 * C10689) *
               C30963 * C13232) *
              C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C944 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C945 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C31010 -
            ((C13235 * C1549 - C13236 * C1545 - C13235 * C1550 +
              C13230 * C1554 + C13233 * C1547 - C13234 * C1544 -
              C13233 * C1548 + C13229 * C1553) *
                 C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C31040) *
              C30995 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C944 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C945 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31010 -
           ((C13235 * C821 - C13236 * C815 - C13235 * C822 + C13230 * C830 +
             C13233 * C819 - C13234 * C814 - C13233 * C820 + C13229 * C829) *
                C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C30765 * C556 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C13233 * C821 - C13234 * C815 - C13233 * C822 + C13229 * C830 +
             C13235 * C823 - C13236 * C816 - C13235 * C824 + C13230 * C831) *
                C30963 * C13232) *
               C30870 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C31010) *
              C30765 * C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C31010 -
           ((C13235 * C825 - C13236 * C817 - C13235 * C826 + C13230 * C832 +
             C13233 * C823 - C13234 * C816 - C13233 * C824 + C13229 * C831) *
                C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C30870) *
              C30765 * C558 +
          (((C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452 +
             C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454) *
                C30963 * C13231 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C30963 * C13232) *
               C30870 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C2118 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C2119 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C2120 -
           ((C13235 * C2229 - C13236 * C2225 - C13235 * C2230 + C13230 * C2234 +
             C13233 * C2227 - C13234 * C2224 - C13233 * C2228 +
             C13229 * C2233) *
                C30963 * C13232 +
            (C13235 * C1854 - C13236 * C1847 - C13235 * C1855 + C13230 * C1865 +
             C13233 * C1856 - C13234 * C1848 - C13233 * C1857 +
             C13229 * C1866) *
                C30963 * C13231) *
               C31056) *
              C30765 * C30995 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C2119 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C2118 -
           ((C15644 + C15645) * C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C2120 +
           ((C13233 * C1854 - C13234 * C1847 - C13233 * C1855 + C13229 * C1865 +
             C13235 * C1852 - C13236 * C1846 - C13235 * C1853 +
             C13230 * C1864) *
                C30963 * C13231 +
            (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 + C13229 * C2234 +
             C13235 * C2231 - C13236 * C2226 - C13235 * C2232 +
             C13230 * C2235) *
                C30963 * C13232) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C31065 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31077 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13233 * C277 - C13234 * C265 - C13233 * C278 + C13229 * C295 +
            C13235 * C275 - C13236 * C264 - C13235 * C276 + C13230 * C294) *
               C30963 * C13232) *
              C30783 * C30765 * C108 -
          ((C13235 * C273 - C13236 * C263 - C13235 * C274 + C13230 * C293 +
            C13233 * C275 - C13234 * C264 - C13233 * C276 + C13229 * C294) *
               C30963 * C13232 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C30963 * C13231) *
              C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C30963 * C13231 +
           (C13233 * C273 - C13234 * C263 - C13233 * C274 + C13229 * C293 +
            C13235 * C285 - C13236 * C269 - C13235 * C286 + C13230 * C299) *
               C30963 * C13232) *
              C30783 * C30765 * C110 -
          ((C13235 * C289 - C13236 * C271 - C13235 * C290 + C13230 * C301 +
            C13233 * C285 - C13234 * C269 - C13233 * C286 + C13229 * C299) *
               C30963 * C13232 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C30963 * C13231) *
              C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C30963 * C13231 +
           (C13233 * C289 - C13234 * C271 - C13233 * C290 + C13229 * C301 +
            C13235 * C561 - C13236 * C560 - C13235 * C562 + C13230 * C563) *
               C30963 * C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C944 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C945 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C945 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C944 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C944 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C945 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13456 + C13457) * C30963 * C13232) *
              C30783 * C1012 -
          ((C13458 + C13459) * C30963 * C13232 +
           (C13457 + C13456) * C30963 * C13231) *
              C30783 * C1013 +
          ((C13459 + C13458) * C30963 * C13231 +
           (C14376 + C14377) * C30963 * C13232) *
              C30783 * C1014 -
          ((C14378 + C14379) * C30963 * C13232 +
           (C14377 + C14376) * C30963 * C13231) *
              C30783 * C1015 +
          ((C14379 + C14378) * C30963 * C13231 +
           (C13233 * C5435 - C13234 * C5433 - C13233 * C5436 + C13229 * C5439 +
            C13235 * C5710 - C13236 * C5709 - C13235 * C5711 + C13230 * C5712) *
               C30963 * C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C1666 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C30765 * C31074 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C1667 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C1666 -
           ((C13235 * C1161 - C13236 * C1152 - C13235 * C1162 + C13230 * C1179 +
             C13233 * C1163 - C13234 * C1153 - C13233 * C1164 +
             C13229 * C1180) *
                C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C31043) *
              C30765 * C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C1666 -
           ((C14122 + C14123) * C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C436 - C13234 * C421 - C13233 * C437 + C13229 * C451 +
             C13235 * C440 - C13236 * C423 - C13235 * C441 + C13230 * C453) *
                C30963 * C13231 +
            (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 + C13229 * C1179 +
             C13235 * C2017 - C13236 * C2016 - C13235 * C2018 +
             C13230 * C2019) *
                C30963 * C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C1666 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C1667 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C31077 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C1667 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C1666 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C31043) *
              C31065 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C1666 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C1667 +
           ((C14567 + C14566) * C30963 * C13231 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C30963 * C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C30828) *
              C30742 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C31009 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C30751 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C3096 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C3096) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C30866 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30873 +
            ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
              C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                 C30963 * C13231 +
             (C14562 + C14563) * C30963 * C13232) *
                C3604) *
               C31009 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30873 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C30866 -
            ((C14566 + C14567) * C30963 * C13232 +
             (C14563 + C14562) * C30963 * C13231) *
                C3604) *
               C30828) *
              C2442 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30873 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C30866 -
            ((C15644 + C15645) * C30963 * C13232 +
             (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
              C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                 C30963 * C13231) *
                C3604) *
               C31009 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C30866 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30873 +
            ((C15645 + C15644) * C30963 * C13231 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C30963 * C13232) *
                C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C31077 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C31065 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C3096 -
            ((C15062 + C15063) * C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C31040) *
              C2442 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C31077 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C31065 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C3096 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C30765 * C31083 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C30870 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C3096) *
              C30765 * C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C3096 -
           ((C14122 + C14123) * C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C30870) *
              C30765 * C31063 +
          (((C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452 +
             C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454) *
                C30963 * C13231 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C30963 * C13232) *
               C30870 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31085 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31082 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31073 -
           ((C15918 + C15919) * C30963 * C13232 +
            (C13235 * C1854 - C13236 * C1847 - C13235 * C1855 + C13230 * C1865 +
             C13233 * C1856 - C13234 * C1848 - C13233 * C1857 +
             C13229 * C1866) *
                C30963 * C13231) *
               C31056) *
              C30765 * C2442 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C31082 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C31085 -
           ((C15644 + C15645) * C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C31073 +
           ((C13233 * C1854 - C13234 * C1847 - C13233 * C1855 + C13229 * C1865 +
             C13235 * C1852 - C13236 * C1846 - C13235 * C1853 +
             C13230 * C1864) *
                C30963 * C13231 +
            (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 + C13229 * C2234 +
             C13235 * C2231 - C13236 * C2226 - C13235 * C2232 +
             C13230 * C2235) *
                C30963 * C13232) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30866 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30873 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C3604) *
              C30765 * C30742 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C30873 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30866 -
           ((C15644 + C15645) * C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C3604) *
              C30765 * C30751 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30866 -
           ((C14122 + C14123) * C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C30873 +
           ((C13233 * C436 - C13234 * C421 - C13233 * C437 + C13229 * C451 +
             C13235 * C440 - C13236 * C423 - C13235 * C441 + C13230 * C453) *
                C30963 * C13231 +
            (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 + C13229 * C1179 +
             C13235 * C2017 - C13236 * C2016 - C13235 * C2018 +
             C13230 * C2019) *
                C30963 * C13232) *
               C3604) *
              C30765 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C3096 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C30765 * C31083 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C14120 + C14121) * C30963 * C13232) *
               C30870 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C3096) *
              C30765 * C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C3096 -
           ((C14122 + C14123) * C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C30870) *
              C30765 * C31063 +
          (((C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452 +
             C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454) *
                C30963 * C13231 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C30963 * C13232) *
               C30870 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C3096 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C31077 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C3096) *
               C31065 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C3096 -
            ((C15062 + C15063) * C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C31040) *
              C2442 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C3096) *
               C31077 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C3096 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C31065 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31009 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C30828) *
              C556 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C30828 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31009) *
              C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C31009 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C30828) *
              C558 +
          (((C13756 + C13757) * C30963 * C13231 +
            (C13233 * C287 - C13234 * C270 - C13233 * C288 + C13229 * C300 +
             C13235 * C291 - C13236 * C272 - C13235 * C292 + C13230 * C302) *
                C30963 * C13232) *
               C30783 * C30828 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C1286 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C1287 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C30783 * C1288 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C30783 * C31050) *
              C30995 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C1287 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C1286 -
           ((C14710 + C14711) * C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C1288 +
           ((C14711 + C14710) * C30963 * C13231 +
            (C13233 * C1032 - C13234 * C1022 - C13233 * C1033 + C13229 * C1040 +
             C13235 * C1034 - C13236 * C1023 - C13235 * C1035 +
             C13230 * C1041) *
                C30963 * C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C13233 * C1171 - C13234 * C1157 - C13233 * C1172 +
              C13229 * C1184 + C13235 * C1169 - C13236 * C1156 -
              C13235 * C1170 + C13230 * C1183) *
                 C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C30828) *
              C260 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C31009 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C13235 * C1167 - C13236 * C1155 - C13235 * C1168 +
              C13230 * C1182 + C13233 * C1169 - C13234 * C1156 -
              C13233 * C1170 + C13229 * C1183) *
                 C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C30828) *
              C261 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C30963 * C13231 +
             (C13464 + C13465) * C30963 * C13232) *
                C31010 -
            ((C14122 + C14123) * C30963 * C13232 +
             (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
              C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                 C30963 * C13231) *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C30963 * C13231 +
             (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
              C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
              C13235 * C1444 + C13230 * C1445) *
                 C30963 * C13232) *
                C30870 -
            ((C13466 + C13467) * C30963 * C13232 +
             (C13465 + C13464) * C30963 * C13231) *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31010 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C1286 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C30870 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C31010) *
              C1287 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C31010 -
           ((C15062 + C15063) * C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C30870) *
              C1288 +
          (((C15063 + C15062) * C30963 * C13231 +
            (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
             C13235 * C5868 - C13236 * C5867 - C13235 * C5869 +
             C13230 * C5870) *
                C30963 * C13232) *
               C30870 -
           ((C14378 + C14379) * C30963 * C13232 +
            (C14377 + C14376) * C30963 * C13231) *
               C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C31065 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31077 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13233 * C277 - C13234 * C265 - C13233 * C278 + C13229 * C295 +
            C13235 * C275 - C13236 * C264 - C13235 * C276 + C13230 * C294) *
               C30963 * C13232) *
              C30783 * C30765 * C108 -
          ((C13235 * C273 - C13236 * C263 - C13235 * C274 + C13230 * C293 +
            C13233 * C275 - C13234 * C264 - C13233 * C276 + C13229 * C294) *
               C30963 * C13232 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C30963 * C13231) *
              C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C30963 * C13231 +
           (C13233 * C273 - C13234 * C263 - C13233 * C274 + C13229 * C293 +
            C13235 * C285 - C13236 * C269 - C13235 * C286 + C13230 * C299) *
               C30963 * C13232) *
              C30783 * C30765 * C110 -
          ((C13235 * C289 - C13236 * C271 - C13235 * C290 + C13230 * C301 +
            C13233 * C285 - C13234 * C269 - C13233 * C286 + C13229 * C299) *
               C30963 * C13232 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C30963 * C13231) *
              C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C30963 * C13231 +
           (C13233 * C289 - C13234 * C271 - C13233 * C290 + C13229 * C301 +
            C13235 * C561 - C13236 * C560 - C13235 * C562 + C13230 * C563) *
               C30963 * C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31078 -
           ((C13235 * C821 - C13236 * C815 - C13235 * C822 + C13230 * C830 +
             C13233 * C819 - C13234 * C814 - C13233 * C820 + C13229 * C829) *
                C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C13233 * C1165 - C13234 * C1154 - C13233 * C1166 + C13229 * C1181 +
             C13235 * C1163 - C13236 * C1153 - C13235 * C1164 +
             C13230 * C1180) *
                C30963 * C13232) *
               C31043) *
              C30765 * C260 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C13233 * C821 - C13234 * C815 - C13233 * C822 + C13229 * C830 +
             C13235 * C823 - C13236 * C816 - C13235 * C824 + C13230 * C831) *
                C30963 * C13232) *
               C31067 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C31078 -
           ((C13235 * C1161 - C13236 * C1152 - C13235 * C1162 + C13230 * C1179 +
             C13233 * C1163 - C13234 * C1153 - C13233 * C1164 +
             C13229 * C1180) *
                C30963 * C13232 +
            (C13235 * C436 - C13236 * C421 - C13235 * C437 + C13230 * C451 +
             C13233 * C434 - C13234 * C420 - C13233 * C435 + C13229 * C450) *
                C30963 * C13231) *
               C31043) *
              C30765 * C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C31078 -
           ((C13235 * C825 - C13236 * C817 - C13235 * C826 + C13230 * C832 +
             C13233 * C823 - C13234 * C816 - C13233 * C824 + C13229 * C831) *
                C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C436 - C13234 * C421 - C13233 * C437 + C13229 * C451 +
             C13235 * C440 - C13236 * C423 - C13235 * C441 + C13230 * C453) *
                C30963 * C13231 +
            (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 + C13229 * C1179 +
             C13235 * C2017 - C13236 * C2016 - C13235 * C2018 +
             C13230 * C2019) *
                C30963 * C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C944 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C945 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C945 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C944 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C944 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C945 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13456 + C13457) * C30963 * C13232) *
              C30783 * C1012 -
          ((C13458 + C13459) * C30963 * C13232 +
           (C13457 + C13456) * C30963 * C13231) *
              C30783 * C1013 +
          ((C13459 + C13458) * C30963 * C13231 +
           (C14376 + C14377) * C30963 * C13232) *
              C30783 * C1014 -
          ((C14378 + C14379) * C30963 * C13232 +
           (C14377 + C14376) * C30963 * C13231) *
              C30783 * C1015 +
          ((C14379 + C14378) * C30963 * C13231 +
           (C13233 * C5435 - C13234 * C5433 - C13233 * C5436 + C13229 * C5439 +
            C13235 * C5710 - C13236 * C5709 - C13235 * C5711 + C13230 * C5712) *
               C30963 * C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31078 -
           ((C14118 + C14119) * C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C31067 +
           ((C13233 * C432 - C13234 * C419 - C13233 * C433 + C13229 * C449 +
             C13235 * C434 - C13236 * C420 - C13235 * C435 + C13230 * C450) *
                C30963 * C13231 +
            (C14562 + C14563) * C30963 * C13232) *
               C31043) *
              C944 +
          (((C14119 + C14118) * C30963 * C13231 +
            (C14564 + C14565) * C30963 * C13232) *
               C31067 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C31078 -
           ((C14566 + C14567) * C30963 * C13232 +
            (C14563 + C14562) * C30963 * C13231) *
               C31043) *
              C945 +
          (((C13459 + C13458) * C30963 * C13231 +
            (C14376 + C14377) * C30963 * C13232) *
               C31078 -
           ((C13235 * C1549 - C13236 * C1545 - C13235 * C1550 + C13230 * C1554 +
             C13233 * C1547 - C13234 * C1544 - C13233 * C1548 +
             C13229 * C1553) *
                C30963 * C13232 +
            (C14565 + C14564) * C30963 * C13231) *
               C31067 +
           ((C14567 + C14566) * C30963 * C13231 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C30963 * C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C31010 -
           ((C13235 * C821 - C13236 * C815 - C13235 * C822 + C13230 * C830 +
             C13233 * C819 - C13234 * C814 - C13233 * C820 + C13229 * C829) *
                C30963 * C13232 +
            (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
             C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                C30963 * C13231) *
               C30870) *
              C30765 * C556 +
          (((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
             C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                C30963 * C13231 +
            (C13233 * C821 - C13234 * C815 - C13233 * C822 + C13229 * C830 +
             C13235 * C823 - C13236 * C816 - C13235 * C824 + C13230 * C831) *
                C30963 * C13232) *
               C30870 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C31010) *
              C30765 * C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C31010 -
           ((C13235 * C825 - C13236 * C817 - C13235 * C826 + C13230 * C832 +
             C13233 * C823 - C13234 * C816 - C13233 * C824 + C13229 * C831) *
                C30963 * C13232 +
            (C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452 +
             C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446) *
                C30963 * C13231) *
               C30870) *
              C30765 * C558 +
          (((C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452 +
             C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454) *
                C30963 * C13231 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C30963 * C13232) *
               C30870 -
           ((C13757 + C13756) * C30963 * C13232 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C30963 * C13231) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C30963 * C13231 +
             (C13456 + C13457) * C30963 * C13232) *
                C31010 -
            ((C14118 + C14119) * C30963 * C13232 +
             (C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447 +
              C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448) *
                 C30963 * C13231) *
                C30870) *
               C944 +
           (((C14119 + C14118) * C30963 * C13231 +
             (C14564 + C14565) * C30963 * C13232) *
                C30870 -
            ((C13458 + C13459) * C30963 * C13232 +
             (C13457 + C13456) * C30963 * C13231) *
                C31010) *
               C945 +
           (((C13459 + C13458) * C30963 * C13231 +
             (C14376 + C14377) * C30963 * C13232) *
                C31010 -
            ((C13235 * C1549 - C13236 * C1545 - C13235 * C1550 +
              C13230 * C1554 + C13233 * C1547 - C13234 * C1544 -
              C13233 * C1548 + C13229 * C1553) *
                 C30963 * C13232 +
             (C14565 + C14564) * C30963 * C13231) *
                C30870) *
               C31040) *
              C30995 +
          ((((C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447 +
              C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446) *
                 C30963 * C13231 +
             (C14120 + C14121) * C30963 * C13232) *
                C30870 -
            ((C13461 + C13460) * C30963 * C13232 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C30963 * C13231) *
                C31010) *
               C944 +
           (((C13460 + C13461) * C30963 * C13231 +
             (C13462 + C13463) * C30963 * C13232) *
                C31010 -
            ((C14918 + C14919) * C30963 * C13232 +
             (C14121 + C14120) * C30963 * C13231) *
                C30870) *
               C945 +
           (((C14919 + C14918) * C30963 * C13231 +
             (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 +
              C13229 * C1554 + C13235 * C1551 - C13236 * C1546 -
              C13235 * C1552 + C13230 * C1555) *
                 C30963 * C13232) *
                C30870 -
            ((C14710 + C14711) * C30963 * C13232 +
             (C13463 + C13462) * C30963 * C13231) *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13233 * C277 - C13234 * C265 - C13233 * C278 + C13229 * C295 +
            C13235 * C275 - C13236 * C264 - C13235 * C276 + C13230 * C294) *
               C30963 * C13232) *
              C30783 * C30765 * C108 -
          ((C13235 * C273 - C13236 * C263 - C13235 * C274 + C13230 * C293 +
            C13233 * C275 - C13234 * C264 - C13233 * C276 + C13229 * C294) *
               C30963 * C13232 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C30963 * C13231) *
              C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C30963 * C13231 +
           (C13233 * C273 - C13234 * C263 - C13233 * C274 + C13229 * C293 +
            C13235 * C285 - C13236 * C269 - C13235 * C286 + C13230 * C299) *
               C30963 * C13232) *
              C30783 * C30765 * C110 -
          ((C13235 * C289 - C13236 * C271 - C13235 * C290 + C13230 * C301 +
            C13233 * C285 - C13234 * C269 - C13233 * C286 + C13229 * C299) *
               C30963 * C13232 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C30963 * C13231) *
              C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C30963 * C13231 +
           (C13233 * C289 - C13234 * C271 - C13233 * C290 + C13229 * C301 +
            C13235 * C561 - C13236 * C560 - C13235 * C562 + C13230 * C563) *
               C30963 * C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C31065 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C31077 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C31077 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C31065 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C30963 * C13231 +
            (C13456 + C13457) * C30963 * C13232) *
               C30783 * C944 -
           ((C13458 + C13459) * C30963 * C13232 +
            (C13457 + C13456) * C30963 * C13231) *
               C30783 * C945 +
           ((C13459 + C13458) * C30963 * C13231 +
            (C13233 * C1028 - C13234 * C1020 - C13233 * C1029 + C13229 * C1038 +
             C13235 * C1026 - C13236 * C1019 - C13235 * C1027 +
             C13230 * C1037) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C30963 * C13231 +
            (C13462 + C13463) * C30963 * C13232) *
               C30783 * C945 -
           ((C13461 + C13460) * C30963 * C13232 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C30963 * C13231) *
               C30783 * C944 -
           ((C13235 * C1024 - C13236 * C1018 - C13235 * C1025 + C13230 * C1036 +
             C13233 * C1026 - C13234 * C1019 - C13233 * C1027 +
             C13229 * C1037) *
                C30963 * C13232 +
            (C13463 + C13462) * C30963 * C13231) *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C30963 * C13231 +
            (C13464 + C13465) * C30963 * C13232) *
               C30783 * C944 -
           ((C13466 + C13467) * C30963 * C13232 +
            (C13465 + C13464) * C30963 * C13231) *
               C30783 * C945 +
           ((C13467 + C13466) * C30963 * C13231 +
            (C13233 * C1024 - C13234 * C1018 - C13233 * C1025 + C13229 * C1036 +
             C13235 * C1293 - C13236 * C1292 - C13235 * C1294 +
             C13230 * C1295) *
                C30963 * C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C30963 * C13231 +
           (C13456 + C13457) * C30963 * C13232) *
              C30783 * C1012 -
          ((C13458 + C13459) * C30963 * C13232 +
           (C13457 + C13456) * C30963 * C13231) *
              C30783 * C1013 +
          ((C13459 + C13458) * C30963 * C13231 +
           (C14376 + C14377) * C30963 * C13232) *
              C30783 * C1014 -
          ((C14378 + C14379) * C30963 * C13232 +
           (C14377 + C14376) * C30963 * C13231) *
              C30783 * C1015 +
          ((C14379 + C14378) * C30963 * C13231 +
           (C13233 * C5435 - C13234 * C5433 - C13233 * C5436 + C13229 * C5439 +
            C13235 * C5710 - C13236 * C5709 - C13235 * C5711 + C13230 * C5712) *
               C30963 * C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C30824 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C30831 +
           ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
               C2702) *
              C30742 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C30831 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C30824 -
           ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C30783 *
               C2702) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C30824 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C30831 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C30824 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C30831 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31010 -
            ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) *
                C30870) *
               C2702) *
              C2442 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C30824 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30831 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) *
                C31010) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31084 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C31080 +
           ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
               C31070 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
               C31050) *
              C2442 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C31080 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31084 -
           ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C30783 *
               C31070 +
           ((C25844 + C25843) * C13231 +
            (C5720 * C18965 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C18966) *
                C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C2334 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C30828) *
              C31083 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C30828 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C2334) *
              C31076 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C2334 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C30828) *
              C31063 +
          (((C24990 + C24998) * C13231 +
            (C4967 * C18965 +
             (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                 C18966) *
                C13232) *
               C30783 * C30828 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31078 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C31067 +
            ((C9242 * C18965 + C9243 * C18966) * C13231 +
             (C25707 + C25708) * C13232) *
                C31043) *
               C2334 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C31067 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31078 -
            ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) *
                C31043) *
               C30828) *
              C2442 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C31067 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31078 -
            ((C26741 + C26742) * C13232 +
             (C9246 * C18966 + C9245 * C18965) * C13231) *
                C31043) *
               C2334 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31078 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) * C31067 +
            ((C26742 + C26741) * C13231 +
             (C6446 * C18965 +
              (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                  C18966) *
                 C13232) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C30828) *
              C30742 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C2334 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C30751 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C31010 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) *
                C31010) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C2334 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C30828) *
              C31083 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C30828 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C2334) *
              C31076 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C2334 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C30828) *
              C31063 +
          (((C24990 + C24998) * C13231 +
            (C4967 * C18965 +
             (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                 C18966) *
                C13232) *
               C30783 * C30828 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31084 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C31080 +
           ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
               C31070 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
               C31050) *
              C2442 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C31080 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31084 -
           ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C30783 *
               C31070 +
           ((C25844 + C25843) * C13231 +
            (C5720 * C18965 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C18966) *
                C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C30824 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C30831 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C3096 -
            ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) *
                C30870) *
               C2702) *
              C30995 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C30824 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30831 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C3096) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30866 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30873 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C3604) *
              C30824 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30873 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30866 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C3604) *
              C30831 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30866 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C30873 +
           ((C25712 + C25711) * C13231 +
            (C5607 * C18965 +
             (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                 C18966) *
                C13232) *
               C3604) *
              C2702) *
         C30737) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C3096 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C31084 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
              C31080 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C3096 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C30870) *
              C31070 +
          (((C26172 + C26171) * C13231 +
            (C5988 * C18965 +
             (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                 C18966) *
                C13232) *
               C30870 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C30828) *
              C31074 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C2334 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C31061 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C3096 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31085 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31082 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31073 -
           ((C27003 + C27004) * C13232 +
            (C10539 * C18966 + C9243 * C18965) * C13231) *
               C31056) *
              C2334 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C31082 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31085 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C31073 +
           ((C27004 + C27003) * C13231 +
            (C6666 * C18965 +
             (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                 C18966) *
                C13232) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C30866 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30873 +
            ((C9242 * C18965 + C9243 * C18966) * C13231 +
             (C25707 + C25708) * C13232) *
                C3604) *
               C2334 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30873 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30866 -
            ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C3604) *
               C30828) *
              C30995 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30873 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C30866 -
            ((C26741 + C26742) * C13232 +
             (C9246 * C18966 + C9245 * C18965) * C13231) *
                C3604) *
               C2334 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30866 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) * C30873 +
            ((C26742 + C26741) * C13231 +
             (C6446 * C18965 +
              (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                  C18966) *
                 C13232) *
                C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C30828) *
              C31074 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C2334 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C31061 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C3096 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C2334 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C3096 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C31084 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
              C31080 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C3096 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C30870) *
              C31070 +
          (((C26172 + C26171) * C13231 +
            (C5988 * C18965 +
             (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                 C18966) *
                C13232) *
               C30870 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C1286 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C1287 +
           ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
               C1288 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
               C31050) *
              C30995 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C1287 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C1286 -
           ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C30783 *
               C1288 +
           ((C25844 + C25843) * C13231 +
            (C5720 * C18965 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C18966) *
                C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31009 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C30828) *
              C556 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C30828 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31009) *
              C557 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C31009 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C30828) *
              C558 +
          (((C24990 + C24998) * C13231 +
            (C4967 * C18965 +
             (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                 C18966) *
                C13232) *
               C30783 * C30828 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C1666 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C1667 +
            ((C9242 * C18965 + C9243 * C18966) * C13231 +
             (C25707 + C25708) * C13232) *
                C31043) *
               C31009 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C1667 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C1666 -
            ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) *
                C31043) *
               C30828) *
              C30995 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C1667 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C1666 -
            ((C26741 + C26742) * C13232 +
             (C9246 * C18966 + C9245 * C18965) * C13231) *
                C31043) *
               C31009 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C1666 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) * C1667 +
            ((C26742 + C26741) * C13231 +
             (C6446 * C18965 +
              (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                  C18966) *
                 C13232) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31010 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C1286 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31010) *
              C1287 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31010 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C30870) *
              C1288 +
          (((C26172 + C26171) * C13231 +
            (C5988 * C18965 +
             (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                 C18966) *
                C13232) *
               C30870 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25324 + C25323) * C13231 +
             (C5250 * C18965 + C5605 * C18966) * C13232) *
                C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C30828) *
              C260 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C31009 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C6446 * C18966 + C5253 * C18965) * C13232 +
             (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C261 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C31010 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C2118 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C2119 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C2120 -
           ((C27003 + C27004) * C13232 +
            (C10539 * C18966 + C9243 * C18965) * C13231) *
               C31056) *
              C31009 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C2119 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C2118 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C2120 +
           ((C27004 + C27003) * C13231 +
            (C6666 * C18965 +
             (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                 C18966) *
                C13232) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                    C18965 +
                C9241 * C18966) *
                   C13231 +
               (C4728 * C18965 + C5251 * C18966) * C13232) *
                  C30783 * C30765 * C108 -
              ((C5252 * C18966 + C4731 * C18965) * C13232 +
               (C9244 * C18966 +
                (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                    C18965) *
                   C13231) *
                  C30783 * C30765 * C109 +
              (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                    C18965 +
                C9247 * C18966) *
                   C13231 +
               (C4734 * C18965 + C5255 * C18966) * C13232) *
                  C30783 * C30765 * C110 -
              (((C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                    C18966 +
                C4966 * C18965) *
                   C13232 +
               (C9458 * C18966 +
                (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                    C18965) *
                   C13231) *
                  C30783 * C30765 * C111 +
              (((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
                    C18965 +
                (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
                    C18966) *
                   C13231 +
               ((C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
                    C18965 +
                (C4561 * C827 - C4562 * C818 - C4561 * C828 + C30711 * C833) *
                    C18966) *
                   C13232) *
                  C30783 * C30765 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                     C18965 +
                 C9241 * C18966) *
                    C13231 +
                (C24702 + C24703) * C13232) *
                   C30783 * C31077 -
               ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                   C30783 * C31065 +
               ((C24705 + C24704) * C13231 +
                (C4730 * C18965 + C5606 * C18966) * C13232) *
                   C30783 * C31040) *
                  C260 +
              (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) *
                   C30783 * C31065 -
               ((C24707 + C24706) * C13232 +
                (C9244 * C18966 +
                 (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                     C18965) *
                    C13231) *
                   C30783 * C31077 -
               ((C5878 * C18966 + C4733 * C18965) * C13232 +
                (C24709 + C24708) * C13231) *
                   C30783 * C31040) *
                  C261 +
              ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                     C18965 +
                 C9247 * C18966) *
                    C13231 +
                (C24710 + C24711) * C13232) *
                   C30783 * C31077 -
               ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) *
                   C30783 * C31065 +
               ((C24713 + C24712) * C13231 +
                (C4736 * C18965 + (C4561 * C1551 - C4562 * C1546 -
                                   C4561 * C1552 + C30711 * C1555) *
                                      C18966) *
                    C13232) *
                   C30783 * C31040) *
                  C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31078 -
           ((C5604 * C18966 + C5251 * C18965) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31067 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C5604 * C18965 + C6667 * C18966) * C13232) *
               C31043) *
              C30765 * C260 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C5252 * C18965 + C6447 * C18966) * C13232) *
               C31067 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C31078 -
           ((C10697 * C18966 + C6447 * C18965) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C31043) *
              C30765 * C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C31078 -
           ((C9612 * C18966 + C5255 * C18965) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C31067 +
           ((C9248 * C18965 + C9249 * C18966) * C13231 +
            (C9612 * C18965 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C18966) *
                C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C944 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C945 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C945 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C944 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C944 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C945 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C24702 + C24703) * C13232) *
              C30783 * C1012 -
          ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
              C1013 +
          ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
              C1014 -
          ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
              C1015 +
          ((C25560 + C25559) * C13231 +
           (C5455 * C18965 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C18966) *
               C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31078 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31067 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C944 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C31067 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31078 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C31043) *
              C945 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31078 -
           ((C5607 * C18966 + C5606 * C18965) * C13232 +
            (C25710 + C25709) * C13231) *
               C31067 +
           ((C25712 + C25711) * C13231 +
            (C5607 * C18965 +
             (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                 C18966) *
                C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C1666 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C1667 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C30765 * C31074 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C1667 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C1666 -
           ((C10697 * C18966 + C6447 * C18965) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C31043) *
              C30765 * C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C1666 -
           ((C25327 + C25328) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C1667 +
           ((C9248 * C18965 + C9249 * C18966) * C13231 +
            (C9612 * C18965 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C18966) *
                C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C1666 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C1667 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C31077 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C1667 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C1666 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C31043) *
              C31065 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C1666 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C1667 +
           ((C25712 + C25711) * C13231 +
            (C5607 * C18965 +
             (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                 C18966) *
                C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C24702 + C24703) * C13232) *
              C1841 -
          ((C25323 + C25324) * C13232 +
           (C9242 * C18966 + C9241 * C18965) * C13231) *
              C1842 +
          ((C9242 * C18965 + C9243 * C18966) * C13231 +
           (C25707 + C25708) * C13232) *
              C1843 -
          ((C10915 * C18966 + C6667 * C18965) * C13232 +
           (C10539 * C18966 + C9243 * C18965) * C13231) *
              C1844 +
          ((C10539 * C18965 + C10540 * C18966) * C13231 +
           (C10915 * C18965 + (C4561 * C10905 - C4562 * C10904 -
                               C4561 * C10906 + C30711 * C10907) *
                                  C18966) *
               C13232) *
              C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C944 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C945 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31010 -
            ((C5607 * C18966 + C5606 * C18965) * C13232 +
             (C25710 + C25709) * C13231) *
                C30870) *
               C31040) *
              C30995 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C944 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C945 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31010 -
           ((C5604 * C18966 + C5251 * C18965) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C30765 * C556 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C5252 * C18965 + C6447 * C18966) * C13232) *
               C30870 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C31010) *
              C30765 * C557 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C31010 -
           ((C9612 * C18966 + C5255 * C18965) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C30870) *
              C30765 * C558 +
          (((C9458 * C18965 + C9459 * C18966) * C13231 +
            (C24997 * C18965 +
             (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                 C18966) *
                C13232) *
               C30870 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C2118 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C2119 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C2120 -
           ((C10915 * C18966 + C6667 * C18965) * C13232 +
            (C10539 * C18966 + C9243 * C18965) * C13231) *
               C31056) *
              C30765 * C30995 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C2119 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C2118 -
           ((C26741 + C26742) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C2120 +
           ((C9246 * C18965 + C10806 * C18966) * C13231 +
            (C10697 * C18965 + (C4561 * C10687 - C4562 * C10686 -
                                C4561 * C10688 + C30711 * C10689) *
                                   C18966) *
                C13232) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31077 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C31065 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C260 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C31065 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31077 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C31077 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C31065 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C4728 * C18965 + C5251 * C18966) * C13232) *
              C30783 * C30765 * C108 -
          ((C5252 * C18966 + C4731 * C18965) * C13232 +
           (C9244 * C18966 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C18965) *
               C13231) *
              C30783 * C30765 * C109 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C18965 +
            C9247 * C18966) *
               C13231 +
           (C4734 * C18965 + C5255 * C18966) * C13232) *
              C30783 * C30765 * C110 -
          (((C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C18966 +
            C4966 * C18965) *
               C13232 +
           (C9458 * C18966 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C18965) *
               C13231) *
              C30783 * C30765 * C111 +
          (((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
                C18965 +
            (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
                C18966) *
               C13231 +
           ((C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
                C18965 +
            (C4561 * C827 - C4562 * C818 - C4561 * C828 + C30711 * C833) *
                C18966) *
               C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C944 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C945 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C945 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C944 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C944 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C945 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C24702 + C24703) * C13232) *
              C30783 * C1012 -
          ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
              C1013 +
          ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
              C1014 -
          ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
              C1015 +
          ((C25560 + C25559) * C13231 +
           (C5455 * C18965 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C18966) *
               C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C1666 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C1667 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C30765 * C31074 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C1667 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C1666 -
           ((C10697 * C18966 + C6447 * C18965) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C31043) *
              C30765 * C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C1666 -
           ((C25327 + C25328) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C1667 +
           ((C9248 * C18965 + C9249 * C18966) * C13231 +
            (C9612 * C18965 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C18966) *
                C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C1666 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C1667 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C31077 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C1667 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C1666 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C31043) *
              C31065 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C1666 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C1667 +
           ((C25712 + C25711) * C13231 +
            (C5607 * C18965 +
             (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                 C18966) *
                C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C30828) *
              C30742 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C31009 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C30751 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C3096 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C3096) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C30866 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30873 +
            ((C9242 * C18965 + C9243 * C18966) * C13231 +
             (C25707 + C25708) * C13232) *
                C3604) *
               C31009 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30873 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30866 -
            ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C3604) *
               C30828) *
              C2442 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30873 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C30866 -
            ((C26741 + C26742) * C13232 +
             (C9246 * C18966 + C9245 * C18965) * C13231) *
                C3604) *
               C31009 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30866 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) * C30873 +
            ((C26742 + C26741) * C13231 +
             (C6446 * C18965 +
              (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                  C18966) *
                 C13232) *
                C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C31077 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C31065 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C3096 -
            ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) *
                C30870) *
               C31040) *
              C2442 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C31077 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C31065 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C3096 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C30765 * C31083 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C30870 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C3096) *
              C30765 * C31076 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C3096 -
           ((C25327 + C25328) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C30870) *
              C30765 * C31063 +
          (((C9458 * C18965 + C9459 * C18966) * C13231 +
            (C24997 * C18965 +
             (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                 C18966) *
                C13232) *
               C30870 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31085 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31082 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31073 -
           ((C27003 + C27004) * C13232 +
            (C10539 * C18966 + C9243 * C18965) * C13231) *
               C31056) *
              C30765 * C2442 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C31082 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C31085 -
           ((C26741 + C26742) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C31073 +
           ((C9246 * C18965 + C10806 * C18966) * C13231 +
            (C10697 * C18965 + (C4561 * C10687 - C4562 * C10686 -
                                C4561 * C10688 + C30711 * C10689) *
                                   C18966) *
                C13232) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30866 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30873 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C3604) *
              C30765 * C30742 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C30873 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30866 -
           ((C26741 + C26742) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C3604) *
              C30765 * C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30866 -
           ((C25327 + C25328) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C30873 +
           ((C9248 * C18965 + C9249 * C18966) * C13231 +
            (C9612 * C18965 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C18966) *
                C13232) *
               C3604) *
              C30765 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C3096 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C30765 * C31083 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C25325 + C25326) * C13232) *
               C30870 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C3096) *
              C30765 * C31076 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C3096 -
           ((C25327 + C25328) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C30870) *
              C30765 * C31063 +
          (((C9458 * C18965 + C9459 * C18966) * C13231 +
            (C24997 * C18965 +
             (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                 C18966) *
                C13232) *
               C30870 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C3096 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C31077 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C3096) *
               C31065 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C3096 -
            ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) *
                C30870) *
               C31040) *
              C2442 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C3096) *
               C31077 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C3096 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C31065 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31009 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C30828) *
              C556 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C30828 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31009) *
              C557 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C31009 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C30828) *
              C558 +
          (((C24990 + C24998) * C13231 +
            (C4967 * C18965 +
             (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                 C18966) *
                C13232) *
               C30783 * C30828 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C1286 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C1287 +
           ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
               C1288 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
               C31050) *
              C30995 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C1287 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C1286 -
           ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) * C30783 *
               C1288 +
           ((C25844 + C25843) * C13231 +
            (C5720 * C18965 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C18966) *
                C13232) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25324 + C25323) * C13231 +
             (C5250 * C18965 + C5605 * C18966) * C13232) *
                C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C30828) *
              C260 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C31009 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C6446 * C18966 + C5253 * C18965) * C13232 +
             (C25326 + C25325) * C13231) *
                C30870) *
               C30828) *
              C261 +
          (((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                  C18965 +
              C9247 * C18966) *
                 C13231 +
             (C24710 + C24711) * C13232) *
                C31010 -
            ((C25327 + C25328) * C13232 +
             (C9248 * C18966 + C9247 * C18965) * C13231) *
                C30870) *
               C31009 +
           (((C25328 + C25327) * C13231 +
             (C5254 * C18965 +
              (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31010 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C1286 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31010) *
              C1287 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31010 -
           ((C26171 + C26172) * C13232 + (C25710 + C25709) * C13231) * C30870) *
              C1288 +
          (((C26172 + C26171) * C13231 +
            (C5988 * C18965 +
             (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                 C18966) *
                C13232) *
               C30870 -
           ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31077 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C31065 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C260 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C31065 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31077 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C31077 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C31065 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C4728 * C18965 + C5251 * C18966) * C13232) *
              C30783 * C30765 * C108 -
          ((C5252 * C18966 + C4731 * C18965) * C13232 +
           (C9244 * C18966 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C18965) *
               C13231) *
              C30783 * C30765 * C109 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C18965 +
            C9247 * C18966) *
               C13231 +
           (C4734 * C18965 + C5255 * C18966) * C13232) *
              C30783 * C30765 * C110 -
          (((C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C18966 +
            C4966 * C18965) *
               C13232 +
           (C9458 * C18966 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C18965) *
               C13231) *
              C30783 * C30765 * C111 +
          (((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
                C18965 +
            (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
                C18966) *
               C13231 +
           ((C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
                C18965 +
            (C4561 * C827 - C4562 * C818 - C4561 * C828 + C30711 * C833) *
                C18966) *
               C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31078 -
           ((C5604 * C18966 + C5251 * C18965) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31067 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C5604 * C18965 + C6667 * C18966) * C13232) *
               C31043) *
              C30765 * C260 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C5252 * C18965 + C6447 * C18966) * C13232) *
               C31067 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C31078 -
           ((C10697 * C18966 + C6447 * C18965) * C13232 +
            (C9246 * C18966 + C9245 * C18965) * C13231) *
               C31043) *
              C30765 * C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C31078 -
           ((C9612 * C18966 + C5255 * C18965) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C31067 +
           ((C9248 * C18965 + C9249 * C18966) * C13231 +
            (C9612 * C18965 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C18966) *
                C13232) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C944 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C945 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C945 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C944 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C944 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C945 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C24702 + C24703) * C13232) *
              C30783 * C1012 -
          ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
              C1013 +
          ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
              C1014 -
          ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
              C1015 +
          ((C25560 + C25559) * C13231 +
           (C5455 * C18965 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C18966) *
               C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31078 -
           ((C25323 + C25324) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C31067 +
           ((C9242 * C18965 + C9243 * C18966) * C13231 +
            (C25707 + C25708) * C13232) *
               C31043) *
              C944 +
          (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C31067 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C31078 -
           ((C25711 + C25712) * C13232 + (C25708 + C25707) * C13231) * C31043) *
              C945 +
          (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31078 -
           ((C5607 * C18966 + C5606 * C18965) * C13232 +
            (C25710 + C25709) * C13231) *
               C31067 +
           ((C25712 + C25711) * C13231 +
            (C5607 * C18965 +
             (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                 C18966) *
                C13232) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C31010 -
           ((C5604 * C18966 + C5251 * C18965) * C13232 +
            (C9242 * C18966 + C9241 * C18965) * C13231) *
               C30870) *
              C30765 * C556 +
          (((C9244 * C18965 + C9245 * C18966) * C13231 +
            (C5252 * C18965 + C6447 * C18966) * C13232) *
               C30870 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C31010) *
              C30765 * C557 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C31010 -
           ((C9612 * C18966 + C5255 * C18965) * C13232 +
            (C9248 * C18966 + C9247 * C18965) * C13231) *
               C30870) *
              C30765 * C558 +
          (((C9458 * C18965 + C9459 * C18966) * C13231 +
            (C24997 * C18965 +
             (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                 C18966) *
                C13232) *
               C30870 -
           ((C24998 + C24990) * C13232 +
            (C9458 * C18966 +
             (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                 C18965) *
                C13231) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                  C18965 +
              C9241 * C18966) *
                 C13231 +
             (C24702 + C24703) * C13232) *
                C31010 -
            ((C25323 + C25324) * C13232 +
             (C9242 * C18966 + C9241 * C18965) * C13231) *
                C30870) *
               C944 +
           (((C25324 + C25323) * C13231 + (C25709 + C25710) * C13232) * C30870 -
            ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) *
                C31010) *
               C945 +
           (((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C31010 -
            ((C5607 * C18966 + C5606 * C18965) * C13232 +
             (C25710 + C25709) * C13231) *
                C30870) *
               C31040) *
              C30995 +
          ((((C9244 * C18965 + C9245 * C18966) * C13231 +
             (C25325 + C25326) * C13232) *
                C30870 -
            ((C24707 + C24706) * C13232 +
             (C9244 * C18966 +
              (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                  C18965) *
                 C13231) *
                C31010) *
               C944 +
           (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C31010 -
            ((C26039 + C26040) * C13232 + (C25326 + C25325) * C13231) *
                C30870) *
               C945 +
           (((C26040 + C26039) * C13231 +
             (C5878 * C18965 +
              (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                  C18966) *
                 C13232) *
                C30870 -
            ((C25843 + C25844) * C13232 + (C24709 + C24708) * C13231) *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C4728 * C18965 + C5251 * C18966) * C13232) *
              C30783 * C30765 * C108 -
          ((C5252 * C18966 + C4731 * C18965) * C13232 +
           (C9244 * C18966 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C18965) *
               C13231) *
              C30783 * C30765 * C109 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C18965 +
            C9247 * C18966) *
               C13231 +
           (C4734 * C18965 + C5255 * C18966) * C13232) *
              C30783 * C30765 * C110 -
          (((C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C18966 +
            C4966 * C18965) *
               C13232 +
           (C9458 * C18966 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C18965) *
               C13231) *
              C30783 * C30765 * C111 +
          (((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
                C18965 +
            (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
                C18966) *
               C13231 +
           ((C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
                C18965 +
            (C4561 * C827 - C4562 * C818 - C4561 * C828 + C30711 * C833) *
                C18966) *
               C13232) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C31077 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C31065 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C260 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C31065 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C31077 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C31077 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C31065 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C18965 +
             C9241 * C18966) *
                C13231 +
            (C24702 + C24703) * C13232) *
               C30783 * C944 -
           ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
               C945 +
           ((C24705 + C24704) * C13231 +
            (C4730 * C18965 + C5606 * C18966) * C13232) *
               C30783 * C31040) *
              C31074 +
          (((C24706 + C24707) * C13231 + (C24708 + C24709) * C13232) * C30783 *
               C945 -
           ((C24707 + C24706) * C13232 +
            (C9244 * C18966 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C18965) *
                C13231) *
               C30783 * C944 -
           ((C5878 * C18966 + C4733 * C18965) * C13232 +
            (C24709 + C24708) * C13231) *
               C30783 * C31040) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C18965 +
             C9247 * C18966) *
                C13231 +
            (C24710 + C24711) * C13232) *
               C30783 * C944 -
           ((C24712 + C24713) * C13232 + (C24711 + C24710) * C13231) * C30783 *
               C945 +
           ((C24713 + C24712) * C13231 +
            (C4736 * C18965 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C18966) *
                C13232) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C18965 +
            C9241 * C18966) *
               C13231 +
           (C24702 + C24703) * C13232) *
              C30783 * C1012 -
          ((C24704 + C24705) * C13232 + (C24703 + C24702) * C13231) * C30783 *
              C1013 +
          ((C24705 + C24704) * C13231 + (C25557 + C25558) * C13232) * C30783 *
              C1014 -
          ((C25559 + C25560) * C13232 + (C25558 + C25557) * C13231) * C30783 *
              C1015 +
          ((C25560 + C25559) * C13231 +
           (C5455 * C18965 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C18966) *
               C13232) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C30824 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30831 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C2702) *
              C30742 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30831 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C30824 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C2702) *
              C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C30824 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30831 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C2702) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30831 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C2702) *
              C30742 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30831 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C2702) *
              C30751 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30831 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C2702) *
              C2705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C30824 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C30831 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C2702) *
              C30742 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C30831 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C30824 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C2702) *
              C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C30824 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C30831 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C2702) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C30824 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30831 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C2702) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C30824 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30831 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C30824 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30831 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C31010 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C2702) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C30824 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30831 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C31010) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C30824 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C30831 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31010 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C2702) *
              C2442 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C30824 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30831 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C31010) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C2334 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C30828) *
                  C31083 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C30828 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C2334) *
                  C31076 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C2334 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C30828) *
                  C31063 +
              ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
                C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
                C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
                   C30963 * C30951 * C30783 * C30828 -
               (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                   C30963 * C30951 * C30783 * C2334) *
                  C31044) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C31084 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C31080 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C31070 -
               (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                   C30963 * C30951 * C30783 * C31050) *
                  C2442 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C31080 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C31084 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C31070 +
               (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
                C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
                C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
                   C30963 * C30951 * C30783 * C31050) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31078 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C31067 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C31043) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C31067 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31078 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C31043) *
               C30828) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C31067 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31078 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C31043) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31078 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C31067 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C2334 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C31083 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C2334 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C31063 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31084 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31080 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C31070 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C2442 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31080 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31084 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C31070 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31078 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C31067 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C31043) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
               C30828) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C31067 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31078 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C31043) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31078 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C31067 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C2334 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C30828) *
              C31083 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C30828 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C2334 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C30828) *
              C31063 +
          ((C4966 * C8963 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C8964 +
            (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                C8965) *
               C30951 * C30783 * C30828 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C31084 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31080 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31070 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
               C31050) *
              C2442 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31080 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31084 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31070 +
           (C4733 * C8963 + C5878 * C8964 +
            (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                C8965) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31078 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31067 +
            (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 *
                C31043) *
               C2334 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C31067 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31078 -
            (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 *
                C31043) *
               C30828) *
              C2442 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C31067 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31078 -
            (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 *
                C31043) *
               C2334 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31078 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 * C31067 +
            (C6447 * C8963 + C10697 * C8964 +
             (C4561 * C10687 - C4562 * C10686 - C4561 * C10688 +
              C30711 * C10689) *
                 C8965) *
                C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C30742 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30828) *
              C30742 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C30751 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C31010 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C31010) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C30828) *
              C30742 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C2334 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C31010 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C31010) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31080 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31070 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C2442 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31080 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31070 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C31083 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C2334) *
              C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C31063 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C2334 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C31083 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C2334 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C31063 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31084 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31080 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C31070 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C2442 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31080 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31084 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C31070 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C2334 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C30828) *
              C31083 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C30828 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C2334 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C30828) *
              C31063 +
          ((C4966 * C8963 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C8964 +
            (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                C8965) *
               C30951 * C30783 * C30828 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C31084 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31080 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31070 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
               C31050) *
              C2442 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31080 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31084 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31070 +
           (C4733 * C8963 + C5878 * C8964 +
            (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                C8965) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C30824 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30831 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C2702) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C30824 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30831 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C30824 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30831 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C2702) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C30824 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30831 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C3096) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C30824 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C30831 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C3096 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C2702) *
              C30995 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C30824 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30831 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C3096) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30866 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C3604) *
              C30824 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
              C30831 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30866 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30873 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C3604) *
              C2702) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30866 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30873 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C3604) *
              C30824 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30873 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30866 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C3604) *
              C30831 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30866 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30873 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C3604) *
              C2702) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30866 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30873 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C3604) *
              C30824 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30873 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30866 -
           (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 * C3604) *
              C30831 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30866 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30873 +
           (C5605 * C8963 + C6666 * C8964 +
            (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                C8965) *
               C30951 * C3604) *
              C2702) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                 C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                 C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                    C30963 * C30951 * C3096 -
                (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                 C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                 C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                    C30963 * C30951 * C30870) *
                   C2334 +
               ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                 C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                 C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                    C30963 * C30951 * C30870 -
                (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                 C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                 C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                    C30963 * C30951 * C3096) *
                   C30828) *
                  C31074 +
              (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                 C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                 C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                    C30963 * C30951 * C30870 -
                (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                 C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                 C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                    C30963 * C30951 * C3096) *
                   C2334 +
               ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                 C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                 C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                    C30963 * C30951 * C3096 -
                (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                 C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                 C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                    C30963 * C30951 * C30870) *
                   C30828) *
                  C31061 +
              (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                 C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                 C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                    C30963 * C30951 * C3096 -
                (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                 C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                 C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                    C30963 * C30951 * C30870) *
                   C2334 +
               ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                 C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                 C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                    C30963 * C30951 * C30870 -
                (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                 C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                 C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                    C30963 * C30951 * C3096) *
                   C30828) *
                  C31034) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C3096 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C30870) *
                  C31084 +
              ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                   C30963 * C30951 * C30870 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C3096) *
                  C31080 +
              ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C3096 -
               (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                   C30963 * C30951 * C30870) *
                  C31070 +
              ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                   C30963 * C30951 * C30870 -
               (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                   C30963 * C30951 * C3096) *
                  C31050) *
             C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31085 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31082 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31073 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C2334 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C31082 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31085 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31073 +
           (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
            C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
            C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
               C30963 * C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C31074 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C31084 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
              C31080 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C31070 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31085 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31082 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31073 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C2334 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31082 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31085 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31073 +
           (C6669 * C4558 + C6668 * C4559 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C30963 * C4560) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C30828) *
              C31074 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C2334 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C3096 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C3096 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C31084 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
              C31080 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C3096 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
              C31070 +
          ((C5606 * C8963 + C5607 * C8964 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C8965) *
               C30951 * C30870 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31085 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31082 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C31073 -
           (C10540 * C8965 + C10539 * C8964 + C9243 * C8963) * C30951 *
               C31056) *
              C2334 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C31082 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31085 -
           (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 * C31073 +
           (C6667 * C8963 + C10915 * C8964 +
            (C4561 * C10905 - C4562 * C10904 - C4561 * C10906 +
             C30711 * C10907) *
                C8965) *
               C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C30866 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30873 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C3604) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
               C30828) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30873 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C30866 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C3604) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30866 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30873 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C30866 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30873 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C3604) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30873 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C30866 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30873 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C30866 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C3604) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C30866 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30873 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C30866 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30873 +
            (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C3604) *
               C2334 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30873 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30866 -
            (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 * C3604) *
               C30828) *
              C30995 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30873 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C30866 -
            (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 * C3604) *
               C2334 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30866 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 * C30873 +
            (C6447 * C8963 + C10697 * C8964 +
             (C4561 * C10687 - C4562 * C10686 - C4561 * C10688 +
              C30711 * C10689) *
                 C8965) *
                C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C31084 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C3096) *
              C31080 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C3096 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C31070 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31074 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C31061 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C3096 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C31074 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C31084 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
              C31080 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C31070 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C30828) *
              C31074 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C2334 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C3096 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C2334 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C3096 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C31084 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
              C31080 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C3096 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
              C31070 +
          ((C5606 * C8963 + C5607 * C8964 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C8965) *
               C30951 * C30870 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C31009 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C30828) *
                  C556 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C30828 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C31009) *
                  C557 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C31009 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C30828) *
                  C558 +
              ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
                C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
                C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
                   C30963 * C30951 * C30783 * C30828 -
               (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                   C30963 * C30951 * C30783 * C31009) *
                  C31044) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C1286 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C1287 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C1288 -
               (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                   C30963 * C30951 * C30783 * C31050) *
                  C30995 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C1287 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C1286 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C1288 +
               (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
                C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
                C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
                   C30963 * C30951 * C30783 * C31050) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C1666 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C1667 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C31043) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C1667 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C1666 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C1667 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C1666 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C31043) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C1666 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C1667 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31009 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C556 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31009 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C558 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C1286 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1287 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1288 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C30995 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C1287 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C1286 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C1288 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C1666 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C1667 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C31043) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
               C30828) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C1667 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C1666 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C31043) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C1666 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C1667 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C31009 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C30828) *
              C556 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C30828 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C31009 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C30828) *
              C558 +
          ((C4966 * C8963 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C8964 +
            (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                C8965) *
               C30951 * C30783 * C30828 -
           ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
                C8965 +
            (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C1286 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C1287 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C1288 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
               C31050) *
              C30995 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C1287 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C1286 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C1288 +
           (C4733 * C8963 + C5878 * C8964 +
            (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                C8965) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C1666 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1667 +
            (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 *
                C31043) *
               C31009 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C1667 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C1666 -
            ((C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
                 C8965 +
             C6667 * C8964 + C5604 * C8963) *
                C30951 * C31043) *
               C30828) *
              C30995 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C1667 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C1666 -
            ((C4561 * C1860 - C4562 * C1850 - C4561 * C1861 + C30711 * C1868) *
                 C8965 +
             C9246 * C8964 + C9245 * C8963) *
                C30951 * C31043) *
               C31009 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C1666 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 * C1667 +
            (C6447 * C8963 + C10697 * C8964 +
             (C4561 * C10687 - C4562 * C10686 - C4561 * C10688 +
              C30711 * C10689) *
                 C8965) *
                C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                 C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                 C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                    C30963 * C30951 * C31010 -
                (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                 C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                 C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                    C30963 * C30951 * C30870) *
                   C31009 +
               ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                 C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                 C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                    C30963 * C30951 * C30870 -
                (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                 C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                 C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                    C30963 * C30951 * C31010) *
                   C30828) *
                  C260 +
              (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                 C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                 C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                    C30963 * C30951 * C30870 -
                (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                 C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                 C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                    C30963 * C30951 * C31010) *
                   C31009 +
               ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                 C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                 C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                    C30963 * C30951 * C31010 -
                (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                 C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                 C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                    C30963 * C30951 * C30870) *
                   C30828) *
                  C261 +
              (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                 C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                 C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                    C30963 * C30951 * C31010 -
                (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                 C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                 C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                    C30963 * C30951 * C30870) *
                   C31009 +
               ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
                 C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
                 C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                    C30963 * C30951 * C30870 -
                (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                 C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                 C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                    C30963 * C30951 * C31010) *
                   C30828) *
                  C31034) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C31010 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C30870) *
                  C1286 +
              ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                   C30963 * C30951 * C30870 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C31010) *
                  C1287 +
              ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C31010 -
               (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                   C30963 * C30951 * C30870) *
                  C1288 +
              ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
                C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
                C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
                   C30963 * C30951 * C30870 -
               (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
                C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
                C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                   C30963 * C30951 * C31010) *
                  C31050) *
             C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C2118 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C2119 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C2120 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C31009 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C2119 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C2118 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C2120 +
           (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
            C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
            C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
               C30963 * C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 +
             (C4561 * C1547 - C4562 * C1544 - C4561 * C1548 + C30711 * C1553) *
                 C30963 * C4560) *
                C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C260 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            ((C4561 * C1549 - C4562 * C1545 - C4561 * C1550 + C30711 * C1554) *
                 C30963 * C4560 +
             C5259 * C4559 + C5258 * C4558) *
                C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C1286 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
              C1287 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C1288 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C2118 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C2119 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C2120 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C31009 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C2119 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C2118 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C2120 +
           (C6669 * C4558 + C6668 * C4559 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C30963 * C4560) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C30828) *
              C260 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C31009 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            ((C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                 C8965 +
             C6447 * C8964 + C5252 * C8963) *
                C30951 * C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C31010 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31010 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C1286 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
              C1287 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31010 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
              C1288 +
          ((C5606 * C8963 + C5607 * C8964 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C8965) *
               C30951 * C30870 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C2118 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C2119 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C2120 -
           (C10540 * C8965 + C10539 * C8964 + C9243 * C8963) * C30951 *
               C31056) *
              C31009 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C2119 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C2118 -
           (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 * C2120 +
           (C6667 * C8963 + C10915 * C8964 +
            (C4561 * C10905 - C4562 * C10904 - C4561 * C10906 +
             C30711 * C10907) *
                C8965) *
               C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (-0.25 * std::pow(Pi, 2.5) *
             ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
               C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
               C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                  C30963 * C30951 * C30783 * C30765 * C108 -
              (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
               C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
               C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                  C30963 * C30951 * C30783 * C30765 * C109 +
              (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
               C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
               C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                  C30963 * C30951 * C30783 * C30765 * C110 -
              (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
               C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
               C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                  C30963 * C30951 * C30783 * C30765 * C111 +
              (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
               C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
               C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                  C30963 * C30951 * C30783 * C30765 * C112) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C31040) *
                  C260 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C31065 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C31040) *
                  C261 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31034) +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C31078 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C31067 +
               (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                   C30963 * C30951 * C31043) *
                  C30765 * C260 +
              ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                   C30963 * C30951 * C31067 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C31078 -
               (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                   C30963 * C30951 * C31043) *
                  C30765 * C261 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C31078 -
               (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                   C30963 * C30951 * C31067 +
               (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                   C30963 * C30951 * C31043) *
                  C30765 * C31034) -
         0.25 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C944 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C945 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31074 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C945 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C944 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31061 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C944 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C945 +
               (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31034) -
         0.25 * std::pow(Pi, 2.5) *
             ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
               C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
               C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                  C30963 * C30951 * C30783 * C1012 -
              (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
               C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
               C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                  C30963 * C30951 * C30783 * C1013 +
              (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
               C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
               C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                  C30963 * C30951 * C30783 * C1014 -
              (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
               C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
               C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
                  C30963 * C30951 * C30783 * C1015 +
              (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
               C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
               C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
                  C30963 * C30951 * C30783 * C1016) *
             C30737 +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C31078 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C31067 +
               (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                   C30963 * C30951 * C31043) *
                  C944 +
              ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                   C30963 * C30951 * C31067 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C31078 -
               (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                   C30963 * C30951 * C31043) *
                  C945 +
              ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C31078 -
               (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                   C30963 * C30951 * C31067 +
               (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                   C30963 * C30951 * C31043) *
                  C31040) *
             C30737 +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C1666 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C1667 +
               (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                   C30963 * C30951 * C31043) *
                  C30765 * C31074 +
              ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                   C30963 * C30951 * C1667 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C1666 -
               (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
                C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
                C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                   C30963 * C30951 * C31043) *
                  C30765 * C31061 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C1666 -
               (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                   C30963 * C30951 * C1667 +
               (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
                C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
                C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
                   C30963 * C30951 * C31043) *
                  C30765 * C31034) +
         0.5 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C1666 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C1667 +
               (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
                C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
                C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                   C30963 * C30951 * C31043) *
                  C31077 +
              ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                   C30963 * C30951 * C1667 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C1666 -
               (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
                C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
                C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                   C30963 * C30951 * C31043) *
                  C31065 +
              ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C1666 -
               (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                   C30963 * C30951 * C1667 +
               (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
                C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
                C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
                   C30963 * C30951 * C31043) *
                  C31040) *
             C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C1841 -
          (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 + C115 * C428 -
           C116 * C417 - C115 * C429 + C102 * C447 + C113 * C430 - C114 * C418 -
           C113 * C431 + C101 * C448) *
              C30963 * C30951 * C1842 +
          (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 + C115 * C434 -
           C116 * C420 - C115 * C435 + C102 * C450 + C117 * C436 - C118 * C421 -
           C117 * C437 + C103 * C451) *
              C30963 * C30951 * C1843 -
          (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
           C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
           C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
              C30963 * C30951 * C1844 +
          (C113 * C1858 - C114 * C1849 - C113 * C1859 + C101 * C1867 +
           C115 * C1860 - C116 * C1850 - C115 * C1861 + C102 * C1868 +
           C117 * C1862 - C118 * C1851 - C117 * C1863 + C103 * C1869) *
              C30963 * C30951 * C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            (C4561 * C1165 - C4562 * C1154 - C4561 * C1166 + C30711 * C1181) *
                C30963 * C4559 +
            (C4561 * C1173 - C4562 * C1158 - C4561 * C1174 + C30711 * C1185) *
                C30963 * C4560) *
               C31043) *
              C30765 * C260 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C31067 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31078 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31078 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (-0.25 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C944 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C945 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31078 -
           ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                C30963 * C4560 +
            C5610 * C4559 + C5256 * C4558) *
               C31067 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C30765 * C31074 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C1667 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C1666 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C1666 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C31077 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C31065 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C1666 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C1667 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C1841 -
          (C5256 * C4560 + C5257 * C4559 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C30963 * C4558) *
              C1842 +
          ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C30963 * C4558 +
           C5608 * C4559 + C5609 * C4560) *
              C1843 -
          ((C4561 * C6274 - C4562 * C6271 - C4561 * C6275 + C30711 * C6280) *
               C30963 * C4560 +
           (C4561 * C2227 - C4562 * C2224 - C4561 * C2228 + C30711 * C2233) *
               C30963 * C4559 +
           (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
               C30963 * C4558) *
              C1844 +
          ((C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
               C30963 * C4558 +
           (C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
               C30963 * C4559 +
           (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
               C30963 * C4560) *
              C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C8964 +
           (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C8965) *
              C30951 * C30783 * C30765 * C108 -
          ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
               C8965 +
           (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
               C8964 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C8963) *
              C30951 * C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C8963 +
           (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
               C8964 +
           (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
               C8965) *
              C30951 * C30783 * C30765 * C110 -
          ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
               C8965 +
           (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
               C8964 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C8963) *
              C30951 * C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C8963 +
           (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
               C8964 +
           (C4561 * C444 - C4562 * C425 - C4561 * C445 + C30711 * C455) *
               C8965) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C8964 +
            (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C8965) *
               C30951 * C30783 * C31077 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31065 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C260 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31065 -
           ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C8965 +
            (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31077 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C8964 +
            (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C8965) *
               C30951 * C30783 * C31077 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C31065 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31078 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31067 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C30765 * C260 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C31067 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C31078 -
           ((C4561 * C1860 - C4562 * C1850 - C4561 * C1861 + C30711 * C1868) *
                C8965 +
            C9246 * C8964 + C9245 * C8963) *
               C30951 * C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C31078 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C31067 +
           (C9248 * C8963 + C9249 * C8964 +
            (C4561 * C1862 - C4562 * C1851 - C4561 * C1863 + C30711 * C1869) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C944 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C945 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C31074 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C945 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C944 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C944 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C945 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           C9241 * C8964 + C9242 * C8965) *
              C30951 * C30783 * C1012 -
          (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
              C1013 +
          (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
              C1014 -
          (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
              C1015 +
          (C5454 * C8963 + C5988 * C8964 +
           (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
               C8965) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31078 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31067 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C944 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C31067 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31078 -
           ((C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
                C8965 +
            C6667 * C8964 + C5604 * C8963) *
               C30951 * C31043) *
              C945 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31078 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C31067 +
           (C5605 * C8963 + C6666 * C8964 +
            (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                C8965) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C1666 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1667 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31074 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C1667 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C1666 -
           ((C4561 * C1860 - C4562 * C1850 - C4561 * C1861 + C30711 * C1868) *
                C8965 +
            C9246 * C8964 + C9245 * C8963) *
               C30951 * C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C1666 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C1667 +
           (C9248 * C8963 + C9249 * C8964 +
            (C4561 * C1862 - C4562 * C1851 - C4561 * C1863 + C30711 * C1869) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C1666 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1667 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C31077 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C1667 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C1666 -
           ((C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
                C8965 +
            C6667 * C8964 + C5604 * C8963) *
               C30951 * C31043) *
              C31065 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C1666 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C1667 +
           (C5605 * C8963 + C6666 * C8964 +
            (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                C8965) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           C9241 * C8964 + C9242 * C8965) *
              C30951 * C1841 -
          (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1842 +
          (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C1843 -
          (C10540 * C8965 + C10539 * C8964 + C9243 * C8963) * C30951 * C1844 +
          (C10539 * C8963 + C10540 * C8964 +
           (C4561 * C10522 - C4562 * C10519 - C4561 * C10523 +
            C30711 * C10525) *
               C8965) *
              C30951 * C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C31010 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C30870) *
                  C30765 * C556 +
              ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                   C30963 * C30951 * C30870 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C31010) *
                  C30765 * C557 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C31010 -
               (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                   C30963 * C30951 * C30870) *
                  C30765 * C558 +
              ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
                C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
                C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
                   C30963 * C30951 * C30870 -
               (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                   C30963 * C30951 * C31010) *
                  C30765 * C31044) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                 C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                 C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                    C30963 * C30951 * C31010 -
                (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                 C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                 C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                    C30963 * C30951 * C30870) *
                   C944 +
               ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                 C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                 C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                    C30963 * C30951 * C30870 -
                (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                 C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                 C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                    C30963 * C30951 * C31010) *
                   C945 +
               ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                 C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                 C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                    C30963 * C30951 * C31010 -
                (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                 C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                 C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                    C30963 * C30951 * C30870) *
                   C31040) *
                  C30995 +
              (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                 C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                 C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                    C30963 * C30951 * C30870 -
                (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                 C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                 C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                    C30963 * C30951 * C31010) *
                   C944 +
               ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                 C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                 C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                    C30963 * C30951 * C31010 -
                (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                 C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                 C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                    C30963 * C30951 * C30870) *
                   C945 +
               ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
                 C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
                 C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                    C30963 * C30951 * C30870 -
                (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                 C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                 C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                    C30963 * C30951 * C31010) *
                   C31040) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C2118 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C2119 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C2120 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C30765 * C30995 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C2119 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C2118 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C2120 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C30963 * C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C556 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31010 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C558 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C944 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C945 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                 C30963 * C4560 +
             C5610 * C4559 + C5256 * C4558) *
                C30870) *
               C31040) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C944 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C945 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C2118 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C2119 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C2120 -
           ((C4561 * C6274 - C4562 * C6271 - C4561 * C6275 + C30711 * C6280) *
                C30963 * C4560 +
            (C4561 * C2227 - C4562 * C2224 - C4561 * C2228 + C30711 * C2233) *
                C30963 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C30765 * C30995 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C2119 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C2118 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C2120 +
           ((C4561 * C1854 - C4562 * C1847 - C4561 * C1855 + C30711 * C1865) *
                C30963 * C4558 +
            (C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                C30963 * C4559 +
            (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                C30963 * C4560) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31010 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C30765 * C556 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C31010 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
              C30765 * C558 +
          ((C9458 * C8963 + C9459 * C8964 +
            (C4561 * C2123 - C4562 * C2122 - C4561 * C2124 + C30711 * C2125) *
                C8965) *
               C30951 * C30870 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C944 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C945 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31010 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C31040) *
              C30995 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C944 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            ((C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                 C8965 +
             C6447 * C8964 + C5252 * C8963) *
                C30951 * C30870) *
               C945 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C2118 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C2119 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C2120 -
           (C10540 * C8965 + C10539 * C8964 + C9243 * C8963) * C30951 *
               C31056) *
              C30765 * C30995 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C2119 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C2118 -
           (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 * C2120 +
           (C9246 * C8963 + C10806 * C8964 +
            (C4561 * C10796 - C4562 * C10795 - C4561 * C10797 +
             C30711 * C10798) *
                C8965) *
               C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C30765 * C108 -
          (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 + C115 * C130 -
           C116 * C121 - C115 * C131 + C102 * C142 + C113 * C128 - C114 * C120 -
           C113 * C129 + C101 * C141) *
              C30963 * C30951 * C30783 * C30765 * C109 +
          (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 + C115 * C132 -
           C116 * C122 - C115 * C133 + C102 * C143 + C117 * C134 - C118 * C123 -
           C117 * C135 + C103 * C144) *
              C30963 * C30951 * C30783 * C30765 * C110 -
          (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 + C115 * C134 -
           C116 * C123 - C115 * C135 + C102 * C144 + C113 * C132 - C114 * C122 -
           C113 * C133 + C101 * C143) *
              C30963 * C30951 * C30783 * C30765 * C111 +
          (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 + C115 * C136 -
           C116 * C124 - C115 * C137 + C102 * C145 + C117 * C138 - C118 * C125 -
           C117 * C139 + C103 * C146) *
              C30963 * C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C260 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31065 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C31074 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C1667 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C1666 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C1666 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C1667 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C31077 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C1667 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C1666 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C31065 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C1666 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C1667 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C30765 * C31074 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C1667 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C1666 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C1666 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C31077 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C31065 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C1666 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C1667 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C8964 +
           (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C8965) *
              C30951 * C30783 * C30765 * C108 -
          ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
               C8965 +
           (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
               C8964 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C8963) *
              C30951 * C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C8963 +
           (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
               C8964 +
           (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
               C8965) *
              C30951 * C30783 * C30765 * C110 -
          ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
               C8965 +
           (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
               C8964 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C8963) *
              C30951 * C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C8963 +
           (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
               C8964 +
           (C4561 * C444 - C4562 * C425 - C4561 * C445 + C30711 * C455) *
               C8965) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C8964 +
            (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C8965) *
               C30951 * C30783 * C31077 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31065 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C260 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31065 -
           ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C8965 +
            (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31077 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C8964 +
            (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C8965) *
               C30951 * C30783 * C31077 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C31065 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C944 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C945 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C31074 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C945 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C944 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C944 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C945 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           C9241 * C8964 + C9242 * C8965) *
              C30951 * C30783 * C1012 -
          (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
              C1013 +
          (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
              C1014 -
          (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
              C1015 +
          (C5454 * C8963 + C5988 * C8964 +
           (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
               C8965) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C1666 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1667 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31074 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C1667 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C1666 -
           ((C4561 * C1860 - C4562 * C1850 - C4561 * C1861 + C30711 * C1868) *
                C8965 +
            C9246 * C8964 + C9245 * C8963) *
               C30951 * C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C1666 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C1667 +
           (C9248 * C8963 + C9249 * C8964 +
            (C4561 * C1862 - C4562 * C1851 - C4561 * C1863 + C30711 * C1869) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C1666 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C1667 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C31077 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C1667 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C1666 -
           ((C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
                C8965 +
            C6667 * C8964 + C5604 * C8963) *
               C30951 * C31043) *
              C31065 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C1666 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C1667 +
           (C5605 * C8963 + C6666 * C8964 +
            (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                C8965) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C30742 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30828) *
              C30742 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C30751 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C3096 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C3096) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C30828) *
              C30742 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C31009 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C3096 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C3096) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C30866 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30873 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C3604) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
               C30828) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30873 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C30866 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C3604) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30866 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30873 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C30866 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30873 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C3604) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30873 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C30866 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C3604) *
               C30828) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30873 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C30866 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C3604) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C30866 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30873 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C30866 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30873 +
            (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C3604) *
               C31009 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30873 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30866 -
            (C10915 * C8965 + C6667 * C8964 + C5604 * C8963) * C30951 * C3604) *
               C30828) *
              C2442 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30873 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C30866 -
            (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 * C3604) *
               C31009 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30866 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 * C30873 +
            (C6447 * C8963 + C10697 * C8964 +
             (C4561 * C10687 - C4562 * C10686 - C4561 * C10688 +
              C30711 * C10689) *
                 C8965) *
                C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C3096 -
               (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                   C30963 * C30951 * C30870) *
                  C30765 * C31083 +
              ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                   C30963 * C30951 * C30870 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C3096) *
                  C30765 * C31076 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C3096 -
               (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
                C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
                C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                   C30963 * C30951 * C30870) *
                  C30765 * C31063 +
              ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
                C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
                C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
                   C30963 * C30951 * C30870 -
               (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
                C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
                C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                   C30963 * C30951 * C3096) *
                  C30765 * C31044) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                 C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                 C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                    C30963 * C30951 * C3096 -
                (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
                 C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
                 C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                    C30963 * C30951 * C30870) *
                   C31077 +
               ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
                 C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
                 C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                    C30963 * C30951 * C30870 -
                (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                 C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                 C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                    C30963 * C30951 * C3096) *
                   C31065 +
               ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                 C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                 C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                    C30963 * C30951 * C3096 -
                (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
                 C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
                 C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                    C30963 * C30951 * C30870) *
                   C31040) *
                  C2442 +
              (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
                 C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
                 C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                    C30963 * C30951 * C30870 -
                (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                 C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                 C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                    C30963 * C30951 * C3096) *
                   C31077 +
               ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                 C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                 C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                    C30963 * C30951 * C3096 -
                (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
                 C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
                 C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                    C30963 * C30951 * C30870) *
                   C31065 +
               ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
                 C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
                 C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                    C30963 * C30951 * C30870 -
                (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                 C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                 C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                    C30963 * C30951 * C3096) *
                   C31040) *
                  C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31085 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31082 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31073 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C30765 * C2442 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C31082 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31085 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31073 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C30963 * C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31083 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C3096 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31063 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31077 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C31065 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C31040) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31077 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C31065 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31085 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31082 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31073 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C30765 * C2442 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C31082 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31085 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31073 +
           ((C4561 * C1854 - C4562 * C1847 - C4561 * C1855 + C30711 * C1865) *
                C30963 * C4558 +
            (C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                C30963 * C4559 +
            (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                C30963 * C4560) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C3096 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C30765 * C31083 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C3096 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
              C30765 * C31063 +
          ((C9458 * C8963 + C9459 * C8964 +
            (C4561 * C2123 - C4562 * C2122 - C4561 * C2124 + C30711 * C2125) *
                C8965) *
               C30951 * C30870 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C31077 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C31065 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C3096 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C31040) *
              C2442 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C31077 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C31065 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31085 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31082 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C31073 -
           (C10540 * C8965 + C10539 * C8964 + C9243 * C8963) * C30951 *
               C31056) *
              C30765 * C2442 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C31082 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C31085 -
           (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 * C31073 +
           (C9246 * C8963 + C10806 * C8964 +
            (C4561 * C10796 - C4562 * C10795 - C4561 * C10797 +
             C30711 * C10798) *
                C8965) *
               C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30866 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C3604) *
              C30765 * C30742 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30873 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30866 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C3604) *
              C30765 * C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30866 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C3604) *
              C30765 * C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30866 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30873 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C3604) *
              C30765 * C30742 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30873 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30866 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C3604) *
              C30765 * C30751 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30866 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30873 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C3604) *
              C30765 * C2705)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30866 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30873 +
           (C9242 * C8963 + C9243 * C8964 + C10539 * C8965) * C30951 * C3604) *
              C30765 * C30742 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30873 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30866 -
           (C10806 * C8965 + C9246 * C8964 + C9245 * C8963) * C30951 * C3604) *
              C30765 * C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30866 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30873 +
           (C9248 * C8963 + C9249 * C8964 +
            (C4561 * C1862 - C4562 * C1851 - C4561 * C1863 + C30711 * C1869) *
                C8965) *
               C30951 * C3604) *
              C30765 * C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31077 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C31065 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C31077 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C31065 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C31083 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C3096) *
              C30765 * C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C3096 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C31063 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31083 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C3096 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31063 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31077 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C31065 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C31040) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31077 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C31065 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C3096 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C30765 * C31083 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C3096 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
              C30765 * C31063 +
          ((C9458 * C8963 + C9459 * C8964 +
            (C4561 * C2123 - C4562 * C2122 - C4561 * C2124 + C30711 * C2125) *
                C8965) *
               C30951 * C30870 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C3096 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C31077 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C3096) *
               C31065 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C3096 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C31040) *
              C2442 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C3096) *
               C31077 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C3096 -
            (C10697 * C8965 + C6447 * C8964 + C5252 * C8963) * C30951 *
                C30870) *
               C31065 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C1287 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C1288 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C30995 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C1287 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C1288 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C556 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31009) *
              C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C558 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31009 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C556 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31009 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C558 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C1286 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1287 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1288 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C30995 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C1287 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C1286 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C1288 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C31009 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C30828) *
              C556 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C30828 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C31009 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C30828) *
              C558 +
          ((C4966 * C8963 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C8964 +
            (C4561 * C2017 - C4562 * C2016 - C4561 * C2018 + C30711 * C2019) *
                C8965) *
               C30951 * C30783 * C30828 -
           ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
                C8965 +
            (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C1286 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C1287 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C1288 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
               C31050) *
              C30995 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C1287 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C1286 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C1288 +
           (C4733 * C8963 + C5878 * C8964 +
            (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                C8965) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C1286 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31010) *
              C1287 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31010 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C1288 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30828) *
              C260 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C261 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C31010 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 +
             (C4561 * C1547 - C4562 * C1544 - C4561 * C1548 + C30711 * C1553) *
                 C30963 * C4560) *
                C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C260 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            ((C4561 * C1549 - C4562 * C1545 - C4561 * C1550 + C30711 * C1554) *
                 C30963 * C4560 +
             C5259 * C4559 + C5258 * C4558) *
                C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C1286 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
              C1287 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C1288 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C30828) *
              C260 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C31009 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            ((C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                 C8965 +
             C6447 * C8964 + C5252 * C8963) *
                C30951 * C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C8963 +
             C9247 * C8964 + C9248 * C8965) *
                C30951 * C31010 -
            (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
               C31009 +
           ((C5255 * C8963 + C9612 * C8964 +
             (C4561 * C2231 - C4562 * C2226 - C4561 * C2232 + C30711 * C2235) *
                 C8965) *
                C30951 * C30870 -
            (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31010 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C1286 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
              C1287 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31010 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
              C1288 +
          ((C5606 * C8963 + C5607 * C8964 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C8965) *
               C30951 * C30870 -
           (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
               C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
               C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                  C30963 * C30951 * C30783 * C30765 * C108 -
              (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
               C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
               C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                  C30963 * C30951 * C30783 * C30765 * C109 +
              (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
               C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
               C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                  C30963 * C30951 * C30783 * C30765 * C110 -
              (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
               C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
               C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                  C30963 * C30951 * C30783 * C30765 * C111 +
              (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
               C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
               C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                  C30963 * C30951 * C30783 * C30765 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C31040) *
                  C260 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C31065 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C31040) *
                  C261 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C260 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C31067 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31078 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31078 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C31067 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C944 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C31067 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31078 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C945 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31078 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C31067 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            (C4561 * C1165 - C4562 * C1154 - C4561 * C1166 + C30711 * C1181) *
                C30963 * C4559 +
            (C4561 * C1173 - C4562 * C1158 - C4561 * C1174 + C30711 * C1185) *
                C30963 * C4560) *
               C31043) *
              C30765 * C260 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C31067 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31078 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31078 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C944 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C945 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31078 -
           ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                C30963 * C4560 +
            C5610 * C4559 + C5256 * C4558) *
               C31067 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C8964 +
           (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C8965) *
              C30951 * C30783 * C30765 * C108 -
          ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
               C8965 +
           (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
               C8964 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C8963) *
              C30951 * C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C8963 +
           (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
               C8964 +
           (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
               C8965) *
              C30951 * C30783 * C30765 * C110 -
          ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
               C8965 +
           (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
               C8964 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C8963) *
              C30951 * C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C8963 +
           (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
               C8964 +
           (C4561 * C444 - C4562 * C425 - C4561 * C445 + C30711 * C455) *
               C8965) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C8964 +
            (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C8965) *
               C30951 * C30783 * C31077 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31065 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C260 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31065 -
           ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C8965 +
            (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31077 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C8964 +
            (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C8965) *
               C30951 * C30783 * C31077 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C31065 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31078 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31067 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C30765 * C260 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C31067 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C31078 -
           ((C4561 * C1860 - C4562 * C1850 - C4561 * C1861 + C30711 * C1868) *
                C8965 +
            C9246 * C8964 + C9245 * C8963) *
               C30951 * C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C31078 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C31067 +
           (C9248 * C8963 + C9249 * C8964 +
            (C4561 * C1862 - C4562 * C1851 - C4561 * C1863 + C30711 * C1869) *
                C8965) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C944 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C945 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C31074 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C945 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C944 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C944 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C945 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           C9241 * C8964 + C9242 * C8965) *
              C30951 * C30783 * C1012 -
          (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
              C1013 +
          (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
              C1014 -
          (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
              C1015 +
          (C5454 * C8963 + C5988 * C8964 +
           (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
               C8965) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31078 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C31067 +
           (C9242 * C8963 + C9243 * C8964 +
            (C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
                C8965) *
               C30951 * C31043) *
              C944 +
          ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C31067 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31078 -
           ((C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
                C8965 +
            C6667 * C8964 + C5604 * C8963) *
               C30951 * C31043) *
              C945 +
          ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31078 -
           (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C31067 +
           (C5605 * C8963 + C6666 * C8964 +
            (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
                C8965) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C944 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C945 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C31010 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C944 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C945 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C556 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31010) *
              C30765 * C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31010 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C558 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C556 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31010 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C558 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C944 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C945 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                 C30963 * C4560 +
             C5610 * C4559 + C5256 * C4558) *
                C30870) *
               C31040) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C944 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C945 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C31010 -
           (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
              C30765 * C556 +
          ((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C31010 -
           (C9249 * C8965 + C9248 * C8964 + C9247 * C8963) * C30951 * C30870) *
              C30765 * C558 +
          ((C9458 * C8963 + C9459 * C8964 +
            (C4561 * C2123 - C4562 * C2122 - C4561 * C2124 + C30711 * C2125) *
                C8965) *
               C30951 * C30870 -
           (C9459 * C8965 + C9458 * C8964 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C8963) *
               C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C8963 +
             C9241 * C8964 + C9242 * C8965) *
                C30951 * C31010 -
            (C9243 * C8965 + C9242 * C8964 + C9241 * C8963) * C30951 * C30870) *
               C944 +
           ((C5251 * C8963 + C5604 * C8964 + C6667 * C8965) * C30951 * C30870 -
            (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C31010) *
               C945 +
           ((C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C31010 -
            (C6666 * C8965 + C5605 * C8964 + C5250 * C8963) * C30951 * C30870) *
               C31040) *
              C30995 +
          (((C9244 * C8963 + C9245 * C8964 + C9246 * C8965) * C30951 * C30870 -
            (C9245 * C8965 + C9244 * C8964 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C8963) *
                C30951 * C31010) *
               C944 +
           ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C31010 -
            ((C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                 C8965 +
             C6447 * C8964 + C5252 * C8963) *
                C30951 * C30870) *
               C945 +
           ((C5253 * C8963 + C6446 * C8964 +
             (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                 C8965) *
                C30951 * C30870 -
            (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C260 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31065 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C30765 * C108 -
          (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 + C115 * C130 -
           C116 * C121 - C115 * C131 + C102 * C142 + C113 * C128 - C114 * C120 -
           C113 * C129 + C101 * C141) *
              C30963 * C30951 * C30783 * C30765 * C109 +
          (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 + C115 * C132 -
           C116 * C122 - C115 * C133 + C102 * C143 + C117 * C134 - C118 * C123 -
           C117 * C135 + C103 * C144) *
              C30963 * C30951 * C30783 * C30765 * C110 -
          (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 + C115 * C134 -
           C116 * C123 - C115 * C135 + C102 * C144 + C113 * C132 - C114 * C122 -
           C113 * C133 + C101 * C143) *
              C30963 * C30951 * C30783 * C30765 * C111 +
          (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 + C115 * C136 -
           C116 * C124 - C115 * C137 + C102 * C145 + C117 * C138 - C118 * C125 -
           C117 * C139 + C103 * C146) *
              C30963 * C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C8964 +
           (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C8965) *
              C30951 * C30783 * C30765 * C108 -
          ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
               C8965 +
           (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
               C8964 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C8963) *
              C30951 * C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C8963 +
           (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
               C8964 +
           (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
               C8965) *
              C30951 * C30783 * C30765 * C110 -
          ((C4561 * C440 - C4562 * C423 - C4561 * C441 + C30711 * C453) *
               C8965 +
           (C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
               C8964 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C8963) *
              C30951 * C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C8963 +
           (C4561 * C442 - C4562 * C424 - C4561 * C443 + C30711 * C454) *
               C8964 +
           (C4561 * C444 - C4562 * C425 - C4561 * C445 + C30711 * C455) *
               C8965) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C8964 +
            (C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C8965) *
               C30951 * C30783 * C31077 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C31065 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C260 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C31065 -
           ((C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C8965 +
            (C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C31077 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C8964 +
            (C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C8965) *
               C30951 * C30783 * C31077 -
           ((C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C8965 +
            C5255 * C8964 + C4734 * C8963) *
               C30951 * C30783 * C31065 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C8963 +
            C9241 * C8964 + C9242 * C8965) *
               C30951 * C30783 * C944 -
           (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
               C945 +
           (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
               C31040) *
              C31074 +
          ((C4731 * C8963 + C5252 * C8964 + C6447 * C8965) * C30951 * C30783 *
               C945 -
           (C9245 * C8965 + C9244 * C8964 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C8963) *
               C30951 * C30783 * C944 -
           (C6446 * C8965 + C5253 * C8964 + C4732 * C8963) * C30951 * C30783 *
               C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C8963 +
            C9247 * C8964 + C9248 * C8965) *
               C30951 * C30783 * C944 -
           (C9612 * C8965 + C5255 * C8964 + C4734 * C8963) * C30951 * C30783 *
               C945 +
           (C4735 * C8963 + C5254 * C8964 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C8965) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C8963 +
           C9241 * C8964 + C9242 * C8965) *
              C30951 * C30783 * C1012 -
          (C5604 * C8965 + C5251 * C8964 + C4728 * C8963) * C30951 * C30783 *
              C1013 +
          (C4729 * C8963 + C5250 * C8964 + C5605 * C8965) * C30951 * C30783 *
              C1014 -
          (C5607 * C8965 + C5606 * C8964 + C4730 * C8963) * C30951 * C30783 *
              C1015 +
          (C5454 * C8963 + C5988 * C8964 +
           (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
               C8965) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C30824 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C30831 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C2702) *
              C30742 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C30831 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C30824 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C2702) *
              C30751 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C30824 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C30831 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C2702) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C30824 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C30831 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C31010 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C2702) *
              C2442 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C30824 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30831 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C31010) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C31084 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C31080 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31070 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C30783 * C31050) *
              C2442 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C31080 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31084 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31070 +
           ((C14711 + C14710) * C18965 +
            (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 + C13229 * C1554 +
             C13235 * C1551 - C13236 * C1546 - C13235 * C1552 +
             C13230 * C1555) *
                C18966) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C2334 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C30828) *
              C31083 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C30828 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C2334) *
              C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C2334 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C30828) *
              C31063 +
          (((C13756 + C13757) * C18965 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C18966) *
               C30951 * C30783 * C30828 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31078 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C31067 +
            ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
                C31043) *
               C2334 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C31067 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31078 -
            ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
                C31043) *
               C30828) *
              C2442 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C31067 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31078 -
            ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
                C31043) *
               C2334 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31078 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C31067 +
            ((C15645 + C15644) * C18965 +
             (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 +
              C13229 * C2234 + C13235 * C2231 - C13236 * C2226 -
              C13235 * C2232 + C13230 * C2235) *
                 C18966) *
                C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C30828) *
              C30742 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C2334 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C30751 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C31010 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C31010) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C2334 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C30828) *
              C31083 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C30828 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C2334) *
              C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C2334 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C30828) *
              C31063 +
          (((C13756 + C13757) * C18965 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C18966) *
               C30951 * C30783 * C30828 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C31084 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C31080 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31070 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C30783 * C31050) *
              C2442 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C31080 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31084 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31070 +
           ((C14711 + C14710) * C18965 +
            (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 + C13229 * C1554 +
             C13235 * C1551 - C13236 * C1546 - C13235 * C1552 +
             C13230 * C1555) *
                C18966) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C30824 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C30831 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C3096 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C2702) *
              C30995 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C30824 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30831 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C3096) *
               C2702) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30866 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30873 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C3604) *
              C30824 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C30873 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30866 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C3604) *
              C30831 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30866 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C30873 +
           ((C14567 + C14566) * C18965 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C18966) *
               C30951 * C3604) *
              C2702) *
         C30737) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C3096 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C31084 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C30870 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C3096) *
              C31080 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C3096 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C30870) *
              C31070 +
          (((C15063 + C15062) * C18965 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C18966) *
               C30951 * C30870 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C30828) *
              C31074 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C2334 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C31061 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C3096 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31085 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31082 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C31073 -
           ((C21040 + C21041) * C18966 + (C21039 + C21038) * C18965) * C30951 *
               C31056) *
              C2334 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C31082 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C31085 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C31073 +
           ((C15919 + C15918) * C18965 +
            (C13233 * C6276 - C13234 * C6272 - C13233 * C6277 + C13229 * C6281 +
             C13235 * C10687 - C13236 * C10686 - C13235 * C10688 +
             C13230 * C10689) *
                C18966) *
               C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C30866 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30873 +
            ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
                C3604) *
               C2334 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30873 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C30866 -
            ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
                C3604) *
               C30828) *
              C30995 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30873 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C30866 -
            ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
                C3604) *
               C2334 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C30866 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30873 +
            ((C15645 + C15644) * C18965 +
             (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 +
              C13229 * C2234 + C13235 * C2231 - C13236 * C2226 -
              C13235 * C2232 + C13230 * C2235) *
                 C18966) *
                C30951 * C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C30828) *
              C31074 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C2334 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C31061 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C3096 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C2334 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C3096 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C31084 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C30870 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C3096) *
              C31080 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C3096 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C30870) *
              C31070 +
          (((C15063 + C15062) * C18965 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C18966) *
               C30951 * C30870 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C1286 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C1287 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C1288 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C30783 * C31050) *
              C30995 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C1287 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C1286 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C1288 +
           ((C14711 + C14710) * C18965 +
            (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 + C13229 * C1554 +
             C13235 * C1551 - C13236 * C1546 - C13235 * C1552 +
             C13230 * C1555) *
                C18966) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C31009 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C30828) *
              C556 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C30828 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31009) *
              C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C31009 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C30828) *
              C558 +
          (((C13756 + C13757) * C18965 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C18966) *
               C30951 * C30783 * C30828 -
           ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
             C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
                C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C1666 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C1667 +
            ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
                C31043) *
               C31009 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C1667 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C1666 -
            ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
                C31043) *
               C30828) *
              C30995 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C1667 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C1666 -
            ((C13235 * C1852 - C13236 * C1846 - C13235 * C1853 +
              C13230 * C1864 + C13233 * C1854 - C13234 * C1847 -
              C13233 * C1855 + C13229 * C1865) *
                 C18966 +
             (C19339 + C19338) * C18965) *
                C30951 * C31043) *
               C31009 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C1666 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C1667 +
            ((C15645 + C15644) * C18965 +
             (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 +
              C13229 * C2234 + C13235 * C2231 - C13236 * C2226 -
              C13235 * C2232 + C13230 * C2235) *
                 C18966) *
                C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31010 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C1286 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C30870 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C31010) *
              C1287 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C31010 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C30870) *
              C1288 +
          (((C15063 + C15062) * C18965 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C18966) *
               C30951 * C30870 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C30828) *
              C260 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C31009 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C261 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C31010 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C2118 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C2119 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C2120 -
           ((C21040 + C21041) * C18966 + (C21039 + C21038) * C18965) * C30951 *
               C31056) *
              C31009 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C2119 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C2118 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C2120 +
           ((C15919 + C15918) * C18965 +
            (C13233 * C6276 - C13234 * C6272 - C13233 * C6277 + C13229 * C6281 +
             C13235 * C10687 - C13236 * C10686 - C13235 * C10688 +
             C13230 * C10689) *
                C18966) *
               C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
                C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                   C18965 +
               (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
                C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
                   C18966) *
                  C30951 * C30783 * C30765 * C108 -
              ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
                C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
                   C18966 +
               (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
                C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                   C18965) *
                  C30951 * C30783 * C30765 * C109 +
              ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
                C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                   C18965 +
               (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
                C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
                   C18966) *
                  C30951 * C30783 * C30765 * C110 -
              ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
                C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
                   C18966 +
               (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
                C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                   C18965) *
                  C30951 * C30783 * C30765 * C111 +
              ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
                C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
                   C18965 +
               (C13233 * C442 - C13234 * C424 - C13233 * C443 + C13229 * C454 +
                C13235 * C665 - C13236 * C664 - C13235 * C666 + C13230 * C667) *
                   C18966) *
                  C30951 * C30783 * C30765 * C112) +
         std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
             ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
                 C13235 * C128 - C13236 * C120 - C13235 * C129 +
                 C13230 * C141) *
                    C18965 +
                (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
                 C13235 * C428 - C13236 * C417 - C13235 * C429 +
                 C13230 * C447) *
                    C18966) *
                   C30951 * C30783 * C31077 -
               ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) *
                   C30951 * C30783 * C31065 +
               ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) *
                   C30951 * C30783 * C31040) *
                  C260 +
              (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) *
                   C30951 * C30783 * C31065 -
               ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
                 C13233 * C428 - C13234 * C417 - C13233 * C429 +
                 C13229 * C447) *
                    C18966 +
                (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
                 C13233 * C128 - C13234 * C120 - C13233 * C129 +
                 C13229 * C141) *
                    C18965) *
                   C30951 * C30783 * C31077 -
               ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) *
                   C30951 * C30783 * C31040) *
                  C261 +
              (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
                 C13235 * C132 - C13236 * C122 - C13235 * C133 +
                 C13230 * C143) *
                    C18965 +
                (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
                 C13235 * C438 - C13236 * C422 - C13235 * C439 +
                 C13230 * C452) *
                    C18966) *
                   C30951 * C30783 * C31077 -
               ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) *
                   C30951 * C30783 * C31065 +
               ((C13467 + C13466) * C18965 +
                (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 +
                 C13229 * C1182 + C13235 * C1443 - C13236 * C1442 -
                 C13235 * C1444 + C13230 * C1445) *
                    C18966) *
                   C30951 * C30783 * C31040) *
                  C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31078 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31067 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C30765 * C260 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C31067 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C31078 -
           ((C13235 * C1852 - C13236 * C1846 - C13235 * C1853 + C13230 * C1864 +
             C13233 * C1854 - C13234 * C1847 - C13233 * C1855 +
             C13229 * C1865) *
                C18966 +
            (C19339 + C19338) * C18965) *
               C30951 * C31043) *
              C30765 * C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C31078 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C31067 +
           ((C19343 + C19342) * C18965 +
            (C13233 * C1852 - C13234 * C1846 - C13233 * C1853 + C13229 * C1864 +
             C13235 * C2123 - C13236 * C2122 - C13235 * C2124 +
             C13230 * C2125) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C944 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C945 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C945 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C944 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C944 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C945 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C19332 + C19333) * C18966) *
              C30951 * C30783 * C1012 -
          ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
              C30783 * C1013 +
          ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
              C30783 * C1014 -
          ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
              C30783 * C1015 +
          ((C14379 + C14378) * C18965 +
           (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
            C13235 * C5868 - C13236 * C5867 - C13235 * C5869 + C13230 * C5870) *
               C18966) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31078 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31067 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C944 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C31067 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C31078 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C31043) *
              C945 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C31078 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C31067 +
           ((C14567 + C14566) * C18965 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C18966) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C1666 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C1667 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31074 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C1667 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C1666 -
           ((C13235 * C1852 - C13236 * C1846 - C13235 * C1853 + C13230 * C1864 +
             C13233 * C1854 - C13234 * C1847 - C13233 * C1855 +
             C13229 * C1865) *
                C18966 +
            (C19339 + C19338) * C18965) *
               C30951 * C31043) *
              C30765 * C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C1666 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C1667 +
           ((C19343 + C19342) * C18965 +
            (C13233 * C1852 - C13234 * C1846 - C13233 * C1853 + C13229 * C1864 +
             C13235 * C2123 - C13236 * C2122 - C13235 * C2124 +
             C13230 * C2125) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C1666 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C1667 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C31077 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C1667 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C1666 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C31043) *
              C31065 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C1666 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C1667 +
           ((C14567 + C14566) * C18965 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C18966) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C19332 + C19333) * C18966) *
              C30951 * C1841 -
          ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
              C1842 +
          ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
              C1843 -
          ((C21040 + C21041) * C18966 + (C21039 + C21038) * C18965) * C30951 *
              C1844 +
          ((C21041 + C21040) * C18965 +
           (C13233 * C10520 - C13234 * C10518 - C13233 * C10521 +
            C13229 * C10524 + C13235 * C10796 - C13236 * C10795 -
            C13235 * C10797 + C13230 * C10798) *
               C18966) *
              C30951 * C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C944 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C945 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C31010 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C31040) *
              C30995 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C944 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C945 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31010 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C30765 * C556 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C30870 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C31010) *
              C30765 * C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C31010 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C30870) *
              C30765 * C558 +
          (((C19616 + C19617) * C18965 +
            (C13233 * C440 - C13234 * C423 - C13233 * C441 + C13229 * C453 +
             C13235 * C444 - C13236 * C425 - C13235 * C445 + C13230 * C455) *
                C18966) *
               C30951 * C30870 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C2118 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C2119 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C2120 -
           ((C21040 + C21041) * C18966 + (C21039 + C21038) * C18965) * C30951 *
               C31056) *
              C30765 * C30995 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C2119 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C2118 -
           ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
               C2120 +
           ((C21379 + C21378) * C18965 +
            (C13233 * C1860 - C13234 * C1850 - C13233 * C1861 + C13229 * C1868 +
             C13235 * C1862 - C13236 * C1851 - C13235 * C1863 +
             C13230 * C1869) *
                C18966) *
               C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
             C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C31065 -
           ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
             C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
                C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31077 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
             C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
            C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
               C18966) *
              C30951 * C30783 * C30765 * C108 -
          ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
            C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
               C18966 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C18965) *
              C30951 * C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C18965 +
           (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
            C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
               C18966) *
              C30951 * C30783 * C30765 * C110 -
          ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
            C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
               C18966 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C18965) *
              C30951 * C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C18965 +
           (C13233 * C442 - C13234 * C424 - C13233 * C443 + C13229 * C454 +
            C13235 * C665 - C13236 * C664 - C13235 * C666 + C13230 * C667) *
               C18966) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C944 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C945 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C945 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C944 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C944 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C945 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C19332 + C19333) * C18966) *
              C30951 * C30783 * C1012 -
          ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
              C30783 * C1013 +
          ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
              C30783 * C1014 -
          ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
              C30783 * C1015 +
          ((C14379 + C14378) * C18965 +
           (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
            C13235 * C5868 - C13236 * C5867 - C13235 * C5869 + C13230 * C5870) *
               C18966) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C1666 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C1667 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31074 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C1667 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C1666 -
           ((C13235 * C1852 - C13236 * C1846 - C13235 * C1853 + C13230 * C1864 +
             C13233 * C1854 - C13234 * C1847 - C13233 * C1855 +
             C13229 * C1865) *
                C18966 +
            (C19339 + C19338) * C18965) *
               C30951 * C31043) *
              C30765 * C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C1666 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C1667 +
           ((C19343 + C19342) * C18965 +
            (C13233 * C1852 - C13234 * C1846 - C13233 * C1853 + C13229 * C1864 +
             C13235 * C2123 - C13236 * C2122 - C13235 * C2124 +
             C13230 * C2125) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C1666 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C1667 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C31077 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C1667 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C1666 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C31043) *
              C31065 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C1666 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C1667 +
           ((C14567 + C14566) * C18965 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C18966) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C30828) *
              C30742 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C31009 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C30751 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C3096 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C3096) *
               C30828) *
              C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C30866 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30873 +
            ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
                C3604) *
               C31009 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30873 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C30866 -
            ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
                C3604) *
               C30828) *
              C2442 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30873 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C30866 -
            ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
                C3604) *
               C31009 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C30866 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30873 +
            ((C15645 + C15644) * C18965 +
             (C13233 * C2229 - C13234 * C2225 - C13233 * C2230 +
              C13229 * C2234 + C13235 * C2231 - C13236 * C2226 -
              C13235 * C2232 + C13230 * C2235) *
                 C18966) *
                C30951 * C3604) *
               C30828) *
              C30748)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C31077 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C31065 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C3096 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C31040) *
              C2442 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C31077 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C31065 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C3096 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C30765 * C31083 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C30870 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C3096) *
              C30765 * C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C3096 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C30870) *
              C30765 * C31063 +
          (((C19616 + C19617) * C18965 +
            (C13233 * C440 - C13234 * C423 - C13233 * C441 + C13229 * C453 +
             C13235 * C444 - C13236 * C425 - C13235 * C445 + C13230 * C455) *
                C18966) *
               C30951 * C30870 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31085 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31082 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C31073 -
           ((C21040 + C21041) * C18966 + (C21039 + C21038) * C18965) * C30951 *
               C31056) *
              C30765 * C2442 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C31082 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C31085 -
           ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
               C31073 +
           ((C21379 + C21378) * C18965 +
            (C13233 * C1860 - C13234 * C1850 - C13233 * C1861 + C13229 * C1868 +
             C13235 * C1862 - C13236 * C1851 - C13235 * C1863 +
             C13230 * C1869) *
                C18966) *
               C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(27.) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30866 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30873 +
           ((C19335 + C19334) * C18965 + (C21038 + C21039) * C18966) * C30951 *
               C3604) *
              C30765 * C30742 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C30873 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30866 -
           ((C21378 + C21379) * C18966 + (C19339 + C19338) * C18965) * C30951 *
               C3604) *
              C30765 * C30751 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30866 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C30873 +
           ((C19343 + C19342) * C18965 +
            (C13233 * C1852 - C13234 * C1846 - C13233 * C1853 + C13229 * C1864 +
             C13235 * C2123 - C13236 * C2122 - C13235 * C2124 +
             C13230 * C2125) *
                C18966) *
               C30951 * C3604) *
              C30765 * C2705)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C3096 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C30765 * C31083 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C30870 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C3096) *
              C30765 * C31076 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C3096 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C30870) *
              C30765 * C31063 +
          (((C19616 + C19617) * C18965 +
            (C13233 * C440 - C13234 * C423 - C13233 * C441 + C13229 * C453 +
             C13235 * C444 - C13236 * C425 - C13235 * C445 + C13230 * C455) *
                C18966) *
               C30951 * C30870 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C3096 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C31077 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C3096) *
               C31065 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C3096 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C31040) *
              C2442 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C3096) *
               C31077 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C3096 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C31065 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C31009 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C30828) *
              C556 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C30828 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31009) *
              C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C31009 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C30828) *
              C558 +
          (((C13756 + C13757) * C18965 +
            (C13233 * C825 - C13234 * C817 - C13233 * C826 + C13229 * C832 +
             C13235 * C827 - C13236 * C818 - C13235 * C828 + C13230 * C833) *
                C18966) *
               C30951 * C30783 * C30828 -
           ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
             C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
                C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C1286 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C1287 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C1288 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C30783 * C31050) *
              C30995 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C1287 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C1286 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C1288 +
           ((C14711 + C14710) * C18965 +
            (C13233 * C1549 - C13234 * C1545 - C13233 * C1550 + C13229 * C1554 +
             C13235 * C1551 - C13236 * C1546 - C13235 * C1552 +
             C13230 * C1555) *
                C18966) *
               C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C30828) *
              C260 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C31009 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C30828) *
              C261 +
          ((((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
              C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                 C18965 +
             (C19340 + C19341) * C18966) *
                C30951 * C31010 -
            ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
                C30870) *
               C31009 +
           (((C14123 + C14122) * C18965 +
             (C13233 * C1161 - C13234 * C1152 - C13233 * C1162 +
              C13229 * C1179 + C13235 * C2017 - C13236 * C2016 -
              C13235 * C2018 + C13230 * C2019) *
                 C18966) *
                C30951 * C30870 -
            ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
                C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31010 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C1286 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C30870 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C31010) *
              C1287 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C31010 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C30870) *
              C1288 +
          (((C15063 + C15062) * C18965 +
            (C13233 * C5570 - C13234 * C5567 - C13233 * C5571 + C13229 * C5576 +
             C13235 * C6430 - C13236 * C6429 - C13235 * C6431 +
             C13230 * C6432) *
                C18966) *
               C30951 * C30870 -
           ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
               C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
             C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C31065 -
           ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
             C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
                C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31077 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
             C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
            C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
               C18966) *
              C30951 * C30783 * C30765 * C108 -
          ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
            C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
               C18966 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C18965) *
              C30951 * C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C18965 +
           (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
            C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
               C18966) *
              C30951 * C30783 * C30765 * C110 -
          ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
            C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
               C18966 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C18965) *
              C30951 * C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C18965 +
           (C13233 * C442 - C13234 * C424 - C13233 * C443 + C13229 * C454 +
            C13235 * C665 - C13236 * C664 - C13235 * C666 + C13230 * C667) *
               C18966) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31078 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31067 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C30765 * C260 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C31067 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C31078 -
           ((C13235 * C1852 - C13236 * C1846 - C13235 * C1853 + C13230 * C1864 +
             C13233 * C1854 - C13234 * C1847 - C13233 * C1855 +
             C13229 * C1865) *
                C18966 +
            (C19339 + C19338) * C18965) *
               C30951 * C31043) *
              C30765 * C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C31078 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C31067 +
           ((C19343 + C19342) * C18965 +
            (C13233 * C1852 - C13234 * C1846 - C13233 * C1853 + C13229 * C1864 +
             C13235 * C2123 - C13236 * C2122 - C13235 * C2124 +
             C13230 * C2125) *
                C18966) *
               C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C944 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C945 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C945 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C944 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C944 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C945 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C19332 + C19333) * C18966) *
              C30951 * C30783 * C1012 -
          ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
              C30783 * C1013 +
          ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
              C30783 * C1014 -
          ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
              C30783 * C1015 +
          ((C14379 + C14378) * C18965 +
           (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
            C13235 * C5868 - C13236 * C5867 - C13235 * C5869 + C13230 * C5870) *
               C18966) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31078 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C31067 +
           ((C19335 + C19334) * C18965 +
            (C13233 * C1856 - C13234 * C1848 - C13233 * C1857 + C13229 * C1866 +
             C13235 * C1854 - C13236 * C1847 - C13235 * C1855 +
             C13230 * C1865) *
                C18966) *
               C30951 * C31043) *
              C944 +
          (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
               C31067 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C31078 -
           ((C15918 + C15919) * C18966 + (C14563 + C14562) * C18965) * C30951 *
               C31043) *
              C945 +
          (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C31078 -
           ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
               C31067 +
           ((C14567 + C14566) * C18965 +
            (C13233 * C6274 - C13234 * C6271 - C13233 * C6275 + C13229 * C6280 +
             C13235 * C6548 - C13236 * C6547 - C13235 * C6549 +
             C13230 * C6550) *
                C18966) *
               C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C31010 -
           ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
               C30870) *
              C30765 * C556 +
          (((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
               C30870 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C31010) *
              C30765 * C557 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C31010 -
           ((C19342 + C19343) * C18966 + (C19341 + C19340) * C18965) * C30951 *
               C30870) *
              C30765 * C558 +
          (((C19616 + C19617) * C18965 +
            (C13233 * C440 - C13234 * C423 - C13233 * C441 + C13229 * C453 +
             C13235 * C444 - C13236 * C425 - C13235 * C445 + C13230 * C455) *
                C18966) *
               C30951 * C30870 -
           ((C19617 + C19616) * C18966 +
            (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
             C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
                C18965) *
               C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
              C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                 C18965 +
             (C19332 + C19333) * C18966) *
                C30951 * C31010 -
            ((C19334 + C19335) * C18966 + (C19333 + C19332) * C18965) * C30951 *
                C30870) *
               C944 +
           (((C14119 + C14118) * C18965 + (C14562 + C14563) * C18966) * C30951 *
                C30870 -
            ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
                C31010) *
               C945 +
           (((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
                C31010 -
            ((C14566 + C14567) * C18966 + (C14565 + C14564) * C18965) * C30951 *
                C30870) *
               C31040) *
              C30995 +
          ((((C19336 + C19337) * C18965 + (C19338 + C19339) * C18966) * C30951 *
                C30870 -
            ((C19337 + C19336) * C18966 +
             (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
              C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                 C18965) *
                C30951 * C31010) *
               C944 +
           (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
                C31010 -
            ((C15644 + C15645) * C18966 + (C14121 + C14120) * C18965) * C30951 *
                C30870) *
               C945 +
           (((C14919 + C14918) * C18965 +
             (C13233 * C1175 - C13234 * C1159 - C13233 * C1176 +
              C13229 * C1186 + C13235 * C1177 - C13236 * C1160 -
              C13235 * C1178 + C13230 * C1187) *
                 C18966) *
                C30951 * C30870 -
            ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
                C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
            C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
               C18966) *
              C30951 * C30783 * C30765 * C108 -
          ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
            C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
               C18966 +
           (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
            C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
               C18965) *
              C30951 * C30783 * C30765 * C109 +
          ((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
            C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
               C18965 +
           (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
            C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
               C18966) *
              C30951 * C30783 * C30765 * C110 -
          ((C13235 * C442 - C13236 * C424 - C13235 * C443 + C13230 * C454 +
            C13233 * C438 - C13234 * C422 - C13233 * C439 + C13229 * C452) *
               C18966 +
           (C13235 * C134 - C13236 * C123 - C13235 * C135 + C13230 * C144 +
            C13233 * C132 - C13234 * C122 - C13233 * C133 + C13229 * C143) *
               C18965) *
              C30951 * C30783 * C30765 * C111 +
          ((C13233 * C134 - C13234 * C123 - C13233 * C135 + C13229 * C144 +
            C13235 * C136 - C13236 * C124 - C13235 * C137 + C13230 * C145) *
               C18965 +
           (C13233 * C442 - C13234 * C424 - C13233 * C443 + C13229 * C454 +
            C13235 * C665 - C13236 * C664 - C13235 * C666 + C13230 * C667) *
               C18966) *
              C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C13233 * C430 - C13234 * C418 - C13233 * C431 + C13229 * C448 +
             C13235 * C428 - C13236 * C417 - C13235 * C429 + C13230 * C447) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C260 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C31065 -
           ((C13235 * C426 - C13236 * C416 - C13235 * C427 + C13230 * C446 +
             C13233 * C428 - C13234 * C417 - C13233 * C429 + C13229 * C447) *
                C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C31077 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C261 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C13233 * C426 - C13234 * C416 - C13233 * C427 + C13229 * C446 +
             C13235 * C438 - C13236 * C422 - C13235 * C439 + C13230 * C452) *
                C18966) *
               C30951 * C30783 * C31077 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C31065 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
             C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
                C18965 +
            (C19332 + C19333) * C18966) *
               C30951 * C30783 * C944 -
           ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
               C30783 * C945 +
           ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
               C30783 * C31040) *
              C31074 +
          (((C13460 + C13461) * C18965 + (C14120 + C14121) * C18966) * C30951 *
               C30783 * C945 -
           ((C19337 + C19336) * C18966 +
            (C13235 * C130 - C13236 * C121 - C13235 * C131 + C13230 * C142 +
             C13233 * C128 - C13234 * C120 - C13233 * C129 + C13229 * C141) *
                C18965) *
               C30951 * C30783 * C944 -
           ((C14918 + C14919) * C18966 + (C13463 + C13462) * C18965) * C30951 *
               C30783 * C31040) *
              C31061 +
          (((C13233 * C130 - C13234 * C121 - C13233 * C131 + C13229 * C142 +
             C13235 * C132 - C13236 * C122 - C13235 * C133 + C13230 * C143) *
                C18965 +
            (C19340 + C19341) * C18966) *
               C30951 * C30783 * C944 -
           ((C14122 + C14123) * C18966 + (C13465 + C13464) * C18965) * C30951 *
               C30783 * C945 +
           ((C13467 + C13466) * C18965 +
            (C13233 * C1167 - C13234 * C1155 - C13233 * C1168 + C13229 * C1182 +
             C13235 * C1443 - C13236 * C1442 - C13235 * C1444 +
             C13230 * C1445) *
                C18966) *
               C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C13233 * C126 - C13234 * C119 - C13233 * C127 + C13229 * C140 +
            C13235 * C128 - C13236 * C120 - C13235 * C129 + C13230 * C141) *
               C18965 +
           (C19332 + C19333) * C18966) *
              C30951 * C30783 * C1012 -
          ((C14118 + C14119) * C18966 + (C13457 + C13456) * C18965) * C30951 *
              C30783 * C1013 +
          ((C13459 + C13458) * C18965 + (C14564 + C14565) * C18966) * C30951 *
              C30783 * C1014 -
          ((C15062 + C15063) * C18966 + (C14377 + C14376) * C18965) * C30951 *
              C30783 * C1015 +
          ((C14379 + C14378) * C18965 +
           (C13233 * C5572 - C13234 * C5568 - C13233 * C5573 + C13229 * C5577 +
            C13235 * C5868 - C13236 * C5867 - C13235 * C5869 + C13230 * C5870) *
               C18966) *
              C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30831 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C2702) *
              C30742 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30831 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C2702) *
              C30751 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C30824 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30831 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C2702) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C30824 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30831 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C2702) *
              C30742 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30831 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C30824 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C2702) *
              C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C30824 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30831 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C2702) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C30824 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30831 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C31010 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C2702) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C30824 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30831 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C31010) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C30824 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30831 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C2702) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C30824 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30831 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31080 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31070 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C2442 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31080 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31070 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C31083 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C2334) *
              C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C31063 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31078 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C31067 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C31043) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C31067 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31078 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C31043) *
               C30828) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C31067 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31078 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C31043) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31078 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C31067 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C2334 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C31083 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C2334 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C31063 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31084 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31080 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C31070 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C2442 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31080 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31084 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C31070 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31078 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C31067 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C31043) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
               C30828) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C31067 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31078 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C31043) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31078 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C31067 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30828) *
              C30742 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C30751 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C31010 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C31010) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C30742 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C31083 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C2334) *
              C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C2334 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C31063 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31080 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31070 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C2442 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31080 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31084 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31070 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C2334 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C31083 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C2334 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C31063 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C2334) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31084 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31080 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C31070 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C2442 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31080 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31084 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C31070 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C30824 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30831 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C2702) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C30824 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30831 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C3096) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C30824 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30831 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C2702) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C30824 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30831 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C2702) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30866 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30873 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C3604) *
              C30824 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30873 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30866 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C3604) *
              C30831 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30866 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30873 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C3604) *
              C2702) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30866 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C3604) *
              C30824 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
              C30831 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30866 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30873 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C3604) *
              C2702) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C31084 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C3096) *
              C31080 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C3096 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C31070 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31074 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C31061 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C3096 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31085 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31082 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31073 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C2334 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C31082 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31085 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31073 +
           (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
            C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
            C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
               C30963 * C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C31074 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C31084 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
              C31080 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C31070 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31085 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31082 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31073 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C2334 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31082 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31085 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31073 +
           (C6669 * C4558 + C6668 * C4559 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C30963 * C4560) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C30866 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30873 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C3604) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30873 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C30866 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30873 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C30866 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C3604) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C30866 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30873 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C30866 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30873 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C3604) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
               C30828) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30873 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C30866 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C3604) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30866 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30873 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31074 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C2334 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C31061 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C3096 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C2334 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C31084 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C3096) *
              C31080 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C3096 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C31070 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C31074 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C2334 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C31061 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C2334 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C31084 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
              C31080 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C31070 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C3096) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C1287 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C1288 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C30995 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C1287 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C1288 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C556 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31009) *
              C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C558 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C1666 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C1667 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C31043) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C1667 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C1666 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C1667 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C1666 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C31043) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C1666 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C1667 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31009 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C556 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31009 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C558 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C1286 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1287 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1288 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C30995 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C1287 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C1286 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C1288 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C1666 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C1667 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C31043) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
               C30828) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C1667 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C1666 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C31043) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C1666 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C1667 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C31043) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C1286 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31010) *
              C1287 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31010 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C1288 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30828) *
              C260 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C261 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C31010 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C2118 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C2119 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C2120 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C31009 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C2119 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C2118 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C2120 +
           (C113 * C2227 - C114 * C2224 - C113 * C2228 + C101 * C2233 +
            C115 * C2229 - C116 * C2225 - C115 * C2230 + C102 * C2234 +
            C117 * C2231 - C118 * C2226 - C117 * C2232 + C103 * C2235) *
               C30963 * C30951 * C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 +
             (C4561 * C1547 - C4562 * C1544 - C4561 * C1548 + C30711 * C1553) *
                 C30963 * C4560) *
                C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C260 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            ((C4561 * C1549 - C4562 * C1545 - C4561 * C1550 + C30711 * C1554) *
                 C30963 * C4560 +
             C5259 * C4559 + C5258 * C4558) *
                C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C1286 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
              C1287 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C1288 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C2118 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C2119 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C2120 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C31009 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C2119 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C2118 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C2120 +
           (C6669 * C4558 + C6668 * C4559 +
            (C4561 * C6650 - C4562 * C6649 - C4561 * C6651 + C30711 * C6652) *
                C30963 * C4560) *
               C31056) *
              C30828) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
               C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
               C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                  C30963 * C30951 * C30783 * C30765 * C108 -
              (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
               C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
               C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                  C30963 * C30951 * C30783 * C30765 * C109 +
              (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
               C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
               C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                  C30963 * C30951 * C30783 * C30765 * C110 -
              (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
               C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
               C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
                  C30963 * C30951 * C30783 * C30765 * C111 +
              (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 +
               C115 * C136 - C116 * C124 - C115 * C137 + C102 * C145 +
               C117 * C138 - C118 * C125 - C117 * C139 + C103 * C146) *
                  C30963 * C30951 * C30783 * C30765 * C112) +
         std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
             (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
                C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
                C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
                C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
                C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
                C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
                C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                   C30963 * C30951 * C30783 * C31040) *
                  C260 +
              ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
                C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
                C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                   C30963 * C30951 * C30783 * C31065 -
               (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
                C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
                C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
                C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
                C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                   C30963 * C30951 * C30783 * C31040) *
                  C261 +
              ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
                C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
                C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                   C30963 * C30951 * C30783 * C31077 -
               (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
                C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
                C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                   C30963 * C30951 * C30783 * C31065 +
               (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
                C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
                C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
                   C30963 * C30951 * C30783 * C31040) *
                  C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C260 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C31067 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31078 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31078 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C31067 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C944 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C31067 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31078 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C945 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31078 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C31067 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C31074 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C1667 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C1666 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C1666 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C1667 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C31077 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C1667 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C1666 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C31065 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C1666 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C1667 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C1841 -
          (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 + C115 * C428 -
           C116 * C417 - C115 * C429 + C102 * C447 + C113 * C430 - C114 * C418 -
           C113 * C431 + C101 * C448) *
              C30963 * C30951 * C1842 +
          (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 + C115 * C434 -
           C116 * C420 - C115 * C435 + C102 * C450 + C117 * C436 - C118 * C421 -
           C117 * C437 + C103 * C451) *
              C30963 * C30951 * C1843 -
          (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
           C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
           C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
              C30963 * C30951 * C1844 +
          (C113 * C1858 - C114 * C1849 - C113 * C1859 + C101 * C1867 +
           C115 * C1860 - C116 * C1850 - C115 * C1861 + C102 * C1868 +
           C117 * C1862 - C118 * C1851 - C117 * C1863 + C103 * C1869) *
              C30963 * C30951 * C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            (C4561 * C1165 - C4562 * C1154 - C4561 * C1166 + C30711 * C1181) *
                C30963 * C4559 +
            (C4561 * C1173 - C4562 * C1158 - C4561 * C1174 + C30711 * C1185) *
                C30963 * C4560) *
               C31043) *
              C30765 * C260 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C31067 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31078 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31078 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.046875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C944 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C945 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31078 -
           ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                C30963 * C4560 +
            C5610 * C4559 + C5256 * C4558) *
               C31067 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C30765 * C31074 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C1667 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C1666 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C1666 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C31077 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C31065 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C1666 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C1667 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C1841 -
          (C5256 * C4560 + C5257 * C4559 +
           (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
               C30963 * C4558) *
              C1842 +
          ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
               C30963 * C4558 +
           C5608 * C4559 + C5609 * C4560) *
              C1843 -
          ((C4561 * C6274 - C4562 * C6271 - C4561 * C6275 + C30711 * C6280) *
               C30963 * C4560 +
           (C4561 * C2227 - C4562 * C2224 - C4561 * C2228 + C30711 * C2233) *
               C30963 * C4559 +
           (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
               C30963 * C4558) *
              C1844 +
          ((C4561 * C1858 - C4562 * C1849 - C4561 * C1859 + C30711 * C1867) *
               C30963 * C4558 +
           (C4561 * C6276 - C4562 * C6272 - C4561 * C6277 + C30711 * C6281) *
               C30963 * C4559 +
           (C4561 * C6278 - C4562 * C6273 - C4561 * C6279 + C30711 * C6282) *
               C30963 * C4560) *
              C1845) *
         C30765 * C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C944 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C945 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C31010 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C944 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C945 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C556 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31010) *
              C30765 * C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31010 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C558 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C2118 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C2119 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C2120 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C30765 * C30995 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C2119 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C2118 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C2120 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C30963 * C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C556 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31010 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C558 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C944 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C945 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                 C30963 * C4560 +
             C5610 * C4559 + C5256 * C4558) *
                C30870) *
               C31040) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C944 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C945 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C2118 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C2119 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C2120 -
           ((C4561 * C6274 - C4562 * C6271 - C4561 * C6275 + C30711 * C6280) *
                C30963 * C4560 +
            (C4561 * C2227 - C4562 * C2224 - C4561 * C2228 + C30711 * C2233) *
                C30963 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C30765 * C30995 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C2119 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C2118 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C2120 +
           ((C4561 * C1854 - C4562 * C1847 - C4561 * C1855 + C30711 * C1865) *
                C30963 * C4558 +
            (C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                C30963 * C4559 +
            (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                C30963 * C4560) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C260 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31065 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C30765 * C108 -
          (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 + C115 * C130 -
           C116 * C121 - C115 * C131 + C102 * C142 + C113 * C128 - C114 * C120 -
           C113 * C129 + C101 * C141) *
              C30963 * C30951 * C30783 * C30765 * C109 +
          (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 + C115 * C132 -
           C116 * C122 - C115 * C133 + C102 * C143 + C117 * C134 - C118 * C123 -
           C117 * C135 + C103 * C144) *
              C30963 * C30951 * C30783 * C30765 * C110 -
          (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 + C115 * C134 -
           C116 * C123 - C115 * C135 + C102 * C144 + C113 * C132 - C114 * C122 -
           C113 * C133 + C101 * C143) *
              C30963 * C30951 * C30783 * C30765 * C111 +
          (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 + C115 * C136 -
           C116 * C124 - C115 * C137 + C102 * C145 + C117 * C138 - C118 * C125 -
           C117 * C139 + C103 * C146) *
              C30963 * C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C31074 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C1667 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C1666 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C1666 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C1667 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C1666 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C1667 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C31077 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C1667 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C1666 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C31065 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C1666 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C1667 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C30765 * C31074 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C1667 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C1666 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C1666 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C1666 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C1667 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C31077 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C1667 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C1666 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C31065 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C1666 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C1667 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C30828) *
              C30742 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C30751 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C3096 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C3096) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C30828) *
              C30742 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C30828) *
              C30751 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C3096 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C3096) *
               C30828) *
              C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C30866 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30873 +
            (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
             C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
             C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
                C30963 * C30951 * C3604) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30873 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C30866 -
            (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
             C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
             C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
                C30963 * C30951 * C3604) *
               C30828) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30873 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C30866 -
            (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
             C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
             C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
                C30963 * C30951 * C3604) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C30866 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30873 +
            (C113 * C1163 - C114 * C1153 - C113 * C1164 + C101 * C1180 +
             C115 * C1161 - C116 * C1152 - C115 * C1162 + C102 * C1179 +
             C117 * C2017 - C118 * C2016 - C117 * C2018 + C103 * C2019) *
                C30963 * C30951 * C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C30866 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30873 +
            ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                 C30963 * C4558 +
             C5608 * C4559 + C5609 * C4560) *
                C3604) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30873 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30866 -
            (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C3604) *
               C30828) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30873 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C30866 -
            (C6448 * C4560 + C6449 * C4559 +
             (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                 C30963 * C4558) *
                C3604) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30866 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30873 +
            (C6449 * C4558 + C6448 * C4559 +
             (C4561 * C6430 - C4562 * C6429 - C4561 * C6431 + C30711 * C6432) *
                 C30963 * C4560) *
                C3604) *
               C30828) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31077 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C31065 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C31077 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C31065 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C31083 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C3096) *
              C30765 * C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C3096 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C31063 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31085 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31082 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31073 -
           (C117 * C1852 - C118 * C1846 - C117 * C1853 + C103 * C1864 +
            C115 * C1854 - C116 * C1847 - C115 * C1855 + C102 * C1865 +
            C113 * C1856 - C114 * C1848 - C113 * C1857 + C101 * C1866) *
               C30963 * C30951 * C31056) *
              C30765 * C2442 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C31082 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31085 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31073 +
           (C113 * C1854 - C114 * C1847 - C113 * C1855 + C101 * C1865 +
            C115 * C1852 - C116 * C1846 - C115 * C1853 + C102 * C1864 +
            C117 * C2123 - C118 * C2122 - C117 * C2124 + C103 * C2125) *
               C30963 * C30951 * C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31083 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C3096 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31063 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31077 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C31065 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C31040) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31077 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C31065 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31085 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31082 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31073 -
           (C6668 * C4560 + C6669 * C4559 +
            (C4561 * C1856 - C4562 * C1848 - C4561 * C1857 + C30711 * C1866) *
                C30963 * C4558) *
               C31056) *
              C30765 * C2442 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C31082 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31085 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31073 +
           ((C4561 * C1854 - C4562 * C1847 - C4561 * C1855 + C30711 * C1865) *
                C30963 * C4558 +
            (C4561 * C2229 - C4562 * C2225 - C4561 * C2230 + C30711 * C2234) *
                C30963 * C4559 +
            (C4561 * C6548 - C4562 * C6547 - C4561 * C6549 + C30711 * C6550) *
                C30963 * C4560) *
               C31056) *
              C30765 * C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30866 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30873 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C3604) *
              C30765 * C30742 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30873 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30866 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C3604) *
              C30765 * C30751 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30866 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30873 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C3604) *
              C30765 * C2705)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(6.75) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30866 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C3604) *
              C30765 * C30742 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30873 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30866 -
           (C6448 * C4560 + C6449 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C3604) *
              C30765 * C30751 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30866 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30873 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C3604) *
              C30765 * C2705)) /
            (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C3096 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C31083 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C3096) *
              C30765 * C31076 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C3096 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C31063 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C3096 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31077 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C3096) *
               C31065 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C3096 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C2442 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C3096) *
               C31077 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C3096 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C31065 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C3096 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31083 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            C5258 * C4559 + C5259 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31076 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C3096 -
           (C5260 * C4560 + C5261 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C31063 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C3096) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C3096 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31077 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C3096) *
               C31065 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C3096 -
            (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
               C31040) *
              C2442 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C3096) *
               C31077 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C3096 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C31065 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C3096) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C30828) *
              C556 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31009) *
              C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31009 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C30828) *
              C558 +
          ((C113 * C285 - C114 * C269 - C113 * C286 + C101 * C299 +
            C115 * C289 - C116 * C271 - C115 * C290 + C102 * C301 +
            C117 * C561 - C118 * C560 - C117 * C562 + C103 * C563) *
               C30963 * C30951 * C30783 * C30828 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C1287 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C1288 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C30783 * C31050) *
              C30995 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C1287 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C1286 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C1288 +
           (C113 * C1026 - C114 * C1019 - C113 * C1027 + C101 * C1037 +
            C115 * C1024 - C116 * C1018 - C115 * C1025 + C102 * C1036 +
            C117 * C1293 - C118 * C1292 - C117 * C1294 + C103 * C1295) *
               C30963 * C30951 * C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31009 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C30828) *
              C556 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C30828 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31009) *
              C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31009 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C30828) *
              C558 +
          ((C4968 * C4558 + C4969 * C4559 +
            (C4561 * C1293 - C4562 * C1292 - C4561 * C1294 + C30711 * C1295) *
                C30963 * C4560) *
               C30783 * C30828 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C30783 * C31009) *
              C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C1286 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1287 +
           (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1288 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C31050) *
              C30995 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C1287 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C1286 -
           (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C30783 * C1288 +
           (C4742 * C4558 + C5721 * C4559 +
            (C4561 * C5710 - C4562 * C5709 - C4561 * C5711 + C30711 * C5712) *
                C30963 * C4560) *
               C30783 * C31050) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C30828) *
              C260 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C31009 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C30828) *
              C261 +
          (((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
             C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
             C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
                C30963 * C30951 * C31010 -
            (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
             C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
             C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
                C30963 * C30951 * C30870) *
               C31009 +
           ((C113 * C823 - C114 * C816 - C113 * C824 + C101 * C831 +
             C115 * C825 - C116 * C817 - C115 * C826 + C102 * C832 +
             C117 * C827 - C118 * C818 - C117 * C828 + C103 * C833) *
                C30963 * C30951 * C30870 -
            (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
             C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
             C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
                C30963 * C30951 * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C1286 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C30870 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31010) *
              C1287 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31010 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C30870) *
              C1288 +
          ((C113 * C1547 - C114 * C1544 - C113 * C1548 + C101 * C1553 +
            C115 * C1549 - C116 * C1545 - C115 * C1550 + C102 * C1554 +
            C117 * C1551 - C118 * C1546 - C117 * C1552 + C103 * C1555) *
               C30963 * C30951 * C30870 -
           (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
            C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
            C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
               C30963 * C30951 * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5257 * C4558 + C5256 * C4559 +
             (C4561 * C1547 - C4562 * C1544 - C4561 * C1548 + C30711 * C1553) *
                 C30963 * C4560) *
                C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C30828) *
              C260 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C31009 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            ((C4561 * C1549 - C4562 * C1545 - C4561 * C1550 + C30711 * C1554) *
                 C30963 * C4560 +
             C5259 * C4559 + C5258 * C4558) *
                C30870) *
               C30828) *
              C261 +
          ((((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                 C30963 * C4558 +
             C4743 * C4559 + C4744 * C4560) *
                C31010 -
            (C5260 * C4560 + C5261 * C4559 +
             (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                 C30963 * C4558) *
                C30870) *
               C31009 +
           ((C5261 * C4558 + C5260 * C4559 +
             (C4561 * C1551 - C4562 * C1546 - C4561 * C1552 + C30711 * C1555) *
                 C30963 * C4560) *
                C30870 -
            (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C31010) *
               C30828) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C1286 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
              C1287 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
           (C5989 * C4560 + C5610 * C4559 + C5256 * C4558) * C30870) *
              C1288 +
          ((C5610 * C4558 + C5989 * C4559 +
            (C4561 * C5978 - C4562 * C5977 - C4561 * C5979 + C30711 * C5980) *
                C30963 * C4560) *
               C30870 -
           (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C31010) *
              C31050) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C260 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31065 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C30765 * C108 -
          (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 + C115 * C130 -
           C116 * C121 - C115 * C131 + C102 * C142 + C113 * C128 - C114 * C120 -
           C113 * C129 + C101 * C141) *
              C30963 * C30951 * C30783 * C30765 * C109 +
          (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 + C115 * C132 -
           C116 * C122 - C115 * C133 + C102 * C143 + C117 * C134 - C118 * C123 -
           C117 * C135 + C103 * C144) *
              C30963 * C30951 * C30783 * C30765 * C110 -
          (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 + C115 * C134 -
           C116 * C123 - C115 * C135 + C102 * C144 + C113 * C132 - C114 * C122 -
           C113 * C133 + C101 * C143) *
              C30963 * C30951 * C30783 * C30765 * C111 +
          (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 + C115 * C136 -
           C116 * C124 - C115 * C137 + C102 * C145 + C117 * C138 - C118 * C125 -
           C117 * C139 + C103 * C146) *
              C30963 * C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C30765 * C260 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C31067 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31078 -
           (C117 * C440 - C118 * C423 - C117 * C441 + C103 * C453 +
            C115 * C436 - C116 * C421 - C115 * C437 + C102 * C451 +
            C113 * C434 - C114 * C420 - C113 * C435 + C101 * C450) *
               C30963 * C30951 * C31043) *
              C30765 * C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31078 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C31067 +
           (C113 * C436 - C114 * C421 - C113 * C437 + C101 * C451 +
            C115 * C440 - C116 * C423 - C115 * C441 + C102 * C453 +
            C117 * C444 - C118 * C425 - C117 * C445 + C103 * C455) *
               C30963 * C30951 * C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31078 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C31067 +
           (C113 * C432 - C114 * C419 - C113 * C433 + C101 * C449 +
            C115 * C434 - C116 * C420 - C115 * C435 + C102 * C450 +
            C117 * C436 - C118 * C421 - C117 * C437 + C103 * C451) *
               C30963 * C30951 * C31043) *
              C944 +
          ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
            C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
            C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
               C30963 * C30951 * C31067 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C31078 -
           (C117 * C1161 - C118 * C1152 - C117 * C1162 + C103 * C1179 +
            C115 * C1163 - C116 * C1153 - C115 * C1164 + C102 * C1180 +
            C113 * C1165 - C114 * C1154 - C113 * C1166 + C101 * C1181) *
               C30963 * C30951 * C31043) *
              C945 +
          ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C31078 -
           (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
            C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
            C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
               C30963 * C30951 * C31067 +
           (C113 * C1173 - C114 * C1158 - C113 * C1174 + C101 * C1185 +
            C115 * C1175 - C116 * C1159 - C115 * C1176 + C102 * C1186 +
            C117 * C1177 - C118 * C1160 - C117 * C1178 + C103 * C1187) *
               C30963 * C30951 * C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            (C4561 * C1165 - C4562 * C1154 - C4561 * C1166 + C30711 * C1181) *
                C30963 * C4559 +
            (C4561 * C1173 - C4562 * C1158 - C4561 * C1174 + C30711 * C1185) *
                C30963 * C4560) *
               C31043) *
              C30765 * C260 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C31067 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31078 -
           ((C4561 * C1175 - C4562 * C1159 - C4561 * C1176 + C30711 * C1186) *
                C30963 * C4560 +
            (C4561 * C1163 - C4562 * C1153 - C4561 * C1164 + C30711 * C1180) *
                C30963 * C4559 +
            (C4561 * C434 - C4562 * C420 - C4561 * C435 + C30711 * C450) *
                C30963 * C4558) *
               C31043) *
              C30765 * C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31078 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C436 - C4562 * C421 - C4561 * C437 + C30711 * C451) *
                C30963 * C4558 +
            (C4561 * C1161 - C4562 * C1152 - C4561 * C1162 + C30711 * C1179) *
                C30963 * C4559 +
            (C4561 * C1177 - C4562 * C1160 - C4561 * C1178 + C30711 * C1187) *
                C30963 * C4560) *
               C31043) *
              C30765 * C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.140625) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31078 -
           (C5256 * C4560 + C5257 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C31067 +
           ((C4561 * C432 - C4562 * C419 - C4561 * C433 + C30711 * C449) *
                C30963 * C4558 +
            C5608 * C4559 + C5609 * C4560) *
               C31043) *
              C944 +
          ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C31067 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31078 -
           (C5611 * C4560 + C5609 * C4559 + C5608 * C4558) * C31043) *
              C945 +
          ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31078 -
           ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                C30963 * C4560 +
            C5610 * C4559 + C5256 * C4558) *
               C31067 +
           (C5609 * C4558 + C5611 * C4559 +
            (C4561 * C5574 - C4562 * C5569 - C4561 * C5575 + C30711 * C5578) *
                C30963 * C4560) *
               C31043) *
              C31040) *
         C30737) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C31010 -
           (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
            C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
            C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
               C30963 * C30951 * C30870) *
              C30765 * C556 +
          ((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
            C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
            C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
               C30963 * C30951 * C30870 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C31010) *
              C30765 * C557 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C31010 -
           (C117 * C442 - C118 * C424 - C117 * C443 + C103 * C454 +
            C115 * C438 - C116 * C422 - C115 * C439 + C102 * C452 +
            C113 * C426 - C114 * C416 - C113 * C427 + C101 * C446) *
               C30963 * C30951 * C30870) *
              C30765 * C558 +
          ((C113 * C438 - C114 * C422 - C113 * C439 + C101 * C452 +
            C115 * C442 - C116 * C424 - C115 * C443 + C102 * C454 +
            C117 * C665 - C118 * C664 - C117 * C666 + C103 * C667) *
               C30963 * C30951 * C30870 -
           (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 +
            C115 * C134 - C116 * C123 - C115 * C135 + C102 * C144 +
            C113 * C132 - C114 * C122 - C113 * C133 + C101 * C143) *
               C30963 * C30951 * C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
             C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
             C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
                C30963 * C30951 * C31010 -
            (C117 * C426 - C118 * C416 - C117 * C427 + C103 * C446 +
             C115 * C428 - C116 * C417 - C115 * C429 + C102 * C447 +
             C113 * C430 - C114 * C418 - C113 * C431 + C101 * C448) *
                C30963 * C30951 * C30870) *
               C944 +
           ((C113 * C819 - C114 * C814 - C113 * C820 + C101 * C829 +
             C115 * C821 - C116 * C815 - C115 * C822 + C102 * C830 +
             C117 * C823 - C118 * C816 - C117 * C824 + C103 * C831) *
                C30963 * C30951 * C30870 -
            (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
             C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
             C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
                C30963 * C30951 * C31010) *
               C945 +
           ((C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
             C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
             C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
                C30963 * C30951 * C31010 -
            (C117 * C1167 - C118 * C1155 - C117 * C1168 + C103 * C1182 +
             C115 * C1169 - C116 * C1156 - C115 * C1170 + C102 * C1183 +
             C113 * C1171 - C114 * C1157 - C113 * C1172 + C101 * C1184) *
                C30963 * C30951 * C30870) *
               C31040) *
              C30995 +
          (((C113 * C428 - C114 * C417 - C113 * C429 + C101 * C447 +
             C115 * C426 - C116 * C416 - C115 * C427 + C102 * C446 +
             C117 * C438 - C118 * C422 - C117 * C439 + C103 * C452) *
                C30963 * C30951 * C30870 -
            (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
             C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
             C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
                C30963 * C30951 * C31010) *
               C944 +
           ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
             C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
             C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
                C30963 * C30951 * C31010 -
            (C117 * C825 - C118 * C817 - C117 * C826 + C103 * C832 +
             C115 * C823 - C116 * C816 - C115 * C824 + C102 * C831 +
             C113 * C821 - C114 * C815 - C113 * C822 + C101 * C830) *
                C30963 * C30951 * C30870) *
               C945 +
           ((C113 * C1169 - C114 * C1156 - C113 * C1170 + C101 * C1183 +
             C115 * C1167 - C116 * C1155 - C115 * C1168 + C102 * C1182 +
             C117 * C1443 - C118 * C1442 - C117 * C1444 + C103 * C1445) *
                C30963 * C30951 * C30870 -
            (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
             C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
             C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
                C30963 * C30951 * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C31010 -
           ((C4561 * C1171 - C4562 * C1157 - C4561 * C1172 + C30711 * C1184) *
                C30963 * C4560 +
            (C4561 * C819 - C4562 * C814 - C4561 * C820 + C30711 * C829) *
                C30963 * C4559 +
            (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                C30963 * C4558) *
               C30870) *
              C30765 * C556 +
          (((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                C30963 * C4558 +
            (C4561 * C821 - C4562 * C815 - C4561 * C822 + C30711 * C830) *
                C30963 * C4559 +
            (C4561 * C1169 - C4562 * C1156 - C4561 * C1170 + C30711 * C1183) *
                C30963 * C4560) *
               C30870 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C31010) *
              C30765 * C557 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C31010 -
           ((C4561 * C1167 - C4562 * C1155 - C4561 * C1168 + C30711 * C1182) *
                C30963 * C4560 +
            (C4561 * C823 - C4562 * C816 - C4561 * C824 + C30711 * C831) *
                C30963 * C4559 +
            (C4561 * C426 - C4562 * C416 - C4561 * C427 + C30711 * C446) *
                C30963 * C4558) *
               C30870) *
              C30765 * C558 +
          (((C4561 * C438 - C4562 * C422 - C4561 * C439 + C30711 * C452) *
                C30963 * C4558 +
            (C4561 * C825 - C4562 * C817 - C4561 * C826 + C30711 * C832) *
                C30963 * C4559 +
            (C4561 * C1443 - C4562 * C1442 - C4561 * C1444 + C30711 * C1445) *
                C30963 * C4560) *
               C30870 -
           (C4969 * C4560 + C4968 * C4559 +
            (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
                C30963 * C4558) *
               C31010) *
              C30765 * C31044)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(1.6875) * 2 * std::pow(Pi, 2.5) *
         (((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                 C30963 * C4558 +
             C4737 * C4559 + C4738 * C4560) *
                C31010 -
            (C5256 * C4560 + C5257 * C4559 +
             (C4561 * C430 - C4562 * C418 - C4561 * C431 + C30711 * C448) *
                 C30963 * C4558) *
                C30870) *
               C944 +
           ((C5257 * C4558 + C5256 * C4559 + C5610 * C4560) * C30870 -
            (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C31010) *
               C945 +
           ((C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C31010 -
            ((C4561 * C5572 - C4562 * C5568 - C4561 * C5573 + C30711 * C5577) *
                 C30963 * C4560 +
             C5610 * C4559 + C5256 * C4558) *
                C30870) *
               C31040) *
              C30995 +
          ((((C4561 * C428 - C4562 * C417 - C4561 * C429 + C30711 * C447) *
                 C30963 * C4558 +
             C5258 * C4559 + C5259 * C4560) *
                C30870 -
            (C4741 * C4560 + C4740 * C4559 +
             (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                 C30963 * C4558) *
                C31010) *
               C944 +
           ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C31010 -
            (C5879 * C4560 + C5259 * C4559 + C5258 * C4558) * C30870) *
               C945 +
           ((C5259 * C4558 + C5879 * C4559 +
             (C4561 * C5868 - C4562 * C5867 - C4561 * C5869 + C30711 * C5870) *
                 C30963 * C4560) *
                C30870 -
            (C5721 * C4560 + C4742 * C4559 + C4741 * C4558) * C31010) *
               C31040) *
              C30748)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C30765 * C108 -
          (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 + C115 * C130 -
           C116 * C121 - C115 * C131 + C102 * C142 + C113 * C128 - C114 * C120 -
           C113 * C129 + C101 * C141) *
              C30963 * C30951 * C30783 * C30765 * C109 +
          (C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 + C115 * C132 -
           C116 * C122 - C115 * C133 + C102 * C143 + C117 * C134 - C118 * C123 -
           C117 * C135 + C103 * C144) *
              C30963 * C30951 * C30783 * C30765 * C110 -
          (C117 * C136 - C118 * C124 - C117 * C137 + C103 * C145 + C115 * C134 -
           C116 * C123 - C115 * C135 + C102 * C144 + C113 * C132 - C114 * C122 -
           C113 * C133 + C101 * C143) *
              C30963 * C30951 * C30783 * C30765 * C111 +
          (C113 * C134 - C114 * C123 - C113 * C135 + C101 * C144 + C115 * C136 -
           C116 * C124 - C115 * C137 + C102 * C145 + C117 * C138 - C118 * C125 -
           C117 * C139 + C103 * C146) *
              C30963 * C30951 * C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C260 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C31065 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C261 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C31077 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C31065 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 +
            C115 * C128 - C116 * C120 - C115 * C129 + C102 * C141 +
            C117 * C130 - C118 * C121 - C117 * C131 + C103 * C142) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 +
            C115 * C275 - C116 * C264 - C115 * C276 + C102 * C294 +
            C113 * C277 - C114 * C265 - C113 * C278 + C101 * C295) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 +
            C115 * C281 - C116 * C267 - C115 * C282 + C102 * C297 +
            C117 * C283 - C118 * C268 - C117 * C284 + C103 * C298) *
               C30963 * C30951 * C30783 * C31040) *
              C31074 +
          ((C113 * C275 - C114 * C264 - C113 * C276 + C101 * C294 +
            C115 * C273 - C116 * C263 - C115 * C274 + C102 * C293 +
            C117 * C285 - C118 * C269 - C117 * C286 + C103 * C299) *
               C30963 * C30951 * C30783 * C945 -
           (C117 * C132 - C118 * C122 - C117 * C133 + C103 * C143 +
            C115 * C130 - C116 * C121 - C115 * C131 + C102 * C142 +
            C113 * C128 - C114 * C120 - C113 * C129 + C101 * C141) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C287 - C118 * C270 - C117 * C288 + C103 * C300 +
            C115 * C283 - C116 * C268 - C115 * C284 + C102 * C298 +
            C113 * C281 - C114 * C267 - C113 * C282 + C101 * C297) *
               C30963 * C30951 * C30783 * C31040) *
              C31061 +
          ((C113 * C130 - C114 * C121 - C113 * C131 + C101 * C142 +
            C115 * C132 - C116 * C122 - C115 * C133 + C102 * C143 +
            C117 * C134 - C118 * C123 - C117 * C135 + C103 * C144) *
               C30963 * C30951 * C30783 * C944 -
           (C117 * C289 - C118 * C271 - C117 * C290 + C103 * C301 +
            C115 * C285 - C116 * C269 - C115 * C286 + C102 * C299 +
            C113 * C273 - C114 * C263 - C113 * C274 + C101 * C293) *
               C30963 * C30951 * C30783 * C945 +
           (C113 * C283 - C114 * C268 - C113 * C284 + C101 * C298 +
            C115 * C287 - C116 * C270 - C115 * C288 + C102 * C300 +
            C117 * C291 - C118 * C272 - C117 * C292 + C103 * C302) *
               C30963 * C30951 * C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((C113 * C126 - C114 * C119 - C113 * C127 + C101 * C140 + C115 * C128 -
           C116 * C120 - C115 * C129 + C102 * C141 + C117 * C130 - C118 * C121 -
           C117 * C131 + C103 * C142) *
              C30963 * C30951 * C30783 * C1012 -
          (C117 * C273 - C118 * C263 - C117 * C274 + C103 * C293 + C115 * C275 -
           C116 * C264 - C115 * C276 + C102 * C294 + C113 * C277 - C114 * C265 -
           C113 * C278 + C101 * C295) *
              C30963 * C30951 * C30783 * C1013 +
          (C113 * C279 - C114 * C266 - C113 * C280 + C101 * C296 + C115 * C281 -
           C116 * C267 - C115 * C282 + C102 * C297 + C117 * C283 - C118 * C268 -
           C117 * C284 + C103 * C298) *
              C30963 * C30951 * C30783 * C1014 -
          (C117 * C1024 - C118 * C1018 - C117 * C1025 + C103 * C1036 +
           C115 * C1026 - C116 * C1019 - C115 * C1027 + C102 * C1037 +
           C113 * C1028 - C114 * C1020 - C113 * C1029 + C101 * C1038) *
              C30963 * C30951 * C30783 * C1015 +
          (C113 * C1030 - C114 * C1021 - C113 * C1031 + C101 * C1039 +
           C115 * C1032 - C116 * C1022 - C115 * C1033 + C102 * C1040 +
           C117 * C1034 - C118 * C1023 - C117 * C1035 + C103 * C1041) *
              C30963 * C30951 * C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           (C4561 * C277 - C4562 * C265 - C4561 * C278 + C30711 * C295) *
               C30963 * C4559 +
           (C4561 * C279 - C4562 * C266 - C4561 * C280 + C30711 * C296) *
               C30963 * C4560) *
              C30783 * C30765 * C108 -
          ((C4561 * C281 - C4562 * C267 - C4561 * C282 + C30711 * C297) *
               C30963 * C4560 +
           (C4561 * C275 - C4562 * C264 - C4561 * C276 + C30711 * C294) *
               C30963 * C4559 +
           (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
               C30963 * C4558) *
              C30783 * C30765 * C109 +
          ((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
               C30963 * C4558 +
           (C4561 * C273 - C4562 * C263 - C4561 * C274 + C30711 * C293) *
               C30963 * C4559 +
           (C4561 * C283 - C4562 * C268 - C4561 * C284 + C30711 * C298) *
               C30963 * C4560) *
              C30783 * C30765 * C110 -
          ((C4561 * C287 - C4562 * C270 - C4561 * C288 + C30711 * C300) *
               C30963 * C4560 +
           (C4561 * C285 - C4562 * C269 - C4561 * C286 + C30711 * C299) *
               C30963 * C4559 +
           (C4561 * C132 - C4562 * C122 - C4561 * C133 + C30711 * C143) *
               C30963 * C4558) *
              C30783 * C30765 * C111 +
          ((C4561 * C134 - C4562 * C123 - C4561 * C135 + C30711 * C144) *
               C30963 * C4558 +
           (C4561 * C289 - C4562 * C271 - C4561 * C290 + C30711 * C301) *
               C30963 * C4559 +
           (C4561 * C291 - C4562 * C272 - C4561 * C292 + C30711 * C302) *
               C30963 * C4560) *
              C30783 * C30765 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C31077 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C31065 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C260 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C31065 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C31077 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C261 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C31077 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C31065 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         ((((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
                C30963 * C4558 +
            C4737 * C4559 + C4738 * C4560) *
               C30783 * C944 -
           (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C945 +
           (C4738 * C4558 + C4739 * C4559 +
            (C4561 * C1030 - C4562 * C1021 - C4561 * C1031 + C30711 * C1039) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31074 +
          ((C4740 * C4558 + C4741 * C4559 + C4742 * C4560) * C30783 * C945 -
           (C4741 * C4560 + C4740 * C4559 +
            (C4561 * C128 - C4562 * C120 - C4561 * C129 + C30711 * C141) *
                C30963 * C4558) *
               C30783 * C944 -
           ((C4561 * C1032 - C4562 * C1022 - C4561 * C1033 + C30711 * C1040) *
                C30963 * C4560 +
            C4742 * C4559 + C4741 * C4558) *
               C30783 * C31040) *
              C31061 +
          (((C4561 * C130 - C4562 * C121 - C4561 * C131 + C30711 * C142) *
                C30963 * C4558 +
            C4743 * C4559 + C4744 * C4560) *
               C30783 * C944 -
           (C4745 * C4560 + C4744 * C4559 + C4743 * C4558) * C30783 * C945 +
           (C4744 * C4558 + C4745 * C4559 +
            (C4561 * C1034 - C4562 * C1023 - C4561 * C1035 + C30711 * C1041) *
                C30963 * C4560) *
               C30783 * C31040) *
              C31034)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.421875) * 2 * std::pow(Pi, 2.5) *
         (((C4561 * C126 - C4562 * C119 - C4561 * C127 + C30711 * C140) *
               C30963 * C4558 +
           C4737 * C4559 + C4738 * C4560) *
              C30783 * C1012 -
          (C4739 * C4560 + C4738 * C4559 + C4737 * C4558) * C30783 * C1013 +
          (C4738 * C4558 + C4739 * C4559 + C5456 * C4560) * C30783 * C1014 -
          (C5457 * C4560 + C5456 * C4559 + C4739 * C4558) * C30783 * C1015 +
          (C5456 * C4558 + C5457 * C4559 +
           (C4561 * C5437 - C4562 * C5434 - C4561 * C5438 + C30711 * C5440) *
               C30963 * C4560) *
              C30783 * C1016) *
         C30737) /
            (p * q * std::sqrt(p + q));
}
